class StAXSchemaParser
!!!4800642.java!!!	StAXSchemaParser()
        fNamespaceContext.setDeclaredPrefixes(fDeclaredPrefixes);
!!!4800770.java!!!	reset(inout schemaDOMParser : SchemaDOMParser, inout symbolTable : SymbolTable) : void
        fSchemaDOMParser = schemaDOMParser;
        fSymbolTable = symbolTable;
        fNamespaceContext.setSymbolTable(fSymbolTable);
        fNamespaceContext.reset();
!!!4800898.java!!!	getDocument() : Document
        return fSchemaDOMParser.getDocument();
!!!4801026.java!!!	parse(inout input : XMLEventReader) : void
        XMLEvent currentEvent = input.peek();
        if (currentEvent != null) {
            int eventType = currentEvent.getEventType();
            if (eventType != XMLStreamConstants.START_DOCUMENT &&
                eventType != XMLStreamConstants.START_ELEMENT) {
                throw new XMLStreamException();
            }
            fLocationWrapper.setLocation(currentEvent.getLocation());
            fSchemaDOMParser.startDocument(fLocationWrapper, null, fNamespaceContext, null);
            loop: while (input.hasNext()) {
                currentEvent = input.nextEvent();
                eventType = currentEvent.getEventType();
                switch (eventType) {
                case XMLStreamConstants.START_ELEMENT:
                    ++fDepth;
                    StartElement start = currentEvent.asStartElement();
                    fillQName(fElementQName, start.getName());
                    fLocationWrapper.setLocation(start.getLocation());
                    fNamespaceContext.setNamespaceContext(start.getNamespaceContext());
                    fillXMLAttributes(start);
                    fillDeclaredPrefixes(start);
                    addNamespaceDeclarations();
                    fNamespaceContext.pushContext();
                    fSchemaDOMParser.startElement(fElementQName, fAttributes, null);
                    break;
                case XMLStreamConstants.END_ELEMENT:
                    EndElement end = currentEvent.asEndElement();
                    fillQName(fElementQName, end.getName());
                    fillDeclaredPrefixes(end);
                    fLocationWrapper.setLocation(end.getLocation());
                    fSchemaDOMParser.endElement(fElementQName, null);
                    fNamespaceContext.popContext();
                    --fDepth;
                    if (fDepth <= 0) {
                        break loop;
                    }
                    break;
                case XMLStreamConstants.CHARACTERS:
                    sendCharactersToSchemaParser(currentEvent.asCharacters().getData(), false);
                    break;
                case XMLStreamConstants.SPACE:
                    sendCharactersToSchemaParser(currentEvent.asCharacters().getData(), true);
                    break;
                case XMLStreamConstants.CDATA:
                    fSchemaDOMParser.startCDATA(null);
                    sendCharactersToSchemaParser(currentEvent.asCharacters().getData(), false);
                    fSchemaDOMParser.endCDATA(null);
                    break;
                case XMLStreamConstants.PROCESSING_INSTRUCTION:
                    ProcessingInstruction pi = (ProcessingInstruction)currentEvent;
                    fillProcessingInstruction(pi.getData());
                    fSchemaDOMParser.processingInstruction(pi.getTarget(), fTempString, null);
                    break;
                case XMLStreamConstants.DTD:
                    /* There shouldn't be a DTD in the schema */
                    break;
                case XMLStreamConstants.ENTITY_REFERENCE:
                    /* Not needed for schemas */
                    break;
                case XMLStreamConstants.COMMENT:
                    /* No point in sending comments */
                    break;
                case XMLStreamConstants.START_DOCUMENT:
                    fDepth++;
                    /* We automatically call startDocument before the loop */
                    break;
                case XMLStreamConstants.END_DOCUMENT:
                    /* We automatically call endDocument after the loop */
                    break;
                }
            }
            fLocationWrapper.setLocation(null);
            fNamespaceContext.setNamespaceContext(null);
            fSchemaDOMParser.endDocument(null);
        }
!!!4801154.java!!!	parse(inout input : XMLStreamReader) : void
        if (input.hasNext()) {
            int eventType = input.getEventType();
            if (eventType != XMLStreamConstants.START_DOCUMENT &&
                eventType != XMLStreamConstants.START_ELEMENT) {
                throw new XMLStreamException();
            }
            fLocationWrapper.setLocation(input.getLocation());
            fSchemaDOMParser.startDocument(fLocationWrapper, null, fNamespaceContext, null);
            boolean first = true;
            loop: while (input.hasNext()) {
                if (!first) {
                    eventType = input.next();
                }
                else {
                    first = false;
                }
                switch (eventType) {
                case XMLStreamConstants.START_ELEMENT:
                    ++fDepth;
                    fLocationWrapper.setLocation(input.getLocation());
                    fNamespaceContext.setNamespaceContext(input.getNamespaceContext());
                    fillQName(fElementQName, input.getNamespaceURI(),
                        input.getLocalName(), input.getPrefix());
                    fillXMLAttributes(input);
                    fillDeclaredPrefixes(input);
                    addNamespaceDeclarations();
                    fNamespaceContext.pushContext();
                    fSchemaDOMParser.startElement(fElementQName, fAttributes, null);
                    break;
                case XMLStreamConstants.END_ELEMENT:
                    fLocationWrapper.setLocation(input.getLocation());
                    fNamespaceContext.setNamespaceContext(input.getNamespaceContext());
                    fillQName(fElementQName, input.getNamespaceURI(),
                        input.getLocalName(), input.getPrefix());
                    fillDeclaredPrefixes(input);
                    fSchemaDOMParser.endElement(fElementQName, null);
                    fNamespaceContext.popContext();
                    --fDepth;
                    if (fDepth <= 0) {
                        break loop;
                    }
                    break;
                case XMLStreamConstants.CHARACTERS:
                    fTempString.setValues(input.getTextCharacters(),
                        input.getTextStart(), input.getTextLength());
                    fSchemaDOMParser.characters(fTempString, null);
                    break;
                case XMLStreamConstants.SPACE:
                    fTempString.setValues(input.getTextCharacters(),
                        input.getTextStart(), input.getTextLength());
                    fSchemaDOMParser.ignorableWhitespace(fTempString, null);
                    break;
                case XMLStreamConstants.CDATA:
                    fSchemaDOMParser.startCDATA(null);
                    fTempString.setValues(input.getTextCharacters(),
                        input.getTextStart(), input.getTextLength());
                    fSchemaDOMParser.characters(fTempString, null);
                    fSchemaDOMParser.endCDATA(null);
                    break;
                case XMLStreamConstants.PROCESSING_INSTRUCTION:
                    fillProcessingInstruction(input.getPIData());
                    fSchemaDOMParser.processingInstruction(input.getPITarget(), fTempString, null);
                    break;
                case XMLStreamConstants.DTD:
                    /* There shouldn't be a DTD in the schema */
                    break;
                case XMLStreamConstants.ENTITY_REFERENCE:
                    /* Not needed for schemas */
                    break;
                case XMLStreamConstants.COMMENT:
                    /* No point in sending comments */
                    break;
                case XMLStreamConstants.START_DOCUMENT:
                    ++fDepth;
                    /* We automatically call startDocument before the loop */
                    break;
                case XMLStreamConstants.END_DOCUMENT:
                    /* We automatically call endDocument after the loop */
                    break;
                }
            }
            fLocationWrapper.setLocation(null);
            fNamespaceContext.setNamespaceContext(null);
            fSchemaDOMParser.endDocument(null);
        }
!!!4801282.java!!!	sendCharactersToSchemaParser(inout str : String, inout whitespace : boolean) : void
        if (str != null) {
            final int length = str.length();
            final int remainder = length & CHUNK_MASK;
            if (remainder > 0) {
                str.getChars(0, remainder, fCharBuffer, 0);
                fTempString.setValues(fCharBuffer, 0, remainder);
                if (whitespace) {
                    fSchemaDOMParser.ignorableWhitespace(fTempString, null);
                }
                else {
                    fSchemaDOMParser.characters(fTempString, null);
                }
            }
            int i = remainder;
            while (i < length) {
                str.getChars(i, i += CHUNK_SIZE, fCharBuffer, 0);
                fTempString.setValues(fCharBuffer, 0, CHUNK_SIZE);
                if (whitespace) {
                    fSchemaDOMParser.ignorableWhitespace(fTempString, null);
                }
                else {
                    fSchemaDOMParser.characters(fTempString, null);
                }
            }
        }
!!!4801410.java!!!	fillProcessingInstruction(inout data : String) : void
        final int dataLength = data.length();
        char [] charBuffer = fCharBuffer;
        if (charBuffer.length < dataLength) {
            // toCharArray() creates a newly allocated array, so it's okay
            // to keep a reference to it.
            charBuffer = data.toCharArray();
        }
        else {
            data.getChars(0, dataLength, charBuffer, 0);
        }
        fTempString.setValues(charBuffer, 0, dataLength);
!!!4801538.java!!!	fillXMLAttributes(inout event : StartElement) : void
        fAttributes.removeAllAttributes();
        final Iterator attrs = event.getAttributes();
        while (attrs.hasNext()) {
            Attribute attr = (Attribute) attrs.next();
            fillQName(fAttributeQName, attr.getName());
            String type = attr.getDTDType();
            int idx = fAttributes.getLength();
            fAttributes.addAttributeNS(fAttributeQName,
                    (type != null) ? type : XMLSymbols.fCDATASymbol, attr.getValue());
            fAttributes.setSpecified(idx, attr.isSpecified());
        }
!!!4801666.java!!!	fillXMLAttributes(inout input : XMLStreamReader) : void
        fAttributes.removeAllAttributes();
        final int len = input.getAttributeCount();
        for (int i = 0; i < len; ++i) {
            fillQName(fAttributeQName, input.getAttributeNamespace(i),
                input.getAttributeLocalName(i), input.getAttributePrefix(i));
            String type = input.getAttributeType(i);
            fAttributes.addAttributeNS(fAttributeQName,
                    (type != null) ? type : XMLSymbols.fCDATASymbol, input.getAttributeValue(i));
            fAttributes.setSpecified(i, input.isAttributeSpecified(i));
        }
!!!4801794.java!!!	addNamespaceDeclarations() : void
        String prefix = null;
        String localpart = null;
        String rawname = null;
        String nsPrefix = null;
        String nsURI = null;

        final Iterator iter = fDeclaredPrefixes.iterator();
        while (iter.hasNext()) {
            nsPrefix = (String) iter.next();
            nsURI = fNamespaceContext.getURI(nsPrefix);
            if (nsPrefix.length() > 0) {
                prefix = XMLSymbols.PREFIX_XMLNS;
                localpart = nsPrefix;
                fStringBuffer.clear();
                fStringBuffer.append(prefix);
                fStringBuffer.append(':');
                fStringBuffer.append(localpart);
                rawname = fSymbolTable.addSymbol(fStringBuffer.ch, fStringBuffer.offset, fStringBuffer.length);
            }
            else {
                prefix = XMLSymbols.EMPTY_STRING;
                localpart = XMLSymbols.PREFIX_XMLNS;
                rawname = XMLSymbols.PREFIX_XMLNS;
            }
            fAttributeQName.setValues(prefix, localpart, rawname, NamespaceContext.XMLNS_URI);
            fAttributes.addAttribute(fAttributeQName, XMLSymbols.fCDATASymbol,
                    (nsURI != null) ? nsURI : XMLSymbols.EMPTY_STRING);
        }
!!!4801922.java!!!	fillDeclaredPrefixes(inout event : StartElement) : void
        fillDeclaredPrefixes(event.getNamespaces());
!!!4802050.java!!!	fillDeclaredPrefixes(inout event : EndElement) : void
        fillDeclaredPrefixes(event.getNamespaces());
!!!4802178.java!!!	fillDeclaredPrefixes(inout namespaces : Iterator) : void
        fDeclaredPrefixes.clear();
        while (namespaces.hasNext()) {
            Namespace ns = (Namespace) namespaces.next();
            String prefix = ns.getPrefix();
            fDeclaredPrefixes.add(prefix != null ? prefix : "");
        }
!!!4802306.java!!!	fillDeclaredPrefixes(inout reader : XMLStreamReader) : void
        fDeclaredPrefixes.clear();
        final int len = reader.getNamespaceCount();
        for (int i = 0; i < len; ++i) {
            String prefix = reader.getNamespacePrefix(i);
            fDeclaredPrefixes.add(prefix != null ? prefix : "");
        }
!!!4802434.java!!!	fillQName(inout toFill : QName, inout toCopy : QName) : void
        fillQName(toFill, toCopy.getNamespaceURI(), toCopy.getLocalPart(), toCopy.getPrefix());
!!!4802562.java!!!	fillQName(inout toFill : QName, inout uri : String, inout localpart : String, inout prefix : String) : void
        uri = (uri != null && uri.length() > 0) ? fSymbolTable.addSymbol(uri) : null;
        localpart = (localpart != null) ? fSymbolTable.addSymbol(localpart) : XMLSymbols.EMPTY_STRING;
        prefix = (prefix != null && prefix.length() > 0) ? fSymbolTable.addSymbol(prefix) : XMLSymbols.EMPTY_STRING;
        String raw = localpart;
        if (prefix != XMLSymbols.EMPTY_STRING) {
            fStringBuffer.clear();
            fStringBuffer.append(prefix);
            fStringBuffer.append(':');
            fStringBuffer.append(localpart);
            raw = fSymbolTable.addSymbol(fStringBuffer.ch, fStringBuffer.offset, fStringBuffer.length);
        }
        toFill.setValues(prefix, localpart, raw, uri);
