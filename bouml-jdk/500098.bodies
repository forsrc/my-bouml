class Util
!!!2997506.java!!!	newObjectName(inout string : String) : ObjectName
        try {
            return new ObjectName(string);
        } catch (MalformedObjectNameException e) {
            throw new IllegalArgumentException(e);
        }
!!!2997634.java!!!	newMap() : Map
        return new HashMap<K, V>();
!!!2997762.java!!!	newSynchronizedMap() : Map
        return Collections.synchronizedMap(Util.<K, V>newMap());
!!!2997890.java!!!	newIdentityHashMap() : IdentityHashMap
        return new IdentityHashMap<K, V>();
!!!2998018.java!!!	newSynchronizedIdentityHashMap() : Map
        Map<K, V> map = newIdentityHashMap();
        return Collections.synchronizedMap(map);
!!!2998146.java!!!	newSortedMap() : SortedMap
        return new TreeMap<K, V>();
!!!2998274.java!!!	newSortedMap(inout comp : Comparator) : SortedMap
        return new TreeMap<K, V>(comp);
!!!2998402.java!!!	newInsertionOrderMap() : Map
        return new LinkedHashMap<K, V>();
!!!2998530.java!!!	newSet() : Set
        return new HashSet<E>();
!!!2998658.java!!!	newSet(inout c : Collection) : Set
        return new HashSet<E>(c);
!!!2998786.java!!!	newList() : List
        return new ArrayList<E>();
!!!2998914.java!!!	newList(inout c : Collection) : List
        return new ArrayList<E>(c);
!!!2999042.java!!!	cast(inout x : Object) : T
        return (T) x;
!!!2999170.java!!!	hashCode(inout names : String [[]], inout values : Object [[]]) : int
        int hash = 0;
        for (int i = 0; i < names.length; i++) {
            Object v = values[i];
            int h;
            if (v == null) {
                h = 0;
            } else if (v instanceof Object[]) {
                h = Arrays.deepHashCode((Object[]) v);
            } else if (v.getClass().isArray()) {
                h = Arrays.deepHashCode(new Object[]{v}) - 31;
            // hashcode of a list containing just v is
            // v.hashCode() + 31, see List.hashCode()
            } else {
                h = v.hashCode();
            }
            hash += names[i].toLowerCase().hashCode() ^ h;
        }
        return hash;
!!!2999298.java!!!	wildmatch(in str : String, in pat : String, in stri : int, in strend : int, in pati : int, in patend : int) : boolean

        // System.out.println("matching "+pat.substring(pati,patend)+
        //        " against "+str.substring(stri, strend));
        int starstri; // index for backtrack if "*" attempt fails
        int starpati; // index for backtrack if "*" attempt fails, +1

        starstri = starpati = -1;

        /* On each pass through this loop, we either advance pati,
           or we backtrack pati and advance starstri.  Since starstri
           is only ever assigned from pati, the loop must terminate.  */
        while (true) {
            if (pati < patend) {
                final char patc = pat.charAt(pati);
                switch (patc) {
                case '?':
                    if (stri == strend)
                        break;
                    stri++;
                    pati++;
                    continue;
                case '*':
                    pati++;
                    starpati = pati;
                    starstri = stri;
                    continue;
                default:
                    if (stri < strend && str.charAt(stri) == patc) {
                        stri++;
                        pati++;
                        continue;
                    }
                    break;
                }
            } else if (stri == strend)
                return true;

            // Mismatched, can we backtrack to a "*"?
            if (starpati < 0 || starstri == strend)
                return false;

            // Retry the match one position later in str
            pati = starpati;
            starstri++;
            stri = starstri;
        }
!!!2999426.java!!!	wildmatch(inout str : String, inout pat : String) : boolean
        return wildmatch(str,pat,0,str.length(),0,pat.length());
