class BinaryRelQueryExp
!!!9747202.java!!!	BinaryRelQueryExp(in op : int, inout v1 : ValueExp, inout v2 : ValueExp)
        relOp = op;
        exp1  = v1;
        exp2  = v2;
!!!9747330.java!!!	getOperator() : int
        return relOp;
!!!9747458.java!!!	getLeftValue() : ValueExp
        return exp1;
!!!9747586.java!!!	getRightValue() : ValueExp
        return exp2;
!!!9747714.java!!!	apply(inout name : ObjectName) : boolean
        Object val1 = exp1.apply(name);
        Object val2 = exp2.apply(name);
        boolean numeric = val1 instanceof NumericValueExp;
        boolean bool = val1 instanceof BooleanValueExp;
        if (numeric) {
            if (((NumericValueExp)val1).isLong()) {
                long lval1 = ((NumericValueExp)val1).longValue();
                long lval2 = ((NumericValueExp)val2).longValue();

                switch (relOp) {
                case Query.GT:
                    return lval1 > lval2;
                case Query.LT:
                    return lval1 < lval2;
                case Query.GE:
                    return lval1 >= lval2;
                case Query.LE:
                    return lval1 <= lval2;
                case Query.EQ:
                    return lval1 == lval2;
                }
            } else {
                double dval1 = ((NumericValueExp)val1).doubleValue();
                double dval2 = ((NumericValueExp)val2).doubleValue();

                switch (relOp) {
                case Query.GT:
                    return dval1 > dval2;
                case Query.LT:
                    return dval1 < dval2;
                case Query.GE:
                    return dval1 >= dval2;
                case Query.LE:
                    return dval1 <= dval2;
                case Query.EQ:
                    return dval1 == dval2;
                }
            }

        } else if (bool) {

            boolean bval1 = ((BooleanValueExp)val1).getValue().booleanValue();
            boolean bval2 = ((BooleanValueExp)val2).getValue().booleanValue();

            switch (relOp) {
            case Query.GT:
                return bval1 && !bval2;
            case Query.LT:
                return !bval1 && bval2;
            case Query.GE:
                return bval1 || !bval2;
            case Query.LE:
                return !bval1 || bval2;
            case Query.EQ:
                return bval1 == bval2;
            }

        } else {
            String sval1 = ((StringValueExp)val1).getValue();
            String sval2 = ((StringValueExp)val2).getValue();

            switch (relOp) {
            case Query.GT:
                return sval1.compareTo(sval2) > 0;
            case Query.LT:
                return sval1.compareTo(sval2) < 0;
            case Query.GE:
                return sval1.compareTo(sval2) >= 0;
            case Query.LE:
                return sval1.compareTo(sval2) <= 0;
            case Query.EQ:
                return sval1.compareTo(sval2) == 0;
            }
        }

        return false;
!!!9747842.java!!!	toString() : String
        return "(" + exp1 + ") " + relOpString() + " (" + exp2 + ")";
!!!9747970.java!!!	relOpString() : String
        switch (relOp) {
        case Query.GT:
            return ">";
        case Query.LT:
            return "<";
        case Query.GE:
            return ">=";
        case Query.LE:
            return "<=";
        case Query.EQ:
            return "=";
        }

        return "=";
