format 222
"dom" // jdk1.8::javax::xml::transform::dom
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/xml/transform/dom/"
  java_package "javax.xml.transform.dom"
  classview 164866 "dom"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 724994 "DOMResult"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Acts as a holder for a transformation result tree in the form of a Document Object Model (DOM) tree.</p>

<p>If no output DOM source is set, the transformation will create a Document node as the holder for the result of the transformation,
which may be retrieved with {@link #getNode()}.</p>

@author <a href=\"Jeff.Suttor@Sun.com\">Jeff Suttor</a>
"
      classrelation 4788098 // <realization>
	relation 4788098 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4788098 // <realization>
	  b parent class_ref 645506 // Result
      end

      classrelation 4788226 // FEATURE (<unidirectional association>)
	relation 4788226 --->
	  a role_name "FEATURE" init_value " \"http://javax.xml.transform.dom.DOMResult/feature\"" class_relation const_relation public
	    comment " <p>If {@link javax.xml.transform.TransformerFactory#getFeature}
returns <code>true</code> when passed this value as an argument,
the <code>Transformer</code> supports <code>Result</code> output of this type.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4788226 // FEATURE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12063874 "DOMResult"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Zero-argument default constructor.</p>

<p><code>node</code>,
<code>siblingNode</code> and
<code>systemId</code>
will be set to <code>null</code>.</p>
"
      end

      operation 12064002 "DOMResult"
	public explicit_return_type ""
	nparams 1
	  param inout name "node" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Use a DOM node to create a new output target.</p>

<p>In practice, the node should be
a {@link org.w3c.dom.Document} node,
a {@link org.w3c.dom.DocumentFragment} node, or
a {@link org.w3c.dom.Element} node.
In other words, a node that accepts children.</p>

<p><code>siblingNode</code> and
<code>systemId</code>
will be set to <code>null</code>.</p>

@param node The DOM node that will contain the result tree.
"
      end

      operation 12064130 "DOMResult"
	public explicit_return_type ""
	nparams 2
	  param inout name "node" type class_ref 317570 // Node
	  param inout name "systemId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Use a DOM node to create a new output target with the specified System ID.<p>

<p>In practice, the node should be
a {@link org.w3c.dom.Document} node,
a {@link org.w3c.dom.DocumentFragment} node, or
a {@link org.w3c.dom.Element} node.
In other words, a node that accepts children.</p>

<p><code>siblingNode</code> will be set to <code>null</code>.</p>

@param node The DOM node that will contain the result tree.
@param systemId The system identifier which may be used in association with this node.
"
      end

      operation 12064258 "DOMResult"
	public explicit_return_type ""
	nparams 2
	  param inout name "node" type class_ref 317570 // Node
	  param inout name "nextSibling" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before.</p>

<p>In practice, <code>node</code> and <code>nextSibling</code> should be
a {@link org.w3c.dom.Document} node,
a {@link org.w3c.dom.DocumentFragment} node, or
a {@link org.w3c.dom.Element} node.
In other words, a node that accepts children.</p>

<p>Use <code>nextSibling</code> to specify the child node
where the result nodes should be inserted before.
If <code>nextSibling</code> is not a sibling of <code>node</code>,
then an <code>IllegalArgumentException</code> is thrown.
If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>,
then an <code>IllegalArgumentException</code> is thrown.
If <code>nextSibling</code> is <code>null</code>,
then the behavior is the same as calling {@link #DOMResult(Node node)},
i.e. append the result nodes as the last child of the specified <code>node</code>.</p>

<p><code>systemId</code> will be set to <code>null</code>.</p>

@param node The DOM node that will contain the result tree.
@param nextSibling The child node where the result nodes should be inserted before.

@throws IllegalArgumentException If <code>nextSibling</code> is not a sibling of <code>node</code> or
  <code>node</code> is <code>null</code> and <code>nextSibling</code>
  is not <code>null</code>.

@since 1.5
"
      end

      operation 12064386 "DOMResult"
	public explicit_return_type ""
	nparams 3
	  param inout name "node" type class_ref 317570 // Node
	  param inout name "nextSibling" type class_ref 317570 // Node
	  param inout name "systemId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before and
the specified System ID.</p>

<p>In practice, <code>node</code> and <code>nextSibling</code> should be
a {@link org.w3c.dom.Document} node,
a {@link org.w3c.dom.DocumentFragment} node, or a
{@link org.w3c.dom.Element} node.
In other words, a node that accepts children.</p>

<p>Use <code>nextSibling</code> to specify the child node
where the result nodes should be inserted before.
If <code>nextSibling</code> is not a sibling of <code>node</code>,
then an <code>IllegalArgumentException</code> is thrown.
If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>,
then an <code>IllegalArgumentException</code> is thrown.
If <code>nextSibling</code> is <code>null</code>,
then the behavior is the same as calling {@link #DOMResult(Node node, String systemId)},
i.e. append the result nodes as the last child of the specified node and use the specified System ID.</p>

@param node The DOM node that will contain the result tree.
@param nextSibling The child node where the result nodes should be inserted before.
@param systemId The system identifier which may be used in association with this node.

@throws IllegalArgumentException If <code>nextSibling</code> is not a
  sibling of <code>node</code> or
  <code>node</code> is <code>null</code> and <code>nextSibling</code>
  is not <code>null</code>.

@since 1.5
"
      end

      operation 12064514 "setNode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Set the node that will contain the result DOM tree.<p>

<p>In practice, the node should be
a {@link org.w3c.dom.Document} node,
a {@link org.w3c.dom.DocumentFragment} node, or
a {@link org.w3c.dom.Element} node.
In other words, a node that accepts children.</p>

<p>An <code>IllegalStateException</code> is thrown if
<code>nextSibling</code> is not <code>null</code> and
<code>node</code> is not a parent of <code>nextSibling</code>.
An <code>IllegalStateException</code> is thrown if <code>node</code> is <code>null</code> and
<code>nextSibling</code> is not <code>null</code>.</p>

@param node The node to which the transformation will be appended.

@throws IllegalStateException If <code>nextSibling</code> is not
  <code>null</code> and
  <code>nextSibling</code> is not a child of <code>node</code> or
  <code>node</code> is <code>null</code> and
  <code>nextSibling</code> is not <code>null</code>.
"
      end

      operation 12064642 "getNode"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get the node that will contain the result DOM tree.</p>

<p>If no node was set via
{@link #DOMResult(Node node)},
{@link #DOMResult(Node node, String systeId)},
{@link #DOMResult(Node node, Node nextSibling)},
{@link #DOMResult(Node node, Node nextSibling, String systemId)} or
{@link #setNode(Node node)},
then the node will be set by the transformation, and may be obtained from this method once the transformation is complete.
Calling this method before the transformation will return <code>null</code>.</p>

@return The node to which the transformation will be appended.
"
      end

      operation 12064770 "setNextSibling"
	public explicit_return_type "void"
	nparams 1
	  param inout name "nextSibling" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Set the child node before which the result nodes will be inserted.</p>

<p>Use <code>nextSibling</code> to specify the child node
before which the result nodes should be inserted.
If <code>nextSibling</code> is not a descendant of <code>node</code>,
then an <code>IllegalArgumentException</code> is thrown.
If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>,
then an <code>IllegalStateException</code> is thrown.
If <code>nextSibling</code> is <code>null</code>,
then the behavior is the same as calling {@link #DOMResult(Node node)},
i.e. append the result nodes as the last child of the specified <code>node</code>.</p>

@param nextSibling The child node before which the result nodes will be inserted.

@throws IllegalArgumentException If <code>nextSibling</code> is not a
  descendant of <code>node</code>.
@throws IllegalStateException If <code>node</code> is <code>null</code>
  and <code>nextSibling</code> is not <code>null</code>.

@since 1.5
"
      end

      operation 12064898 "getNextSibling"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get the child node before which the result nodes will be inserted.</p>

<p>If no node was set via
{@link #DOMResult(Node node, Node nextSibling)},
{@link #DOMResult(Node node, Node nextSibling, String systemId)} or
{@link #setNextSibling(Node nextSibling)},
then <code>null</code> will be returned.</p>

@return The child node before which the result nodes will be inserted.

@since 1.5
"
      end

      operation 12065026 "setSystemId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "systemId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Set the systemId that may be used in association with the node.</p>

@param systemId The system identifier as a URI string.
"
      end

      operation 12065154 "getSystemId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get the System Identifier.</p>

<p>If no System ID was set via
{@link #DOMResult(Node node, String systemId)},
{@link #DOMResult(Node node, Node nextSibling, String systemId)} or
{@link #setSystemId(String systemId)},
then <code>null</code> will be returned.</p>

@return The system identifier.
"
      end

      classrelation 4788354 // node (<unidirectional association>)
	relation 4788354 --->
	  a role_name "node" init_value " null" private
	    comment "////////////////////////////////////////////////////////////////////
 Internal state.
////////////////////////////////////////////////////////////////////

<p>The node to which the transformation will be appended.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4788354 // node (<unidirectional association>)
	  b parent class_ref 317570 // Node
      end

      classrelation 4788482 // nextSibling (<unidirectional association>)
	relation 4788482 --->
	  a role_name "nextSibling" init_value " null" private
	    comment "
<p>The child node before which the result nodes will be inserted.</p>

@since 1.5

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4788482 // nextSibling (<unidirectional association>)
	  b parent class_ref 317570 // Node
      end

      classrelation 4788610 // systemId (<unidirectional association>)
	relation 4788610 --->
	  a role_name "systemId" init_value " null" private
	    comment "
<p>The System ID that may be used in association with the node.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4788610 // systemId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end
    end

    class 725890 "DOMSource"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Acts as a holder for a transformation Source tree in the
form of a Document Object Model (DOM) tree.</p>

<p>Note that XSLT requires namespace support. Attempting to transform a DOM
that was not contructed with a namespace-aware parser may result in errors.
Parsers can be made namespace aware by calling
{@link javax.xml.parsers.DocumentBuilderFactory#setNamespaceAware(boolean awareness)}.</p>

@author <a href=\"Jeff.Suttor@Sun.com\">Jeff Suttor</a>
@see <a href=\"http://www.w3.org/TR/DOM-Level-2\">Document Object Model (DOM) Level 2 Specification</a>
"
      classrelation 4801538 // <realization>
	relation 4801538 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4801538 // <realization>
	  b parent class_ref 627202 // Source
      end

      classrelation 4801666 // node (<unidirectional association>)
	relation 4801666 --->
	  a role_name "node" private
	    comment "
<p><code>Node</code> to serve as DOM source.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4801666 // node (<unidirectional association>)
	  b parent class_ref 317570 // Node
      end

      classrelation 4801794 // systemID (<unidirectional association>)
	relation 4801794 --->
	  a role_name "systemID" private
	    comment "
<p>The base ID (URL or system ID) from where URLs
will be resolved.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4801794 // systemID (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4801922 // FEATURE (<unidirectional association>)
	relation 4801922 --->
	  a role_name "FEATURE" init_value "
        \"http://javax.xml.transform.dom.DOMSource/feature\"" class_relation const_relation public
	    comment " If {@link javax.xml.transform.TransformerFactory#getFeature}
returns true when passed this value as an argument,
the Transformer supports Source input of this type.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4801922 // FEATURE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12121602 "DOMSource"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Zero-argument default constructor.  If this constructor is used, and
no DOM source is set using {@link #setNode(Node node)} , then the
<code>Transformer</code> will
create an empty source {@link org.w3c.dom.Document} using
{@link javax.xml.parsers.DocumentBuilder#newDocument()}.</p>

@see javax.xml.transform.Transformer#transform(Source xmlSource, Result outputTarget)
"
      end

      operation 12121730 "DOMSource"
	public explicit_return_type ""
	nparams 1
	  param inout name "n" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new input source with a DOM node.  The operation
will be applied to the subtree rooted at this node.  In XSLT,
a \"/\" pattern still means the root of the tree (not the subtree),
and the evaluation of global variables and parameters is done
from the root node also.

@param n The DOM node that will contain the Source tree.
"
      end

      operation 12121858 "DOMSource"
	public explicit_return_type ""
	nparams 2
	  param inout name "node" type class_ref 317570 // Node
	  param inout name "systemID" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new input source with a DOM node, and with the
system ID also passed in as the base URI.

@param node The DOM node that will contain the Source tree.
@param systemID Specifies the base URI associated with node.
"
      end

      operation 12121986 "setNode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the node that will represents a Source DOM tree.

@param node The node that is to be transformed.
"
      end

      operation 12122114 "getNode"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the node that represents a Source DOM tree.

@return The node that is to be transformed.
"
      end

      operation 12122242 "setSystemId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "systemID" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the base ID (URL or system ID) from where URLs
will be resolved.

@param systemID Base URL for this DOM tree.
"
      end

      operation 12122370 "getSystemId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the base ID (URL or system ID) from where URLs
will be resolved.

@return Base URL for this DOM tree.
"
      end
    end

    class 1432322 "DOMLocator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Indicates the position of a node in a source DOM, intended
primarily for error reporting.  To use a DOMLocator, the receiver of an
error must downcast the {@link javax.xml.transform.SourceLocator}
object returned by an exception. A {@link javax.xml.transform.Transformer}
may use this object for purposes other than error reporting, for instance,
to indicate the source node that originated a result node.
"
      classrelation 4801410 // <generalisation>
	relation 4801410 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4801410 // <generalisation>
	  b parent class_ref 617346 // SourceLocator
      end

      operation 12121474 "getOriginatingNode"
	public return_type class_ref 317570 // Node
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the node where the event occurred.

@return The node that is the location for the event.
"
      end
    end
  end

  deploymentview 178690 "dom"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1016962 "DOMResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.Result;
import org.w3c.dom.Node;
${definition}"
      associated_elems
	class_ref 724994 // DOMResult
      end
      comment "Copyright (c) 2000, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1023874 "DOMLocator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.SourceLocator;
import org.w3c.dom.Node;
${definition}"
      associated_elems
	class_ref 1432322 // DOMLocator
      end
      comment "Copyright (c) 2000, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1024002 "DOMSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.Source;
import org.w3c.dom.Node;
${definition}"
      associated_elems
	class_ref 725890 // DOMSource
      end
      comment "Copyright (c) 2000, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
