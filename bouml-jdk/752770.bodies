class SignatureAlgorithm
!!!5297666.java!!!	SignatureAlgorithm(inout doc : Document, inout algorithmURI : String)
        super(doc, algorithmURI);
        this.algorithmURI = algorithmURI;

        signatureAlgorithm = getSignatureAlgorithmSpi(algorithmURI);
        signatureAlgorithm.engineGetContextFromElement(this.constructionElement);
!!!5297794.java!!!	SignatureAlgorithm(inout doc : Document, inout algorithmURI : String, in hmacOutputLength : int)
        super(doc, algorithmURI);
        this.algorithmURI = algorithmURI;

        signatureAlgorithm = getSignatureAlgorithmSpi(algorithmURI);
        signatureAlgorithm.engineGetContextFromElement(this.constructionElement);

        signatureAlgorithm.engineSetHMACOutputLength(hmacOutputLength);
        ((IntegrityHmac)signatureAlgorithm).engineAddContextToElement(constructionElement);
!!!5297922.java!!!	SignatureAlgorithm(inout element : Element, inout baseURI : String)
        this(element, baseURI, false);
!!!5298050.java!!!	SignatureAlgorithm(inout element : Element, inout baseURI : String, inout secureValidation : boolean)
        super(element, baseURI);
        algorithmURI = this.getURI();

        Attr attr = element.getAttributeNodeNS(null, "Id");
        if (attr != null) {
            element.setIdAttributeNode(attr, true);
        }

        if (secureValidation && (XMLSignature.ALGO_ID_MAC_HMAC_NOT_RECOMMENDED_MD5.equals(algorithmURI)
            || XMLSignature.ALGO_ID_SIGNATURE_NOT_RECOMMENDED_RSA_MD5.equals(algorithmURI))) {
            Object exArgs[] = { algorithmURI };

            throw new XMLSecurityException("signature.signatureAlgorithm", exArgs);
        }

        signatureAlgorithm = getSignatureAlgorithmSpi(algorithmURI);
        signatureAlgorithm.engineGetContextFromElement(this.constructionElement);
!!!5298178.java!!!	getSignatureAlgorithmSpi(inout algorithmURI : String) : SignatureAlgorithmSpi
        try {
            Class<? extends SignatureAlgorithmSpi> implementingClass =
                algorithmHash.get(algorithmURI);
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "Create URI \"" + algorithmURI + "\" class \""
                   + implementingClass + "\"");
            }
            return implementingClass.newInstance();
        }  catch (IllegalAccessException ex) {
            Object exArgs[] = { algorithmURI, ex.getMessage() };
            throw new XMLSignatureException("algorithms.NoSuchAlgorithm", exArgs, ex);
        } catch (InstantiationException ex) {
            Object exArgs[] = { algorithmURI, ex.getMessage() };
            throw new XMLSignatureException("algorithms.NoSuchAlgorithm", exArgs, ex);
        } catch (NullPointerException ex) {
            Object exArgs[] = { algorithmURI, ex.getMessage() };
            throw new XMLSignatureException("algorithms.NoSuchAlgorithm", exArgs, ex);
        }
!!!5298306.java!!!	sign() : byte
        return signatureAlgorithm.engineSign();
!!!5298434.java!!!	getJCEAlgorithmString() : String
        return signatureAlgorithm.engineGetJCEAlgorithmString();
!!!5298562.java!!!	getJCEProviderName() : String
        return signatureAlgorithm.engineGetJCEProviderName();
!!!5298690.java!!!	update(inout input : byte [[]]) : void
        signatureAlgorithm.engineUpdate(input);
!!!5298818.java!!!	update(in input : byte) : void
        signatureAlgorithm.engineUpdate(input);
!!!5298946.java!!!	update(inout buf : byte [[]], in offset : int, in len : int) : void
        signatureAlgorithm.engineUpdate(buf, offset, len);
!!!5299074.java!!!	initSign(inout signingKey : Key) : void
        signatureAlgorithm.engineInitSign(signingKey);
!!!5299202.java!!!	initSign(inout signingKey : Key, inout secureRandom : SecureRandom) : void
        signatureAlgorithm.engineInitSign(signingKey, secureRandom);
!!!5299330.java!!!	initSign(inout signingKey : Key, inout algorithmParameterSpec : AlgorithmParameterSpec) : void
        signatureAlgorithm.engineInitSign(signingKey, algorithmParameterSpec);
!!!5299458.java!!!	setParameter(inout params : AlgorithmParameterSpec) : void
        signatureAlgorithm.engineSetParameter(params);
!!!5299586.java!!!	initVerify(inout verificationKey : Key) : void
        signatureAlgorithm.engineInitVerify(verificationKey);
!!!5299714.java!!!	verify(inout signature : byte [[]]) : boolean
        return signatureAlgorithm.engineVerify(signature);
!!!5299842.java!!!	getURI() : String
        return constructionElement.getAttributeNS(null, Constants._ATT_ALGORITHM);
!!!5299970.java!!!	register(inout algorithmURI : String, inout implementingClass : String) : void
        JavaUtils.checkRegisterPermission();
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE, "Try to register " + algorithmURI + " " + implementingClass);
        }

        // are we already registered?
        Class<? extends SignatureAlgorithmSpi> registeredClass = algorithmHash.get(algorithmURI);
        if (registeredClass != null) {
            Object exArgs[] = { algorithmURI, registeredClass };
            throw new AlgorithmAlreadyRegisteredException(
                "algorithm.alreadyRegistered", exArgs
            );
        }
        try {
            Class<? extends SignatureAlgorithmSpi> clazz =
                (Class<? extends SignatureAlgorithmSpi>)
                    ClassLoaderUtils.loadClass(implementingClass, SignatureAlgorithm.class);
            algorithmHash.put(algorithmURI, clazz);
        } catch (NullPointerException ex) {
            Object exArgs[] = { algorithmURI, ex.getMessage() };
            throw new XMLSignatureException("algorithms.NoSuchAlgorithm", exArgs, ex);
        }
!!!5300098.java!!!	register(inout algorithmURI : String, inout implementingClass : Class) : void
        JavaUtils.checkRegisterPermission();
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE, "Try to register " + algorithmURI + " " + implementingClass);
        }

        // are we already registered?
        Class<? extends SignatureAlgorithmSpi> registeredClass = algorithmHash.get(algorithmURI);
        if (registeredClass != null) {
            Object exArgs[] = { algorithmURI, registeredClass };
            throw new AlgorithmAlreadyRegisteredException(
                "algorithm.alreadyRegistered", exArgs
            );
        }
        algorithmHash.put(algorithmURI, implementingClass);
!!!5300226.java!!!	registerDefaultAlgorithms() : void
        algorithmHash.put(
            XMLSignature.ALGO_ID_SIGNATURE_DSA, SignatureDSA.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_SIGNATURE_DSA_SHA256, SignatureDSA.SHA256.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA1, SignatureBaseRSA.SignatureRSASHA1.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_MAC_HMAC_SHA1, IntegrityHmac.IntegrityHmacSHA1.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_SIGNATURE_NOT_RECOMMENDED_RSA_MD5,
            SignatureBaseRSA.SignatureRSAMD5.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_SIGNATURE_RSA_RIPEMD160,
            SignatureBaseRSA.SignatureRSARIPEMD160.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA256, SignatureBaseRSA.SignatureRSASHA256.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA384, SignatureBaseRSA.SignatureRSASHA384.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA512, SignatureBaseRSA.SignatureRSASHA512.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA1, SignatureECDSA.SignatureECDSASHA1.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA256, SignatureECDSA.SignatureECDSASHA256.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA384, SignatureECDSA.SignatureECDSASHA384.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA512, SignatureECDSA.SignatureECDSASHA512.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_MAC_HMAC_NOT_RECOMMENDED_MD5, IntegrityHmac.IntegrityHmacMD5.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_MAC_HMAC_RIPEMD160, IntegrityHmac.IntegrityHmacRIPEMD160.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_MAC_HMAC_SHA256, IntegrityHmac.IntegrityHmacSHA256.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_MAC_HMAC_SHA384, IntegrityHmac.IntegrityHmacSHA384.class
        );
        algorithmHash.put(
            XMLSignature.ALGO_ID_MAC_HMAC_SHA512, IntegrityHmac.IntegrityHmacSHA512.class
        );
!!!5300354.java!!!	getBaseNamespace() : String
        return Constants.SignatureSpecNS;
!!!5300482.java!!!	getBaseLocalName() : String
        return Constants._TAG_SIGNATUREMETHOD;
