class CompoundEdit
!!!2393730.java!!!	CompoundEdit()
        super();
        inProgress = true;
        edits = new Vector<UndoableEdit>();
!!!2393858.java!!!	undo() : void
        super.undo();
        int i = edits.size();
        while (i-- > 0) {
            UndoableEdit e = edits.elementAt(i);
            e.undo();
        }
!!!2393986.java!!!	redo() : void
        super.redo();
        Enumeration cursor = edits.elements();
        while (cursor.hasMoreElements()) {
            ((UndoableEdit)cursor.nextElement()).redo();
        }
!!!2394114.java!!!	lastEdit() : UndoableEdit
        int count = edits.size();
        if (count > 0)
            return edits.elementAt(count-1);
        else
            return null;
!!!2394242.java!!!	die() : void
        int size = edits.size();
        for (int i = size-1; i >= 0; i--)
        {
            UndoableEdit e = edits.elementAt(i);
//          System.out.println("CompoundEdit(" + i + "): Discarding " +
//                             e.getUndoPresentationName());
            e.die();
        }
        super.die();
!!!2394370.java!!!	addEdit(inout anEdit : UndoableEdit) : boolean
        if (!inProgress) {
            return false;
        } else {
            UndoableEdit last = lastEdit();

            // If this is the first subedit received, just add it.
            // Otherwise, give the last one a chance to absorb the new
            // one.  If it won't, give the new one a chance to absorb
            // the last one.

            if (last == null) {
                edits.addElement(anEdit);
            }
            else if (!last.addEdit(anEdit)) {
                if (anEdit.replaceEdit(last)) {
                    edits.removeElementAt(edits.size()-1);
                }
                edits.addElement(anEdit);
            }

            return true;
        }
!!!2394498.java!!!	end() : void
        inProgress = false;
!!!2394626.java!!!	canUndo() : boolean
        return !isInProgress() && super.canUndo();
!!!2394754.java!!!	canRedo() : boolean
        return !isInProgress() && super.canRedo();
!!!2394882.java!!!	isInProgress() : boolean
        return inProgress;
!!!2395010.java!!!	isSignificant() : boolean
        Enumeration cursor = edits.elements();
        while (cursor.hasMoreElements()) {
            if (((UndoableEdit)cursor.nextElement()).isSignificant()) {
                return true;
            }
        }
        return false;
!!!2395138.java!!!	getPresentationName() : String
        UndoableEdit last = lastEdit();
        if (last != null) {
            return last.getPresentationName();
        } else {
            return super.getPresentationName();
        }
!!!2395266.java!!!	getUndoPresentationName() : String
        UndoableEdit last = lastEdit();
        if (last != null) {
            return last.getUndoPresentationName();
        } else {
            return super.getUndoPresentationName();
        }
!!!2395394.java!!!	getRedoPresentationName() : String
        UndoableEdit last = lastEdit();
        if (last != null) {
            return last.getRedoPresentationName();
        } else {
            return super.getRedoPresentationName();
        }
!!!2395522.java!!!	toString() : String
        return super.toString()
            + " inProgress: " + inProgress
            + " edits: " + edits;
