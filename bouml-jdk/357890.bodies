class ActionMap
!!!10409474.java!!!	setParent(inout map : ActionMap) : void
        this.parent = map;
!!!10409602.java!!!	getParent() : ActionMap
        return parent;
!!!10409730.java!!!	put(inout key : Object, inout action : Action) : void
        if (key == null) {
            return;
        }
        if (action == null) {
            remove(key);
        }
        else {
            if (arrayTable == null) {
                arrayTable = new ArrayTable();
            }
            arrayTable.put(key, action);
        }
!!!10409858.java!!!	get(inout key : Object) : Action
        Action value = (arrayTable == null) ? null :
                       (Action)arrayTable.get(key);

        if (value == null) {
            ActionMap    parent = getParent();

            if (parent != null) {
                return parent.get(key);
            }
        }
        return value;
!!!10409986.java!!!	remove(inout key : Object) : void
        if (arrayTable != null) {
            arrayTable.remove(key);
        }
!!!10410114.java!!!	clear() : void
        if (arrayTable != null) {
            arrayTable.clear();
        }
!!!10410242.java!!!	keys() : Object
        if (arrayTable == null) {
            return null;
        }
        return arrayTable.getKeys(null);
!!!10410370.java!!!	size() : int
        if (arrayTable == null) {
            return 0;
        }
        return arrayTable.size();
!!!10410498.java!!!	allKeys() : Object
        int           count = size();
        ActionMap     parent = getParent();

        if (count == 0) {
            if (parent != null) {
                return parent.allKeys();
            }
            return keys();
        }
        if (parent == null) {
            return keys();
        }
        Object[]    keys = keys();
        Object[]    pKeys =  parent.allKeys();

        if (pKeys == null) {
            return keys;
        }
        if (keys == null) {
            // Should only happen if size() != keys.length, which should only
            // happen if mutated from multiple threads (or a bogus subclass).
            return pKeys;
        }

        HashMap<Object, Object> keyMap = new HashMap<Object, Object>();
        int            counter;

        for (counter = keys.length - 1; counter >= 0; counter--) {
            keyMap.put(keys[counter], keys[counter]);
        }
        for (counter = pKeys.length - 1; counter >= 0; counter--) {
            keyMap.put(pKeys[counter], pKeys[counter]);
        }
        return keyMap.keySet().toArray();
!!!10410626.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();

        ArrayTable.writeArrayTable(s, arrayTable);
!!!10410754.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();
        for (int counter = s.readInt() - 1; counter >= 0; counter--) {
            put(s.readObject(), (Action)s.readObject());
        }
