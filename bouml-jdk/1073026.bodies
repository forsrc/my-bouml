class Collections
!!!8671618.java!!!	sort(inout list : List) : void
        list.sort(null);
!!!8671746.java!!!	sort(inout list : List, inout c : Comparator) : void
        list.sort(c);
!!!8671874.java!!!	binarySearch(inout list : List, inout key : T) : int
        if (list instanceof RandomAccess || list.size()<BINARYSEARCH_THRESHOLD)
            return Collections.indexedBinarySearch(list, key);
        else
            return Collections.iteratorBinarySearch(list, key);
!!!8672002.java!!!	indexedBinarySearch(inout list : List, inout key : T) : int
        int low = 0;
        int high = list.size()-1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            Comparable<? super T> midVal = list.get(mid);
            int cmp = midVal.compareTo(key);

            if (cmp < 0)
                low = mid + 1;
            else if (cmp > 0)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found
!!!8672130.java!!!	iteratorBinarySearch(inout list : List, inout key : T) : int
        int low = 0;
        int high = list.size()-1;
        ListIterator<? extends Comparable<? super T>> i = list.listIterator();

        while (low <= high) {
            int mid = (low + high) >>> 1;
            Comparable<? super T> midVal = get(i, mid);
            int cmp = midVal.compareTo(key);

            if (cmp < 0)
                low = mid + 1;
            else if (cmp > 0)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found
!!!8672258.java!!!	get(inout i : ListIterator, in index : int) : T
        T obj = null;
        int pos = i.nextIndex();
        if (pos <= index) {
            do {
                obj = i.next();
            } while (pos++ < index);
        } else {
            do {
                obj = i.previous();
            } while (--pos > index);
        }
        return obj;
!!!8672386.java!!!	binarySearch(inout list : List, inout key : T, inout c : Comparator) : int
        if (c==null)
            return binarySearch((List<? extends Comparable<? super T>>) list, key);

        if (list instanceof RandomAccess || list.size()<BINARYSEARCH_THRESHOLD)
            return Collections.indexedBinarySearch(list, key, c);
        else
            return Collections.iteratorBinarySearch(list, key, c);
!!!8672514.java!!!	indexedBinarySearch(inout l : List, inout key : T, inout c : Comparator) : int
        int low = 0;
        int high = l.size()-1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            T midVal = l.get(mid);
            int cmp = c.compare(midVal, key);

            if (cmp < 0)
                low = mid + 1;
            else if (cmp > 0)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found
!!!8672642.java!!!	iteratorBinarySearch(inout l : List, inout key : T, inout c : Comparator) : int
        int low = 0;
        int high = l.size()-1;
        ListIterator<? extends T> i = l.listIterator();

        while (low <= high) {
            int mid = (low + high) >>> 1;
            T midVal = get(i, mid);
            int cmp = c.compare(midVal, key);

            if (cmp < 0)
                low = mid + 1;
            else if (cmp > 0)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found
!!!8672770.java!!!	reverse(inout list : List) : void
        int size = list.size();
        if (size < REVERSE_THRESHOLD || list instanceof RandomAccess) {
            for (int i=0, mid=size>>1, j=size-1; i<mid; i++, j--)
                swap(list, i, j);
        } else {
            // instead of using a raw type here, it's possible to capture
            // the wildcard but it will require a call to a supplementary
            // private method
            ListIterator fwd = list.listIterator();
            ListIterator rev = list.listIterator(size);
            for (int i=0, mid=list.size()>>1; i<mid; i++) {
                Object tmp = fwd.next();
                fwd.set(rev.previous());
                rev.set(tmp);
            }
        }
!!!8672898.java!!!	shuffle(inout list : List) : void
        Random rnd = r;
        if (rnd == null)
            r = rnd = new Random(); // harmless race.
        shuffle(list, rnd);
!!!8673026.java!!!	shuffle(inout list : List, inout rnd : Random) : void
        int size = list.size();
        if (size < SHUFFLE_THRESHOLD || list instanceof RandomAccess) {
            for (int i=size; i>1; i--)
                swap(list, i-1, rnd.nextInt(i));
        } else {
            Object arr[] = list.toArray();

            // Shuffle array
            for (int i=size; i>1; i--)
                swap(arr, i-1, rnd.nextInt(i));

            // Dump array back into list
            // instead of using a raw type here, it's possible to capture
            // the wildcard but it will require a call to a supplementary
            // private method
            ListIterator it = list.listIterator();
            for (int i=0; i<arr.length; i++) {
                it.next();
                it.set(arr[i]);
            }
        }
!!!8673154.java!!!	swap(inout list : List, in i : int, in j : int) : void
        // instead of using a raw type here, it's possible to capture
        // the wildcard but it will require a call to a supplementary
        // private method
        final List l = list;
        l.set(i, l.set(j, l.get(i)));
!!!8673282.java!!!	swap(inout arr : Object [[]], in i : int, in j : int) : void
        Object tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
!!!8673410.java!!!	fill(inout list : List, inout obj : T) : void
        int size = list.size();

        if (size < FILL_THRESHOLD || list instanceof RandomAccess) {
            for (int i=0; i<size; i++)
                list.set(i, obj);
        } else {
            ListIterator<? super T> itr = list.listIterator();
            for (int i=0; i<size; i++) {
                itr.next();
                itr.set(obj);
            }
        }
!!!8673538.java!!!	copy(inout dest : List, inout src : List) : void
        int srcSize = src.size();
        if (srcSize > dest.size())
            throw new IndexOutOfBoundsException("Source does not fit in dest");

        if (srcSize < COPY_THRESHOLD ||
            (src instanceof RandomAccess && dest instanceof RandomAccess)) {
            for (int i=0; i<srcSize; i++)
                dest.set(i, src.get(i));
        } else {
            ListIterator<? super T> di=dest.listIterator();
            ListIterator<? extends T> si=src.listIterator();
            for (int i=0; i<srcSize; i++) {
                di.next();
                di.set(si.next());
            }
        }
!!!8673666.java!!!	min(inout coll : Collection) : T
        Iterator<? extends T> i = coll.iterator();
        T candidate = i.next();

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(candidate) < 0)
                candidate = next;
        }
        return candidate;
!!!8673794.java!!!	min(inout coll : Collection, inout comp : Comparator) : T
        if (comp==null)
            return (T)min((Collection) coll);

        Iterator<? extends T> i = coll.iterator();
        T candidate = i.next();

        while (i.hasNext()) {
            T next = i.next();
            if (comp.compare(next, candidate) < 0)
                candidate = next;
        }
        return candidate;
!!!8673922.java!!!	max(inout coll : Collection) : T
        Iterator<? extends T> i = coll.iterator();
        T candidate = i.next();

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(candidate) > 0)
                candidate = next;
        }
        return candidate;
!!!8674050.java!!!	max(inout coll : Collection, inout comp : Comparator) : T
        if (comp==null)
            return (T)max((Collection) coll);

        Iterator<? extends T> i = coll.iterator();
        T candidate = i.next();

        while (i.hasNext()) {
            T next = i.next();
            if (comp.compare(next, candidate) > 0)
                candidate = next;
        }
        return candidate;
!!!8674178.java!!!	rotate(inout list : List, in distance : int) : void
        if (list instanceof RandomAccess || list.size() < ROTATE_THRESHOLD)
            rotate1(list, distance);
        else
            rotate2(list, distance);
!!!8674306.java!!!	rotate1(inout list : List, in distance : int) : void
        int size = list.size();
        if (size == 0)
            return;
        distance = distance % size;
        if (distance < 0)
            distance += size;
        if (distance == 0)
            return;

        for (int cycleStart = 0, nMoved = 0; nMoved != size; cycleStart++) {
            T displaced = list.get(cycleStart);
            int i = cycleStart;
            do {
                i += distance;
                if (i >= size)
                    i -= size;
                displaced = list.set(i, displaced);
                nMoved ++;
            } while (i != cycleStart);
        }
!!!8674434.java!!!	rotate2(inout list : List, in distance : int) : void
        int size = list.size();
        if (size == 0)
            return;
        int mid =  -distance % size;
        if (mid < 0)
            mid += size;
        if (mid == 0)
            return;

        reverse(list.subList(0, mid));
        reverse(list.subList(mid, size));
        reverse(list);
!!!8674562.java!!!	replaceAll(inout list : List, inout oldVal : T, inout newVal : T) : boolean
        boolean result = false;
        int size = list.size();
        if (size < REPLACEALL_THRESHOLD || list instanceof RandomAccess) {
            if (oldVal==null) {
                for (int i=0; i<size; i++) {
                    if (list.get(i)==null) {
                        list.set(i, newVal);
                        result = true;
                    }
                }
            } else {
                for (int i=0; i<size; i++) {
                    if (oldVal.equals(list.get(i))) {
                        list.set(i, newVal);
                        result = true;
                    }
                }
            }
        } else {
            ListIterator<T> itr=list.listIterator();
            if (oldVal==null) {
                for (int i=0; i<size; i++) {
                    if (itr.next()==null) {
                        itr.set(newVal);
                        result = true;
                    }
                }
            } else {
                for (int i=0; i<size; i++) {
                    if (oldVal.equals(itr.next())) {
                        itr.set(newVal);
                        result = true;
                    }
                }
            }
        }
        return result;
!!!8674690.java!!!	indexOfSubList(inout source : List, inout target : List) : int
        int sourceSize = source.size();
        int targetSize = target.size();
        int maxCandidate = sourceSize - targetSize;

        if (sourceSize < INDEXOFSUBLIST_THRESHOLD ||
            (source instanceof RandomAccess&&target instanceof RandomAccess)) {
        nextCand:
            for (int candidate = 0; candidate <= maxCandidate; candidate++) {
                for (int i=0, j=candidate; i<targetSize; i++, j++)
                    if (!eq(target.get(i), source.get(j)))
                        continue nextCand;  // Element mismatch, try next cand
                return candidate;  // All elements of candidate matched target
            }
        } else {  // Iterator version of above algorithm
            ListIterator<?> si = source.listIterator();
        nextCand:
            for (int candidate = 0; candidate <= maxCandidate; candidate++) {
                ListIterator<?> ti = target.listIterator();
                for (int i=0; i<targetSize; i++) {
                    if (!eq(ti.next(), si.next())) {
                        // Back up source iterator to next candidate
                        for (int j=0; j<i; j++)
                            si.previous();
                        continue nextCand;
                    }
                }
                return candidate;
            }
        }
        return -1;  // No candidate matched the target
!!!8674818.java!!!	lastIndexOfSubList(inout source : List, inout target : List) : int
        int sourceSize = source.size();
        int targetSize = target.size();
        int maxCandidate = sourceSize - targetSize;

        if (sourceSize < INDEXOFSUBLIST_THRESHOLD ||
            source instanceof RandomAccess) {   // Index access version
        nextCand:
            for (int candidate = maxCandidate; candidate >= 0; candidate--) {
                for (int i=0, j=candidate; i<targetSize; i++, j++)
                    if (!eq(target.get(i), source.get(j)))
                        continue nextCand;  // Element mismatch, try next cand
                return candidate;  // All elements of candidate matched target
            }
        } else {  // Iterator version of above algorithm
            if (maxCandidate < 0)
                return -1;
            ListIterator<?> si = source.listIterator(maxCandidate);
        nextCand:
            for (int candidate = maxCandidate; candidate >= 0; candidate--) {
                ListIterator<?> ti = target.listIterator();
                for (int i=0; i<targetSize; i++) {
                    if (!eq(ti.next(), si.next())) {
                        if (candidate != 0) {
                            // Back up source iterator to next candidate
                            for (int j=0; j<=i+1; j++)
                                si.previous();
                        }
                        continue nextCand;
                    }
                }
                return candidate;
            }
        }
        return -1;  // No candidate matched the target
!!!8674946.java!!!	unmodifiableCollection(inout c : Collection) : Collection
        return new UnmodifiableCollection<>(c);
!!!8677634.java!!!	unmodifiableSet(inout s : Set) : Set
        return new UnmodifiableSet<>(s);
!!!8678146.java!!!	unmodifiableSortedSet(inout s : SortedSet) : SortedSet
        return new UnmodifiableSortedSet<>(s);
!!!8680066.java!!!	unmodifiableNavigableSet(inout s : NavigableSet) : NavigableSet
        return new UnmodifiableNavigableSet<>(s);
!!!8683906.java!!!	unmodifiableList(inout list : List) : List
        return (list instanceof RandomAccess ?
                new UnmodifiableRandomAccessList<>(list) :
                new UnmodifiableList<>(list));
!!!8686466.java!!!	unmodifiableMap(inout m : Map) : Map
        return new UnmodifiableMap<>(m);
!!!8693634.java!!!	unmodifiableSortedMap(inout m : SortedMap) : SortedMap
        return new UnmodifiableSortedMap<>(m);
!!!8695810.java!!!	unmodifiableNavigableMap(inout m : NavigableMap) : NavigableMap
        return new UnmodifiableNavigableMap<>(m);
!!!8701442.java!!!	synchronizedCollection(inout c : Collection) : Collection
        return new SynchronizedCollection<>(c);
!!!8701570.java!!!	synchronizedCollection(inout c : Collection, inout mutex : Object) : Collection
        return new SynchronizedCollection<>(c, mutex);
!!!8704514.java!!!	synchronizedSet(inout s : Set) : Set
        return new SynchronizedSet<>(s);
!!!8704642.java!!!	synchronizedSet(inout s : Set, inout mutex : Object) : Set
        return new SynchronizedSet<>(s, mutex);
!!!8705282.java!!!	synchronizedSortedSet(inout s : SortedSet) : SortedSet
        return new SynchronizedSortedSet<>(s);
!!!8706434.java!!!	synchronizedNavigableSet(inout s : NavigableSet) : NavigableSet
        return new SynchronizedNavigableSet<>(s);
!!!8708610.java!!!	synchronizedList(inout list : List) : List
        return (list instanceof RandomAccess ?
                new SynchronizedRandomAccessList<>(list) :
                new SynchronizedList<>(list));
!!!8708738.java!!!	synchronizedList(inout list : List, inout mutex : Object) : List
        return (list instanceof RandomAccess ?
                new SynchronizedRandomAccessList<>(list, mutex) :
                new SynchronizedList<>(list, mutex));
!!!8711554.java!!!	synchronizedMap(inout m : Map) : Map
        return new SynchronizedMap<>(m);
!!!8715394.java!!!	synchronizedSortedMap(inout m : SortedMap) : SortedMap
        return new SynchronizedSortedMap<>(m);
!!!8716546.java!!!	synchronizedNavigableMap(inout m : NavigableMap) : NavigableMap
        return new SynchronizedNavigableMap<>(m);
!!!8719746.java!!!	checkedCollection(inout c : Collection, inout type : Class) : Collection
        return new CheckedCollection<>(c, type);
!!!8719874.java!!!	zeroLengthArray(inout type : Class) : T
        return (T[]) Array.newInstance(type, 0);
!!!8723074.java!!!	checkedQueue(inout queue : Queue, inout type : Class) : Queue
        return new CheckedQueue<>(queue, type);
!!!8724226.java!!!	checkedSet(inout s : Set, inout type : Class) : Set
        return new CheckedSet<>(s, type);
!!!8724738.java!!!	checkedSortedSet(inout s : SortedSet, inout type : Class) : SortedSet
        return new CheckedSortedSet<>(s, type);
!!!8725762.java!!!	checkedNavigableSet(inout s : NavigableSet, inout type : Class) : NavigableSet
        return new CheckedNavigableSet<>(s, type);
!!!8727810.java!!!	checkedList(inout list : List, inout type : Class) : List
        return (list instanceof RandomAccess ?
                new CheckedRandomAccessList<>(list, type) :
                new CheckedList<>(list, type));
!!!8730114.java!!!	checkedMap(inout m : Map, inout keyType : Class, inout valueType : Class) : Map
        return new CheckedMap<>(m, keyType, valueType);
!!!8737538.java!!!	checkedSortedMap(inout m : SortedMap, inout keyType : Class, inout valueType : Class) : SortedMap
        return new CheckedSortedMap<>(m, keyType, valueType);
!!!8738562.java!!!	checkedNavigableMap(inout m : NavigableMap, inout keyType : Class, inout valueType : Class) : NavigableMap
        return new CheckedNavigableMap<>(m, keyType, valueType);
!!!8742018.java!!!	emptyIterator() : Iterator
        return (Iterator<T>) EmptyIterator.EMPTY_ITERATOR;
!!!8742658.java!!!	emptyListIterator() : ListIterator
        return (ListIterator<T>) EmptyListIterator.EMPTY_ITERATOR;
!!!8743554.java!!!	emptyEnumeration() : Enumeration
        return (Enumeration<T>) EmptyEnumeration.EMPTY_ENUMERATION;
!!!8743938.java!!!	emptySet() : Set
        return (Set<T>) EMPTY_SET;
!!!8745474.java!!!	emptySortedSet() : SortedSet
        return (SortedSet<E>) UnmodifiableNavigableSet.EMPTY_NAVIGABLE_SET;
!!!8745602.java!!!	emptyNavigableSet() : NavigableSet
        return (NavigableSet<E>) UnmodifiableNavigableSet.EMPTY_NAVIGABLE_SET;
!!!8745730.java!!!	emptyList() : List
        return (List<T>) EMPTY_LIST;
!!!8748034.java!!!	emptyMap() : Map
        return (Map<K,V>) EMPTY_MAP;
!!!8748162.java!!!	emptySortedMap() : SortedMap
        return (SortedMap<K,V>) UnmodifiableNavigableMap.EMPTY_NAVIGABLE_MAP;
!!!8748290.java!!!	emptyNavigableMap() : NavigableMap
        return (NavigableMap<K,V>) UnmodifiableNavigableMap.EMPTY_NAVIGABLE_MAP;
!!!8751234.java!!!	singleton(inout o : T) : Set
        return new SingletonSet<>(o);
!!!8751362.java!!!	singletonIterator(in e : E) : Iterator
        return new Iterator<E>() {
            private boolean hasNext = true;
            public boolean hasNext() {
                return hasNext;
            }
            public E next() {
                if (hasNext) {
                    hasNext = false;
                    return e;
                }
                throw new NoSuchElementException();
            }
            public void remove() {
                throw new UnsupportedOperationException();
            }
            @Override
            public void forEachRemaining(Consumer<? super E> action) {
                Objects.requireNonNull(action);
                if (hasNext) {
                    action.accept(e);
                    hasNext = false;
                }
            }
        };
!!!8751490.java!!!	singletonSpliterator(in element : T) : Spliterator
        return new Spliterator<T>() {
            long est = 1;

            @Override
            public Spliterator<T> trySplit() {
                return null;
            }

            @Override
            public boolean tryAdvance(Consumer<? super T> consumer) {
                Objects.requireNonNull(consumer);
                if (est > 0) {
                    est--;
                    consumer.accept(element);
                    return true;
                }
                return false;
            }

            @Override
            public void forEachRemaining(Consumer<? super T> consumer) {
                tryAdvance(consumer);
            }

            @Override
            public long estimateSize() {
                return est;
            }

            @Override
            public int characteristics() {
                int value = (element != null) ? Spliterator.NONNULL : 0;

                return value | Spliterator.SIZED | Spliterator.SUBSIZED | Spliterator.IMMUTABLE |
                       Spliterator.DISTINCT | Spliterator.ORDERED;
            }
        };
!!!8752514.java!!!	singletonList(inout o : T) : List
        return new SingletonList<>(o);
!!!8753922.java!!!	singletonMap(inout key : K, inout value : V) : Map
        return new SingletonMap<>(key, value);
!!!8756610.java!!!	nCopies(in n : int, inout o : T) : List
        if (n < 0)
            throw new IllegalArgumentException("List length = " + n);
        return new CopiesList<>(n, o);
!!!8758274.java!!!	reverseOrder() : Comparator
        return (Comparator<T>) ReverseComparator.REVERSE_ORDER;
!!!8758786.java!!!	reverseOrder(inout cmp : Comparator) : Comparator
        if (cmp == null)
            return reverseOrder();

        if (cmp instanceof ReverseComparator2)
            return ((ReverseComparator2<T>)cmp).cmp;

        return new ReverseComparator2<>(cmp);
!!!8759554.java!!!	enumeration(in c : Collection) : Enumeration
        return new Enumeration<T>() {
            private final Iterator<T> i = c.iterator();

            public boolean hasMoreElements() {
                return i.hasNext();
            }

            public T nextElement() {
                return i.next();
            }
        };
!!!8759682.java!!!	list(inout e : Enumeration) : ArrayList
        ArrayList<T> l = new ArrayList<>();
        while (e.hasMoreElements())
            l.add(e.nextElement());
        return l;
!!!8759810.java!!!	eq(inout o1 : Object, inout o2 : Object) : boolean
        return o1==null ? o2==null : o1.equals(o2);
!!!8759938.java!!!	frequency(inout c : Collection, inout o : Object) : int
        int result = 0;
        if (o == null) {
            for (Object e : c)
                if (e == null)
                    result++;
        } else {
            for (Object e : c)
                if (o.equals(e))
                    result++;
        }
        return result;
!!!8760066.java!!!	disjoint(inout c1 : Collection, inout c2 : Collection) : boolean
        // The collection to be used for contains(). Preference is given to
        // the collection who's contains() has lower O() complexity.
        Collection<?> contains = c2;
        // The collection to be iterated. If the collections' contains() impl
        // are of different O() complexity, the collection with slower
        // contains() will be used for iteration. For collections who's
        // contains() are of the same complexity then best performance is
        // achieved by iterating the smaller collection.
        Collection<?> iterate = c1;

        // Performance optimization cases. The heuristics:
        //   1. Generally iterate over c1.
        //   2. If c1 is a Set then iterate over c2.
        //   3. If either collection is empty then result is always true.
        //   4. Iterate over the smaller Collection.
        if (c1 instanceof Set) {
            // Use c1 for contains as a Set's contains() is expected to perform
            // better than O(N/2)
            iterate = c2;
            contains = c1;
        } else if (!(c2 instanceof Set)) {
            // Both are mere Collections. Iterate over smaller collection.
            // Example: If c1 contains 3 elements and c2 contains 50 elements and
            // assuming contains() requires ceiling(N/2) comparisons then
            // checking for all c1 elements in c2 would require 75 comparisons
            // (3 * ceiling(50/2)) vs. checking all c2 elements in c1 requiring
            // 100 comparisons (50 * ceiling(3/2)).
            int c1size = c1.size();
            int c2size = c2.size();
            if (c1size == 0 || c2size == 0) {
                // At least one collection is empty. Nothing will match.
                return true;
            }

            if (c1size > c2size) {
                iterate = c2;
                contains = c1;
            }
        }

        for (Object e : iterate) {
            if (contains.contains(e)) {
               // Found a common element. Collections are not disjoint.
                return false;
            }
        }

        // No common elements were found.
        return true;
!!!8760194.java!!!	addAll(inout c : Collection, inout  : T...elements) : boolean
        boolean result = false;
        for (T element : elements)
            result |= c.add(element);
        return result;
!!!8760322.java!!!	newSetFromMap(inout map : Map) : Set
        return new SetFromMap<>(map);
!!!8763266.java!!!	asLifoQueue(inout deque : Deque) : Queue
        return new AsLIFOQueue<>(deque);
