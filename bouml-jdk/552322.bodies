class ArrayType
!!!3426818.java!!!	ArrayType(in type : byte, in dimensions : int)
    this(BasicType.getType(type), dimensions);
!!!3426946.java!!!	ArrayType(inout class_name : String, in dimensions : int)
    this(new ObjectType(class_name), dimensions);
!!!3427074.java!!!	ArrayType(inout type : Type, in dimensions : int)
    super(Constants.T_ARRAY, "<dummy>");

    if((dimensions < 1) || (dimensions > Constants.MAX_BYTE))
      throw new ClassGenException("Invalid number of dimensions: " + dimensions);

    switch(type.getType()) {
    case Constants.T_ARRAY:
      ArrayType array = (ArrayType)type;
      this.dimensions = dimensions + array.dimensions;
      basic_type      = array.basic_type;
      break;

    case Constants.T_VOID:
      throw new ClassGenException("Invalid type: void[]");

    default: // Basic type or reference
      this.dimensions = dimensions;
      basic_type = type;
      break;
    }

    StringBuffer buf = new StringBuffer();
    for(int i=0; i < this.dimensions; i++)
      buf.append('[');

    buf.append(basic_type.getSignature());

    signature = buf.toString();
!!!3427202.java!!!	getBasicType() : Type
    return basic_type;
!!!3427330.java!!!	getElementType() : Type
    if(dimensions == 1)
      return basic_type;
    else
      return new ArrayType(basic_type, dimensions - 1);
!!!3427458.java!!!	getDimensions() : int
 return dimensions;
!!!3427586.java!!!	hashCode() : int
 return basic_type.hashCode() ^ dimensions;
!!!3427714.java!!!	equals(inout type : Object) : boolean
    if(type instanceof ArrayType) {
      ArrayType array = (ArrayType)type;
      return (array.dimensions == dimensions) && array.basic_type.equals(basic_type);
    } else
      return false;
