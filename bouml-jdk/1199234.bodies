class OpenMBeanParameterInfoSupport
!!!9894146.java!!!	OpenMBeanParameterInfoSupport(inout name : String, inout description : String, inout openType : OpenType)
        this(name, description, openType, (Descriptor) null);
!!!9894274.java!!!	OpenMBeanParameterInfoSupport(inout name : String, inout description : String, inout openType : OpenType, inout descriptor : Descriptor)


        // Construct parent's state
        //
        super(name,
              (openType==null) ? null : openType.getClassName(),
              description,
              ImmutableDescriptor.union(descriptor,(openType==null)?null:
                openType.getDescriptor()));

        // Initialize this instance's specific state
        //
        this.openType = openType;

        descriptor = getDescriptor();  // replace null by empty
        this.defaultValue = valueFrom(descriptor, "defaultValue", openType);
        this.legalValues = valuesFrom(descriptor, "legalValues", openType);
        this.minValue = comparableValueFrom(descriptor, "minValue", openType);
        this.maxValue = comparableValueFrom(descriptor, "maxValue", openType);

        try {
            check(this);
        } catch (OpenDataException e) {
            throw new IllegalArgumentException(e.getMessage(), e);
        }
!!!9894402.java!!!	OpenMBeanParameterInfoSupport(inout name : String, inout description : String, inout openType : OpenType, inout defaultValue : T)
        this(name, description, openType, defaultValue, (T[]) null);
!!!9894530.java!!!	OpenMBeanParameterInfoSupport(inout name : String, inout description : String, inout openType : OpenType, inout defaultValue : T, inout legalValues : T [[]])
        this(name, description, openType,
             defaultValue, legalValues, null, null);
!!!9894658.java!!!	OpenMBeanParameterInfoSupport(inout name : String, inout description : String, inout openType : OpenType, inout defaultValue : T, inout minValue : Comparable, inout maxValue : Comparable)
        this(name, description, openType,
             defaultValue, null, minValue, maxValue);
!!!9894786.java!!!	OpenMBeanParameterInfoSupport(inout name : String, inout description : String, inout openType : OpenType, inout defaultValue : T, inout legalValues : T [[]], inout minValue : Comparable, inout maxValue : Comparable)
        super(name,
              (openType == null) ? null : openType.getClassName(),
              description,
              makeDescriptor(openType,
                             defaultValue, legalValues, minValue, maxValue));

        this.openType = openType;

        Descriptor d = getDescriptor();
        this.defaultValue = defaultValue;
        this.minValue = minValue;
        this.maxValue = maxValue;
        // We already converted the array into an unmodifiable Set
        // in the descriptor.
        this.legalValues = (Set<?>) d.getFieldValue("legalValues");

        check(this);
!!!9894914.java!!!	readResolve() : Object
        if (getDescriptor().getFieldNames().length == 0) {
            // This noise allows us to avoid "unchecked" warnings without
            // having to suppress them explicitly.
            OpenType<Object> xopenType = cast(openType);
            Set<Object> xlegalValues = cast(legalValues);
            Comparable<Object> xminValue = cast(minValue);
            Comparable<Object> xmaxValue = cast(maxValue);
            return new OpenMBeanParameterInfoSupport(
                    name, description, openType,
                    makeDescriptor(xopenType, defaultValue, xlegalValues,
                                   xminValue, xmaxValue));
        } else
            return this;
!!!9895042.java!!!	getOpenType() : OpenType
        return openType;
!!!9895170.java!!!	getDefaultValue() : Object

        // Special case for ArrayType and TabularType
        // [JF] TODO: clone it so that it cannot be altered,
        // [JF] TODO: if we decide to support defaultValue as an array itself.
        // [JF] As of today (oct 2000) it is not supported so
        // defaultValue is null for arrays. Nothing to do.

        return defaultValue;
!!!9895298.java!!!	getLegalValues() : Set

        // Special case for ArrayType and TabularType
        // [JF] TODO: clone values so that they cannot be altered,
        // [JF] TODO: if we decide to support LegalValues as an array itself.
        // [JF] As of today (oct 2000) it is not supported so
        // legalValues is null for arrays. Nothing to do.

        // Returns our legalValues Set (set was constructed unmodifiable)
        return (legalValues);
!!!9895426.java!!!	getMinValue() : Comparable

        // Note: only comparable values have a minValue, so that's not
        // the case of arrays and tabulars (always null).

        return minValue;
!!!9895554.java!!!	getMaxValue() : Comparable

        // Note: only comparable values have a maxValue, so that's not
        // the case of arrays and tabulars (always null).

        return maxValue;
!!!9895682.java!!!	hasDefaultValue() : boolean

        return (defaultValue != null);
!!!9895810.java!!!	hasLegalValues() : boolean

        return (legalValues != null);
!!!9895938.java!!!	hasMinValue() : boolean

        return (minValue != null);
!!!9896066.java!!!	hasMaxValue() : boolean

        return (maxValue != null);
!!!9896194.java!!!	isValue(inout obj : Object) : boolean
        return OpenMBeanAttributeInfoSupport.isValue(this, obj);
        // compiler bug? should be able to omit class name here
        // also below in toString and hashCode
!!!9896322.java!!!	equals(inout obj : Object) : boolean
        if (!(obj instanceof OpenMBeanParameterInfo))
            return false;

        OpenMBeanParameterInfo other = (OpenMBeanParameterInfo) obj;

        return equal(this, other);
!!!9896450.java!!!	hashCode() : int

        // Calculate the hash code value if it has not yet been done
        // (ie 1st call to hashCode())
        //
        if (myHashCode == null)
            myHashCode = OpenMBeanAttributeInfoSupport.hashCode(this);

        // return always the same hash code for this instance (immutable)
        //
        return myHashCode.intValue();
!!!9896578.java!!!	toString() : String

        // Calculate the string value if it has not yet been done (ie
        // 1st call to toString())
        //
        if (myToString == null)
            myToString = OpenMBeanAttributeInfoSupport.toString(this);

        // return always the same string representation for this
        // instance (immutable)
        //
        return myToString;
