class XPathParser
!!!3816578.java!!!	XPathParser()
super();
!!!3816706.java!!!	XPathParser(inout s : Scanner)
super(s);
!!!3816834.java!!!	production_table() : short
return _production_table;
!!!3816962.java!!!	action_table() : short
return _action_table;
!!!3817090.java!!!	reduce_table() : short
return _reduce_table;
!!!3817218.java!!!	init_actions() : void
      action_obj = new CUP$XPathParser$actions(this);
!!!3817346.java!!!	do_action(in act_num : int, inout parser : lr_parser, inout stack : Stack, in top : int) : Symbol
    /* call code in generated class */
    return action_obj.CUP$XPathParser$do_action(act_num, parser, stack, top);
!!!3817474.java!!!	start_state() : int
return 0;
!!!3817602.java!!!	start_production() : int
return 0;
!!!3817730.java!!!	EOF_sym() : int
return 0;
!!!3817858.java!!!	error_sym() : int
return 1;
!!!3817986.java!!!	XPathParser(inout parser : Parser)
        _parser = parser;
        _xsltc = parser.getXSLTC();
        _symbolTable = parser.getSymbolTable();
!!!3818114.java!!!	getLineNumber() : int
        return _lineNumber;
!!!3818242.java!!!	getQNameIgnoreDefaultNs(inout name : String) : QName
          return _parser.getQNameIgnoreDefaultNs(name);
!!!3818370.java!!!	getQName(inout namespace : String, inout prefix : String, inout localname : String) : QName
        return _parser.getQName(namespace, prefix, localname);
!!!3818498.java!!!	setMultiDocument(inout flag : boolean) : void
          _xsltc.setMultiDocument(flag);
!!!3818626.java!!!	setCallsNodeset(inout flag : boolean) : void
          _xsltc.setCallsNodeset(flag);
!!!3818754.java!!!	setHasIdCall(inout flag : boolean) : void
          _xsltc.setHasIdCall(flag);
!!!3818882.java!!!	createStepPattern(in axis : int, inout test : Object, inout predicates : Vector) : StepPattern
        int nodeType;

        if (test == null) {  // "*"
            nodeType = (axis == Axis.ATTRIBUTE) ? NodeTest.ATTRIBUTE :
                (axis == Axis.NAMESPACE) ? -1 : NodeTest.ELEMENT;

            return new StepPattern(axis, nodeType, predicates);
        }
        else if (test instanceof Integer) {
            nodeType = ((Integer) test).intValue();

            return new StepPattern(axis, nodeType, predicates);
        }
        else {
            QName name = (QName)test;
            boolean setPriority = false;

            if (axis == Axis.NAMESPACE) {
                nodeType = (name.toString().equals("*")) ? -1
                                : _xsltc.registerNamespacePrefix(name);;
            }
            else {
                final String uri = name.getNamespace();
                final String local = name.getLocalPart();
                final QName namespace_uri =
                    _parser.getQNameIgnoreDefaultNs("namespace-uri");

                // Expand {uri}:* to *[namespace-uri() = 'uri'] - same for @*
                if (uri != null && (local.equals("*") || local.equals("@*"))) {
                    if (predicates == null) {
                        predicates = new Vector(2);
                    }

                    // Priority is set by hand if no other predicates exist
                    setPriority = (predicates.size() == 0);

                    predicates.add(
                        new Predicate(
                            new EqualityExpr(Operators.EQ,
                                new NamespaceUriCall(namespace_uri),
                                new LiteralExpr(uri))));
                }

                if (local.equals("*")) {
                    nodeType = (axis == Axis.ATTRIBUTE) ? NodeTest.ATTRIBUTE
                        : NodeTest.ELEMENT;
                }
                else if (local.equals("@*")) {
                    nodeType = NodeTest.ATTRIBUTE;
                }
                else {
                    nodeType = (axis == Axis.ATTRIBUTE) ? _xsltc.registerAttribute(name)
                        : _xsltc.registerElement(name);
                }
            }

            final StepPattern result = new StepPattern(axis, nodeType, predicates);

            // Set priority for case prefix:* and prefix:@* (no predicates)
            if (setPriority) {
                result.setPriority(-0.25);
            }

            return result;
        }
!!!3819010.java!!!	findNodeType(in axis : int, inout test : Object) : int
        if (test == null) {  // *
            return (axis == Axis.ATTRIBUTE) ?
                NodeTest.ATTRIBUTE :
                (axis == Axis.NAMESPACE) ? -1 : NodeTest.ELEMENT;
        }
        else if (test instanceof Integer) {
            return ((Integer)test).intValue();
        }
        else {
            QName name = (QName)test;

            if (axis == Axis.NAMESPACE) {
                return (name.toString().equals("*")) ? -1
                    : _xsltc.registerNamespacePrefix(name);
            }

            if (name.getNamespace() == null) {
                final String local = name.getLocalPart();

                if (local.equals("*")) {
                    return (axis == Axis.ATTRIBUTE) ? NodeTest.ATTRIBUTE
                        : NodeTest.ELEMENT;
                }
                else if (local.equals("@*")) {
                    return NodeTest.ATTRIBUTE;
                }
            }

            return (axis == Axis.ATTRIBUTE) ? _xsltc.registerAttribute(name)
                : _xsltc.registerElement(name);
        }
!!!3819138.java!!!	parse(inout expression : String, in lineNumber : int) : Symbol
        try {
            _expression = expression;
            _lineNumber = lineNumber;
            return super.parse();
        }
        catch (IllegalCharException e) {
            ErrorMsg err = new ErrorMsg(ErrorMsg.ILLEGAL_CHAR_ERR,
                                        lineNumber, e.getMessage());
            _parser.reportError(Constants.FATAL, err);
        }
        return null;
!!!3819266.java!!!	lookupName(inout name : QName) : SyntaxTreeNode
        // Is it a local var or param ?
        final SyntaxTreeNode result = _parser.lookupVariable(name);
        if (result != null)
            return(result);
        else
            return(_symbolTable.lookupName(name));
!!!3819394.java!!!	addError(inout error : ErrorMsg) : void
        _parser.reportError(Constants.ERROR, error);
!!!3819522.java!!!	report_error(inout message : String, inout info : Object) : void
        final ErrorMsg err = new ErrorMsg(ErrorMsg.SYNTAX_ERR, _lineNumber,
            _expression);
        _parser.reportError(Constants.FATAL, err);
!!!3819650.java!!!	report_fatal_error(inout message : String, inout info : Object) : void
        // empty
!!!3819778.java!!!	insertStep(inout step : Step, inout rlp : RelativeLocationPath) : RelativeLocationPath
        if (rlp instanceof Step) {
            return new ParentLocationPath(step, (Step) rlp);
        }
        else if (rlp instanceof ParentLocationPath) {
            final ParentLocationPath plp = (ParentLocationPath) rlp;
            final RelativeLocationPath newrlp = insertStep(step, plp.getPath());
            return new ParentLocationPath(newrlp, plp.getStep());
        }
        else {
            addError(new ErrorMsg(ErrorMsg.INTERNAL_ERR, "XPathParser.insertStep"));
            return rlp;
        }
!!!3819906.java!!!	isElementAxis(in axis : int) : boolean
        return (axis == Axis.CHILD || axis == Axis.ATTRIBUTE ||
                axis == Axis.NAMESPACE || axis == Axis.DESCENDANT);
