format 222
"filechooser" // jdk1.8::javax::swing::filechooser
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/swing/filechooser/"
  java_package "javax.swing.filechooser"
  classview 148226 "filechooser"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 365186 "FileView"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>FileView</code> defines an abstract class that can be implemented
to provide the filechooser with UI information for a <code>File</code>.
Each L&amp;F <code>JFileChooserUI</code> object implements this
class to pass back the correct icons and type descriptions specific to
that L&amp;F. For example, the Microsoft Windows L&amp;F returns the
generic Windows icons for directories and generic files.
Additionally, you may want to provide your own <code>FileView</code> to
<code>JFileChooser</code> to return different icons or additional
information using {@link javax.swing.JFileChooser#setFileView}.

<p>

<code>JFileChooser</code> first looks to see if there is a user defined
<code>FileView</code>, if there is, it gets type information from
there first. If <code>FileView</code> returns <code>null</code> for
any method, <code>JFileChooser</code> then uses the L&amp;F specific
view to get the information.
So, for example, if you provide a <code>FileView</code> class that
returns an <code>Icon</code> for JPG files, and returns <code>null</code>
icons for all other files, the UI's <code>FileView</code> will provide
default icons for all other files.

<p>

For an example implementation of a simple file view, see
<code><i>yourJDK</i>/demo/jfc/FileChooserDemo/ExampleFileView.java</code>.
For more information and examples see
<a
href=\"https://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html\">How to Use File Choosers</a>,
a section in <em>The Java Tutorial</em>.

@see javax.swing.JFileChooser

@author Jeff Dinkins

"
      operation 2455426 "getName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The name of the file. Normally this would be simply
<code>f.getName()</code>.
"
      end

      operation 2455554 "getDescription"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A human readable description of the file. For example,
a file named <i>jag.jpg</i> might have a description that read:
\"A JPEG image file of James Gosling's face\".
"
      end

      operation 2455682 "getTypeDescription"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A human readable description of the type of the file. For
example, a <code>jpg</code> file might have a type description of:
\"A JPEG Compressed Image File\"
"
      end

      operation 2455810 "getIcon"
	public return_type class_ref 352642 // Icon
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The icon that represents this file in the <code>JFileChooser</code>.
"
      end

      operation 2455938 "isTraversable"
	public return_type class_ref 315010 // Boolean
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Whether the directory is traversable or not. This might be
useful, for example, if you want a directory to represent
a compound document and don't want the user to descend into it.
"
      end
    end

    class 367234 "FileSystemView"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "FileSystemView is JFileChooser's gateway to the
file system. Since the JDK1.1 File API doesn't allow
access to such information as root partitions, file type
information, or hidden file bits, this class is designed
to intuit as much OS-specific file system information as
possible.

<p>

Java Licensees may want to provide a different implementation of
FileSystemView to better handle a given operating system.

@author Jeff Dinkins

 PENDING(jeff) - need to provide a specification for
 how Mac/OS2/BeOS/etc file systems can modify FileSystemView
 to handle their particular type of file system."
      classrelation 4220290 // windowsFileSystemView (<unidirectional association>)
	relation 4220290 --->
	  a role_name "windowsFileSystemView" init_value " null" class_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4220290 // windowsFileSystemView (<unidirectional association>)
	  b parent class_ref 367234 // FileSystemView
      end

      classrelation 4220418 // unixFileSystemView (<unidirectional association>)
	relation 4220418 --->
	  a role_name "unixFileSystemView" init_value " null" class_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4220418 // unixFileSystemView (<unidirectional association>)
	  b parent class_ref 367234 // FileSystemView
      end

      classrelation 4220546 // genericFileSystemView (<unidirectional association>)
	relation 4220546 --->
	  a role_name "genericFileSystemView" init_value " null" class_relation package
	    comment "static FileSystemView macFileSystemView = null;
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4220546 // genericFileSystemView (<unidirectional association>)
	  b parent class_ref 367234 // FileSystemView
      end

      attribute 2453506 "useSystemExtensionHiding"
	private explicit_type "boolean"
	init_value "
            UIManager.getDefaults().getBoolean(\"FileChooser.useSystemExtensionHiding\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 10911490 "getFileSystemView"
	class_operation public return_type class_ref 367234 // FileSystemView
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10911618 "FileSystemView"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10911746 "isRoot"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the given file is a root in the navigable tree(s).
Examples: Windows 98 has one root, the Desktop folder. DOS has one root
per drive letter, <code>C:\\</code>, <code>D:\\</code>, etc. Unix has one root,
the <code>\"/\"</code> directory.

The default implementation gets information from the <code>ShellFolder</code> class.

@param f a <code>File</code> object representing a directory
@return <code>true</code> if <code>f</code> is a root in the navigable tree.
@see #isFileSystemRoot
"
      end

      operation 10911874 "isTraversable"
	public return_type class_ref 315010 // Boolean
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the file (directory) can be visited.
Returns false if the directory cannot be traversed.

@param f the <code>File</code>
@return <code>true</code> if the file/directory can be traversed, otherwise <code>false</code>
@see JFileChooser#isTraversable
@see FileView#isTraversable
@since 1.4
"
      end

      operation 10912002 "getSystemDisplayName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name of a file, directory, or folder as it would be displayed in
a system file browser. Example from Windows: the \"M:\\\" directory
displays as \"CD-ROM (M:)\"

The default implementation gets information from the ShellFolder class.

@param f a <code>File</code> object
@return the file name as it would be displayed by a native file chooser
@see JFileChooser#getName
@since 1.4
"
      end

      operation 10912130 "getSystemTypeDescription"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Type description for a file, directory, or folder as it would be displayed in
a system file browser. Example from Windows: the \"Desktop\" folder
is described as \"Desktop\".

Override for platforms with native ShellFolder implementations.

@param f a <code>File</code> object
@return the file type description as it would be displayed by a native file chooser
or null if no native information is available.
@see JFileChooser#getTypeDescription
@since 1.4
"
      end

      operation 10912258 "getSystemIcon"
	public return_type class_ref 352642 // Icon
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Icon for a file, directory, or folder as it would be displayed in
a system file browser. Example from Windows: the \"M:\\\" directory
displays a CD-ROM icon.

The default implementation gets information from the ShellFolder class.

@param f a <code>File</code> object
@return an icon as it would be displayed by a native file chooser
@see JFileChooser#getIcon
@since 1.4
"
      end

      operation 10912386 "isParent"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "folder" type class_ref 131970 // File
	  param inout name "file" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "On Windows, a file can appear in multiple folders, other than its
parent directory in the filesystem. Folder could for example be the
\"Desktop\" folder which is not the same as file.getParentFile().

@param folder a <code>File</code> object representing a directory or special folder
@param file a <code>File</code> object
@return <code>true</code> if <code>folder</code> is a directory or special folder and contains <code>file</code>.
@since 1.4
"
      end

      operation 10912514 "getChild"
	public return_type class_ref 131970 // File
	nparams 2
	  param inout name "parent" type class_ref 131970 // File
	  param inout name "fileName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@param parent a <code>File</code> object representing a directory or special folder
@param fileName a name of a file or folder which exists in <code>parent</code>
@return a File object. This is normally constructed with <code>new
File(parent, fileName)</code> except when parent and child are both
special folders, in which case the <code>File</code> is a wrapper containing
a <code>ShellFolder</code> object.
@since 1.4
"
      end

      operation 10912642 "isFileSystem"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if <code>f</code> represents a real directory or file as opposed to a
special folder such as <code>\"Desktop\"</code>. Used by UI classes to decide if
a folder is selectable when doing directory choosing.

@param f a <code>File</code> object
@return <code>true</code> if <code>f</code> is a real file or directory.
@since 1.4
"
      end

      operation 10912770 "createNewFolder"
	abstract public return_type class_ref 131970 // File
	nparams 1
	  param inout name "containingDir" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new folder with a default folder name.
"
      end

      operation 10912898 "isHiddenFile"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether a file is hidden or not.
"
      end

      operation 10913026 "isFileSystemRoot"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "dir" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Is dir the root of a tree in the file system, such as a drive
or partition. Example: Returns true for \"C:\\\" on Windows 98.

@param dir a <code>File</code> object representing a directory
@return <code>true</code> if <code>f</code> is a root of a filesystem
@see #isRoot
@since 1.4
"
      end

      operation 10913154 "isDrive"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "dir" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by UI classes to decide whether to display a special icon
for drives or partitions, e.g. a \"hard disk\" icon.

The default implementation has no way of knowing, so always returns false.

@param dir a directory
@return <code>false</code> always
@since 1.4
"
      end

      operation 10913282 "isFloppyDrive"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "dir" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by UI classes to decide whether to display a special icon
for a floppy disk. Implies isDrive(dir).

The default implementation has no way of knowing, so always returns false.

@param dir a directory
@return <code>false</code> always
@since 1.4
"
      end

      operation 10913410 "isComputerNode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "dir" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by UI classes to decide whether to display a special icon
for a computer node, e.g. \"My Computer\" or a network server.

The default implementation has no way of knowing, so always returns false.

@param dir a directory
@return <code>false</code> always
@since 1.4
"
      end

      operation 10913538 "getRoots"
	public return_type class_ref 131970 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all root partitions on this system. For example, on
Windows, this would be the \"Desktop\" folder, while on DOS this
would be the A: through Z: drives.
"
      end

      operation 10913666 "getHomeDirectory"
	public return_type class_ref 131970 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Providing default implementations for the remaining methods
 because most OS file systems will likely be able to use this
 code. If a given OS can't, override these methods in its
 implementation."
      end

      operation 10913794 "getDefaultDirectory"
	public return_type class_ref 131970 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the user's default starting directory for the file chooser.

@return a <code>File</code> object representing the default
        starting folder
@since 1.4
"
      end

      operation 10913922 "createFileObject"
	public return_type class_ref 131970 // File
	nparams 2
	  param inout name "dir" type class_ref 131970 // File
	  param inout name "filename" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a File object constructed in dir from the given filename.
"
      end

      operation 10914050 "createFileObject"
	public return_type class_ref 131970 // File
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a File object constructed from the given path string.
"
      end

      operation 10914178 "getFiles"
	public return_type class_ref 131970 // File
	nparams 2
	  param inout name "dir" type class_ref 131970 // File
	  param inout name "useFileHiding" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the list of shown (i.e. not hidden) files.
"
      end

      operation 10914306 "getParentDirectory"
	public return_type class_ref 131970 // File
	nparams 1
	  param inout name "dir" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent directory of <code>dir</code>.
@param dir the <code>File</code> being queried
@return the parent directory of <code>dir</code>, or
  <code>null</code> if <code>dir</code> is <code>null</code>
"
      end

      operation 10914434 "getShellFolder"
	package explicit_return_type "ShellFolder"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws {@code FileNotFoundException} if file not found or current thread was interrupted
"
      end

      operation 10914562 "createFileSystemRoot"
	protected return_type class_ref 131970 // File
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>File</code> object for <code>f</code> with correct
behavior for a file system root directory.

@param f a <code>File</code> object representing a file system root
         directory, for example \"/\" on Unix or \"C:\\\" on Windows.
@return a new <code>File</code> object
@since 1.4
"
      end

      class 1306370 "FileSystemRoot"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4220674 // <generalisation>
	  relation 4220674 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 4220674 // <generalisation>
	    b parent class_ref 131970 // File
	end

	operation 10914690 "FileSystemRoot"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "f" type class_ref 131970 // File
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10914818 "FileSystemRoot"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "s" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10914946 "isDirectory"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10915074 "getName"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 369026 "FileFilter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>FileFilter</code> is an abstract class used by {@code JFileChooser}
for filtering the set of files shown to the user. See
{@code FileNameExtensionFilter} for an implementation that filters using
the file name extension.
<p>
A <code>FileFilter</code>
can be set on a <code>JFileChooser</code> to
keep unwanted files from appearing in the directory listing.
For an example implementation of a simple file filter, see
<code><i>yourJDK</i>/demo/jfc/FileChooserDemo/ExampleFileFilter.java</code>.
For more information and examples see
<a href=\"https://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html\">How to Use File Choosers</a>,
a section in <em>The Java Tutorial</em>.

@see FileNameExtensionFilter
@see javax.swing.JFileChooser#setFileFilter
@see javax.swing.JFileChooser#addChoosableFileFilter

@author Jeff Dinkins
"
      operation 2454018 "accept"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Whether the given file is accepted by this filter.
"
      end

      operation 2454146 "getDescription"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The description of this filter. For example: \"JPG and GIF Images\"
@see FileView#getName
"
      end
    end

    class 1306242 "FileNameExtensionFilter"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An implementation of {@code FileFilter} that filters using a
specified set of extensions. The extension for a file is the
portion of the file name after the last \".\". Files whose name does
not contain a \".\" have no file name extension. File name extension
comparisons are case insensitive.
<p>
The following example creates a
{@code FileNameExtensionFilter} that will show {@code jpg} files:
<pre>
FileFilter filter = new FileNameExtensionFilter(\"JPEG file\", \"jpg\", \"jpeg\");
JFileChooser fileChooser = ...;
fileChooser.addChoosableFileFilter(filter);
</pre>

@see FileFilter
@see javax.swing.JFileChooser#setFileFilter
@see javax.swing.JFileChooser#addChoosableFileFilter
@see javax.swing.JFileChooser#getFileFilter

@since 1.6
"
      classrelation 4219778 // <generalisation>
	relation 4219778 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4219778 // <generalisation>
	  b parent class_ref 369026 // FileFilter
      end

      classrelation 4219906 // description (<unidirectional association>)
	relation 4219906 --->
	  a role_name "description" const_relation private
	    comment " Description of this filter.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4219906 // description (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4220034 // extensions (<unidirectional association>)
	relation 4220034 --->
	  a role_name "extensions" multiplicity "[]" const_relation private
	    comment " Known extensions.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 4220034 // extensions (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4220162 // lowerCaseExtensions (<unidirectional association>)
	relation 4220162 --->
	  a role_name "lowerCaseExtensions" multiplicity "[]" const_relation private
	    comment " Cached ext
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 4220162 // lowerCaseExtensions (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 10910850 "FileNameExtensionFilter"
	public explicit_return_type ""
	nparams 2
	  param inout name "description" type class_ref 128130 // String
	  param inout name "" explicit_type "String...extensions"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code FileNameExtensionFilter} with the specified
description and file name extensions. The returned {@code
FileNameExtensionFilter} will accept all directories and any
file with a file name extension contained in {@code extensions}.

@param description textual description for the filter, may be
                   {@code null}
@param extensions the accepted file name extensions
@throws IllegalArgumentException if extensions is {@code null}, empty,
        contains {@code null}, or contains an empty string
@see #accept
"
      end

      operation 10910978 "accept"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests the specified file, returning true if the file is
accepted, false otherwise. True is returned if the extension
matches one of the file name extensions of this {@code
FileFilter}, or the file is a directory.

@param f the {@code File} to test
@return true if the file is to be accepted, false otherwise
"
      end

      operation 10911106 "getDescription"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The description of this filter. For example: \"JPG and GIF Images.\"

@return the description of this filter
"
      end

      operation 10911234 "getExtensions"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of file name extensions files are tested against.

@return the set of file name extensions files are tested against
"
      end

      operation 10911362 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the {@code FileNameExtensionFilter}.
This method is intended to be used for debugging purposes,
and the content and format of the returned string may vary
between implementations.

@return a string representation of this {@code FileNameExtensionFilter}
"
      end
    end

    class 1306498 "UnixFileSystemView"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "FileSystemView that handles some specific unix-isms.
"
      classrelation 4220802 // <generalisation>
	relation 4220802 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4220802 // <generalisation>
	  b parent class_ref 367234 // FileSystemView
      end

      classrelation 4220930 // newFolderString (<unidirectional association>)
	relation 4220930 --->
	  a role_name "newFolderString" init_value "
            UIManager.getString(\"FileChooser.other.newFolder\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4220930 // newFolderString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4221058 // newFolderNextString (<unidirectional association>)
	relation 4221058 --->
	  a role_name "newFolderNextString" init_value "
            UIManager.getString(\"FileChooser.other.newFolder.subsequent\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4221058 // newFolderNextString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 10915202 "createNewFolder"
	public return_type class_ref 131970 // File
	nparams 1
	  param inout name "containingDir" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new folder with a default folder name.
"
      end

      operation 10915330 "isFileSystemRoot"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "dir" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10915458 "isDrive"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "dir" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10915586 "isFloppyDrive"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "dir" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10915714 "isComputerNode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "dir" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1306626 "WindowsFileSystemView"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "FileSystemView that handles some specific windows concepts.
"
      classrelation 4221186 // <generalisation>
	relation 4221186 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4221186 // <generalisation>
	  b parent class_ref 367234 // FileSystemView
      end

      classrelation 4221314 // newFolderString (<unidirectional association>)
	relation 4221314 --->
	  a role_name "newFolderString" init_value "
            UIManager.getString(\"FileChooser.win32.newFolder\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4221314 // newFolderString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4221442 // newFolderNextString (<unidirectional association>)
	relation 4221442 --->
	  a role_name "newFolderNextString" init_value "
            UIManager.getString(\"FileChooser.win32.newFolder.subsequent\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4221442 // newFolderNextString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 10915842 "isTraversable"
	public return_type class_ref 315010 // Boolean
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10915970 "getChild"
	public return_type class_ref 131970 // File
	nparams 2
	  param inout name "parent" type class_ref 131970 // File
	  param inout name "fileName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10916098 "getSystemTypeDescription"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Type description for a file, directory, or folder as it would be displayed in
a system file browser. Example from Windows: the \"Desktop\" folder
is described as \"Desktop\".

The Windows implementation gets information from the ShellFolder class.
"
      end

      operation 10916226 "getHomeDirectory"
	public return_type class_ref 131970 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return the Desktop folder.
"
      end

      operation 10916354 "createNewFolder"
	public return_type class_ref 131970 // File
	nparams 1
	  param inout name "containingDir" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new folder with a default folder name.
"
      end

      operation 10916482 "isDrive"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "dir" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10916610 "isFloppyDrive"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "dir" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10916738 "createFileObject"
	public return_type class_ref 131970 // File
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a File object constructed from the given path string.
"
      end

      operation 10916866 "createFileSystemRoot"
	protected return_type class_ref 131970 // File
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1306754 "GenericFileSystemView"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Fallthrough FileSystemView in case we can't determine the OS.
"
      classrelation 4221570 // <generalisation>
	relation 4221570 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4221570 // <generalisation>
	  b parent class_ref 367234 // FileSystemView
      end

      classrelation 4221698 // newFolderString (<unidirectional association>)
	relation 4221698 --->
	  a role_name "newFolderString" init_value "
            UIManager.getString(\"FileChooser.other.newFolder\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4221698 // newFolderString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 10916994 "createNewFolder"
	public return_type class_ref 131970 // File
	nparams 1
	  param inout name "containingDir" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new folder with a default folder name.
"
      end
    end
  end

  deploymentview 144386 "filechooser"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 294018 "FileFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
${definition}"
      associated_elems
	class_ref 369026 // FileFilter
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 294146 "FileView"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import javax.swing.*;
${definition}"
      associated_elems
	class_ref 365186 // FileView
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 945026 "FileNameExtensionFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.util.Locale;
${definition}"
      associated_elems
	class_ref 1306242 // FileNameExtensionFilter
      end
      comment "Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 945154 "FileSystemView"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.swing.*;
import java.awt.Image;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import java.lang.ref.WeakReference;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;
import java.security.AccessController;
import java.security.PrivilegedAction;
import sun.awt.shell.*;
${definition}"
      associated_elems
	class_ref 367234 // FileSystemView
	class_ref 1306498 // UnixFileSystemView
	class_ref 1306626 // WindowsFileSystemView
	class_ref 1306754 // GenericFileSystemView
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
