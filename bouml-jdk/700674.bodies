class XSComplexTypeDecl
!!!4641026.java!!!	XSComplexTypeDecl()
        // do-nothing constructor for now.
!!!4641154.java!!!	setValues(inout name : String, inout targetNamespace : String, inout baseType : XSTypeDefinition, in derivedBy : short, in schemaFinal : short, in block : short, in contentType : short, inout isAbstract : boolean, inout attrGrp : XSAttributeGroupDecl, inout simpleType : XSSimpleType, inout particle : XSParticleDecl, inout annotations : XSObjectListImpl) : void
        fTargetNamespace = targetNamespace;
        fBaseType = baseType;
        fDerivedBy = derivedBy;
        fFinal = schemaFinal;
        fBlock = block;
        fContentType = contentType;
        if(isAbstract)
            fMiscFlags |= CT_IS_ABSTRACT;
        fAttrGrp = attrGrp;
        fXSSimpleType = simpleType;
        fParticle = particle;
        fAnnotations = annotations;
!!!4641282.java!!!	setName(inout name : String) : void
        fName = name;
!!!4641410.java!!!	getTypeCategory() : short
        return COMPLEX_TYPE;
!!!4641538.java!!!	getTypeName() : String
        return fName;
!!!4641666.java!!!	getFinalSet() : short
        return fFinal;
!!!4641794.java!!!	getTargetNamespace() : String
        return fTargetNamespace;
!!!4641922.java!!!	containsTypeID() : boolean
        return((fMiscFlags & CT_HAS_TYPE_ID) != 0);
!!!4642050.java!!!	setIsAbstractType() : void
        fMiscFlags |= CT_IS_ABSTRACT;
!!!4642178.java!!!	setContainsTypeID() : void
        fMiscFlags |= CT_HAS_TYPE_ID;
!!!4642306.java!!!	setIsAnonymous() : void
        fMiscFlags |= CT_IS_ANONYMOUS;
!!!4642434.java!!!	getContentModel(inout cmBuilder : CMBuilder) : XSCMValidator
        // for complex type with empty or simple content,
        // there is no content model validator
        if (fContentType == XSComplexTypeDecl.CONTENTTYPE_SIMPLE ||
            fContentType == XSComplexTypeDecl.CONTENTTYPE_EMPTY) {
            return null;
        }
        if (fCMValidator == null)
            synchronized (this) {
                if (fCMValidator == null) {
                    fCMValidator = cmBuilder.getContentModel(this);
                }
            }
        return fCMValidator;
!!!4642562.java!!!	getAttrGrp() : XSAttributeGroupDecl
        return fAttrGrp;
!!!4642690.java!!!	toString() : String
        StringBuilder str = new StringBuilder(192);
        appendTypeInfo(str);
        return str.toString();
!!!4642818.java!!!	appendTypeInfo(inout str : StringBuilder) : void
        String contentType[] = {"EMPTY", "SIMPLE", "ELEMENT", "MIXED"};
        String derivedBy[] = {"EMPTY", "EXTENSION", "RESTRICTION"};

        str.append("Complex type name='").append(fTargetNamespace).append(',').append(getTypeName()).append("', ");
        if (fBaseType != null) {
            str.append(" base type name='").append(fBaseType.getName()).append("', ");
        }
        str.append(" content type='").append(contentType[fContentType]).append("', ");
        str.append(" isAbstract='").append(getAbstract()).append("', ");
        str.append(" hasTypeId='").append(containsTypeID()).append("', ");
        str.append(" final='").append(fFinal).append("', ");
        str.append(" block='").append(fBlock).append("', ");
        if (fParticle != null) {
            str.append(" particle='").append(fParticle.toString()).append("', ");
        }
        str.append(" derivedBy='").append(derivedBy[fDerivedBy]).append("'. ");

!!!4642946.java!!!	derivedFromType(inout ancestor : XSTypeDefinition, in derivationMethod : short) : boolean
        // ancestor is null, retur false
        if (ancestor == null)
            return false;
        // ancestor is anyType, return true
        if (ancestor == SchemaGrammar.fAnyType)
            return true;
        // recursively get base, and compare it with ancestor
        XSTypeDefinition type = this;
        while (type != ancestor &&                     // compare with ancestor
               type != SchemaGrammar.fAnySimpleType &&  // reached anySimpleType
               type != SchemaGrammar.fAnyType) {        // reached anyType
            type = type.getBaseType();
        }

        return type == ancestor;
!!!4643074.java!!!	derivedFrom(inout ancestorNS : String, inout ancestorName : String, in derivationMethod : short) : boolean
        // ancestor is null, retur false
        if (ancestorName == null)
            return false;
        // ancestor is anyType, return true
        if (ancestorNS != null &&
            ancestorNS.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA) &&
            ancestorName.equals(SchemaSymbols.ATTVAL_ANYTYPE)) {
            return true;
        }

        // recursively get base, and compare it with ancestor
        XSTypeDefinition type = this;
        while (!(ancestorName.equals(type.getName()) &&
                 ((ancestorNS == null && type.getNamespace() == null) ||
                  (ancestorNS != null && ancestorNS.equals(type.getNamespace())))) &&   // compare with ancestor
               type != SchemaGrammar.fAnySimpleType &&  // reached anySimpleType
               type != SchemaGrammar.fAnyType) {        // reached anyType
            type = (XSTypeDefinition)type.getBaseType();
        }

        return type != SchemaGrammar.fAnySimpleType &&
        type != SchemaGrammar.fAnyType;
!!!4643202.java!!!	isDOMDerivedFrom(inout ancestorNS : String, inout ancestorName : String, in derivationMethod : int) : boolean
        // ancestor is null, retur false
        if (ancestorName == null)
            return false;

        // ancestor is anyType, return true
        if (ancestorNS != null
                && ancestorNS.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA)
                && ancestorName.equals(SchemaSymbols.ATTVAL_ANYTYPE)
                && (derivationMethod == DERIVATION_RESTRICTION
                && derivationMethod == DERIVATION_EXTENSION)) {
            return true;
        }

        // restriction
        if ((derivationMethod & DERIVATION_RESTRICTION) != 0) {
            if (isDerivedByRestriction(ancestorNS, ancestorName,
                    derivationMethod, this)) {
                return true;
            }
        }

        // extension
        if ((derivationMethod & DERIVATION_EXTENSION) != 0) {
            if (isDerivedByExtension(ancestorNS, ancestorName,
                    derivationMethod, this)) {
                return true;
            }
        }

        // list or union
        if ((((derivationMethod & DERIVATION_LIST) != 0) || ((derivationMethod & DERIVATION_UNION) != 0))
                && ((derivationMethod & DERIVATION_RESTRICTION) == 0)
                && ((derivationMethod & DERIVATION_EXTENSION) == 0)) {

            if (ancestorNS.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA)
                    && ancestorName.equals(SchemaSymbols.ATTVAL_ANYTYPE)) {
                ancestorName = SchemaSymbols.ATTVAL_ANYSIMPLETYPE;
            }

            if(!(fName.equals(SchemaSymbols.ATTVAL_ANYTYPE)
                            && fTargetNamespace.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA))){
                if (fBaseType != null && fBaseType instanceof XSSimpleTypeDecl) {

                    return ((XSSimpleTypeDecl) fBaseType).isDOMDerivedFrom(ancestorNS,
                            ancestorName, derivationMethod);
                } else if (fBaseType != null
                        && fBaseType instanceof XSComplexTypeDecl) {
                    return ((XSComplexTypeDecl) fBaseType).isDOMDerivedFrom(
                            ancestorNS, ancestorName, derivationMethod);
                }
            }
        }

        // If the value of the parameter is 0 i.e. no bit (corresponding to
        // restriction, list, extension or union) is set to 1 for the
        // derivationMethod parameter.
        if (((derivationMethod  & DERIVATION_EXTENSION) == 0)
                && (((derivationMethod & DERIVATION_RESTRICTION) == 0)
                        && ((derivationMethod & DERIVATION_LIST) == 0)
                        && ((derivationMethod & DERIVATION_UNION) == 0))) {
            return isDerivedByAny(ancestorNS, ancestorName, derivationMethod, this);
        }

        return false;
!!!4643330.java!!!	isDerivedByAny(inout ancestorNS : String, inout ancestorName : String, in derivationMethod : int, inout type : XSTypeDefinition) : boolean
        XSTypeDefinition oldType = null;
        boolean derivedFrom = false;
        while (type != null && type != oldType) {

            // If the ancestor type is reached or is the same as this type.
            if ((ancestorName.equals(type.getName()))
                    && ((ancestorNS == null && type.getNamespace() == null)
                        || (ancestorNS != null && ancestorNS.equals(type.getNamespace())))) {
                derivedFrom = true;
                break;
            }

            // Check if this type is derived from the base by restriction or
            // extension
            if (isDerivedByRestriction(ancestorNS, ancestorName,
                    derivationMethod, type)) {
                return true;
            } else if (!isDerivedByExtension(ancestorNS, ancestorName,
                    derivationMethod, type)) {
                return true;
            }
            oldType = type;
            type = type.getBaseType();
        }

        return derivedFrom;
!!!4643458.java!!!	isDerivedByRestriction(inout ancestorNS : String, inout ancestorName : String, in derivationMethod : int, inout type : XSTypeDefinition) : boolean

        XSTypeDefinition oldType = null;
        while (type != null && type != oldType) {

            // ancestor is anySimpleType, return false
            if (ancestorNS != null
                    && ancestorNS.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA)
                    && ancestorName.equals(SchemaSymbols.ATTVAL_ANYSIMPLETYPE)) {
                return false;
            }

            // if the name and namespace of this type is the same as the
            // ancestor return true
            if ((ancestorName.equals(type.getName()))
                    && (ancestorNS != null && ancestorNS.equals(type.getNamespace()))
                            || ((type.getNamespace() == null && ancestorNS == null))) {

                return true;
            }

            // If the base type is a complexType with simpleContent
            if (type instanceof XSSimpleTypeDecl) {
                if (ancestorNS.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA)
                        && ancestorName.equals(SchemaSymbols.ATTVAL_ANYTYPE)) {
                    ancestorName = SchemaSymbols.ATTVAL_ANYSIMPLETYPE;
                }
                return ((XSSimpleTypeDecl) type).isDOMDerivedFrom(ancestorNS,
                        ancestorName, derivationMethod);
            } else {
                // If the base type is a complex type
                // Every derivation step till the base type should be
                // restriction. If not return false
                if (((XSComplexTypeDecl) type).getDerivationMethod() != XSConstants.DERIVATION_RESTRICTION) {
                    return false;
                }
            }
            oldType = type;
            type = type.getBaseType();

        }

        return false;
!!!4643586.java!!!	isDerivedByExtension(inout ancestorNS : String, inout ancestorName : String, in derivationMethod : int, inout type : XSTypeDefinition) : boolean

        boolean extension = false;
        XSTypeDefinition oldType = null;
        while (type != null && type != oldType) {
            // If ancestor is anySimpleType return false.
            if (ancestorNS != null
                    && ancestorNS.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA)
                    && ancestorName.equals(SchemaSymbols.ATTVAL_ANYSIMPLETYPE)
                    && SchemaSymbols.URI_SCHEMAFORSCHEMA.equals(type.getNamespace())
                            && SchemaSymbols.ATTVAL_ANYTYPE.equals(type.getName())) {
                break;
            }

            if ((ancestorName.equals(type.getName()))
                    && ((ancestorNS == null && type.getNamespace() == null)
                        || (ancestorNS != null && ancestorNS.equals(type.getNamespace())))) {
                // returns true if atleast one derivation step was extension
                return extension;
            }

            // If the base type is a complexType with simpleContent
            if (type instanceof XSSimpleTypeDecl) {
                if (ancestorNS.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA)
                        && ancestorName.equals(SchemaSymbols.ATTVAL_ANYTYPE)) {
                    ancestorName = SchemaSymbols.ATTVAL_ANYSIMPLETYPE;
                }

                // derivationMethod extension will always return false for a
                // simpleType,
                // we treat it like a restriction
                if ((derivationMethod & DERIVATION_EXTENSION) != 0) {
                    return extension
                    & ((XSSimpleTypeDecl) type).isDOMDerivedFrom(
                            ancestorNS, ancestorName,
                            (derivationMethod & DERIVATION_RESTRICTION));
                } else {
                    return extension
                    & ((XSSimpleTypeDecl) type).isDOMDerivedFrom(
                            ancestorNS, ancestorName, derivationMethod);
                }

            } else {
                // If the base type is a complex type
                // At least one derivation step upto the ancestor type should be
                // extension.
                if (((XSComplexTypeDecl) type).getDerivationMethod() == XSConstants.DERIVATION_EXTENSION) {
                    extension = extension | true;
                }
            }
            oldType = type;
            type = type.getBaseType();
        }

        return false;
!!!4643714.java!!!	reset() : void
        fName = null;
        fTargetNamespace = null;
        fBaseType = null;
        fDerivedBy = XSConstants.DERIVATION_RESTRICTION;
        fFinal = XSConstants.DERIVATION_NONE;
        fBlock = XSConstants.DERIVATION_NONE;

        fMiscFlags = 0;

        // reset attribute group
        fAttrGrp.reset();
        fContentType = CONTENTTYPE_EMPTY;
        fXSSimpleType = null;
        fParticle = null;
        fCMValidator = null;
        fUPACMValidator = null;
        if(fAnnotations != null) {
            // help out the garbage collector
            fAnnotations.clearXSObjectList();
        }
        fAnnotations = null;
!!!4643842.java!!!	getType() : short
        return XSConstants.TYPE_DEFINITION;
!!!4643970.java!!!	getName() : String
        return getAnonymous() ? null : fName;
!!!4644098.java!!!	getAnonymous() : boolean
        return((fMiscFlags & CT_IS_ANONYMOUS) != 0);
!!!4644226.java!!!	getNamespace() : String
        return fTargetNamespace;
!!!4644354.java!!!	getBaseType() : XSTypeDefinition
        return fBaseType;
!!!4644482.java!!!	getDerivationMethod() : short
        return fDerivedBy;
!!!4644610.java!!!	isFinal(in derivation : short) : boolean
        return (fFinal & derivation) != 0;
!!!4644738.java!!!	getFinal() : short
        return fFinal;
!!!4644866.java!!!	getAbstract() : boolean
        return((fMiscFlags & CT_IS_ABSTRACT) != 0);
!!!4644994.java!!!	getAttributeUses() : XSObjectList
        return fAttrGrp.getAttributeUses();
!!!4645122.java!!!	getAttributeWildcard() : XSWildcard
        return fAttrGrp.getAttributeWildcard();
!!!4645250.java!!!	getContentType() : short
        return fContentType;
!!!4645378.java!!!	getSimpleType() : XSSimpleTypeDefinition
        return fXSSimpleType;
!!!4645506.java!!!	getParticle() : XSParticle
        return fParticle;
!!!4645634.java!!!	isProhibitedSubstitution(in prohibited : short) : boolean
        return (fBlock & prohibited) != 0;
!!!4645762.java!!!	getProhibitedSubstitutions() : short
        return fBlock;
!!!4645890.java!!!	getAnnotations() : XSObjectList
        return (fAnnotations != null) ? fAnnotations : XSObjectListImpl.EMPTY_LIST;
!!!4646018.java!!!	getNamespaceItem() : XSNamespaceItem
        return fNamespaceItem;
!!!4646146.java!!!	setNamespaceItem(inout namespaceItem : XSNamespaceItem) : void
        fNamespaceItem = namespaceItem;
!!!4646274.java!!!	getAttributeUse(inout namespace : String, inout name : String) : XSAttributeUse
         return fAttrGrp.getAttributeUse(namespace, name);
!!!4646402.java!!!	getTypeNamespace() : String
        return getNamespace();
!!!4646530.java!!!	isDerivedFrom(inout typeNamespaceArg : String, inout typeNameArg : String, in derivationMethod : int) : boolean
        return isDOMDerivedFrom(typeNamespaceArg, typeNameArg, derivationMethod);
