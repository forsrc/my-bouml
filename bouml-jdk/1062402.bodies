class TemporalAdjusters
!!!8558850.java!!!	ofDateAdjuster(inout dateBasedAdjuster : UnaryOperator) : TemporalAdjuster
        Objects.requireNonNull(dateBasedAdjuster, "dateBasedAdjuster");
        return (temporal) -> {
            LocalDate input = LocalDate.from(temporal);
            LocalDate output = dateBasedAdjuster.apply(input);
            return temporal.with(output);
        };
!!!8558978.java!!!	firstDayOfMonth() : TemporalAdjuster
        return (temporal) -> temporal.with(DAY_OF_MONTH, 1);
!!!8559106.java!!!	lastDayOfMonth() : TemporalAdjuster
        return (temporal) -> temporal.with(DAY_OF_MONTH, temporal.range(DAY_OF_MONTH).getMaximum());
!!!8559234.java!!!	firstDayOfNextMonth() : TemporalAdjuster
        return (temporal) -> temporal.with(DAY_OF_MONTH, 1).plus(1, MONTHS);
!!!8559362.java!!!	firstDayOfYear() : TemporalAdjuster
        return (temporal) -> temporal.with(DAY_OF_YEAR, 1);
!!!8559490.java!!!	lastDayOfYear() : TemporalAdjuster
        return (temporal) -> temporal.with(DAY_OF_YEAR, temporal.range(DAY_OF_YEAR).getMaximum());
!!!8559618.java!!!	firstDayOfNextYear() : TemporalAdjuster
        return (temporal) -> temporal.with(DAY_OF_YEAR, 1).plus(1, YEARS);
!!!8559746.java!!!	firstInMonth(inout dayOfWeek : DayOfWeek) : TemporalAdjuster
        return TemporalAdjusters.dayOfWeekInMonth(1, dayOfWeek);
!!!8559874.java!!!	lastInMonth(inout dayOfWeek : DayOfWeek) : TemporalAdjuster
        return TemporalAdjusters.dayOfWeekInMonth(-1, dayOfWeek);
!!!8560002.java!!!	dayOfWeekInMonth(in ordinal : int, inout dayOfWeek : DayOfWeek) : TemporalAdjuster
        Objects.requireNonNull(dayOfWeek, "dayOfWeek");
        int dowValue = dayOfWeek.getValue();
        if (ordinal >= 0) {
            return (temporal) -> {
                Temporal temp = temporal.with(DAY_OF_MONTH, 1);
                int curDow = temp.get(DAY_OF_WEEK);
                int dowDiff = (dowValue - curDow + 7) % 7;
                dowDiff += (ordinal - 1L) * 7L;  // safe from overflow
                return temp.plus(dowDiff, DAYS);
            };
        } else {
            return (temporal) -> {
                Temporal temp = temporal.with(DAY_OF_MONTH, temporal.range(DAY_OF_MONTH).getMaximum());
                int curDow = temp.get(DAY_OF_WEEK);
                int daysDiff = dowValue - curDow;
                daysDiff = (daysDiff == 0 ? 0 : (daysDiff > 0 ? daysDiff - 7 : daysDiff));
                daysDiff -= (-ordinal - 1L) * 7L;  // safe from overflow
                return temp.plus(daysDiff, DAYS);
            };
        }
!!!8560130.java!!!	next(inout dayOfWeek : DayOfWeek) : TemporalAdjuster
        int dowValue = dayOfWeek.getValue();
        return (temporal) -> {
            int calDow = temporal.get(DAY_OF_WEEK);
            int daysDiff = calDow - dowValue;
            return temporal.plus(daysDiff >= 0 ? 7 - daysDiff : -daysDiff, DAYS);
        };
!!!8560258.java!!!	nextOrSame(inout dayOfWeek : DayOfWeek) : TemporalAdjuster
        int dowValue = dayOfWeek.getValue();
        return (temporal) -> {
            int calDow = temporal.get(DAY_OF_WEEK);
            if (calDow == dowValue) {
                return temporal;
            }
            int daysDiff = calDow - dowValue;
            return temporal.plus(daysDiff >= 0 ? 7 - daysDiff : -daysDiff, DAYS);
        };
!!!8560386.java!!!	previous(inout dayOfWeek : DayOfWeek) : TemporalAdjuster
        int dowValue = dayOfWeek.getValue();
        return (temporal) -> {
            int calDow = temporal.get(DAY_OF_WEEK);
            int daysDiff = dowValue - calDow;
            return temporal.minus(daysDiff >= 0 ? 7 - daysDiff : -daysDiff, DAYS);
        };
!!!8560514.java!!!	previousOrSame(inout dayOfWeek : DayOfWeek) : TemporalAdjuster
        int dowValue = dayOfWeek.getValue();
        return (temporal) -> {
            int calDow = temporal.get(DAY_OF_WEEK);
            if (calDow == dowValue) {
                return temporal;
            }
            int daysDiff = dowValue - calDow;
            return temporal.minus(daysDiff >= 0 ? 7 - daysDiff : -daysDiff, DAYS);
        };
