class TOAFactory
!!!1151362.java!!!	find(inout oaid : ObjectAdapterId) : ObjectAdapter
        if (oaid.equals( ObjectKeyTemplateBase.JIDL_OAID )  )
            // Return the dispatch-only TOA, which can dispatch
            // request for objects created by any TOA.
            return getTOA() ;
        else
            throw wrapper.badToaOaid() ;
!!!1151490.java!!!	init(inout orb : ORB) : void
        this.orb = orb ;
        wrapper = ORBUtilSystemException.get( orb,
            CORBALogDomains.OA_LIFECYCLE ) ;
        tom = new TransientObjectManager( orb ) ;
        codebaseToTOA = new HashMap() ;
!!!1151618.java!!!	shutdown(inout waitForCompletion : boolean) : void
        if (Util.isInstanceDefined()) {
            Util.getInstance().unregisterTargetsForORB(orb);
        }
!!!1151746.java!!!	getTOA(inout codebase : String) : TOA
        TOA toa = (TOA)(codebaseToTOA.get( codebase )) ;
        if (toa == null) {
            toa = new TOAImpl( orb, tom, codebase ) ;

            codebaseToTOA.put( codebase, toa ) ;
        }

        return toa ;
!!!1151874.java!!!	getTOA() : TOA
        if (toa == null)
            // The dispatch-only TOA is not used for creating
            // objrefs, so its codebase can be null (and must
            // be, since we do not have a servant at this point)
            toa = new TOAImpl( orb, tom, null ) ;

        return toa ;
!!!1152002.java!!!	getORB() : ORB
        return orb ;
