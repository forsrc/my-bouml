class WindowsRadioButtonUI
!!!2762498.java!!!	createUI(inout c : JComponent) : ComponentUI
        AppContext appContext = AppContext.getAppContext();
        WindowsRadioButtonUI windowsRadioButtonUI =
                (WindowsRadioButtonUI) appContext.get(WINDOWS_RADIO_BUTTON_UI_KEY);
        if (windowsRadioButtonUI == null) {
            windowsRadioButtonUI = new WindowsRadioButtonUI();
            appContext.put(WINDOWS_RADIO_BUTTON_UI_KEY, windowsRadioButtonUI);
        }
        return windowsRadioButtonUI;
!!!2762626.java!!!	installDefaults(inout b : AbstractButton) : void
        super.installDefaults(b);
        if(!initialized) {
            dashedRectGapX = ((Integer)UIManager.get("Button.dashedRectGapX")).intValue();
            dashedRectGapY = ((Integer)UIManager.get("Button.dashedRectGapY")).intValue();
            dashedRectGapWidth = ((Integer)UIManager.get("Button.dashedRectGapWidth")).intValue();
            dashedRectGapHeight = ((Integer)UIManager.get("Button.dashedRectGapHeight")).intValue();
            focusColor = UIManager.getColor(getPropertyPrefix() + "focus");
            initialized = true;
        }
        if (XPStyle.getXP() != null) {
            LookAndFeel.installProperty(b, "rolloverEnabled", Boolean.TRUE);
        }
!!!2762754.java!!!	uninstallDefaults(inout b : AbstractButton) : void
        super.uninstallDefaults(b);
        initialized = false;
!!!2762882.java!!!	getFocusColor() : Color
        return focusColor;
!!!2763010.java!!!	paintText(inout g : Graphics, inout b : AbstractButton, inout textRect : Rectangle, inout text : String) : void
        WindowsGraphicsUtils.paintText(g, b, textRect, text, getTextShiftOffset());
!!!2763138.java!!!	paintFocus(inout g : Graphics, inout textRect : Rectangle, inout d : Dimension) : void
        g.setColor(getFocusColor());
        BasicGraphicsUtils.drawDashedRect(g, textRect.x, textRect.y, textRect.width, textRect.height);
!!!2763266.java!!!	getPreferredSize(inout c : JComponent) : Dimension
        Dimension d = super.getPreferredSize(c);

        /* Ensure that the width and height of the button is odd,
         * to allow for the focus line if focus is painted
         */
        AbstractButton b = (AbstractButton)c;
        if (d != null && b.isFocusPainted()) {
            if(d.width % 2 == 0) { d.width += 1; }
            if(d.height % 2 == 0) { d.height += 1; }
        }
        return d;
