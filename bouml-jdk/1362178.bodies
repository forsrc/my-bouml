class ToolBarPainter
!!!11397122.java!!!	ToolBarPainter(inout ctx : AbstractRegionPainter::PaintContext, in state : int)
        super();
        this.state = state;
        this.ctx = ctx;
!!!11397250.java!!!	doPaint(inout g : Graphics2D, inout c : JComponent, in width : int, in height : int, inout extendedCacheKeys : Object [[]]) : void
        //populate componentColors array with colors calculated in getExtendedCacheKeys call
        componentColors = extendedCacheKeys;
        //generate this entire method. Each state/bg/fg/border combo that has
        //been painted gets its own KEY and paint method.
        switch(state) {
            case BORDER_NORTH: paintBorderNorth(g); break;
            case BORDER_SOUTH: paintBorderSouth(g); break;
            case BORDER_EAST: paintBorderEast(g); break;
            case BORDER_WEST: paintBorderWest(g); break;
            case HANDLEICON_ENABLED: painthandleIconEnabled(g); break;

        }
!!!11397378.java!!!	getPaintContext() : AbstractRegionPainter::PaintContext
        return ctx;
!!!11397506.java!!!	paintBorderNorth(inout g : Graphics2D) : void
        rect = decodeRect1();
        g.setPaint(color1);
        g.fill(rect);

!!!11397634.java!!!	paintBorderSouth(inout g : Graphics2D) : void
        rect = decodeRect2();
        g.setPaint(color1);
        g.fill(rect);

!!!11397762.java!!!	paintBorderEast(inout g : Graphics2D) : void
        rect = decodeRect2();
        g.setPaint(color1);
        g.fill(rect);

!!!11397890.java!!!	paintBorderWest(inout g : Graphics2D) : void
        rect = decodeRect1();
        g.setPaint(color1);
        g.fill(rect);

!!!11398018.java!!!	painthandleIconEnabled(inout g : Graphics2D) : void
        rect = decodeRect3();
        g.setPaint(decodeGradient1(rect));
        g.fill(rect);
        rect = decodeRect4();
        g.setPaint(color4);
        g.fill(rect);
        path = decodePath1();
        g.setPaint(color5);
        g.fill(path);
        path = decodePath2();
        g.setPaint(color5);
        g.fill(path);

!!!11398146.java!!!	decodeRect1() : Rectangle2D
            rect.setRect(decodeX(1.0f), //x
                         decodeY(2.0f), //y
                         decodeX(2.0f) - decodeX(1.0f), //width
                         decodeY(3.0f) - decodeY(2.0f)); //height
        return rect;
!!!11398274.java!!!	decodeRect2() : Rectangle2D
            rect.setRect(decodeX(1.0f), //x
                         decodeY(0.0f), //y
                         decodeX(2.0f) - decodeX(1.0f), //width
                         decodeY(1.0f) - decodeY(0.0f)); //height
        return rect;
!!!11398402.java!!!	decodeRect3() : Rectangle2D
            rect.setRect(decodeX(0.0f), //x
                         decodeY(0.0f), //y
                         decodeX(2.8f) - decodeX(0.0f), //width
                         decodeY(3.0f) - decodeY(0.0f)); //height
        return rect;
!!!11398530.java!!!	decodeRect4() : Rectangle2D
            rect.setRect(decodeX(2.8f), //x
                         decodeY(0.0f), //y
                         decodeX(3.0f) - decodeX(2.8f), //width
                         decodeY(3.0f) - decodeY(0.0f)); //height
        return rect;
!!!11398658.java!!!	decodePath1() : Path2D
        path.reset();
        path.moveTo(decodeX(0.0f), decodeY(0.0f));
        path.lineTo(decodeX(0.0f), decodeY(0.4f));
        path.lineTo(decodeX(0.4f), decodeY(0.0f));
        path.lineTo(decodeX(0.0f), decodeY(0.0f));
        path.closePath();
        return path;
!!!11398786.java!!!	decodePath2() : Path2D
        path.reset();
        path.moveTo(decodeX(0.0f), decodeY(3.0f));
        path.lineTo(decodeX(0.0f), decodeY(2.6f));
        path.lineTo(decodeX(0.4f), decodeY(3.0f));
        path.lineTo(decodeX(0.0f), decodeY(3.0f));
        path.closePath();
        return path;
!!!11398914.java!!!	decodeGradient1(inout s : Shape) : Paint
        Rectangle2D bounds = s.getBounds2D();
        float x = (float)bounds.getX();
        float y = (float)bounds.getY();
        float w = (float)bounds.getWidth();
        float h = (float)bounds.getHeight();
        return decodeGradient((0.0f * w) + x, (0.5f * h) + y, (1.0f * w) + x, (0.5f * h) + y,
                new float[] { 0.0f,0.5f,1.0f },
                new Color[] { color2,
                            decodeColor(color2,color3,0.5f),
                            color3});
