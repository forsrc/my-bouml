class CheckBoxMenuItemPainter
!!!11204482.java!!!	CheckBoxMenuItemPainter(inout ctx : AbstractRegionPainter::PaintContext, in state : int)
        super();
        this.state = state;
        this.ctx = ctx;
!!!11204610.java!!!	doPaint(inout g : Graphics2D, inout c : JComponent, in width : int, in height : int, inout extendedCacheKeys : Object [[]]) : void
        //populate componentColors array with colors calculated in getExtendedCacheKeys call
        componentColors = extendedCacheKeys;
        //generate this entire method. Each state/bg/fg/border combo that has
        //been painted gets its own KEY and paint method.
        switch(state) {
            case BACKGROUND_MOUSEOVER: paintBackgroundMouseOver(g); break;
            case BACKGROUND_SELECTED_MOUSEOVER: paintBackgroundSelectedAndMouseOver(g); break;
            case CHECKICON_DISABLED_SELECTED: paintcheckIconDisabledAndSelected(g); break;
            case CHECKICON_ENABLED_SELECTED: paintcheckIconEnabledAndSelected(g); break;
            case CHECKICON_SELECTED_MOUSEOVER: paintcheckIconSelectedAndMouseOver(g); break;

        }
!!!11204738.java!!!	getPaintContext() : AbstractRegionPainter::PaintContext
        return ctx;
!!!11204866.java!!!	paintBackgroundMouseOver(inout g : Graphics2D) : void
        rect = decodeRect1();
        g.setPaint(color1);
        g.fill(rect);

!!!11204994.java!!!	paintBackgroundSelectedAndMouseOver(inout g : Graphics2D) : void
        rect = decodeRect1();
        g.setPaint(color1);
        g.fill(rect);

!!!11205122.java!!!	paintcheckIconDisabledAndSelected(inout g : Graphics2D) : void
        path = decodePath1();
        g.setPaint(color2);
        g.fill(path);

!!!11205250.java!!!	paintcheckIconEnabledAndSelected(inout g : Graphics2D) : void
        path = decodePath1();
        g.setPaint(color3);
        g.fill(path);

!!!11205378.java!!!	paintcheckIconSelectedAndMouseOver(inout g : Graphics2D) : void
        path = decodePath1();
        g.setPaint(color4);
        g.fill(path);

!!!11205506.java!!!	decodeRect1() : Rectangle2D
            rect.setRect(decodeX(1.0f), //x
                         decodeY(1.0f), //y
                         decodeX(2.0f) - decodeX(1.0f), //width
                         decodeY(2.0f) - decodeY(1.0f)); //height
        return rect;
!!!11205634.java!!!	decodePath1() : Path2D
        path.reset();
        path.moveTo(decodeX(0.0f), decodeY(1.5f));
        path.lineTo(decodeX(0.4292683f), decodeY(1.5f));
        path.lineTo(decodeX(0.7121951f), decodeY(2.4780488f));
        path.lineTo(decodeX(2.5926828f), decodeY(0.0f));
        path.lineTo(decodeX(3.0f), decodeY(0.0f));
        path.lineTo(decodeX(3.0f), decodeY(0.2f));
        path.lineTo(decodeX(2.8317075f), decodeY(0.39512196f));
        path.lineTo(decodeX(0.8f), decodeY(3.0f));
        path.lineTo(decodeX(0.5731707f), decodeY(3.0f));
        path.lineTo(decodeX(0.0f), decodeY(1.5f));
        path.closePath();
        return path;
