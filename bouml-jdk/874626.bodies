class Robot
!!!6312578.java!!!	Robot()
        if (GraphicsEnvironment.isHeadless()) {
            throw new AWTException("headless environment");
        }
        init(GraphicsEnvironment.getLocalGraphicsEnvironment()
            .getDefaultScreenDevice());
!!!6312706.java!!!	Robot(inout screen : GraphicsDevice)
        checkIsScreenDevice(screen);
        init(screen);
!!!6312834.java!!!	init(inout screen : GraphicsDevice) : void
        checkRobotAllowed();
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        if (toolkit instanceof ComponentFactory) {
            peer = ((ComponentFactory)toolkit).createRobot(this, screen);
            disposer = new RobotDisposer(peer);
            sun.java2d.Disposer.addRecord(anchor, disposer);
        }
        initLegalButtonMask();
!!!6312962.java!!!	initLegalButtonMask() : void
        if (LEGAL_BUTTON_MASK != 0) return;

        int tmpMask = 0;
        if (Toolkit.getDefaultToolkit().areExtraMouseButtonsEnabled()){
            if (Toolkit.getDefaultToolkit() instanceof SunToolkit) {
                final int buttonsNumber = ((SunToolkit)(Toolkit.getDefaultToolkit())).getNumberOfButtons();
                for (int i = 0; i < buttonsNumber; i++){
                    tmpMask |= InputEvent.getMaskForButton(i+1);
                }
            }
        }
        tmpMask |= InputEvent.BUTTON1_MASK|
            InputEvent.BUTTON2_MASK|
            InputEvent.BUTTON3_MASK|
            InputEvent.BUTTON1_DOWN_MASK|
            InputEvent.BUTTON2_DOWN_MASK|
            InputEvent.BUTTON3_DOWN_MASK;
        LEGAL_BUTTON_MASK = tmpMask;
!!!6313090.java!!!	checkRobotAllowed() : void
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkPermission(SecurityConstants.AWT.CREATE_ROBOT_PERMISSION);
        }
!!!6313218.java!!!	checkIsScreenDevice(inout device : GraphicsDevice) : void
        if (device == null || device.getType() != GraphicsDevice.TYPE_RASTER_SCREEN) {
            throw new IllegalArgumentException("not a valid screen device");
        }
!!!6313602.java!!!	mouseMove(in x : int, in y : int) : void
        peer.mouseMove(x, y);
        afterEvent();
!!!6313730.java!!!	mousePress(in buttons : int) : void
        checkButtonsArgument(buttons);
        peer.mousePress(buttons);
        afterEvent();
!!!6313858.java!!!	mouseRelease(in buttons : int) : void
        checkButtonsArgument(buttons);
        peer.mouseRelease(buttons);
        afterEvent();
!!!6313986.java!!!	checkButtonsArgument(in buttons : int) : void
        if ( (buttons|LEGAL_BUTTON_MASK) != LEGAL_BUTTON_MASK ) {
            throw new IllegalArgumentException("Invalid combination of button flags");
        }
!!!6314114.java!!!	mouseWheel(in wheelAmt : int) : void
        peer.mouseWheel(wheelAmt);
        afterEvent();
!!!6314242.java!!!	keyPress(in keycode : int) : void
        checkKeycodeArgument(keycode);
        peer.keyPress(keycode);
        afterEvent();
!!!6314370.java!!!	keyRelease(in keycode : int) : void
        checkKeycodeArgument(keycode);
        peer.keyRelease(keycode);
        afterEvent();
!!!6314498.java!!!	checkKeycodeArgument(in keycode : int) : void
        // rather than build a big table or switch statement here, we'll
        // just check that the key isn't VK_UNDEFINED and assume that the
        // peer implementations will throw an exception for other bogus
        // values e.g. -1, 999999
        if (keycode == KeyEvent.VK_UNDEFINED) {
            throw new IllegalArgumentException("Invalid key code");
        }
!!!6314626.java!!!	getPixelColor(in x : int, in y : int) : Color
        Color color = new Color(peer.getRGBPixel(x, y));
        return color;
!!!6314754.java!!!	createScreenCapture(inout screenRect : Rectangle) : BufferedImage
        checkScreenCaptureAllowed();

        checkValidRect(screenRect);

        BufferedImage image;
        DataBufferInt buffer;
        WritableRaster raster;

        if (screenCapCM == null) {
            /*
             * Fix for 4285201
             * Create a DirectColorModel equivalent to the default RGB ColorModel,
             * except with no Alpha component.
             */

            screenCapCM = new DirectColorModel(24,
                                               /* red mask */    0x00FF0000,
                                               /* green mask */  0x0000FF00,
                                               /* blue mask */   0x000000FF);
        }

        // need to sync the toolkit prior to grabbing the pixels since in some
        // cases rendering to the screen may be delayed
        Toolkit.getDefaultToolkit().sync();

        int pixels[];
        int[] bandmasks = new int[3];

        pixels = peer.getRGBPixels(screenRect);
        buffer = new DataBufferInt(pixels, pixels.length);

        bandmasks[0] = screenCapCM.getRedMask();
        bandmasks[1] = screenCapCM.getGreenMask();
        bandmasks[2] = screenCapCM.getBlueMask();

        raster = Raster.createPackedRaster(buffer, screenRect.width, screenRect.height, screenRect.width, bandmasks, null);
        SunWritableRaster.makeTrackable(buffer);

        image = new BufferedImage(screenCapCM, raster, false, null);

        return image;
!!!6314882.java!!!	checkValidRect(inout rect : Rectangle) : void
        if (rect.width <= 0 || rect.height <= 0) {
            throw new IllegalArgumentException("Rectangle width and height must be > 0");
        }
!!!6315010.java!!!	checkScreenCaptureAllowed() : void
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkPermission(
                SecurityConstants.AWT.READ_DISPLAY_PIXELS_PERMISSION);
        }
!!!6315138.java!!!	afterEvent() : void
        autoWaitForIdle();
        autoDelay();
!!!6315266.java!!!	isAutoWaitForIdle() : boolean
        return isAutoWaitForIdle;
!!!6315394.java!!!	setAutoWaitForIdle(inout isOn : boolean) : void
        isAutoWaitForIdle = isOn;
!!!6315522.java!!!	autoWaitForIdle() : void
        if (isAutoWaitForIdle) {
            waitForIdle();
        }
!!!6315650.java!!!	getAutoDelay() : int
        return autoDelay;
!!!6315778.java!!!	setAutoDelay(in ms : int) : void
        checkDelayArgument(ms);
        autoDelay = ms;
!!!6315906.java!!!	autoDelay() : void
        delay(autoDelay);
!!!6316034.java!!!	delay(in ms : int) : void
        checkDelayArgument(ms);
        try {
            Thread.sleep(ms);
        } catch(InterruptedException ite) {
            ite.printStackTrace();
        }
!!!6316162.java!!!	checkDelayArgument(in ms : int) : void
        if (ms < 0 || ms > MAX_DELAY) {
            throw new IllegalArgumentException("Delay must be to 0 to 60,000ms");
        }
!!!6316290.java!!!	waitForIdle() : void
        checkNotDispatchThread();
        // post a dummy event to the queue so we know when
        // all the events before it have been processed
        try {
            SunToolkit.flushPendingEvents();
            EventQueue.invokeAndWait( new Runnable() {
                                            public void run() {
                                                // dummy implementation
                                            }
                                        } );
        } catch(InterruptedException ite) {
            System.err.println("Robot.waitForIdle, non-fatal exception caught:");
            ite.printStackTrace();
        } catch(InvocationTargetException ine) {
            System.err.println("Robot.waitForIdle, non-fatal exception caught:");
            ine.printStackTrace();
        }
!!!6316418.java!!!	checkNotDispatchThread() : void
        if (EventQueue.isDispatchThread()) {
            throw new IllegalThreadStateException("Cannot call method from the event dispatcher thread");
        }
!!!6316546.java!!!	toString() : String
        String params = "autoDelay = "+getAutoDelay()+", "+"autoWaitForIdle = "+isAutoWaitForIdle();
        return getClass().getName() + "[ " + params + " ]";
