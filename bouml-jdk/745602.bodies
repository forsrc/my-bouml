class DOM2DTMdefaultNamespaceDeclarationNode
!!!5243394.java!!!	DOM2DTMdefaultNamespaceDeclarationNode(inout pseudoparent : Element, inout prefix : String, inout uri : String, in handle : int)
    this.pseudoparent=pseudoparent;
    this.prefix=prefix;
    this.uri=uri;
    this.handle=handle;
    this.nodename="xmlns:"+prefix;
!!!5243522.java!!!	getNodeName() : String
return nodename;
!!!5243650.java!!!	getName() : String
return nodename;
!!!5243778.java!!!	getNamespaceURI() : String
return "http://www.w3.org/2000/xmlns/";
!!!5243906.java!!!	getPrefix() : String
return prefix;
!!!5244034.java!!!	getLocalName() : String
return prefix;
!!!5244162.java!!!	getNodeValue() : String
return uri;
!!!5244290.java!!!	getValue() : String
return uri;
!!!5244418.java!!!	getOwnerElement() : Element
return pseudoparent;
!!!5244546.java!!!	isSupported(inout feature : String, inout version : String) : boolean
return false;
!!!5244674.java!!!	hasChildNodes() : boolean
return false;
!!!5244802.java!!!	hasAttributes() : boolean
return false;
!!!5244930.java!!!	getParentNode() : Node
return null;
!!!5245058.java!!!	getFirstChild() : Node
return null;
!!!5245186.java!!!	getLastChild() : Node
return null;
!!!5245314.java!!!	getPreviousSibling() : Node
return null;
!!!5245442.java!!!	getNextSibling() : Node
return null;
!!!5245570.java!!!	getSpecified() : boolean
return false;
!!!5245698.java!!!	normalize() : void
return;
!!!5245826.java!!!	getChildNodes() : NodeList
return null;
!!!5245954.java!!!	getAttributes() : NamedNodeMap
return null;
!!!5246082.java!!!	getNodeType() : short
return Node.ATTRIBUTE_NODE;
!!!5246210.java!!!	setNodeValue(inout value : String) : void
throw new DTMException(NOT_SUPPORTED_ERR);
!!!5246338.java!!!	setValue(inout value : String) : void
throw new DTMException(NOT_SUPPORTED_ERR);
!!!5246466.java!!!	setPrefix(inout value : String) : void
throw new DTMException(NOT_SUPPORTED_ERR);
!!!5246594.java!!!	insertBefore(inout a : Node, inout b : Node) : Node
throw new DTMException(NOT_SUPPORTED_ERR);
!!!5246722.java!!!	replaceChild(inout a : Node, inout b : Node) : Node
throw new DTMException(NOT_SUPPORTED_ERR);
!!!5246850.java!!!	appendChild(inout a : Node) : Node
throw new DTMException(NOT_SUPPORTED_ERR);
!!!5246978.java!!!	removeChild(inout a : Node) : Node
throw new DTMException(NOT_SUPPORTED_ERR);
!!!5247106.java!!!	getOwnerDocument() : Document
return pseudoparent.getOwnerDocument();
!!!5247234.java!!!	cloneNode(inout deep : boolean) : Node
throw new DTMException(NOT_SUPPORTED_ERR);
!!!5247362.java!!!	getHandleOfNode() : int
        return handle;
!!!5247490.java!!!	getTypeName() : String
return null;
!!!5247618.java!!!	getTypeNamespace() : String
 return null;
!!!5247746.java!!!	isDerivedFrom(inout ns : String, inout localName : String, in derivationMethod : int) : boolean
        return false;
!!!5247874.java!!!	getSchemaTypeInfo() : TypeInfo
 return this;
!!!5248002.java!!!	isId() : boolean
 return false;
!!!5248130.java!!!	setUserData(inout key : String, inout data : Object, inout handler : UserDataHandler) : Object
        return getOwnerDocument().setUserData( key, data, handler);
!!!5248258.java!!!	getUserData(inout key : String) : Object
        return getOwnerDocument().getUserData( key);
!!!5248386.java!!!	getFeature(inout feature : String, inout version : String) : Object
        // we don't have any alternate node, either this node does the job
        // or we don't have anything that does
        return isSupported(feature, version) ? this : null;
!!!5248514.java!!!	isEqualNode(inout arg : Node) : boolean
        if (arg == this) {
            return true;
        }
        if (arg.getNodeType() != getNodeType()) {
            return false;
        }
        // in theory nodeName can't be null but better be careful
        // who knows what other implementations may be doing?...
        if (getNodeName() == null) {
            if (arg.getNodeName() != null) {
                return false;
            }
        }
        else if (!getNodeName().equals(arg.getNodeName())) {
            return false;
        }

        if (getLocalName() == null) {
            if (arg.getLocalName() != null) {
                return false;
            }
        }
        else if (!getLocalName().equals(arg.getLocalName())) {
            return false;
        }

        if (getNamespaceURI() == null) {
            if (arg.getNamespaceURI() != null) {
                return false;
            }
        }
        else if (!getNamespaceURI().equals(arg.getNamespaceURI())) {
            return false;
        }

        if (getPrefix() == null) {
            if (arg.getPrefix() != null) {
                return false;
            }
        }
        else if (!getPrefix().equals(arg.getPrefix())) {
            return false;
        }

        if (getNodeValue() == null) {
            if (arg.getNodeValue() != null) {
                return false;
            }
        }
        else if (!getNodeValue().equals(arg.getNodeValue())) {
            return false;
        }
    /*
        if (getBaseURI() == null) {
            if (((NodeImpl) arg).getBaseURI() != null) {
                return false;
            }
        }
        else if (!getBaseURI().equals(((NodeImpl) arg).getBaseURI())) {
            return false;
        }
*/

             return true;
!!!5248642.java!!!	lookupNamespaceURI(inout specifiedPrefix : String) : String
        short type = this.getNodeType();
        switch (type) {
        case Node.ELEMENT_NODE : {

                String namespace = this.getNamespaceURI();
                String prefix = this.getPrefix();
                if (namespace !=null) {
                    // REVISIT: is it possible that prefix is empty string?
                    if (specifiedPrefix== null && prefix==specifiedPrefix) {
                        // looking for default namespace
                        return namespace;
                    } else if (prefix != null && prefix.equals(specifiedPrefix)) {
                        // non default namespace
                        return namespace;
                    }
                }
                if (this.hasAttributes()) {
                    NamedNodeMap map = this.getAttributes();
                    int length = map.getLength();
                    for (int i=0;i<length;i++) {
                        Node attr = map.item(i);
                        String attrPrefix = attr.getPrefix();
                        String value = attr.getNodeValue();
                        namespace = attr.getNamespaceURI();
                        if (namespace !=null && namespace.equals("http://www.w3.org/2000/xmlns/")) {
                            // at this point we are dealing with DOM Level 2 nodes only
                            if (specifiedPrefix == null &&
                                attr.getNodeName().equals("xmlns")) {
                                // default namespace
                                return value;
                            } else if (attrPrefix !=null &&
                                       attrPrefix.equals("xmlns") &&
                                       attr.getLocalName().equals(specifiedPrefix)) {
                 // non default namespace
                                return value;
                            }
                        }
                    }
                }
                /*
                NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
                if (ancestor != null) {
                    return ancestor.lookupNamespaceURI(specifiedPrefix);
                }
                */

                return null;


            }
/*
        case Node.DOCUMENT_NODE : {
                return((NodeImpl)((Document)this).getDocumentElement()).lookupNamespaceURI(specifiedPrefix) ;
            }
*/
        case Node.ENTITY_NODE :
        case Node.NOTATION_NODE:
        case Node.DOCUMENT_FRAGMENT_NODE:
        case Node.DOCUMENT_TYPE_NODE:
            // type is unknown
            return null;
        case Node.ATTRIBUTE_NODE:{
                if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {
                    return getOwnerElement().lookupNamespaceURI(specifiedPrefix);

                }
                return null;
            }
        default:{
           /*
                NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
                if (ancestor != null) {
                    return ancestor.lookupNamespaceURI(specifiedPrefix);
                }
             */
                return null;
            }

        }
!!!5248770.java!!!	isDefaultNamespace(inout namespaceURI : String) : boolean
       /*
        // REVISIT: remove casts when DOM L3 becomes REC.
        short type = this.getNodeType();
        switch (type) {
        case Node.ELEMENT_NODE: {
            String namespace = this.getNamespaceURI();
            String prefix = this.getPrefix();

            // REVISIT: is it possible that prefix is empty string?
            if (prefix == null || prefix.length() == 0) {
                if (namespaceURI == null) {
                    return (namespace == namespaceURI);
                }
                return namespaceURI.equals(namespace);
            }
            if (this.hasAttributes()) {
                ElementImpl elem = (ElementImpl)this;
                NodeImpl attr = (NodeImpl)elem.getAttributeNodeNS("http://www.w3.org/2000/xmlns/", "xmlns");
                if (attr != null) {
                    String value = attr.getNodeValue();
                    if (namespaceURI == null) {
                        return (namespace == value);
                    }
                    return namespaceURI.equals(value);
                }
            }

            NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
            if (ancestor != null) {
                return ancestor.isDefaultNamespace(namespaceURI);
            }
            return false;
        }
        case Node.DOCUMENT_NODE:{
                return((NodeImpl)((Document)this).getDocumentElement()).isDefaultNamespace(namespaceURI);
            }

        case Node.ENTITY_NODE :
          case Node.NOTATION_NODE:
        case Node.DOCUMENT_FRAGMENT_NODE:
        case Node.DOCUMENT_TYPE_NODE:
            // type is unknown
            return false;
        case Node.ATTRIBUTE_NODE:{
                if (this.ownerNode.getNodeType() == Node.ELEMENT_NODE) {
                    return ownerNode.isDefaultNamespace(namespaceURI);

                }
                return false;
            }
        default:{
                NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
                if (ancestor != null) {
                    return ancestor.isDefaultNamespace(namespaceURI);
                }
                return false;
            }

        }
*/
        return false;


!!!5248898.java!!!	lookupPrefix(inout namespaceURI : String) : String

        // REVISIT: When Namespaces 1.1 comes out this may not be true
        // Prefix can't be bound to null namespace
        if (namespaceURI == null) {
            return null;
        }

        short type = this.getNodeType();

        switch (type) {
/*
        case Node.ELEMENT_NODE: {

                String namespace = this.getNamespaceURI(); // to flip out children
                return lookupNamespacePrefix(namespaceURI, (ElementImpl)this);
            }

        case Node.DOCUMENT_NODE:{
                return((NodeImpl)((Document)this).getDocumentElement()).lookupPrefix(namespaceURI);
            }
*/
        case Node.ENTITY_NODE :
        case Node.NOTATION_NODE:
        case Node.DOCUMENT_FRAGMENT_NODE:
        case Node.DOCUMENT_TYPE_NODE:
            // type is unknown
            return null;
        case Node.ATTRIBUTE_NODE:{
                if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {
                    return getOwnerElement().lookupPrefix(namespaceURI);

                }
                return null;
            }
        default:{
/*
                NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
                if (ancestor != null) {
                    return ancestor.lookupPrefix(namespaceURI);
                }
*/
                return null;
            }
         }
!!!5249026.java!!!	isSameNode(inout other : Node) : boolean
        // we do not use any wrapper so the answer is obvious
        return this == other;
!!!5249154.java!!!	setTextContent(inout textContent : String) : void
        setNodeValue(textContent);
!!!5249282.java!!!	getTextContent() : String
        return getNodeValue();  // overriden in some subclasses
!!!5249410.java!!!	compareDocumentPosition(inout other : Node) : short
        return 0;
!!!5249538.java!!!	getBaseURI() : String
        return null;
