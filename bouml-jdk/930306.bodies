class CharacterDataLatin1
!!!6977538.java!!!	getProperties(in ch : int) : int
        char offset = (char)ch;
        int props = A[offset];
        return props;
!!!6977666.java!!!	getPropertiesEx(in ch : int) : int
        char offset = (char)ch;
        int props = B[offset];
        return props;
!!!6977794.java!!!	isOtherLowercase(in ch : int) : boolean
        int props = getPropertiesEx(ch);
        return (props & 0x0001) != 0;
!!!6977922.java!!!	isOtherUppercase(in ch : int) : boolean
        int props = getPropertiesEx(ch);
        return (props & 0x0002) != 0;
!!!6978050.java!!!	isOtherAlphabetic(in ch : int) : boolean
        int props = getPropertiesEx(ch);
        return (props & 0x0004) != 0;
!!!6978178.java!!!	isIdeographic(in ch : int) : boolean
        int props = getPropertiesEx(ch);
        return (props & 0x0010) != 0;
!!!6978306.java!!!	getType(in ch : int) : int
        int props = getProperties(ch);
        return (props & 0x1F);
!!!6978434.java!!!	isJavaIdentifierStart(in ch : int) : boolean
        int props = getProperties(ch);
        return ((props & 0x00007000) >= 0x00005000);
!!!6978562.java!!!	isJavaIdentifierPart(in ch : int) : boolean
        int props = getProperties(ch);
        return ((props & 0x00003000) != 0);
!!!6978690.java!!!	isUnicodeIdentifierStart(in ch : int) : boolean
        int props = getProperties(ch);
        return ((props & 0x00007000) == 0x00007000);
!!!6978818.java!!!	isUnicodeIdentifierPart(in ch : int) : boolean
        int props = getProperties(ch);
        return ((props & 0x00001000) != 0);
!!!6978946.java!!!	isIdentifierIgnorable(in ch : int) : boolean
        int props = getProperties(ch);
        return ((props & 0x00007000) == 0x00001000);
!!!6979074.java!!!	toLowerCase(in ch : int) : int
        int mapChar = ch;
        int val = getProperties(ch);

        if (((val & 0x00020000) != 0) && 
                ((val & 0x07FC0000) != 0x07FC0000)) { 
            int offset = val << 5 >> (5+18);
            mapChar = ch + offset;
        }
        return mapChar;
!!!6979202.java!!!	toUpperCase(in ch : int) : int
        int mapChar = ch;
        int val = getProperties(ch);

        if ((val & 0x00010000) != 0) {
            if ((val & 0x07FC0000) != 0x07FC0000) {
                int offset = val  << 5 >> (5+18);
                mapChar =  ch - offset;
            } else if (ch == 0x00B5) {
                mapChar = 0x039C;
            }
        }
        return mapChar;
!!!6979330.java!!!	toTitleCase(in ch : int) : int
        return toUpperCase(ch);
!!!6979458.java!!!	digit(in ch : int, in radix : int) : int
        int value = -1;
        if (radix >= Character.MIN_RADIX && radix <= Character.MAX_RADIX) {
            int val = getProperties(ch);
            int kind = val & 0x1F;
            if (kind == Character.DECIMAL_DIGIT_NUMBER) {
                value = ch + ((val & 0x3E0) >> 5) & 0x1F;
            }
            else if ((val & 0xC00) == 0x00000C00) {
                // Java supradecimal digit
                value = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
            }
        }
        return (value < radix) ? value : -1;
!!!6979586.java!!!	getNumericValue(in ch : int) : int
        int val = getProperties(ch);
        int retval = -1;

        switch (val & 0xC00) {
            default: // cannot occur
            case (0x00000000):         // not numeric
                retval = -1;
                break;
            case (0x00000400):              // simple numeric
                retval = ch + ((val & 0x3E0) >> 5) & 0x1F;
                break;
            case (0x00000800)      :       // "strange" numeric
                 retval = -2; 
                 break;
            case (0x00000C00):           // Java supradecimal
                retval = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
                break;
        }
        return retval;
!!!6979714.java!!!	isWhitespace(in ch : int) : boolean
        int props = getProperties(ch);
        return ((props & 0x00007000) == 0x00004000);
!!!6979842.java!!!	getDirectionality(in ch : int) : byte
        int val = getProperties(ch);
        byte directionality = (byte)((val & 0x78000000) >> 27);

        if (directionality == 0xF ) {
            directionality = -1;
        }
        return directionality;
!!!6979970.java!!!	isMirrored(in ch : int) : boolean
        int props = getProperties(ch);
        return ((props & 0x80000000) != 0);
!!!6980098.java!!!	toUpperCaseEx(in ch : int) : int
        int mapChar = ch;
        int val = getProperties(ch);

        if ((val & 0x00010000) != 0) {
            if ((val & 0x07FC0000) != 0x07FC0000) {
                int offset = val  << 5 >> (5+18);
                mapChar =  ch - offset;
            }
            else {
                switch(ch) {
                    // map overflow characters
                    case 0x00B5 : mapChar = 0x039C; break;
                    default       : mapChar = Character.ERROR; break;
                }
            }
        }
        return mapChar;
!!!6980226.java!!!	toUpperCaseCharArray(in ch : int) : char
        char[] upperMap = {(char)ch};
        if (ch == 0x00DF) {
            upperMap = sharpsMap;
        }
        return upperMap;
