class ParallelGroup
!!!10524162.java!!!	ParallelGroup(inout childAlignment : GroupLayout::Alignment, inout resizable : boolean)
            this.childAlignment = childAlignment;
            this.resizable = resizable;
!!!10524290.java!!!	addGroup(inout group : GroupLayout::Group) : GroupLayout::ParallelGroup
            return (ParallelGroup)super.addGroup(group);
!!!10524418.java!!!	addComponent(inout component : Component) : GroupLayout::ParallelGroup
            return (ParallelGroup)super.addComponent(component);
!!!10524546.java!!!	addComponent(inout component : Component, in min : int, in pref : int, in max : int) : GroupLayout::ParallelGroup
            return (ParallelGroup)super.addComponent(component, min, pref, max);
!!!10524674.java!!!	addGap(in pref : int) : GroupLayout::ParallelGroup
            return (ParallelGroup)super.addGap(pref);
!!!10524802.java!!!	addGap(in min : int, in pref : int, in max : int) : GroupLayout::ParallelGroup
            return (ParallelGroup)super.addGap(min, pref, max);
!!!10524930.java!!!	addGroup(inout alignment : GroupLayout::Alignment, inout group : GroupLayout::Group) : GroupLayout::ParallelGroup
            checkChildAlignment(alignment);
            group.setAlignment(alignment);
            return (ParallelGroup)addSpring(group);
!!!10525058.java!!!	addComponent(inout component : Component, inout alignment : GroupLayout::Alignment) : GroupLayout::ParallelGroup
            return addComponent(component, alignment, DEFAULT_SIZE, DEFAULT_SIZE,
                    DEFAULT_SIZE);
!!!10525186.java!!!	addComponent(inout component : Component, inout alignment : GroupLayout::Alignment, in min : int, in pref : int, in max : int) : GroupLayout::ParallelGroup
            checkChildAlignment(alignment);
            ComponentSpring spring = new ComponentSpring(component,
                    min, pref, max);
            spring.setAlignment(alignment);
            return (ParallelGroup)addSpring(spring);
!!!10525314.java!!!	isResizable() : boolean
            return resizable;
!!!10525442.java!!!	operator(in a : int, in b : int) : int
            return Math.max(a, b);
!!!10525570.java!!!	calculateMinimumSize(in axis : int) : int
            if (!isResizable()) {
                return getPreferredSize(axis);
            }
            return super.calculateMinimumSize(axis);
!!!10525698.java!!!	calculateMaximumSize(in axis : int) : int
            if (!isResizable()) {
                return getPreferredSize(axis);
            }
            return super.calculateMaximumSize(axis);
!!!10525826.java!!!	setValidSize(in axis : int, in origin : int, in size : int) : void
            for (Spring spring : springs) {
                setChildSize(spring, axis, origin, size);
            }
!!!10525954.java!!!	setChildSize(inout spring : GroupLayout::Spring, in axis : int, in origin : int, in size : int) : void
            Alignment alignment = spring.getAlignment();
            int springSize = Math.min(
                    Math.max(spring.getMinimumSize(axis), size),
                    spring.getMaximumSize(axis));
            if (alignment == null) {
                alignment = childAlignment;
            }
            switch (alignment) {
                case TRAILING:
                    spring.setSize(axis, origin + size - springSize,
                            springSize);
                    break;
                case CENTER:
                    spring.setSize(axis, origin +
                            (size - springSize) / 2,springSize);
                    break;
                default: // LEADING, or BASELINE
                    spring.setSize(axis, origin, springSize);
                    break;
            }
!!!10526082.java!!!	insertAutopadding(in axis : int, inout leadingPadding : List, inout trailingPadding : List, inout leading : List, inout trailing : List, inout insert : boolean) : void
            for (Spring spring : springs) {
                if (spring instanceof ComponentSpring) {
                    if (((ComponentSpring)spring).isVisible()) {
                        for (AutoPreferredGapSpring gapSpring :
                                 leadingPadding) {
                            gapSpring.addTarget((ComponentSpring)spring, axis);
                        }
                        trailing.add((ComponentSpring)spring);
                    }
                } else if (spring instanceof Group) {
                    ((Group)spring).insertAutopadding(axis, leadingPadding,
                            trailingPadding, leading, trailing, insert);
                } else if (spring instanceof AutoPreferredGapSpring) {
                    ((AutoPreferredGapSpring)spring).setSources(leading);
                    trailingPadding.add((AutoPreferredGapSpring)spring);
                }
            }
!!!10526210.java!!!	checkChildAlignment(inout alignment : GroupLayout::Alignment) : void
            checkChildAlignment(alignment, (this instanceof BaselineGroup));
!!!10526338.java!!!	checkChildAlignment(inout alignment : GroupLayout::Alignment, inout allowsBaseline : boolean) : void
            if (alignment == null) {
                throw new IllegalArgumentException("Alignment must be non-null");
            }
            if (!allowsBaseline && alignment == Alignment.BASELINE) {
                throw new IllegalArgumentException("Alignment must be one of:" +
                        "LEADING, TRAILING or CENTER");
            }
