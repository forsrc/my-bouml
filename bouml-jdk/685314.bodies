class DateTimeDV
!!!4512386.java!!!	getActualValue(inout content : String, inout context : ValidationContext) : Object
        try{
            return parse(content);
        } catch(Exception ex){
            throw new InvalidDatatypeValueException("cvc-datatype-valid.1.2.1", new Object[]{content, "dateTime"});
        }
!!!4512514.java!!!	parse(inout str : String) : AbstractDateTimeDV::DateTimeData
        DateTimeData date = new DateTimeData(str, this);
        int len = str.length();

        int end = indexOf (str, 0, len, 'T');

        // both time and date
        int dateEnd = getDate(str, 0, end, date);
        getTime(str, end+1, len, date);

        //Check the separator character between Date and Time
        if (dateEnd != end) {
            throw new RuntimeException(str
                    + " is an invalid dateTime dataype value. "
                    + "Invalid character(s) seprating date and time values.");
        }

        //validate and normalize

        //REVISIT: do we need SchemaDateTimeException?
        validateDateTime(date);

        //save unnormalized values
        saveUnnormalized(date);

        if (date.utc!=0 && date.utc!='Z') {
            normalize(date);
        }
        return date;
!!!4512642.java!!!	getXMLGregorianCalendar(inout date : AbstractDateTimeDV::DateTimeData) : XMLGregorianCalendar
        return datatypeFactory.newXMLGregorianCalendar(BigInteger.valueOf(date.unNormYear), date.unNormMonth,
                date.unNormDay, date.unNormHour, date.unNormMinute,
                (int)date.unNormSecond, date.unNormSecond != 0 ? getFractionalSecondsAsBigDecimal(date) : null,
                date.hasTimeZone() ? (date.timezoneHr * 60 + date.timezoneMin) : DatatypeConstants.FIELD_UNDEFINED);
