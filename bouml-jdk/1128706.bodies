class AtomicReferenceArray
!!!9276034.java!!!	checkedByteOffset(in i : int) : long
        if (i < 0 || i >= array.length)
            throw new IndexOutOfBoundsException("index " + i);

        return byteOffset(i);
!!!9276162.java!!!	byteOffset(in i : int) : long
        return ((long) i << shift) + base;
!!!9276290.java!!!	AtomicReferenceArray(in length : int)
        array = new Object[length];
!!!9276418.java!!!	AtomicReferenceArray(inout array : E [[]])
        // Visibility guaranteed by final field guarantees
        this.array = Arrays.copyOf(array, array.length, Object[].class);
!!!9276546.java!!!	length() : int
        return array.length;
!!!9276674.java!!!	get(in i : int) : E
        return getRaw(checkedByteOffset(i));
!!!9276802.java!!!	getRaw(in offset : long) : E
        return (E) unsafe.getObjectVolatile(array, offset);
!!!9276930.java!!!	set(in i : int, inout newValue : E) : void
        unsafe.putObjectVolatile(array, checkedByteOffset(i), newValue);
!!!9277058.java!!!	lazySet(in i : int, inout newValue : E) : void
        unsafe.putOrderedObject(array, checkedByteOffset(i), newValue);
!!!9277186.java!!!	getAndSet(in i : int, inout newValue : E) : E
        return (E)unsafe.getAndSetObject(array, checkedByteOffset(i), newValue);
!!!9277314.java!!!	compareAndSet(in i : int, inout expect : E, inout update : E) : boolean
        return compareAndSetRaw(checkedByteOffset(i), expect, update);
!!!9277442.java!!!	compareAndSetRaw(in offset : long, inout expect : E, inout update : E) : boolean
        return unsafe.compareAndSwapObject(array, offset, expect, update);
!!!9277570.java!!!	weakCompareAndSet(in i : int, inout expect : E, inout update : E) : boolean
        return compareAndSet(i, expect, update);
!!!9277698.java!!!	getAndUpdate(in i : int, inout updateFunction : UnaryOperator) : E
        long offset = checkedByteOffset(i);
        E prev, next;
        do {
            prev = getRaw(offset);
            next = updateFunction.apply(prev);
        } while (!compareAndSetRaw(offset, prev, next));
        return prev;
!!!9277826.java!!!	updateAndGet(in i : int, inout updateFunction : UnaryOperator) : E
        long offset = checkedByteOffset(i);
        E prev, next;
        do {
            prev = getRaw(offset);
            next = updateFunction.apply(prev);
        } while (!compareAndSetRaw(offset, prev, next));
        return next;
!!!9277954.java!!!	getAndAccumulate(in i : int, inout x : E, inout accumulatorFunction : BinaryOperator) : E
        long offset = checkedByteOffset(i);
        E prev, next;
        do {
            prev = getRaw(offset);
            next = accumulatorFunction.apply(prev, x);
        } while (!compareAndSetRaw(offset, prev, next));
        return prev;
!!!9278082.java!!!	accumulateAndGet(in i : int, inout x : E, inout accumulatorFunction : BinaryOperator) : E
        long offset = checkedByteOffset(i);
        E prev, next;
        do {
            prev = getRaw(offset);
            next = accumulatorFunction.apply(prev, x);
        } while (!compareAndSetRaw(offset, prev, next));
        return next;
!!!9278210.java!!!	toString() : String
        int iMax = array.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(getRaw(byteOffset(i)));
            if (i == iMax)
                return b.append(']').toString();
            b.append(',').append(' ');
        }
!!!9278338.java!!!	readObject(inout s : ObjectInputStream) : void
        // Note: This must be changed if any additional fields are defined
        Object a = s.readFields().get("array", null);
        if (a == null || !a.getClass().isArray())
            throw new java.io.InvalidObjectException("Not array type");
        if (a.getClass() != Object[].class)
            a = Arrays.copyOf((Object[])a, Array.getLength(a), Object[].class);
        unsafe.putObjectVolatile(this, arrayFieldOffset, a);
