format 222
"spi" // jdk1.8::javax::naming::spi
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/naming/spi/"
  java_package "javax.naming.spi"
  classview 141314 "spi"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 261762 "StateFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents a factory for obtaining the state of an
object for binding.
<p>
The JNDI framework allows for object implementations to
be loaded in dynamically via <em>object factories</em>.
For example, when looking up a printer bound in the name space,
if the print service binds printer names to <tt>Reference</tt>s, the printer
<tt>Reference</tt> could be used to create a printer object, so that
the caller of lookup can directly operate on the printer object
after the lookup.
<p>An <tt>ObjectFactory</tt> is responsible
for creating objects of a specific type.  In the above example,
you may have a <tt>PrinterObjectFactory</tt> for creating
<tt>Printer</tt> objects.
<p>
For the reverse process, when an object is bound into the namespace,
JNDI provides <em>state factories</em>.
Continuing with the printer example, suppose the printer object is
updated and rebound:
<blockquote><pre>
ctx.rebind(\"inky\", printer);
</pre></blockquote>
The service provider for <tt>ctx</tt> uses a state factory
to obtain the state of <tt>printer</tt> for binding into its namespace.
A state factory for the <tt>Printer</tt> type object might return
a more compact object for storage in the naming system.
<p>
A state factory must implement the <tt>StateFactory</tt> interface.
In addition, the factory class must be public and must have a
public constructor that accepts no parameters.
<p>
The <tt>getStateToBind()</tt> method of a state factory may
be invoked multiple times, possibly using different parameters.
The implementation is thread-safe.
<p>
<tt>StateFactory</tt> is intended for use with service providers
that implement only the <tt>Context</tt> interface.
<tt>DirStateFactory</tt> is intended for use with service providers
that implement the <tt>DirContext</tt> interface.

@author Rosanna Lee
@author Scott Seligman

@see NamingManager#getStateToBind
@see DirectoryManager#getStateToBind
@see ObjectFactory
@see DirStateFactory
@since 1.3
"
      operation 1326850 "getStateToBind"
	public return_type class_ref 129538 // Object
	nparams 4
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the state of an object for binding.
<p>
<tt>NamingManager.getStateToBind()</tt>
successively loads in state factories and invokes this method
on them until one produces a non-null answer.
<tt>DirectoryManager.getStateToBind()</tt>
successively loads in state factories.  If a factory implements
<tt>DirStateFactory</tt>, then <tt>DirectoryManager</tt>
invokes <tt>DirStateFactory.getStateToBind()</tt>; otherwise
it invokes <tt>StateFactory.getStateToBind()</tt>.
<p> When an exception
is thrown by a factory, the exception is passed on to the caller
of <tt>NamingManager.getStateToBind()</tt> and
<tt>DirectoryManager.getStateToBind()</tt>.
The search for other factories
that may produce a non-null answer is halted.
A factory should only throw an exception if it is sure that
it is the only intended factory and that no other factories
should be tried.
If this factory cannot create an object using the arguments supplied,
it should return null.
<p>
The <code>name</code> and <code>nameCtx</code> parameters may
optionally be used to specify the name of the object being created.
See the description of \"Name and Context Parameters\" in
{@link ObjectFactory#getObjectInstance ObjectFactory.getObjectInstance()}
for details.
If a factory uses <code>nameCtx</code> it should synchronize its use
against concurrent access, since context implementations are not
guaranteed to be thread-safe.
<p>
The <tt>name</tt> and <tt>environment</tt> parameters
are owned by the caller.
The implementation will not modify these objects or keep references
to them, although it may keep references to clones or copies.

@param obj A non-null object whose state is to be retrieved.
@param name The name of this object relative to <code>nameCtx</code>,
             or null if no name is specified.
@param nameCtx The context relative to which the <code>name</code>
             parameter is specified, or null if <code>name</code> is
             relative to the default initial context.
@param environment The possibly null environment to
             be used in the creation of the object's state.
@return The object's state for binding;
             null if the factory is not returning any changes.
@exception NamingException if this factory encountered an exception
while attempting to get the object's state, and no other factories are
to be tried.

@see NamingManager#getStateToBind
@see DirectoryManager#getStateToBind
"
      end
    end

    class 1218562 "ContinuationContext"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is for dealing with federations/continuations.

@author Rosanna Lee
@author Scott Seligman
@since 1.3
"
      classrelation 3903490 // <realization>
	relation 3903490 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3903490 // <realization>
	  b parent class_ref 262018 // Context
      end

      classrelation 3903618 // <realization>
	relation 3903618 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3903618 // <realization>
	  b parent class_ref 1218690 // Resolver
      end

      classrelation 3903746 // cpe (<unidirectional association>)
	relation 3903746 --->
	  a role_name "cpe" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3903746 // cpe (<unidirectional association>)
	  b parent class_ref 1208450 // CannotProceedException
      end

      classrelation 3903874 // env (<unidirectional association>)
	relation 3903874 --->
	  a role_name "env" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?,?> ${name}${value};
"
	    classrelation_ref 3903874 // env (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      classrelation 3904002 // contCtx (<unidirectional association>)
	relation 3904002 --->
	  a role_name "contCtx" init_value " null" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3904002 // contCtx (<unidirectional association>)
	  b parent class_ref 262018 // Context
      end

      operation 10083330 "ContinuationContext"
	protected explicit_return_type ""
	nparams 2
	  param inout name "cpe" type class_ref 1208450 // CannotProceedException
	  param inout name "env" type class_ref 137090 // Hashtable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?,?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10083458 "getTargetContext"
	protected return_type class_ref 262018 // Context
	nparams 0
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10083586 "lookup"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10083714 "lookup"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10083842 "bind"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "newObj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10083970 "bind"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "newObj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10084098 "rebind"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "newObj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10084226 "rebind"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "newObj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10084354 "unbind"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10084482 "unbind"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10084610 "rename"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "newName" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10084738 "rename"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "newName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10084866 "list"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<NameClassPair> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10084994 "list"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<NameClassPair> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10085122 "listBindings"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Binding> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10085250 "listBindings"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Binding> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10085378 "destroySubcontext"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10085506 "destroySubcontext"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10085634 "createSubcontext"
	public return_type class_ref 262018 // Context
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10085762 "createSubcontext"
	public return_type class_ref 262018 // Context
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10085890 "lookupLink"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10086018 "lookupLink"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10086146 "getNameParser"
	public return_type class_ref 1209218 // NameParser
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10086274 "getNameParser"
	public return_type class_ref 1209218 // NameParser
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10086402 "composeName"
	public return_type class_ref 261890 // Name
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "prefix" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10086530 "composeName"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "prefix" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10086658 "addToEnvironment"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "propName" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10086786 "removeFromEnvironment"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "propName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10086914 "getEnvironment"
	public return_type class_ref 137090 // Hashtable
	nparams 0
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?,?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10087042 "getNameInNamespace"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10087170 "resolveToClass"
	public return_type class_ref 1218818 // ResolveResult
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "contextType" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends Context> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10087298 "resolveToClass"
	public return_type class_ref 1218818 // ResolveResult
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "contextType" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends Context> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10087426 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1218690 "Resolver"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents an \"intermediate context\" for name resolution.
<p>
The Resolver interface contains methods that are implemented by contexts
that do not support subtypes of Context, but which can act as
intermediate contexts for resolution purposes.
<p>
A <tt>Name</tt> parameter passed to any method is owned
by the caller.  The service provider will not modify the object
or keep a reference to it.
A <tt>ResolveResult</tt> object returned by any
method is owned by the caller.  The caller may subsequently modify it;
the service provider may not.

@author Rosanna Lee
@author Scott Seligman
@since 1.3
"
      operation 10083074 "resolveToClass"
	public return_type class_ref 1218818 // ResolveResult
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "contextType" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends Context> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Partially resolves a name.  Stops at the first
context that is an instance of a given subtype of
<code>Context</code>.

@param name
         the name to resolve
@param contextType
         the type of object to resolve.  This should
         be a subtype of <code>Context</code>.
@return  the object that was found, along with the unresolved
         suffix of <code>name</code>.  Cannot be null.

@throws  javax.naming.NotContextException
         if no context of the appropriate type is found
@throws  NamingException if a naming exception was encountered

@see #resolveToClass(String, Class)
"
      end

      operation 10083202 "resolveToClass"
	public return_type class_ref 1218818 // ResolveResult
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "contextType" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends Context> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Partially resolves a name.
See {@link #resolveToClass(Name, Class)} for details.

@param name
         the name to resolve
@param contextType
         the type of object to resolve.  This should
         be a subtype of <code>Context</code>.
@return  the object that was found, along with the unresolved
         suffix of <code>name</code>.  Cannot be null.

@throws  javax.naming.NotContextException
         if no context of the appropriate type is found
@throws  NamingException if a naming exception was encountered
"
      end
    end

    class 1218818 "ResolveResult"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents the result of resolution of a name.
It contains the object to which name was resolved, and the portion
of the name that has not been resolved.
<p>
A ResolveResult instance is not synchronized against concurrent
multithreaded access. Multiple threads trying to access and modify
a single ResolveResult instance should lock the object.

@author Rosanna Lee
@author Scott Seligman
@since 1.3
"
      classrelation 3906178 // <realization>
	relation 3906178 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3906178 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3906306 // resolvedObj (<unidirectional association>)
	relation 3906306 --->
	  a role_name "resolvedObj" protected
	    comment "
Field containing the Object that was resolved to successfully.
It can be null only when constructed using a subclass.
Constructors should always initialize this.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3906306 // resolvedObj (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3906434 // remainingName (<unidirectional association>)
	relation 3906434 --->
	  a role_name "remainingName" protected
	    comment "
Field containing the remaining name yet to be resolved.
It can be null only when constructed using a subclass.
Constructors should always initialize this.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3906434 // remainingName (<unidirectional association>)
	  b parent class_ref 261890 // Name
      end

      operation 10096258 "ResolveResult"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of ResolveResult with the
resolved object and remaining name both initialized to null.
"
      end

      operation 10096386 "ResolveResult"
	public explicit_return_type ""
	nparams 2
	  param inout name "robj" type class_ref 129538 // Object
	  param inout name "rcomp" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of ResolveResult consisting of
the resolved object and the remaining unresolved component.

@param robj The non-null object resolved to.
@param rcomp The single remaining name component that has yet to be
                resolved. Cannot be null (but can be empty).
"
      end

      operation 10096514 "ResolveResult"
	public explicit_return_type ""
	nparams 2
	  param inout name "robj" type class_ref 129538 // Object
	  param inout name "rname" type class_ref 261890 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of ResolveResult consisting of
the resolved Object and the remaining name.

@param robj The non-null Object resolved to.
@param rname The non-null remaining name that has yet to be resolved.
"
      end

      operation 10096642 "getRemainingName"
	public return_type class_ref 261890 // Name
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the remaining unresolved portion of the name.

@return The remaining unresolved portion of the name.
         Cannot be null but empty OK.
@see #appendRemainingName
@see #appendRemainingComponent
@see #setRemainingName
"
      end

      operation 10096770 "getResolvedObj"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the Object to which resolution was successful.

@return The Object to which resolution was successful. Cannot be null.
@see #setResolvedObj
"
      end

      operation 10096898 "setRemainingName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the remaining name field of this result to name.
A copy of name is made so that modifying the copy within
this ResolveResult does not affect <code>name</code> and
vice versa.

@param name The name to set remaining name to. Cannot be null.
@see #getRemainingName
@see #appendRemainingName
@see #appendRemainingComponent
"
      end

      operation 10097026 "appendRemainingName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds components to the end of remaining name.

@param name The components to add. Can be null.
@see #getRemainingName
@see #setRemainingName
@see #appendRemainingComponent
"
      end

      operation 10097154 "appendRemainingComponent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a single component to the end of remaining name.

@param name The component to add. Can be null.
@see #getRemainingName
@see #appendRemainingName
"
      end

      operation 10097282 "setResolvedObj"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the resolved Object field of this result to obj.

@param obj The object to use for setting the resolved obj field.
           Cannot be null.
@see #getResolvedObj
"
      end

      attribute 2323586 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4552108072002407559L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1218946 "ContinuationDirContext"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is the continuation context for invoking DirContext methods.

@author Rosanna Lee
@author Scott Seligman
@since 1.3
"
      classrelation 3904130 // <generalisation>
	relation 3904130 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3904130 // <generalisation>
	  b parent class_ref 1218562 // ContinuationContext
      end

      classrelation 3904258 // <realization>
	relation 3904258 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3904258 // <realization>
	  b parent class_ref 832642 // DirContext
      end

      operation 10087554 "ContinuationDirContext"
	package explicit_return_type ""
	nparams 2
	  param inout name "cpe" type class_ref 1208450 // CannotProceedException
	  param inout name "env" type class_ref 137090 // Hashtable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?,?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10087682 "getTargetContext"
	protected return_type class_ref 1219074 // DirContextNamePair
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10087810 "getTargetContext"
	protected return_type class_ref 1219202 // DirContextStringPair
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10087938 "getAttributes"
	public return_type class_ref 1212930 // Attributes
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10088066 "getAttributes"
	public return_type class_ref 1212930 // Attributes
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "attrIds" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10088194 "getAttributes"
	public return_type class_ref 1212930 // Attributes
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10088322 "getAttributes"
	public return_type class_ref 1212930 // Attributes
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "attrIds" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10088450 "modifyAttributes"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param in name "mod_op" explicit_type "int"
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10088578 "modifyAttributes"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param in name "mod_op" explicit_type "int"
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10088706 "modifyAttributes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "mods" type class_ref 1212802 // ModificationItem
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10088834 "modifyAttributes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "mods" type class_ref 1212802 // ModificationItem
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10088962 "bind"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10089090 "bind"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10089218 "rebind"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10089346 "rebind"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10089474 "createSubcontext"
	public return_type class_ref 832642 // DirContext
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10089602 "createSubcontext"
	public return_type class_ref 832642 // DirContext
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10089730 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "matchingAttributes" type class_ref 1212930 // Attributes
	  param inout name "attributesToReturn" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10089858 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "matchingAttributes" type class_ref 1212930 // Attributes
	  param inout name "attributesToReturn" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10089986 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "matchingAttributes" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10090114 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "matchingAttributes" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10090242 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "filter" type class_ref 128130 // String
	  param inout name "cons" type class_ref 834818 // SearchControls
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10090370 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "filter" type class_ref 128130 // String
	  param inout name "cons" type class_ref 834818 // SearchControls
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10090498 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 4
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "filterExpr" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "cons" type class_ref 834818 // SearchControls
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10090626 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "filterExpr" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "cons" type class_ref 834818 // SearchControls
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10090754 "getSchema"
	public return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10090882 "getSchema"
	public return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10091010 "getSchemaClassDefinition"
	public return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10091138 "getSchemaClassDefinition"
	public return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1219074 "DirContextNamePair"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3904386 // ctx (<unidirectional association>)
	relation 3904386 --->
	  a role_name "ctx" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3904386 // ctx (<unidirectional association>)
	  b parent class_ref 832642 // DirContext
      end

      classrelation 3904514 // name (<unidirectional association>)
	relation 3904514 --->
	  a role_name "name" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3904514 // name (<unidirectional association>)
	  b parent class_ref 261890 // Name
      end

      operation 10091266 "DirContextNamePair"
	package explicit_return_type ""
	nparams 2
	  param inout name "ctx" type class_ref 832642 // DirContext
	  param inout name "name" type class_ref 261890 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10091394 "getDirContext"
	package return_type class_ref 832642 // DirContext
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10091522 "getName"
	package return_type class_ref 261890 // Name
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1219202 "DirContextStringPair"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3904642 // ctx (<unidirectional association>)
	relation 3904642 --->
	  a role_name "ctx" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3904642 // ctx (<unidirectional association>)
	  b parent class_ref 832642 // DirContext
      end

      classrelation 3904770 // str (<unidirectional association>)
	relation 3904770 --->
	  a role_name "str" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3904770 // str (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 10091650 "DirContextStringPair"
	package explicit_return_type ""
	nparams 2
	  param inout name "ctx" type class_ref 832642 // DirContext
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10091778 "getDirContext"
	package return_type class_ref 832642 // DirContext
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10091906 "getString"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1219330 "DirectoryManager"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class contains methods for supporting <tt>DirContext</tt>
implementations.
<p>
This class is an extension of <tt>NamingManager</tt>.  It contains methods
for use by service providers for accessing object factories and
state factories, and for getting continuation contexts for
supporting federation.
<p>
<tt>DirectoryManager</tt> is safe for concurrent access by multiple threads.
<p>
Except as otherwise noted,
a <tt>Name</tt>, <tt>Attributes</tt>, or environment parameter
passed to any method is owned by the caller.
The implementation will not modify the object or keep a reference
to it, although it may keep a reference to a clone or copy.

@author Rosanna Lee
@author Scott Seligman

@see DirObjectFactory
@see DirStateFactory
@since 1.3
"
      classrelation 3905538 // <generalisation>
	relation 3905538 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3905538 // <generalisation>
	  b parent class_ref 1219458 // NamingManager
      end

      operation 10094466 "DirectoryManager"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disallow anyone from creating one of these.
"
      end

      operation 10094594 "getContinuationDirContext"
	class_operation public return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "cpe" type class_ref 1208450 // CannotProceedException
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Creates a context in which to continue a <tt>DirContext</tt> operation.
Operates just like <tt>NamingManager.getContinuationContext()</tt>,
only the continuation context returned is a <tt>DirContext</tt>.

@param cpe
        The non-null exception that triggered this continuation.
@return A non-null <tt>DirContext</tt> object for continuing the operation.
@exception NamingException If a naming exception occurred.

@see NamingManager#getContinuationContext(CannotProceedException)
"
      end

      operation 10094722 "getObjectInstance"
	class_operation public return_type class_ref 129538 // Object
	nparams 5
	  param inout name "refInfo" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of an object for the specified object,
attributes, and environment.
<p>
This method is the same as <tt>NamingManager.getObjectInstance</tt>
except for the following differences:
<ul>
<li>
It accepts an <tt>Attributes</tt> parameter that contains attributes
associated with the object. The <tt>DirObjectFactory</tt> might use these
attributes to save having to look them up from the directory.
<li>
The object factories tried must implement either
<tt>ObjectFactory</tt> or <tt>DirObjectFactory</tt>.
If it implements <tt>DirObjectFactory</tt>,
<tt>DirObjectFactory.getObjectInstance()</tt> is used, otherwise,
<tt>ObjectFactory.getObjectInstance()</tt> is used.
</ul>
Service providers that implement the <tt>DirContext</tt> interface
should use this method, not <tt>NamingManager.getObjectInstance()</tt>.
<p>

@param refInfo The possibly null object for which to create an object.
@param name The name of this object relative to <code>nameCtx</code>.
        Specifying a name is optional; if it is
        omitted, <code>name</code> should be null.
@param nameCtx The context relative to which the <code>name</code>
        parameter is specified.  If null, <code>name</code> is
        relative to the default initial context.
@param environment The possibly null environment to
        be used in the creation of the object factory and the object.
@param attrs The possibly null attributes associated with refInfo.
        This might not be the complete set of attributes for refInfo;
        you might be able to read more attributes from the directory.
@return An object created using <code>refInfo</code> and <tt>attrs</tt>; or
        <code>refInfo</code> if an object cannot be created by
        a factory.
@exception NamingException If a naming exception was encountered
        while attempting to get a URL context, or if one of the
        factories accessed throws a NamingException.
@exception Exception If one of the factories accessed throws an
        exception, or if an error was encountered while loading
        and instantiating the factory and object classes.
        A factory should only throw an exception if it does not want
        other factories to be used in an attempt to create an object.
        See <tt>DirObjectFactory.getObjectInstance()</tt>.
@see NamingManager#getURLContext
@see DirObjectFactory
@see DirObjectFactory#getObjectInstance
@since 1.3
"
      end

      operation 10094850 "createObjectFromFactories"
	class_operation private return_type class_ref 129538 // Object
	nparams 5
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10094978 "getStateToBind"
	class_operation public return_type class_ref 1220098 // Result
	nparams 5
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the state of an object for binding when given the original
object and its attributes.
<p>
This method is like <tt>NamingManager.getStateToBind</tt> except
for the following differences:
<ul>
<li>It accepts an <tt>Attributes</tt> parameter containing attributes
   that were passed to the <tt>DirContext.bind()</tt> method.
<li>It returns a non-null <tt>DirStateFactory.Result</tt> instance
   containing the object to be bound, and the attributes to
   accompany the binding. Either the object or the attributes may be null.
<li>
The state factories tried must each implement either
<tt>StateFactory</tt> or <tt>DirStateFactory</tt>.
If it implements <tt>DirStateFactory</tt>, then
<tt>DirStateFactory.getStateToBind()</tt> is called; otherwise,
<tt>StateFactory.getStateToBind()</tt> is called.
</ul>

Service providers that implement the <tt>DirContext</tt> interface
should use this method, not <tt>NamingManager.getStateToBind()</tt>.
<p>
See NamingManager.getStateToBind() for a description of how
the list of state factories to be tried is determined.
<p>
The object returned by this method is owned by the caller.
The implementation will not subsequently modify it.
It will contain either a new <tt>Attributes</tt> object that is
likewise owned by the caller, or a reference to the original
<tt>attrs</tt> parameter.

@param obj The non-null object for which to get state to bind.
@param name The name of this object relative to <code>nameCtx</code>,
        or null if no name is specified.
@param nameCtx The context relative to which the <code>name</code>
        parameter is specified, or null if <code>name</code> is
        relative to the default initial context.
@param environment The possibly null environment to
        be used in the creation of the state factory and
        the object's state.
@param attrs The possibly null Attributes that is to be bound with the
        object.
@return A non-null DirStateFactory.Result containing
 the object and attributes to be bound.
 If no state factory returns a non-null answer, the result will contain
 the object (<tt>obj</tt>) itself with the original attributes.
@exception NamingException If a naming exception was encountered
        while using the factories.
        A factory should only throw an exception if it does not want
        other factories to be used in an attempt to create an object.
        See <tt>DirStateFactory.getStateToBind()</tt>.
@see DirStateFactory
@see DirStateFactory#getStateToBind
@see NamingManager#getStateToBind
@since 1.3
"
      end
    end

    class 1219458 "NamingManager"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class contains methods for creating context objects
and objects referred to by location information in the naming
or directory service.
<p>
This class cannot be instantiated.  It has only static methods.
<p>
The mention of URL in the documentation for this class refers to
a URL string as defined by RFC 1738 and its related RFCs. It is
any string that conforms to the syntax described therein, and
may not always have corresponding support in the java.net.URL
class or Web browsers.
<p>
NamingManager is safe for concurrent access by multiple threads.
<p>
Except as otherwise noted,
a <tt>Name</tt> or environment parameter
passed to any method is owned by the caller.
The implementation will not modify the object or keep a reference
to it, although it may keep a reference to a clone or copy.

@author Rosanna Lee
@author Scott Seligman
@since 1.3
"
      operation 10092034 "NamingManager"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disallow anyone from creating one of these.
Made package private so that DirectoryManager can subclass.
"
      end

      classrelation 3904898 // helper (<unidirectional association>)
	relation 3904898 --->
	  a role_name "helper" init_value " VersionHelper.getVersionHelper()" class_relation const_relation package
	    comment " should be protected and package private
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3904898 // helper (<unidirectional association>)
	  b parent class_ref 539906 // VersionHelper
      end

      classrelation 3905026 // object_factory_builder (<unidirectional association>)
	relation 3905026 --->
	  a role_name "object_factory_builder" init_value " null" class_relation private
	    comment " --------- object factory stuff

Package-private; used by DirectoryManager and NamingManager.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3905026 // object_factory_builder (<unidirectional association>)
	  b parent class_ref 1219586 // ObjectFactoryBuilder
      end

      operation 10092162 "setObjectFactoryBuilder"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "builder" type class_ref 1219586 // ObjectFactoryBuilder
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The ObjectFactoryBuilder determines the policy used when
trying to load object factories.
See getObjectInstance() and class ObjectFactory for a description
of the default policy.
setObjectFactoryBuilder() overrides this default policy by installing
an ObjectFactoryBuilder. Subsequent object factories will
be loaded and created using the installed builder.
<p>
The builder can only be installed if the executing thread is allowed
(by the security manager's checkSetFactory() method) to do so.
Once installed, the builder cannot be replaced.
<p>
@param builder The factory builder to install. If null, no builder
                 is installed.
@exception SecurityException builder cannot be installed
         for security reasons.
@exception NamingException builder cannot be installed for
        a non-security-related reason.
@exception IllegalStateException If a factory has already been installed.
@see #getObjectInstance
@see ObjectFactory
@see ObjectFactoryBuilder
@see java.lang.SecurityManager#checkSetFactory
"
      end

      operation 10092290 "getObjectFactoryBuilder"
	class_operation package return_type class_ref 1219586 // ObjectFactoryBuilder
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used for accessing object factory builder.
"
      end

      operation 10092418 "getObjectFactoryFromReference"
	class_operation package return_type class_ref 1219714 // ObjectFactory
	nparams 2
	  param inout name "ref" type class_ref 1210370 // Reference
	  param inout name "factoryName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 321538 // IllegalAccessException
	  exception class_ref 193282 // InstantiationException
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the ObjectFactory for the object identified by a reference,
using the reference's factory class name and factory codebase
to load in the factory's class.
@param ref The non-null reference to use.
@param factoryName The non-null class name of the factory.
@return The object factory for the object identified by ref; null
if unable to load the factory.
"
      end

      operation 10092546 "createObjectFromFactories"
	class_operation private return_type class_ref 129538 // Object
	nparams 4
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an object using the factories specified in the
<tt>Context.OBJECT_FACTORIES</tt> property of the environment
or of the provider resource file associated with <tt>nameCtx</tt>.

@return factory created; null if cannot create
"
      end

      operation 10092674 "getURLScheme"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10092802 "getObjectInstance"
	class_operation public return_type class_ref 129538 // Object
	nparams 4
	  param inout name "refInfo" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of an object for the specified object
and environment.
<p>
If an object factory builder has been installed, it is used to
create a factory for creating the object.
Otherwise, the following rules are used to create the object:
<ol>
<li>If <code>refInfo</code> is a <code>Reference</code>
   or <code>Referenceable</code> containing a factory class name,
   use the named factory to create the object.
   Return <code>refInfo</code> if the factory cannot be created.
   Under JDK 1.1, if the factory class must be loaded from a location
   specified in the reference, a <tt>SecurityManager</tt> must have
   been installed or the factory creation will fail.
   If an exception is encountered while creating the factory,
   it is passed up to the caller.
<li>If <tt>refInfo</tt> is a <tt>Reference</tt> or
   <tt>Referenceable</tt> with no factory class name,
   and the address or addresses are <tt>StringRefAddr</tt>s with
   address type \"URL\",
   try the URL context factory corresponding to each URL's scheme id
   to create the object (see <tt>getURLContext()</tt>).
   If that fails, continue to the next step.
<li> Use the object factories specified in
   the <tt>Context.OBJECT_FACTORIES</tt> property of the environment,
   and of the provider resource file associated with
   <tt>nameCtx</tt>, in that order.
   The value of this property is a colon-separated list of factory
   class names that are tried in order, and the first one that succeeds
   in creating an object is the one used.
   If none of the factories can be loaded,
   return <code>refInfo</code>.
   If an exception is encountered while creating the object, the
   exception is passed up to the caller.
</ol>
<p>
Service providers that implement the <tt>DirContext</tt>
interface should use
<tt>DirectoryManager.getObjectInstance()</tt>, not this method.
Service providers that implement only the <tt>Context</tt>
interface should use this method.
<p>
Note that an object factory (an object that implements the ObjectFactory
interface) must be public and must have a public constructor that
accepts no arguments.
<p>
The <code>name</code> and <code>nameCtx</code> parameters may
optionally be used to specify the name of the object being created.
<code>name</code> is the name of the object, relative to context
<code>nameCtx</code>.  This information could be useful to the object
factory or to the object implementation.
 If there are several possible contexts from which the object
 could be named -- as will often be the case -- it is up to
 the caller to select one.  A good rule of thumb is to select the
\"deepest\" context available.
If <code>nameCtx</code> is null, <code>name</code> is relative
to the default initial context.  If no name is being specified, the
<code>name</code> parameter should be null.

@param refInfo The possibly null object for which to create an object.
@param name The name of this object relative to <code>nameCtx</code>.
         Specifying a name is optional; if it is
         omitted, <code>name</code> should be null.
@param nameCtx The context relative to which the <code>name</code>
         parameter is specified.  If null, <code>name</code> is
         relative to the default initial context.
@param environment The possibly null environment to
         be used in the creation of the object factory and the object.
@return An object created using <code>refInfo</code>; or
         <code>refInfo</code> if an object cannot be created using
         the algorithm described above.
@exception NamingException if a naming exception was encountered
 while attempting to get a URL context, or if one of the
         factories accessed throws a NamingException.
@exception Exception if one of the factories accessed throws an
         exception, or if an error was encountered while loading
         and instantiating the factory and object classes.
         A factory should only throw an exception if it does not want
         other factories to be used in an attempt to create an object.
 See ObjectFactory.getObjectInstance().
@see #getURLContext
@see ObjectFactory
@see ObjectFactory#getObjectInstance
"
      end

      operation 10092930 "processURLAddrs"
	class_operation package return_type class_ref 129538 // Object
	nparams 4
	  param inout name "ref" type class_ref 1210370 // Reference
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ref has no factory.  For each address of type \"URL\", try its URL
context factory.  Returns null if unsuccessful in creating and
invoking a factory.
"
      end

      operation 10093058 "processURL"
	class_operation private return_type class_ref 129538 // Object
	nparams 4
	  param inout name "refInfo" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10093186 "getContext"
	class_operation package return_type class_ref 262018 // Context
	nparams 4
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a context identified by <code>obj</code>, using the specified
environment.
Used by ContinuationContext.

@param obj       The object identifying the context.
@param name      The name of the context being returned, relative to
                 <code>nameCtx</code>, or null if no name is being
                 specified.
                 See the <code>getObjectInstance</code> method for
                 details.
@param nameCtx   The context relative to which <code>name</code> is
                 specified, or null for the default initial context.
                 See the <code>getObjectInstance</code> method for
                 details.
@param environment Environment specifying characteristics of the
                 resulting context.
@return A context identified by <code>obj</code>.

@see #getObjectInstance
"
      end

      operation 10093314 "getResolver"
	class_operation package return_type class_ref 1218690 // Resolver
	nparams 4
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Used by ContinuationContext"
      end

      operation 10093442 "getURLContext"
	class_operation public return_type class_ref 262018 // Context
	nparams 2
	  param inout name "scheme" type class_ref 128130 // String
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?,?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " URL Context implementations **************

Creates a context for the given URL scheme id.
<p>
The resulting context is for resolving URLs of the
scheme <code>scheme</code>. The resulting context is not tied
to a specific URL. It is able to handle arbitrary URLs with
the specified scheme.
<p>
The class name of the factory that creates the resulting context
has the naming convention <i>scheme-id</i>URLContextFactory
(e.g. \"ftpURLContextFactory\" for the \"ftp\" scheme-id),
in the package specified as follows.
The <tt>Context.URL_PKG_PREFIXES</tt> environment property (which
may contain values taken from applet parameters, system properties,
or application resource files)
contains a colon-separated list of package prefixes.
Each package prefix in
the property is tried in the order specified to load the factory class.
The default package prefix is \"com.sun.jndi.url\" (if none of the
specified packages work, this default is tried).
The complete package name is constructed using the package prefix,
concatenated with the scheme id.
<p>
For example, if the scheme id is \"ldap\", and the
<tt>Context.URL_PKG_PREFIXES</tt> property
contains \"com.widget:com.wiz.jndi\",
the naming manager would attempt to load the following classes
until one is successfully instantiated:
<ul>
<li>com.widget.ldap.ldapURLContextFactory
 <li>com.wiz.jndi.ldap.ldapURLContextFactory
 <li>com.sun.jndi.url.ldap.ldapURLContextFactory
</ul>
If none of the package prefixes work, null is returned.
<p>
If a factory is instantiated, it is invoked with the following
parameters to produce the resulting context.
<p>
<code>factory.getObjectInstance(null, environment);</code>
<p>
For example, invoking getObjectInstance() as shown above
on a LDAP URL context factory would return a
context that can resolve LDAP urls
(e.g. \"ldap://ldap.wiz.com/o=wiz,c=us\",
\"ldap://ldap.umich.edu/o=umich,c=us\", ...).
<p>
Note that an object factory (an object that implements the ObjectFactory
interface) must be public and must have a public constructor that
accepts no arguments.

@param scheme    The non-null scheme-id of the URLs supported by the context.
@param environment The possibly null environment properties to be
          used in the creation of the object factory and the context.
@return A context for resolving URLs with the
        scheme id <code>scheme</code>;
 <code>null</code> if the factory for creating the
        context is not found.
@exception NamingException If a naming exception occurs while creating
         the context.
@see #getObjectInstance
@see ObjectFactory#getObjectInstance
"
      end

      classrelation 3905154 // defaultPkgPrefix (<unidirectional association>)
	relation 3905154 --->
	  a role_name "defaultPkgPrefix" init_value " \"com.sun.jndi.url\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3905154 // defaultPkgPrefix (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 10093570 "getURLObject"
	class_operation private return_type class_ref 129538 // Object
	nparams 5
	  param inout name "scheme" type class_ref 128130 // String
	  param inout name "urlInfo" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<?,?> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an object for the given URL scheme id using
the supplied urlInfo.
<p>
If urlInfo is null, the result is a context for resolving URLs
with the scheme id 'scheme'.
If urlInfo is a URL, the result is a context named by the URL.
Names passed to this context is assumed to be relative to this
context (i.e. not a URL). For example, if urlInfo is
\"ldap://ldap.wiz.com/o=Wiz,c=us\", the resulting context will
be that pointed to by \"o=Wiz,c=us\" on the server 'ldap.wiz.com'.
Subsequent names that can be passed to this context will be
LDAP names relative to this context (e.g. cn=\"Barbs Jensen\").
If urlInfo is an array of URLs, the URLs are assumed
to be equivalent in terms of the context to which they refer.
The resulting context is like that of the single URL case.
If urlInfo is of any other type, that is handled by the
context factory for the URL scheme.
@param scheme the URL scheme id for the context
@param urlInfo information used to create the context
@param name name of this object relative to <code>nameCtx</code>
@param nameCtx Context whose provider resource file will be searched
         for package prefix values (or null if none)
@param environment Environment properties for creating the context
@see javax.naming.InitialContext
"
      end

      classrelation 3905282 // initctx_factory_builder (<unidirectional association>)
	relation 3905282 --->
	  a role_name "initctx_factory_builder" init_value " null" class_relation private
	    comment " ------------ Initial Context Factory Stuff
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3905282 // initctx_factory_builder (<unidirectional association>)
	  b parent class_ref 1219842 // InitialContextFactoryBuilder
      end

      operation 10093698 "getInitialContextFactoryBuilder"
	class_operation private return_type class_ref 1219842 // InitialContextFactoryBuilder
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Use this method for accessing initctx_factory_builder while
inside an unsynchronized method.
"
      end

      operation 10093826 "getInitialContext"
	class_operation public return_type class_ref 262018 // Context
	nparams 1
	  param inout name "env" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an initial context using the specified environment
properties.
<p>
If an InitialContextFactoryBuilder has been installed,
it is used to create the factory for creating the initial context.
Otherwise, the class specified in the
<tt>Context.INITIAL_CONTEXT_FACTORY</tt> environment property is used.
Note that an initial context factory (an object that implements the
InitialContextFactory interface) must be public and must have a
public constructor that accepts no arguments.

@param env The possibly null environment properties used when
                 creating the context.
@return A non-null initial context.
@exception NoInitialContextException If the
         <tt>Context.INITIAL_CONTEXT_FACTORY</tt> property
        is not found or names a nonexistent
        class or a class that cannot be instantiated,
         or if the initial context could not be created for some other
         reason.
@exception NamingException If some other naming exception was encountered.
@see javax.naming.InitialContext
@see javax.naming.directory.InitialDirContext
"
      end

      operation 10093954 "setInitialContextFactoryBuilder"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "builder" type class_ref 1219842 // InitialContextFactoryBuilder
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the InitialContextFactory builder to be builder.

<p>
The builder can only be installed if the executing thread is allowed by
the security manager to do so. Once installed, the builder cannot
be replaced.
@param builder The initial context factory builder to install. If null,
               no builder is set.
@exception SecurityException builder cannot be installed for security
                 reasons.
@exception NamingException builder cannot be installed for
        a non-security-related reason.
@exception IllegalStateException If a builder was previous installed.
@see #hasInitialContextFactoryBuilder
@see java.lang.SecurityManager#checkSetFactory
"
      end

      operation 10094082 "hasInitialContextFactoryBuilder"
	class_operation public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether an initial context factory builder has
been set.
@return true if an initial context factory builder has
          been set; false otherwise.
@see #setInitialContextFactoryBuilder
"
      end

      classrelation 3905410 // CPE (<unidirectional association>)
	relation 3905410 --->
	  a role_name "CPE" init_value " \"java.naming.spi.CannotProceedException\"" class_relation const_relation public
	    comment " -----  Continuation Context Stuff

Constant that holds the name of the environment property into
which <tt>getContinuationContext()</tt> stores the value of its
<tt>CannotProceedException</tt> parameter.
This property is inherited by the continuation context, and may
be used by that context's service provider to inspect the
fields of the exception.
<p>
The value of this constant is \"java.naming.spi.CannotProceedException\".

@see #getContinuationContext
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3905410 // CPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 10094210 "getContinuationContext"
	class_operation public return_type class_ref 262018 // Context
	nparams 1
	  param inout name "cpe" type class_ref 1208450 // CannotProceedException
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Creates a context in which to continue a context operation.
<p>
In performing an operation on a name that spans multiple
namespaces, a context from one naming system may need to pass
the operation on to the next naming system.  The context
implementation does this by first constructing a
<code>CannotProceedException</code> containing information
pinpointing how far it has proceeded.  It then obtains a
continuation context from JNDI by calling
<code>getContinuationContext</code>.  The context
implementation should then resume the context operation by
invoking the same operation on the continuation context, using
the remainder of the name that has not yet been resolved.
<p>
Before making use of the <tt>cpe</tt> parameter, this method
updates the environment associated with that object by setting
the value of the property <a href=\"#CPE\"><tt>CPE</tt></a>
to <tt>cpe</tt>.  This property will be inherited by the
continuation context, and may be used by that context's
service provider to inspect the fields of this exception.

@param cpe
         The non-null exception that triggered this continuation.
@return A non-null Context object for continuing the operation.
@exception NamingException If a naming exception occurred.
"
      end

      operation 10094338 "getStateToBind"
	class_operation public return_type class_ref 129538 // Object
	nparams 4
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------ State Factory Stuff

Retrieves the state of an object for binding.
<p>
Service providers that implement the <tt>DirContext</tt> interface
should use <tt>DirectoryManager.getStateToBind()</tt>, not this method.
Service providers that implement only the <tt>Context</tt> interface
should use this method.
<p>
This method uses the specified state factories in
the <tt>Context.STATE_FACTORIES</tt> property from the environment
properties, and from the provider resource file associated with
<tt>nameCtx</tt>, in that order.
   The value of this property is a colon-separated list of factory
   class names that are tried in order, and the first one that succeeds
   in returning the object's state is the one used.
If no object's state can be retrieved in this way, return the
object itself.
   If an exception is encountered while retrieving the state, the
   exception is passed up to the caller.
<p>
Note that a state factory
(an object that implements the StateFactory
interface) must be public and must have a public constructor that
accepts no arguments.
<p>
The <code>name</code> and <code>nameCtx</code> parameters may
optionally be used to specify the name of the object being created.
See the description of \"Name and Context Parameters\" in
{@link ObjectFactory#getObjectInstance
         ObjectFactory.getObjectInstance()}
for details.
<p>
This method may return a <tt>Referenceable</tt> object.  The
service provider obtaining this object may choose to store it
directly, or to extract its reference (using
<tt>Referenceable.getReference()</tt>) and store that instead.

@param obj The non-null object for which to get state to bind.
@param name The name of this object relative to <code>nameCtx</code>,
         or null if no name is specified.
@param nameCtx The context relative to which the <code>name</code>
         parameter is specified, or null if <code>name</code> is
         relative to the default initial context.
 @param environment The possibly null environment to
         be used in the creation of the state factory and
 the object's state.
@return The non-null object representing <tt>obj</tt>'s state for
 binding.  It could be the object (<tt>obj</tt>) itself.
@exception NamingException If one of the factories accessed throws an
         exception, or if an error was encountered while loading
         and instantiating the factory and object classes.
         A factory should only throw an exception if it does not want
         other factories to be used in an attempt to create an object.
 See <tt>StateFactory.getStateToBind()</tt>.
@see StateFactory
@see StateFactory#getStateToBind
@see DirectoryManager#getStateToBind
@since 1.3
"
      end
    end

    class 1219586 "ObjectFactoryBuilder"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents a builder that creates object factories.
<p>
The JNDI framework allows for object implementations to
be loaded in dynamically via <em>object factories</em>.
For example, when looking up a printer bound in the name space,
if the print service binds printer names to References, the printer
Reference could be used to create a printer object, so that
the caller of lookup can directly operate on the printer object
after the lookup.  An ObjectFactory is responsible for creating
objects of a specific type.  JNDI uses a default policy for using
and loading object factories.  You can override this default policy
by calling <tt>NamingManager.setObjectFactoryBuilder()</tt> with an ObjectFactoryBuilder,
which contains the program-defined way of creating/loading
object factories.
Any <tt>ObjectFactoryBuilder</tt> implementation must implement this
interface that for creating object factories.

@author Rosanna Lee
@author Scott Seligman

@see ObjectFactory
@see NamingManager#getObjectInstance
@see NamingManager#setObjectFactoryBuilder
@since 1.3
"
      operation 10096130 "createObjectFactory"
	public return_type class_ref 1219714 // ObjectFactory
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?,?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new object factory using the environment supplied.
<p>
The environment parameter is owned by the caller.
The implementation will not modify the object or keep a reference
to it, although it may keep a reference to a clone or copy.

@param obj The possibly null object for which to create a factory.
@param environment Environment to use when creating the factory.
                Can be null.
@return A non-null new instance of an ObjectFactory.
@exception NamingException If an object factory cannot be created.

"
      end
    end

    class 1219714 "ObjectFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents a factory for creating an object.
<p>
The JNDI framework allows for object implementations to
be loaded in dynamically via <em>object factories</em>.
For example, when looking up a printer bound in the name space,
if the print service binds printer names to References, the printer
Reference could be used to create a printer object, so that
the caller of lookup can directly operate on the printer object
after the lookup.
<p>An <tt>ObjectFactory</tt> is responsible
for creating objects of a specific type.  In the above example,
you may have a PrinterObjectFactory for creating Printer objects.
<p>
An object factory must implement the <tt>ObjectFactory</tt> interface.
In addition, the factory class must be public and must have a
public constructor that accepts no parameters.
<p>
The <tt>getObjectInstance()</tt> method of an object factory may
be invoked multiple times, possibly using different parameters.
The implementation is thread-safe.
<p>
The mention of URL in the documentation for this class refers to
a URL string as defined by RFC 1738 and its related RFCs. It is
any string that conforms to the syntax described therein, and
may not always have corresponding support in the java.net.URL
class or Web browsers.

@author Rosanna Lee
@author Scott Seligman

@see NamingManager#getObjectInstance
@see NamingManager#getURLContext
@see ObjectFactoryBuilder
@see StateFactory
@since 1.3
"
      operation 10095106 "getObjectInstance"
	public return_type class_ref 129538 // Object
	nparams 4
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an object using the location or reference information
specified.
<p>
Special requirements of this object are supplied
using <code>environment</code>.
An example of such an environment property is user identity
information.
<p>
<tt>NamingManager.getObjectInstance()</tt>
successively loads in object factories and invokes this method
on them until one produces a non-null answer.  When an exception
is thrown by an object factory, the exception is passed on to the caller
of <tt>NamingManager.getObjectInstance()</tt>
(and no search is made for other factories
that may produce a non-null answer).
An object factory should only throw an exception if it is sure that
it is the only intended factory and that no other object factories
should be tried.
If this factory cannot create an object using the arguments supplied,
it should return null.
<p>
A <em>URL context factory</em> is a special ObjectFactory that
creates contexts for resolving URLs or objects whose locations
are specified by URLs.  The <tt>getObjectInstance()</tt> method
of a URL context factory will obey the following rules.
<ol>
<li>If <code>obj</code> is null, create a context for resolving URLs of the
scheme associated with this factory. The resulting context is not tied
to a specific URL:  it is able to handle arbitrary URLs with this factory's
scheme id.  For example, invoking <tt>getObjectInstance()</tt> with
<code>obj</code> set to null on an LDAP URL context factory would return a
context that can resolve LDAP URLs
such as \"ldap://ldap.wiz.com/o=wiz,c=us\" and
\"ldap://ldap.umich.edu/o=umich,c=us\".
<li>
If <code>obj</code> is a URL string, create an object (typically a context)
identified by the URL.  For example, suppose this is an LDAP URL context
factory.  If <code>obj</code> is \"ldap://ldap.wiz.com/o=wiz,c=us\",
getObjectInstance() would return the context named by the distinguished
name \"o=wiz, c=us\" at the LDAP server ldap.wiz.com.  This context can
then be used to resolve LDAP names (such as \"cn=George\")
relative to that context.
<li>
If <code>obj</code> is an array of URL strings, the assumption is that the
URLs are equivalent in terms of the context to which they refer.
Verification of whether the URLs are, or need to be, equivalent is up
to the context factory. The order of the URLs in the array is
not significant.
The object returned by getObjectInstance() is like that of the single
URL case.  It is the object named by the URLs.
<li>
If <code>obj</code> is of any other type, the behavior of
<tt>getObjectInstance()</tt> is determined by the context factory
implementation.
</ol>

<p>
The <tt>name</tt> and <tt>environment</tt> parameters
are owned by the caller.
The implementation will not modify these objects or keep references
to them, although it may keep references to clones or copies.

<p>
<b>Name and Context Parameters.</b> &nbsp;&nbsp;&nbsp;
<a name=NAMECTX></a>

The <code>name</code> and <code>nameCtx</code> parameters may
optionally be used to specify the name of the object being created.
<code>name</code> is the name of the object, relative to context
<code>nameCtx</code>.
If there are several possible contexts from which the object
could be named -- as will often be the case -- it is up to
the caller to select one.  A good rule of thumb is to select the
\"deepest\" context available.
If <code>nameCtx</code> is null, <code>name</code> is relative
to the default initial context.  If no name is being specified, the
<code>name</code> parameter should be null.
If a factory uses <code>nameCtx</code> it should synchronize its use
against concurrent access, since context implementations are not
guaranteed to be thread-safe.
<p>

@param obj The possibly null object containing location or reference
             information that can be used in creating an object.
@param name The name of this object relative to <code>nameCtx</code>,
             or null if no name is specified.
@param nameCtx The context relative to which the <code>name</code>
             parameter is specified, or null if <code>name</code> is
             relative to the default initial context.
@param environment The possibly null environment that is used in
             creating the object.
@return The object created; null if an object cannot be created.
@exception Exception if this object factory encountered an exception
while attempting to create an object, and no other object factories are
to be tried.

@see NamingManager#getObjectInstance
@see NamingManager#getURLContext
"
      end
    end

    class 1219842 "InitialContextFactoryBuilder"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents a builder that creates initial context factories.
<p>
The JNDI framework allows for different initial context implementations
to be specified at runtime.  An initial context is created using
an initial context factory. A program can install its own builder
that creates initial context factories, thereby overriding the
default policies used by the framework, by calling
NamingManager.setInitialContextFactoryBuilder().
The InitialContextFactoryBuilder interface must be implemented by
such a builder.

@author Rosanna Lee
@author Scott Seligman

@see InitialContextFactory
@see NamingManager#getInitialContext
@see NamingManager#setInitialContextFactoryBuilder
@see NamingManager#hasInitialContextFactoryBuilder
@see javax.naming.InitialContext
@see javax.naming.directory.InitialDirContext
@since 1.3
"
      operation 10096002 "createInitialContextFactory"
	public return_type class_ref 1220354 // InitialContextFactory
	nparams 1
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an initial context factory using the specified
environment.
<p>
The environment parameter is owned by the caller.
The implementation will not modify the object or keep a reference
to it, although it may keep a reference to a clone or copy.

@param environment Environment used in creating an initial
                context implementation. Can be null.
@return A non-null initial context factory.
@exception NamingException If an initial context factory could not be created.
"
      end
    end

    class 1219970 "DirStateFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents a factory for obtaining the state of an
object and corresponding attributes for binding.
<p>
The JNDI framework allows for object implementations to
be loaded in dynamically via <tt>object factories</tt>.
<p>
A <tt>DirStateFactory</tt> extends <tt>StateFactory</tt>
by allowing an <tt>Attributes</tt> instance
to be supplied to and be returned by the <tt>getStateToBind()</tt> method.
<tt>DirStateFactory</tt> implementations are intended to be used by
<tt>DirContext</tt> service providers.
When a caller binds an object using <tt>DirContext.bind()</tt>,
he might also specify a set of attributes to be bound with the object.
The object and attributes to be bound are passed to
the <tt>getStateToBind()</tt> method of a factory.
If the factory processes the object and attributes, it returns
a corresponding pair of object and attributes to be bound.
If the factory does not process the object, it must return null.
<p>
For example, a caller might bind a printer object with some printer-related
attributes.
<blockquote><pre>
ctx.rebind(\"inky\", printer, printerAttrs);
</pre></blockquote>
An LDAP service provider for <tt>ctx</tt> uses a <tt>DirStateFactory</tt>
(indirectly via <tt>DirectoryManager.getStateToBind()</tt>)
and gives it <tt>printer</tt> and <tt>printerAttrs</tt>. A factory for
an LDAP directory might turn <tt>printer</tt> into a set of attributes
and merge that with <tt>printerAttrs</tt>. The service provider then
uses the resulting attributes to create an LDAP entry and updates
the directory.

<p> Since <tt>DirStateFactory</tt> extends <tt>StateFactory</tt>, it
has two <tt>getStateToBind()</tt> methods, where one
differs from the other by the attributes
argument. <tt>DirectoryManager.getStateToBind()</tt> will only use
the form that accepts the attributes argument, while
<tt>NamingManager.getStateToBind()</tt> will only use the form that
does not accept the attributes argument.

<p> Either form of the <tt>getStateToBind()</tt> method of a
DirStateFactory may be invoked multiple times, possibly using different
parameters.  The implementation is thread-safe.

@author Rosanna Lee
@author Scott Seligman

@see DirectoryManager#getStateToBind
@see DirObjectFactory
@since 1.3
"
      class 1220098 "Result"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3905922 // obj (<unidirectional association>)
	  relation 3905922 --->
	    a role_name "obj" private
	      comment "
The possibly null object to be bound.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3905922 // obj (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	classrelation 3906050 // attrs (<unidirectional association>)
	  relation 3906050 --->
	    a role_name "attrs" private
	      comment "
The possibly null attributes to be bound.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3906050 // attrs (<unidirectional association>)
	    b parent class_ref 1212930 // Attributes
	end

	operation 10095490 "Result"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "obj" type class_ref 129538 // Object
	    param inout name "outAttrs" type class_ref 1212930 // Attributes
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs an instance of Result.

@param obj The possibly null object to be bound.
@param outAttrs The possibly null attributes to be bound.
"
	end

	operation 10095618 "getObject"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Retrieves the object to be bound.
@return The possibly null object to be bound.
"
	end

	operation 10095746 "getAttributes"
	  public return_type class_ref 1212930 // Attributes
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Retrieves the attributes to be bound.
@return The possibly null attributes to be bound.
"
	end
      end

      classrelation 3905794 // <generalisation>
	relation 3905794 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3905794 // <generalisation>
	  b parent class_ref 261762 // StateFactory
      end

      operation 10095362 "getStateToBind"
	public return_type class_ref 1220098 // Result
	nparams 5
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	  param inout name "inAttrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the state of an object for binding given the object and attributes
to be transformed.
<p>
<tt>DirectoryManager.getStateToBind()</tt>
successively loads in state factories. If a factory implements
<tt>DirStateFactory</tt>, <tt>DirectoryManager</tt> invokes this method;
otherwise, it invokes <tt>StateFactory.getStateToBind()</tt>.
It does this until a factory produces a non-null answer.
<p>
When an exception is thrown by a factory,
the exception is passed on to the caller
of <tt>DirectoryManager.getStateToBind()</tt>. The search for other factories
that may produce a non-null answer is halted.
A factory should only throw an exception if it is sure that
it is the only intended factory and that no other factories
should be tried.
If this factory cannot create an object using the arguments supplied,
it should return null.
<p>
The <code>name</code> and <code>nameCtx</code> parameters may
optionally be used to specify the name of the object being created.
See the description of \"Name and Context Parameters\" in
{@link ObjectFactory#getObjectInstance ObjectFactory.getObjectInstance()}
for details.
If a factory uses <code>nameCtx</code> it should synchronize its use
against concurrent access, since context implementations are not
guaranteed to be thread-safe.
<p>
The <tt>name</tt>, <tt>inAttrs</tt>, and <tt>environment</tt> parameters
are owned by the caller.
The implementation will not modify these objects or keep references
to them, although it may keep references to clones or copies.
The object returned by this method is owned by the caller.
The implementation will not subsequently modify it.
It will contain either a new <tt>Attributes</tt> object that is
likewise owned by the caller, or a reference to the original
<tt>inAttrs</tt> parameter.

@param obj A possibly null object whose state is to be retrieved.
@param name The name of this object relative to <code>nameCtx</code>,
             or null if no name is specified.
@param nameCtx The context relative to which the <code>name</code>
             parameter is specified, or null if <code>name</code> is
             relative to the default initial context.
@param environment The possibly null environment to
             be used in the creation of the object's state.
@param inAttrs The possibly null attributes to be bound with the object.
     The factory must not modify <tt>inAttrs</tt>.
@return A <tt>Result</tt> containing the object's state for binding
and the corresponding
attributes to be bound; null if the object don't use this factory.
@exception NamingException If this factory encountered an exception
while attempting to get the object's state, and no other factories are
to be tried.

@see DirectoryManager#getStateToBind
"
      end
    end

    class 1220226 "DirObjectFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents a factory for creating an object given
an object and attributes about the object.
<p>
The JNDI framework allows for object implementations to
be loaded in dynamically via <em>object factories</em>. See
<tt>ObjectFactory</tt> for details.
<p>
A <tt>DirObjectFactory</tt> extends <tt>ObjectFactory</tt> by allowing
an <tt>Attributes</tt> instance
to be supplied to the <tt>getObjectInstance()</tt> method.
<tt>DirObjectFactory</tt> implementations are intended to be used by <tt>DirContext</tt>
service providers. The service provider, in addition reading an
object from the directory, might already have attributes that
are useful for the object factory to check to see whether the
factory is supposed to process the object. For instance, an LDAP-style
service provider might have read the \"objectclass\" of the object.
A CORBA object factory might be interested only in LDAP entries
with \"objectclass=corbaObject\". By using the attributes supplied by
the LDAP service provider, the CORBA object factory can quickly
eliminate objects that it need not worry about, and non-CORBA object
factories can quickly eliminate CORBA-related LDAP entries.

@author Rosanna Lee
@author Scott Seligman

@see NamingManager#getObjectInstance
@see DirectoryManager#getObjectInstance
@see ObjectFactory
@since 1.3
"
      classrelation 3905666 // <generalisation>
	relation 3905666 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3905666 // <generalisation>
	  b parent class_ref 1219714 // ObjectFactory
      end

      operation 10095234 "getObjectInstance"
	public return_type class_ref 129538 // Object
	nparams 5
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "nameCtx" type class_ref 262018 // Context
	  param inout name "environment" type class_ref 137090 // Hashtable
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an object using the location or reference information, and attributes
specified.
<p>
Special requirements of this object are supplied
using <code>environment</code>.
An example of such an environment property is user identity
information.
<p>
<tt>DirectoryManager.getObjectInstance()</tt>
successively loads in object factories. If it encounters a <tt>DirObjectFactory</tt>,
it will invoke <tt>DirObjectFactory.getObjectInstance()</tt>;
otherwise, it invokes
<tt>ObjectFactory.getObjectInstance()</tt>. It does this until a factory
produces a non-null answer.
<p> When an exception
is thrown by an object factory, the exception is passed on to the caller
of <tt>DirectoryManager.getObjectInstance()</tt>. The search for other factories
that may produce a non-null answer is halted.
An object factory should only throw an exception if it is sure that
it is the only intended factory and that no other object factories
should be tried.
If this factory cannot create an object using the arguments supplied,
it should return null.
<p>Since <tt>DirObjectFactory</tt> extends <tt>ObjectFactory</tt>, it
effectively
has two <tt>getObjectInstance()</tt> methods, where one differs from the other by
the attributes argument. Given a factory that implements <tt>DirObjectFactory</tt>,
<tt>DirectoryManager.getObjectInstance()</tt> will only
use the method that accepts the attributes argument, while
<tt>NamingManager.getObjectInstance()</tt> will only use the one that does not accept
the attributes argument.
<p>
See <tt>ObjectFactory</tt> for a description URL context factories and other
properties of object factories that apply equally to <tt>DirObjectFactory</tt>.
<p>
The <tt>name</tt>, <tt>attrs</tt>, and <tt>environment</tt> parameters
are owned by the caller.
The implementation will not modify these objects or keep references
to them, although it may keep references to clones or copies.

@param obj The possibly null object containing location or reference
             information that can be used in creating an object.
@param name The name of this object relative to <code>nameCtx</code>,
             or null if no name is specified.
@param nameCtx The context relative to which the <code>name</code>
             parameter is specified, or null if <code>name</code> is
             relative to the default initial context.
@param environment The possibly null environment that is used in
             creating the object.
@param attrs The possibly null attributes containing some of <tt>obj</tt>'s
attributes. <tt>attrs</tt> might not necessarily have all of <tt>obj</tt>'s
attributes. If the object factory requires more attributes, it needs
to get it, either using <tt>obj</tt>, or <tt>name</tt> and <tt>nameCtx</tt>.
     The factory must not modify attrs.
@return The object created; null if an object cannot be created.
@exception Exception If this object factory encountered an exception
while attempting to create an object, and no other object factories are
to be tried.

@see DirectoryManager#getObjectInstance
@see NamingManager#getURLContext
"
      end
    end

    class 1220354 "InitialContextFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents a factory that creates an initial context.
<p>
The JNDI framework allows for different initial context implementations
to be specified at runtime.  The initial context is created using
an <em>initial context factory</em>.
An initial context factory must implement the InitialContextFactory
interface, which provides a method for creating instances of initial
context that implement the Context interface.
In addition, the factory class must be public and must have a public
constructor that accepts no arguments.

@author Rosanna Lee
@author Scott Seligman

@see InitialContextFactoryBuilder
@see NamingManager#getInitialContext
@see javax.naming.InitialContext
@see javax.naming.directory.InitialDirContext
@since 1.3
"
      operation 10095874 "getInitialContext"
	public return_type class_ref 262018 // Context
	nparams 1
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an Initial Context for beginning name resolution.
Special requirements of this context are supplied
using <code>environment</code>.
<p>
The environment parameter is owned by the caller.
The implementation will not modify the object or keep a reference
to it, although it may keep a reference to a clone or copy.

@param environment The possibly null environment
            specifying information to be used in the creation
            of the initial context.
@return A non-null initial context object that implements the Context
            interface.
@exception NamingException If cannot create an initial context.
"
      end
    end
  end

  deploymentview 136706 "spi"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 202626 "StateFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.*;
import java.util.Hashtable;
${definition}"
      associated_elems
	class_ref 261762 // StateFactory
      end
      comment "Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 884098 "Resolver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.Context;
import javax.naming.Name;
import javax.naming.NamingException;
${definition}"
      associated_elems
	class_ref 1218690 // Resolver
      end
      comment "Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 884226 "ContinuationContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import javax.naming.*;
${definition}"
      associated_elems
	class_ref 1218562 // ContinuationContext
      end
      comment "Copyright (c) 1999, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 884354 "ContinuationDirContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import javax.naming.Name;
import javax.naming.NamingEnumeration;
import javax.naming.CompositeName;
import javax.naming.NamingException;
import javax.naming.CannotProceedException;
import javax.naming.OperationNotSupportedException;
import javax.naming.Context;
import javax.naming.directory.DirContext;
import javax.naming.directory.Attributes;
import javax.naming.directory.SearchControls;
import javax.naming.directory.SearchResult;
import javax.naming.directory.ModificationItem;
${definition}"
      associated_elems
	class_ref 1218946 // ContinuationDirContext
	class_ref 1219074 // DirContextNamePair
	class_ref 1219202 // DirContextStringPair
      end
      comment "Copyright (c) 1999, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 884482 "NamingManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.net.MalformedURLException;
import javax.naming.*;
import com.sun.naming.internal.VersionHelper;
import com.sun.naming.internal.ResourceManager;
import com.sun.naming.internal.FactoryEnumeration;
${definition}"
      associated_elems
	class_ref 1219458 // NamingManager
      end
      comment "Copyright (c) 1999, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 884610 "DirectoryManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import javax.naming.Context;
import javax.naming.Name;
import javax.naming.Reference;
import javax.naming.Referenceable;
import javax.naming.NamingException;
import javax.naming.CannotProceedException;
import javax.naming.directory.DirContext;
import javax.naming.directory.Attributes;
import com.sun.naming.internal.ResourceManager;
import com.sun.naming.internal.FactoryEnumeration;
${definition}"
      associated_elems
	class_ref 1219330 // DirectoryManager
      end
      comment "Copyright (c) 1999, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 884738 "ObjectFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import javax.naming.*;
${definition}"
      associated_elems
	class_ref 1219714 // ObjectFactory
      end
      comment "Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 884866 "DirObjectFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import javax.naming.*;
import javax.naming.directory.Attributes;
${definition}"
      associated_elems
	class_ref 1220226 // DirObjectFactory
      end
      comment "Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 884994 "DirStateFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.*;
import javax.naming.directory.Attributes;
import java.util.Hashtable;
${definition}"
      associated_elems
	class_ref 1219970 // DirStateFactory
      end
      comment "Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 885122 "InitialContextFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import javax.naming.*;
${definition}"
      associated_elems
	class_ref 1220354 // InitialContextFactory
      end
      comment "Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 885250 "InitialContextFactoryBuilder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import javax.naming.NamingException;
${definition}"
      associated_elems
	class_ref 1219842 // InitialContextFactoryBuilder
      end
      comment "Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 885378 "ObjectFactoryBuilder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import javax.naming.NamingException;
${definition}"
      associated_elems
	class_ref 1219586 // ObjectFactoryBuilder
      end
      comment "Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 885506 "ResolveResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.Name;
import javax.naming.Context;
import javax.naming.CompositeName;
import javax.naming.InvalidNameException;
${definition}"
      associated_elems
	class_ref 1218818 // ResolveResult
      end
      comment "Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
