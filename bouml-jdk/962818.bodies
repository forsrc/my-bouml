class SocketInputStream
!!!7532290.java!!!	SocketInputStream(inout impl : AbstractPlainSocketImpl)
        super(impl.getFileDescriptor());
        this.impl = impl;
        socket = impl.getSocket();
!!!7532418.java!!!	getChannel() : FileChannel
        return null;
!!!7532674.java!!!	socketRead(inout fd : FileDescriptor, inout b : byte [[]], in off : int, in len : int, in timeout : int) : int
        return socketRead0(fd, b, off, len, timeout);
!!!7532802.java!!!	read(inout b : byte [[]]) : int
        return read(b, 0, b.length);
!!!7532930.java!!!	read(inout b : byte [[]], in off : int, in length : int) : int
        return read(b, off, length, impl.getTimeout());
!!!7533058.java!!!	read(inout b : byte [[]], in off : int, in length : int, in timeout : int) : int
        int n;

        // EOF already encountered
        if (eof) {
            return -1;
        }

        // connection reset
        if (impl.isConnectionReset()) {
            throw new SocketException("Connection reset");
        }

        // bounds check
        if (length <= 0 || off < 0 || length > b.length - off) {
            if (length == 0) {
                return 0;
            }
            throw new ArrayIndexOutOfBoundsException("length == " + length
                    + " off == " + off + " buffer length == " + b.length);
        }

        boolean gotReset = false;

        // acquire file descriptor and do the read
        FileDescriptor fd = impl.acquireFD();
        try {
            n = socketRead(fd, b, off, length, timeout);
            if (n > 0) {
                return n;
            }
        } catch (ConnectionResetException rstExc) {
            gotReset = true;
        } finally {
            impl.releaseFD();
        }

        /*
         * We receive a "connection reset" but there may be bytes still
         * buffered on the socket
         */
        if (gotReset) {
            impl.setConnectionResetPending();
            impl.acquireFD();
            try {
                n = socketRead(fd, b, off, length, timeout);
                if (n > 0) {
                    return n;
                }
            } catch (ConnectionResetException rstExc) {
            } finally {
                impl.releaseFD();
            }
        }

        /*
         * If we get here we are at EOF, the socket has been closed,
         * or the connection has been reset.
         */
        if (impl.isClosedOrPending()) {
            throw new SocketException("Socket closed");
        }
        if (impl.isConnectionResetPending()) {
            impl.setConnectionReset();
        }
        if (impl.isConnectionReset()) {
            throw new SocketException("Connection reset");
        }
        eof = true;
        return -1;
!!!7533186.java!!!	read() : int
        if (eof) {
            return -1;
        }
        temp = new byte[1];
        int n = read(temp, 0, 1);
        if (n <= 0) {
            return -1;
        }
        return temp[0] & 0xff;
!!!7533314.java!!!	skip(in numbytes : long) : long
        if (numbytes <= 0) {
            return 0;
        }
        long n = numbytes;
        int buflen = (int) Math.min(1024, n);
        byte data[] = new byte[buflen];
        while (n > 0) {
            int r = read(data, 0, (int) Math.min((long) buflen, n));
            if (r < 0) {
                break;
            }
            n -= r;
        }
        return numbytes - n;
!!!7533442.java!!!	available() : int
        return impl.available();
!!!7533570.java!!!	close() : void
        // Prevent recursion. See BugId 4484411
        if (closing)
            return;
        closing = true;
        if (socket != null) {
            if (!socket.isClosed())
                socket.close();
        } else
            impl.close();
        closing = false;
!!!7533698.java!!!	setEOF(inout eof : boolean) : void
        this.eof = eof;
