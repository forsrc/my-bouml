class NodeSortRecordFactory
!!!4003970.java!!!	NodeSortRecordFactory(inout dom : DOM, inout className : String, inout translet : Translet, inout order : String [[]], inout type : String [[]])
         this(dom, className, translet, order, type, null, null);
!!!4004098.java!!!	NodeSortRecordFactory(inout dom : DOM, inout className : String, inout translet : Translet, inout order : String [[]], inout type : String [[]], inout lang : String [[]], inout caseOrder : String [[]])
         try {
             _dom = dom;
             _className = className;
             // This should return a Class definition if using TrAX
             _class = translet.getAuxiliaryClass(className);
             // This code is only run when the native API is used
             if (_class == null) {
                 _class = ObjectFactory.findProviderClass(className, true);
             }

             int levels = order.length;
             int[] iOrder = new int[levels];
             int[] iType = new int[levels];
             for (int i = 0; i < levels; i++) {
                  if (order[i].length() == DESCENDING) {
                      iOrder[i] = NodeSortRecord.COMPARE_DESCENDING;
                  }
                  if (type[i].length() == NUMBER) {
                      iType[i] = NodeSortRecord.COMPARE_NUMERIC;
                  }
             }

             // Old NodeSortRecordFactory constructor had no lang or case_order
             // arguments.  Provide default values in that case for binary
             // compatibility.
             String[] emptyStringArray = null;
             if (lang == null || caseOrder == null) {
                 int numSortKeys = order.length;
                 emptyStringArray = new String[numSortKeys];

                 // Set up array of zero-length strings as default values
                 // of lang and case_order
                 for (int i = 0; i < numSortKeys; i++) {
                     emptyStringArray[i] = "";
                 }
             }

             if (lang == null) {
                 lang = emptyStringArray;
             }
             if (caseOrder == null) {
                 caseOrder = emptyStringArray;
             }

             final int length = lang.length;
             Locale[] locales = new Locale[length];
             Collator[] collators = new Collator[length];
             for (int i = 0; i< length; i++){
                 locales[i] = LocaleUtility.langToLocale(lang[i]);
                 collators[i] = Collator.getInstance(locales[i]);
             }

             _sortSettings = new SortSettings((AbstractTranslet) translet,
                                              iOrder, iType, locales, collators,
                                              caseOrder);
        } catch (ClassNotFoundException e) {
            throw new TransletException(e);
        }
!!!4004226.java!!!	makeNodeSortRecord(in node : int, in last : int) : NodeSortRecord

        final NodeSortRecord sortRecord =
            (NodeSortRecord)_class.newInstance();
        sortRecord.initialize(node, last, _dom, _sortSettings);
        return sortRecord;
!!!4004354.java!!!	getClassName() : String
        return _className;
!!!4004482.java!!!	setLang(in lang : String [[]]) : void

