class XMLSecurityManager
!!!5127042.java!!!	XMLSecurityManager()
        this(false);
!!!5127170.java!!!	XMLSecurityManager(inout secureProcessing : boolean)
        values = new int[Limit.values().length];
        states = new State[Limit.values().length];
        isSet = new boolean[Limit.values().length];
        this.secureProcessing = secureProcessing;
        for (Limit limit : Limit.values()) {
            if (secureProcessing) {
                values[limit.ordinal()] = limit.secureValue;
                states[limit.ordinal()] = State.FSP;
            } else {
                values[limit.ordinal()] = limit.defaultValue();
                states[limit.ordinal()] = State.DEFAULT;
            }
        }
        //read system properties or jaxp.properties
        readSystemProperties();
!!!5127298.java!!!	setSecureProcessing(inout secure : boolean) : void
        secureProcessing = secure;
        for (Limit limit : Limit.values()) {
            if (secure) {
                setLimit(limit.ordinal(), State.FSP, limit.secureValue());
            } else {
                setLimit(limit.ordinal(), State.FSP, limit.defaultValue());
            }
        }
!!!5127426.java!!!	isSecureProcessing() : boolean
        return secureProcessing;
!!!5127554.java!!!	setLimit(inout propertyName : String, inout state : XMLSecurityManager::State, inout value : Object) : boolean
        int index = getIndex(propertyName);
        if (index > -1) {
            setLimit(index, state, value);
            return true;
        }
        return false;
!!!5127682.java!!!	setLimit(inout limit : XMLSecurityManager::Limit, inout state : XMLSecurityManager::State, in value : int) : void
        setLimit(limit.ordinal(), state, value);
!!!5127810.java!!!	setLimit(in index : int, inout state : XMLSecurityManager::State, inout value : Object) : void
        if (index == indexEntityCountInfo) {
            printEntityCountInfo = (String)value;
        } else {
            int temp;
            if (Integer.class.isAssignableFrom(value.getClass())) {
                temp = ((Integer)value).intValue();
            } else {
                temp = Integer.parseInt((String) value);
                if (temp < 0) {
                    temp = 0;
                }
            }
            setLimit(index, state, temp);
        }
!!!5127938.java!!!	setLimit(in index : int, inout state : XMLSecurityManager::State, in value : int) : void
        if (index == indexEntityCountInfo) {
            //if it's explicitly set, it's treated as yes no matter the value
            printEntityCountInfo = Constants.JDK_YES;
        } else {
            //only update if it shall override
            if (state.compareTo(states[index]) >= 0) {
                values[index] = value;
                states[index] = state;
                isSet[index] = true;
            }
        }
!!!5128066.java!!!	getLimitAsString(inout propertyName : String) : String
        int index = getIndex(propertyName);
        if (index > -1) {
            return getLimitValueByIndex(index);
        }

        return null;
!!!5128194.java!!!	getLimit(inout limit : XMLSecurityManager::Limit) : int
        return values[limit.ordinal()];
!!!5128322.java!!!	getLimitValueAsString(inout limit : XMLSecurityManager::Limit) : String
        return Integer.toString(values[limit.ordinal()]);
!!!5128450.java!!!	getLimitValueByIndex(in index : int) : String
        if (index == indexEntityCountInfo) {
            return printEntityCountInfo;
        }

        return Integer.toString(values[index]);
!!!5128578.java!!!	getState(inout limit : XMLSecurityManager::Limit) : XMLSecurityManager::State
        return states[limit.ordinal()];
!!!5128706.java!!!	getStateLiteral(inout limit : XMLSecurityManager::Limit) : String
        return states[limit.ordinal()].literal();
!!!5128834.java!!!	getIndex(inout propertyName : String) : int
        for (Limit limit : Limit.values()) {
            if (limit.equalsAPIPropertyName(propertyName)) {
                //internally, ordinal is used as index
                return limit.ordinal();
            }
        }
        //special property to return entity count info
        if (propertyName.equals(Constants.JDK_ENTITY_COUNT_INFO)) {
            return indexEntityCountInfo;
        }
        return -1;
!!!5128962.java!!!	isNoLimit(in limit : int) : boolean
        return limit==NO_LIMIT;
!!!5129090.java!!!	isOverLimit(inout limit : XMLSecurityManager::Limit, inout entityName : String, in size : int, inout limitAnalyzer : XMLLimitAnalyzer) : boolean
        return isOverLimit(limit.ordinal(), entityName, size, limitAnalyzer);
!!!5129218.java!!!	isOverLimit(in index : int, inout entityName : String, in size : int, inout limitAnalyzer : XMLLimitAnalyzer) : boolean
        if (values[index] == NO_LIMIT) {
            return false;
        }
        if (size > values[index]) {
            limitAnalyzer.addValue(index, entityName, size);
            return true;
        }
        return false;
!!!5129346.java!!!	isOverLimit(inout limit : XMLSecurityManager::Limit, inout limitAnalyzer : XMLLimitAnalyzer) : boolean
        return isOverLimit(limit.ordinal(), limitAnalyzer);
!!!5129474.java!!!	isOverLimit(in index : int, inout limitAnalyzer : XMLLimitAnalyzer) : boolean
        if (values[index] == NO_LIMIT) {
            return false;
        }

        if (index == Limit.ELEMENT_ATTRIBUTE_LIMIT.ordinal() ||
                index == Limit.ENTITY_EXPANSION_LIMIT.ordinal() ||
                index == Limit.TOTAL_ENTITY_SIZE_LIMIT.ordinal() ||
                index == Limit.ENTITY_REPLACEMENT_LIMIT.ordinal() ||
                index == Limit.MAX_ELEMENT_DEPTH_LIMIT.ordinal() ||
                index == Limit.MAX_NAME_LIMIT.ordinal()
                ) {
            return (limitAnalyzer.getTotalValue(index) > values[index]);
        } else {
            return (limitAnalyzer.getValue(index) > values[index]);
        }
!!!5129602.java!!!	debugPrint(inout limitAnalyzer : XMLLimitAnalyzer) : void
        if (printEntityCountInfo.equals(Constants.JDK_YES)) {
            limitAnalyzer.debugPrint(this);
        }
!!!5129730.java!!!	isSet(in index : int) : boolean
        return isSet[index];
!!!5129858.java!!!	printEntityCountInfo() : boolean
        return printEntityCountInfo.equals(Constants.JDK_YES);
!!!5129986.java!!!	readSystemProperties() : void

        for (Limit limit : Limit.values()) {
            if (!getSystemProperty(limit, limit.systemProperty())) {
                //if system property is not found, try the older form if any
                for (NameMap nameMap : NameMap.values()) {
                    String oldName = nameMap.getOldName(limit.systemProperty());
                    if (oldName != null) {
                        getSystemProperty(limit, oldName);
                    }
                }
            }
        }

!!!5130114.java!!!	printWarning(inout parserClassName : String, inout propertyName : String, inout exception : SAXException) : void
        String key = parserClassName+":"+propertyName;
        if (printedWarnings.addIfAbsent(key)) {
            System.err.println( "Warning: "+parserClassName+": "+exception.getMessage());
        }
!!!5130242.java!!!	getSystemProperty(inout limit : XMLSecurityManager::Limit, inout sysPropertyName : String) : boolean
        try {
            String value = SecuritySupport.getSystemProperty(sysPropertyName);
            if (value != null && !value.equals("")) {
                values[limit.ordinal()] = Integer.parseInt(value);
                states[limit.ordinal()] = State.SYSTEMPROPERTY;
                return true;
            }

            value = SecuritySupport.readJAXPProperty(sysPropertyName);
            if (value != null && !value.equals("")) {
                values[limit.ordinal()] = Integer.parseInt(value);
                states[limit.ordinal()] = State.JAXPDOTPROPERTIES;
                return true;
            }
        } catch (NumberFormatException e) {
            //invalid setting
            throw new NumberFormatException("Invalid setting for system property: " + limit.systemProperty());
        }
        return false;
!!!5130370.java!!!	convert(inout value : Object, inout securityManager : XMLSecurityManager) : XMLSecurityManager
        if (value == null) {
            if (securityManager == null) {
                securityManager = new XMLSecurityManager(true);
            }
            return securityManager;
        }
        if (XMLSecurityManager.class.isAssignableFrom(value.getClass())) {
            return (XMLSecurityManager)value;
        } else {
            if (securityManager == null) {
                securityManager = new XMLSecurityManager(true);
            }
            if (SecurityManager.class.isAssignableFrom(value.getClass())) {
                SecurityManager origSM = (SecurityManager)value;
                securityManager.setLimit(Limit.MAX_OCCUR_NODE_LIMIT, State.APIPROPERTY, origSM.getMaxOccurNodeLimit());
                securityManager.setLimit(Limit.ENTITY_EXPANSION_LIMIT, State.APIPROPERTY, origSM.getEntityExpansionLimit());
                securityManager.setLimit(Limit.ELEMENT_ATTRIBUTE_LIMIT, State.APIPROPERTY, origSM.getElementAttrLimit());
            }
            return securityManager;
        }
