class CharacterData02
!!!6972162.java!!!	getProperties(in ch : int) : int
	char offset = (char)ch;
        int props = A[Y[X[offset>>5]|((offset>>1)&0xF)]|(offset&0x1)];
        return props;
!!!6972290.java!!!	getPropertiesEx(in ch : int) : int
        char offset = (char)ch;
        int props = B[Y[X[offset>>5]|((offset>>1)&0xF)]|(offset&0x1)];
        return props;
!!!6972418.java!!!	isOtherLowercase(in ch : int) : boolean
        int props = getPropertiesEx(ch);
        return (props & 0x0001) != 0;
!!!6972546.java!!!	isOtherUppercase(in ch : int) : boolean
        int props = getPropertiesEx(ch);
        return (props & 0x0002) != 0;
!!!6972674.java!!!	isOtherAlphabetic(in ch : int) : boolean
        int props = getPropertiesEx(ch);
        return (props & 0x0004) != 0;
!!!6972802.java!!!	isIdeographic(in ch : int) : boolean
        int props = getPropertiesEx(ch);
        return (props & 0x0010) != 0;
!!!6972930.java!!!	getType(in ch : int) : int
        int props = getProperties(ch);
        return (props & 0x1F);
!!!6973058.java!!!	isJavaIdentifierStart(in ch : int) : boolean
        int props = getProperties(ch);
        return ((props & 0x00007000) >= 0x00005000);
!!!6973186.java!!!	isJavaIdentifierPart(in ch : int) : boolean
        int props = getProperties(ch);
        return ((props & 0x00003000) != 0);
!!!6973314.java!!!	isUnicodeIdentifierStart(in ch : int) : boolean
        int props = getProperties(ch);
        return ((props & 0x00007000) == 0x00007000);
!!!6973442.java!!!	isUnicodeIdentifierPart(in ch : int) : boolean
        int props = getProperties(ch);
        return ((props & 0x00001000) != 0);
!!!6973570.java!!!	isIdentifierIgnorable(in ch : int) : boolean
        int props = getProperties(ch);
        return ((props & 0x00007000) == 0x00001000);
!!!6973698.java!!!	toLowerCase(in ch : int) : int
        int mapChar = ch;
        int val = getProperties(ch);

        if ((val & 0x00020000) != 0) {
            int offset = val << 5 >> (5+18);
            mapChar = ch + offset;
        }
        return mapChar;
!!!6973826.java!!!	toUpperCase(in ch : int) : int
        int mapChar = ch;
        int val = getProperties(ch);

        if ((val & 0x00010000) != 0) {
            int offset = val  << 5 >> (5+18);
            mapChar =  ch - offset;
        }
        return mapChar;
!!!6973954.java!!!	toTitleCase(in ch : int) : int
        int mapChar = ch;
        int val = getProperties(ch);

        if ((val & 0x00008000) != 0) {
            // There is a titlecase equivalent.  Perform further checks:
            if ((val & 0x00010000) == 0) {
                // The character does not have an uppercase equivalent, so it must
                // already be uppercase; so add 1 to get the titlecase form.
                mapChar = ch + 1;
            }
            else if ((val & 0x00020000) == 0) {
                // The character does not have a lowercase equivalent, so it must
                // already be lowercase; so subtract 1 to get the titlecase form.
                mapChar = ch - 1;
            }
            // else {
            // The character has both an uppercase equivalent and a lowercase
            // equivalent, so it must itself be a titlecase form; return it.
            // return ch;
            //}
        }
        else if ((val & 0x00010000) != 0) {
            // This character has no titlecase equivalent but it does have an
            // uppercase equivalent, so use that (subtract the signed case offset).
            mapChar = toUpperCase(ch);
        }
        return mapChar;
!!!6974082.java!!!	digit(in ch : int, in radix : int) : int
        int value = -1;
        if (radix >= Character.MIN_RADIX && radix <= Character.MAX_RADIX) {
            int val = getProperties(ch);
            int kind = val & 0x1F;
            if (kind == Character.DECIMAL_DIGIT_NUMBER) {
                value = ch + ((val & 0x3E0) >> 5) & 0x1F;
            }
            else if ((val & 0xC00) == 0x00000C00) {
                // Java supradecimal digit
                value = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
            }
        }
        return (value < radix) ? value : -1;
!!!6974210.java!!!	getNumericValue(in ch : int) : int
        int val = getProperties(ch);
        int retval = -1;

        switch (val & 0xC00) {
        default: // cannot occur
        case (0x00000000):         // not numeric
            retval = -1;
            break;
        case (0x00000400):              // simple numeric
            retval = ch + ((val & 0x3E0) >> 5) & 0x1F;
            break;
        case (0x00000800)      :       // "strange" numeric
            retval = -2;
            break;
        case (0x00000C00):           // Java supradecimal
            retval = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
            break;
        }
        return retval;
!!!6974338.java!!!	isWhitespace(in ch : int) : boolean
        return (getProperties(ch) & 0x00007000) == 0x00004000;
!!!6974466.java!!!	getDirectionality(in ch : int) : byte
        int val = getProperties(ch);
        byte directionality = (byte)((val & 0x78000000) >> 27);
        if (directionality == 0xF ) {
	        directionality = Character.DIRECTIONALITY_UNDEFINED;
        }
        return directionality;
!!!6974594.java!!!	isMirrored(in ch : int) : boolean
        return (getProperties(ch) & 0x80000000) != 0;
