class RegularEnumSet
!!!8881026.java!!!	RegularEnumSet(inout elementType : Class, inout universe : Enum [[]])
        super(elementType, universe);
!!!8881154.java!!!	addRange(inout from : E, inout to : E) : void
        elements = (-1L >>>  (from.ordinal() - to.ordinal() - 1)) << from.ordinal();
!!!8881282.java!!!	addAll() : void
        if (universe.length != 0)
            elements = -1L >>> -universe.length;
!!!8881410.java!!!	complement() : void
        if (universe.length != 0) {
            elements = ~elements;
            elements &= -1L >>> -universe.length;  // Mask unused bits
        }
!!!8881538.java!!!	iterator() : Iterator
        return new EnumSetIterator<>();
!!!8882178.java!!!	size() : int
        return Long.bitCount(elements);
!!!8882306.java!!!	isEmpty() : boolean
        return elements == 0;
!!!8882434.java!!!	contains(inout e : Object) : boolean
        if (e == null)
            return false;
        Class<?> eClass = e.getClass();
        if (eClass != elementType && eClass.getSuperclass() != elementType)
            return false;

        return (elements & (1L << ((Enum<?>)e).ordinal())) != 0;
!!!8882562.java!!!	add(inout e : E) : boolean
        typeCheck(e);

        long oldElements = elements;
        elements |= (1L << ((Enum<?>)e).ordinal());
        return elements != oldElements;
!!!8882690.java!!!	remove(inout e : Object) : boolean
        if (e == null)
            return false;
        Class<?> eClass = e.getClass();
        if (eClass != elementType && eClass.getSuperclass() != elementType)
            return false;

        long oldElements = elements;
        elements &= ~(1L << ((Enum<?>)e).ordinal());
        return elements != oldElements;
!!!8882818.java!!!	containsAll(inout c : Collection) : boolean
        if (!(c instanceof RegularEnumSet))
            return super.containsAll(c);

        RegularEnumSet<?> es = (RegularEnumSet<?>)c;
        if (es.elementType != elementType)
            return es.isEmpty();

        return (es.elements & ~elements) == 0;
!!!8882946.java!!!	addAll(inout c : Collection) : boolean
        if (!(c instanceof RegularEnumSet))
            return super.addAll(c);

        RegularEnumSet<?> es = (RegularEnumSet<?>)c;
        if (es.elementType != elementType) {
            if (es.isEmpty())
                return false;
            else
                throw new ClassCastException(
                    es.elementType + " != " + elementType);
        }

        long oldElements = elements;
        elements |= es.elements;
        return elements != oldElements;
!!!8883074.java!!!	removeAll(inout c : Collection) : boolean
        if (!(c instanceof RegularEnumSet))
            return super.removeAll(c);

        RegularEnumSet<?> es = (RegularEnumSet<?>)c;
        if (es.elementType != elementType)
            return false;

        long oldElements = elements;
        elements &= ~es.elements;
        return elements != oldElements;
!!!8883202.java!!!	retainAll(inout c : Collection) : boolean
        if (!(c instanceof RegularEnumSet))
            return super.retainAll(c);

        RegularEnumSet<?> es = (RegularEnumSet<?>)c;
        if (es.elementType != elementType) {
            boolean changed = (elements != 0);
            elements = 0;
            return changed;
        }

        long oldElements = elements;
        elements &= es.elements;
        return elements != oldElements;
!!!8883330.java!!!	clear() : void
        elements = 0;
!!!8883458.java!!!	equals(inout o : Object) : boolean
        if (!(o instanceof RegularEnumSet))
            return super.equals(o);

        RegularEnumSet<?> es = (RegularEnumSet<?>)o;
        if (es.elementType != elementType)
            return elements == 0 && es.elements == 0;
        return es.elements == elements;
