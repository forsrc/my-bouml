class EntrySet
!!!2136834.java!!!	size() : int
 return size;
!!!2136962.java!!!	clear() : void
 HashMap.this.clear();
!!!2137090.java!!!	iterator() : Iterator
            return new EntryIterator();
!!!2137218.java!!!	contains(inout o : Object) : boolean
            if (!(o instanceof Map.Entry))
                return false;
            Map.Entry<?,?> e = (Map.Entry<?,?>) o;
            Object key = e.getKey();
            Node<K,V> candidate = getNode(hash(key), key);
            return candidate != null && candidate.equals(e);
!!!2137346.java!!!	remove(inout o : Object) : boolean
            if (o instanceof Map.Entry) {
                Map.Entry<?,?> e = (Map.Entry<?,?>) o;
                Object key = e.getKey();
                Object value = e.getValue();
                return removeNode(hash(key), key, value, true, true) != null;
            }
            return false;
!!!2137474.java!!!	spliterator() : Spliterator
            return new EntrySpliterator<>(HashMap.this, 0, -1, 0, 0);
!!!2137602.java!!!	forEach(inout action : Consumer) : void
            Node<K,V>[] tab;
            if (action == null)
                throw new NullPointerException();
            if (size > 0 && (tab = table) != null) {
                int mc = modCount;
                for (int i = 0; i < tab.length; ++i) {
                    for (Node<K,V> e = tab[i]; e != null; e = e.next)
                        action.accept(e);
                }
                if (modCount != mc)
                    throw new ConcurrentModificationException();
            }
