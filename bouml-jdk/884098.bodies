class MimeType
!!!6397186.java!!!	MimeType(inout rawdata : String)
        parse(rawdata);
!!!6397314.java!!!	MimeType(inout primary : String, inout sub : String)
        this(primary, sub, new MimeTypeParameterList());
!!!6397442.java!!!	MimeType(inout primary : String, inout sub : String, inout mtpl : MimeTypeParameterList)
        //    check to see if primary is valid
        if(isValidToken(primary)) {
            primaryType = primary.toLowerCase(Locale.ENGLISH);
        } else {
            throw new MimeTypeParseException("Primary type is invalid.");
        }

        //    check to see if sub is valid
        if(isValidToken(sub)) {
            subType = sub.toLowerCase(Locale.ENGLISH);
        } else {
            throw new MimeTypeParseException("Sub type is invalid.");
        }

        parameters = (MimeTypeParameterList)mtpl.clone();
!!!6397570.java!!!	hashCode() : int

        // We sum up the hash codes for all of the strings. This
        // way, the order of the strings is irrelevant
        int code = 0;
        code += primaryType.hashCode();
        code += subType.hashCode();
        code += parameters.hashCode();
        return code;
!!!6397698.java!!!	equals(inout thatObject : Object) : boolean
        if (!(thatObject instanceof MimeType)) {
            return false;
        }
        MimeType that = (MimeType)thatObject;
        boolean isIt =
            ((this.primaryType.equals(that.primaryType)) &&
             (this.subType.equals(that.subType)) &&
             (this.parameters.equals(that.parameters)));
        return isIt;
!!!6397826.java!!!	parse(inout rawdata : String) : void
        int slashIndex = rawdata.indexOf('/');
        int semIndex = rawdata.indexOf(';');
        if((slashIndex < 0) && (semIndex < 0)) {
            //    neither character is present, so treat it
            //    as an error
            throw new MimeTypeParseException("Unable to find a sub type.");
        } else if((slashIndex < 0) && (semIndex >= 0)) {
            //    we have a ';' (and therefore a parameter list),
            //    but no '/' indicating a sub type is present
            throw new MimeTypeParseException("Unable to find a sub type.");
        } else if((slashIndex >= 0) && (semIndex < 0)) {
            //    we have a primary and sub type but no parameter list
            primaryType = rawdata.substring(0,slashIndex).
                trim().toLowerCase(Locale.ENGLISH);
            subType = rawdata.substring(slashIndex + 1).
                trim().toLowerCase(Locale.ENGLISH);
            parameters = new MimeTypeParameterList();
        } else if (slashIndex < semIndex) {
            //    we have all three items in the proper sequence
            primaryType = rawdata.substring(0, slashIndex).
                trim().toLowerCase(Locale.ENGLISH);
            subType = rawdata.substring(slashIndex + 1,
                semIndex).trim().toLowerCase(Locale.ENGLISH);
            parameters = new
MimeTypeParameterList(rawdata.substring(semIndex));
        } else {
            //    we have a ';' lexically before a '/' which means we have a primary type
            //    & a parameter list but no sub type
            throw new MimeTypeParseException("Unable to find a sub type.");
        }

        //    now validate the primary and sub types

        //    check to see if primary is valid
        if(!isValidToken(primaryType)) {
            throw new MimeTypeParseException("Primary type is invalid.");
        }

        //    check to see if sub is valid
        if(!isValidToken(subType)) {
            throw new MimeTypeParseException("Sub type is invalid.");
        }
!!!6397954.java!!!	getPrimaryType() : String
        return primaryType;
!!!6398082.java!!!	getSubType() : String
        return subType;
!!!6398210.java!!!	getParameters() : MimeTypeParameterList
        return (MimeTypeParameterList)parameters.clone();
!!!6398338.java!!!	getParameter(inout name : String) : String
        return parameters.get(name);
!!!6398466.java!!!	setParameter(inout name : String, inout value : String) : void
        parameters.set(name, value);
!!!6398594.java!!!	removeParameter(inout name : String) : void
        parameters.remove(name);
!!!6398722.java!!!	toString() : String
        return getBaseType() + parameters.toString();
!!!6398850.java!!!	getBaseType() : String
        return primaryType + "/" + subType;
!!!6398978.java!!!	match(inout type : MimeType) : boolean
        if (type == null)
            return false;
        return primaryType.equals(type.getPrimaryType())
                    && (subType.equals("*")
                            || type.getSubType().equals("*")
                            || (subType.equals(type.getSubType())));
!!!6399106.java!!!	match(inout rawdata : String) : boolean
        if (rawdata == null)
            return false;
        return match(new MimeType(rawdata));
!!!6399234.java!!!	writeExternal(inout out : ObjectOutput) : void
        String s = toString(); // contains ASCII chars only
        // one-to-one correspondence between ASCII char and byte in UTF string
        if (s.length() <= 65535) { // 65535 is max length of UTF string
            out.writeUTF(s);
        } else {
            out.writeByte(0);
            out.writeByte(0);
            out.writeInt(s.length());
            out.write(s.getBytes());
        }
!!!6399362.java!!!	readExternal(inout in : ObjectInput) : void
        String s = in.readUTF();
        if (s == null || s.length() == 0) { // long mime type
            byte[] ba = new byte[in.readInt()];
            in.readFully(ba);
            s = new String(ba);
        }
        try {
            parse(s);
        } catch(MimeTypeParseException e) {
            throw new IOException(e.toString());
        }
!!!6399490.java!!!	clone() : Object
        MimeType newObj = null;
        try {
            newObj = (MimeType)super.clone();
        } catch (CloneNotSupportedException cannotHappen) {
        }
        newObj.parameters = (MimeTypeParameterList)parameters.clone();
        return newObj;
!!!6399618.java!!!	isTokenChar(in c : char) : boolean
        return ((c > 040) && (c < 0177)) && (TSPECIALS.indexOf(c) < 0);
!!!6399746.java!!!	isValidToken(inout s : String) : boolean
        int len = s.length();
        if(len > 0) {
            for (int i = 0; i < len; ++i) {
                char c = s.charAt(i);
                if (!isTokenChar(c)) {
                    return false;
                }
            }
            return true;
        } else {
            return false;
        }
