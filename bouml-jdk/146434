format 222
"jpeg" // jdk1.8::com::sun::image::codec::jpeg
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/image/codec/jpeg/"
  java_package "com.sun.image.codec.jpeg"
  classview 143234 "jpeg"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 310786 "ImageFormatException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that an Image Format exception of some sort has occurred.
<p>
Note that the classes in the com.sun.image.codec.jpeg package are not
part of the core Java APIs.  They are a part of Sun's JDK and JRE
distributions.  Although other licensees may choose to distribute these
classes, developers cannot depend on their availability in non-Sun
implementations.  We expect that equivalent functionality will eventually
be available in a core API or standard extension.
<p>

@author  Tom Sausner
@see     JPEGImageEncoder
@see     JPEGImageDecoder
@since   1.2
"
      classrelation 520450 // <generalisation>
	relation 520450 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 520450 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      operation 1655938 "ImageFormatException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ImageFormatException</code> with no detail message.
"
      end

      operation 1656066 "ImageFormatException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ImageFormatException</code> with the specified
detailed message.

@param   s   the message.
"
      end
    end

    class 310914 "JPEGCodec"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is a factory for implementations of the JPEG Image
Decoder/Encoder.
<p>
Note that the classes in the com.sun.image.codec.jpeg package are not
part of the core Java APIs.  They are a part of Sun's JDK and JRE
distributions.  Although other licensees may choose to distribute these
classes, developers cannot depend on their availability in non-Sun
implementations.  We expect that equivalent functionality will eventually
be available in a core API or standard extension.
<p>

@see JPEGImageDecoder
@see JPEGImageEncoder
"
      operation 1656194 "JPEGCodec"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1656322 "createJPEGDecoder"
	class_operation public return_type class_ref 311042 // JPEGImageDecoder
	nparams 1
	  param inout name "src" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This creates an instance of a JPEGImageDecoder that can be used
to decode JPEG Data streams.
"
      end

      operation 1656450 "createJPEGDecoder"
	class_operation public return_type class_ref 311042 // JPEGImageDecoder
	nparams 2
	  param inout name "src" type class_ref 146434 // InputStream
	  param inout name "jdp" type class_ref 311170 // JPEGDecodeParam
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This creates an instance of a JPEGImageDecoder that can be used
to decode JPEG Data streams.
"
      end

      operation 1656578 "createJPEGEncoder"
	class_operation public return_type class_ref 311298 // JPEGImageEncoder
	nparams 1
	  param inout name "dest" type class_ref 151298 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This creates an instance of a JPEGImageEncoder that can be used
to encode image data as JPEG Data streams.
"
      end

      operation 1656706 "createJPEGEncoder"
	class_operation public return_type class_ref 311298 // JPEGImageEncoder
	nparams 2
	  param inout name "dest" type class_ref 151298 // OutputStream
	  param inout name "jep" type class_ref 311426 // JPEGEncodeParam
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This creates an instance of a JPEGImageEncoder that can be used
to encode image data as JPEG Data streams.
"
      end

      operation 1656834 "getDefaultJPEGEncodeParam"
	class_operation public return_type class_ref 311426 // JPEGEncodeParam
	nparams 1
	  param inout name "bi" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a factory method for creating JPEGEncodeParam objects.
The returned object should do a credible job of encoding the
given BufferedImage.
@param bi A BufferedImage that is similar to the BufferedImage(s)
that will encoded using the returned JPEGEncodeParam object.
"
      end

      operation 1656962 "getDefaultJPEGEncodeParam"
	class_operation public return_type class_ref 311426 // JPEGEncodeParam
	nparams 2
	  param inout name "ras" type class_ref 311682 // Raster
	  param in name "colorID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a factory method for creating JPEGEncodeParam objects.
It is the users responsiblity to match the colorID with the
data contained in the Raster.  Failure to do so may lead to
either poor compression or poor image quality.  If you don't
understand much about JPEG it is strongly recommended that you
stick to the BufferedImage interface.
@param ras Raster that is similar to those to be encoded later.
@param colorID the COLOR_ID for the encoded data.  This should
       match the data in the raster.
"
      end

      operation 1657090 "getDefaultJPEGEncodeParam"
	class_operation public return_type class_ref 311426 // JPEGEncodeParam
	nparams 2
	  param in name "numBands" explicit_type "int"
	  param in name "colorID" explicit_type "int"
	nexceptions 1
	  exception class_ref 310786 // ImageFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a factory method for creating JPEGEncodeParam objects.  It
is the users responsiblity to match the colorID with the given
number of bands, which should match the data being encoded.
Failure to do so may lead to poor compression and/or poor image
quality.  If you don't understand much about JPEG it is strongly
recommended that you stick to the BufferedImage interface.

This can also be used as a factory for a JPEGDecodeParam object.
However this usage is extremely rare, as one needs to be decoding
abbreviated JPEG streams where the JPEG tables are coming from
some source other than a JPEG tables only stream.

@param numBands the number of bands that will be encoded (max of four).
@param colorID the COLOR_ID for the encoded data.  This is used to
set reasonable defaults in the parameter object.  This must match
the number of bands given.
"
      end

      operation 1657218 "getDefaultJPEGEncodeParam"
	class_operation public return_type class_ref 311426 // JPEGEncodeParam
	nparams 1
	  param inout name "jdp" type class_ref 311170 // JPEGDecodeParam
	nexceptions 1
	  exception class_ref 310786 // ImageFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a factory method for creating a JPEGEncodeParam from a
JPEGDecodeParam.  This will return a new JPEGEncodeParam object
that is initialized from the JPEGDecodeParam object.  All major
pieces of information will be initialized from the DecodeParam
(Markers, Tables, mappings).
@param jdp The JPEGDecodeParam object to copy.
"
      end
    end

    class 311042 "JPEGImageDecoder"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface describes a JPEG data stream decoder.  This decoder
takes an InputStream that contains JPEG encoded image data.  The
JPEGImageDecoder will decode the JPEG image data according to the
parameters set in a JPEGDecodeParam object.  The resulting image
data is returned in either a Raster or a BufferedImage.
<p>
Note that the classes in the com.sun.image.codec.jpeg package are not
part of the core Java APIs.  They are a part of Sun's JDK and JRE
distributions.  Although other licensees may choose to distribute these
classes, developers cannot depend on their availability in non-Sun
implementations.  We expect that equivalent functionality will eventually
be available in a core API or standard extension.
<p>

@see JPEGCodec
@see JPEGDecodeParam
@see Raster
@see BufferedImage
"
      operation 1663362 "getJPEGDecodeParam"
	public return_type class_ref 311170 // JPEGDecodeParam
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the JPEGDecodeParam object that resulted from the most
recent decoding event.
"
      end

      operation 1663490 "setJPEGDecodeParam"
	public explicit_return_type "void"
	nparams 1
	  param inout name "jdp" type class_ref 311170 // JPEGDecodeParam
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the JPEGDecodeParam object used to determine the features
of the decompression performed on the JPEG encoded data.  This
is ussually only needed for decoding abbreviated JPEG data
streams.
@param jdp JPEGDecodeParam object
"
      end

      operation 1663618 "getInputStream"
	public return_type class_ref 146434 // InputStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the input stream that decoding will occur from.
@return The stream that the decoder is currently assciated with.
"
      end

      operation 1663746 "decodeAsRaster"
	public return_type class_ref 311682 // Raster
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 310786 // ImageFormatException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decode the JPEG stream that was passed as part of
construction.  The JPEG decompression will be performed
according to the current settings of the JPEGDecodeParam
object.  For a tables only stream this will return null.
@return Raster containg the image data.  Colorspace and other
        pertinent information can be obtained from the
        JPEGDecodeParam object.
@exception ImageFormatException if irregularities in the JPEG
           stream or an unknown condition is encountered.
"
      end

      operation 1663874 "decodeAsBufferedImage"
	public return_type class_ref 311554 // BufferedImage
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 310786 // ImageFormatException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes the current JPEG data stream.  The result of decoding
this InputStream is a BufferedImage the ColorModel associated
with this BufferedImage is determined based on the encoded
COLOR_ID of the JPEGDecodeParam object.  For a tables only
stream this will return null.
@return BufferedImage containing the image data.
@exception ImageFormatException if irregularities in the JPEG
           stream or an unknown condition is encountered.
"
      end
    end

    class 311170 "JPEGDecodeParam"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
JPEGDecodeParam encapsulates tables and options necessary to
control decoding JPEG datastreams. Parameters are either set explicitly
by the application for encoding, or read from the JPEG header for
decoding.  In the case of decoding abbreviated data streams the
application may need to set some/all of the values it's self.  <p>

When working with BufferedImages ({@link
com.sun.image.codec.jpeg.JPEGImageDecoder#decodeAsBufferedImage}),
the codec will attempt to
generate an appropriate ColorModel for the JPEG COLOR_ID. This is
not always possible (example mappings are listed below) .  In cases
where unsupported conversions are required, or unknown encoded
COLOR_ID's are in use, the user must request the data as a Raster
and perform the transformations themselves.  When decoding into a
raster ({@link com.sun.image.codec.jpeg.JPEGImageDecoder#decodeAsRaster})
no ColorSpace adjustments are made.

Note: The color ids described herein are simply enumerated values
that influence data processing by the JPEG codec.  JPEG compression
is by definition color blind.  These values are used as hints when
decompressing JPEG data.  Of particular interest is the default
conversion from YCbCr to sRGB when decoding buffered Images.<P>

Note: because JPEG is mostly color-blind color fidelity can not be
garunteed.  This will hopefully be rectified in the near future by
the wide spread inclusion of ICC-profiles in the JPEG data stream
(as a special marker).

The following is an example of the conversions that take place.
This is only a guide to the types of conversions that are allowed.
This list is likely to change in the future so it is
<B>strongly</B> recommended that you check for thrown
ImageFormatExceptions and check the actual ColorModel associated
with the BufferedImage returned rather than make assumtions.
<pre>
DECODING:

JPEG (Encoded) Color ID         BufferedImage ColorSpace
=======================         ========================
COLOR_ID_UNKNOWN                ** Invalid **
COLOR_ID_GRAY                   CS_GRAY
COLOR_ID_RGB                    CS_sRGB
COLOR_ID_YCbCr                  CS_sRGB
COLOR_ID_CMYK                   ** Invalid **
COLOR_ID_PYCC                   CS_PYCC
COLOR_ID_RGBA                   CS_sRGB (w/ alpha)
COLOR_ID_YCbCrA                 CS_sRGB (w/ alpha)
COLOR_ID_RGBA_INVERTED          ** Invalid **
COLOR_ID_YCbCrA_INVERTED        ** Invalid **
COLOR_ID_PYCCA                  CS_PYCC (w/ alpha)
COLOR_ID_YCCK                   ** Invalid **
</pre>

If the user needs better control over conversion, the user must
request the data as a Raster and handle the conversion of the image
data themselves.<p>

When decoding JFIF files the encoded COLOR_ID will always be one
of: COLOR_ID_UNKNOWN, COLOR_ID_GRAY, COLOR_ID_RGB, COLOR_ID_YCbCr,
COLOR_ID_CMYK, or COLOR_ID_YCCK
<p>
Note that the classes in the com.sun.image.codec.jpeg package are not
part of the core Java APIs.  They are a part of Sun's JDK and JRE
distributions.  Although other licensees may choose to distribute these
classes, developers cannot depend on their availability in non-Sun
implementations.  We expect that equivalent functionality will eventually
be available in a core API or standard extension.
<p>
"
      classrelation 520578 // <generalisation>
	relation 520578 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 520578 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 346626 "COLOR_ID_UNKNOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unknown or Undefined Color ID 
"
      end

      attribute 346754 "COLOR_ID_GRAY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Monochrome 
"
      end

      attribute 346882 "COLOR_ID_RGB"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Red, Green, and Blue 
"
      end

      attribute 347010 "COLOR_ID_YCbCr"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " YCbCr 
"
      end

      attribute 347138 "COLOR_ID_CMYK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " CMYK 
"
      end

      attribute 347266 "COLOR_ID_PYCC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " PhotoYCC 
"
      end

      attribute 347394 "COLOR_ID_RGBA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " RGB-Alpha 
"
      end

      attribute 347522 "COLOR_ID_YCbCrA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " YCbCr-Alpha 
"
      end

      attribute 347650 "COLOR_ID_RGBA_INVERTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " RGB-Alpha with R, G, and B inverted.
"
      end

      attribute 347778 "COLOR_ID_YCbCrA_INVERTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " YCbCr-Alpha with Y, Cb, and Cr inverted.
"
      end

      attribute 347906 "COLOR_ID_PYCCA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " PhotoYCC-Alpha 
"
      end

      attribute 348034 "COLOR_ID_YCCK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " YCbCrK 
"
      end

      attribute 348162 "NUM_COLOR_ID"
	class_attribute const_attribute public explicit_type "int"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of color ids defined. 
"
      end

      attribute 348290 "NUM_TABLES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of allowed Huffman and Quantization Tables 
"
      end

      attribute 348418 "DENSITY_UNIT_ASPECT_RATIO"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The X and Y units simply indicate the aspect ratio of the pixels. 
"
      end

      attribute 348546 "DENSITY_UNIT_DOTS_INCH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Pixel density is in pixels per inch. 
"
      end

      attribute 348674 "DENSITY_UNIT_DOTS_CM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Pixel density is in pixels per centemeter. 
"
      end

      attribute 348802 "NUM_DENSITY_UNIT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The max known value for DENSITY_UNIT 
"
      end

      attribute 348930 "APP0_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APP0 marker - JFIF info 
"
      end

      attribute 349058 "APP1_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APP1 marker 
"
      end

      attribute 349186 "APP2_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APP2 marker 
"
      end

      attribute 349314 "APP3_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APP3 marker 
"
      end

      attribute 349442 "APP4_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APP4 marker 
"
      end

      attribute 349570 "APP5_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APP5 marker 
"
      end

      attribute 349698 "APP6_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APP6 marker 
"
      end

      attribute 349826 "APP7_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APP7 marker 
"
      end

      attribute 349954 "APP8_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APP8 marker 
"
      end

      attribute 350082 "APP9_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APP9 marker 
"
      end

      attribute 350210 "APPA_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xEA"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APPA marker 
"
      end

      attribute 350338 "APPB_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xEB"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APPB marker 
"
      end

      attribute 350466 "APPC_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xEC"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APPC marker 
"
      end

      attribute 350594 "APPD_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xED"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APPD marker 
"
      end

      attribute 350722 "APPE_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xEE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APPE marker - Adobe info 
"
      end

      attribute 350850 "APPF_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xEF"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " APPF marker 
"
      end

      attribute 350978 "COMMENT_MARKER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0XFE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Adobe marker indicates presence/need for Adobe marker. 
"
      end

      operation 1657346 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1657474 "getWidth"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the image width
@return int the width of the image data in pixels.
"
      end

      operation 1657602 "getHeight"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the image height
@return The height of the image data in pixels.
"
      end

      operation 1657730 "getHorizontalSubsampling"
	public explicit_return_type "int"
	nparams 1
	  param in name "component" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Horizontal subsampling factor for requested
Component.  The Subsample factor is the number of input pixels
that contribute to each output pixel.  This is distinct from
the way the JPEG to each output pixel.  This is distinct from
the way the JPEG standard defines this quantity, because
fractional subsampling factors are not allowed, and it was felt
@param component The component of the encoded image to return
the subsampling factor for.
@return The subsample factor.
"
      end

      operation 1657858 "getVerticalSubsampling"
	public explicit_return_type "int"
	nparams 1
	  param in name "component" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Vertical subsampling factor for requested
Component.  The Subsample factor is the number of input pixels
that contribute to each output pixel.  This is distinct from
the way the JPEG to each output pixel.  This is distinct from
the way the JPEG standard defines this quantity, because
fractional subsampling factors are not allowed, and it was felt
@param component The component of the encoded image to return
the subsampling factor for.
@return The subsample factor.
"
      end

      operation 1657986 "getQTable"
	public return_type class_ref 311810 // JPEGQTable
	nparams 1
	  param in name "tableNum" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coefficient quantization tables or NULL if not
defined. tableNum must range in value from 0 - 3.
@param tableNum the index of the table to be returned.
@return Quantization table stored at index tableNum.
"
      end

      operation 1658114 "getQTableForComponent"
	public return_type class_ref 311810 // JPEGQTable
	nparams 1
	  param in name "component" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Quantization table for the requested component.
@param component the image component of interest.
@return Quantization table associated with component
"
      end

      operation 1658242 "getDCHuffmanTable"
	public return_type class_ref 311938 // JPEGHuffmanTable
	nparams 1
	  param in name "tableNum" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the DC Huffman coding table requested or null if
not defined
@param tableNum the index of the table to be returned.
@return Huffman table stored at index tableNum.
"
      end

      operation 1658370 "getDCHuffmanTableForComponent"
	public return_type class_ref 311938 // JPEGHuffmanTable
	nparams 1
	  param in name "component" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the DC Huffman coding table for the requested component.
@param component the image component of interest.
@return Huffman table associated with component
"
      end

      operation 1658498 "getACHuffmanTable"
	public return_type class_ref 311938 // JPEGHuffmanTable
	nparams 1
	  param in name "tableNum" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the AC Huffman coding table requested or null if
not defined
@param tableNum the index of the table to be returned.
@return Huffman table stored at index tableNum.
"
      end

      operation 1658626 "getACHuffmanTableForComponent"
	public return_type class_ref 311938 // JPEGHuffmanTable
	nparams 1
	  param in name "component" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the AC Huffman coding table for the requested component.
@param component the image component of interest.
@return Huffman table associated with component
"
      end

      operation 1658754 "getDCHuffmanComponentMapping"
	public explicit_return_type "int"
	nparams 1
	  param in name "component" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the number of the DC Huffman table that will be used for
a particular component.
@param component The Component of interest.
@return The table number of the DC Huffman table for component.
"
      end

      operation 1658882 "getACHuffmanComponentMapping"
	public explicit_return_type "int"
	nparams 1
	  param in name "component" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the number of the AC Huffman table that will be used for
a particular component.
@param component The Component of interest.
@return The table number of the AC Huffman table for component.
"
      end

      operation 1659010 "getQTableComponentMapping"
	public explicit_return_type "int"
	nparams 1
	  param in name "component" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the number of the quantization table that will be used for
a particular component.
@param component The Component of interest.
@return The table number of the Quantization table for component.
"
      end

      operation 1659138 "isImageInfoValid"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the image information in the ParamBlock is
currently valid.  This indicates if image data was read from
the stream for decoding and weather image data should be
written when encoding.
"
      end

      operation 1659266 "isTableInfoValid"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the tables in the ParamBlock are currently
valid.  This indicates that tables were read from the stream
for decoding. When encoding this indicates wether tables should
be written to the stream.
"
      end

      operation 1659394 "getMarker"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "marker" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if at least one instance of the marker is present
in the Parameter object.  For encoding returns true if there
is at least one instance of the marker to be written.
@param marker The marker of interest.
"
      end

      operation 1659522 "getMarkerData"
	public explicit_return_type "byte"
	nparams 1
	  param in name "marker" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a 'byte[][]' associated with the requested marker in
the parameter object.  Each entry in the 'byte[][]' is the data
associated with one instance of the marker (each marker can
theoretically appear any number of times in a stream).
@param marker The marker of interest.
@return The 'byte[][]' for this marker or null if none
        available.
"
      end

      operation 1659650 "getEncodedColorID"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the JPEG Encoded color id. This is generally
speaking only used if you are decoding into Rasters.  Note
that when decoding into a Raster no color conversion is
performed.
@return The value of the JPEG encoded data's color id.
"
      end

      operation 1659778 "getNumComponents"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of components for the current encoding
COLOR_ID.
@return the number of Components
"
      end

      operation 1659906 "getRestartInterval"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the MCUs per restart marker.
@return The number of MCUs between restart markers.
"
      end

      operation 1660034 "getDensityUnit"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the code for pixel size units This value is copied from the
APP0 marker. It isn't used by the JPEG codec.  If the APP0
marker wasn't present then you can not rely on this value.
@return Value indicating the density unit one of the
DENSITY_UNIT_* constants.
"
      end

      operation 1660162 "getXDensity"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the horizontal pixel density This value is copied from the
APP0 marker. It isn't used by the JPEG code.  If the APP0
marker wasn't present then you can not rely on this value.
@return The horizontal pixel density, in units described by
@see #getDensityUnit()
"
      end

      operation 1660290 "getYDensity"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the vertical pixel density This value is copied into the
APP0 marker. It isn't used by the JPEG code. If the APP0 marker
wasn't present then you can not rely on this value.
@return The verticle pixel density, in units described by
@see #getDensityUnit()
"
      end
    end

    class 311298 "JPEGImageEncoder"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "JPEGImageEncoder encodes buffers of image data into JPEG data
streams.  Users of this interface are required to provide image data in
a Raster or a BufferedImage, set the necessary parameters in the
JPEGEncodeParams object and successfully open the
<code>OutputStream</code> that is the destination of the encoded
JPEG stream.

The JPEGImageEncoder interface can encode image data into interchange,
and abbreviated JPEG data streams that are written to the
OutputStream provided to the encoder.
<p>
Note that the classes in the com.sun.image.codec.jpeg package are not
part of the core Java APIs.  They are a part of Sun's JDK and JRE
distributions.  Although other licensees may choose to distribute these
classes, developers cannot depend on their availability in non-Sun
implementations.  We expect that equivalent functionality will eventually
be available in a core API or standard extension.
<p>

@see         JPEGCodec
@see         JPEGEncodeParam
@see         Raster
@see         BufferedImage
@see         OutputStream
"
      operation 1664002 "getOutputStream"
	public return_type class_ref 151298 // OutputStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the stream the Encoder is currenlt associated with.
"
      end

      operation 1664130 "setJPEGEncodeParam"
	public explicit_return_type "void"
	nparams 1
	  param inout name "jep" type class_ref 311426 // JPEGEncodeParam
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the JPEGEncodeParam object that is to be used for future
encoding operations. 'jep' is copied so changes will not be
tracked, unless you call this method again.
@param jep The JPEGEncodeParam object to use for future encodings.

"
      end

      operation 1664258 "getJPEGEncodeParam"
	public return_type class_ref 311426 // JPEGEncodeParam
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This returns a copy of the current JPEGEncodeParam object, if
you want changes to affect the encoding process you must 'set'
it back into the encoder (either through setJPEGEncodeParam or
by providing the modified param object in the call to encode.
@return A copy of the current JPEGEncodeParam object
"
      end

      operation 1664386 "getDefaultJPEGEncodeParam"
	public return_type class_ref 311426 // JPEGEncodeParam
	nparams 1
	  param inout name "bi" type class_ref 311554 // BufferedImage
	nexceptions 1
	  exception class_ref 310786 // ImageFormatException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a factory method for creating JPEGEncodeParam objects.
The returned object will do a credible job of encoding the
given BufferedImage.
"
      end

      operation 1664514 "encode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bi" type class_ref 311554 // BufferedImage
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 310786 // ImageFormatException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encode a BufferedImage as a JPEG data stream.  Note, some color
conversions may takes place.  The current JPEGEncodeParam's
encoded COLOR_ID should match the value returned by
getDefaultColorID when given the BufferedImage's ColorModel.<P>

If no JPEGEncodeParam object has been provided yet a default
one will be created by calling getDefaultJPEGEncodeParam with
bi.

@param bi The BufferedImage to encode.
"
      end

      operation 1664642 "encode"
	public explicit_return_type "void"
	nparams 2
	  param inout name "bi" type class_ref 311554 // BufferedImage
	  param inout name "jep" type class_ref 311426 // JPEGEncodeParam
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 310786 // ImageFormatException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encode a BufferedImage as a JPEG data stream.  Note, some color
conversions may takes place.  The jep's encoded COLOR_ID should
match the value returned by getDefaultColorID when given the
BufferedImage's ColorModel.<P>

This call also sets the current JPEGEncodeParam object.  The
given JPEGEncodeParam object will be used for this and future
encodings.  If jep is null then a new JPEGEncodeParam object
will be created by calling getDefaultJPEGEncodeParam with bi.

@param bi  The BufferedImage to encode.
@param jep The JPEGEncodeParam object used to control the encoding.
"
      end

      operation 1664770 "getDefaultColorId"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cm" type class_ref 312066 // ColorModel
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the 'default' encoded COLOR_ID for a given ColorModel.
This method is not needed in the simple case of encoding
Buffered Images (the library will figure things out for you).
It can be useful for encoding Rasters.  To determine what needs
to be done to the image prior to encoding.

@param cm The ColorModel to map to an jpeg encoded COLOR_ID.
@return The default mapping of cm to a jpeg Color_ID note that
in a few cases color conversion is required.
"
      end

      operation 1664898 "getDefaultJPEGEncodeParam"
	public return_type class_ref 311426 // JPEGEncodeParam
	nparams 2
	  param inout name "ras" type class_ref 311682 // Raster
	  param in name "colorID" explicit_type "int"
	nexceptions 1
	  exception class_ref 310786 // ImageFormatException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a factory method for creating JPEGEncodeParam objects.
It is the users responsiblity to match the colorID with the
data contained in the Raster.  Failure to do so may lead to
either poor compression or poor image quality.  If you don't
understand much about JPEG it is strongly reccomended that you
stick to the BufferedImage interfaces.
"
      end

      operation 1665026 "getDefaultJPEGEncodeParam"
	public return_type class_ref 311426 // JPEGEncodeParam
	nparams 2
	  param in name "numBands" explicit_type "int"
	  param in name "colorID" explicit_type "int"
	nexceptions 1
	  exception class_ref 310786 // ImageFormatException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a factory method for creating JPEGEncodeParam objects.  It
is the users responsiblity to match the colorID with the given
number of bands, which should match the data being encoded.
Failure to do so may lead to poor compression and/or poor image
quality.  If you don't understand much about JPEG it is strongly
recommended that you stick to the BufferedImage interface.

@param numBands the number of bands that will be encoded (max of
four).
@param colorID the COLOR_ID for the encoded data.  This is used to
set reasonable defaults in the parameter object.  This must match
the number of bands given.
"
      end

      operation 1665154 "getDefaultJPEGEncodeParam"
	public return_type class_ref 311426 // JPEGEncodeParam
	nparams 1
	  param inout name "jdp" type class_ref 311170 // JPEGDecodeParam
	nexceptions 1
	  exception class_ref 310786 // ImageFormatException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a factory method for creating a JPEGEncodeParam from a
JPEGDecodeParam.  This will return a new JPEGEncodeParam object
that is initialized from the JPEGDecodeParam object.  All major
pieces of information will be initialized from the DecodeParam
(Markers, Tables, mappings).
@param jdp The JPEGDecodeParam object to copy.
"
      end

      operation 1665282 "encode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ras" type class_ref 311682 // Raster
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 310786 // ImageFormatException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encode a Raster as a JPEG data stream.  Note that no color
conversion takes place.  It is required that you match the
Raster to the encoded COLOR_ID contained in the current
JPEGEncodeParam object.<P>

If no JPEGEncodeParam object has been provided yet a
new JPEGEncodeParam object will be created by calling
getDefaultJPEGEncodeParam with ras and COLOR_ID_UNKNOWN.

@param ras The Raster to encode.
"
      end

      operation 1665410 "encode"
	public explicit_return_type "void"
	nparams 2
	  param inout name "ras" type class_ref 311682 // Raster
	  param inout name "jep" type class_ref 311426 // JPEGEncodeParam
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 310786 // ImageFormatException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encode a Raster as a JPEG data stream.  Note that no color
conversion takes place.  It is required that you match the
Raster to the encoded COLOR_ID contained in the JPEGEncodeParam
object.

If jep is null a new JPEGEncodeParam object will be created by
calling getDefaultJPEGEncodeParam with ras and
COLOR_ID_UNKNOWN.

@param ras The Raster to encode.
@param jep The JPEGEncodeParam object used to control the encoding.
"
      end
    end

    class 311426 "JPEGEncodeParam"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "JPEGEncodeParam encapsulates tables and options necessary to
control encoding of JPEG data streams.  Parameters are either set
explicitly by the application for encoding, or read from another
JPEG header.<p>

When working with BufferedImages, the codec will attempt to match
the encoded JPEG COLOR_ID with the ColorModel in the BufferedImage.
This is not always possible (the default mappings are listed
below).  In cases where unsupported conversions are required (or
odd image colorspaces are in use) the user must either convert the
image data to a known ColorSpace or encode the data from a raster.
When encoding rasters no colorspace adjustments are made, so the
user must do any conversions required to get to the encoded
COLOR_ID.

The COLOR_ID for the encoded images is used to control the JPEG
codec's inital values for Huffman and Quantization Tables as well
as subsampling factors. It is also used to determine what color
conversion should be performed to obtain the best encoding.<p>

Note: The color ids described herein are simply enumerated values
that influence data processing by the JPEG codec.  JPEG compression
is, by definition, color blind.  These values are used as hints when
compressing JPEG data.  Through these values the JPEG codec can
perform some default rotation of data into spaces that will aid in
getting better compression ratios.<P>

Example behaviour is described below.  Since these mappings are
likely to change in the future it is strongly recommended that you
make use of the @see JPEGImageEncoder.getDefaultParamBlock calls
and check the encodedColorID for your particular BufferedImage.

In extreme cases is may be necessary for the user to convert the
image to the desired colorspace, and encode it from a Raster.  In
this case the API programmer must specify the colorID of the data
in the Raster and no color conversion will take place.
<pre>
ENCODING:

BufferedImage Type/Instance        JPEG (Encoded) Color ID
========================       =======================
TYPE_GRAY                      COLOR_ID_GRAYSCALE
TYPE_RGB                       COLOR_ID_YCbCr
TYPE_YCbCr                     COLOR_ID_YCbCr
TYPE_YCbCr/CS_PYCC             COLOR_ID_PYCC
TYPE_CMYK                      COLOR_ID_CMYK
TYPE_RGB   (w/ alpha)          COLOR_ID_YCbCrA
TYPE_YCbCr (w/ alpha)          COLOR_ID_YCbCrA
TYPE_YCbCr/CS_PYCC (w/ alpha)  COLOR_ID_PYCCA
* Any Other **                COLOR_ID_UNKNOWN
</pre>

When the user wants more control than the BufferedImage conversions
provide, the user must encode the data from a Raster. In this case
the data undergoes no color conversion at all. It is the user's
responsiblity to perform the desired conversions.<P>

If you intend to write a JFIF image (by including the APP0_MARKER)
the encoded COLOR_ID must be one of: COLOR_ID_UNKNOWN,
COLOR_ID_GRAYSCALE, COLOR_ID_YCbCr, or COLOR_ID_CMYK. In all other
instances an ImageformatException will be thrown.<P>

<B>IMPORTANT:</B> an Alpha RGB BufferedImage will not map to a
valid JFIF stream, you must strip off the alpha prior to encoding
if you want a JFIF file.  If the APP0 marker is set and you do not
strip off the Alpha, an ImageFormatException will be thrown.
<p>
Note that the classes in the com.sun.image.codec.jpeg package are not
part of the core Java APIs.  They are a part of Sun's JDK and JRE
distributions.  Although other licensees may choose to distribute these
classes, developers cannot depend on their availability in non-Sun
implementations.  We expect that equivalent functionality will eventually
be available in a core API or standard extension.
<p>
"
      classrelation 520706 // <generalisation>
	relation 520706 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 520706 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 520834 // <generalisation>
	relation 520834 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 520834 // <generalisation>
	  b parent class_ref 311170 // JPEGDecodeParam
      end

      operation 1660418 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1660546 "setHorizontalSubsampling"
	public explicit_return_type "void"
	nparams 2
	  param in name "component" explicit_type "int"
	  param in name "subsample" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the horizontal subsample factor for the given component.
Note that the subsample factor is the number of input pixels
that contribute to each output pixel (ussually 2 for YCC).
@param component The component being specified.
@param subsample The subsampling factor being specified.
"
      end

      operation 1660674 "setVerticalSubsampling"
	public explicit_return_type "void"
	nparams 2
	  param in name "component" explicit_type "int"
	  param in name "subsample" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the vertical subsample factor for the given component.  Note that
the subsample factor is the number of input pixels that
contribute to each output pixel (ussually 2 for YCC).
@param component The component being specified.
@param subsample The subsampling factor being specified.
"
      end

      operation 1660802 "setQTable"
	public explicit_return_type "void"
	nparams 2
	  param in name "tableNum" explicit_type "int"
	  param inout name "qTable" type class_ref 311810 // JPEGQTable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the coefficient quantization tables at index
passed. tableNum must range in value from 0 - 3.
@param qtable that will be used.
@param tableNum the index of the table to be set.
"
      end

      operation 1660930 "setDCHuffmanTable"
	public explicit_return_type "void"
	nparams 2
	  param in name "tableNum" explicit_type "int"
	  param inout name "huffTable" type class_ref 311938 // JPEGHuffmanTable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the DC Huffman coding table at index to the table provided.
@param huffTable JPEGHuffmanTable that will be assigned
to index tableNum.
@param tableNum - the index of the table to be set.
@exception IllegalArgumentException - thrown if the tableNum
is out of range.  Index must range in value from 0 - 3.
"
      end

      operation 1661058 "setACHuffmanTable"
	public explicit_return_type "void"
	nparams 2
	  param in name "tableNum" explicit_type "int"
	  param inout name "huffTable" type class_ref 311938 // JPEGHuffmanTable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the AC Huffman coding table at index to the table provided.
@param huffTable JPEGHuffmanTable that will be assigned
to index tableNum.
@param tableNum - the index of the table to be set.
@exception IllegalArgumentException - thrown if the tableNum
is out of range.  Index must range in value from 0 - 3.
"
      end

      operation 1661186 "setDCHuffmanComponentMapping"
	public explicit_return_type "void"
	nparams 2
	  param in name "component" explicit_type "int"
	  param in name "table" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the mapping between a component and it's DC Huffman Table.
@param component The component to set the mapping for
@param table The DC Huffman table to use for component
"
      end

      operation 1661314 "setACHuffmanComponentMapping"
	public explicit_return_type "void"
	nparams 2
	  param in name "component" explicit_type "int"
	  param in name "table" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the mapping between a component and it's AC Huffman Table.
@param component The component to set the mapping for
@param table The AC Huffman table to use for component
"
      end

      operation 1661442 "setQTableComponentMapping"
	public explicit_return_type "void"
	nparams 2
	  param in name "component" explicit_type "int"
	  param in name "table" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the mapping between a component and it's Quantization Table.
@param component The component to set the mapping for
@param table The Quantization Table to use for component
"
      end

      operation 1661570 "setImageInfoValid"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the flag indicating the validity of the table information
in the ParamBlock.  This is used to indicate if tables should
be included when encoding.
"
      end

      operation 1661698 "setTableInfoValid"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the flag indicating the validity of the image information
in the ParamBlock.  This is used to indicates if image data
should be written when encoding.
"
      end

      operation 1661826 "setMarkerData"
	public explicit_return_type "void"
	nparams 2
	  param in name "marker" explicit_type "int"
	  param inout name "data" explicit_type "byte"
	multiplicity "[][]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[][] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the marker data to be written to the output data stream.
This removes any existing marker data in the JPEParm object.
This can be used to remove the default APP0 marker by calling
it with data set to null.
@param marker The marker to set the data for.
@param data the new set of data to be written.
"
      end

      operation 1661954 "addMarkerData"
	public explicit_return_type "void"
	nparams 2
	  param in name "marker" explicit_type "int"
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends 'data' to the array of byte[] associated with
marker. This will result in additional instance of the marker
being written (one for each byte[] in the array.).
@param marker The marker to add and instance of.
@param data the data to be written.
"
      end

      operation 1662082 "setRestartInterval"
	public explicit_return_type "void"
	nparams 1
	  param in name "restartInterval" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the MCUs per restart, or 0 for no restart markers.
@param restartInterval number MCUs per restart marker.
"
      end

      operation 1662210 "setDensityUnit"
	public explicit_return_type "void"
	nparams 1
	  param in name "unit" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the pixel size units This value is copied into the APP0
marker (if that marker is written). This value isn't used by
the JPEG code.
@param unit One of the DENSITY_UNIT_* values.
"
      end

      operation 1662338 "setXDensity"
	public explicit_return_type "void"
	nparams 1
	  param in name "density" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the horizontal pixel density This value is written into the
APP0 marker. It isn't used by the JPEG code.
@param density the horizontal pixel density, in units
described by @see JPEGParam.getDensityUnit.
"
      end

      operation 1662466 "setYDensity"
	public explicit_return_type "void"
	nparams 1
	  param in name "density" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the vertical pixel density.  This value is copied into
the JFIF APP0 marker. It isn't used by the JPEG code.
@param density The verticle pixel density, in units
described by @see JPEGParam.getDensityUnit.
"
      end

      operation 1662594 "setQuality"
	public explicit_return_type "void"
	nparams 2
	  param in name "quality" explicit_type "float"
	  param inout name "forceBaseline" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This creates new Quantization tables that replace the currently
installed Quantization tables.  It also updates the Component
QTable mapping to the default for the current encoded COLOR_ID.

The Created Quantization table varies from very high
compression, very low quality, (0.0) to low compression, very
high quality (1.0) based on the quality parameter.<P>

At a quality level of 1.0 the table will be all 1's which will
lead to no loss of data due to quantization (however chrominace
subsampling, if used, and roundoff error in the DCT will still
degrade the image some what).<P>

This is a linear manipulation of the standard Chrominance
Q-Table.<P>

<pre>Some guidelines: 0.75 high quality
                0.5  medium quality
                0.25 low quality
</pre>
@param quality 0.0-1.0 setting of desired quality level.
@param forceBaseline force baseline quantization table
"
      end
    end

    class 311810 "JPEGQTable"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Class to encapsulate the JPEG quantization tables.
<p>
Note that the classes in the com.sun.image.codec.jpeg package are not
part of the core Java APIs.  They are a part of Sun's JDK and JRE
distributions.  Although other licensees may choose to distribute these
classes, developers cannot depend on their availability in non-Sun
implementations.  We expect that equivalent functionality will eventually
be available in a core API or standard extension.
<p>
"
      attribute 351618 "quantval"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Quantization step for each coefficient in zig-zag order 
"
      end

      attribute 351746 "QTABLESIZE"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 64"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of coefficients in a DCT block 
"
      end

      classrelation 521474 // StdLuminance (<unidirectional association>)
	relation 521474 --->
	  a role_name "StdLuminance" init_value " new JPEGQTable()" class_relation const_relation public
	    comment "
This is the sample luminance quantization table given in the
JPEG spec section K.1, expressed in zigzag order. The spec says
that the values given produce \"good\" quality, and when divided
by 2, \"very good\" quality.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 521474 // StdLuminance (<unidirectional association>)
	  b parent class_ref 311810 // JPEGQTable
      end

      extra_member 134018 "initialization"
	
	cpp "" ""
	java "  static {
                int [] lumVals = {
                        16,   11,  12,  14,  12,  10,  16,  14,
                        13,   14,  18,  17,  16,  19,  24,  40,
                        26,   24,  22,  22,  24,  49,  35,  37,
                        29,   40,  58,  51,  61,  60,  57,  51,
                        56,   55,  64,  72,  92,  78,  64,  68,
                        87,   69,  55,  56,  80, 109,  81,  87,
                        95,   98, 103, 104, 103,  62,  77, 113,
                        121, 112, 100, 120,  92, 101, 103,  99
                };

                StdLuminance.quantval = lumVals;
        }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 521602 // StdChrominance (<unidirectional association>)
	relation 521602 --->
	  a role_name "StdChrominance" init_value " new JPEGQTable()" class_relation const_relation public
	    comment "
This is the sample luminance quantization table given in the
JPEG spec section K.1, expressed in zigzag order. The spec says
that the values given produce \"good\" quality, and when divided
by 2, \"very good\" quality.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 521602 // StdChrominance (<unidirectional association>)
	  b parent class_ref 311810 // JPEGQTable
      end

      extra_member 134146 "initialization"
	
	cpp "" ""
	java "  static {
                int [] chromVals = {
                        17,  18,  18,  24,  21,  24,  47,  26,
                        26,  47,  99,  66,  56,  66,  99,  99,
                        99,  99,  99,  99,  99,  99,  99,  99,
                        99,  99,  99,  99,  99,  99,  99,  99,
                        99,  99,  99,  99,  99,  99,  99,  99,
                        99,  99,  99,  99,  99,  99,  99,  99,
                        99,  99,  99,  99,  99,  99,  99,  99,
                        99,  99,  99,  99,  99,  99,  99,  99
                };
                StdChrominance.quantval = chromVals;
        }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 1665538 "JPEGQTable"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty quantization table. This is used to create
the Std Q-Tables.
"
      end

      operation 1665666 "JPEGQTable"
	public explicit_return_type ""
	nparams 1
	  param inout name "table" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an quantization table from the array that was
passed.  The coefficents must be in zig-zag order. The array
must be of length 64.
 @param table the quantization table (this is copied).
"
      end

      operation 1665794 "getTable"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current quantization table as an array of ints in
zig zag order.
 @return A copy of the contained quantization table.
"
      end

      operation 1665922 "getScaledInstance"
	public return_type class_ref 311810 // JPEGQTable
	nparams 2
	  param in name "scaleFactor" explicit_type "float"
	  param inout name "forceBaseline" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new Quantization table where the values are
multiplied by scaleFactor and then clamped to the range
1..32767 (or to 1..255 if forceBaseline is 'true'). <P>

Values less than one tend to improve the quality level of the
table, and values greater than one degrade the quality level of
the table.

@param scaleFactor the multiplication factor for the table
@param forceBaseline if true the values will be clamped
to the range  [1 .. 255]
@return A new Q-Table that is a linear multiple of this Q-Table
"
      end
    end

    class 311938 "JPEGHuffmanTable"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " A class to encapsulate a JPEG Huffman table.
<p>
Note that the classes in the com.sun.image.codec.jpeg package are not
part of the core Java APIs.  They are a part of Sun's JDK and JRE
distributions.  Although other licensees may choose to distribute these
classes, developers cannot depend on their availability in non-Sun
implementations.  We expect that equivalent functionality will eventually
be available in a core API or standard extension.
<p>
"
      attribute 351106 "HUFF_MAX_LEN"
	class_attribute const_attribute private explicit_type "int"
	init_value "17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum number of symbol lengths
(max symbol length in bits = 16)

"
      end

      attribute 351234 "HUFF_MAX_SYM"
	class_attribute const_attribute private explicit_type "int"
	init_value "256"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " the maximum number of symbols 
"
      end

      attribute 351362 "lengths"
	private explicit_type "short"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " bits[k] = number of symbols with length k bits  
"
      end

      attribute 351490 "symbols"
	private explicit_type "short"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Symbols in order of increasing length 
"
      end

      classrelation 520962 // StdDCLuminance (<unidirectional association>)
	relation 520962 --->
	  a role_name "StdDCLuminance" init_value "
                new JPEGHuffmanTable()" class_relation const_relation public
	    comment " Standard Huffman table ( JPEG standard section K.3 ) 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 520962 // StdDCLuminance (<unidirectional association>)
	  b parent class_ref 311938 // JPEGHuffmanTable
      end

      extra_member 133506 "initialization"
	
	cpp "" ""
	java "  static {
                short lengths[] = { // 0-base
                        0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
                short symbols[] = {
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };

                StdDCLuminance.lengths = lengths;
                StdDCLuminance.symbols = symbols;
                StdDCLuminance.checkTable();
        }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 521090 // StdDCChrominance (<unidirectional association>)
	relation 521090 --->
	  a role_name "StdDCChrominance" init_value "
                new JPEGHuffmanTable()" class_relation const_relation public
	    comment " Standard Huffman table ( JPEG standard section K.3 ) 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 521090 // StdDCChrominance (<unidirectional association>)
	  b parent class_ref 311938 // JPEGHuffmanTable
      end

      extra_member 133634 "initialization"
	
	cpp "" ""
	java "  static {
                short lengths[] = { // 0-base
                        0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 };
                short symbols[] = {
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };

                StdDCChrominance.lengths = lengths;
                StdDCChrominance.symbols = symbols;
                StdDCChrominance.checkTable();
        }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 521218 // StdACLuminance (<unidirectional association>)
	relation 521218 --->
	  a role_name "StdACLuminance" init_value "
                new JPEGHuffmanTable()" class_relation const_relation public
	    comment " Standard Huffman table ( JPEG standard section K.3 ) 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 521218 // StdACLuminance (<unidirectional association>)
	  b parent class_ref 311938 // JPEGHuffmanTable
      end

      extra_member 133762 "initialization"
	
	cpp "" ""
	java "  static {
                short lengths[] = { // 0-base
                        0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d };
                short symbols[] = {
                        0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
                        0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
                        0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
                        0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
                        0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
                        0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
                        0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
                        0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
                        0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
                        0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
                        0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
                        0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
                        0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
                        0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
                        0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
                        0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
                        0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
                        0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
                        0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
                        0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
                        0xf9, 0xfa };

                StdACLuminance.lengths = lengths;
                StdACLuminance.symbols = symbols;
                StdACLuminance.checkTable();
        }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 521346 // StdACChrominance (<unidirectional association>)
	relation 521346 --->
	  a role_name "StdACChrominance" init_value "
                new JPEGHuffmanTable()" class_relation const_relation public
	    comment " Standard Huffman table ( JPEG standard section K.3 ) 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 521346 // StdACChrominance (<unidirectional association>)
	  b parent class_ref 311938 // JPEGHuffmanTable
      end

      extra_member 133890 "initialization"
	
	cpp "" ""
	java "  static {
                short lengths[] =  { // 0-base
                        0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77 };
                short symbols[] = {
                        0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
                        0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
                        0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
                        0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
                        0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
                        0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
                        0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
                        0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
                        0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
                        0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
                        0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
                        0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
                        0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
                        0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
                        0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
                        0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
                        0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
                        0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
                        0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
                        0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
                        0xf9, 0xfa };

                StdACChrominance.lengths = lengths;
                StdACChrominance.symbols = symbols;
                StdACChrominance.checkTable();
        }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 1662722 "JPEGHuffmanTable"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private constructor used to construct the Standard Huffman tables
"
      end

      operation 1662850 "JPEGHuffmanTable"
	public explicit_return_type ""
	nparams 2
	  param inout name "lengths" explicit_type "short"
	multiplicity "[]"
	  param inout name "symbols" explicit_type "short"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Huffman Table and initializes it.
@param lengths lengths[k] = # of symbols with codes of length k
bits; lengths[0] is ignored
@param symbols symbols in order of increasing code length
@exception IllegalArgumentException if the length of
<code>lengths</code> is greater than 17
@exception IllegalArgumentException if the length of
<code>symbols</code> is greater than 256
@exception IllegalArgumentException if any of the values in
<code>lengths</code> or <code>symbols</code> is less than zero
"
      end

      operation 1662978 "checkTable"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This checks that the table they gave us isn't 'illegal' It
checks that the symbol length counts are possible, and that
they gave us at least enough symbols for the symbol length
counts. Eventually this might check that there aren't duplicate
symbols.
"
      end

      operation 1663106 "getLengths"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a copy of the array containing the number of symbols
for each length in the Huffman table.
@return A short array where array[k] = # of symbols in the
        table of length k. array[0] is unused
"
      end

      operation 1663234 "getSymbols"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an array containing the Huffman symbols arranged by
increasing length.  To make use of this array you must refer
the the lengths array.
@return A short array of Huffman symbols
"
      end
    end

    class 312194 "TruncatedFileException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that a truncated file was detected.  This object contains
the Raster/BufferedImage that has the partially decoded image data
in it.  There is no indication of the portion of the Raster that
may or may not be good.
<p>
Note that the classes in the com.sun.image.codec.jpeg package are not
part of the core Java APIs.  They are a part of Sun's JDK and JRE
distributions.  Although other licensees may choose to distribute these
classes, developers cannot depend on their availability in non-Sun
implementations.  We expect that equivalent functionality will eventually
be available in a core API or standard extension.
<p>

@author  Thomas DeWeese
@see     JPEGImageDecoder
@since   1.2
"
      classrelation 521730 // <generalisation>
	relation 521730 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 521730 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      classrelation 521858 // ras (<unidirectional association>)
	relation 521858 --->
	  a role_name "ras" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 521858 // ras (<unidirectional association>)
	  b parent class_ref 311682 // Raster
      end

      classrelation 521986 // bi (<unidirectional association>)
	relation 521986 --->
	  a role_name "bi" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 521986 // bi (<unidirectional association>)
	  b parent class_ref 311554 // BufferedImage
      end

      operation 1666050 "TruncatedFileException"
	public explicit_return_type ""
	nparams 1
	  param inout name "bi" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>TruncatedFileException</code> with the
partially decoded BufferedImage.

@param   bi the partially decoded BufferedImage (may be null).
@since   1.2
"
      end

      operation 1666178 "TruncatedFileException"
	public explicit_return_type ""
	nparams 1
	  param inout name "ras" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>TruncatedFileException</code> with the
partially decoded Raster

@param   ras the partially decoded Raster (may be null).
@since   1.2
"
      end

      operation 1666306 "getRaster"
	public return_type class_ref 311682 // Raster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Allows access to the raster that was in the progress of being
decoded may be null, it is likely to be only partially filled
with image data.
@since   1.2
"
      end

      operation 1666434 "getBufferedImage"
	public return_type class_ref 311554 // BufferedImage
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Allows access to the BufferedImage that was in the progress of
being decoded, this may be null, it is likely to be only
partially filled with image data.
@since   1.2
"
      end
    end
  end

  deploymentview 139394 "jpeg"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 255362 "ImageFormatException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 310786 // ImageFormatException
      end
      comment "
Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

 ********************************************************************
*********************************************************************
*********************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997                      ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 255490 "JPEGCodec"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.awt.image.codec.JPEGImageDecoderImpl;
import sun.awt.image.codec.JPEGImageEncoderImpl;
import sun.awt.image.codec.JPEGParam;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;
import java.awt.image.ColorModel;
import java.io.InputStream;
import java.io.OutputStream;
${definition}"
      associated_elems
	class_ref 310914 // JPEGCodec
      end
      comment "
Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


*********************************************************************
*********************************************************************
** COPYRIGHT (c) 1997-1998 Eastman Kodak Company.                 ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 255618 "JPEGDecodeParam"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 311170 // JPEGDecodeParam
      end
      comment "
Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


*********************************************************************
*********************************************************************
** COPYRIGHT (c) 1997-1998 Eastman Kodak Company.                 ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 255746 "JPEGEncodeParam"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 311426 // JPEGEncodeParam
      end
      comment "
Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


*********************************************************************
*********************************************************************
** COPYRIGHT (c) 1997-1998 Eastman Kodak Company.                 ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 255874 "JPEGHuffmanTable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 311938 // JPEGHuffmanTable
      end
      comment "
Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


*********************************************************************
*********************************************************************
** COPYRIGHT (c) 1997-1998 Eastman Kodak Company.                 ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 256002 "JPEGImageDecoder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import java.awt.Point;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.DirectColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferByte;
import java.awt.image.DataBufferInt;
import java.awt.image.Raster;
import java.awt.image.SampleModel;
import java.awt.image.WritableRaster;
${definition}"
      associated_elems
	class_ref 311042 // JPEGImageDecoder
      end
      comment "
Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


*********************************************************************
*********************************************************************
** COPYRIGHT (c) 1997-1998 Eastman Kodak Company.                 ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 256130 "JPEGImageEncoder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.OutputStream;
import java.io.IOException;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.Raster;
${definition}"
      associated_elems
	class_ref 311298 // JPEGImageEncoder
      end
      comment "
Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


*********************************************************************
*********************************************************************
** COPYRIGHT (c) 1997-1998 Eastman Kodak Company.                 ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 256258 "JPEGQTable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 311810 // JPEGQTable
      end
      comment "
Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


*********************************************************************
*********************************************************************
** COPYRIGHT (c) 1997-1998 Eastman Kodak Company.                 ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 256386 "TruncatedFileException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.image.Raster;
import java.awt.image.BufferedImage;
${definition}"
      associated_elems
	class_ref 312194 // TruncatedFileException
      end
      comment "
Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

 ********************************************************************
*********************************************************************
*********************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997                      ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end
  end
end
