class RSAMultiPrimePrivateCrtKeySpec
!!!8087682.java!!!	RSAMultiPrimePrivateCrtKeySpec(inout modulus : BigInteger, inout publicExponent : BigInteger, inout privateExponent : BigInteger, inout primeP : BigInteger, inout primeQ : BigInteger, inout primeExponentP : BigInteger, inout primeExponentQ : BigInteger, inout crtCoefficient : BigInteger, inout otherPrimeInfo : RSAOtherPrimeInfo [[]])
        super(modulus, privateExponent);
        if (modulus == null) {
            throw new NullPointerException("the modulus parameter must be " +
                                            "non-null");
        }
        if (publicExponent == null) {
            throw new NullPointerException("the publicExponent parameter " +
                                            "must be non-null");
        }
        if (privateExponent == null) {
            throw new NullPointerException("the privateExponent parameter " +
                                            "must be non-null");
        }
        if (primeP == null) {
            throw new NullPointerException("the primeP parameter " +
                                            "must be non-null");
        }
        if (primeQ == null) {
            throw new NullPointerException("the primeQ parameter " +
                                            "must be non-null");
        }
        if (primeExponentP == null) {
            throw new NullPointerException("the primeExponentP parameter " +
                                            "must be non-null");
        }
        if (primeExponentQ == null) {
            throw new NullPointerException("the primeExponentQ parameter " +
                                            "must be non-null");
        }
        if (crtCoefficient == null) {
            throw new NullPointerException("the crtCoefficient parameter " +
                                            "must be non-null");
        }
        this.publicExponent = publicExponent;
        this.primeP = primeP;
        this.primeQ = primeQ;
        this.primeExponentP = primeExponentP;
        this.primeExponentQ = primeExponentQ;
        this.crtCoefficient = crtCoefficient;
        if (otherPrimeInfo == null)  {
            this.otherPrimeInfo = null;
        } else if (otherPrimeInfo.length == 0) {
            throw new IllegalArgumentException("the otherPrimeInfo " +
                                                "parameter must not be empty");
        } else {
            this.otherPrimeInfo = otherPrimeInfo.clone();
        }
!!!8087810.java!!!	getPublicExponent() : BigInteger
        return this.publicExponent;
!!!8087938.java!!!	getPrimeP() : BigInteger
        return this.primeP;
!!!8088066.java!!!	getPrimeQ() : BigInteger
        return this.primeQ;
!!!8088194.java!!!	getPrimeExponentP() : BigInteger
        return this.primeExponentP;
!!!8088322.java!!!	getPrimeExponentQ() : BigInteger
        return this.primeExponentQ;
!!!8088450.java!!!	getCrtCoefficient() : BigInteger
        return this.crtCoefficient;
!!!8088578.java!!!	getOtherPrimeInfo() : RSAOtherPrimeInfo
        if (otherPrimeInfo == null) return null;
        return otherPrimeInfo.clone();
