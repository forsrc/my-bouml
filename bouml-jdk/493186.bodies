class CompositeBuilderViaSetters
!!!2951810.java!!!	CompositeBuilderViaSetters(inout targetClass : Class, inout itemNames : String [[]])
            super(targetClass, itemNames);
!!!2951938.java!!!	applicable(inout getters : Method [[]]) : String
            try {
                Constructor<?> c = getTargetClass().getConstructor();
            } catch (Exception e) {
                return "does not have a public no-arg constructor";
            }

            Method[] setters = new Method[getters.length];
            for (int i = 0; i < getters.length; i++) {
                Method getter = getters[i];
                Class<?> returnType = getter.getReturnType();
                String name = propertyName(getter);
                String setterName = "set" + name;
                Method setter;
                try {
                    setter = getTargetClass().getMethod(setterName, returnType);
                    if (setter.getReturnType() != void.class)
                        throw new Exception();
                } catch (Exception e) {
                    return "not all getters have corresponding setters " +
                           "(" + getter + ")";
                }
                setters[i] = setter;
            }
            this.setters = setters;
            return null;
!!!2952066.java!!!	fromCompositeData(inout cd : CompositeData, inout itemNames : String [[]], inout converters : MXBeanMapping [[]]) : Object
            Object o;
            try {
                final Class<?> targetClass = getTargetClass();
                ReflectUtil.checkPackageAccess(targetClass);
                o = targetClass.newInstance();
                for (int i = 0; i < itemNames.length; i++) {
                    if (cd.containsKey(itemNames[i])) {
                        Object openItem = cd.get(itemNames[i]);
                        Object javaItem =
                            converters[i].fromOpenValue(openItem);
                        MethodUtil.invoke(setters[i], o, new Object[] {javaItem});
                    }
                }
            } catch (Exception e) {
                throw invalidObjectException(e);
            }
            return o;
