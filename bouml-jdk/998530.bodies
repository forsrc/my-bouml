class ArrayDeque
!!!8589954.java!!!	allocateElements(in numElements : int) : void
        int initialCapacity = MIN_INITIAL_CAPACITY;
        // Find the best power of two to hold elements.
        // Tests "<=" because arrays aren't kept full.
        if (numElements >= initialCapacity) {
            initialCapacity = numElements;
            initialCapacity |= (initialCapacity >>>  1);
            initialCapacity |= (initialCapacity >>>  2);
            initialCapacity |= (initialCapacity >>>  4);
            initialCapacity |= (initialCapacity >>>  8);
            initialCapacity |= (initialCapacity >>> 16);
            initialCapacity++;

            if (initialCapacity < 0)   // Too many elements, must back off
                initialCapacity >>>= 1;// Good luck allocating 2 ^ 30 elements
        }
        elements = new Object[initialCapacity];
!!!8590082.java!!!	doubleCapacity() : void
        assert head == tail;
        int p = head;
        int n = elements.length;
        int r = n - p; // number of elements to the right of p
        int newCapacity = n << 1;
        if (newCapacity < 0)
            throw new IllegalStateException("Sorry, deque too big");
        Object[] a = new Object[newCapacity];
        System.arraycopy(elements, p, a, 0, r);
        System.arraycopy(elements, 0, a, r, p);
        elements = a;
        head = 0;
        tail = n;
!!!8590210.java!!!	copyElements(inout a : T [[]]) : T
        if (head < tail) {
            System.arraycopy(elements, head, a, 0, size());
        } else if (head > tail) {
            int headPortionLen = elements.length - head;
            System.arraycopy(elements, head, a, 0, headPortionLen);
            System.arraycopy(elements, 0, a, headPortionLen, tail);
        }
        return a;
!!!8590338.java!!!	ArrayDeque()
        elements = new Object[16];
!!!8590466.java!!!	ArrayDeque(in numElements : int)
        allocateElements(numElements);
!!!8590594.java!!!	ArrayDeque(inout c : Collection)
        allocateElements(c.size());
        addAll(c);
!!!8590722.java!!!	addFirst(inout e : E) : void
        if (e == null)
            throw new NullPointerException();
        elements[head = (head - 1) & (elements.length - 1)] = e;
        if (head == tail)
            doubleCapacity();
!!!8590850.java!!!	addLast(inout e : E) : void
        if (e == null)
            throw new NullPointerException();
        elements[tail] = e;
        if ( (tail = (tail + 1) & (elements.length - 1)) == head)
            doubleCapacity();
!!!8590978.java!!!	offerFirst(inout e : E) : boolean
        addFirst(e);
        return true;
!!!8591106.java!!!	offerLast(inout e : E) : boolean
        addLast(e);
        return true;
!!!8591234.java!!!	removeFirst() : E
        E x = pollFirst();
        if (x == null)
            throw new NoSuchElementException();
        return x;
!!!8591362.java!!!	removeLast() : E
        E x = pollLast();
        if (x == null)
            throw new NoSuchElementException();
        return x;
!!!8591490.java!!!	pollFirst() : E
        int h = head;
        @SuppressWarnings("unchecked")
        E result = (E) elements[h];
        // Element is null if deque empty
        if (result == null)
            return null;
        elements[h] = null;     // Must null out slot
        head = (h + 1) & (elements.length - 1);
        return result;
!!!8591618.java!!!	pollLast() : E
        int t = (tail - 1) & (elements.length - 1);
        @SuppressWarnings("unchecked")
        E result = (E) elements[t];
        if (result == null)
            return null;
        elements[t] = null;
        tail = t;
        return result;
!!!8591746.java!!!	getFirst() : E
        @SuppressWarnings("unchecked")
        E result = (E) elements[head];
        if (result == null)
            throw new NoSuchElementException();
        return result;
!!!8591874.java!!!	getLast() : E
        @SuppressWarnings("unchecked")
        E result = (E) elements[(tail - 1) & (elements.length - 1)];
        if (result == null)
            throw new NoSuchElementException();
        return result;
!!!8592002.java!!!	peekFirst() : E
        // elements[head] is null if deque empty
        return (E) elements[head];
!!!8592130.java!!!	peekLast() : E
        return (E) elements[(tail - 1) & (elements.length - 1)];
!!!8592258.java!!!	removeFirstOccurrence(inout o : Object) : boolean
        if (o == null)
            return false;
        int mask = elements.length - 1;
        int i = head;
        Object x;
        while ( (x = elements[i]) != null) {
            if (o.equals(x)) {
                delete(i);
                return true;
            }
            i = (i + 1) & mask;
        }
        return false;
!!!8592386.java!!!	removeLastOccurrence(inout o : Object) : boolean
        if (o == null)
            return false;
        int mask = elements.length - 1;
        int i = (tail - 1) & mask;
        Object x;
        while ( (x = elements[i]) != null) {
            if (o.equals(x)) {
                delete(i);
                return true;
            }
            i = (i - 1) & mask;
        }
        return false;
!!!8592514.java!!!	add(inout e : E) : boolean
        addLast(e);
        return true;
!!!8592642.java!!!	offer(inout e : E) : boolean
        return offerLast(e);
!!!8592770.java!!!	remove() : E
        return removeFirst();
!!!8592898.java!!!	poll() : E
        return pollFirst();
!!!8593026.java!!!	element() : E
        return getFirst();
!!!8593154.java!!!	peek() : E
        return peekFirst();
!!!8593282.java!!!	push(inout e : E) : void
        addFirst(e);
!!!8593410.java!!!	pop() : E
        return removeFirst();
!!!8593538.java!!!	checkInvariants() : void
        assert elements[tail] == null;
        assert head == tail ? elements[head] == null :
            (elements[head] != null &&
             elements[(tail - 1) & (elements.length - 1)] != null);
        assert elements[(head - 1) & (elements.length - 1)] == null;
!!!8593666.java!!!	delete(in i : int) : boolean
        checkInvariants();
        final Object[] elements = this.elements;
        final int mask = elements.length - 1;
        final int h = head;
        final int t = tail;
        final int front = (i - h) & mask;
        final int back  = (t - i) & mask;

        // Invariant: head <= i < tail mod circularity
        if (front >= ((t - h) & mask))
            throw new ConcurrentModificationException();

        // Optimize for least element motion
        if (front < back) {
            if (h <= i) {
                System.arraycopy(elements, h, elements, h + 1, front);
            } else { // Wrap around
                System.arraycopy(elements, 0, elements, 1, i);
                elements[0] = elements[mask];
                System.arraycopy(elements, h, elements, h + 1, mask - h);
            }
            elements[h] = null;
            head = (h + 1) & mask;
            return false;
        } else {
            if (i < t) { // Copy the null tail as well
                System.arraycopy(elements, i + 1, elements, i, back);
                tail = t - 1;
            } else { // Wrap around
                System.arraycopy(elements, i + 1, elements, i, mask - i);
                elements[mask] = elements[0];
                System.arraycopy(elements, 1, elements, 0, t);
                tail = (t - 1) & mask;
            }
            return true;
        }
!!!8593794.java!!!	size() : int
        return (tail - head) & (elements.length - 1);
!!!8593922.java!!!	isEmpty() : boolean
        return head == tail;
!!!8594050.java!!!	iterator() : Iterator
        return new DeqIterator();
!!!8594178.java!!!	descendingIterator() : Iterator
        return new DescendingIterator();
!!!8595202.java!!!	contains(inout o : Object) : boolean
        if (o == null)
            return false;
        int mask = elements.length - 1;
        int i = head;
        Object x;
        while ( (x = elements[i]) != null) {
            if (o.equals(x))
                return true;
            i = (i + 1) & mask;
        }
        return false;
!!!8595330.java!!!	remove(inout o : Object) : boolean
        return removeFirstOccurrence(o);
!!!8595458.java!!!	clear() : void
        int h = head;
        int t = tail;
        if (h != t) { // clear all cells
            head = tail = 0;
            int i = h;
            int mask = elements.length - 1;
            do {
                elements[i] = null;
                i = (i + 1) & mask;
            } while (i != t);
        }
!!!8595586.java!!!	toArray() : Object
        return copyElements(new Object[size()]);
!!!8595714.java!!!	toArray(inout a : T [[]]) : T
        int size = size();
        if (a.length < size)
            a = (T[])java.lang.reflect.Array.newInstance(
                    a.getClass().getComponentType(), size);
        copyElements(a);
        if (a.length > size)
            a[size] = null;
        return a;
!!!8595842.java!!!	clone() : ArrayDeque
        try {
            @SuppressWarnings("unchecked")
            ArrayDeque<E> result = (ArrayDeque<E>) super.clone();
            result.elements = Arrays.copyOf(elements, elements.length);
            return result;
        } catch (CloneNotSupportedException e) {
            throw new AssertionError();
        }
!!!8595970.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();

        // Write out size
        s.writeInt(size());

        // Write out elements in order.
        int mask = elements.length - 1;
        for (int i = head; i != tail; i = (i + 1) & mask)
            s.writeObject(elements[i]);
!!!8596098.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();

        // Read in size and allocate array
        int size = s.readInt();
        allocateElements(size);
        head = 0;
        tail = size;

        // Read in all elements in the proper order.
        for (int i = 0; i < size; i++)
            elements[i] = s.readObject();
!!!8596226.java!!!	spliterator() : Spliterator
        return new DeqSpliterator<E>(this, -1, -1);
