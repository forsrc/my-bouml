class SnmpEngineImpl
!!!3241474.java!!!	getEngineTime() : int
        //We do the counter wrap in a lazt way. Each time Engine is asked for his time it checks. So if nobody use the Engine, the time can wrap and wrap again without incrementing nb boot. We can imagine that it is irrelevant due to the amount of time needed to wrap.
        long delta = (System.currentTimeMillis() / 1000) - startTime;
        if(delta >  0x7FFFFFFF) {
            //67 years of running. That is a great thing!
            //Reinitialize startTime.
            startTime = System.currentTimeMillis() / 1000;

            //Can't do anything with this counter.
            if(boot != 0x7FFFFFFF)
                boot += 1;
            //Store for future use.
            storeNBBoots(boot);
        }

        return (int) ((System.currentTimeMillis() / 1000) - startTime);
!!!3241602.java!!!	getEngineId() : SnmpEngineId
        return engineid;
!!!3241730.java!!!	getUsmKeyHandler() : SnmpUsmKeyHandler
        return usmKeyHandler;
!!!3241858.java!!!	getLcd() : SnmpLcd
        return lcd;
!!!3241986.java!!!	getEngineBoots() : int
        return boot;
!!!3242114.java!!!	SnmpEngineImpl(inout fact : SnmpEngineFactory, inout lcd : SnmpLcd, inout engineid : SnmpEngineId)

        init(lcd, fact);
        initEngineID();
        if(this.engineid == null) {
            if(engineid != null)
                this.engineid = engineid;
            else
                this.engineid = SnmpEngineId.createEngineId();
        }
        lcd.storeEngineId(this.engineid);
        if (SNMP_LOGGER.isLoggable(Level.FINER)) {
            SNMP_LOGGER.logp(Level.FINER, SnmpEngineImpl.class.getName(),
                    "SnmpEngineImpl(SnmpEngineFactory,SnmpLcd,SnmpEngineId)",
                    "LOCAL ENGINE ID: " + this.engineid);
        }
!!!3242242.java!!!	SnmpEngineImpl(inout fact : SnmpEngineFactory, inout lcd : SnmpLcd, inout address : InetAddress, in port : int)
        init(lcd, fact);
        initEngineID();
        if(engineid == null)
            engineid = SnmpEngineId.createEngineId(address, port);

        lcd.storeEngineId(engineid);

        if (SNMP_LOGGER.isLoggable(Level.FINER)) {
            SNMP_LOGGER.logp(Level.FINER, SnmpEngineImpl.class.getName(),
                    "SnmpEngineImpl(SnmpEngineFactory,SnmpLcd,InetAddress,int)",
                    "LOCAL ENGINE ID: " + engineid + " / " +
                    "LOCAL ENGINE NB BOOTS: " + boot + " / " +
                    "LOCAL ENGINE START TIME: " + getEngineTime());
        }
!!!3242370.java!!!	SnmpEngineImpl(inout fact : SnmpEngineFactory, inout lcd : SnmpLcd, in port : int)
        init(lcd, fact);
        initEngineID();
        if(engineid == null)
           engineid = SnmpEngineId.createEngineId(port);

        lcd.storeEngineId(engineid);

        if (SNMP_LOGGER.isLoggable(Level.FINER)) {
            SNMP_LOGGER.logp(Level.FINER, SnmpEngineImpl.class.getName(),
                    "SnmpEngineImpl(SnmpEngineFactory,SnmpLcd,int)",
                    "LOCAL ENGINE ID: " + engineid + " / " +
                    "LOCAL ENGINE NB BOOTS: " + boot + " / " +
                    "LOCAL ENGINE START TIME: " + getEngineTime());
        }
!!!3242498.java!!!	SnmpEngineImpl(inout fact : SnmpEngineFactory, inout lcd : SnmpLcd)
        init(lcd, fact);
        initEngineID();
        if(engineid == null)
            engineid = SnmpEngineId.createEngineId();

        lcd.storeEngineId(engineid);

        if (SNMP_LOGGER.isLoggable(Level.FINER)) {
            SNMP_LOGGER.logp(Level.FINER, SnmpEngineImpl.class.getName(),
                    "SnmpEngineImpl(SnmpEngineFactory,SnmpLcd)",
                    "LOCAL ENGINE ID: " + engineid + " / " +
                    "LOCAL ENGINE NB BOOTS: " + boot + " / " +
                    "LOCAL ENGINE START TIME: " + getEngineTime());
        }
!!!3242626.java!!!	activateCheckOid() : void
        checkOid = true;
!!!3242754.java!!!	deactivateCheckOid() : void
        checkOid = false;
!!!3242882.java!!!	isCheckOidActivated() : boolean
        return checkOid;
!!!3243010.java!!!	storeNBBoots(in boot : int) : void
        if(boot < 0 || boot == 0x7FFFFFFF) {
            boot = 0x7FFFFFFF;
            lcd.storeEngineBoots(boot);
        }
        else
            lcd.storeEngineBoots(boot + 1);
!!!3243138.java!!!	init(inout lcd : SnmpLcd, inout fact : SnmpEngineFactory) : void
        this.factory = fact;
        this.lcd = lcd;
        boot = lcd.getEngineBoots();

        if(boot == -1 || boot == 0)
            boot = 1;

        storeNBBoots(boot);

        startTime = System.currentTimeMillis() / 1000;

!!!3243266.java!!!	setUsmKeyHandler(inout usmKeyHandler : SnmpUsmKeyHandler) : void
        this.usmKeyHandler = usmKeyHandler;
!!!3243394.java!!!	initEngineID() : void
        String id = lcd.getEngineId();
        if(id != null) {
            engineid = SnmpEngineId.createEngineId(id);
        }
!!!3243522.java!!!	getMsgProcessingSubSystem() : SnmpMsgProcessingSubSystem
        return messageSub;
!!!3243650.java!!!	setMsgProcessingSubSystem(inout sys : SnmpMsgProcessingSubSystem) : void
        messageSub = sys;
!!!3243778.java!!!	getSecuritySubSystem() : SnmpSecuritySubSystem
        return securitySub;
!!!3243906.java!!!	setSecuritySubSystem(inout sys : SnmpSecuritySubSystem) : void
        securitySub = sys;
!!!3244034.java!!!	setAccessControlSubSystem(inout sys : SnmpAccessControlSubSystem) : void
        accessSub = sys;
!!!3244162.java!!!	getAccessControlSubSystem() : SnmpAccessControlSubSystem
        return accessSub;
!!!3244290.java!!!	checkSecurityLevel(in msgFlags : byte) : void
        int secLevel = msgFlags & SnmpDefinitions.authPriv;
        if((secLevel & SnmpDefinitions.privMask) != 0)
            if((secLevel & SnmpDefinitions.authMask) == 0) {
                throw new SnmpBadSecurityLevelException("Security level:"+
                                                        " noAuthPriv!!!");
            }
