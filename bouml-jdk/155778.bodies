class TypeCodeInputStream
!!!471554.java!!!	TypeCodeInputStream(inout orb : ORB, inout data : byte [[]], in size : int)
        super(orb, data, size);
!!!471682.java!!!	TypeCodeInputStream(inout orb : ORB, inout data : byte [[]], in size : int, inout littleEndian : boolean, inout version : GIOPVersion)
        super(orb, data, size, littleEndian, version);
!!!471810.java!!!	TypeCodeInputStream(inout orb : ORB, inout byteBuffer : ByteBuffer, in size : int, inout littleEndian : boolean, inout version : GIOPVersion)
        super(orb, byteBuffer, size, littleEndian, version);
!!!471938.java!!!	addTypeCodeAtPosition(inout tc : TypeCodeImpl, in position : int) : void
        if (typeMap == null) {
            //if (TypeCodeImpl.debug) System.out.println("Creating typeMap");
            typeMap = new HashMap(16);
        }
        //if (TypeCodeImpl.debug) System.out.println(this + " adding tc " + tc + " at position " + position);
        typeMap.put(new Integer(position), tc);
!!!472066.java!!!	getTypeCodeAtPosition(in position : int) : TypeCodeImpl
        if (typeMap == null)
            return null;
        //if (TypeCodeImpl.debug) {
            //System.out.println("Getting tc " + (TypeCode)typeMap.get(new Integer(position)) +
                               //" at position " + position);
        //}
        return (TypeCodeImpl)typeMap.get(new Integer(position));
!!!472194.java!!!	setEnclosingInputStream(inout enclosure : InputStream) : void
        this.enclosure = enclosure;
!!!472322.java!!!	getTopLevelStream() : TypeCodeReader
        if (enclosure == null)
            return this;
        if (enclosure instanceof TypeCodeReader)
            return ((TypeCodeReader)enclosure).getTopLevelStream();
        return this;
!!!472450.java!!!	getTopLevelPosition() : int
        if (enclosure != null && enclosure instanceof TypeCodeReader) {
            // The enclosed stream has to consider if the enclosing stream
            // had to read the enclosed stream completely when creating it.
            // This is why the size of the enclosed stream needs to be substracted.
            int topPos = ((TypeCodeReader)enclosure).getTopLevelPosition();
            // Substract getBufferLength from the parents pos because it read this stream
            // from its own when creating it
            int pos = topPos - getBufferLength() + getPosition();
            //if (TypeCodeImpl.debug) {
                //System.out.println("TypeCodeInputStream.getTopLevelPosition using getTopLevelPosition " + topPos +
                    //(isEncapsulation ? " - encaps length 4" : "") +
                    //" - getBufferLength() " + getBufferLength() +
                    //" + getPosition() " + getPosition() + " = " + pos);
            //}
            return pos;
        }
        //if (TypeCodeImpl.debug) {
            //System.out.println("TypeCodeInputStream.getTopLevelPosition returning getPosition() = " +
                               //getPosition() + " because enclosure is " + enclosure);
        //}
        return getPosition();
!!!472578.java!!!	readEncapsulation(inout is : InputStream, inout _orb : ORB) : TypeCodeInputStream
        // _REVISIT_ Would be nice if we didn't have to copy the buffer!
        TypeCodeInputStream encap;

        int encapLength = is.read_long();

        // read off part of the buffer corresponding to the encapsulation
        byte[] encapBuffer = new byte[encapLength];
        is.read_octet_array(encapBuffer, 0, encapBuffer.length);

        // create an encapsulation using the marshal buffer
        if (is instanceof CDRInputStream) {
            encap = EncapsInputStreamFactory.newTypeCodeInputStream((ORB) _orb,
                    encapBuffer, encapBuffer.length,
                    ((CDRInputStream) is).isLittleEndian(),
                    ((CDRInputStream) is).getGIOPVersion());
        } else {
            encap = EncapsInputStreamFactory.newTypeCodeInputStream((ORB) _orb,
                    encapBuffer, encapBuffer.length);
        }
        encap.setEnclosingInputStream(is);
        encap.makeEncapsulation();
        //if (TypeCodeImpl.debug) {
            //System.out.println("Created TypeCodeInputStream " + encap + " with parent " + is);
            //encap.printBuffer();
        //}
        return encap;
!!!472706.java!!!	makeEncapsulation() : void
        // first entry in an encapsulation is the endianess
        consumeEndian();
        isEncapsulation = true;
!!!472834.java!!!	printTypeMap() : void
        System.out.println("typeMap = {");
        Iterator i = typeMap.keySet().iterator();
        while (i.hasNext()) {
            Integer pos = (Integer)i.next();
            TypeCodeImpl tci = (TypeCodeImpl)typeMap.get(pos);
            System.out.println("  key = " + pos.intValue() + ", value = " + tci.description());
        }
        System.out.println("}");
