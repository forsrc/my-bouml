class CorbaTransportManagerImpl
!!!1442306.java!!!	CorbaTransportManagerImpl(inout orb : ORB)
        this.orb = orb;
        acceptors = new ArrayList();
        outboundConnectionCaches = new HashMap();
        inboundConnectionCaches = new HashMap();
        selector = new SelectorImpl(orb);
!!!1442434.java!!!	getByteBufferPool(in id : int) : ByteBufferPool
        throw new RuntimeException();
!!!1442562.java!!!	getOutboundConnectionCache(inout contactInfo : ContactInfo) : OutboundConnectionCache
        synchronized (contactInfo) {
            if (contactInfo.getConnectionCache() == null) {
                OutboundConnectionCache connectionCache = null;
                synchronized (outboundConnectionCaches) {
                    connectionCache = (OutboundConnectionCache)
                        outboundConnectionCaches.get(
                            contactInfo.getConnectionCacheType());
                    if (connectionCache == null) {
                        // REVISIT: Would like to be able to configure
                        // the connection cache type used.
                        connectionCache =
                            new CorbaOutboundConnectionCacheImpl(orb,
                                                                 contactInfo);
                        outboundConnectionCaches.put(
                            contactInfo.getConnectionCacheType(),
                            connectionCache);
                    }
                }
                contactInfo.setConnectionCache(connectionCache);
            }
            return contactInfo.getConnectionCache();
        }
!!!1442690.java!!!	getOutboundConnectionCaches() : Collection
        return outboundConnectionCaches.values();
!!!1442818.java!!!	getInboundConnectionCache(inout acceptor : Acceptor) : InboundConnectionCache
        synchronized (acceptor) {
            if (acceptor.getConnectionCache() == null) {
                InboundConnectionCache connectionCache = null;
                synchronized (inboundConnectionCaches) {
                    connectionCache = (InboundConnectionCache)
                        inboundConnectionCaches.get(
                            acceptor.getConnectionCacheType());
                    if (connectionCache == null) {
                        // REVISIT: Would like to be able to configure
                        // the connection cache type used.
                        connectionCache =
                            new CorbaInboundConnectionCacheImpl(orb,
                                                                acceptor);
                        inboundConnectionCaches.put(
                            acceptor.getConnectionCacheType(),
                            connectionCache);
                    }
                }
                acceptor.setConnectionCache(connectionCache);
            }
            return acceptor.getConnectionCache();
        }
!!!1442946.java!!!	getInboundConnectionCaches() : Collection
        return inboundConnectionCaches.values();
!!!1443074.java!!!	getSelector(in id : int) : Selector
        return selector;
!!!1443202.java!!!	registerAcceptor(inout acceptor : Acceptor) : void
        if (orb.transportDebugFlag) {
            dprint(".registerAcceptor->: " + acceptor);
        }
        acceptors.add(acceptor);
        if (orb.transportDebugFlag) {
            dprint(".registerAcceptor<-: " + acceptor);
        }
!!!1443330.java!!!	getAcceptors() : Collection
        return getAcceptors(null, null);
!!!1443458.java!!!	unregisterAcceptor(inout acceptor : Acceptor) : void
        acceptors.remove(acceptor);
!!!1443586.java!!!	close() : void
        try {
            if (orb.transportDebugFlag) {
                dprint(".close->");
            }
            for (Object cc : outboundConnectionCaches.values()) {
                ((ConnectionCache)cc).close() ;
            }
            for (Object icc : inboundConnectionCaches.values()) {
                ((ConnectionCache)icc).close() ;
                unregisterAcceptor(((InboundConnectionCache)icc).getAcceptor());
            }
            getSelector(0).close();
        } finally {
            if (orb.transportDebugFlag) {
                dprint(".close<-");
            }
        }
!!!1443714.java!!!	getAcceptors(inout objectAdapterManagerId : String, inout objectAdapterId : ObjectAdapterId) : Collection
        // REVISIT - need to filter based on arguments.

        // REVISIT - initialization will be moved to OA.
        // Lazy initialization of acceptors.
        Iterator iterator = acceptors.iterator();
        while (iterator.hasNext()) {
            Acceptor acceptor = (Acceptor) iterator.next();
            if (acceptor.initialize()) {
                if (acceptor.shouldRegisterAcceptEvent()) {
                    orb.getTransportManager().getSelector(0)
                        .registerForEvent(acceptor.getEventHandler());
                }
            }
        }
        return acceptors;
!!!1443842.java!!!	addToIORTemplate(inout iorTemplate : IORTemplate, inout policies : Policies, inout codebase : String, inout objectAdapterManagerId : String, inout objectAdapterId : ObjectAdapterId) : void
        Iterator iterator =
            getAcceptors(objectAdapterManagerId, objectAdapterId).iterator();
        while (iterator.hasNext()) {
            CorbaAcceptor acceptor = (CorbaAcceptor) iterator.next();
            acceptor.addToIORTemplate(iorTemplate, policies, codebase);
        }
!!!1443970.java!!!	dprint(inout msg : String) : void
        ORBUtility.dprint("CorbaTransportManagerImpl", msg);
