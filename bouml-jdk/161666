format 222
"internal" // jdk1.8::com::sun::org::apache::regexp::internal
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/org/apache/regexp/internal/"
  java_package "com.sun.org.apache.regexp.internal"
  classview 155778 "internal"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 580738 "CharacterArrayCharacterIterator"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Encapsulates char[] as CharacterIterator

@author <a href=\"mailto:ales.novak@netbeans.com\">Ales Novak</a>
"
      classrelation 1175170 // <realization>
	relation 1175170 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1175170 // <realization>
	  b parent class_ref 580866 // CharacterIterator
      end

      attribute 763138 "src"
	const_attribute private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " encapsulated 
"
      end

      attribute 763266 "off"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " offset in the char array 
"
      end

      attribute 763394 "len"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " used portion of the array 
"
      end

      operation 3623170 "CharacterArrayCharacterIterator"
	public explicit_return_type ""
	nparams 3
	  param inout name "src" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @param src - encapsulated String "
      end

      operation 3623298 "substring"
	public return_type class_ref 128130 // String
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a substring "
      end

      operation 3623426 "substring"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "beginIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a substring "
      end

      operation 3623554 "charAt"
	public explicit_return_type "char"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a character at the specified position. "
      end

      operation 3623682 "isEnd"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return <tt>true</tt> iff if the specified index is after the end of the character stream "
      end
    end

    class 580866 "CharacterIterator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Encapsulates different types of character sources - String, InputStream, ...
Defines a set of common methods

@author <a href=\"mailto:ales.novak@netbeans.com\">Ales Novak</a>
"
      operation 3622658 "substring"
	public return_type class_ref 128130 // String
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a substring "
      end

      operation 3622786 "substring"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "beginIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a substring "
      end

      operation 3622914 "charAt"
	public explicit_return_type "char"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a character at the specified position. "
      end

      operation 3623042 "isEnd"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return <tt>true</tt> iff if the specified index is after the end of the character stream "
      end
    end

    class 580994 "RE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "RE is an efficient, lightweight regular expression evaluator/matcher
class. Regular expressions are pattern descriptions which enable
sophisticated matching of strings.  In addition to being able to
match a string against a pattern, you can also extract parts of the
match.  This is especially useful in text parsing! Details on the
syntax of regular expression patterns are given below.

<p>
To compile a regular expression (RE), you can simply construct an RE
matcher object from the string specification of the pattern, like this:

<pre>
 RE r = new RE(\"a*b\");
</pre>

<p>
Once you have done this, you can call either of the RE.match methods to
perform matching on a String.  For example:

<pre>
 boolean matched = r.match(\"aaaab\");
</pre>

will cause the boolean matched to be set to true because the
pattern \"a*b\" matches the string \"aaaab\".

<p>
If you were interested in the <i>number</i> of a's which matched the
first part of our example expression, you could change the expression to
\"(a*)b\".  Then when you compiled the expression and matched it against
something like \"xaaaab\", you would get results like this:

<pre>
 RE r = new RE(\"(a*)b\");                  // Compile expression
 boolean matched = r.match(\"xaaaab\");     // Match against \"xaaaab\"

 String wholeExpr = r.getParen(0);        // wholeExpr will be 'aaaab'
 String insideParens = r.getParen(1);     // insideParens will be 'aaaa'

 int startWholeExpr = r.getParenStart(0); // startWholeExpr will be index 1
 int endWholeExpr = r.getParenEnd(0);     // endWholeExpr will be index 6
 int lenWholeExpr = r.getParenLength(0);  // lenWholeExpr will be 5

 int startInside = r.getParenStart(1);    // startInside will be index 1
 int endInside = r.getParenEnd(1);        // endInside will be index 5
 int lenInside = r.getParenLength(1);     // lenInside will be 4
</pre>

You can also refer to the contents of a parenthesized expression
within a regular expression itself.  This is called a
'backreference'.  The first backreference in a regular expression is
denoted by \\1, the second by \\2 and so on.  So the expression:

<pre>
 ([0-9]+)=\\1
</pre>

will match any string of the form n=n (like 0=0 or 2=2).

<p>
The full regular expression syntax accepted by RE is described here:

<pre>

 <b><font face=times roman>Characters</font></b>

   <i>unicodeChar</i>   Matches any identical unicode character
   \\                    Used to quote a meta-character (like '*')
   \\\\                   Matches a single '\\' character
   \\0nnn                Matches a given octal character
   \\xhh                 Matches a given 8-bit hexadecimal character
   \\\\uhhhh              Matches a given 16-bit hexadecimal character
   \\t                   Matches an ASCII tab character
   \\n                   Matches an ASCII newline character
   \\r                   Matches an ASCII return character
   \\f                   Matches an ASCII form feed character


 <b><font face=times roman>Character Classes</font></b>

   [abc]                Simple character class
   [a-zA-Z]             Character class with ranges
   [^abc]               Negated character class
</pre>

<b>NOTE:</b> Incomplete ranges will be interpreted as &quot;starts
from zero&quot; or &quot;ends with last character&quot;.
<br>
I.e. [-a] is the same as [\\\\u0000-a], and [a-] is the same as [a-\\\\uFFFF],
[-] means &quot;all characters&quot;.

<pre>

 <b><font face=times roman>Standard POSIX Character Classes</font></b>

   [:alnum:]            Alphanumeric characters.
   [:alpha:]            Alphabetic characters.
   [:blank:]            Space and tab characters.
   [:cntrl:]            Control characters.
   [:digit:]            Numeric characters.
   [:graph:]            Characters that are printable and are also visible.
                        (A space is printable, but not visible, while an
                        `a' is both.)
   [:lower:]            Lower-case alphabetic characters.
   [:print:]            Printable characters (characters that are not
                        control characters.)
   [:punct:]            Punctuation characters (characters that are not letter,
                        digits, control characters, or space characters).
   [:space:]            Space characters (such as space, tab, and formfeed,
                        to name a few).
   [:upper:]            Upper-case alphabetic characters.
   [:xdigit:]           Characters that are hexadecimal digits.


 <b><font face=times roman>Non-standard POSIX-style Character Classes</font></b>

   [:javastart:]        Start of a Java identifier
   [:javapart:]         Part of a Java identifier


 <b><font face=times roman>Predefined Classes</font></b>

   .         Matches any character other than newline
   \\w        Matches a \"word\" character (alphanumeric plus \"_\")
   \\W        Matches a non-word character
   \\s        Matches a whitespace character
   \\S        Matches a non-whitespace character
   \\d        Matches a digit character
   \\D        Matches a non-digit character


 <b><font face=times roman>Boundary Matchers</font></b>

   ^         Matches only at the beginning of a line
   $         Matches only at the end of a line
   \\b        Matches only at a word boundary
   \\B        Matches only at a non-word boundary


 <b><font face=times roman>Greedy Closures</font></b>

   A*        Matches A 0 or more times (greedy)
   A+        Matches A 1 or more times (greedy)
   A?        Matches A 1 or 0 times (greedy)
   A{n}      Matches A exactly n times (greedy)
   A{n,}     Matches A at least n times (greedy)
   A{n,m}    Matches A at least n but not more than m times (greedy)


 <b><font face=times roman>Reluctant Closures</font></b>

   A*?       Matches A 0 or more times (reluctant)
   A+?       Matches A 1 or more times (reluctant)
   A??       Matches A 0 or 1 times (reluctant)


 <b><font face=times roman>Logical Operators</font></b>

   AB        Matches A followed by B
   A|B       Matches either A or B
   (A)       Used for subexpression grouping
  (?:A)      Used for subexpression clustering (just like grouping but
             no backrefs)


 <b><font face=times roman>Backreferences</font></b>

   \\1    Backreference to 1st parenthesized subexpression
   \\2    Backreference to 2nd parenthesized subexpression
   \\3    Backreference to 3rd parenthesized subexpression
   \\4    Backreference to 4th parenthesized subexpression
   \\5    Backreference to 5th parenthesized subexpression
   \\6    Backreference to 6th parenthesized subexpression
   \\7    Backreference to 7th parenthesized subexpression
   \\8    Backreference to 8th parenthesized subexpression
   \\9    Backreference to 9th parenthesized subexpression
</pre>

<p>
All closure operators (+, *, ?, {m,n}) are greedy by default, meaning
that they match as many elements of the string as possible without
causing the overall match to fail.  If you want a closure to be
reluctant (non-greedy), you can simply follow it with a '?'.  A
reluctant closure will match as few elements of the string as
possible when finding matches.  {m,n} closures don't currently
support reluctancy.

<p>
<b><font face=\"times roman\">Line terminators</font></b>
<br>
A line terminator is a one- or two-character sequence that marks
the end of a line of the input character sequence. The following
are recognized as line terminators:
<ul>
<li>A newline (line feed) character ('\\n'),</li>
<li>A carriage-return character followed immediately by a newline character (\"\\r\\n\"),</li>
<li>A standalone carriage-return character ('\\r'),</li>
<li>A next-line character ('\\u0085'),</li>
<li>A line-separator character ('\\u2028'), or</li>
<li>A paragraph-separator character ('\\u2029).</li>
</ul>

<p>
RE runs programs compiled by the RECompiler class.  But the RE
matcher class does not include the actual regular expression compiler
for reasons of efficiency.  In fact, if you want to pre-compile one
or more regular expressions, the 'recompile' class can be invoked
from the command line to produce compiled output like this:

<pre>
   // Pre-compiled regular expression \"a*b\"
   char[] re1Instructions =
   {
       0x007c, 0x0000, 0x001a, 0x007c, 0x0000, 0x000d, 0x0041,
       0x0001, 0x0004, 0x0061, 0x007c, 0x0000, 0x0003, 0x0047,
       0x0000, 0xfff6, 0x007c, 0x0000, 0x0003, 0x004e, 0x0000,
       0x0003, 0x0041, 0x0001, 0x0004, 0x0062, 0x0045, 0x0000,
       0x0000,
   };


   REProgram re1 = new REProgram(re1Instructions);
</pre>

You can then construct a regular expression matcher (RE) object from
the pre-compiled expression re1 and thus avoid the overhead of
compiling the expression at runtime. If you require more dynamic
regular expressions, you can construct a single RECompiler object and
re-use it to compile each expression. Similarly, you can change the
program run by a given matcher object at any time. However, RE and
RECompiler are not threadsafe (for efficiency reasons, and because
requiring thread safety in this class is deemed to be a rare
requirement), so you will need to construct a separate compiler or
matcher object for each thread (unless you do thread synchronization
yourself). Once expression compiled into the REProgram object, REProgram
can be safely shared across multiple threads and RE objects.

<br><p><br>

<font color=\"red\">
<i>ISSUES:</i>

<ul>
 <li>com.weusours.util.re is not currently compatible with all
     standard POSIX regcomp flags</li>
 <li>com.weusours.util.re does not support POSIX equivalence classes
     ([=foo=] syntax) (I18N/locale issue)</li>
 <li>com.weusours.util.re does not support nested POSIX character
     classes (definitely should, but not completely trivial)</li>
 <li>com.weusours.util.re Does not support POSIX character collation
     concepts ([.foo.] syntax) (I18N/locale issue)</li>
 <li>Should there be different matching styles (simple, POSIX, Perl etc?)</li>
 <li>Should RE support character iterators (for backwards RE matching!)?</li>
 <li>Should RE support reluctant {m,n} closures (does anyone care)?</li>
 <li>Not *all* possibilities are considered for greediness when backreferences
     are involved (as POSIX suggests should be the case).  The POSIX RE
     \"(ac*)c*d[ac]*\\1\", when matched against \"acdacaa\" should yield a match
     of acdacaa where \\1 is \"a\".  This is not the case in this RE package,
     and actually Perl doesn't go to this extent either!  Until someone
     actually complains about this, I'm not sure it's worth \"fixing\".
     If it ever is fixed, test #137 in RETest.txt should be updated.</li>
</ul>

</font>

@see recompile
@see RECompiler

@author <a href=\"mailto:jonl@muppetlabs.com\">Jonathan Locke</a>
@author <a href=\"mailto:ts@sch-fer.de\">Tobias Sch&auml;fer</a>
"
      classrelation 1175298 // <realization>
	relation 1175298 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1175298 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 763522 "MATCH_NORMAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Specifies normal, case-sensitive matching behaviour.

"
      end

      attribute 763650 "MATCH_CASEINDEPENDENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag to indicate that matching should be case-independent (folded)

"
      end

      attribute 763778 "MATCH_MULTILINE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0002"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Newlines should match as BOL/EOL (^ and $)

"
      end

      attribute 763906 "MATCH_SINGLELINE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0004"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Consider all input a single body of text - newlines are matched by .

"
      end

      attribute 764034 "OP_END"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'E'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "                                             *
The format of a node in a program is:        *
                                             *
[ OPCODE ] [ OPDATA ] [ OPNEXT ] [ OPERAND ] *
                                             *
char OPCODE - instruction                    *
char OPDATA - modifying data                 *
char OPNEXT - next node (relative offset)    *
                                             *
**********************************************
   Opcode              Char       Opdata/Operand  Meaning
   ----------          ---------- --------------- --------------------------------------------------
                 end of program"
      end

      attribute 764162 "OP_BOL"
	class_attribute const_attribute package explicit_type "char"
	init_value " '^'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "                 match only if at beginning of line"
      end

      attribute 764290 "OP_EOL"
	class_attribute const_attribute package explicit_type "char"
	init_value " '$'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "                 match only if at end of line"
      end

      attribute 764418 "OP_ANY"
	class_attribute const_attribute package explicit_type "char"
	init_value " '.'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "                 match any single character except newline"
      end

      attribute 764546 "OP_ANYOF"
	class_attribute const_attribute package explicit_type "char"
	init_value " '['"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " count/ranges    match any char in the list of ranges"
      end

      attribute 764674 "OP_BRANCH"
	class_attribute const_attribute package explicit_type "char"
	init_value " '|'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " node            match this alternative or the next one"
      end

      attribute 764802 "OP_ATOM"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'A'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " length/string   length of string followed by string itself"
      end

      attribute 764930 "OP_STAR"
	class_attribute const_attribute package explicit_type "char"
	init_value " '*'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " node            kleene closure"
      end

      attribute 765058 "OP_PLUS"
	class_attribute const_attribute package explicit_type "char"
	init_value " '+'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " node            positive closure"
      end

      attribute 765186 "OP_MAYBE"
	class_attribute const_attribute package explicit_type "char"
	init_value " '?'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " node            optional closure"
      end

      attribute 765314 "OP_ESCAPE"
	class_attribute const_attribute package explicit_type "char"
	init_value " '\\\\'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " escape          special escape code char class (escape is E_* code)"
      end

      attribute 765442 "OP_OPEN"
	class_attribute const_attribute package explicit_type "char"
	init_value " '('"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " number          nth opening paren"
      end

      attribute 765570 "OP_OPEN_CLUSTER"
	class_attribute const_attribute package explicit_type "char"
	init_value " '<'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "                 opening cluster"
      end

      attribute 765698 "OP_CLOSE"
	class_attribute const_attribute package explicit_type "char"
	init_value " ')'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " number          nth closing paren"
      end

      attribute 765826 "OP_CLOSE_CLUSTER"
	class_attribute const_attribute package explicit_type "char"
	init_value " '>'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "                 closing cluster"
      end

      attribute 765954 "OP_BACKREF"
	class_attribute const_attribute package explicit_type "char"
	init_value " '#'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " number          reference nth already matched parenthesized string"
      end

      attribute 766082 "OP_GOTO"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'G'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "                 nothing but a (back-)pointer"
      end

      attribute 766210 "OP_NOTHING"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'N'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "                 match null string such as in '(a|)'"
      end

      attribute 766338 "OP_RELUCTANTSTAR"
	class_attribute const_attribute package explicit_type "char"
	init_value " '8'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " none/expr       reluctant '*' (mnemonic for char is unshifted '*')"
      end

      attribute 766466 "OP_RELUCTANTPLUS"
	class_attribute const_attribute package explicit_type "char"
	init_value " '='"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " none/expr       reluctant '+' (mnemonic for char is unshifted '+')"
      end

      attribute 766594 "OP_RELUCTANTMAYBE"
	class_attribute const_attribute package explicit_type "char"
	init_value " '/'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " none/expr       reluctant '?' (mnemonic for char is unshifted '?')"
      end

      attribute 766722 "OP_POSIXCLASS"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'P'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " classid         one of the posix character classes"
      end

      attribute 766850 "E_ALNUM"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'w'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Escape codes
 Alphanumeric"
      end

      attribute 766978 "E_NALNUM"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'W'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Non-alphanumeric"
      end

      attribute 767106 "E_BOUND"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'b'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Word boundary"
      end

      attribute 767234 "E_NBOUND"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'B'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Non-word boundary"
      end

      attribute 767362 "E_SPACE"
	class_attribute const_attribute package explicit_type "char"
	init_value " 's'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whitespace"
      end

      attribute 767490 "E_NSPACE"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'S'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Non-whitespace"
      end

      attribute 767618 "E_DIGIT"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'd'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Digit"
      end

      attribute 767746 "E_NDIGIT"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'D'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Non-digit"
      end

      attribute 767874 "POSIX_CLASS_ALNUM"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'w'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Posix character classes
 Alphanumerics"
      end

      attribute 768002 "POSIX_CLASS_ALPHA"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'a'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Alphabetics"
      end

      attribute 768130 "POSIX_CLASS_BLANK"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'b'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Blanks"
      end

      attribute 768258 "POSIX_CLASS_CNTRL"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'c'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Control characters"
      end

      attribute 768386 "POSIX_CLASS_DIGIT"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'd'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Digits"
      end

      attribute 768514 "POSIX_CLASS_GRAPH"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'g'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Graphic characters"
      end

      attribute 768642 "POSIX_CLASS_LOWER"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'l'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Lowercase characters"
      end

      attribute 768770 "POSIX_CLASS_PRINT"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'p'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Printable characters"
      end

      attribute 768898 "POSIX_CLASS_PUNCT"
	class_attribute const_attribute package explicit_type "char"
	init_value " '!'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Punctuation"
      end

      attribute 769026 "POSIX_CLASS_SPACE"
	class_attribute const_attribute package explicit_type "char"
	init_value " 's'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Spaces"
      end

      attribute 769154 "POSIX_CLASS_UPPER"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'u'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Uppercase characters"
      end

      attribute 769282 "POSIX_CLASS_XDIGIT"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'x'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Hexadecimal digits"
      end

      attribute 769410 "POSIX_CLASS_JSTART"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'j'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Java identifier start"
      end

      attribute 769538 "POSIX_CLASS_JPART"
	class_attribute const_attribute package explicit_type "char"
	init_value " 'k'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Java identifier part"
      end

      attribute 769666 "maxNode"
	class_attribute const_attribute package explicit_type "int"
	init_value " 65536"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Limits
 Maximum number of nodes in a program"
      end

      attribute 769794 "MAX_PAREN"
	class_attribute const_attribute package explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of paren pairs (only 9 can be backrefs)"
      end

      attribute 769922 "offsetOpcode"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Node layout constants
 Opcode offset (first character)"
      end

      attribute 770050 "offsetOpdata"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Opdata offset (second char)"
      end

      attribute 770178 "offsetNext"
	class_attribute const_attribute package explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Next index offset (third char)"
      end

      attribute 770306 "nodeSize"
	class_attribute const_attribute package explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Node size (in chars)"
      end

      classrelation 1175426 // program (<unidirectional association>)
	relation 1175426 --->
	  a role_name "program" package
	    comment " State of current program
 Compiled regular expression 'program'"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1175426 // program (<unidirectional association>)
	  b parent class_ref 581122 // REProgram
      end

      classrelation 1175554 // search (<unidirectional association>)
	relation 1175554 --->
	  a role_name "search" package
	    comment " The string being matched against"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1175554 // search (<unidirectional association>)
	  b parent class_ref 580866 // CharacterIterator
      end

      attribute 770434 "matchFlags"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Match behaviour flags"
      end

      attribute 770562 "maxParen"
	package explicit_type "int"
	init_value " MAX_PAREN"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 770690 "parenCount"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Parenthesized subexpressions
 Number of subexpressions matched (num open parens + 1)"
      end

      attribute 770818 "start0"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Cache of start[0]"
      end

      attribute 770946 "end0"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Cache of start[0]"
      end

      attribute 771074 "start1"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Cache of start[1]"
      end

      attribute 771202 "end1"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Cache of start[1]"
      end

      attribute 771330 "start2"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Cache of start[2]"
      end

      attribute 771458 "end2"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Cache of start[2]"
      end

      attribute 771586 "startn"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Lazy-alloced array of sub-expression starts"
      end

      attribute 771714 "endn"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Lazy-alloced array of sub-expression ends"
      end

      attribute 771842 "startBackref"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Backreferences
 Lazy-alloced array of backref starts"
      end

      attribute 771970 "endBackref"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Lazy-alloced array of backref ends"
      end

      operation 3623810 "RE"
	public explicit_return_type ""
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a regular expression matcher from a String by compiling it
using a new instance of RECompiler.  If you will be compiling many
expressions, you may prefer to use a single RECompiler object instead.

@param pattern The regular expression pattern to compile.
@exception RESyntaxException Thrown if the regular expression has invalid syntax.
@see RECompiler
@see recompile
"
      end

      operation 3623938 "RE"
	public explicit_return_type ""
	nparams 2
	  param inout name "pattern" type class_ref 128130 // String
	  param in name "matchFlags" explicit_type "int"
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a regular expression matcher from a String by compiling it
using a new instance of RECompiler.  If you will be compiling many
expressions, you may prefer to use a single RECompiler object instead.

@param pattern The regular expression pattern to compile.
@param matchFlags The matching style
@exception RESyntaxException Thrown if the regular expression has invalid syntax.
@see RECompiler
@see recompile
"
      end

      operation 3624066 "RE"
	public explicit_return_type ""
	nparams 2
	  param inout name "program" type class_ref 581122 // REProgram
	  param in name "matchFlags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a matcher for a pre-compiled regular expression from program
(bytecode) data.  Permits special flags to be passed in to modify matching
behaviour.

@param program Compiled regular expression program (see RECompiler and/or recompile)
@param matchFlags One or more of the RE match behaviour flags (RE.MATCH_*):

<pre>
  MATCH_NORMAL              // Normal (case-sensitive) matching
  MATCH_CASEINDEPENDENT     // Case folded comparisons
  MATCH_MULTILINE           // Newline matches as BOL/EOL
</pre>

@see RECompiler
@see REProgram
@see recompile
"
      end

      operation 3624194 "RE"
	public explicit_return_type ""
	nparams 1
	  param inout name "program" type class_ref 581122 // REProgram
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a matcher for a pre-compiled regular expression from program
(bytecode) data.

@param program Compiled regular expression program
@see RECompiler
@see recompile
"
      end

      operation 3624322 "RE"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a regular expression matcher with no initial program.
This is likely to be an uncommon practice, but is still supported.
"
      end

      operation 3624450 "simplePatternToFullRegularExpression"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a 'simplified' regular expression to a full regular expression

@param pattern The pattern to convert
@return The full regular expression
"
      end

      operation 3624578 "setMatchFlags"
	public explicit_return_type "void"
	nparams 1
	  param in name "matchFlags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets match behaviour flags which alter the way RE does matching.
@param matchFlags One or more of the RE match behaviour flags (RE.MATCH_*):

<pre>
  MATCH_NORMAL              // Normal (case-sensitive) matching
  MATCH_CASEINDEPENDENT     // Case folded comparisons
  MATCH_MULTILINE           // Newline matches as BOL/EOL
</pre>
"
      end

      operation 3624706 "getMatchFlags"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current match behaviour flags.
@return Current match behaviour flags (RE.MATCH_*).

<pre>
  MATCH_NORMAL              // Normal (case-sensitive) matching
  MATCH_CASEINDEPENDENT     // Case folded comparisons
  MATCH_MULTILINE           // Newline matches as BOL/EOL
</pre>

@see #setMatchFlags
"
      end

      operation 3624834 "setProgram"
	public explicit_return_type "void"
	nparams 1
	  param inout name "program" type class_ref 581122 // REProgram
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current regular expression program used by this matcher object.

@param program Regular expression program compiled by RECompiler.
@see RECompiler
@see REProgram
@see recompile
"
      end

      operation 3624962 "getProgram"
	public return_type class_ref 581122 // REProgram
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current regular expression program in use by this matcher object.

@return Regular expression program
@see #setProgram
"
      end

      operation 3625090 "getParenCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of parenthesized subexpressions available after a successful match.

@return Number of available parenthesized subexpressions
"
      end

      operation 3625218 "getParen"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "which" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the contents of a parenthesized subexpression after a successful match.

@param which Nesting level of subexpression
@return String
"
      end

      operation 3625346 "getParenStart"
	public explicit_return_type "int"
	nparams 1
	  param in name "which" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the start index of a given paren level.

@param which Nesting level of subexpression
@return String index
"
      end

      operation 3625474 "getParenEnd"
	public explicit_return_type "int"
	nparams 1
	  param in name "which" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the end index of a given paren level.

@param which Nesting level of subexpression
@return String index
"
      end

      operation 3625602 "getParenLength"
	public explicit_return_type "int"
	nparams 1
	  param in name "which" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of a given paren level.

@param which Nesting level of subexpression
@return Number of characters in the parenthesized subexpression
"
      end

      operation 3625730 "setParenStart"
	protected explicit_return_type "void"
	nparams 2
	  param in name "which" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the start of a paren level

@param which Which paren level
@param i Index in input array
"
      end

      operation 3625858 "setParenEnd"
	protected explicit_return_type "void"
	nparams 2
	  param in name "which" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the end of a paren level

@param which Which paren level
@param i Index in input array
"
      end

      operation 3625986 "internalError"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 195842 // Error
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws an Error representing an internal error condition probably resulting
from a bug in the regular expression compiler (or possibly data corruption).
In practice, this should be very rare.

@param s Error description
"
      end

      operation 3626114 "allocParens"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs lazy allocation of subexpression arrays
"
      end

      operation 3626242 "matchNodes"
	protected explicit_return_type "int"
	nparams 3
	  param in name "firstNode" explicit_type "int"
	  param in name "lastNode" explicit_type "int"
	  param in name "idxStart" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Try to match a string against a subset of nodes in the program

@param firstNode Node to start at in program
@param lastNode  Last valid node (used for matching a subexpression without
                 matching the rest of the program as well).
@param idxStart  Starting position in character array
@return Final input array index if match succeeded.  -1 if not.
"
      end

      operation 3626370 "matchAt"
	protected explicit_return_type "boolean"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Match the current regular expression program against the current
input string, starting at index i of the input string.  This method
is only meant for internal use.

@param i The input string index to start matching at
@return True if the input matched the expression
"
      end

      operation 3626498 "match"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "search" type class_ref 128130 // String
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Matches the current regular expression program against a character array,
starting at a given index.

@param search String to match against
@param i Index to start searching at
@return True if string matched
"
      end

      operation 3626626 "match"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "search" type class_ref 580866 // CharacterIterator
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Matches the current regular expression program against a character array,
starting at a given index.

@param search String to match against
@param i Index to start searching at
@return True if string matched
"
      end

      operation 3626754 "match"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "search" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Matches the current regular expression program against a String.

@param search String to match against
@return True if string matched
"
      end

      operation 3626882 "split"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Splits a string into an array of strings on regular expression boundaries.
This function works the same way as the Perl function of the same name.
Given a regular expression of \"[ab]+\" and a string to split of
\"xyzzyababbayyzabbbab123\", the result would be the array of Strings
\"[xyzzy, yyz, 123]\".

<p>Please note that the first string in the resulting array may be an empty
string. This happens when the very first character of input string is
matched by the pattern.

@param s String to split on this regular exression
@return Array of strings
"
      end

      attribute 772098 "REPLACE_ALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag bit that indicates that subst should replace all occurrences of this
regular expression.

"
      end

      attribute 772226 "REPLACE_FIRSTONLY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag bit that indicates that subst should only replace the first occurrence
of this regular expression.

"
      end

      attribute 772354 "REPLACE_BACKREFERENCES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0002"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag bit that indicates that subst should replace backreferences

"
      end

      operation 3627010 "subst"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "substituteIn" type class_ref 128130 // String
	  param inout name "substitution" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Substitutes a string for this regular expression in another string.
This method works like the Perl function of the same name.
Given a regular expression of \"a*b\", a String to substituteIn of
\"aaaabfooaaabgarplyaaabwackyb\" and the substitution String \"-\", the
resulting String returned by subst would be \"-foo-garply-wacky-\".

@param substituteIn String to substitute within
@param substitution String to substitute for all matches of this regular expression.
@return The string substituteIn with zero or more occurrences of the current
regular expression replaced with the substitution String (if this regular
expression object doesn't match at any position, the original String is returned
unchanged).
"
      end

      operation 3627138 "subst"
	public return_type class_ref 128130 // String
	nparams 3
	  param inout name "substituteIn" type class_ref 128130 // String
	  param inout name "substitution" type class_ref 128130 // String
	  param in name "flags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Substitutes a string for this regular expression in another string.
This method works like the Perl function of the same name.
Given a regular expression of \"a*b\", a String to substituteIn of
\"aaaabfooaaabgarplyaaabwackyb\" and the substitution String \"-\", the
resulting String returned by subst would be \"-foo-garply-wacky-\".
<p>
It is also possible to reference the contents of a parenthesized expression
with $0, $1, ... $9. A regular expression of \"http://[\\\\.\\\\w\\\\-\\\\?/~_@&=%]+\",
a String to substituteIn of \"visit us: http://www.apache.org!\" and the
substitution String \"&lt;a href=\\\"$0\\\"&gt;$0&lt;/a&gt;\", the resulting String
returned by subst would be
\"visit us: &lt;a href=\\\"http://www.apache.org\\\"&gt;http://www.apache.org&lt;/a&gt;!\".
<p>
<i>Note:</i> $0 represents the whole match.

@param substituteIn String to substitute within
@param substitution String to substitute for matches of this regular expression
@param flags One or more bitwise flags from REPLACE_*.  If the REPLACE_FIRSTONLY
flag bit is set, only the first occurrence of this regular expression is replaced.
If the bit is not set (REPLACE_ALL), all occurrences of this pattern will be
replaced. If the flag REPLACE_BACKREFERENCES is set, all backreferences will
be processed.
@return The string substituteIn with zero or more occurrences of the current
regular expression replaced with the substitution String (if this regular
expression object doesn't match at any position, the original String is returned
unchanged).
"
      end

      operation 3627266 "grep"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "search" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of Strings, whose toString representation matches a regular
expression. This method works like the Perl function of the same name.  Given
a regular expression of \"a*b\" and an array of String objects of [foo, aab, zzz,
aaaab], the array of Strings returned by grep would be [aab, aaaab].

@param search Array of Objects to search
@return Array of Strings whose toString() value matches this regular expression.
"
      end

      operation 3627394 "isNewline"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if character at i-th position in the <code>search</code> string is a newline
"
      end

      operation 3627522 "compareChars"
	private explicit_return_type "int"
	nparams 3
	  param in name "c1" explicit_type "char"
	  param in name "c2" explicit_type "char"
	  param inout name "caseIndependent" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two characters.

@param c1 first character to compare.
@param c2 second character to compare.
@param caseIndependent whether comparision is case insensitive or not.
@return negative, 0, or positive integer as the first character
        less than, equal to, or greater then the second.
"
      end
    end

    class 581122 "REProgram"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class that holds compiled regular expressions.  This is exposed mainly
for use by the recompile utility (which helps you produce precompiled
REProgram objects). You should not otherwise need to work directly with
this class.

@see RE
@see RECompiler

@author <a href=\"mailto:jonl@muppetlabs.com\">Jonathan Locke</a>
"
      classrelation 1176578 // <realization>
	relation 1176578 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1176578 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 775554 "OPT_HASBACKREFS"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 775682 "instruction"
	package explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The compiled regular expression 'program'"
      end

      attribute 775810 "lenInstruction"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The amount of the instruction buffer in use"
      end

      attribute 775938 "prefix"
	package explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Prefix string optimization"
      end

      attribute 776066 "flags"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Optimization flags (REProgram.OPT_*)"
      end

      attribute 776194 "maxParens"
	package explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3632386 "REProgram"
	public explicit_return_type ""
	nparams 1
	  param inout name "instruction" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a program object from a character array
@param instruction Character array with RE opcode instructions in it
"
      end

      operation 3632514 "REProgram"
	public explicit_return_type ""
	nparams 2
	  param in name "parens" explicit_type "int"
	  param inout name "instruction" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a program object from a character array
@param parens Count of parens in the program
@param instruction Character array with RE opcode instructions in it
"
      end

      operation 3632642 "REProgram"
	public explicit_return_type ""
	nparams 2
	  param inout name "instruction" explicit_type "char"
	multiplicity "[]"
	  param in name "lenInstruction" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a program object from a character array
@param instruction Character array with RE opcode instructions in it
@param lenInstruction Amount of instruction array in use
"
      end

      operation 3632770 "getInstructions"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the current regular expression program in a character
array that is exactly the right length to hold the program.  If there is
no program compiled yet, getInstructions() will return null.
@return A copy of the current compiled RE program
"
      end

      operation 3632898 "setInstructions"
	public explicit_return_type "void"
	nparams 2
	  param inout name "instruction" explicit_type "char"
	multiplicity "[]"
	  param in name "lenInstruction" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a new regular expression program to run.  It is this method which
performs any special compile-time search optimizations.  Currently only
two optimizations are in place - one which checks for backreferences
(so that they can be lazily allocated) and another which attempts to
find an prefix anchor string so that substantial amounts of input can
potentially be skipped without running the actual program.
@param instruction Program instruction buffer
@param lenInstruction Length of instruction buffer in use
"
      end
    end

    class 581250 "RESyntaxException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception thrown to indicate a syntax error in a regular expression.
This is a non-checked exception because you should only have problems compiling
a regular expression during development.
If you are making regular expresion programs dynamically then you can catch it
if you wish. But should not be forced to.

@author <a href=\"mailto:jonl@muppetlabs.com\">Jonathan Locke</a>
@author <a href=\"mailto:gholam@xtra.co.nz>Michael McCallum</a>
"
      classrelation 1176706 // <generalisation>
	relation 1176706 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1176706 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      operation 3633026 "RESyntaxException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.
@param s Further description of the syntax error
"
      end
    end

    class 581378 "ReaderCharacterIterator"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Encapsulates java.io.Reader as CharacterIterator

@author <a href=\"mailto:ales.novak@netbeans.com\">Ales Novak</a>
"
      classrelation 1175682 // <realization>
	relation 1175682 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1175682 // <realization>
	  b parent class_ref 580866 // CharacterIterator
      end

      classrelation 1175810 // reader (<unidirectional association>)
	relation 1175810 --->
	  a role_name "reader" const_relation private
	    comment " Underlying reader 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1175810 // reader (<unidirectional association>)
	  b parent class_ref 407298 // Reader
      end

      classrelation 1175938 // buff (<unidirectional association>)
	relation 1175938 --->
	  a role_name "buff" const_relation private
	    comment " Buffer of read chars 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1175938 // buff (<unidirectional association>)
	  b parent class_ref 166018 // StringBuffer
      end

      attribute 772482 "closed"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " read end? 
"
      end

      operation 3627650 "ReaderCharacterIterator"
	public explicit_return_type ""
	nparams 1
	  param inout name "reader" type class_ref 407298 // Reader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @param reader a Reader, which is parsed "
      end

      operation 3627778 "substring"
	public return_type class_ref 128130 // String
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a substring "
      end

      operation 3627906 "substring"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "beginIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a substring "
      end

      operation 3628034 "charAt"
	public explicit_return_type "char"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a character at the specified position. "
      end

      operation 3628162 "isEnd"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return <tt>true</tt> iff if the specified index is after the end of the character stream "
      end

      operation 3628290 "read"
	private explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reads n characters from the stream and appends them to the buffer "
      end

      operation 3628418 "readAll"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reads rest of the stream. "
      end

      operation 3628546 "ensure"
	private explicit_return_type "void"
	nparams 1
	  param in name "idx" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reads chars up to the idx "
      end
    end

    class 581506 "recompile"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "'recompile' is a command line tool that pre-compiles one or more regular expressions
for use with the regular expression matcher class 'RE'.  For example, the command
\"java recompile a*b\" produces output like this:

<pre>

   // Pre-compiled regular expression \"a*b\"
   char[] re1Instructions =
   {
       0x007c, 0x0000, 0x001a, 0x007c, 0x0000, 0x000d, 0x0041,
       0x0001, 0x0004, 0x0061, 0x007c, 0x0000, 0x0003, 0x0047,
       0x0000, 0xfff6, 0x007c, 0x0000, 0x0003, 0x004e, 0x0000,
       0x0003, 0x0041, 0x0001, 0x0004, 0x0062, 0x0045, 0x0000,
       0x0000,
   };

   REProgram re1 = new REProgram(re1Instructions);

</pre>

By pasting this output into your code, you can construct a regular expression matcher
(RE) object directly from the pre-compiled data (the character array re1), thus avoiding
the overhead of compiling the expression at runtime.  For example:

<pre>

   RE r = new RE(re1);

</pre>

@see RE
@see RECompiler

@author <a href=\"mailto:jonl@muppetlabs.com\">Jonathan Locke</a>
"
      operation 3628674 "main"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "arg" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main application entrypoint.
@param arg Command line arguments
"
      end
    end

    class 581634 "RECompiler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A regular expression compiler class.  This class compiles a pattern string into a
regular expression program interpretable by the RE evaluator class.  The 'recompile'
command line tool uses this compiler to pre-compile regular expressions for use
with RE.  For a description of the syntax accepted by RECompiler and what you can
do with regular expressions, see the documentation for the RE matcher class.

@see RE
@see recompile

@author <a href=\"mailto:jonl@muppetlabs.com\">Jonathan Locke</a>
@author <a href=\"mailto:gholam@xtra.co.nz\">Michael McCallum</a>
"
      attribute 772610 "instruction"
	package explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The compiled program
 The compiled RE 'program' instruction buffer"
      end

      attribute 772738 "lenInstruction"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The amount of the program buffer currently in use"
      end

      classrelation 1176066 // pattern (<unidirectional association>)
	relation 1176066 --->
	  a role_name "pattern" package
	    comment " Input state for compiling regular expression
 Input string"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1176066 // pattern (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 772866 "len"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Length of the pattern string"
      end

      attribute 772994 "idx"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Current input index into ac"
      end

      attribute 773122 "parens"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Total number of paren pairs"
      end

      attribute 773250 "NODE_NORMAL"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Node flags
 No flags (nothing special)"
      end

      attribute 773378 "NODE_NULLABLE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " True if node is potentially null"
      end

      attribute 773506 "NODE_TOPLEVEL"
	class_attribute const_attribute package explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " True if top level expr"
      end

      attribute 773634 "ESC_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xffff0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Special types of 'escapes'
 Escape complexity mask"
      end

      attribute 773762 "ESC_BACKREF"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xfffff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Escape is really a backreference"
      end

      attribute 773890 "ESC_COMPLEX"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xffffe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Escape isn't really a true character"
      end

      attribute 774018 "ESC_CLASS"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xffffd"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Escape represents a whole class of characters"
      end

      attribute 774146 "maxBrackets"
	package explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " {m,n} stacks
 Maximum number of bracket pairs"
      end

      attribute 774274 "bracketUnbounded"
	class_attribute const_attribute package explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unbounded value"
      end

      attribute 774402 "brackets"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of bracket sets"
      end

      attribute 774530 "bracketStart"
	package explicit_type "int"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Starting point"
      end

      attribute 774658 "bracketEnd"
	package explicit_type "int"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Ending point"
      end

      attribute 774786 "bracketMin"
	package explicit_type "int"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Minimum number of matches"
      end

      attribute 774914 "bracketOpt"
	package explicit_type "int"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Additional optional matches"
      end

      classrelation 1176194 // hashPOSIX (<unidirectional association>)
	relation 1176194 --->
	  a role_name "hashPOSIX" init_value " new Hashtable()" class_relation package
	    comment " Lookup table for POSIX character class names
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1176194 // hashPOSIX (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      extra_member 140418 "initialization"
	
	cpp "" ""
	java "  static {
        hashPOSIX.put(\"alnum\",     new Character(RE.POSIX_CLASS_ALNUM));
        hashPOSIX.put(\"alpha\",     new Character(RE.POSIX_CLASS_ALPHA));
        hashPOSIX.put(\"blank\",     new Character(RE.POSIX_CLASS_BLANK));
        hashPOSIX.put(\"cntrl\",     new Character(RE.POSIX_CLASS_CNTRL));
        hashPOSIX.put(\"digit\",     new Character(RE.POSIX_CLASS_DIGIT));
        hashPOSIX.put(\"graph\",     new Character(RE.POSIX_CLASS_GRAPH));
        hashPOSIX.put(\"lower\",     new Character(RE.POSIX_CLASS_LOWER));
        hashPOSIX.put(\"print\",     new Character(RE.POSIX_CLASS_PRINT));
        hashPOSIX.put(\"punct\",     new Character(RE.POSIX_CLASS_PUNCT));
        hashPOSIX.put(\"space\",     new Character(RE.POSIX_CLASS_SPACE));
        hashPOSIX.put(\"upper\",     new Character(RE.POSIX_CLASS_UPPER));
        hashPOSIX.put(\"xdigit\",    new Character(RE.POSIX_CLASS_XDIGIT));
        hashPOSIX.put(\"javastart\", new Character(RE.POSIX_CLASS_JSTART));
        hashPOSIX.put(\"javapart\",  new Character(RE.POSIX_CLASS_JPART));
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 3628802 "RECompiler"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.  Creates (initially empty) storage for a regular expression program.
"
      end

      operation 3628930 "ensure"
	package explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that n more characters can fit in the program buffer.
If n more can't fit, then the size is doubled until it can.
@param n Number of additional characters to ensure will fit.
"
      end

      operation 3629058 "emit"
	package explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emit a single character into the program stream.
@param c Character to add
"
      end

      operation 3629186 "nodeInsert"
	package explicit_return_type "void"
	nparams 3
	  param in name "opcode" explicit_type "char"
	  param in name "opdata" explicit_type "int"
	  param in name "insertAt" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts a node with a given opcode and opdata at insertAt.  The node relative next
pointer is initialized to 0.
@param opcode Opcode for new node
@param opdata Opdata for new node (only the low 16 bits are currently used)
@param insertAt Index at which to insert the new node in the program
"
      end

      operation 3629314 "setNextOfEnd"
	package explicit_return_type "void"
	nparams 2
	  param in name "node" explicit_type "int"
	  param in name "pointTo" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a node to the end of a node chain
@param node Start of node chain to traverse
@param pointTo Node to have the tail of the chain point to
"
      end

      operation 3629442 "node"
	package explicit_return_type "int"
	nparams 2
	  param in name "opcode" explicit_type "char"
	  param in name "opdata" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new node
@param opcode Opcode for node
@param opdata Opdata for node (only the low 16 bits are currently used)
@return Index of new node in program
"
      end

      operation 3629570 "internalError"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 195842 // Error
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a new internal error exception
@exception Error Thrown in the event of an internal error.
"
      end

      operation 3629698 "syntaxError"
	package explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a new syntax error exception
@exception RESyntaxException Thrown if the regular expression has invalid syntax.
"
      end

      operation 3629826 "allocBrackets"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocate storage for brackets only as needed
"
      end

      operation 3629954 "reallocBrackets"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Enlarge storage for brackets only as needed. "
      end

      operation 3630082 "bracket"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Match bracket {m,n} expression put results in bracket member variables
@exception RESyntaxException Thrown if the regular expression has invalid syntax.
"
      end

      operation 3630210 "escape"
	package explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Match an escape sequence.  Handles quoted chars and octal escapes as well
as normal escape characters.  Always advances the input stream by the
right amount. This code \"understands\" the subtle difference between an
octal escape and a backref.  You can access the type of ESC_CLASS or
ESC_COMPLEX or ESC_BACKREF by looking at pattern[idx - 1].
@return ESC_* code or character if simple escape
@exception RESyntaxException Thrown if the regular expression has invalid syntax.
"
      end

      operation 3630338 "characterClass"
	package explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compile a character class
@return Index of class node
@exception RESyntaxException Thrown if the regular expression has invalid syntax.
"
      end

      operation 3630466 "atom"
	package explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Absorb an atomic character string.  This method is a little tricky because
it can un-include the last character of string if a closure operator follows.
This is correct because *+? have higher precedence than concatentation (thus
ABC* means AB(C*) and NOT (ABC)*).
@return Index of new atom node
@exception RESyntaxException Thrown if the regular expression has invalid syntax.
"
      end

      operation 3630594 "terminal"
	package explicit_return_type "int"
	nparams 1
	  param inout name "flags" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Match a terminal node.
@param flags Flags
@return Index of terminal node (closeable)
@exception RESyntaxException Thrown if the regular expression has invalid syntax.
"
      end

      operation 3630722 "closure"
	package explicit_return_type "int"
	nparams 1
	  param inout name "flags" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compile a possibly closured terminal
@param flags Flags passed by reference
@return Index of closured node
@exception RESyntaxException Thrown if the regular expression has invalid syntax.
"
      end

      operation 3630850 "branch"
	package explicit_return_type "int"
	nparams 1
	  param inout name "flags" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compile one branch of an or operator (implements concatenation)
@param flags Flags passed by reference
@return Pointer to branch node
@exception RESyntaxException Thrown if the regular expression has invalid syntax.
"
      end

      operation 3630978 "expr"
	package explicit_return_type "int"
	nparams 1
	  param inout name "flags" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compile an expression with possible parens around it.  Paren matching
is done at this level so we can tie the branch tails together.
@param flags Flag value passed by reference
@return Node index of expression in instruction array
@exception RESyntaxException Thrown if the regular expression has invalid syntax.
"
      end

      operation 3631106 "compile"
	public return_type class_ref 581122 // REProgram
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compiles a regular expression pattern into a program runnable by the pattern
matcher class 'RE'.
@param pattern Regular expression pattern to compile (see RECompiler class
for details).
@return A compiled regular expression program.
@exception RESyntaxException Thrown if the regular expression has invalid syntax.
@see RECompiler
@see RE
"
      end

      class 581762 "RERange"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 775042 "size"
	  package explicit_type "int"
	  init_value " 16"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Capacity of current range arrays"
	end

	attribute 775170 "minRange"
	  package explicit_type "int"
	  multiplicity "[]"
	  init_value " new int[size]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Range minima"
	end

	attribute 775298 "maxRange"
	  package explicit_type "int"
	  multiplicity "[]"
	  init_value " new int[size]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Range maxima"
	end

	attribute 775426 "num"
	  package explicit_type "int"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Number of range array elements in use"
	end

	operation 3631234 "delete"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Deletes the range at a given index from the range lists
@param index Index of range to delete from minRange and maxRange arrays.
"
	end

	operation 3631362 "merge"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "min" explicit_type "int"
	    param in name "max" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Merges a range into the range list, coalescing ranges if possible.
@param min Minimum end of range
@param max Maximum end of range
"
	end

	operation 3631490 "remove"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "min" explicit_type "int"
	    param in name "max" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes a range by deleting or shrinking all other ranges
@param min Minimum end of range
@param max Maximum end of range
"
	end

	operation 3631618 "include"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "min" explicit_type "int"
	    param in name "max" explicit_type "int"
	    param inout name "include" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Includes (or excludes) the range from min to max, inclusive.
@param min Minimum end of range
@param max Maximum end of range
@param include True if range should be included.  False otherwise.
"
	end

	operation 3631746 "include"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "minmax" explicit_type "char"
	    param inout name "include" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Includes a range with the same min and max
@param minmax Minimum and maximum end of range (inclusive)
@param include True if range should be included.  False otherwise.
"
	end
      end
    end

    class 581890 "REDebugCompiler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A subclass of RECompiler which can dump a regular expression program
for debugging purposes.

@author <a href=\"mailto:jonl@muppetlabs.com\">Jonathan Locke</a>
"
      classrelation 1176322 // <generalisation>
	relation 1176322 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1176322 // <generalisation>
	  b parent class_ref 581634 // RECompiler
      end

      classrelation 1176450 // hashOpcode (<unidirectional association>)
	relation 1176450 --->
	  a role_name "hashOpcode" init_value " new Hashtable()" class_relation package
	    comment "
Mapping from opcodes to descriptive strings

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1176450 // hashOpcode (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      extra_member 140546 "initialization"
	
	cpp "" ""
	java "  static {
        hashOpcode.put(new Integer(RE.OP_RELUCTANTSTAR),    \"OP_RELUCTANTSTAR\");
        hashOpcode.put(new Integer(RE.OP_RELUCTANTPLUS),    \"OP_RELUCTANTPLUS\");
        hashOpcode.put(new Integer(RE.OP_RELUCTANTMAYBE),   \"OP_RELUCTANTMAYBE\");
        hashOpcode.put(new Integer(RE.OP_END),              \"OP_END\");
        hashOpcode.put(new Integer(RE.OP_BOL),              \"OP_BOL\");
        hashOpcode.put(new Integer(RE.OP_EOL),              \"OP_EOL\");
        hashOpcode.put(new Integer(RE.OP_ANY),              \"OP_ANY\");
        hashOpcode.put(new Integer(RE.OP_ANYOF),            \"OP_ANYOF\");
        hashOpcode.put(new Integer(RE.OP_BRANCH),           \"OP_BRANCH\");
        hashOpcode.put(new Integer(RE.OP_ATOM),             \"OP_ATOM\");
        hashOpcode.put(new Integer(RE.OP_STAR),             \"OP_STAR\");
        hashOpcode.put(new Integer(RE.OP_PLUS),             \"OP_PLUS\");
        hashOpcode.put(new Integer(RE.OP_MAYBE),            \"OP_MAYBE\");
        hashOpcode.put(new Integer(RE.OP_NOTHING),          \"OP_NOTHING\");
        hashOpcode.put(new Integer(RE.OP_GOTO),             \"OP_GOTO\");
        hashOpcode.put(new Integer(RE.OP_ESCAPE),           \"OP_ESCAPE\");
        hashOpcode.put(new Integer(RE.OP_OPEN),             \"OP_OPEN\");
        hashOpcode.put(new Integer(RE.OP_CLOSE),            \"OP_CLOSE\");
        hashOpcode.put(new Integer(RE.OP_BACKREF),          \"OP_BACKREF\");
        hashOpcode.put(new Integer(RE.OP_POSIXCLASS),       \"OP_POSIXCLASS\");
        hashOpcode.put(new Integer(RE.OP_OPEN_CLUSTER),      \"OP_OPEN_CLUSTER\");
        hashOpcode.put(new Integer(RE.OP_CLOSE_CLUSTER),      \"OP_CLOSE_CLUSTER\");
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 3631874 "opcodeToString"
	package return_type class_ref 128130 // String
	nparams 1
	  param in name "opcode" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a descriptive string for an opcode.
@param opcode Opcode to convert to a string
@return Description of opcode
"
      end

      operation 3632002 "charToString"
	package return_type class_ref 128130 // String
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string describing a (possibly unprintable) character.
@param c Character to convert to a printable representation
@return String representation of character
"
      end

      operation 3632130 "nodeToString"
	package return_type class_ref 128130 // String
	nparams 1
	  param in name "node" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a descriptive string for a node in a regular expression program.
@param node Node to describe
@return Description of node
"
      end

      operation 3632258 "dumpProgram"
	public explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 195330 // PrintWriter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts a node with a given opcode and opdata at insertAt.  The node relative next
pointer is initialized to 0.
@param opcode Opcode for new node
@param opdata Opdata for new node (only the low 16 bits are currently used)
@param insertAt Index at which to insert the new node in the program * /
void nodeInsert(char opcode, int opdata, int insertAt) {
System.out.println( \"====> \" + opcode + \" \" + opdata + \" \" + insertAt );
PrintWriter writer = new PrintWriter( System.out );
dumpProgram( writer );
super.nodeInsert( opcode, opdata, insertAt );
System.out.println( \"====< \" );
dumpProgram( writer );
writer.flush();
}/*

Appends a node to the end of a node chain
@param node Start of node chain to traverse
@param pointTo Node to have the tail of the chain point to * /
void setNextOfEnd(int node, int pointTo) {
System.out.println( \"====> \" + node + \" \" + pointTo );
PrintWriter writer = new PrintWriter( System.out );
dumpProgram( writer );
super.setNextOfEnd( node, pointTo );
System.out.println( \"====< \" );
dumpProgram( writer );
writer.flush();
}/*

Dumps the current program to a PrintWriter
@param p PrintWriter for program dump output
"
      end
    end

    class 582018 "RETest"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Data driven (and optionally interactive) testing harness to exercise regular
expression compiler and matching engine.

@author <a href=\"mailto:jonl@muppetlabs.com\">Jonathan Locke</a>
@author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>
@author <a href=\"mailto:gholam@xtra.co.nz\">Michael McCallum</a>
"
      attribute 776322 "showSuccesses"
	class_attribute const_attribute package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " True if we want to see output from success cases
"
      end

      classrelation 1176834 // NEW_LINE (<unidirectional association>)
	relation 1176834 --->
	  a role_name "NEW_LINE" init_value " System.getProperty( \"line.separator\" )" class_relation const_relation package
	    comment " A new line character.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1176834 // NEW_LINE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1176962 // compiler (<unidirectional association>)
	relation 1176962 --->
	  a role_name "compiler" init_value " new REDebugCompiler()" package
	    comment " Construct a debug compiler
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1176962 // compiler (<unidirectional association>)
	  b parent class_ref 581890 // REDebugCompiler
      end

      operation 3633154 "main"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "args" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main program entrypoint.  If an argument is given, it will be compiled
and interactive matching will ensue.  If no argument is given, the
file RETest.txt will be used as automated testing input.
@param args Command line arguments (optional regular expression)
"
      end

      operation 3633282 "test"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "args" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Testing entrypoint.
@param args Command line arguments
@exception Exception thrown in case of error
"
      end

      operation 3633410 "RETest"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor
"
      end

      operation 3633538 "runInteractiveTests"
	package explicit_return_type "void"
	nparams 1
	  param inout name "expr" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compile and test matching against a single expression
@param expr Expression to compile and test
"
      end

      operation 3633666 "die"
	package explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exit with a fatal error.
@param s Last famous words before exiting
"
      end

      operation 3633794 "fail"
	package explicit_return_type "void"
	nparams 2
	  param inout name "log" type class_ref 166018 // StringBuffer
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fail with an error. Will print a big failure message to System.out.

@param log Output before failure
@param s Failure description
"
      end

      operation 3633922 "fail"
	package explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fail with an error. Will print a big failure message to System.out.

@param s Failure description
"
      end

      operation 3634050 "say"
	package explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Say something to standard out
@param s What to say
"
      end

      operation 3634178 "showParens"
	package explicit_return_type "void"
	nparams 1
	  param inout name "r" type class_ref 580994 // RE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump parenthesized subexpressions found by a regular expression matcher object
@param r Matcher object with results to show
"
      end

      attribute 776450 "testCount"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "number in automated test

"
      end

      attribute 776578 "failures"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Count of failures in automated test

"
      end

      operation 3634306 "runAutomatedTests"
	package explicit_return_type "void"
	nparams 1
	  param inout name "testDocument" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Run automated tests in RETest.txt file (from Perl 4.0 test battery)
@exception Exception thrown in case of error
"
      end

      operation 3634434 "testOther"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Run automated unit test
@exception Exception thrown in case of error
"
      end

      operation 3634562 "testPrecompiledRE"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3634690 "testSplitAndGrep"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3634818 "testSubst"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3634946 "assertEquals"
	public explicit_return_type "void"
	nparams 3
	  param inout name "message" type class_ref 128130 // String
	  param inout name "expected" type class_ref 128130 // String
	  param inout name "actual" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3635074 "assertEquals"
	public explicit_return_type "void"
	nparams 3
	  param inout name "message" type class_ref 128130 // String
	  param in name "expected" explicit_type "int"
	  param in name "actual" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3635202 "getExpectedResult"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "yesno" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts yesno string to boolean.
@param yesno string representation of expected result
@return true if yesno is \"YES\", false if yesno is \"NO\"
        stops program otherwise.
"
      end

      operation 3635330 "findNextTest"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "br" type class_ref 141314 // BufferedReader
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds next test description in a given script.
@param br <code>BufferedReader</code> for a script file
@return strign tag for next test description
@exception IOException if some io problems occured
"
      end

      operation 3635458 "getNextTestCase"
	private return_type class_ref 582146 // RETestCase
	nparams 1
	  param inout name "br" type class_ref 141314 // BufferedReader
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates testcase for the next test description in the script file.
@param br <code>BufferedReader</code> for script file.
@return a new tescase or null.
@exception IOException if some io problems occured
"
      end
    end

    class 582146 "RETestCase"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 1177090 // log (<unidirectional association>)
	relation 1177090 --->
	  a role_name "log" init_value " new StringBuffer()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1177090 // log (<unidirectional association>)
	  b parent class_ref 166018 // StringBuffer
      end

      attribute 776706 "number"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1177218 // tag (<unidirectional association>)
	relation 1177218 --->
	  a role_name "tag" const_relation private
	    comment " number from script file"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1177218 // tag (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1177346 // pattern (<unidirectional association>)
	relation 1177346 --->
	  a role_name "pattern" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1177346 // pattern (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1177474 // toMatch (<unidirectional association>)
	relation 1177474 --->
	  a role_name "toMatch" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1177474 // toMatch (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 776834 "badPattern"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 776962 "shouldMatch"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1177602 // parens (<unidirectional association>)
	relation 1177602 --->
	  a role_name "parens" multiplicity "[]" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1177602 // parens (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1177730 // test (<unidirectional association>)
	relation 1177730 --->
	  a role_name "test" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1177730 // test (<unidirectional association>)
	  b parent class_ref 582018 // RETest
      end

      classrelation 1177858 // regexp (<unidirectional association>)
	relation 1177858 --->
	  a role_name "regexp" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1177858 // regexp (<unidirectional association>)
	  b parent class_ref 580994 // RE
      end

      operation 3635586 "RETestCase"
	public explicit_return_type ""
	nparams 7
	  param inout name "test" type class_ref 582018 // RETest
	  param inout name "tag" type class_ref 128130 // String
	  param inout name "pattern" type class_ref 128130 // String
	  param inout name "toMatch" type class_ref 128130 // String
	  param inout name "badPattern" explicit_type "boolean"
	  param inout name "shouldMatch" explicit_type "boolean"
	  param inout name "parens" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3635714 "runTest"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3635842 "testCreation"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3635970 "testMatch"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3636098 "checkResult"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "result" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3636226 "checkParens"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3636354 "tryMatchUsingCI"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "matchAgainst" type class_ref 580866 // CharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3636482 "assertEquals"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "log" type class_ref 166018 // StringBuffer
	  param inout name "message" type class_ref 128130 // String
	  param inout name "expected" type class_ref 128130 // String
	  param inout name "actual" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3636610 "assertEquals"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "log" type class_ref 166018 // StringBuffer
	  param inout name "message" type class_ref 128130 // String
	  param in name "expected" explicit_type "int"
	  param in name "actual" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3636738 "success"
	package explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Show a success
@param s Success story
"
      end
    end

    class 582274 "REUtil"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is a class that contains utility helper methods for this package.

@author <a href=\"mailto:jonl@muppetlabs.com\">Jonathan Locke</a>
"
      classrelation 1177986 // complexPrefix (<unidirectional association>)
	relation 1177986 --->
	  a role_name "complexPrefix" init_value " \"complex:\"" class_relation const_relation private
	    comment " complex: 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1177986 // complexPrefix (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 3636866 "createRE"
	class_operation public return_type class_ref 580994 // RE
	nparams 2
	  param inout name "expression" type class_ref 128130 // String
	  param in name "matchFlags" explicit_type "int"
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a regular expression, permitting simple or complex syntax
@param expression The expression, beginning with a prefix if it's complex or
having no prefix if it's simple
@param matchFlags Matching style flags
@return The regular expression object
@exception RESyntaxException thrown in case of error
"
      end

      operation 3636994 "createRE"
	class_operation public return_type class_ref 580994 // RE
	nparams 1
	  param inout name "expression" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 581250 // RESyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a regular expression, permitting simple or complex syntax
@param expression The expression, beginning with a prefix if it's complex or
having no prefix if it's simple
@return The regular expression object
@exception RESyntaxException thrown in case of error
"
      end
    end

    class 582402 "StreamCharacterIterator"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Encapsulates java.io.InputStream as CharacterIterator.

@author <a href=\"mailto:ales.novak@netbeans.com\">Ales Novak</a>
"
      classrelation 1178114 // <realization>
	relation 1178114 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1178114 // <realization>
	  b parent class_ref 580866 // CharacterIterator
      end

      classrelation 1178242 // is (<unidirectional association>)
	relation 1178242 --->
	  a role_name "is" const_relation private
	    comment " Underlying is 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1178242 // is (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      classrelation 1178370 // buff (<unidirectional association>)
	relation 1178370 --->
	  a role_name "buff" const_relation private
	    comment " Buffer of read chars 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1178370 // buff (<unidirectional association>)
	  b parent class_ref 166018 // StringBuffer
      end

      attribute 777090 "closed"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " read end? 
"
      end

      operation 3637122 "StreamCharacterIterator"
	public explicit_return_type ""
	nparams 1
	  param inout name "is" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @param is an InputStream, which is parsed "
      end

      operation 3637250 "substring"
	public return_type class_ref 128130 // String
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a substring "
      end

      operation 3637378 "substring"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "beginIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a substring "
      end

      operation 3637506 "charAt"
	public explicit_return_type "char"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a character at the specified position. "
      end

      operation 3637634 "isEnd"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return <tt>true</tt> iff if the specified index is after the end of the character stream "
      end

      operation 3637762 "read"
	private explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reads n characters from the stream and appends them to the buffer "
      end

      operation 3637890 "readAll"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reads rest of the stream. "
      end

      operation 3638018 "ensure"
	private explicit_return_type "void"
	nparams 1
	  param in name "idx" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reads chars up to the idx "
      end
    end

    class 582530 "StringCharacterIterator"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Encapsulates String as CharacterIterator.

@author <a href=\"mailto:ales.novak@netbeans.com\">Ales Novak</a>
"
      classrelation 1178498 // <realization>
	relation 1178498 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1178498 // <realization>
	  b parent class_ref 580866 // CharacterIterator
      end

      classrelation 1178626 // src (<unidirectional association>)
	relation 1178626 --->
	  a role_name "src" const_relation private
	    comment " encapsulated 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1178626 // src (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 3638146 "StringCharacterIterator"
	public explicit_return_type ""
	nparams 1
	  param inout name "src" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @param src - encapsulated String "
      end

      operation 3638274 "substring"
	public return_type class_ref 128130 // String
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a substring "
      end

      operation 3638402 "substring"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "beginIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a substring "
      end

      operation 3638530 "charAt"
	public explicit_return_type "char"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a character at the specified position. "
      end

      operation 3638658 "isEnd"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return <tt>true</tt> iff if the specified index is after the end of the character stream "
      end
    end
  end

  deploymentview 149634 "internal"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 398466 "CharacterIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 580866 // CharacterIterator
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 398594 "CharacterArrayCharacterIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 580738 // CharacterArrayCharacterIterator
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 398722 "RE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.Vector;
${definition}"
      associated_elems
	class_ref 580994 // RE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 398850 "ReaderCharacterIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Reader;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 581378 // ReaderCharacterIterator
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 398978 "recompile"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.regexp.internal.RECompiler;
import com.sun.org.apache.regexp.internal.RESyntaxException;
${definition}"
      associated_elems
	class_ref 581506 // recompile
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 399106 "RECompiler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.regexp.internal.RE;
import java.util.Hashtable;
${definition}"
      associated_elems
	class_ref 581634 // RECompiler
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 399234 "REDebugCompiler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.PrintWriter;
import java.util.Hashtable;
${definition}"
      associated_elems
	class_ref 581890 // REDebugCompiler
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 399362 "REProgram"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 581122 // REProgram
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 399490 "RESyntaxException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 581250 // RESyntaxException
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 399618 "RETest"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.File;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.io.StringBufferInputStream;
import java.io.StringReader;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 582018 // RETest
	class_ref 582146 // RETestCase
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 399746 "REUtil"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 582274 // REUtil
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 399874 "StreamCharacterIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 582402 // StreamCharacterIterator
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 400002 "StringCharacterIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 582530 // StringCharacterIterator
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end
  end
end
