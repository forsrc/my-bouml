class Transform
!!!7224834.java!!!	packedBytes(inout bytes : byte [[]]) : long
            if (bytes.length > PACKED_BYTE_MAX_LENGTH)  return 0;
            long pb = 0;
            int bitset = 0;
            for (int i = 0; i < bytes.length; i++) {
                int b = bytes[i] & 0xFF;
                bitset |= b;
                pb |= (long)b << (i * PACKED_BYTE_SIZE);
            }
            if (!inRange(bitset))
                return 0;
            return pb;
!!!7224962.java!!!	packedBytes(in b0 : int, in b1 : int) : long
            assert(inRange(b0 | b1));
            return (  (b0 << 0*PACKED_BYTE_SIZE)
                    | (b1 << 1*PACKED_BYTE_SIZE));
!!!7225090.java!!!	packedBytes(in b0 : int, in b1 : int, in b2 : int) : long
            assert(inRange(b0 | b1 | b2));
            return (  (b0 << 0*PACKED_BYTE_SIZE)
                    | (b1 << 1*PACKED_BYTE_SIZE)
                    | (b2 << 2*PACKED_BYTE_SIZE));
!!!7225218.java!!!	packedBytes(in b0 : int, in b1 : int, in b2 : int, in b3 : int) : long
            assert(inRange(b0 | b1 | b2 | b3));
            return (  (b0 << 0*PACKED_BYTE_SIZE)
                    | (b1 << 1*PACKED_BYTE_SIZE)
                    | (b2 << 2*PACKED_BYTE_SIZE)
                    | (b3 << 3*PACKED_BYTE_SIZE));
!!!7225346.java!!!	inRange(in bitset : int) : boolean
            assert((bitset & 0xFF) == bitset);  // incoming values must fit in *unsigned* byte
            return ((bitset & ~PACKED_BYTE_MASK) == 0);
!!!7225474.java!!!	fullBytes(inout  : int...byteValues) : byte
            byte[] bytes = new byte[byteValues.length];
            int i = 0;
            for (int bv : byteValues) {
                bytes[i++] = bval(bv);
            }
            assert(packedBytes(bytes) == 0);
            return bytes;
!!!7225602.java!!!	byteAt(in i : int) : byte
            long pb = packedBytes;
            if (pb == 0) {
                if (i >= fullBytes.length)  return 0;
                return fullBytes[i];
            }
            assert(fullBytes == null);
            if (i > PACKED_BYTE_MAX_LENGTH)  return 0;
            int pos = (i * PACKED_BYTE_SIZE);
            return (byte)((pb >>> pos) & PACKED_BYTE_MASK);
!!!7225730.java!!!	kind() : LambdaFormEditor::Transform::Kind
 return Kind.values()[byteAt(0)];
!!!7225858.java!!!	Transform(in packedBytes : long, inout fullBytes : byte [[]], inout result : LambdaForm)
            super(result);
            this.packedBytes = packedBytes;
            this.fullBytes = fullBytes;
!!!7225986.java!!!	Transform(in packedBytes : long)
            this(packedBytes, null, null);
            assert(packedBytes != 0);
!!!7226114.java!!!	Transform(inout fullBytes : byte [[]])
            this(0, fullBytes, null);
!!!7226242.java!!!	bval(in b : int) : byte
            assert((b & 0xFF) == b);  // incoming value must fit in *unsigned* byte
            return (byte)b;
!!!7226370.java!!!	bval(inout k : LambdaFormEditor::Transform::Kind) : byte
            return bval(k.ordinal());
!!!7226498.java!!!	of(inout k : LambdaFormEditor::Transform::Kind, in b1 : int) : LambdaFormEditor::Transform
            byte b0 = bval(k);
            if (inRange(b0 | b1))
                return new Transform(packedBytes(b0, b1));
            else
                return new Transform(fullBytes(b0, b1));
!!!7226626.java!!!	of(inout k : LambdaFormEditor::Transform::Kind, in b1 : int, in b2 : int) : LambdaFormEditor::Transform
            byte b0 = (byte) k.ordinal();
            if (inRange(b0 | b1 | b2))
                return new Transform(packedBytes(b0, b1, b2));
            else
                return new Transform(fullBytes(b0, b1, b2));
!!!7226754.java!!!	of(inout k : LambdaFormEditor::Transform::Kind, in b1 : int, in b2 : int, in b3 : int) : LambdaFormEditor::Transform
            byte b0 = (byte) k.ordinal();
            if (inRange(b0 | b1 | b2 | b3))
                return new Transform(packedBytes(b0, b1, b2, b3));
            else
                return new Transform(fullBytes(b0, b1, b2, b3));
!!!7226882.java!!!	of(inout k : LambdaFormEditor::Transform::Kind, inout  : int...b123) : LambdaFormEditor::Transform
            return ofBothArrays(k, b123, NO_BYTES);
!!!7227010.java!!!	of(inout k : LambdaFormEditor::Transform::Kind, in b1 : int, inout b234 : byte [[]]) : LambdaFormEditor::Transform
            return ofBothArrays(k, new int[]{ b1 }, b234);
!!!7227138.java!!!	of(inout k : LambdaFormEditor::Transform::Kind, in b1 : int, in b2 : int, inout b345 : byte [[]]) : LambdaFormEditor::Transform
            return ofBothArrays(k, new int[]{ b1, b2 }, b345);
!!!7227266.java!!!	ofBothArrays(inout k : LambdaFormEditor::Transform::Kind, inout b123 : int [[]], inout b456 : byte [[]]) : LambdaFormEditor::Transform
            byte[] fullBytes = new byte[1 + b123.length + b456.length];
            int i = 0;
            fullBytes[i++] = bval(k);
            for (int bv : b123) {
                fullBytes[i++] = bval(bv);
            }
            for (byte bv : b456) {
                fullBytes[i++] = bv;
            }
            long packedBytes = packedBytes(fullBytes);
            if (packedBytes != 0)
                return new Transform(packedBytes);
            else
                return new Transform(fullBytes);
!!!7227394.java!!!	withResult(inout result : LambdaForm) : LambdaFormEditor::Transform
            return new Transform(this.packedBytes, this.fullBytes, result);
!!!7227522.java!!!	equals(inout obj : Object) : boolean
            return obj instanceof Transform && equals((Transform)obj);
!!!7227650.java!!!	equals(inout that : LambdaFormEditor::Transform) : boolean
            return this.packedBytes == that.packedBytes && Arrays.equals(this.fullBytes, that.fullBytes);
!!!7227778.java!!!	hashCode() : int
            if (packedBytes != 0) {
                assert(fullBytes == null);
                return Long.hashCode(packedBytes);
            }
            return Arrays.hashCode(fullBytes);
!!!7227906.java!!!	toString() : String
            StringBuilder buf = new StringBuilder();
            long bits = packedBytes;
            if (bits != 0) {
                buf.append("(");
                while (bits != 0) {
                    buf.append(bits & PACKED_BYTE_MASK);
                    bits >>>= PACKED_BYTE_SIZE;
                    if (bits != 0)  buf.append(",");
                }
                buf.append(")");
            }
            if (fullBytes != null) {
                buf.append("unpacked");
                buf.append(Arrays.toString(fullBytes));
            }
            LambdaForm result = get();
            if (result != null) {
                buf.append(" result=");
                buf.append(result);
            }
            return buf.toString();
