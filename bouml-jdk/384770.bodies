class LazyActionMap
!!!11028738.java!!!	installLazyActionMap(inout c : JComponent, inout loaderClass : Class, inout defaultsKey : String) : void
        ActionMap map = (ActionMap)UIManager.get(defaultsKey);
        if (map == null) {
            map = new LazyActionMap(loaderClass);
            UIManager.getLookAndFeelDefaults().put(defaultsKey, map);
        }
        SwingUtilities.replaceUIActionMap(c, map);
!!!11028866.java!!!	getActionMap(inout loaderClass : Class, inout defaultsKey : String) : ActionMap
        ActionMap map = (ActionMap)UIManager.get(defaultsKey);
        if (map == null) {
            map = new LazyActionMap(loaderClass);
            UIManager.getLookAndFeelDefaults().put(defaultsKey, map);
        }
        return map;
!!!11028994.java!!!	LazyActionMap(inout loader : Class)
        _loader = loader;
!!!11029122.java!!!	put(inout action : Action) : void
        put(action.getValue(Action.NAME), action);
!!!11029250.java!!!	put(inout key : Object, inout action : Action) : void
        loadIfNecessary();
        super.put(key, action);
!!!11029378.java!!!	get(inout key : Object) : Action
        loadIfNecessary();
        return super.get(key);
!!!11029506.java!!!	remove(inout key : Object) : void
        loadIfNecessary();
        super.remove(key);
!!!11029634.java!!!	clear() : void
        loadIfNecessary();
        super.clear();
!!!11029762.java!!!	keys() : Object
        loadIfNecessary();
        return super.keys();
!!!11029890.java!!!	size() : int
        loadIfNecessary();
        return super.size();
!!!11030018.java!!!	allKeys() : Object
        loadIfNecessary();
        return super.allKeys();
!!!11030146.java!!!	setParent(inout map : ActionMap) : void
        loadIfNecessary();
        super.setParent(map);
!!!11030274.java!!!	loadIfNecessary() : void
        if (_loader != null) {
            Object loader = _loader;

            _loader = null;
            Class<?> klass = (Class<?>)loader;
            try {
                Method method = klass.getDeclaredMethod("loadActionMap",
                                      new Class[] { LazyActionMap.class });
                method.invoke(klass, new Object[] { this });
            } catch (NoSuchMethodException nsme) {
                assert false : "LazyActionMap unable to load actions " +
                        klass;
            } catch (IllegalAccessException iae) {
                assert false : "LazyActionMap unable to load actions " +
                        iae;
            } catch (InvocationTargetException ite) {
                assert false : "LazyActionMap unable to load actions " +
                        ite;
            } catch (IllegalArgumentException iae) {
                assert false : "LazyActionMap unable to load actions " +
                        iae;
            }
        }
