class ImageReaderWriterSpi
!!!1684866.java!!!	ImageReaderWriterSpi(inout vendorName : String, inout version : String, inout names : String [[]], inout suffixes : String [[]], inout MIMETypes : String [[]], inout pluginClassName : String, inout supportsStandardStreamMetadataFormat : boolean, inout nativeStreamMetadataFormatName : String, inout nativeStreamMetadataFormatClassName : String, inout extraStreamMetadataFormatNames : String [[]], inout extraStreamMetadataFormatClassNames : String [[]], inout supportsStandardImageMetadataFormat : boolean, inout nativeImageMetadataFormatName : String, inout nativeImageMetadataFormatClassName : String, inout extraImageMetadataFormatNames : String [[]], inout extraImageMetadataFormatClassNames : String [[]])
        super(vendorName, version);
        if (names == null) {
            throw new IllegalArgumentException("names == null!");
        }
        if (names.length == 0) {
            throw new IllegalArgumentException("names.length == 0!");
        }
        if (pluginClassName == null) {
            throw new IllegalArgumentException("pluginClassName == null!");
        }

        this.names = (String[])names.clone();
        // If length == 0, leave it null
        if (suffixes != null && suffixes.length > 0) {
            this.suffixes = (String[])suffixes.clone();
        }
        // If length == 0, leave it null
        if (MIMETypes != null && MIMETypes.length > 0) {
            this.MIMETypes = (String[])MIMETypes.clone();
        }
        this.pluginClassName = pluginClassName;

        this.supportsStandardStreamMetadataFormat =
            supportsStandardStreamMetadataFormat;
        this.nativeStreamMetadataFormatName = nativeStreamMetadataFormatName;
        this.nativeStreamMetadataFormatClassName =
            nativeStreamMetadataFormatClassName;
        // If length == 0, leave it null
        if (extraStreamMetadataFormatNames != null &&
            extraStreamMetadataFormatNames.length > 0) {
            this.extraStreamMetadataFormatNames =
                (String[])extraStreamMetadataFormatNames.clone();
        }
        // If length == 0, leave it null
        if (extraStreamMetadataFormatClassNames != null &&
            extraStreamMetadataFormatClassNames.length > 0) {
            this.extraStreamMetadataFormatClassNames =
                (String[])extraStreamMetadataFormatClassNames.clone();
        }
        this.supportsStandardImageMetadataFormat =
            supportsStandardImageMetadataFormat;
        this.nativeImageMetadataFormatName = nativeImageMetadataFormatName;
        this.nativeImageMetadataFormatClassName =
            nativeImageMetadataFormatClassName;
        // If length == 0, leave it null
        if (extraImageMetadataFormatNames != null &&
            extraImageMetadataFormatNames.length > 0) {
            this.extraImageMetadataFormatNames =
                (String[])extraImageMetadataFormatNames.clone();
        }
        // If length == 0, leave it null
        if (extraImageMetadataFormatClassNames != null &&
            extraImageMetadataFormatClassNames.length > 0) {
            this.extraImageMetadataFormatClassNames =
                (String[])extraImageMetadataFormatClassNames.clone();
        }
!!!1685122.java!!!	getFormatNames() : String
        return (String[])names.clone();
!!!1685250.java!!!	getFileSuffixes() : String
        return suffixes == null ? null : (String[])suffixes.clone();
!!!1685378.java!!!	getMIMETypes() : String
        return MIMETypes == null ? null : (String[])MIMETypes.clone();
!!!1685506.java!!!	getPluginClassName() : String
        return pluginClassName;
!!!1685634.java!!!	isStandardStreamMetadataFormatSupported() : boolean
        return supportsStandardStreamMetadataFormat;
!!!1685762.java!!!	getNativeStreamMetadataFormatName() : String
        return nativeStreamMetadataFormatName;
!!!1685890.java!!!	getExtraStreamMetadataFormatNames() : String
        return extraStreamMetadataFormatNames == null ?
            null : (String[])extraStreamMetadataFormatNames.clone();
!!!1686018.java!!!	isStandardImageMetadataFormatSupported() : boolean
        return supportsStandardImageMetadataFormat;
!!!1686146.java!!!	getNativeImageMetadataFormatName() : String
        return nativeImageMetadataFormatName;
!!!1686274.java!!!	getExtraImageMetadataFormatNames() : String
        return extraImageMetadataFormatNames == null ?
            null : (String[])extraImageMetadataFormatNames.clone();
!!!1686402.java!!!	getStreamMetadataFormat(inout formatName : String) : IIOMetadataFormat
        return getMetadataFormat(formatName,
                                 supportsStandardStreamMetadataFormat,
                                 nativeStreamMetadataFormatName,
                                 nativeStreamMetadataFormatClassName,
                                 extraStreamMetadataFormatNames,
                                 extraStreamMetadataFormatClassNames);
!!!1686530.java!!!	getImageMetadataFormat(inout formatName : String) : IIOMetadataFormat
        return getMetadataFormat(formatName,
                                 supportsStandardImageMetadataFormat,
                                 nativeImageMetadataFormatName,
                                 nativeImageMetadataFormatClassName,
                                 extraImageMetadataFormatNames,
                                 extraImageMetadataFormatClassNames);
!!!1686658.java!!!	getMetadataFormat(inout formatName : String, inout supportsStandard : boolean, inout nativeName : String, inout nativeClassName : String, inout extraNames : String [[]], inout extraClassNames : String [[]]) : IIOMetadataFormat
        if (formatName == null) {
            throw new IllegalArgumentException("formatName == null!");
        }
        if (supportsStandard && formatName.equals
                (IIOMetadataFormatImpl.standardMetadataFormatName)) {

            return IIOMetadataFormatImpl.getStandardFormatInstance();
        }
        String formatClassName = null;
        if (formatName.equals(nativeName)) {
            formatClassName = nativeClassName;
        } else if (extraNames != null) {
            for (int i = 0; i < extraNames.length; i++) {
                if (formatName.equals(extraNames[i])) {
                    formatClassName = extraClassNames[i];
                    break;  // out of for
                }
            }
        }
        if (formatClassName == null) {
            throw new IllegalArgumentException("Unsupported format name");
        }
        try {
            Class cls = Class.forName(formatClassName, true,
                                      ClassLoader.getSystemClassLoader());
            Method meth = cls.getMethod("getInstance");
            return (IIOMetadataFormat) meth.invoke(null);
        } catch (Exception e) {
            RuntimeException ex =
                new IllegalStateException ("Can't obtain format");
            ex.initCause(e);
            throw ex;
        }
