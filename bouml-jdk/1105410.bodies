class KeySetView
!!!9073666.java!!!	KeySetView(inout map : ConcurrentHashMap, inout value : V)
  // non-public
            super(map);
            this.value = value;
!!!9073794.java!!!	getMappedValue() : V
 return value;
!!!9073922.java!!!	contains(inout o : Object) : boolean
 return map.containsKey(o);
!!!9074050.java!!!	remove(inout o : Object) : boolean
 return map.remove(o) != null;
!!!9074178.java!!!	iterator() : Iterator
            Node<K,V>[] t;
            ConcurrentHashMap<K,V> m = map;
            int f = (t = m.table) == null ? 0 : t.length;
            return new KeyIterator<K,V>(t, f, 0, f, m);
!!!9074306.java!!!	add(inout e : K) : boolean
            V v;
            if ((v = value) == null)
                throw new UnsupportedOperationException();
            return map.putVal(e, v, true) == null;
!!!9074434.java!!!	addAll(inout c : Collection) : boolean
            boolean added = false;
            V v;
            if ((v = value) == null)
                throw new UnsupportedOperationException();
            for (K e : c) {
                if (map.putVal(e, v, true) == null)
                    added = true;
            }
            return added;
!!!9074562.java!!!	hashCode() : int
            int h = 0;
            for (K e : this)
                h += e.hashCode();
            return h;
!!!9074690.java!!!	equals(inout o : Object) : boolean
            Set<?> c;
            return ((o instanceof Set) &&
                    ((c = (Set<?>)o) == this ||
                     (containsAll(c) && c.containsAll(this))));
!!!9074818.java!!!	spliterator() : Spliterator
            Node<K,V>[] t;
            ConcurrentHashMap<K,V> m = map;
            long n = m.sumCount();
            int f = (t = m.table) == null ? 0 : t.length;
            return new KeySpliterator<K,V>(t, f, 0, f, n < 0L ? 0L : n);
!!!9074946.java!!!	forEach(inout action : Consumer) : void
            if (action == null) throw new NullPointerException();
            Node<K,V>[] t;
            if ((t = map.table) != null) {
                Traverser<K,V> it = new Traverser<K,V>(t, t.length, 0, t.length);
                for (Node<K,V> p; (p = it.advance()) != null; )
                    action.accept(p.key);
            }
