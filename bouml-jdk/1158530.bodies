class IntPipeline
!!!9521410.java!!!	IntPipeline(inout source : Supplier, in sourceFlags : int, inout parallel : boolean)
        super(source, sourceFlags, parallel);
!!!9521538.java!!!	IntPipeline(inout source : Spliterator, in sourceFlags : int, inout parallel : boolean)
        super(source, sourceFlags, parallel);
!!!9521666.java!!!	IntPipeline(inout upstream : AbstractPipeline, in opFlags : int)
        super(upstream, opFlags);
!!!9521794.java!!!	adapt(inout sink : Sink) : IntConsumer
        if (sink instanceof IntConsumer) {
            return (IntConsumer) sink;
        }
        else {
            if (Tripwire.ENABLED)
                Tripwire.trip(AbstractPipeline.class,
                              "using IntStream.adapt(Sink<Integer> s)");
            return sink::accept;
        }
!!!9521922.java!!!	adapt(inout s : Spliterator) : Spliterator::OfInt
        if (s instanceof Spliterator.OfInt) {
            return (Spliterator.OfInt) s;
        }
        else {
            if (Tripwire.ENABLED)
                Tripwire.trip(AbstractPipeline.class,
                              "using IntStream.adapt(Spliterator<Integer> s)");
            throw new UnsupportedOperationException("IntStream.adapt(Spliterator<Integer> s)");
        }
!!!9522050.java!!!	getOutputShape() : StreamShape
        return StreamShape.INT_VALUE;
!!!9522178.java!!!	evaluateToNode(inout helper : PipelineHelper, inout spliterator : Spliterator, inout flattenTree : boolean, inout generator : IntFunction) : Node
        return Nodes.collectInt(helper, spliterator, flattenTree);
!!!9522306.java!!!	wrap(inout ph : PipelineHelper, inout supplier : Supplier, inout isParallel : boolean) : Spliterator
        return new StreamSpliterators.IntWrappingSpliterator<>(ph, supplier, isParallel);
!!!9522434.java!!!	lazySpliterator(inout supplier : Supplier) : Spliterator::OfInt
        return new StreamSpliterators.DelegatingSpliterator.OfInt((Supplier<Spliterator.OfInt>) supplier);
!!!9522562.java!!!	forEachWithCancel(inout spliterator : Spliterator, inout sink : Sink) : void
        Spliterator.OfInt spl = adapt(spliterator);
        IntConsumer adaptedSink = adapt(sink);
        do { } while (!sink.cancellationRequested() && spl.tryAdvance(adaptedSink));
!!!9522690.java!!!	makeNodeBuilder(in exactSizeIfKnown : long, inout generator : IntFunction) : Node::Builder
        return Nodes.intBuilder(exactSizeIfKnown);
!!!9522818.java!!!	iterator() : PrimitiveIterator::OfInt
        return Spliterators.iterator(spliterator());
!!!9522946.java!!!	spliterator() : Spliterator::OfInt
        return adapt(super.spliterator());
!!!9523074.java!!!	asLongStream() : LongStream
        return new LongPipeline.StatelessOp<Integer>(this, StreamShape.INT_VALUE,
                                                     StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Integer> opWrapSink(int flags, Sink<Long> sink) {
                return new Sink.ChainedInt<Long>(sink) {
                    @Override
                    public void accept(int t) {
                        downstream.accept((long) t);
                    }
                };
            }
        };
!!!9523202.java!!!	asDoubleStream() : DoubleStream
        return new DoublePipeline.StatelessOp<Integer>(this, StreamShape.INT_VALUE,
                                                       StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Integer> opWrapSink(int flags, Sink<Double> sink) {
                return new Sink.ChainedInt<Double>(sink) {
                    @Override
                    public void accept(int t) {
                        downstream.accept((double) t);
                    }
                };
            }
        };
!!!9523330.java!!!	boxed() : Stream
        return mapToObj(Integer::valueOf);
!!!9523458.java!!!	map(inout mapper : IntUnaryOperator) : IntStream
        Objects.requireNonNull(mapper);
        return new StatelessOp<Integer>(this, StreamShape.INT_VALUE,
                                        StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Integer> opWrapSink(int flags, Sink<Integer> sink) {
                return new Sink.ChainedInt<Integer>(sink) {
                    @Override
                    public void accept(int t) {
                        downstream.accept(mapper.applyAsInt(t));
                    }
                };
            }
        };
!!!9523586.java!!!	mapToObj(inout mapper : IntFunction) : Stream
        Objects.requireNonNull(mapper);
        return new ReferencePipeline.StatelessOp<Integer, U>(this, StreamShape.INT_VALUE,
                                                             StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Integer> opWrapSink(int flags, Sink<U> sink) {
                return new Sink.ChainedInt<U>(sink) {
                    @Override
                    public void accept(int t) {
                        downstream.accept(mapper.apply(t));
                    }
                };
            }
        };
!!!9523714.java!!!	mapToLong(inout mapper : IntToLongFunction) : LongStream
        Objects.requireNonNull(mapper);
        return new LongPipeline.StatelessOp<Integer>(this, StreamShape.INT_VALUE,
                                                     StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Integer> opWrapSink(int flags, Sink<Long> sink) {
                return new Sink.ChainedInt<Long>(sink) {
                    @Override
                    public void accept(int t) {
                        downstream.accept(mapper.applyAsLong(t));
                    }
                };
            }
        };
!!!9523842.java!!!	mapToDouble(inout mapper : IntToDoubleFunction) : DoubleStream
        Objects.requireNonNull(mapper);
        return new DoublePipeline.StatelessOp<Integer>(this, StreamShape.INT_VALUE,
                                                       StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Integer> opWrapSink(int flags, Sink<Double> sink) {
                return new Sink.ChainedInt<Double>(sink) {
                    @Override
                    public void accept(int t) {
                        downstream.accept(mapper.applyAsDouble(t));
                    }
                };
            }
        };
!!!9523970.java!!!	flatMap(inout mapper : IntFunction) : IntStream
        return new StatelessOp<Integer>(this, StreamShape.INT_VALUE,
                                        StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {
            @Override
            Sink<Integer> opWrapSink(int flags, Sink<Integer> sink) {
                return new Sink.ChainedInt<Integer>(sink) {
                    @Override
                    public void begin(long size) {
                        downstream.begin(-1);
                    }

                    @Override
                    public void accept(int t) {
                        try (IntStream result = mapper.apply(t)) {
                            // We can do better that this too; optimize for depth=0 case and just grab spliterator and forEach it
                            if (result != null)
                                result.sequential().forEach(i -> downstream.accept(i));
                        }
                    }
                };
            }
        };
!!!9524098.java!!!	unordered() : IntStream
        if (!isOrdered())
            return this;
        return new StatelessOp<Integer>(this, StreamShape.INT_VALUE, StreamOpFlag.NOT_ORDERED) {
            @Override
            Sink<Integer> opWrapSink(int flags, Sink<Integer> sink) {
                return sink;
            }
        };
!!!9524226.java!!!	filter(inout predicate : IntPredicate) : IntStream
        Objects.requireNonNull(predicate);
        return new StatelessOp<Integer>(this, StreamShape.INT_VALUE,
                                        StreamOpFlag.NOT_SIZED) {
            @Override
            Sink<Integer> opWrapSink(int flags, Sink<Integer> sink) {
                return new Sink.ChainedInt<Integer>(sink) {
                    @Override
                    public void begin(long size) {
                        downstream.begin(-1);
                    }

                    @Override
                    public void accept(int t) {
                        if (predicate.test(t))
                            downstream.accept(t);
                    }
                };
            }
        };
!!!9524354.java!!!	peek(inout action : IntConsumer) : IntStream
        Objects.requireNonNull(action);
        return new StatelessOp<Integer>(this, StreamShape.INT_VALUE,
                                        0) {
            @Override
            Sink<Integer> opWrapSink(int flags, Sink<Integer> sink) {
                return new Sink.ChainedInt<Integer>(sink) {
                    @Override
                    public void accept(int t) {
                        action.accept(t);
                        downstream.accept(t);
                    }
                };
            }
        };
!!!9524482.java!!!	limit(in maxSize : long) : IntStream
        if (maxSize < 0)
            throw new IllegalArgumentException(Long.toString(maxSize));
        return SliceOps.makeInt(this, 0, maxSize);
!!!9524610.java!!!	skip(in n : long) : IntStream
        if (n < 0)
            throw new IllegalArgumentException(Long.toString(n));
        if (n == 0)
            return this;
        else
            return SliceOps.makeInt(this, n, -1);
!!!9524738.java!!!	sorted() : IntStream
        return SortedOps.makeInt(this);
!!!9524866.java!!!	distinct() : IntStream
        // While functional and quick to implement, this approach is not very efficient.
        // An efficient version requires an int-specific map/set implementation.
        return boxed().distinct().mapToInt(i -> i);
!!!9524994.java!!!	forEach(inout action : IntConsumer) : void
        evaluate(ForEachOps.makeInt(action, false));
!!!9525122.java!!!	forEachOrdered(inout action : IntConsumer) : void
        evaluate(ForEachOps.makeInt(action, true));
!!!9525250.java!!!	sum() : int
        return reduce(0, Integer::sum);
!!!9525378.java!!!	min() : OptionalInt
        return reduce(Math::min);
!!!9525506.java!!!	max() : OptionalInt
        return reduce(Math::max);
!!!9525634.java!!!	count() : long
        return mapToLong(e -> 1L).sum();
!!!9525762.java!!!	average() : OptionalDouble
        long[] avg = collect(() -> new long[2],
                             (ll, i) -> {
                                 ll[0]++;
                                 ll[1] += i;
                             },
                             (ll, rr) -> {
                                 ll[0] += rr[0];
                                 ll[1] += rr[1];
                             });
        return avg[0] > 0
               ? OptionalDouble.of((double) avg[1] / avg[0])
               : OptionalDouble.empty();
!!!9525890.java!!!	summaryStatistics() : IntSummaryStatistics
        return collect(IntSummaryStatistics::new, IntSummaryStatistics::accept,
                       IntSummaryStatistics::combine);
!!!9526018.java!!!	reduce(in identity : int, inout op : IntBinaryOperator) : int
        return evaluate(ReduceOps.makeInt(identity, op));
!!!9526146.java!!!	reduce(inout op : IntBinaryOperator) : OptionalInt
        return evaluate(ReduceOps.makeInt(op));
!!!9526274.java!!!	collect(inout supplier : Supplier, inout accumulator : ObjIntConsumer, inout combiner : BiConsumer) : R
        BinaryOperator<R> operator = (left, right) -> {
            combiner.accept(left, right);
            return left;
        };
        return evaluate(ReduceOps.makeInt(supplier, accumulator, operator));
!!!9526402.java!!!	anyMatch(inout predicate : IntPredicate) : boolean
        return evaluate(MatchOps.makeInt(predicate, MatchOps.MatchKind.ANY));
!!!9526530.java!!!	allMatch(inout predicate : IntPredicate) : boolean
        return evaluate(MatchOps.makeInt(predicate, MatchOps.MatchKind.ALL));
!!!9526658.java!!!	noneMatch(inout predicate : IntPredicate) : boolean
        return evaluate(MatchOps.makeInt(predicate, MatchOps.MatchKind.NONE));
!!!9526786.java!!!	findFirst() : OptionalInt
        return evaluate(FindOps.makeInt(true));
!!!9526914.java!!!	findAny() : OptionalInt
        return evaluate(FindOps.makeInt(false));
!!!9527042.java!!!	toArray() : int
        return Nodes.flattenInt((Node.OfInt) evaluateToArrayNode(Integer[]::new))
                        .asPrimitiveArray();
