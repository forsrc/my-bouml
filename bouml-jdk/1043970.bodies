class LocalDateTime
!!!8357122.java!!!	now() : LocalDateTime
        return now(Clock.systemDefaultZone());
!!!8357250.java!!!	now(inout zone : ZoneId) : LocalDateTime
        return now(Clock.system(zone));
!!!8357378.java!!!	now(inout clock : Clock) : LocalDateTime
        Objects.requireNonNull(clock, "clock");
        final Instant now = clock.instant();  // called once
        ZoneOffset offset = clock.getZone().getRules().getOffset(now);
        return ofEpochSecond(now.getEpochSecond(), now.getNano(), offset);
!!!8357506.java!!!	of(in year : int, inout month : Month, in dayOfMonth : int, in hour : int, in minute : int) : LocalDateTime
        LocalDate date = LocalDate.of(year, month, dayOfMonth);
        LocalTime time = LocalTime.of(hour, minute);
        return new LocalDateTime(date, time);
!!!8357634.java!!!	of(in year : int, inout month : Month, in dayOfMonth : int, in hour : int, in minute : int, in second : int) : LocalDateTime
        LocalDate date = LocalDate.of(year, month, dayOfMonth);
        LocalTime time = LocalTime.of(hour, minute, second);
        return new LocalDateTime(date, time);
!!!8357762.java!!!	of(in year : int, inout month : Month, in dayOfMonth : int, in hour : int, in minute : int, in second : int, in nanoOfSecond : int) : LocalDateTime
        LocalDate date = LocalDate.of(year, month, dayOfMonth);
        LocalTime time = LocalTime.of(hour, minute, second, nanoOfSecond);
        return new LocalDateTime(date, time);
!!!8357890.java!!!	of(in year : int, in month : int, in dayOfMonth : int, in hour : int, in minute : int) : LocalDateTime
        LocalDate date = LocalDate.of(year, month, dayOfMonth);
        LocalTime time = LocalTime.of(hour, minute);
        return new LocalDateTime(date, time);
!!!8358018.java!!!	of(in year : int, in month : int, in dayOfMonth : int, in hour : int, in minute : int, in second : int) : LocalDateTime
        LocalDate date = LocalDate.of(year, month, dayOfMonth);
        LocalTime time = LocalTime.of(hour, minute, second);
        return new LocalDateTime(date, time);
!!!8358146.java!!!	of(in year : int, in month : int, in dayOfMonth : int, in hour : int, in minute : int, in second : int, in nanoOfSecond : int) : LocalDateTime
        LocalDate date = LocalDate.of(year, month, dayOfMonth);
        LocalTime time = LocalTime.of(hour, minute, second, nanoOfSecond);
        return new LocalDateTime(date, time);
!!!8358274.java!!!	of(inout date : LocalDate, inout time : LocalTime) : LocalDateTime
        Objects.requireNonNull(date, "date");
        Objects.requireNonNull(time, "time");
        return new LocalDateTime(date, time);
!!!8358402.java!!!	ofInstant(inout instant : Instant, inout zone : ZoneId) : LocalDateTime
        Objects.requireNonNull(instant, "instant");
        Objects.requireNonNull(zone, "zone");
        ZoneRules rules = zone.getRules();
        ZoneOffset offset = rules.getOffset(instant);
        return ofEpochSecond(instant.getEpochSecond(), instant.getNano(), offset);
!!!8358530.java!!!	ofEpochSecond(in epochSecond : long, in nanoOfSecond : int, inout offset : ZoneOffset) : LocalDateTime
        Objects.requireNonNull(offset, "offset");
        NANO_OF_SECOND.checkValidValue(nanoOfSecond);
        long localSecond = epochSecond + offset.getTotalSeconds();  // overflow caught later
        long localEpochDay = Math.floorDiv(localSecond, SECONDS_PER_DAY);
        int secsOfDay = (int)Math.floorMod(localSecond, SECONDS_PER_DAY);
        LocalDate date = LocalDate.ofEpochDay(localEpochDay);
        LocalTime time = LocalTime.ofNanoOfDay(secsOfDay * NANOS_PER_SECOND + nanoOfSecond);
        return new LocalDateTime(date, time);
!!!8358658.java!!!	from(inout temporal : TemporalAccessor) : LocalDateTime
        if (temporal instanceof LocalDateTime) {
            return (LocalDateTime) temporal;
        } else if (temporal instanceof ZonedDateTime) {
            return ((ZonedDateTime) temporal).toLocalDateTime();
        } else if (temporal instanceof OffsetDateTime) {
            return ((OffsetDateTime) temporal).toLocalDateTime();
        }
        try {
            LocalDate date = LocalDate.from(temporal);
            LocalTime time = LocalTime.from(temporal);
            return new LocalDateTime(date, time);
        } catch (DateTimeException ex) {
            throw new DateTimeException("Unable to obtain LocalDateTime from TemporalAccessor: " +
                    temporal + " of type " + temporal.getClass().getName(), ex);
        }
!!!8358786.java!!!	parse(inout text : CharSequence) : LocalDateTime
        return parse(text, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
!!!8358914.java!!!	parse(inout text : CharSequence, inout formatter : DateTimeFormatter) : LocalDateTime
        Objects.requireNonNull(formatter, "formatter");
        return formatter.parse(text, LocalDateTime::from);
!!!8359042.java!!!	LocalDateTime(inout date : LocalDate, inout time : LocalTime)
        this.date = date;
        this.time = time;
!!!8359170.java!!!	with(inout newDate : LocalDate, inout newTime : LocalTime) : LocalDateTime
        if (date == newDate && time == newTime) {
            return this;
        }
        return new LocalDateTime(newDate, newTime);
!!!8359298.java!!!	isSupported(inout field : TemporalField) : boolean
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            return f.isDateBased() || f.isTimeBased();
        }
        return field != null && field.isSupportedBy(this);
!!!8359426.java!!!	isSupported(inout unit : TemporalUnit) : boolean
        return ChronoLocalDateTime.super.isSupported(unit);
!!!8359554.java!!!	range(inout field : TemporalField) : ValueRange
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            return (f.isTimeBased() ? time.range(field) : date.range(field));
        }
        return field.rangeRefinedBy(this);
!!!8359682.java!!!	get(inout field : TemporalField) : int
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            return (f.isTimeBased() ? time.get(field) : date.get(field));
        }
        return ChronoLocalDateTime.super.get(field);
!!!8359810.java!!!	getLong(inout field : TemporalField) : long
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            return (f.isTimeBased() ? time.getLong(field) : date.getLong(field));
        }
        return field.getFrom(this);
!!!8359938.java!!!	toLocalDate() : LocalDate
        return date;
!!!8360066.java!!!	getYear() : int
        return date.getYear();
!!!8360194.java!!!	getMonthValue() : int
        return date.getMonthValue();
!!!8360322.java!!!	getMonth() : Month
        return date.getMonth();
!!!8360450.java!!!	getDayOfMonth() : int
        return date.getDayOfMonth();
!!!8360578.java!!!	getDayOfYear() : int
        return date.getDayOfYear();
!!!8360706.java!!!	getDayOfWeek() : DayOfWeek
        return date.getDayOfWeek();
!!!8360834.java!!!	toLocalTime() : LocalTime
        return time;
!!!8360962.java!!!	getHour() : int
        return time.getHour();
!!!8361090.java!!!	getMinute() : int
        return time.getMinute();
!!!8361218.java!!!	getSecond() : int
        return time.getSecond();
!!!8361346.java!!!	getNano() : int
        return time.getNano();
!!!8361474.java!!!	with(inout adjuster : TemporalAdjuster) : LocalDateTime
        // optimizations
        if (adjuster instanceof LocalDate) {
            return with((LocalDate) adjuster, time);
        } else if (adjuster instanceof LocalTime) {
            return with(date, (LocalTime) adjuster);
        } else if (adjuster instanceof LocalDateTime) {
            return (LocalDateTime) adjuster;
        }
        return (LocalDateTime) adjuster.adjustInto(this);
!!!8361602.java!!!	with(inout field : TemporalField, in newValue : long) : LocalDateTime
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            if (f.isTimeBased()) {
                return with(date, time.with(field, newValue));
            } else {
                return with(date.with(field, newValue), time);
            }
        }
        return field.adjustInto(this, newValue);
!!!8361730.java!!!	withYear(in year : int) : LocalDateTime
        return with(date.withYear(year), time);
!!!8361858.java!!!	withMonth(in month : int) : LocalDateTime
        return with(date.withMonth(month), time);
!!!8361986.java!!!	withDayOfMonth(in dayOfMonth : int) : LocalDateTime
        return with(date.withDayOfMonth(dayOfMonth), time);
!!!8362114.java!!!	withDayOfYear(in dayOfYear : int) : LocalDateTime
        return with(date.withDayOfYear(dayOfYear), time);
!!!8362242.java!!!	withHour(in hour : int) : LocalDateTime
        LocalTime newTime = time.withHour(hour);
        return with(date, newTime);
!!!8362370.java!!!	withMinute(in minute : int) : LocalDateTime
        LocalTime newTime = time.withMinute(minute);
        return with(date, newTime);
!!!8362498.java!!!	withSecond(in second : int) : LocalDateTime
        LocalTime newTime = time.withSecond(second);
        return with(date, newTime);
!!!8362626.java!!!	withNano(in nanoOfSecond : int) : LocalDateTime
        LocalTime newTime = time.withNano(nanoOfSecond);
        return with(date, newTime);
!!!8362754.java!!!	truncatedTo(inout unit : TemporalUnit) : LocalDateTime
        return with(date, time.truncatedTo(unit));
!!!8362882.java!!!	plus(inout amountToAdd : TemporalAmount) : LocalDateTime
        if (amountToAdd instanceof Period) {
            Period periodToAdd = (Period) amountToAdd;
            return with(date.plus(periodToAdd), time);
        }
        Objects.requireNonNull(amountToAdd, "amountToAdd");
        return (LocalDateTime) amountToAdd.addTo(this);
!!!8363010.java!!!	plus(in amountToAdd : long, inout unit : TemporalUnit) : LocalDateTime
        if (unit instanceof ChronoUnit) {
            ChronoUnit f = (ChronoUnit) unit;
            switch (f) {
                case NANOS: return plusNanos(amountToAdd);
                case MICROS: return plusDays(amountToAdd / MICROS_PER_DAY).plusNanos((amountToAdd % MICROS_PER_DAY) * 1000);
                case MILLIS: return plusDays(amountToAdd / MILLIS_PER_DAY).plusNanos((amountToAdd % MILLIS_PER_DAY) * 1000_000);
                case SECONDS: return plusSeconds(amountToAdd);
                case MINUTES: return plusMinutes(amountToAdd);
                case HOURS: return plusHours(amountToAdd);
                case HALF_DAYS: return plusDays(amountToAdd / 256).plusHours((amountToAdd % 256) * 12);  // no overflow (256 is multiple of 2)
            }
            return with(date.plus(amountToAdd, unit), time);
        }
        return unit.addTo(this, amountToAdd);
!!!8363138.java!!!	plusYears(in years : long) : LocalDateTime
        LocalDate newDate = date.plusYears(years);
        return with(newDate, time);
!!!8363266.java!!!	plusMonths(in months : long) : LocalDateTime
        LocalDate newDate = date.plusMonths(months);
        return with(newDate, time);
!!!8363394.java!!!	plusWeeks(in weeks : long) : LocalDateTime
        LocalDate newDate = date.plusWeeks(weeks);
        return with(newDate, time);
!!!8363522.java!!!	plusDays(in days : long) : LocalDateTime
        LocalDate newDate = date.plusDays(days);
        return with(newDate, time);
!!!8363650.java!!!	plusHours(in hours : long) : LocalDateTime
        return plusWithOverflow(date, hours, 0, 0, 0, 1);
!!!8363778.java!!!	plusMinutes(in minutes : long) : LocalDateTime
        return plusWithOverflow(date, 0, minutes, 0, 0, 1);
!!!8363906.java!!!	plusSeconds(in seconds : long) : LocalDateTime
        return plusWithOverflow(date, 0, 0, seconds, 0, 1);
!!!8364034.java!!!	plusNanos(in nanos : long) : LocalDateTime
        return plusWithOverflow(date, 0, 0, 0, nanos, 1);
!!!8364162.java!!!	minus(inout amountToSubtract : TemporalAmount) : LocalDateTime
        if (amountToSubtract instanceof Period) {
            Period periodToSubtract = (Period) amountToSubtract;
            return with(date.minus(periodToSubtract), time);
        }
        Objects.requireNonNull(amountToSubtract, "amountToSubtract");
        return (LocalDateTime) amountToSubtract.subtractFrom(this);
!!!8364290.java!!!	minus(in amountToSubtract : long, inout unit : TemporalUnit) : LocalDateTime
        return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));
!!!8364418.java!!!	minusYears(in years : long) : LocalDateTime
        return (years == Long.MIN_VALUE ? plusYears(Long.MAX_VALUE).plusYears(1) : plusYears(-years));
!!!8364546.java!!!	minusMonths(in months : long) : LocalDateTime
        return (months == Long.MIN_VALUE ? plusMonths(Long.MAX_VALUE).plusMonths(1) : plusMonths(-months));
!!!8364674.java!!!	minusWeeks(in weeks : long) : LocalDateTime
        return (weeks == Long.MIN_VALUE ? plusWeeks(Long.MAX_VALUE).plusWeeks(1) : plusWeeks(-weeks));
!!!8364802.java!!!	minusDays(in days : long) : LocalDateTime
        return (days == Long.MIN_VALUE ? plusDays(Long.MAX_VALUE).plusDays(1) : plusDays(-days));
!!!8364930.java!!!	minusHours(in hours : long) : LocalDateTime
        return plusWithOverflow(date, hours, 0, 0, 0, -1);
!!!8365058.java!!!	minusMinutes(in minutes : long) : LocalDateTime
        return plusWithOverflow(date, 0, minutes, 0, 0, -1);
!!!8365186.java!!!	minusSeconds(in seconds : long) : LocalDateTime
        return plusWithOverflow(date, 0, 0, seconds, 0, -1);
!!!8365314.java!!!	minusNanos(in nanos : long) : LocalDateTime
        return plusWithOverflow(date, 0, 0, 0, nanos, -1);
!!!8365442.java!!!	plusWithOverflow(inout newDate : LocalDate, in hours : long, in minutes : long, in seconds : long, in nanos : long, in sign : int) : LocalDateTime
        // 9223372036854775808 long, 2147483648 int
        if ((hours | minutes | seconds | nanos) == 0) {
            return with(newDate, time);
        }
        long totDays = nanos / NANOS_PER_DAY +             //   max/24*60*60*1B
                seconds / SECONDS_PER_DAY +                //   max/24*60*60
                minutes / MINUTES_PER_DAY +                //   max/24*60
                hours / HOURS_PER_DAY;                     //   max/24
        totDays *= sign;                                   // total max*0.4237...
        long totNanos = nanos % NANOS_PER_DAY +                    //   max  86400000000000
                (seconds % SECONDS_PER_DAY) * NANOS_PER_SECOND +   //   max  86400000000000
                (minutes % MINUTES_PER_DAY) * NANOS_PER_MINUTE +   //   max  86400000000000
                (hours % HOURS_PER_DAY) * NANOS_PER_HOUR;          //   max  86400000000000
        long curNoD = time.toNanoOfDay();                       //   max  86400000000000
        totNanos = totNanos * sign + curNoD;                    // total 432000000000000
        totDays += Math.floorDiv(totNanos, NANOS_PER_DAY);
        long newNoD = Math.floorMod(totNanos, NANOS_PER_DAY);
        LocalTime newTime = (newNoD == curNoD ? time : LocalTime.ofNanoOfDay(newNoD));
        return with(newDate.plusDays(totDays), newTime);
!!!8365570.java!!!	query(inout query : TemporalQuery) : R
        if (query == TemporalQueries.localDate()) {
            return (R) date;
        }
        return ChronoLocalDateTime.super.query(query);
!!!8365698.java!!!	adjustInto(inout temporal : Temporal) : Temporal
        return ChronoLocalDateTime.super.adjustInto(temporal);
!!!8365826.java!!!	until(inout endExclusive : Temporal, inout unit : TemporalUnit) : long
        LocalDateTime end = LocalDateTime.from(endExclusive);
        if (unit instanceof ChronoUnit) {
            if (unit.isTimeBased()) {
                long amount = date.daysUntil(end.date);
                if (amount == 0) {
                    return time.until(end.time, unit);
                }
                long timePart = end.time.toNanoOfDay() - time.toNanoOfDay();
                if (amount > 0) {
                    amount--;  // safe
                    timePart += NANOS_PER_DAY;  // safe
                } else {
                    amount++;  // safe
                    timePart -= NANOS_PER_DAY;  // safe
                }
                switch ((ChronoUnit) unit) {
                    case NANOS:
                        amount = Math.multiplyExact(amount, NANOS_PER_DAY);
                        break;
                    case MICROS:
                        amount = Math.multiplyExact(amount, MICROS_PER_DAY);
                        timePart = timePart / 1000;
                        break;
                    case MILLIS:
                        amount = Math.multiplyExact(amount, MILLIS_PER_DAY);
                        timePart = timePart / 1_000_000;
                        break;
                    case SECONDS:
                        amount = Math.multiplyExact(amount, SECONDS_PER_DAY);
                        timePart = timePart / NANOS_PER_SECOND;
                        break;
                    case MINUTES:
                        amount = Math.multiplyExact(amount, MINUTES_PER_DAY);
                        timePart = timePart / NANOS_PER_MINUTE;
                        break;
                    case HOURS:
                        amount = Math.multiplyExact(amount, HOURS_PER_DAY);
                        timePart = timePart / NANOS_PER_HOUR;
                        break;
                    case HALF_DAYS:
                        amount = Math.multiplyExact(amount, 2);
                        timePart = timePart / (NANOS_PER_HOUR * 12);
                        break;
                }
                return Math.addExact(amount, timePart);
            }
            LocalDate endDate = end.date;
            if (endDate.isAfter(date) && end.time.isBefore(time)) {
                endDate = endDate.minusDays(1);
            } else if (endDate.isBefore(date) && end.time.isAfter(time)) {
                endDate = endDate.plusDays(1);
            }
            return date.until(endDate, unit);
        }
        return unit.between(this, end);
!!!8365954.java!!!	format(inout formatter : DateTimeFormatter) : String
        Objects.requireNonNull(formatter, "formatter");
        return formatter.format(this);
!!!8366082.java!!!	atOffset(inout offset : ZoneOffset) : OffsetDateTime
        return OffsetDateTime.of(this, offset);
!!!8366210.java!!!	atZone(inout zone : ZoneId) : ZonedDateTime
        return ZonedDateTime.of(this, zone);
!!!8366338.java!!!	compareTo(inout other : ChronoLocalDateTime) : int
        if (other instanceof LocalDateTime) {
            return compareTo0((LocalDateTime) other);
        }
        return ChronoLocalDateTime.super.compareTo(other);
!!!8366466.java!!!	compareTo0(inout other : LocalDateTime) : int
        int cmp = date.compareTo0(other.toLocalDate());
        if (cmp == 0) {
            cmp = time.compareTo(other.toLocalTime());
        }
        return cmp;
!!!8366594.java!!!	isAfter(inout other : ChronoLocalDateTime) : boolean
        if (other instanceof LocalDateTime) {
            return compareTo0((LocalDateTime) other) > 0;
        }
        return ChronoLocalDateTime.super.isAfter(other);
!!!8366722.java!!!	isBefore(inout other : ChronoLocalDateTime) : boolean
        if (other instanceof LocalDateTime) {
            return compareTo0((LocalDateTime) other) < 0;
        }
        return ChronoLocalDateTime.super.isBefore(other);
!!!8366850.java!!!	isEqual(inout other : ChronoLocalDateTime) : boolean
        if (other instanceof LocalDateTime) {
            return compareTo0((LocalDateTime) other) == 0;
        }
        return ChronoLocalDateTime.super.isEqual(other);
!!!8366978.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj instanceof LocalDateTime) {
            LocalDateTime other = (LocalDateTime) obj;
            return date.equals(other.date) && time.equals(other.time);
        }
        return false;
!!!8367106.java!!!	hashCode() : int
        return date.hashCode() ^ time.hashCode();
!!!8367234.java!!!	toString() : String
        return date.toString() + 'T' + time.toString();
!!!8367362.java!!!	writeReplace() : Object
        return new Ser(Ser.LOCAL_DATE_TIME_TYPE, this);
!!!8367490.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8367618.java!!!	writeExternal(inout out : DataOutput) : void
        date.writeExternal(out);
        time.writeExternal(out);
!!!8367746.java!!!	readExternal(inout in : DataInput) : LocalDateTime
        LocalDate date = LocalDate.readExternal(in);
        LocalTime time = LocalTime.readExternal(in);
        return LocalDateTime.of(date, time);
