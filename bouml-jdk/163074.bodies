class LinkedList
!!!8838658.java!!!	LinkedList(inout c : Collection)
        this();
        addAll(c);
!!!8838786.java!!!	linkFirst(inout e : E) : void
        final Node<E> f = first;
        final Node<E> newNode = new Node<>(null, e, f);
        first = newNode;
        if (f == null)
            last = newNode;
        else
            f.prev = newNode;
        size++;
        modCount++;
!!!8838914.java!!!	linkLast(inout e : E) : void
        final Node<E> l = last;
        final Node<E> newNode = new Node<>(l, e, null);
        last = newNode;
        if (l == null)
            first = newNode;
        else
            l.next = newNode;
        size++;
        modCount++;
!!!8839042.java!!!	linkBefore(inout e : E, inout succ : LinkedList::Node) : void
        // assert succ != null;
        final Node<E> pred = succ.prev;
        final Node<E> newNode = new Node<>(pred, e, succ);
        succ.prev = newNode;
        if (pred == null)
            first = newNode;
        else
            pred.next = newNode;
        size++;
        modCount++;
!!!8839170.java!!!	unlinkFirst(inout f : LinkedList::Node) : E
        // assert f == first && f != null;
        final E element = f.item;
        final Node<E> next = f.next;
        f.item = null;
        f.next = null; // help GC
        first = next;
        if (next == null)
            last = null;
        else
            next.prev = null;
        size--;
        modCount++;
        return element;
!!!8839298.java!!!	unlinkLast(inout l : LinkedList::Node) : E
        // assert l == last && l != null;
        final E element = l.item;
        final Node<E> prev = l.prev;
        l.item = null;
        l.prev = null; // help GC
        last = prev;
        if (prev == null)
            first = null;
        else
            prev.next = null;
        size--;
        modCount++;
        return element;
!!!8839426.java!!!	unlink(inout x : LinkedList::Node) : E
        // assert x != null;
        final E element = x.item;
        final Node<E> next = x.next;
        final Node<E> prev = x.prev;

        if (prev == null) {
            first = next;
        } else {
            prev.next = next;
            x.prev = null;
        }

        if (next == null) {
            last = prev;
        } else {
            next.prev = prev;
            x.next = null;
        }

        x.item = null;
        size--;
        modCount++;
        return element;
!!!8839554.java!!!	getFirst() : E
        final Node<E> f = first;
        if (f == null)
            throw new NoSuchElementException();
        return f.item;
!!!8839682.java!!!	getLast() : E
        final Node<E> l = last;
        if (l == null)
            throw new NoSuchElementException();
        return l.item;
!!!8839810.java!!!	removeFirst() : E
        final Node<E> f = first;
        if (f == null)
            throw new NoSuchElementException();
        return unlinkFirst(f);
!!!8839938.java!!!	removeLast() : E
        final Node<E> l = last;
        if (l == null)
            throw new NoSuchElementException();
        return unlinkLast(l);
!!!8840066.java!!!	addFirst(inout e : E) : void
        linkFirst(e);
!!!8840194.java!!!	addLast(inout e : E) : void
        linkLast(e);
!!!8840322.java!!!	contains(inout o : Object) : boolean
        return indexOf(o) != -1;
!!!8840450.java!!!	size() : int
        return size;
!!!8840578.java!!!	add(inout e : E) : boolean
        linkLast(e);
        return true;
!!!8840706.java!!!	remove(inout o : Object) : boolean
        if (o == null) {
            for (Node<E> x = first; x != null; x = x.next) {
                if (x.item == null) {
                    unlink(x);
                    return true;
                }
            }
        } else {
            for (Node<E> x = first; x != null; x = x.next) {
                if (o.equals(x.item)) {
                    unlink(x);
                    return true;
                }
            }
        }
        return false;
!!!8840834.java!!!	addAll(inout c : Collection) : boolean
        return addAll(size, c);
!!!8840962.java!!!	addAll(in index : int, inout c : Collection) : boolean
        checkPositionIndex(index);

        Object[] a = c.toArray();
        int numNew = a.length;
        if (numNew == 0)
            return false;

        Node<E> pred, succ;
        if (index == size) {
            succ = null;
            pred = last;
        } else {
            succ = node(index);
            pred = succ.prev;
        }

        for (Object o : a) {
            @SuppressWarnings("unchecked") E e = (E) o;
            Node<E> newNode = new Node<>(pred, e, null);
            if (pred == null)
                first = newNode;
            else
                pred.next = newNode;
            pred = newNode;
        }

        if (succ == null) {
            last = pred;
        } else {
            pred.next = succ;
            succ.prev = pred;
        }

        size += numNew;
        modCount++;
        return true;
!!!8841090.java!!!	clear() : void
        // Clearing all of the links between nodes is "unnecessary", but:
        // - helps a generational GC if the discarded nodes inhabit
        //   more than one generation
        // - is sure to free memory even if there is a reachable Iterator
        for (Node<E> x = first; x != null; ) {
            Node<E> next = x.next;
            x.item = null;
            x.next = null;
            x.prev = null;
            x = next;
        }
        first = last = null;
        size = 0;
        modCount++;
!!!8841218.java!!!	get(in index : int) : E
        checkElementIndex(index);
        return node(index).item;
!!!8841346.java!!!	set(in index : int, inout element : E) : E
        checkElementIndex(index);
        Node<E> x = node(index);
        E oldVal = x.item;
        x.item = element;
        return oldVal;
!!!8841474.java!!!	add(in index : int, inout element : E) : void
        checkPositionIndex(index);

        if (index == size)
            linkLast(element);
        else
            linkBefore(element, node(index));
!!!8841602.java!!!	remove(in index : int) : E
        checkElementIndex(index);
        return unlink(node(index));
!!!8841730.java!!!	isElementIndex(in index : int) : boolean
        return index >= 0 && index < size;
!!!8841858.java!!!	isPositionIndex(in index : int) : boolean
        return index >= 0 && index <= size;
!!!8841986.java!!!	outOfBoundsMsg(in index : int) : String
        return "Index: "+index+", Size: "+size;
!!!8842114.java!!!	checkElementIndex(in index : int) : void
        if (!isElementIndex(index))
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
!!!8842242.java!!!	checkPositionIndex(in index : int) : void
        if (!isPositionIndex(index))
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
!!!8842370.java!!!	node(in index : int) : LinkedList::Node
        // assert isElementIndex(index);

        if (index < (size >> 1)) {
            Node<E> x = first;
            for (int i = 0; i < index; i++)
                x = x.next;
            return x;
        } else {
            Node<E> x = last;
            for (int i = size - 1; i > index; i--)
                x = x.prev;
            return x;
        }
!!!8842498.java!!!	indexOf(inout o : Object) : int
        int index = 0;
        if (o == null) {
            for (Node<E> x = first; x != null; x = x.next) {
                if (x.item == null)
                    return index;
                index++;
            }
        } else {
            for (Node<E> x = first; x != null; x = x.next) {
                if (o.equals(x.item))
                    return index;
                index++;
            }
        }
        return -1;
!!!8842626.java!!!	lastIndexOf(inout o : Object) : int
        int index = size;
        if (o == null) {
            for (Node<E> x = last; x != null; x = x.prev) {
                index--;
                if (x.item == null)
                    return index;
            }
        } else {
            for (Node<E> x = last; x != null; x = x.prev) {
                index--;
                if (o.equals(x.item))
                    return index;
            }
        }
        return -1;
!!!8842754.java!!!	peek() : E
        final Node<E> f = first;
        return (f == null) ? null : f.item;
!!!8842882.java!!!	element() : E
        return getFirst();
!!!8843010.java!!!	poll() : E
        final Node<E> f = first;
        return (f == null) ? null : unlinkFirst(f);
!!!8843138.java!!!	remove() : E
        return removeFirst();
!!!8843266.java!!!	offer(inout e : E) : boolean
        return add(e);
!!!8843394.java!!!	offerFirst(inout e : E) : boolean
        addFirst(e);
        return true;
!!!8843522.java!!!	offerLast(inout e : E) : boolean
        addLast(e);
        return true;
!!!8843650.java!!!	peekFirst() : E
        final Node<E> f = first;
        return (f == null) ? null : f.item;
!!!8843778.java!!!	peekLast() : E
        final Node<E> l = last;
        return (l == null) ? null : l.item;
!!!8843906.java!!!	pollFirst() : E
        final Node<E> f = first;
        return (f == null) ? null : unlinkFirst(f);
!!!8844034.java!!!	pollLast() : E
        final Node<E> l = last;
        return (l == null) ? null : unlinkLast(l);
!!!8844162.java!!!	push(inout e : E) : void
        addFirst(e);
!!!8844290.java!!!	pop() : E
        return removeFirst();
!!!8844418.java!!!	removeFirstOccurrence(inout o : Object) : boolean
        return remove(o);
!!!8844546.java!!!	removeLastOccurrence(inout o : Object) : boolean
        if (o == null) {
            for (Node<E> x = last; x != null; x = x.prev) {
                if (x.item == null) {
                    unlink(x);
                    return true;
                }
            }
        } else {
            for (Node<E> x = last; x != null; x = x.prev) {
                if (o.equals(x.item)) {
                    unlink(x);
                    return true;
                }
            }
        }
        return false;
!!!8844674.java!!!	listIterator(in index : int) : ListIterator
        checkPositionIndex(index);
        return new ListItr(index);
