class Timer
!!!10845058.java!!!	Timer(in delay : int, inout listener : ActionListener)
        super();
        this.delay = delay;
        this.initialDelay = delay;

        doPostEvent = new DoPostEvent();

        if (listener != null) {
            addActionListener(listener);
        }
!!!10845186.java!!!	getAccessControlContext() : AccessControlContext
       if (acc == null) {
           throw new SecurityException(
                   "Timer is missing AccessControlContext");
       }
       return acc;
!!!10845570.java!!!	addActionListener(inout listener : ActionListener) : void
        listenerList.add(ActionListener.class, listener);
!!!10845698.java!!!	removeActionListener(inout listener : ActionListener) : void
        listenerList.remove(ActionListener.class, listener);
!!!10845826.java!!!	getActionListeners() : ActionListener
        return listenerList.getListeners(ActionListener.class);
!!!10845954.java!!!	fireActionPerformed(inout e : ActionEvent) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();

        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i=listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ActionListener.class) {
                ((ActionListener)listeners[i+1]).actionPerformed(e);
            }
        }
!!!10846082.java!!!	getListeners(inout listenerType : Class) : T
        return listenerList.getListeners(listenerType);
!!!10846210.java!!!	timerQueue() : TimerQueue
        return TimerQueue.sharedInstance();
!!!10846338.java!!!	setLogTimers(inout flag : boolean) : void
        logTimers = flag;
!!!10846466.java!!!	getLogTimers() : boolean
        return logTimers;
!!!10846594.java!!!	setDelay(in delay : int) : void
        if (delay < 0) {
            throw new IllegalArgumentException("Invalid delay: " + delay);
        }
        else {
            this.delay = delay;
        }
!!!10846722.java!!!	getDelay() : int
        return delay;
!!!10846850.java!!!	setInitialDelay(in initialDelay : int) : void
        if (initialDelay < 0) {
            throw new IllegalArgumentException("Invalid initial delay: " +
                                               initialDelay);
        }
        else {
            this.initialDelay = initialDelay;
        }
!!!10846978.java!!!	getInitialDelay() : int
        return initialDelay;
!!!10847106.java!!!	setRepeats(inout flag : boolean) : void
        repeats = flag;
!!!10847234.java!!!	isRepeats() : boolean
        return repeats;
!!!10847362.java!!!	setCoalesce(inout flag : boolean) : void
        boolean old = coalesce;
        coalesce = flag;
        if (!old && coalesce) {
            // We must do this as otherwise if the Timer once notified
            // in !coalese mode notify will be stuck to true and never
            // become false.
            cancelEvent();
        }
!!!10847490.java!!!	isCoalesce() : boolean
        return coalesce;
!!!10847618.java!!!	setActionCommand(inout command : String) : void
        this.actionCommand = command;
!!!10847746.java!!!	getActionCommand() : String
        return actionCommand;
!!!10847874.java!!!	start() : void
        timerQueue().addTimer(this, getInitialDelay());
!!!10848002.java!!!	isRunning() : boolean
        return timerQueue().containsTimer(this);
!!!10848130.java!!!	stop() : void
        getLock().lock();
        try {
            cancelEvent();
            timerQueue().removeTimer(this);
        } finally {
            getLock().unlock();
        }
!!!10848258.java!!!	restart() : void
        getLock().lock();
        try {
            stop();
            start();
        } finally {
            getLock().unlock();
        }
!!!10848386.java!!!	cancelEvent() : void
        notify.set(false);
!!!10848514.java!!!	post() : void
         if (notify.compareAndSet(false, true) || !coalesce) {
             AccessController.doPrivileged(new PrivilegedAction<Void>() {
                 public Void run() {
                     SwingUtilities.invokeLater(doPostEvent);
                     return null;
                }
            }, getAccessControlContext());
        }
!!!10848642.java!!!	getLock() : Lock
        return lock;
!!!10848770.java!!!	readObject(inout in : ObjectInputStream) : void
        this.acc = AccessController.getContext();
        in.defaultReadObject();
!!!10848898.java!!!	readResolve() : Object
        Timer timer = new Timer(getDelay(), null);
        timer.listenerList = listenerList;
        timer.initialDelay = initialDelay;
        timer.delay = delay;
        timer.repeats = repeats;
        timer.coalesce = coalesce;
        timer.actionCommand = actionCommand;
        return timer;
