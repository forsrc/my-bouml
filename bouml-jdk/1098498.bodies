class TreeSet
!!!8968066.java!!!	TreeSet(inout m : NavigableMap)
        this.m = m;
!!!8968194.java!!!	TreeSet()
        this(new TreeMap<E,Object>());
!!!8968322.java!!!	TreeSet(inout comparator : Comparator)
        this(new TreeMap<>(comparator));
!!!8968450.java!!!	TreeSet(inout c : Collection)
        this();
        addAll(c);
!!!8968578.java!!!	TreeSet(inout s : SortedSet)
        this(s.comparator());
        addAll(s);
!!!8968706.java!!!	iterator() : Iterator
        return m.navigableKeySet().iterator();
!!!8968834.java!!!	descendingIterator() : Iterator
        return m.descendingKeySet().iterator();
!!!8968962.java!!!	descendingSet() : NavigableSet
        return new TreeSet<>(m.descendingMap());
!!!8969090.java!!!	size() : int
        return m.size();
!!!8969218.java!!!	isEmpty() : boolean
        return m.isEmpty();
!!!8969346.java!!!	contains(inout o : Object) : boolean
        return m.containsKey(o);
!!!8969474.java!!!	add(inout e : E) : boolean
        return m.put(e, PRESENT)==null;
!!!8969602.java!!!	remove(inout o : Object) : boolean
        return m.remove(o)==PRESENT;
!!!8969730.java!!!	clear() : void
        m.clear();
!!!8969858.java!!!	addAll(inout c : Collection) : boolean
        // Use linear-time version if applicable
        if (m.size()==0 && c.size() > 0 &&
            c instanceof SortedSet &&
            m instanceof TreeMap) {
            SortedSet<? extends E> set = (SortedSet<? extends E>) c;
            TreeMap<E,Object> map = (TreeMap<E, Object>) m;
            Comparator<?> cc = set.comparator();
            Comparator<? super E> mc = map.comparator();
            if (cc==mc || (cc != null && cc.equals(mc))) {
                map.addAllForTreeSet(set, PRESENT);
                return true;
            }
        }
        return super.addAll(c);
!!!8969986.java!!!	subSet(inout fromElement : E, inout fromInclusive : boolean, inout toElement : E, inout toInclusive : boolean) : NavigableSet
        return new TreeSet<>(m.subMap(fromElement, fromInclusive,
                                       toElement,   toInclusive));
!!!8970114.java!!!	headSet(inout toElement : E, inout inclusive : boolean) : NavigableSet
        return new TreeSet<>(m.headMap(toElement, inclusive));
!!!8970242.java!!!	tailSet(inout fromElement : E, inout inclusive : boolean) : NavigableSet
        return new TreeSet<>(m.tailMap(fromElement, inclusive));
!!!8970370.java!!!	subSet(inout fromElement : E, inout toElement : E) : SortedSet
        return subSet(fromElement, true, toElement, false);
!!!8970498.java!!!	headSet(inout toElement : E) : SortedSet
        return headSet(toElement, false);
!!!8970626.java!!!	tailSet(inout fromElement : E) : SortedSet
        return tailSet(fromElement, true);
!!!8970754.java!!!	comparator() : Comparator
        return m.comparator();
!!!8970882.java!!!	first() : E
        return m.firstKey();
!!!8971010.java!!!	last() : E
        return m.lastKey();
!!!8971138.java!!!	lower(inout e : E) : E
        return m.lowerKey(e);
!!!8971266.java!!!	floor(inout e : E) : E
        return m.floorKey(e);
!!!8971394.java!!!	ceiling(inout e : E) : E
        return m.ceilingKey(e);
!!!8971522.java!!!	higher(inout e : E) : E
        return m.higherKey(e);
!!!8971650.java!!!	pollFirst() : E
        Map.Entry<E,?> e = m.pollFirstEntry();
        return (e == null) ? null : e.getKey();
!!!8971778.java!!!	pollLast() : E
        Map.Entry<E,?> e = m.pollLastEntry();
        return (e == null) ? null : e.getKey();
!!!8971906.java!!!	clone() : Object
        TreeSet<E> clone;
        try {
            clone = (TreeSet<E>) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new InternalError(e);
        }

        clone.m = new TreeMap<>(m);
        return clone;
!!!8972034.java!!!	writeObject(inout s : ObjectOutputStream) : void
        // Write out any hidden stuff
        s.defaultWriteObject();

        // Write out Comparator
        s.writeObject(m.comparator());

        // Write out size
        s.writeInt(m.size());

        // Write out all elements in the proper order.
        for (E e : m.keySet())
            s.writeObject(e);
!!!8972162.java!!!	readObject(inout s : ObjectInputStream) : void
        // Read in any hidden stuff
        s.defaultReadObject();

        // Read in Comparator
        @SuppressWarnings("unchecked")
            Comparator<? super E> c = (Comparator<? super E>) s.readObject();

        // Create backing TreeMap
        TreeMap<E,Object> tm = new TreeMap<>(c);
        m = tm;

        // Read in size
        int size = s.readInt();

        tm.readTreeSet(size, s, PRESENT);
!!!8972290.java!!!	spliterator() : Spliterator
        return TreeMap.keySpliteratorFor(m);
