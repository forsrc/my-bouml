class StAXEvent2SAX
!!!4114818.java!!!	StAXEvent2SAX(inout staxCore : XMLEventReader)
        staxEventReader = staxCore;
!!!4114946.java!!!	getContentHandler() : ContentHandler
        return _sax;
!!!4115074.java!!!	setContentHandler(inout handler : ContentHandler) : void
        _sax = handler;
        if (handler instanceof LexicalHandler) {
            _lex = (LexicalHandler) handler;
        }

        if (handler instanceof SAXImpl) {
            _saxImpl = (SAXImpl)handler;
        }
!!!4115202.java!!!	parse(inout unused : InputSource) : void
       try {
            bridge();
        } catch (XMLStreamException e) {
            throw new SAXException(e);
        }
!!!4115330.java!!!	parse() : void
        bridge();
!!!4115458.java!!!	bridge() : void

        try {
            // remembers the nest level of elements to know when we are done.
            int depth=0;
            boolean startedAtDocument = false;

            XMLEvent event = staxEventReader.peek();

            if (!event.isStartDocument() && !event.isStartElement()) {
                throw new IllegalStateException();
            }

            if (event.getEventType() == XMLStreamConstants.START_DOCUMENT){
                startedAtDocument = true;
                version = ((StartDocument)event).getVersion();
                if (((StartDocument)event).encodingSet())
                    encoding = ((StartDocument)event).getCharacterEncodingScheme();
                event=staxEventReader.nextEvent(); // that gets the one we peeked at
                event=staxEventReader.nextEvent(); // that really gets the next one
            }

            handleStartDocument(event);

            // Handle the prolog: http://www.w3.org/TR/REC-xml/#NT-prolog
            while (event.getEventType() != XMLStreamConstants.START_ELEMENT) {
                switch (event.getEventType()) {
                    case XMLStreamConstants.CHARACTERS :
                        handleCharacters(event.asCharacters());
                        break;
                    case XMLStreamConstants.PROCESSING_INSTRUCTION :
                        handlePI((ProcessingInstruction)event);
                        break;
                    case XMLStreamConstants.COMMENT :
                        handleComment();
                        break;
                    case XMLStreamConstants.DTD :
                        handleDTD();
                        break;
                    case XMLStreamConstants.SPACE :
                        handleSpace();
                        break;
                    default :
                        throw new InternalError("processing prolog event: " + event);
                }
                event=staxEventReader.nextEvent();
            }

            // Process the (document) element
            do {
                // These are all of the events listed in the javadoc for
                // XMLEvent.
                // The spec only really describes 11 of them.
                switch (event.getEventType()) {
                    case XMLStreamConstants.START_ELEMENT :
                        depth++;
                        handleStartElement(event.asStartElement());
                        break;
                    case XMLStreamConstants.END_ELEMENT :
                        handleEndElement(event.asEndElement());
                        depth--;
                        break;
                    case XMLStreamConstants.CHARACTERS :
                        handleCharacters(event.asCharacters());
                        break;
                    case XMLStreamConstants.ENTITY_REFERENCE :
                        handleEntityReference();
                        break;
                    case XMLStreamConstants.PROCESSING_INSTRUCTION :
                        handlePI((ProcessingInstruction)event);
                        break;
                    case XMLStreamConstants.COMMENT :
                        handleComment();
                        break;
                    case XMLStreamConstants.DTD :
                        handleDTD();
                        break;
                    case XMLStreamConstants.ATTRIBUTE :
                        handleAttribute();
                        break;
                    case XMLStreamConstants.NAMESPACE :
                        handleNamespace();
                        break;
                    case XMLStreamConstants.CDATA :
                        handleCDATA();
                        break;
                    case XMLStreamConstants.ENTITY_DECLARATION :
                        handleEntityDecl();
                        break;
                    case XMLStreamConstants.NOTATION_DECLARATION :
                        handleNotationDecl();
                        break;
                    case XMLStreamConstants.SPACE :
                        handleSpace();
                        break;
                    default :
                        throw new InternalError("processing event: " + event);
                }

                event=staxEventReader.nextEvent();
            } while (depth!=0);

            if (startedAtDocument) {
                // Handle the Misc (http://www.w3.org/TR/REC-xml/#NT-Misc) that can follow the document element
                while (event.getEventType() != XMLStreamConstants.END_DOCUMENT) {
                    switch (event.getEventType()) {
                        case XMLStreamConstants.CHARACTERS :
                            handleCharacters(event.asCharacters());
                            break;
                        case XMLStreamConstants.PROCESSING_INSTRUCTION :
                            handlePI((ProcessingInstruction)event);
                            break;
                        case XMLStreamConstants.COMMENT :
                            handleComment();
                            break;
                        case XMLStreamConstants.SPACE :
                            handleSpace();
                            break;
                        default :
                            throw new InternalError("processing misc event after document element: " + event);
                    }
                    event=staxEventReader.nextEvent();
                }
            }

            handleEndDocument();
        } catch (SAXException e) {
            throw new XMLStreamException(e);
        }
!!!4115586.java!!!	handleEndDocument() : void
        _sax.endDocument();
!!!4115714.java!!!	handleStartDocument(in event : XMLEvent) : void
        _sax.setDocumentLocator(new Locator2() {
            public int getColumnNumber() {
                return event.getLocation().getColumnNumber();
            }
            public int getLineNumber() {
                return event.getLocation().getLineNumber();
            }
            public String getPublicId() {
                return event.getLocation().getPublicId();
            }
            public String getSystemId() {
                return event.getLocation().getSystemId();
            }
            public String getXMLVersion(){
                return version;
            }
            public String getEncoding(){
                return encoding;
            }

        });
        _sax.startDocument();
!!!4115842.java!!!	handlePI(inout event : ProcessingInstruction) : void
        try {
            _sax.processingInstruction(
                event.getTarget(),
                event.getData());
        } catch (SAXException e) {
            throw new XMLStreamException(e);
        }
!!!4115970.java!!!	handleCharacters(inout event : Characters) : void
        try {
            _sax.characters(
                event.getData().toCharArray(),
                0,
                event.getData().length());
        } catch (SAXException e) {
            throw new XMLStreamException(e);
        }
!!!4116098.java!!!	handleEndElement(inout event : EndElement) : void
        QName qName = event.getName();

        //construct prefix:localName from qName
        String qname = "";
        if (qName.getPrefix() != null && qName.getPrefix().trim().length() != 0){
            qname = qName.getPrefix() + ":";
        }
        qname += qName.getLocalPart();

        try {
            // fire endElement
            _sax.endElement(
                qName.getNamespaceURI(),
                qName.getLocalPart(),
                qname);

            // end namespace bindings
            for( Iterator i = event.getNamespaces(); i.hasNext();) {
                String prefix = (String)i.next();
                if( prefix == null ) { // true for default namespace
                    prefix = "";
                }
                _sax.endPrefixMapping(prefix);
            }
        } catch (SAXException e) {
            throw new XMLStreamException(e);
        }
!!!4116226.java!!!	handleStartElement(inout event : StartElement) : void
        try {
            // start namespace bindings
            for (Iterator i = event.getNamespaces(); i.hasNext();) {
                String prefix = ((Namespace)i.next()).getPrefix();
                if (prefix == null) { // true for default namespace
                    prefix = "";
                }
                _sax.startPrefixMapping(
                    prefix,
                    event.getNamespaceURI(prefix));
            }

            // fire startElement
            QName qName = event.getName();
            String prefix = qName.getPrefix();
            String rawname;
            if (prefix == null || prefix.length() == 0) {
                rawname = qName.getLocalPart();
            } else {
                rawname = prefix + ':' + qName.getLocalPart();
            }

            Attributes saxAttrs = getAttributes(event);
            _sax.startElement(
                qName.getNamespaceURI(),
                qName.getLocalPart(),
                rawname,
                saxAttrs);
        } catch (SAXException e) {
            throw new XMLStreamException(e);
        }
!!!4116354.java!!!	getAttributes(inout event : StartElement) : Attributes
        AttributesImpl attrs = new AttributesImpl();

        if ( !event.isStartElement() ) {
            throw new InternalError(
                "getAttributes() attempting to process: " + event);
        }

        // in SAX, namespace declarations are not part of attributes by default.
        // (there's a property to control that, but as far as we are concerned
        // we don't use it.) So don't add xmlns:* to attributes.

        // gather non-namespace attrs
        for (Iterator i = event.getAttributes(); i.hasNext();) {
            Attribute staxAttr = (javax.xml.stream.events.Attribute)i.next();

            String uri = staxAttr.getName().getNamespaceURI();
            if (uri == null) {
                uri = "";
            }
            String localName = staxAttr.getName().getLocalPart();
            String prefix = staxAttr.getName().getPrefix();
            String qName;
            if (prefix == null || prefix.length() == 0) {
                qName = localName;
            } else {
                qName = prefix + ':' + localName;
            }
            String type = staxAttr.getDTDType();
            String value = staxAttr.getValue();

            attrs.addAttribute(uri, localName, qName, type, value);
        }

        return attrs;
!!!4116482.java!!!	handleNamespace() : void
        // no-op ???
        // namespace events don't normally occur outside of a startElement
        // or endElement
!!!4116610.java!!!	handleAttribute() : void
        // no-op ???
        // attribute events don't normally occur outside of a startElement
        // or endElement
!!!4116738.java!!!	handleDTD() : void
        // no-op ???
        // it seems like we need to pass this info along, but how?
!!!4116866.java!!!	handleComment() : void
        // no-op ???
!!!4116994.java!!!	handleEntityReference() : void
        // no-op ???
!!!4117122.java!!!	handleSpace() : void
        // no-op ???
        // this event is listed in the javadoc, but not in the spec.
!!!4117250.java!!!	handleNotationDecl() : void
        // no-op ???
        // this event is listed in the javadoc, but not in the spec.
!!!4117378.java!!!	handleEntityDecl() : void
        // no-op ???
        // this event is listed in the javadoc, but not in the spec.
!!!4117506.java!!!	handleCDATA() : void
        // no-op ???
        // this event is listed in the javadoc, but not in the spec.
!!!4117634.java!!!	getDTDHandler() : DTDHandler
        return null;
!!!4117762.java!!!	getErrorHandler() : ErrorHandler
        return null;
!!!4117890.java!!!	getFeature(inout name : String) : boolean
        return false;
!!!4118146.java!!!	parse(inout sysId : String) : void
        throw new IOException("This method is not yet implemented.");
!!!4118530.java!!!	getEntityResolver() : EntityResolver
        return null;
!!!4118914.java!!!	getProperty(inout name : String) : Object
        return null;
!!!4119042.java!!!	getColumnNumber() : int
        return 0;
!!!4119170.java!!!	getLineNumber() : int
        return 0;
!!!4119298.java!!!	getPublicId() : String
        return null;
!!!4119426.java!!!	getSystemId() : String
        return null;
