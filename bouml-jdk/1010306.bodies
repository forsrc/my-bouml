class ObjID
!!!7900802.java!!!	ObjID()
        /*
         * If generating random object numbers, create a new UID to
         * ensure uniqueness; otherwise, use a shared UID because
         * sequential object numbers already ensure uniqueness.
         */
        if (useRandomIDs()) {
            space = new UID();
            objNum = secureRandom.nextLong();
        } else {
            space = mySpace;
            objNum = nextObjNum.getAndIncrement();
        }
!!!7900930.java!!!	ObjID(in objNum : int)
        space = new UID((short) 0);
        this.objNum = objNum;
!!!7901058.java!!!	ObjID(in objNum : long, inout space : UID)
        this.objNum = objNum;
        this.space = space;
!!!7901186.java!!!	write(inout out : ObjectOutput) : void
        out.writeLong(objNum);
        space.write(out);
!!!7901314.java!!!	read(inout in : ObjectInput) : ObjID
        long num = in.readLong();
        UID space = UID.read(in);
        return new ObjID(num, space);
!!!7901442.java!!!	hashCode() : int
        return (int) objNum;
!!!7901570.java!!!	equals(inout obj : Object) : boolean
        if (obj instanceof ObjID) {
            ObjID id = (ObjID) obj;
            return objNum == id.objNum && space.equals(id.space);
        } else {
            return false;
        }
!!!7901698.java!!!	toString() : String
        return "[" + (space.equals(mySpace) ? "" : space + ", ") +
            objNum + "]";
!!!7901826.java!!!	useRandomIDs() : boolean
        String value = AccessController.doPrivileged(
            new GetPropertyAction("java.rmi.server.randomIDs"));
        return value == null ? true : Boolean.parseBoolean(value);
