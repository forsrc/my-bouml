format 222
"spi" // jdk1.8::java::awt::im::spi
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/awt/im/spi/"
  java_package "java.awt.im.spi"
  classview 173698 "spi"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 895746 "InputMethod"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the interface for an input method that supports complex text input.
Input methods traditionally support text input for languages that have
more characters than can be represented on a standard-size keyboard,
such as Chinese, Japanese, and Korean. However, they may also be used to
support phonetic text input for English or character reordering for Thai.
<p>
Subclasses of InputMethod can be loaded by the input method framework; they
can then be selected either through the API
({@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod})
or the user interface (the input method selection menu).

@since 1.3

@author JavaSoft International
"
      operation 6596354 "setInputMethodContext"
	public explicit_return_type "void"
	nparams 1
	  param inout name "context" type class_ref 895874 // InputMethodContext
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the input method context, which is used to dispatch input method
events to the client component and to request information from
the client component.
<p>
This method is called once immediately after instantiating this input
method.

@param context the input method context for this input method
@exception NullPointerException if <code>context</code> is null
"
      end

      operation 6596482 "setLocale"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to set the input locale. If the input method supports the
desired locale, it changes its behavior to support input for the locale
and returns true.
Otherwise, it returns false and does not change its behavior.
<p>
This method is called
<ul>
<li>by {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod},
<li>when switching to this input method through the user interface if the user
    specified a locale or if the previously selected input method's
    {@link java.awt.im.spi.InputMethod#getLocale getLocale} method
    returns a non-null value.
</ul>

@param locale locale to input
@return whether the specified locale is supported
@exception NullPointerException if <code>locale</code> is null
"
      end

      operation 6596610 "getLocale"
	public return_type class_ref 312962 // Locale
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current input locale. Might return null in exceptional cases.
<p>
This method is called
<ul>
<li>by {@link java.awt.im.InputContext#getLocale InputContext.getLocale} and
<li>when switching from this input method to a different one through the
    user interface.
</ul>

@return the current input locale, or null
"
      end

      operation 6596738 "setCharacterSubsets"
	public explicit_return_type "void"
	nparams 1
	  param inout name "subsets" type class_ref 895106 // Subset
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subsets of the Unicode character set that this input method
is allowed to input. Null may be passed in to indicate that all
characters are allowed.
<p>
This method is called
<ul>
<li>immediately after instantiating this input method,
<li>when switching to this input method from a different one, and
<li>by {@link java.awt.im.InputContext#setCharacterSubsets InputContext.setCharacterSubsets}.
</ul>

@param subsets the subsets of the Unicode character set from which
characters may be input
"
      end

      operation 6596866 "setCompositionEnabled"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables or disables this input method for composition,
depending on the value of the parameter <code>enable</code>.
<p>
An input method that is enabled for composition interprets incoming
events for both composition and control purposes, while a
disabled input method does not interpret events for composition.
Note however that events are passed on to the input method regardless
whether it is enabled or not, and that an input method that is disabled
for composition may still interpret events for control purposes,
including to enable or disable itself for composition.
<p>
For input methods provided by host operating systems, it is not always possible to
determine whether this operation is supported. For example, an input method may enable
composition only for some locales, and do nothing for other locales. For such input
methods, it is possible that this method does not throw
{@link java.lang.UnsupportedOperationException UnsupportedOperationException},
but also does not affect whether composition is enabled.
<p>
This method is called
<ul>
<li>by {@link java.awt.im.InputContext#setCompositionEnabled InputContext.setCompositionEnabled},
<li>when switching to this input method from a different one using the
    user interface or
    {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod},
    if the previously selected input method's
    {@link java.awt.im.spi.InputMethod#isCompositionEnabled isCompositionEnabled}
    method returns without throwing an exception.
</ul>

@param enable whether to enable the input method for composition
@throws UnsupportedOperationException if this input method does not
support the enabling/disabling operation
@see #isCompositionEnabled
"
      end

      operation 6596994 "isCompositionEnabled"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether this input method is enabled.
An input method that is enabled for composition interprets incoming
events for both composition and control purposes, while a
disabled input method does not interpret events for composition.
<p>
This method is called
<ul>
<li>by {@link java.awt.im.InputContext#isCompositionEnabled InputContext.isCompositionEnabled} and
<li>when switching from this input method to a different one using the
    user interface or
    {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod}.
</ul>

@return <code>true</code> if this input method is enabled for
composition; <code>false</code> otherwise.
@throws UnsupportedOperationException if this input method does not
support checking whether it is enabled for composition
@see #setCompositionEnabled
"
      end

      operation 6597122 "reconvert"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts the reconversion operation. The input method obtains the
text to be reconverted from the current client component using the
{@link java.awt.im.InputMethodRequests#getSelectedText InputMethodRequests.getSelectedText}
method. It can use other <code>InputMethodRequests</code>
methods to request additional information required for the
reconversion operation. The composed and committed text
produced by the operation is sent to the client component as a
sequence of <code>InputMethodEvent</code>s. If the given text
cannot be reconverted, the same text should be sent to the
client component as committed text.
<p>
This method is called by
{@link java.awt.im.InputContext#reconvert() InputContext.reconvert}.

@throws UnsupportedOperationException if the input method does not
support the reconversion operation.
"
      end

      operation 6597250 "dispatchEvent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 339202 // AWTEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dispatches the event to the input method. If input method support is
enabled for the focussed component, incoming events of certain types
are dispatched to the current input method for this component before
they are dispatched to the component's methods or event listeners.
The input method decides whether it needs to handle the event. If it
does, it also calls the event's <code>consume</code> method; this
causes the event to not get dispatched to the component's event
processing methods or event listeners.
<p>
Events are dispatched if they are instances of InputEvent or its
subclasses.
This includes instances of the AWT classes KeyEvent and MouseEvent.
<p>
This method is called by {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent}.

@param event the event being dispatched to the input method
@exception NullPointerException if <code>event</code> is null
"
      end

      operation 6597378 "notifyClientWindowChange"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bounds" type class_ref 314114 // Rectangle
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies this input method of changes in the client window
location or state. This method is called while this input
method is the current input method of its input context and
notifications for it are enabled (see {@link
InputMethodContext#enableClientWindowNotification
InputMethodContext.enableClientWindowNotification}). Calls
to this method are temporarily suspended if the input context's
{@link java.awt.im.InputContext#removeNotify removeNotify}
method is called, and resume when the input method is activated
for a new client component. It is called in the following
situations:
<ul>
<li>
when the window containing the current client component changes
in location, size, visibility, iconification state, or when the
window is closed.</li>
<li>
from <code> enableClientWindowNotification(inputMethod,
true)</code> if the current client component exists,</li>
<li>
when activating the input method for the first time after it
called
<code>enableClientWindowNotification(inputMethod,
true)</code> if during the call no current client component was
available,</li>
<li>
when activating the input method for a new client component
after the input context's removeNotify method has been
called.</li>
</ul>
@param bounds client window's {@link
java.awt.Component#getBounds bounds} on the screen; or null if
the client window is iconified or invisible
"
      end

      operation 6597506 "activate"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Activates the input method for immediate input processing.
<p>
If an input method provides its own windows, it should make sure
at this point that all necessary windows are open and visible.
<p>
This method is called
<ul>
<li>by {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent}
    when a client component receives a FOCUS_GAINED event,
<li>when switching to this input method from a different one using the
    user interface or
    {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod}.
</ul>
The method is only called when the input method is inactive.
A newly instantiated input method is assumed to be inactive.
"
      end

      operation 6597634 "deactivate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "isTemporary" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deactivates the input method.
The isTemporary argument has the same meaning as in
{@link java.awt.event.FocusEvent#isTemporary FocusEvent.isTemporary}.
<p>
If an input method provides its own windows, only windows that relate
to the current composition (such as a lookup choice window) should be
closed at this point.
It is possible that the input method will be immediately activated again
for a different client component, and closing and reopening more
persistent windows (such as a control panel) would create unnecessary
screen flicker.
Before an instance of a different input method class is activated,
{@link #hideWindows} is called on the current input method.
<p>
This method is called
<ul>
<li>by {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent}
    when a client component receives a FOCUS_LOST event,
<li>when switching from this input method to a different one using the
    user interface or
    {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod},
<li>before {@link #removeNotify removeNotify} if the current client component is
    removed.
</ul>
The method is only called when the input method is active.

@param isTemporary whether the focus change is temporary
"
      end

      operation 6597762 "hideWindows"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes or hides all windows opened by this input method instance or
its class.
<p>
This method is called
<ul>
<li>before calling {@link #activate activate} on an instance of a different input
    method class,
<li>before calling {@link #dispose dispose} on this input method.
</ul>
The method is only called when the input method is inactive.
"
      end

      operation 6597890 "removeNotify"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the input method that a client component has been
removed from its containment hierarchy, or that input method
support has been disabled for the component.
<p>
This method is called by {@link java.awt.im.InputContext#removeNotify InputContext.removeNotify}.
<p>
The method is only called when the input method is inactive.
"
      end

      operation 6598018 "endComposition"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ends any input composition that may currently be going on in this
context. Depending on the platform and possibly user preferences,
this may commit or delete uncommitted text. Any changes to the text
are communicated to the active component using an input method event.

<p>
A text editing component may call this in a variety of situations,
for example, when the user moves the insertion point within the text
(but outside the composed text), or when the component's text is
saved to a file or copied to the clipboard.
<p>
This method is called
<ul>
<li>by {@link java.awt.im.InputContext#endComposition InputContext.endComposition},
<li>by {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent}
    when switching to a different client component
<li>when switching from this input method to a different one using the
    user interface or
    {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod}.
</ul>
"
      end

      operation 6598146 "dispose"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases the resources used by this input method.
In particular, the input method should dispose windows and close files that are no
longer needed.
<p>
This method is called by {@link java.awt.im.InputContext#dispose InputContext.dispose}.
<p>
The method is only called when the input method is inactive.
No method of this interface is called on this instance after dispose.
"
      end

      operation 6598274 "getControlObject"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a control object from this input method, or null. A
control object provides methods that control the behavior of the
input method or obtain information from the input method. The type
of the object is an input method specific class. Clients have to
compare the result against known input method control object
classes and cast to the appropriate class to invoke the methods
provided.
<p>
This method is called by
{@link java.awt.im.InputContext#getInputMethodControlObject InputContext.getInputMethodControlObject}.

@return a control object from this input method, or null
"
      end
    end

    class 895874 "InputMethodContext"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides methods that input methods
can use to communicate with their client components or to request
other services.  This interface is implemented by the input method
framework, and input methods call its methods on the instance they
receive through
{@link java.awt.im.spi.InputMethod#setInputMethodContext}.
There should be no other implementors or callers.

@since 1.3

@author JavaSoft International
"
      classrelation 3065986 // <generalisation>
	relation 3065986 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3065986 // <generalisation>
	  b parent class_ref 345986 // InputMethodRequests
      end

      operation 6598402 "dispatchInputMethodEvent"
	public explicit_return_type "void"
	nparams 5
	  param in name "id" explicit_type "int"
	  param inout name "text" type class_ref 472962 // AttributedCharacterIterator
	  param in name "committedCharacterCount" explicit_type "int"
	  param inout name "caret" type class_ref 886914 // TextHitInfo
	  param inout name "visiblePosition" type class_ref 886914 // TextHitInfo
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an input method event from the arguments given
and dispatches it to the client component. For arguments,
see {@link java.awt.event.InputMethodEvent#InputMethodEvent}.
"
      end

      operation 6598530 "createInputMethodWindow"
	public return_type class_ref 347394 // Window
	nparams 2
	  param inout name "title" type class_ref 128130 // String
	  param inout name "attachToInputContext" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a top-level window for use by the input method.
The intended behavior of this window is:
<ul>
<li>it floats above all document windows and dialogs
<li>it and all components that it contains do not receive the focus
<li>it has lightweight decorations, such as a reduced drag region without title
</ul>
However, the actual behavior with respect to these three items is platform dependent.
<p>
The title may or may not be displayed, depending on the actual type of window created.
<p>
If attachToInputContext is true, the new window will share the input context that
corresponds to this input method context, so that events for components in the window
are automatically dispatched to the input method.
Also, when the window is opened using setVisible(true), the input context will prevent
deactivate and activate calls to the input method that might otherwise be caused.
<p>
Input methods must call {@link java.awt.Window#dispose() Window.dispose} on the
returned input method window when it is no longer needed.
<p>
@param title the title to be displayed in the window's title bar,
             if there is such a title bar.
             A <code>null</code> value is treated as an empty string, \"\".
@param attachToInputContext whether this window should share the input context
             that corresponds to this input method context
@return a window with special characteristics for use by input methods
@exception HeadlessException if <code>GraphicsEnvironment.isHeadless
             </code> returns <code>true</code>
"
      end

      operation 6598658 "createInputMethodJFrame"
	public return_type class_ref 476930 // JFrame
	nparams 2
	  param inout name "title" type class_ref 128130 // String
	  param inout name "attachToInputContext" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a top-level Swing JFrame for use by the input method.
The intended behavior of this window is:
<ul>
<li>it floats above all document windows and dialogs
<li>it and all components that it contains do not receive the focus
<li>it has lightweight decorations, such as a reduced drag region without title
</ul>
However, the actual behavior with respect to these three items is platform dependent.
<p>
The title may or may not be displayed, depending on the actual type of window created.
<p>
If attachToInputContext is true, the new window will share the input context that
corresponds to this input method context, so that events for components in the window
are automatically dispatched to the input method.
Also, when the window is opened using setVisible(true), the input context will prevent
deactivate and activate calls to the input method that might otherwise be caused.
<p>
Input methods must call {@link java.awt.Window#dispose() Window.dispose} on the
returned input method window when it is no longer needed.
<p>
@param title the title to be displayed in the window's title bar,
             if there is such a title bar.
             A <code>null</code> value is treated as an empty string, \"\".
@param attachToInputContext whether this window should share the input context
             that corresponds to this input method context
@return a JFrame with special characteristics for use by input methods
@exception HeadlessException if <code>GraphicsEnvironment.isHeadless
             </code> returns <code>true</code>

@since 1.4
"
      end

      operation 6598786 "enableClientWindowNotification"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inputMethod" type class_ref 895746 // InputMethod
	  param inout name "enable" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables or disables notification of the current client window's
location and state for the specified input method. When
notification is enabled, the input method's {@link
java.awt.im.spi.InputMethod#notifyClientWindowChange
notifyClientWindowChange} method is called as described in that
method's specification. Notification is automatically disabled
when the input method is disposed.

@param inputMethod the input method for which notifications are
enabled or disabled
@param enable true to enable, false to disable
"
      end
    end

    class 896002 "InputMethodDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines methods that provide sufficient information about an input method
to enable selection and loading of that input method.
The input method itself is only loaded when it is actually used.

@since 1.3
"
      operation 6598914 "getAvailableLocales"
	public return_type class_ref 312962 // Locale
	nparams 0
	nexceptions 1
	  exception class_ref 344450 // AWTException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the locales supported by the corresponding input method.
The locale may describe just the language, or may also include
country and variant information if needed.
The information is used to select input methods by locale
({@link java.awt.im.InputContext#selectInputMethod(Locale)}). It may also
be used to sort input methods by locale in a user-visible
list of input methods.
<p>
Only the input method's primary locales should be returned.
For example, if a Japanese input method also has a pass-through
mode for Roman characters, typically still only Japanese would
be returned. Thus, the list of locales returned is typically
a subset of the locales for which the corresponding input method's
implementation of {@link java.awt.im.spi.InputMethod#setLocale} returns true.
<p>
If {@link #hasDynamicLocaleList} returns true, this method is
called each time the information is needed. This
gives input methods that depend on network resources the chance
to add or remove locales as resources become available or
unavailable.

@return the locales supported by the input method
@exception AWTException if it can be determined that the input method
is inoperable, for example, because of incomplete installation.
"
      end

      operation 6599042 "hasDynamicLocaleList"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the list of available locales can change
at runtime. This may be the case, for example, for adapters
that access real input methods over the network.
"
      end

      operation 6599170 "getInputMethodDisplayName"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "inputLocale" type class_ref 312962 // Locale
	  param inout name "displayLanguage" type class_ref 312962 // Locale
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the user-visible name of the corresponding
input method for the given input locale in the language in which
the name will be displayed.
<p>
The inputLocale parameter specifies the locale for which text
is input.
This parameter can only take values obtained from this descriptor's
{@link #getAvailableLocales} method or null. If it is null, an
input locale independent name for the input method should be
returned.
<p>
If a name for the desired display language is not available, the
method may fall back to some other language.

@param inputLocale the locale for which text input is supported, or null
@param displayLanguage the language in which the name will be displayed
"
      end

      operation 6599298 "getInputMethodIcon"
	public return_type class_ref 340098 // Image
	nparams 1
	  param inout name "inputLocale" type class_ref 312962 // Locale
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an icon for the corresponding input method.
The icon may be used by a user interface for selecting input methods.
<p>
The inputLocale parameter specifies the locale for which text
is input.
This parameter can only take values obtained from this descriptor's
{@link #getAvailableLocales} method or null. If it is null, an
input locale independent icon for the input method should be
returned.
<p>
The icon's size should be 16&times;16 pixels.

@param inputLocale the locale for which text input is supported, or null
@return an icon for the corresponding input method, or null
"
      end

      operation 6599426 "createInputMethod"
	public return_type class_ref 895746 // InputMethod
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of the corresponding input method.

@return a new instance of the corresponding input method
@exception Exception any exception that may occur while creating the
input method instance
"
      end
    end
  end

  deploymentview 166274 "spi"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 645250 "InputMethod"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Locale;
import java.awt.AWTEvent;
import java.awt.Rectangle;
import java.lang.Character.Subset;
${definition}"
      associated_elems
	class_ref 895746 // InputMethod
      end
      comment "Copyright (c) 1997, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 645378 "InputMethodContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.HeadlessException;
import java.awt.Window;
import java.awt.font.TextHitInfo;
import java.awt.im.InputMethodRequests;
import java.text.AttributedCharacterIterator;
import javax.swing.JFrame;
${definition}"
      associated_elems
	class_ref 895874 // InputMethodContext
      end
      comment "Copyright (c) 1998, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 645506 "InputMethodDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.AWTException;
import java.awt.Image;
import java.util.Locale;
${definition}"
      associated_elems
	class_ref 896002 // InputMethodDescriptor
      end
      comment "Copyright (c) 1998, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
