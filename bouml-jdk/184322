format 222
"modelmbean" // jdk1.8::javax::management::modelmbean
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/management/modelmbean/"
  java_package "javax.management.modelmbean"
  classview 177154 "modelmbean"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1193474 "DescriptorSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents the metadata set for a ModelMBean element.  A
descriptor is part of the ModelMBeanInfo,
ModelMBeanNotificationInfo, ModelMBeanAttributeInfo,
ModelMBeanConstructorInfo, and ModelMBeanParameterInfo.
<P>
A descriptor consists of a collection of fields.  Each field is in
fieldname=fieldvalue format.  Field names are not case sensitive,
case will be preserved on field values.
<P>
All field names and values are not predefined. New fields can be
defined and added by any program.  Some fields have been predefined
for consistency of implementation and support by the
ModelMBeanInfo, ModelMBeanAttributeInfo, ModelMBeanConstructorInfo,
ModelMBeanNotificationInfo, ModelMBeanOperationInfo and ModelMBean
classes.

<p>The <b>serialVersionUID</b> of this class is <code>-6292969195866300415L</code>.

@since 1.5

 serialVersionUID not constant"
      classrelation 3810178 // <realization>
	relation 3810178 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3810178 // <realization>
	  b parent class_ref 489986 // Descriptor
      end

      attribute 2278914 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8071560848919417985L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2279042 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6292969195866300415L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3810306 // oldSerialPersistentFields (<unidirectional association>)
	relation 3810306 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"descriptor\", HashMap.class),
      new ObjectStreamField(\"currClass\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3810306 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3810434 // newSerialPersistentFields (<unidirectional association>)
	relation 3810434 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"descriptor\", HashMap.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3810434 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2279170 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3810562 // serialPersistentFields (<unidirectional association>)
	relation 3810562 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField descriptor HashMap The collection of fields representing this descriptor

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3810562 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3810690 // serialForm (<unidirectional association>)
	relation 3810690 --->
	  a role_name "serialForm" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3810690 // serialForm (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      extra_member 180226 "initialization"
	
	cpp "" ""
	java "  static {
        String form = null;
        boolean compat = false;
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            form = AccessController.doPrivileged(act);
            compat = \"1.0\".equals(form);  // form may be null
        } catch (Exception e) {
            // OK: No compat with 1.0
        }
        serialForm = form;
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3810818 // descriptorMap (<unidirectional association>)
	relation 3810818 --->
	  a role_name "descriptorMap" private
	    comment " END Serialization compatibility stuff
 Spec says that field names are case-insensitive, but that case
is preserved.  This means that we need to be able to map from a
name that may differ in case to the actual name that is used in
the HashMap.  Thus, descriptorMap is a TreeMap with a Comparator
that ignores case.

Previous versions of this class had a field called \"descriptor\"
of type HashMap where the keys were directly Strings.  This is
hard to reconcile with the required semantics, so we fabricate
that field virtually during serialization and deserialization
but keep the real information in descriptorMap.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Object> ${name}${value};
"
	    classrelation_ref 3810818 // descriptorMap (<unidirectional association>)
	  b parent class_ref 500354 // SortedMap
      end

      classrelation 3810946 // currClass (<unidirectional association>)
	relation 3810946 --->
	  a role_name "currClass" init_value " \"DescriptorSupport\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3810946 // currClass (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9817858 "DescriptorSupport"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Descriptor default constructor.
Default initial descriptor size is 20.  It will grow as needed.<br>
Note that the created empty descriptor is not a valid descriptor
(the method {@link #isValid isValid} returns <CODE>false</CODE>)
"
      end

      operation 9817986 "DescriptorSupport"
	public explicit_return_type ""
	nparams 1
	  param in name "initNumFields" explicit_type "int"
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Descriptor constructor.  Takes as parameter the initial
capacity of the Map that stores the descriptor fields.
Capacity will grow as needed.<br> Note that the created empty
descriptor is not a valid descriptor (the method {@link
#isValid isValid} returns <CODE>false</CODE>).

@param initNumFields The initial capacity of the Map that
stores the descriptor fields.

@exception RuntimeOperationsException for illegal value for
initNumFields (&lt;= 0)
@exception MBeanException Wraps a distributed communication Exception.
"
      end

      operation 9818114 "DescriptorSupport"
	public explicit_return_type ""
	nparams 1
	  param inout name "inDescr" type class_ref 1193474 // DescriptorSupport
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Descriptor constructor taking a Descriptor as parameter.
Creates a new descriptor initialized to the values of the
descriptor passed in parameter.

@param inDescr the descriptor to be used to initialize the
constructed descriptor. If it is null or contains no descriptor
fields, an empty Descriptor will be created.
"
      end

      operation 9818242 "DescriptorSupport"
	public explicit_return_type ""
	nparams 1
	  param inout name "inStr" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	  exception class_ref 1193602 // XMLParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Descriptor constructor taking an XML String.</p>

<p>The format of the XML string is not defined, but an
implementation must ensure that the string returned by
{@link #toXMLString() toXMLString()} on an existing
descriptor can be used to instantiate an equivalent
descriptor using this constructor.</p>

<p>In this implementation, all field values will be created
as Strings.  If the field values are not Strings, the
programmer will have to reset or convert these fields
correctly.</p>

@param inStr An XML-formatted string used to populate this
Descriptor.  The format is not defined, but any
implementation must ensure that the string returned by
method {@link #toXMLString toXMLString} on an existing
descriptor can be used to instantiate an equivalent
descriptor when instantiated using this constructor.

@exception RuntimeOperationsException If the String inStr
passed in parameter is null
@exception XMLParseException XML parsing problem while parsing
the input String
@exception MBeanException Wraps a distributed communication Exception.

 At some stage we should rewrite this code to be cleverer.  Using
a StringTokenizer as we do means, first, that we accept a lot of
bogus strings without noticing they are bogus, and second, that we
split the string being parsed at characters like > even if they
occur in the middle of a field value. "
      end

      operation 9818370 "DescriptorSupport"
	public explicit_return_type ""
	nparams 2
	  param inout name "fieldNames" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "fieldValues" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor taking field names and field values.  Neither array
can be null.

@param fieldNames String array of field names.  No elements of
this array can be null.
@param fieldValues Object array of the corresponding field
values.  Elements of the array can be null. The
<code>fieldValue</code> must be valid for the
<code>fieldName</code> (as defined in method {@link #isValid
isValid})

<p>Note: array sizes of parameters should match. If both arrays
are empty, then an empty descriptor is created.</p>

@exception RuntimeOperationsException for illegal value for
field Names or field Values.  The array lengths must be equal.
If the descriptor construction fails for any reason, this
exception will be thrown.

"
      end

      operation 9818498 "DescriptorSupport"
	public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "String...fields"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor taking fields in the <i>fieldName=fieldValue</i>
format.

@param fields String array with each element containing a
field name and value.  If this array is null or empty, then the
default constructor will be executed. Null strings or empty
strings will be ignored.

<p>All field values should be Strings.  If the field values are
not Strings, the programmer will have to reset or convert these
fields correctly.

<p>Note: Each string should be of the form
<i>fieldName=fieldValue</i>.  The field name
ends at the first {@code =} character; for example if the String
is {@code a=b=c} then the field name is {@code a} and its value
is {@code b=c}.

@exception RuntimeOperationsException for illegal value for
field Names or field Values.  The field must contain an
\"=\". \"=fieldValue\", \"fieldName\", and \"fieldValue\" are illegal.
FieldName cannot be null.  \"fieldName=\" will cause the value to
be null.  If the descriptor construction fails for any reason,
this exception will be thrown.

"
      end

      operation 9818626 "init"
	private explicit_return_type "void"
	nparams 1
	  param inout name "initMap" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9818754 "getFieldValue"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "fieldName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Implementation of the Descriptor interface"
      end

      operation 9818882 "setField"
	public explicit_return_type "void"
	nparams 2
	  param inout name "fieldName" type class_ref 128130 // String
	  param inout name "fieldValue" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9819010 "getFields"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9819138 "getFieldNames"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9819266 "getFieldValues"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "String...fieldNames"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9819394 "setFields"
	public explicit_return_type "void"
	nparams 2
	  param inout name "fieldNames" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "fieldValues" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9819522 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a new Descriptor which is a duplicate of the Descriptor.

@exception RuntimeOperationsException for illegal value for
field Names or field Values.  If the descriptor construction
fails for any reason, this exception will be thrown.
"
      end

      operation 9819650 "removeField"
	public explicit_return_type "void"
	nparams 1
	  param inout name "fieldName" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9819778 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares this descriptor to the given object.  The objects are equal if
the given object is also a Descriptor, and if the two Descriptors have
the same field names (possibly differing in case) and the same
associated values.  The respective values for a field in the two
Descriptors are equal if the following conditions hold:

<ul>
<li>If one value is null then the other must be too.</li>
<li>If one value is a primitive array then the other must be a primitive
array of the same type with the same elements.</li>
<li>If one value is an object array then the other must be too and
{@link java.util.Arrays#deepEquals(Object[],Object[]) Arrays.deepEquals}
must return true.</li>
<li>Otherwise {@link Object#equals(Object)} must return true.</li>
</ul>

@param o the object to compare with.

@return {@code true} if the objects are the same; {@code false}
otherwise.


 Note: this Javadoc is copied from javax.management.Descriptor
       due to 6369229."
      end

      operation 9819906 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Returns the hash code value for this descriptor.  The hash
code is computed as the sum of the hash codes for each field in
the descriptor.  The hash code of a field with name {@code n}
and value {@code v} is {@code n.toLowerCase().hashCode() ^ h}.
Here {@code h} is the hash code of {@code v}, computed as
follows:</p>

<ul>
<li>If {@code v} is null then {@code h} is 0.</li>
<li>If {@code v} is a primitive array then {@code h} is computed using
the appropriate overloading of {@code java.util.Arrays.hashCode}.</li>
<li>If {@code v} is an object array then {@code h} is computed using
{@link java.util.Arrays#deepHashCode(Object[]) Arrays.deepHashCode}.</li>
<li>Otherwise {@code h} is {@code v.hashCode()}.</li>
</ul>

@return A hash code value for this object.


 Note: this Javadoc is copied from javax.management.Descriptor
       due to 6369229."
      end

      operation 9820034 "isValid"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if all of the fields have legal values given their
names.
<P>
This implementation does not support  interoperating with a directory
or lookup service. Thus, conforming to the specification, no checking is
done on the <i>\"export\"</i> field.
<P>
Otherwise this implementation returns false if:
<UL>
<LI> name and descriptorType fieldNames are not defined, or
null, or empty, or not String
<LI> class, role, getMethod, setMethod fieldNames, if defined,
are null or not String
<LI> persistPeriod, currencyTimeLimit, lastUpdatedTimeStamp,
lastReturnedTimeStamp if defined, are null, or not a Numeric
String or not a Numeric Value {@literal >= -1}
<LI> log fieldName, if defined, is null, or not a Boolean or
not a String with value \"t\", \"f\", \"true\", \"false\". These String
values must not be case sensitive.
<LI> visibility fieldName, if defined, is null, or not a
Numeric String or a not Numeric Value {@literal >= 1 and <= 4}
<LI> severity fieldName, if defined, is null, or not a Numeric
String or not a Numeric Value {@literal >= 0 and <= 6}<br>
<LI> persistPolicy fieldName, if defined, is null, or not one of
the following strings:<br>
  \"OnUpdate\", \"OnTimer\", \"NoMoreOftenThan\", \"OnUnregister\", \"Always\",
  \"Never\". These String values must not be case sensitive.<br>
</UL>

@exception RuntimeOperationsException If the validity checking
fails for any reason, this exception will be thrown.
"
      end

      operation 9820162 "validateField"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "fldName" type class_ref 128130 // String
	  param inout name "fldValue" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " worker routine for isValid()
 name is not null
 descriptorType is not null
 getMethod and setMethod are not null
 persistPeriod is numeric
 currencyTimeLimit is numeric
 lastUpdatedTimeStamp is numeric
 visibility is 1-4
 severity is 0-6
 log is T or F
 role is not null
 class is not null
 lastReturnedTimeStamp is numeric"
      end

      operation 9820290 "toXMLString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns an XML String representing the descriptor.</p>

<p>The format is not defined, but an implementation must
ensure that the string returned by this method can be
used to build an equivalent descriptor when instantiated
using the constructor {@link #DescriptorSupport(String)
DescriptorSupport(String inStr)}.</p>

<p>Fields which are not String objects will have toString()
called on them to create the value. The value will be
enclosed in parentheses.  It is not guaranteed that you can
reconstruct these objects unless they have been
specifically set up to support toString() in a meaningful
format and have a matching constructor that accepts a
String in the same format.</p>

<p>If the descriptor is empty the following String is
returned: &lt;Descriptor&gt;&lt;/Descriptor&gt;</p>

@return the XML string.

@exception RuntimeOperationsException for illegal value for
field Names or field Values.  If the XML formatted string
construction fails for any reason, this exception will be
thrown.
"
      end

      classrelation 3811074 // entities (<unidirectional association>)
	relation 3811074 --->
	  a role_name "entities" multiplicity "[]" init_value " {
        \" &#32;\",
        \"\\\"&quot;\",
        \"<&lt;\",
        \">&gt;\",
        \"&&amp;\",
        \"\\r&#13;\",
        \"\\t&#9;\",
        \"\\n&#10;\",
        \"\\f&#12;\",
    }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3811074 // entities (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3811202 // entityToCharMap (<unidirectional association>)
	relation 3811202 --->
	  a role_name "entityToCharMap" init_value "
        new HashMap<String,Character>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Character> ${name}${value};
"
	    classrelation_ref 3811202 // entityToCharMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3811330 // charToEntityMap (<unidirectional association>)
	relation 3811330 --->
	  a role_name "charToEntityMap" multiplicity "[]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3811330 // charToEntityMap (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      extra_member 180354 "initialization"
	
	cpp "" ""
	java "  static {
        char maxChar = 0;
        for (int i = 0; i < entities.length; i++) {
            final char c = entities[i].charAt(0);
            if (c > maxChar)
                maxChar = c;
        }
        charToEntityMap = new String[maxChar + 1];
        for (int i = 0; i < entities.length; i++) {
            final char c = entities[i].charAt(0);
            final String entity = entities[i].substring(1);
            charToEntityMap[c] = entity;
            entityToCharMap.put(entity, c);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 9820418 "isMagic"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9820546 "quote"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Quote the string so that it will be acceptable to the (String)
constructor.  Since the parsing code in that constructor is fairly
stupid, we're obliged to quote apparently innocuous characters like
space, <, and >.  In a future version, we should rewrite the parser
and only quote \" plus either \\ or & (depending on the quote syntax).
"
      end

      operation 9820674 "unquote"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1193602 // XMLParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9820802 "makeFieldValue"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make the string that will go inside \"...\" for a value that is not
a plain String.
@throws RuntimeOperationsException if the value cannot be encoded.
"
      end

      operation 9820930 "parseQuotedFieldValue"
	class_operation private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1193602 // XMLParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse a field value from the XML produced by toXMLString().
Given a descriptor XML containing <field name=\"nnn\" value=\"vvv\">,
the argument to this method will be \"vvv\" (a string including the
containing quote characters).  If vvv begins and ends with parentheses,
then it may contain:
- the characters \"null\", in which case the result is null;
- a value of the form \"some.class.name/xxx\", in which case the
result is equivalent to `new some.class.name(\"xxx\")';
- some other string, in which case the result is that string,
without the parentheses.
"
      end

      operation 9821058 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a human readable string representing the
descriptor.  The string will be in the format of
\"fieldName=fieldValue,fieldName2=fieldValue2,...\"<br>

If there are no fields in the descriptor, then an empty String
is returned.<br>

If a fieldValue is an object then the toString() method is
called on it and its returned value is used as the value for
the field enclosed in parenthesis.

@exception RuntimeOperationsException for illegal value for
field Names or field Values.  If the descriptor string fails
for any reason, this exception will be thrown.
"
      end

      operation 9821186 "toNumeric"
	private explicit_return_type "long"
	nparams 1
	  param inout name "inStr" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " utility to convert to int, returns -2 if bogus."
      end

      operation 9821314 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link DescriptorSupport} from an {@link
ObjectInputStream}.
"
      end

      operation 9821442 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link DescriptorSupport} to an {@link ObjectOutputStream}.

 If you set jmx.serial.form to \"1.2.0\" or \"1.2.1\", then we are
bug-compatible with those versions.  Specifically, field names
are forced to lower-case before being written.  This
contradicts the spec, which, though it does not mention
serialization explicitly, does say that the case of field names
is preserved.  But in 1.2.0 and 1.2.1, this requirement was not
met.  Instead, field names in the descriptor map were forced to
lower case.  Those versions expect this to have happened to a
descriptor they deserialize and e.g. getFieldValue will not
find a field whose name is spelt with a different case.
"
      end
    end

    class 1193602 "XMLParseException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown when an XML formatted string is being parsed into ModelMBean objects
or when XML formatted strings are being created from ModelMBean objects.

It is also used to wrapper exceptions from XML parsers that may be used.

<p>The <b>serialVersionUID</b> of this class is <code>3176664577895105181L</code>.

@since 1.5

 serialVersionUID not constant"
      classrelation 3820674 // <generalisation>
	relation 3820674 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3820674 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 2282626 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7780049316655891976L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2282754 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3176664577895105181L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3820802 // oldSerialPersistentFields (<unidirectional association>)
	relation 3820802 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"msgStr\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3820802 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3820930 // newSerialPersistentFields (<unidirectional association>)
	relation 3820930 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value " { }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3820930 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2282882 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3821058 // serialPersistentFields (<unidirectional association>)
	relation 3821058 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3821058 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2283010 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 181506 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK: No compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 9838850 "XMLParseException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " END Serialization compatibility stuff

Default constructor .
"
      end

      operation 9838978 "XMLParseException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor taking a string.

@param s the detail message.
"
      end

      operation 9839106 "XMLParseException"
	public explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 132226 // Exception
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor taking a string and an exception.

@param e the nested exception.
@param s the detail message.
"
      end

      operation 9839234 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes an {@link XMLParseException} from an {@link ObjectInputStream}.
"
      end

      operation 9839362 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes an {@link XMLParseException} to an {@link ObjectOutputStream}.
"
      end
    end

    class 1193730 "InvalidTargetObjectTypeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception thrown when an invalid target object type is specified.


<p>The <b>serialVersionUID</b> of this class is <code>1190536278266811217L</code>.

@since 1.5

 serialVersionUID not constant"
      classrelation 3811458 // <generalisation>
	relation 3811458 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3811458 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 2279298 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3711724570458346634L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2279426 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1190536278266811217L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3811586 // oldSerialPersistentFields (<unidirectional association>)
	relation 3811586 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"msgStr\", String.class),
      new ObjectStreamField(\"relatedExcept\", Exception.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3811586 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3811714 // newSerialPersistentFields (<unidirectional association>)
	relation 3811714 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"exception\", Exception.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3811714 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2279554 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3811842 // serialPersistentFields (<unidirectional association>)
	relation 3811842 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField exception Exception Encapsulated {@link Exception}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3811842 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2279682 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 180482 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK: No compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3811970 // exception (<unidirectional association>)
	relation 3811970 --->
	  a role_name "exception" package
	    comment " END Serialization compatibility stuff

@serial Encapsulated {@link Exception}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3811970 // exception (<unidirectional association>)
	  b parent class_ref 132226 // Exception
      end

      operation 9821570 "InvalidTargetObjectTypeException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 9821698 "InvalidTargetObjectTypeException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor from a string.

@param s String value that will be incorporated in the message for
   this exception.
"
      end

      operation 9821826 "InvalidTargetObjectTypeException"
	public explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 132226 // Exception
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor taking an exception and a string.

@param e Exception that we may have caught to reissue as an
   InvalidTargetObjectTypeException.  The message will be used, and we may want to
   consider overriding the printStackTrace() methods to get data
   pointing back to original throw stack.
@param s String value that will be incorporated in message for
   this exception.
"
      end

      operation 9821954 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes an {@link InvalidTargetObjectTypeException} from an {@link ObjectInputStream}.
"
      end

      operation 9822082 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes an {@link InvalidTargetObjectTypeException} to an {@link ObjectOutputStream}.
"
      end
    end

    class 1193858 "ModelMBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface must be implemented by the ModelMBeans. An implementation of this interface
must be shipped with every JMX Agent.
<P>
Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer's
createMBean method.  The resource then sets the ModelMBeanInfo (with Descriptors) for the ModelMBean
instance. The attributes and operations exposed via the ModelMBeanInfo for the ModelMBean are accessible
from MBeans, connectors/adaptors like other MBeans. Through the ModelMBeanInfo Descriptors, values and methods in
the managed application can be defined and mapped to attributes and operations of the ModelMBean.
This mapping can be defined during development in an XML formatted file or dynamically and
programmatically at runtime.
<P>
Every ModelMBean which is instantiated in the MBeanServer becomes manageable:
its attributes and operations
become remotely accessible through the connectors/adaptors connected to that MBeanServer.
A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean.
By instantiating a ModelMBean, resources are guaranteed that the MBean is valid.
<P>
MBeanException and RuntimeOperationsException must be thrown on every public method.  This allows
for wrapping exceptions from distributed communications (RMI, EJB, etc.).  These exceptions do
not have to be thrown by the implementation except in the scenarios described in the specification
and javadoc.

@since 1.5
"
      classrelation 3812098 // <generalisation>
	relation 3812098 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3812098 // <generalisation>
	  b parent class_ref 488450 // DynamicMBean
      end

      classrelation 3812226 // <generalisation>
	relation 3812226 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3812226 // <generalisation>
	  b parent class_ref 1191298 // PersistentMBean
      end

      classrelation 3812482 // <generalisation>
	relation 3812482 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3812482 // <generalisation>
	  b parent class_ref 1193986 // ModelMBeanNotificationBroadcaster
      end

      operation 9822978 "setModelMBeanInfo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inModelMBeanInfo" type class_ref 1194114 // ModelMBeanInfo
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a ModelMBean object using ModelMBeanInfo passed in.
This method makes it possible to set a customized ModelMBeanInfo on
the ModelMBean as long as it is not registered with the MBeanServer.
<br>
Once the ModelMBean's ModelMBeanInfo (with Descriptors) are
customized and set on the ModelMBean, the  ModelMBean can be
registered with the MBeanServer.
<P>
If the ModelMBean is currently registered, this method throws
a {@link javax.management.RuntimeOperationsException} wrapping an
{@link IllegalStateException}

@param inModelMBeanInfo The ModelMBeanInfo object to be used
       by the ModelMBean.

@exception MBeanException Wraps a distributed communication
       Exception.
@exception RuntimeOperationsException
<ul><li>Wraps an {@link IllegalArgumentException} if
        the MBeanInfo passed in parameter is null.</li>
    <li>Wraps an {@link IllegalStateException} if the ModelMBean
        is currently registered in the MBeanServer.</li>
</ul>

"
      end

      operation 9823106 "setManagedResource"
	public explicit_return_type "void"
	nparams 2
	  param inout name "mr" type class_ref 129538 // Object
	  param inout name "mr_type" type class_ref 128130 // String
	nexceptions 4
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 1193730 // InvalidTargetObjectTypeException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the instance handle of the object against which to
execute all methods in this ModelMBean management interface
(MBeanInfo and Descriptors).

@param mr Object that is the managed resource
@param mr_type The type of reference for the managed resource.  Can be: ObjectReference,
              Handle, IOR, EJBHandle, RMIReference.
              If the MBeanServer cannot process the mr_type passed in, an InvalidTargetTypeException
              will be thrown.


@exception MBeanException The initializer of the object has thrown an exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException:
      The managed resource type passed in parameter is null.
@exception InstanceNotFoundException The managed resource object could not be found
@exception InvalidTargetObjectTypeException The managed resource type cannot be processed by the
ModelMBean or JMX Agent.
"
      end
    end

    class 1193986 "ModelMBeanNotificationBroadcaster"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface must be implemented by the ModelMBeans. An implementation of this interface
must be shipped with every JMX Agent.
<P>
Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer's
createMBean method.  The resource then sets the ModelMBeanInfo (with Descriptors) for the ModelMBean
instance. The attributes and operations exposed via the ModelMBeanInfo for the ModelMBean are accessible
from MBeans, connectors/adaptors like other MBeans. Through the ModelMBeanInfo Descriptors, values and methods in
the managed application can be defined and mapped to attributes and operations of the ModelMBean.
This mapping can be defined during development in an XML formatted file or dynamically and
programmatically at runtime.
<P>
Every ModelMBean which is instantiated in the MBeanServer becomes manageable:
its attributes and operations
become remotely accessible through the connectors/adaptors connected to that MBeanServer.
A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean.
By instantiating a ModelMBean, resources are guaranteed that the MBean is valid.
<P>
MBeanException and RuntimeOperationsException must be thrown on every public method.  This allows
for wrapping exceptions from distributed communications (RMI, EJB, etc.).  These exceptions do
not have to be thrown by the implementation except in the scenarios described in the specification
and javadoc.

@since 1.5
"
      classrelation 3812354 // <generalisation>
	relation 3812354 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3812354 // <generalisation>
	  b parent class_ref 497794 // NotificationBroadcaster
      end

      operation 9822210 "sendNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ntfyObj" type class_ref 488706 // Notification
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a Notification which is passed in to the registered
Notification listeners on the ModelMBean as a
jmx.modelmbean.generic notification.

@param ntfyObj The notification which is to be passed to
the 'handleNotification' method of the listener object.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException:
      The Notification object passed in parameter is null.

"
      end

      operation 9822338 "sendNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ntfyText" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a Notification which contains the text string that is passed in
to the registered Notification listeners on the ModelMBean.

@param ntfyText The text which is to be passed in the Notification to the 'handleNotification'
method of the listener object.
the constructed Notification will be:
  type        \"jmx.modelmbean.generic\"
  source      this ModelMBean instance
  sequence    1


@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException:
      The Notification text string passed in parameter is null.

"
      end

      operation 9822466 "sendAttributeChangeNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "notification" type class_ref 1186434 // AttributeChangeNotification
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends an attributeChangeNotification which is passed in to
the registered attributeChangeNotification listeners on the
ModelMBean.

@param notification The notification which is to be passed
to the 'handleNotification' method of the listener object.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException: The AttributeChangeNotification object passed in parameter is null.

"
      end

      operation 9822594 "sendAttributeChangeNotification"
	public explicit_return_type "void"
	nparams 2
	  param inout name "oldValue" type class_ref 486786 // Attribute
	  param inout name "newValue" type class_ref 486786 // Attribute
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends an attributeChangeNotification which contains the old value and new value for the
attribute to the registered AttributeChangeNotification listeners on the ModelMBean.
<P>
@param oldValue The original value for the Attribute
@param newValue The current value for the Attribute
<PRE>
The constructed attributeChangeNotification will be:
  type        \"jmx.attribute.change\"
  source      this ModelMBean instance
  sequence    1
  attributeName oldValue.getName()
  attributeType oldValue's class
  attributeOldValue oldValue.getValue()
  attributeNewValue newValue.getValue()
</PRE>

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException: An Attribute object passed in parameter is null
or the names of the two Attribute objects in parameter are not the same.
"
      end

      operation 9822722 "addAttributeChangeNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "attributeName" type class_ref 128130 // String
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 3
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers an object which implements the NotificationListener interface as a listener.  This
object's 'handleNotification()' method will be invoked when any attributeChangeNotification is issued through
or by the ModelMBean.  This does not include other Notifications.  They must be registered
for independently. An AttributeChangeNotification will be generated for this attributeName.

@param listener The listener object which will handles notifications emitted by the registered MBean.
@param attributeName The name of the ModelMBean attribute for which to receive change notifications.
     If null, then all attribute changes will cause an attributeChangeNotification to be issued.
@param handback The context to be sent to the listener with the notification when a notification is emitted.

@exception IllegalArgumentException The listener cannot be null.
@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException The attribute name passed in parameter does not exist.

@see #removeAttributeChangeNotificationListener
"
      end

      operation 9822850 "removeAttributeChangeNotificationListener"
	public explicit_return_type "void"
	nparams 2
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "attributeName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	  exception class_ref 487298 // ListenerNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener for attributeChangeNotifications from the RequiredModelMBean.

@param listener The listener name which was handling notifications emitted by the registered MBean.
This method will remove all information related to this listener.
@param attributeName The attribute for which the listener no longer wants to receive attributeChangeNotifications.
If null the listener will be removed for all attributeChangeNotifications.

@exception ListenerNotFoundException The listener is not registered in the MBean or is null.
@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException If the inAttributeName parameter does not
correspond to an attribute name.

@see #addAttributeChangeNotificationListener
"
      end
    end

    class 1194114 "ModelMBeanInfo"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface is implemented by the ModelMBeanInfo for every ModelMBean. An implementation of this interface
must be shipped with every JMX Agent.
<P>
Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer's
createMBean method.  The resource then sets the ModelMBeanInfo and Descriptors for the ModelMBean
instance. The attributes, operations, and notifications exposed via the ModelMBeanInfo for the
ModelMBean comprise the management interface and are accessible
from MBeans, connectors/adaptors like other MBeans. Through the Descriptors, values and methods in
the managed application can be defined and mapped to attributes and operations of the ModelMBean.
This mapping can be defined during development in a file or dynamically and
programmatically at runtime.
<P>
Every ModelMBean which is instantiated in the MBeanServer becomes manageable:
its attributes, operations, and notifications
become remotely accessible through the connectors/adaptors connected to that MBeanServer.
A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean.
By instantiating a ModelMBean, resources are guaranteed that the MBean is valid.

MBeanException and RuntimeOperationsException must be thrown on every public method.  This allows
 for wrapping exceptions from distributed communications (RMI, EJB, etc.)

@since 1.5
"
      operation 9826306 "getDescriptors"
	public return_type class_ref 489986 // Descriptor
	nparams 1
	  param inout name "inDescriptorType" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Descriptor array consisting of all
Descriptors for the ModelMBeanInfo of type inDescriptorType.

@param inDescriptorType value of descriptorType field that must be set for the descriptor
to be returned.  Must be \"mbean\", \"attribute\", \"operation\", \"constructor\" or \"notification\".
If it is null or empty then all types will be returned.

@return Descriptor array containing all descriptors for the ModelMBean if type inDescriptorType.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException when the descriptorType in parameter is
not one of: \"mbean\", \"attribute\", \"operation\", \"constructor\", \"notification\", empty or null.

@see #setDescriptors
"
      end

      operation 9826434 "setDescriptors"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptors" type class_ref 489986 // Descriptor
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds or replaces descriptors in the ModelMBeanInfo.

@param inDescriptors The descriptors to be set in the ModelMBeanInfo. Null
elements of the list will be ignored.  All descriptors must have name and descriptorType fields.

@exception RuntimeOperationsException Wraps an IllegalArgumentException for a null or invalid descriptor.
@exception MBeanException Wraps a distributed communication Exception.

@see #getDescriptors
"
      end

      operation 9826562 "getDescriptor"
	public return_type class_ref 489986 // Descriptor
	nparams 2
	  param inout name "inDescriptorName" type class_ref 128130 // String
	  param inout name "inDescriptorType" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Descriptor requested by name and descriptorType.

@param inDescriptorName The name of the descriptor.
@param inDescriptorType The type of the descriptor being
requested.  If this is null or empty then all types are
searched. Valid types are 'mbean', 'attribute', 'constructor'
'operation', and 'notification'. This value will be equal to
the 'descriptorType' field in the descriptor that is returned.

@return Descriptor containing the descriptor for the ModelMBean
with the same name and descriptorType.  If no descriptor is
found, null is returned.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException for a null descriptor name or null or invalid type.
The type must be \"mbean\",\"attribute\", \"constructor\", \"operation\", or \"notification\".

@see #setDescriptor
"
      end

      operation 9826690 "setDescriptor"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inDescriptor" type class_ref 489986 // Descriptor
	  param inout name "inDescriptorType" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets descriptors in the info array of type inDescriptorType
for the ModelMBean.  The setDescriptor method of the
corresponding ModelMBean*Info will be called to set the
specified descriptor.

@param inDescriptor The descriptor to be set in the
ModelMBean. It must NOT be null.  All descriptors must have
name and descriptorType fields.
@param inDescriptorType The type of the descriptor being
set. If this is null then the descriptorType field in the
descriptor is used. If specified this value must be set in
the descriptorType field in the descriptor. Must be
\"mbean\",\"attribute\", \"constructor\", \"operation\", or
\"notification\".

@exception RuntimeOperationsException Wraps an
IllegalArgumentException for illegal or null arguments or
if the name field of the descriptor is not found in the
corresponding MBeanAttributeInfo or MBeanConstructorInfo or
MBeanNotificationInfo or MBeanOperationInfo.
@exception MBeanException Wraps a distributed communication
Exception.

@see #getDescriptor
"
      end

      operation 9826818 "getMBeanDescriptor"
	public return_type class_ref 489986 // Descriptor
	nparams 0
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the ModelMBean's descriptor which contains MBean wide
policies.  This descriptor contains metadata about the MBean and default
policies for persistence and caching.</p>

<P id=\"descriptor\">
The fields in the descriptor are defined, but not limited to, the
following.  Note that when the Type in this table is Number, a String
that is the decimal representation of a Long can also be used.</P>

<table border=\"1\" cellpadding=\"5\" summary=\"ModelMBean Fields\">
<tr><th>Name</th><th>Type</th><th>Meaning</th></tr>
<tr><td>name</td><td>String</td>
    <td>MBean name.</td></tr>
<tr><td>descriptorType</td><td>String</td>
    <td>Must be \"mbean\".</td></tr>
<tr><td>displayName</td><td>String</td>
    <td>Name of MBean to be used in displays.</td></tr>
<tr><td>persistPolicy</td><td>String</td>
    <td>One of: OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never.
        See the section \"MBean Descriptor Fields\" in the JMX specification
        document.</td></tr>
<tr><td>persistLocation</td><td>String</td>
    <td>The fully qualified directory name where the MBean should be
        persisted (if appropriate).</td></tr>
<tr><td>persistFile</td><td>String</td>
    <td>File name into which the MBean should be persisted.</td></tr>
<tr><td>persistPeriod</td><td>Number</td>
    <td>Frequency of persist cycle in seconds, for OnTime and
        NoMoreOftenThan PersistPolicy</td></tr>
<tr><td>currencyTimeLimit</td><td>Number</td>
    <td>How long cached value is valid: &lt;0 never, =0 always,
        &gt;0 seconds.</td></tr>
<tr><td>log</td><td>String</td>
    <td>t: log all notifications, f: log no notifications.</td></tr>
<tr><td>logfile</td><td>String</td>
    <td>Fully qualified filename to log events to.</td></tr>
<tr><td>visibility</td><td>Number</td>
    <td>1-4 where 1: always visible 4: rarely visible.</td></tr>
<tr><td>export</td><td>String</td>
    <td>Name to be used to export/expose this MBean so that it is
        findable by other JMX Agents.</td></tr>
<tr><td>presentationString</td><td>String</td>
    <td>XML formatted string to allow presentation of data to be
        associated with the MBean.</td></tr>
</table>

<P>
The default descriptor is: name=className,descriptorType=\"mbean\", displayName=className,
 persistPolicy=\"never\",log=\"F\",visibility=\"1\"
If the descriptor does not contain all these fields, they will be added with these default values.

<p><b>Note:</b> because of inconsistencies in previous versions of
this specification, it is recommended not to use negative or zero
values for <code>currencyTimeLimit</code>.  To indicate that a
cached value is never valid, omit the
<code>currencyTimeLimit</code> field.  To indicate that it is
always valid, use a very large number for this field.</p>

@return the MBean descriptor.

@exception MBeanException Wraps a distributed communication
Exception.

@exception RuntimeOperationsException a {@link
RuntimeException} occurred while getting the descriptor.

@see #setMBeanDescriptor
"
      end

      operation 9826946 "setMBeanDescriptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptor" type class_ref 489986 // Descriptor
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the ModelMBean's descriptor.  This descriptor contains default, MBean wide
metadata about the MBean and default policies for persistence and caching. This operation
does a complete replacement of the descriptor, no merging is done. If the descriptor to
set to is null then the default descriptor will be created.
The default descriptor is: name=className,descriptorType=\"mbean\", displayName=className,
 persistPolicy=\"never\",log=\"F\",visibility=\"1\"
If the descriptor does not contain all these fields, they will be added with these default values.

See {@link #getMBeanDescriptor getMBeanDescriptor} method javadoc for description of valid field names.

@param inDescriptor the descriptor to set.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException  for invalid descriptor.


@see #getMBeanDescriptor
"
      end

      operation 9827074 "getAttribute"
	public return_type class_ref 1194242 // ModelMBeanAttributeInfo
	nparams 1
	  param inout name "inName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a ModelMBeanAttributeInfo requested by name.

@param inName The name of the ModelMBeanAttributeInfo to get.
If no ModelMBeanAttributeInfo exists for this name null is returned.

@return the attribute info for the named attribute, or null
if there is none.

@exception MBeanException Wraps a distributed communication
Exception.
@exception RuntimeOperationsException Wraps an
IllegalArgumentException for a null attribute name.

"
      end

      operation 9827202 "getOperation"
	public return_type class_ref 1194498 // ModelMBeanOperationInfo
	nparams 1
	  param inout name "inName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a ModelMBeanOperationInfo requested by name.

@param inName The name of the ModelMBeanOperationInfo to get.
If no ModelMBeanOperationInfo exists for this name null is returned.

@return the operation info for the named operation, or null
if there is none.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException for a null operation name.

"
      end

      operation 9827330 "getNotification"
	public return_type class_ref 1194626 // ModelMBeanNotificationInfo
	nparams 1
	  param inout name "inName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a ModelMBeanNotificationInfo requested by name.

@param inName The name of the ModelMBeanNotificationInfo to get.
If no ModelMBeanNotificationInfo exists for this name null is returned.

@return the info for the named notification, or null if there
is none.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException for a null notification name.

"
      end

      operation 9827458 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a copy of this object.
"
      end

      operation 9827586 "getAttributes"
	public return_type class_ref 496642 // MBeanAttributeInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of attributes exposed for management.
Each attribute is described by an <CODE>MBeanAttributeInfo</CODE> object.

@return  An array of <CODE>MBeanAttributeInfo</CODE> objects.
"
      end

      operation 9827714 "getClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the Java class of the MBean described by
this <CODE>MBeanInfo</CODE>.

@return the Java class name.
"
      end

      operation 9827842 "getConstructors"
	public return_type class_ref 497282 // MBeanConstructorInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of the public constructors  of the MBean.
Each constructor is described by an <CODE>MBeanConstructorInfo</CODE> object.

@return  An array of <CODE>MBeanConstructorInfo</CODE> objects.
"
      end

      operation 9827970 "getDescription"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a human readable description of the MBean.

@return the description.
"
      end

      operation 9828098 "getNotifications"
	public return_type class_ref 497154 // MBeanNotificationInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of the notifications emitted by the MBean.
Each notification is described by an <CODE>MBeanNotificationInfo</CODE> object.
<P>
In addition to any notification specified by the application,
a ModelMBean may always send also two additional notifications:
<UL>
<LI> One with descriptor name \"GENERIC\" and displayName \"jmx.modelmbean.generic\"
<LI> Second is a standard attribute change notification
     with descriptor name \"ATTRIBUTE_CHANGE\" and displayName \"jmx.attribute.change\"
</UL>
Thus any implementation of ModelMBeanInfo should always add those two notifications
in addition to those specified by the application.

@return  An array of <CODE>MBeanNotificationInfo</CODE> objects.
"
      end

      operation 9828226 "getOperations"
	public return_type class_ref 496770 // MBeanOperationInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of operations  of the MBean.
Each operation is described by an <CODE>MBeanOperationInfo</CODE> object.

@return  An array of <CODE>MBeanOperationInfo</CODE> objects.
"
      end
    end

    class 1194242 "ModelMBeanAttributeInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>The ModelMBeanAttributeInfo object describes an attribute of the ModelMBean.
It is a subclass of MBeanAttributeInfo with the addition of an associated Descriptor
and an implementation of the DescriptorAccess interface.</p>

<P id=\"descriptor\">
The fields in the descriptor are defined, but not limited to, the following.
Note that when the Type in this table is Number, a String that is the decimal
representation of a Long can also be used.</P>

<table border=\"1\" cellpadding=\"5\" summary=\"ModelMBeanAttributeInfo Fields\">
<tr><th>Name</th><th>Type</th><th>Meaning</th></tr>
<tr><td>name</td><td>String</td>
    <td>Attribute name.</td></tr>
<tr><td>descriptorType</td><td>String</td>
    <td>Must be \"attribute\".</td></tr>
<tr id=\"value-field\"><td>value</td><td>Object</td>
    <td>Current (cached) value for attribute.</td></tr>
<tr><td>default</td><td>Object</td>
    <td>Default value for attribute.</td></tr>
<tr><td>displayName</td><td>String</td>
    <td>Name of attribute to be used in displays.</td></tr>
<tr><td>getMethod</td><td>String</td>
    <td>Name of operation descriptor for get method.</td></tr>
<tr><td>setMethod</td><td>String</td>
    <td>Name of operation descriptor for set method.</td></tr>
<tr><td>protocolMap</td><td>Descriptor</td>
    <td>See the section \"Protocol Map Support\" in the JMX specification
        document.  Mappings must be appropriate for the attribute and entries
        can be updated or augmented at runtime.</td></tr>
<tr><td>persistPolicy</td><td>String</td>
    <td>One of: OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never.
        See the section \"MBean Descriptor Fields\" in the JMX specification
        document.</td></tr>
<tr><td>persistPeriod</td><td>Number</td>
    <td>Frequency of persist cycle in seconds. Used when persistPolicy is
        \"OnTimer\" or \"NoMoreOftenThan\".</td></tr>
<tr><td>currencyTimeLimit</td><td>Number</td>
    <td>How long <a href=\"#value=field\">value</a> is valid: &lt;0 never,
        =0 always, &gt;0 seconds.</td></tr>
<tr><td>lastUpdatedTimeStamp</td><td>Number</td>
    <td>When <a href=\"#value-field\">value</a> was set.</td></tr>
<tr><td>visibility</td><td>Number</td>
    <td>1-4 where 1: always visible, 4: rarely visible.</td></tr>
<tr><td>presentationString</td><td>String</td>
    <td>XML formatted string to allow presentation of data.</td></tr>
</table>

<p>The default descriptor contains the name, descriptorType and displayName
fields.  The default value of the name and displayName fields is the name of
the attribute.</p>

<p><b>Note:</b> because of inconsistencies in previous versions of
this specification, it is recommended not to use negative or zero
values for <code>currencyTimeLimit</code>.  To indicate that a
cached value is never valid, omit the
<code>currencyTimeLimit</code> field.  To indicate that it is
always valid, use a very large number for this field.</p>

<p>The <b>serialVersionUID</b> of this class is <code>6181543027787327345L</code>.

@since 1.5

 serialVersionUID is not constant"
      classrelation 3812610 // <generalisation>
	relation 3812610 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3812610 // <generalisation>
	  b parent class_ref 496642 // MBeanAttributeInfo
      end

      classrelation 3812738 // <realization>
	relation 3812738 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3812738 // <realization>
	  b parent class_ref 1187970 // DescriptorAccess
      end

      attribute 2279810 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7098036920755973145L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2279938 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6181543027787327345L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3812866 // oldSerialPersistentFields (<unidirectional association>)
	relation 3812866 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"attrDescriptor\", Descriptor.class),
      new ObjectStreamField(\"currClass\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3812866 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3812994 // newSerialPersistentFields (<unidirectional association>)
	relation 3812994 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"attrDescriptor\", Descriptor.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3812994 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2280066 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3813122 // serialPersistentFields (<unidirectional association>)
	relation 3813122 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField attrDescriptor Descriptor The {@link Descriptor}
containing the metadata corresponding to this attribute

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3813122 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2280194 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 180610 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK: No compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3813250 // attrDescriptor (<unidirectional association>)
	relation 3813250 --->
	  a role_name "attrDescriptor" init_value " validDescriptor(null)" private
	    comment " END Serialization compatibility stuff

@serial The {@link Descriptor} containing the metadata corresponding to
this attribute

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3813250 // attrDescriptor (<unidirectional association>)
	  b parent class_ref 489986 // Descriptor
      end

      classrelation 3813378 // currClass (<unidirectional association>)
	relation 3813378 --->
	  a role_name "currClass" init_value " \"ModelMBeanAttributeInfo\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3813378 // currClass (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9823234 "ModelMBeanAttributeInfo"
	public explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "getter" type class_ref 137858 // Method
	  param inout name "setter" type class_ref 137858 // Method
	nexceptions 1
	  exception class_ref 487554 // IntrospectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanAttributeInfo object with a default
descriptor. The {@link Descriptor} of the constructed
object will include fields contributed by any annotations
on the {@code Method} objects that contain the {@link
DescriptorKey} meta-annotation.

@param name The name of the attribute.
@param description A human readable description of the attribute. Optional.
@param getter The method used for reading the attribute value.
         May be null if the property is write-only.
@param setter The method used for writing the attribute value.
         May be null if the attribute is read-only.
@exception javax.management.IntrospectionException There is a consistency
problem in the definition of this attribute.

"
      end

      operation 9823362 "ModelMBeanAttributeInfo"
	public explicit_return_type ""
	nparams 5
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "getter" type class_ref 137858 // Method
	  param inout name "setter" type class_ref 137858 // Method
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	nexceptions 1
	  exception class_ref 487554 // IntrospectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanAttributeInfo object.  The {@link
Descriptor} of the constructed object will include fields
contributed by any annotations on the {@code Method}
objects that contain the {@link DescriptorKey}
meta-annotation.

@param name The name of the attribute.
@param description A human readable description of the attribute. Optional.
@param getter The method used for reading the attribute value.
         May be null if the property is write-only.
@param setter The method used for writing the attribute value.
         May be null if the attribute is read-only.
@param descriptor An instance of Descriptor containing the
appropriate metadata for this instance of the Attribute. If
it is null, then a default descriptor will be created.  If
the descriptor does not contain the field \"displayName\" this field is added
in the descriptor with its default value.
@exception javax.management.IntrospectionException There is a consistency
problem in the definition of this attribute.
@exception RuntimeOperationsException Wraps an
IllegalArgumentException. The descriptor is invalid, or descriptor
field \"name\" is not equal to name parameter, or descriptor field
\"descriptorType\" is not equal to \"attribute\".

"
      end

      operation 9823490 "ModelMBeanAttributeInfo"
	public explicit_return_type ""
	nparams 6
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "isReadable" explicit_type "boolean"
	  param inout name "isWritable" explicit_type "boolean"
	  param inout name "isIs" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanAttributeInfo object with a default descriptor.

@param name The name of the attribute
@param type The type or class name of the attribute
@param description A human readable description of the attribute.
@param isReadable True if the attribute has a getter method, false otherwise.
@param isWritable True if the attribute has a setter method, false otherwise.
@param isIs True if the attribute has an \"is\" getter, false otherwise.

"
      end

      operation 9823618 "ModelMBeanAttributeInfo"
	public explicit_return_type ""
	nparams 7
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "isReadable" explicit_type "boolean"
	  param inout name "isWritable" explicit_type "boolean"
	  param inout name "isIs" explicit_type "boolean"
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanAttributeInfo object.

@param name The name of the attribute
@param type The type or class name of the attribute
@param description A human readable description of the attribute.
@param isReadable True if the attribute has a getter method, false otherwise.
@param isWritable True if the attribute has a setter method, false otherwise.
@param isIs True if the attribute has an \"is\" getter, false otherwise.
@param descriptor An instance of Descriptor containing the
appropriate metadata for this instance of the Attribute. If
it is null then a default descriptor will be created.  If
the descriptor does not contain the field \"displayName\" this field
is added in the descriptor with its default value.
@exception RuntimeOperationsException Wraps an
IllegalArgumentException. The descriptor is invalid, or descriptor
field \"name\" is not equal to name parameter, or descriptor field
\"descriptorType\" is not equal to \"attribute\".

"
      end

      operation 9823746 "ModelMBeanAttributeInfo"
	public explicit_return_type ""
	nparams 1
	  param inout name "inInfo" type class_ref 1194242 // ModelMBeanAttributeInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ModelMBeanAttributeInfo object from this
ModelMBeanAttributeInfo Object.  A default descriptor will
be created.

@param inInfo the ModelMBeanAttributeInfo to be duplicated
"
      end

      operation 9823874 "getDescriptor"
	public return_type class_ref 489986 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a copy of the associated Descriptor for the
ModelMBeanAttributeInfo.

@return Descriptor associated with the
ModelMBeanAttributeInfo object.

@see #setDescriptor
"
      end

      operation 9824002 "setDescriptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets associated Descriptor (full replace) for the
ModelMBeanAttributeDescriptor.  If the new Descriptor is
null, then the associated Descriptor reverts to a default
descriptor.  The Descriptor is validated before it is
assigned.  If the new Descriptor is invalid, then a
RuntimeOperationsException wrapping an
IllegalArgumentException is thrown.
@param inDescriptor replaces the Descriptor associated with the
ModelMBeanAttributeInfo

@exception RuntimeOperationsException Wraps an
IllegalArgumentException for an invalid Descriptor

@see #getDescriptor
"
      end

      operation 9824130 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Creates and returns a new ModelMBeanAttributeInfo which is a duplicate of this ModelMBeanAttributeInfo.

@exception RuntimeOperationsException for illegal value for
field Names or field Values.  If the descriptor construction
fails for any reason, this exception will be thrown.
"
      end

      operation 9824258 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a human-readable version of the
ModelMBeanAttributeInfo instance.
"
      end

      operation 9824386 "validDescriptor"
	private return_type class_ref 489986 // Descriptor
	nparams 1
	  param in name "in" type class_ref 489986 // Descriptor
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clones the passed in Descriptor, sets default values, and checks for validity.
If the Descriptor is invalid (for instance by having the wrong \"name\"),
this indicates programming error and a RuntimeOperationsException will be thrown.

The following fields will be defaulted if they are not already set:
displayName=this.getName(),name=this.getName(),descriptorType = \"attribute\"

@param in Descriptor to be checked, or null which is equivalent to
an empty Descriptor.
@exception RuntimeOperationsException if Descriptor is invalid
"
      end

      operation 9824514 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link ModelMBeanAttributeInfo} from an {@link ObjectInputStream}.
"
      end

      operation 9824642 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link ModelMBeanAttributeInfo} to an {@link ObjectOutputStream}.
"
      end
    end

    class 1194370 "ModelMBeanConstructorInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>The ModelMBeanConstructorInfo object describes a constructor of the ModelMBean.
It is a subclass of MBeanConstructorInfo with the addition of an associated Descriptor
and an implementation of the DescriptorAccess interface.</p>

<P id=\"descriptor\">
The fields in the descriptor are defined, but not limited to, the following.
Note that when the Type in this table is Number, a String that is the decimal
representation of a Long can also be used.</P>

<table border=\"1\" cellpadding=\"5\" summary=\"ModelMBeanConstructorInfo Fields\">
<tr><th>Name</th><th>Type</th><th>Meaning</th></tr>
<tr><td>name</td><td>String</td>
    <td>Constructor name.</td></tr>
<tr><td>descriptorType</td><td>String</td>
    <td>Must be \"operation\".</td></tr>
<tr><td>role</td><td>String</td>
    <td>Must be \"constructor\".</td></tr>
<tr><td>displayName</td><td>String</td>
    <td>Human readable name of constructor.</td></tr>
<tr><td>visibility</td><td>Number</td>
    <td>1-4 where 1: always visible 4: rarely visible.</td></tr>
<tr><td>presentationString</td><td>String</td>
    <td>XML formatted string to describe how to present operation</td></tr>
</table>

<p>The {@code persistPolicy} and {@code currencyTimeLimit} fields
are meaningless for constructors, but are not considered invalid.</p>

<p>The default descriptor will have the {@code name}, {@code
descriptorType}, {@code displayName} and {@code role} fields.

<p>The <b>serialVersionUID</b> of this class is <code>3862947819818064362L</code>.

@since 1.5

 serialVersionUID is not constant"
      classrelation 3813506 // <generalisation>
	relation 3813506 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3813506 // <generalisation>
	  b parent class_ref 497282 // MBeanConstructorInfo
      end

      classrelation 3813634 // <realization>
	relation 3813634 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3813634 // <realization>
	  b parent class_ref 1187970 // DescriptorAccess
      end

      attribute 2280322 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4440125391095574518L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2280450 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3862947819818064362L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3813762 // oldSerialPersistentFields (<unidirectional association>)
	relation 3813762 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"consDescriptor\", Descriptor.class),
      new ObjectStreamField(\"currClass\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3813762 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3813890 // newSerialPersistentFields (<unidirectional association>)
	relation 3813890 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"consDescriptor\", Descriptor.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3813890 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2280578 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3814018 // serialPersistentFields (<unidirectional association>)
	relation 3814018 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField consDescriptor Descriptor The {@link Descriptor} containing the metadata for this instance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3814018 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2280706 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 180738 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK: No compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3814146 // consDescriptor (<unidirectional association>)
	relation 3814146 --->
	  a role_name "consDescriptor" init_value " validDescriptor(null)" private
	    comment " END Serialization compatibility stuff

@serial The {@link Descriptor} containing the metadata for this instance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3814146 // consDescriptor (<unidirectional association>)
	  b parent class_ref 489986 // Descriptor
      end

      classrelation 3814274 // currClass (<unidirectional association>)
	relation 3814274 --->
	  a role_name "currClass" init_value " \"ModelMBeanConstructorInfo\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3814274 // currClass (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9824770 "ModelMBeanConstructorInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "description" type class_ref 128130 // String
	  param inout name "constructorMethod" type class_ref 189186 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanConstructorInfo object with a default
descriptor.  The {@link Descriptor} of the constructed
object will include fields contributed by any annotations on
the {@code Constructor} object that contain the {@link
DescriptorKey} meta-annotation.

@param description A human readable description of the constructor.
@param constructorMethod The java.lang.reflect.Constructor object
describing the MBean constructor.
"
      end

      operation 9824898 "ModelMBeanConstructorInfo"
	public explicit_return_type ""
	nparams 3
	  param inout name "description" type class_ref 128130 // String
	  param inout name "constructorMethod" type class_ref 189186 // Constructor
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanConstructorInfo object.  The {@link
Descriptor} of the constructed object will include fields
contributed by any annotations on the {@code Constructor}
object that contain the {@link DescriptorKey}
meta-annotation.

@param description A human readable description of the constructor.
@param constructorMethod The java.lang.reflect.Constructor object
describing the ModelMBean constructor.
@param descriptor An instance of Descriptor containing the
appropriate metadata for this instance of the
ModelMBeanConstructorInfo.  If it is null, then a default
descriptor will be created. If the descriptor does not
contain the field \"displayName\" this field is added in the
descriptor with its default value.

@exception RuntimeOperationsException Wraps an
IllegalArgumentException. The descriptor is invalid, or
descriptor field \"name\" is not equal to name
parameter, or descriptor field \"descriptorType\" is
not equal to \"operation\" or descriptor field \"role\" is
present but not equal to \"constructor\".
"
      end

      operation 9825026 "ModelMBeanConstructorInfo"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1188994 // MBeanParameterInfo
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanConstructorInfo object with a default descriptor.

@param name The name of the constructor.
@param description A human readable description of the constructor.
@param signature MBeanParameterInfo object array describing the parameters(arguments) of the constructor.
"
      end

      operation 9825154 "ModelMBeanConstructorInfo"
	public explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1188994 // MBeanParameterInfo
	multiplicity "[]"
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanConstructorInfo object.

@param name The name of the constructor.
@param description A human readable description of the constructor.
@param signature MBeanParameterInfo objects describing the parameters(arguments) of the constructor.
@param descriptor An instance of Descriptor containing the appropriate metadata
                  for this instance of the MBeanConstructorInfo. If it is null then a default descriptor will be created.
If the descriptor does not contain the field \"displayName\" this field
is added in the descriptor with its default value.

@exception RuntimeOperationsException Wraps an
IllegalArgumentException. The descriptor is invalid, or
descriptor field \"name\" is not equal to name
parameter, or descriptor field \"descriptorType\" is
not equal to \"operation\" or descriptor field \"role\" is
present but not equal to \"constructor\".
"
      end

      operation 9825282 "ModelMBeanConstructorInfo"
	package explicit_return_type ""
	nparams 1
	  param inout name "old" type class_ref 1194370 // ModelMBeanConstructorInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ModelMBeanConstructorInfo object from this ModelMBeanConstructor Object.

@param old the ModelMBeanConstructorInfo to be duplicated

"
      end

      operation 9825410 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Creates and returns a new ModelMBeanConstructorInfo which is a duplicate of this ModelMBeanConstructorInfo.

"
      end

      operation 9825538 "getDescriptor"
	public return_type class_ref 489986 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of the associated Descriptor.

@return Descriptor associated with the
ModelMBeanConstructorInfo object.

@see #setDescriptor
"
      end

      operation 9825666 "setDescriptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets associated Descriptor (full replace) of
ModelMBeanConstructorInfo.  If the new Descriptor is null,
then the associated Descriptor reverts to a default
descriptor.  The Descriptor is validated before it is
assigned.  If the new Descriptor is invalid, then a
RuntimeOperationsException wrapping an
IllegalArgumentException is thrown.

@param inDescriptor replaces the Descriptor associated with
the ModelMBeanConstructor. If the descriptor does not
contain all the following fields, the missing ones are added with
their default values: displayName, name, role, descriptorType.

@exception RuntimeOperationsException Wraps an
IllegalArgumentException.  The descriptor is invalid, or
descriptor field \"name\" is present but not equal to name
parameter, or descriptor field \"descriptorType\" is present
but not equal to \"operation\" or descriptor field \"role\" is
present but not equal to \"constructor\".

@see #getDescriptor
"
      end

      operation 9825794 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string containing the entire contents of the ModelMBeanConstructorInfo in human readable form.
"
      end

      operation 9825922 "validDescriptor"
	private return_type class_ref 489986 // Descriptor
	nparams 1
	  param in name "in" type class_ref 489986 // Descriptor
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clones the passed in Descriptor, sets default values, and checks for validity.
If the Descriptor is invalid (for instance by having the wrong \"name\"),
this indicates programming error and a RuntimeOperationsException will be thrown.

The following fields will be defaulted if they are not already set:
displayName=this.getName(), name=this.getName(), descriptorType=\"operation\",
role=\"constructor\"


@param in Descriptor to be checked, or null which is equivalent to
an empty Descriptor.
@exception RuntimeOperationsException if Descriptor is invalid
"
      end

      operation 9826050 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link ModelMBeanConstructorInfo} from an {@link ObjectInputStream}.
"
      end

      operation 9826178 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link ModelMBeanConstructorInfo} to an {@link ObjectOutputStream}.
"
      end
    end

    class 1194498 "ModelMBeanOperationInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>The ModelMBeanOperationInfo object describes a management operation of
the ModelMBean.  It is a subclass of MBeanOperationInfo with the addition
of an associated Descriptor and an implementation of the DescriptorAccess
interface.</p>

<P id=\"descriptor\">
The fields in the descriptor are defined, but not limited to, the following.
Note that when the Type in this table is Number, a String that is the decimal
representation of a Long can also be used.</P>

<table border=\"1\" cellpadding=\"5\" summary=\"ModelMBeanOperationInfo Fields\">
<tr><th>Name</th><th>Type</th><th>Meaning</th></tr>
<tr><td>name</td><td>String</td>
    <td>Operation name.</td></tr>
<tr><td>descriptorType</td><td>String</td>
    <td>Must be \"operation\".</td></tr>
<tr><td>class</td><td>String</td>
    <td>Class where method is defined (fully qualified).</td></tr>
<tr><td>role</td><td>String</td>
    <td>Must be \"operation\", \"getter\", or \"setter\".</td></tr>
<tr><td>targetObject</td><td>Object</td>
    <td>Object on which to execute this method.</td></tr>
<tr><td>targetType</td><td>String</td>
    <td>type of object reference for targetObject. Can be:
        ObjectReference | Handle | EJBHandle | IOR | RMIReference.</td></tr>
<tr><td>value</td><td>Object</td>
    <td>Cached value for operation.</td></tr>
<tr><td>displayName</td><td>String</td>
    <td>Human readable display name of the operation.</td>
<tr><td>currencyTimeLimit</td><td>Number</td>
    <td>How long cached value is valid.</td></tr>
<tr><td>lastUpdatedTimeStamp</td><td>Number</td>
    <td>When cached value was set.</td></tr>
<tr><td>visibility</td><td>Number</td>
    <td>1-4 where 1: always visible 4: rarely visible.</td></tr>
<tr><td>presentationString</td><td>String</td>
    <td>XML formatted string to describe how to present operation</td></tr>
</table>

<p>The default descriptor will have name, descriptorType, displayName and
role fields set.  The default value of the name and displayName fields is
the operation name.</p>

<p><b>Note:</b> because of inconsistencies in previous versions of
this specification, it is recommended not to use negative or zero
values for <code>currencyTimeLimit</code>.  To indicate that a
cached value is never valid, omit the
<code>currencyTimeLimit</code> field.  To indicate that it is
always valid, use a very large number for this field.</p>

<p>The <b>serialVersionUID</b> of this class is <code>6532732096650090465L</code>.

@since 1.5

 serialVersionUID is not constant"
      classrelation 3817986 // <generalisation>
	relation 3817986 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3817986 // <generalisation>
	  b parent class_ref 496770 // MBeanOperationInfo
      end

      classrelation 3818114 // <realization>
	relation 3818114 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3818114 // <realization>
	  b parent class_ref 1187970 // DescriptorAccess
      end

      attribute 2281858 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 9087646304346171239L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2281986 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6532732096650090465L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3818242 // oldSerialPersistentFields (<unidirectional association>)
	relation 3818242 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"operationDescriptor\", Descriptor.class),
      new ObjectStreamField(\"currClass\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3818242 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3818370 // newSerialPersistentFields (<unidirectional association>)
	relation 3818370 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"operationDescriptor\", Descriptor.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3818370 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2282114 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3818498 // serialPersistentFields (<unidirectional association>)
	relation 3818498 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField operationDescriptor Descriptor The descriptor
containing the appropriate metadata for this instance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3818498 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2282242 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 181122 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK: No compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3818626 // operationDescriptor (<unidirectional association>)
	relation 3818626 --->
	  a role_name "operationDescriptor" init_value " validDescriptor(null)" private
	    comment " END Serialization compatibility stuff

@serial The descriptor containing the appropriate metadata for this instance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3818626 // operationDescriptor (<unidirectional association>)
	  b parent class_ref 489986 // Descriptor
      end

      classrelation 3818754 // currClass (<unidirectional association>)
	relation 3818754 --->
	  a role_name "currClass" init_value " \"ModelMBeanOperationInfo\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3818754 // currClass (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9832194 "ModelMBeanOperationInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "description" type class_ref 128130 // String
	  param inout name "operationMethod" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanOperationInfo object with a default
descriptor. The {@link Descriptor} of the constructed
object will include fields contributed by any annotations
on the {@code Method} object that contain the {@link
DescriptorKey} meta-annotation.

@param operationMethod The java.lang.reflect.Method object
describing the MBean operation.
@param description A human readable description of the operation.
"
      end

      operation 9832322 "ModelMBeanOperationInfo"
	public explicit_return_type ""
	nparams 3
	  param inout name "description" type class_ref 128130 // String
	  param inout name "operationMethod" type class_ref 137858 // Method
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanOperationInfo object. The {@link
Descriptor} of the constructed object will include fields
contributed by any annotations on the {@code Method} object
that contain the {@link DescriptorKey} meta-annotation.

@param operationMethod The java.lang.reflect.Method object
describing the MBean operation.
@param description A human readable description of the
operation.
@param descriptor An instance of Descriptor containing the
appropriate metadata for this instance of the
ModelMBeanOperationInfo.  If it is null a default
descriptor will be created. If the descriptor does not
contain the fields
\"displayName\" or \"role\", the missing ones are added with
their default values.

@exception RuntimeOperationsException Wraps an
IllegalArgumentException. The descriptor is invalid; or
descriptor field \"name\" is not equal to
operation name; or descriptor field \"DescriptorType\" is
not equal to \"operation\"; or descriptor
optional field \"role\" is present but not equal to \"operation\",
\"getter\", or \"setter\".

"
      end

      operation 9832450 "ModelMBeanOperationInfo"
	public explicit_return_type ""
	nparams 5
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1188994 // MBeanParameterInfo
	multiplicity "[]"
	  param inout name "type" type class_ref 128130 // String
	  param in name "impact" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanOperationInfo object with a default descriptor.

@param name The name of the method.
@param description A human readable description of the operation.
@param signature MBeanParameterInfo objects describing the
parameters(arguments) of the method.
@param type The type of the method's return value.
@param impact The impact of the method, one of INFO, ACTION,
ACTION_INFO, UNKNOWN.
"
      end

      operation 9832578 "ModelMBeanOperationInfo"
	public explicit_return_type ""
	nparams 6
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1188994 // MBeanParameterInfo
	multiplicity "[]"
	  param inout name "type" type class_ref 128130 // String
	  param in name "impact" explicit_type "int"
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanOperationInfo object.

@param name The name of the method.
@param description A human readable description of the operation.
@param signature MBeanParameterInfo objects describing the
parameters(arguments) of the method.
@param type The type of the method's return value.
@param impact The impact of the method, one of INFO, ACTION,
ACTION_INFO, UNKNOWN.
@param descriptor An instance of Descriptor containing the
appropriate metadata for this instance of the
MBeanOperationInfo. If it is null then a default descriptor
will be created.  If the descriptor does not contain
fields \"displayName\" or \"role\",
the missing ones are added with their default values.

@exception RuntimeOperationsException Wraps an
IllegalArgumentException. The descriptor is invalid; or
descriptor field \"name\" is not equal to
operation name; or descriptor field \"DescriptorType\" is
not equal to \"operation\"; or descriptor optional
field \"role\" is present but not equal to \"operation\", \"getter\", or
\"setter\".
"
      end

      operation 9832706 "ModelMBeanOperationInfo"
	public explicit_return_type ""
	nparams 1
	  param inout name "inInfo" type class_ref 1194498 // ModelMBeanOperationInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ModelMBeanOperationInfo object from this
ModelMBeanOperation Object.

@param inInfo the ModelMBeanOperationInfo to be duplicated

"
      end

      operation 9832834 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a new ModelMBeanOperationInfo which is a
duplicate of this ModelMBeanOperationInfo.

"
      end

      operation 9832962 "getDescriptor"
	public return_type class_ref 489986 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the associated Descriptor of the
ModelMBeanOperationInfo.

@return Descriptor associated with the
ModelMBeanOperationInfo object.

@see #setDescriptor
"
      end

      operation 9833090 "setDescriptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets associated Descriptor (full replace) for the
ModelMBeanOperationInfo If the new Descriptor is null, then
the associated Descriptor reverts to a default descriptor.
The Descriptor is validated before it is assigned.  If the
new Descriptor is invalid, then a
RuntimeOperationsException wrapping an
IllegalArgumentException is thrown.

@param inDescriptor replaces the Descriptor associated with the
ModelMBeanOperation.

@exception RuntimeOperationsException Wraps an
IllegalArgumentException for invalid Descriptor.

@see #getDescriptor
"
      end

      operation 9833218 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string containing the entire contents of the
ModelMBeanOperationInfo in human readable form.
"
      end

      operation 9833346 "validDescriptor"
	private return_type class_ref 489986 // Descriptor
	nparams 1
	  param in name "in" type class_ref 489986 // Descriptor
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clones the passed in Descriptor, sets default values, and checks for validity.
If the Descriptor is invalid (for instance by having the wrong \"name\"),
this indicates programming error and a RuntimeOperationsException will be thrown.

The following fields will be defaulted if they are not already set:
displayName=this.getName(),name=this.getName(),
descriptorType=\"operation\", role=\"operation\"


@param in Descriptor to be checked, or null which is equivalent to
an empty Descriptor.
@exception RuntimeOperationsException if Descriptor is invalid
"
      end

      operation 9833474 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link ModelMBeanOperationInfo} from an {@link ObjectInputStream}.
"
      end

      operation 9833602 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link ModelMBeanOperationInfo} to an {@link ObjectOutputStream}.
"
      end
    end

    class 1194626 "ModelMBeanNotificationInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>The ModelMBeanNotificationInfo object describes a notification emitted
by a ModelMBean.
It is a subclass of MBeanNotificationInfo with the addition of an
associated Descriptor and an implementation of the Descriptor interface.</p>

<P id=\"descriptor\">
The fields in the descriptor are defined, but not limited to, the following.
Note that when the Type in this table is Number, a String that is the decimal
representation of a Long can also be used.</P>

<table border=\"1\" cellpadding=\"5\" summary=\"ModelMBeanNotificationInfo Fields\">
<tr><th>Name</th><th>Type</th><th>Meaning</th></tr>
<tr><td>name</td><td>String</td>
    <td>Notification name.</td></tr>
<tr><td>descriptorType</td><td>String</td>
    <td>Must be \"notification\".</td></tr>
<tr><td>severity</td><td>Number</td>
    <td>0-6 where 0: unknown; 1: non-recoverable;
        2: critical, failure; 3: major, severe;
        4: minor, marginal, error; 5: warning;
        6: normal, cleared, informative</td></tr>
<tr><td>messageID</td><td>String</td>
    <td>Unique key for message text (to allow translation, analysis).</td></tr>
<tr><td>messageText</td><td>String</td>
    <td>Text of notification.</td></tr>
<tr><td>log</td><td>String</td>
    <td>T - log message, F - do not log message.</td></tr>
<tr><td>logfile</td><td>String</td>
    <td>fully qualified file name appropriate for operating system.</td></tr>
<tr><td>visibility</td><td>Number</td>
    <td>1-4 where 1: always visible 4: rarely visible.</td></tr>
<tr><td>presentationString</td><td>String</td>
    <td>XML formatted string to allow presentation of data.</td></tr>
</table>

<p>The default descriptor contains the name, descriptorType,
displayName and severity(=6) fields.  The default value of the name
and displayName fields is the name of the Notification class (as
specified by the <code>name</code> parameter of the
ModelMBeanNotificationInfo constructor).</p>

<p>The <b>serialVersionUID</b> of this class is <code>-7445681389570207141L</code>.

@since 1.5

 serialVersionUID is not constant"
      classrelation 3817090 // <generalisation>
	relation 3817090 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3817090 // <generalisation>
	  b parent class_ref 497154 // MBeanNotificationInfo
      end

      classrelation 3817218 // <realization>
	relation 3817218 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3817218 // <realization>
	  b parent class_ref 1187970 // DescriptorAccess
      end

      attribute 2281346 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5211564525059047097L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form
 depends on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2281474 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7445681389570207141L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3817346 // oldSerialPersistentFields (<unidirectional association>)
	relation 3817346 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"notificationDescriptor\", Descriptor.class),
      new ObjectStreamField(\"currClass\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3817346 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3817474 // newSerialPersistentFields (<unidirectional association>)
	relation 3817474 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"notificationDescriptor\", Descriptor.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3817474 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2281602 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3817602 // serialPersistentFields (<unidirectional association>)
	relation 3817602 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField notificationDescriptor Descriptor The descriptor
  containing the appropriate metadata for this instance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3817602 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2281730 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 180994 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK: No compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3817730 // notificationDescriptor (<unidirectional association>)
	relation 3817730 --->
	  a role_name "notificationDescriptor" private
	    comment " END Serialization compatibility stuff

@serial The descriptor containing the appropriate metadata for
        this instance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3817730 // notificationDescriptor (<unidirectional association>)
	  b parent class_ref 489986 // Descriptor
      end

      classrelation 3817858 // currClass (<unidirectional association>)
	relation 3817858 --->
	  a role_name "currClass" init_value " \"ModelMBeanNotificationInfo\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3817858 // currClass (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9830914 "ModelMBeanNotificationInfo"
	public explicit_return_type ""
	nparams 3
	  param inout name "notifTypes" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanNotificationInfo object with a default
descriptor.

@param notifTypes The array of strings (in dot notation) containing
    the notification types that may be emitted.
@param name The name of the Notification class.
@param description A human readable description of the
    Notification. Optional.
"
      end

      operation 9831042 "ModelMBeanNotificationInfo"
	public explicit_return_type ""
	nparams 4
	  param inout name "notifTypes" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanNotificationInfo object.

@param notifTypes The array of strings (in dot notation)
       containing the notification types that may be emitted.
@param name The name of the Notification class.
@param description A human readable description of the Notification.
       Optional.
@param descriptor An instance of Descriptor containing the
       appropriate metadata for this instance of the
       MBeanNotificationInfo. If it is null a default descriptor
       will be created. If the descriptor does not contain the
       fields \"displayName\" or \"severity\",
       the missing ones are added with their default values.

@exception RuntimeOperationsException Wraps an
   {@link IllegalArgumentException}. The descriptor is invalid, or
   descriptor field \"name\" is not equal to parameter name, or
   descriptor field \"descriptorType\" is not equal to \"notification\".

"
      end

      operation 9831170 "ModelMBeanNotificationInfo"
	public explicit_return_type ""
	nparams 1
	  param inout name "inInfo" type class_ref 1194626 // ModelMBeanNotificationInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ModelMBeanNotificationInfo object from this
ModelMBeanNotfication Object.

@param inInfo the ModelMBeanNotificationInfo to be duplicated

"
      end

      operation 9831298 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a new ModelMBeanNotificationInfo which is a
duplicate of this ModelMBeanNotificationInfo.
"
      end

      operation 9831426 "getDescriptor"
	public return_type class_ref 489986 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the associated Descriptor for the
ModelMBeanNotificationInfo.

@return Descriptor associated with the
ModelMBeanNotificationInfo object.

@see #setDescriptor
"
      end

      operation 9831554 "setDescriptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets associated Descriptor (full replace) for the
ModelMBeanNotificationInfo If the new Descriptor is null,
then the associated Descriptor reverts to a default
descriptor.  The Descriptor is validated before it is
assigned.  If the new Descriptor is invalid, then a
RuntimeOperationsException wrapping an
IllegalArgumentException is thrown.

@param inDescriptor replaces the Descriptor associated with the
ModelMBeanNotification interface

@exception RuntimeOperationsException Wraps an
{@link IllegalArgumentException} for invalid Descriptor.

@see #getDescriptor
"
      end

      operation 9831682 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a human readable string containing
ModelMBeanNotificationInfo.

@return a string describing this object.
"
      end

      operation 9831810 "validDescriptor"
	private return_type class_ref 489986 // Descriptor
	nparams 1
	  param in name "in" type class_ref 489986 // Descriptor
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clones the passed in Descriptor, sets default values, and checks for validity.
If the Descriptor is invalid (for instance by having the wrong \"name\"),
this indicates programming error and a RuntimeOperationsException will be thrown.

The following fields will be defaulted if they are not already set:
descriptorType=\"notification\",displayName=this.getName(),
name=this.getName(),severity=\"6\"


@param in Descriptor to be checked, or null which is equivalent to an
empty Descriptor.
@exception RuntimeOperationsException if Descriptor is invalid
"
      end

      operation 9831938 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link ModelMBeanNotificationInfo} from an
{@link ObjectInputStream}.
"
      end

      operation 9832066 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link ModelMBeanNotificationInfo} to an
{@link ObjectOutputStream}.
"
      end
    end

    class 1194754 "ModelMBeanInfoSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents the meta data for ModelMBeans.  Descriptors have been
added on the meta data objects.
<P>
Java resources wishing to be manageable instantiate the ModelMBean using the
MBeanServer's createMBean method.  The resource then sets the ModelMBeanInfo
and Descriptors for the ModelMBean instance. The attributes and operations
exposed via the ModelMBeanInfo for the ModelMBean are accessible
from MBeans, connectors/adaptors like other MBeans. Through the Descriptors,
values and methods in the managed application can be defined and mapped to
attributes and operations of the ModelMBean.
This mapping can be defined during development in a file or dynamically and
programmatically at runtime.
<P>
Every ModelMBean which is instantiated in the MBeanServer becomes manageable:
its attributes and operations
become remotely accessible through the connectors/adaptors connected to that
MBeanServer.
A Java object cannot be registered in the MBeanServer unless it is a JMX
compliant MBean.
By instantiating a ModelMBean, resources are guaranteed that the MBean is
valid.

MBeanException and RuntimeOperationsException must be thrown on every public
method.  This allows for wrapping exceptions from distributed
communications (RMI, EJB, etc.)

<p>The <b>serialVersionUID</b> of this class is
<code>-1935722590756516193L</code>.

@since 1.5
"
      classrelation 3814402 // <generalisation>
	relation 3814402 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3814402 // <generalisation>
	  b parent class_ref 487426 // MBeanInfo
      end

      classrelation 3814530 // <realization>
	relation 3814530 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3814530 // <realization>
	  b parent class_ref 1194114 // ModelMBeanInfo
      end

      attribute 2280834 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3944083498453227709L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2280962 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1935722590756516193L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3814658 // oldSerialPersistentFields (<unidirectional association>)
	relation 3814658 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
        new ObjectStreamField(\"modelMBeanDescriptor\", Descriptor.class),
                new ObjectStreamField(\"mmbAttributes\", MBeanAttributeInfo[].class),
                new ObjectStreamField(\"mmbConstructors\", MBeanConstructorInfo[].class),
                new ObjectStreamField(\"mmbNotifications\", MBeanNotificationInfo[].class),
                new ObjectStreamField(\"mmbOperations\", MBeanOperationInfo[].class),
                new ObjectStreamField(\"currClass\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3814658 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3814786 // newSerialPersistentFields (<unidirectional association>)
	relation 3814786 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
        new ObjectStreamField(\"modelMBeanDescriptor\", Descriptor.class),
                new ObjectStreamField(\"modelMBeanAttributes\", MBeanAttributeInfo[].class),
                new ObjectStreamField(\"modelMBeanConstructors\", MBeanConstructorInfo[].class),
                new ObjectStreamField(\"modelMBeanNotifications\", MBeanNotificationInfo[].class),
                new ObjectStreamField(\"modelMBeanOperations\", MBeanOperationInfo[].class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3814786 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2281090 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3814914 // serialPersistentFields (<unidirectional association>)
	relation 3814914 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField modelMBeanDescriptor Descriptor The descriptor containing
             MBean wide policy
@serialField modelMBeanAttributes ModelMBeanAttributeInfo[] The array of
             {@link ModelMBeanAttributeInfo} objects which
             have descriptors
@serialField modelMBeanConstructors MBeanConstructorInfo[] The array of
             {@link ModelMBeanConstructorInfo} objects which
             have descriptors
@serialField modelMBeanNotifications MBeanNotificationInfo[] The array of
             {@link ModelMBeanNotificationInfo} objects which
             have descriptors
@serialField modelMBeanOperations MBeanOperationInfo[] The array of
             {@link ModelMBeanOperationInfo} objects which
             have descriptors

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3814914 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2281218 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 180866 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK: No compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3815042 // modelMBeanDescriptor (<unidirectional association>)
	relation 3815042 --->
	  a role_name "modelMBeanDescriptor" init_value " null" private
	    comment " END Serialization compatibility stuff

@serial The descriptor containing MBean wide policy

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3815042 // modelMBeanDescriptor (<unidirectional association>)
	  b parent class_ref 489986 // Descriptor
      end

      classrelation 3815170 // modelMBeanAttributes (<unidirectional association>)
	relation 3815170 --->
	  a role_name "modelMBeanAttributes" multiplicity "[]" private
	    comment " The following fields always have the same values as the
fields inherited from MBeanInfo and are retained only for
compatibility.  By rewriting the serialization code we could
get rid of them.

These fields can't be final because they are assigned to by
readObject().  

@serial The array of {@link ModelMBeanAttributeInfo} objects which
        have descriptors

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3815170 // modelMBeanAttributes (<unidirectional association>)
	  b parent class_ref 496642 // MBeanAttributeInfo
      end

      classrelation 3815298 // modelMBeanConstructors (<unidirectional association>)
	relation 3815298 --->
	  a role_name "modelMBeanConstructors" multiplicity "[]" private
	    comment "
@serial The array of {@link ModelMBeanConstructorInfo} objects which
        have descriptors

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3815298 // modelMBeanConstructors (<unidirectional association>)
	  b parent class_ref 497282 // MBeanConstructorInfo
      end

      classrelation 3815426 // modelMBeanNotifications (<unidirectional association>)
	relation 3815426 --->
	  a role_name "modelMBeanNotifications" multiplicity "[]" private
	    comment "
@serial The array of {@link ModelMBeanNotificationInfo} objects which
        have descriptors

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3815426 // modelMBeanNotifications (<unidirectional association>)
	  b parent class_ref 497154 // MBeanNotificationInfo
      end

      classrelation 3815554 // modelMBeanOperations (<unidirectional association>)
	relation 3815554 --->
	  a role_name "modelMBeanOperations" multiplicity "[]" private
	    comment "
@serial The array of {@link ModelMBeanOperationInfo} objects which
        have descriptors

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3815554 // modelMBeanOperations (<unidirectional association>)
	  b parent class_ref 496770 // MBeanOperationInfo
      end

      classrelation 3815682 // ATTR (<unidirectional association>)
	relation 3815682 --->
	  a role_name "ATTR" init_value " \"attribute\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3815682 // ATTR (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3815810 // OPER (<unidirectional association>)
	relation 3815810 --->
	  a role_name "OPER" init_value " \"operation\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3815810 // OPER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3815938 // NOTF (<unidirectional association>)
	relation 3815938 --->
	  a role_name "NOTF" init_value " \"notification\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3815938 // NOTF (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3816066 // CONS (<unidirectional association>)
	relation 3816066 --->
	  a role_name "CONS" init_value " \"constructor\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3816066 // CONS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3816194 // MMB (<unidirectional association>)
	relation 3816194 --->
	  a role_name "MMB" init_value " \"mbean\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3816194 // MMB (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3816322 // ALL (<unidirectional association>)
	relation 3816322 --->
	  a role_name "ALL" init_value " \"all\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3816322 // ALL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3816450 // currClass (<unidirectional association>)
	relation 3816450 --->
	  a role_name "currClass" init_value " \"ModelMBeanInfoSupport\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3816450 // currClass (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9828354 "ModelMBeanInfoSupport"
	public explicit_return_type ""
	nparams 1
	  param inout name "mbi" type class_ref 1194114 // ModelMBeanInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanInfoSupport which is a duplicate of the given
ModelMBeanInfo.  The returned object is a shallow copy of the given
object.  Neither the Descriptor nor the contained arrays
({@code ModelMBeanAttributeInfo[]} etc) are cloned.  This method is
chiefly of interest to modify the Descriptor of the returned instance
via {@link #setDescriptor setDescriptor} without affecting the
Descriptor of the original object.

@param mbi the ModelMBeanInfo instance from which the ModelMBeanInfo
being created is initialized.
"
      end

      operation 9828482 "ModelMBeanInfoSupport"
	public explicit_return_type ""
	nparams 6
	  param inout name "className" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "attributes" type class_ref 1194242 // ModelMBeanAttributeInfo
	multiplicity "[]"
	  param inout name "constructors" type class_ref 1194370 // ModelMBeanConstructorInfo
	multiplicity "[]"
	  param inout name "operations" type class_ref 1194498 // ModelMBeanOperationInfo
	multiplicity "[]"
	  param inout name "notifications" type class_ref 1194626 // ModelMBeanNotificationInfo
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a ModelMBeanInfoSupport with the provided information,
but the descriptor is a default.
The default descriptor is: name=className, descriptorType=\"mbean\",
displayName=className, persistPolicy=\"never\", log=\"F\", visibility=\"1\"

@param className classname of the MBean
@param description human readable description of the
ModelMBean
@param attributes array of ModelMBeanAttributeInfo objects
which have descriptors
@param constructors array of ModelMBeanConstructorInfo
objects which have descriptors
@param operations array of ModelMBeanOperationInfo objects
which have descriptors
@param notifications array of ModelMBeanNotificationInfo
objects which have descriptors
"
      end

      operation 9828610 "ModelMBeanInfoSupport"
	public explicit_return_type ""
	nparams 7
	  param inout name "className" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "attributes" type class_ref 1194242 // ModelMBeanAttributeInfo
	multiplicity "[]"
	  param inout name "constructors" type class_ref 1194370 // ModelMBeanConstructorInfo
	multiplicity "[]"
	  param inout name "operations" type class_ref 1194498 // ModelMBeanOperationInfo
	multiplicity "[]"
	  param inout name "notifications" type class_ref 1194626 // ModelMBeanNotificationInfo
	multiplicity "[]"
	  param inout name "mbeandescriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a ModelMBeanInfoSupport with the provided information
and the descriptor given in parameter.

@param className classname of the MBean
@param description human readable description of the
ModelMBean
@param attributes array of ModelMBeanAttributeInfo objects
which have descriptors
@param constructors array of ModelMBeanConstructorInfo
objects which have descriptor
@param operations array of ModelMBeanOperationInfo objects
which have descriptor
@param notifications array of ModelMBeanNotificationInfo
objects which have descriptor
@param mbeandescriptor descriptor to be used as the
MBeanDescriptor containing MBean wide policy. If the
descriptor is null, a default descriptor will be constructed.
The default descriptor is:
name=className, descriptorType=\"mbean\", displayName=className,
persistPolicy=\"never\", log=\"F\", visibility=\"1\".  If the descriptor
does not contain all of these fields, the missing ones are
added with these default values.

@exception RuntimeOperationsException Wraps an
IllegalArgumentException for invalid descriptor passed in
parameter.  (see {@link #getMBeanDescriptor
getMBeanDescriptor} for the definition of a valid MBean
descriptor.)
"
      end

      classrelation 3816578 // NO_ATTRIBUTES (<unidirectional association>)
	relation 3816578 --->
	  a role_name "NO_ATTRIBUTES" multiplicity "[]" init_value "
            new ModelMBeanAttributeInfo[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3816578 // NO_ATTRIBUTES (<unidirectional association>)
	  b parent class_ref 1194242 // ModelMBeanAttributeInfo
      end

      classrelation 3816706 // NO_CONSTRUCTORS (<unidirectional association>)
	relation 3816706 --->
	  a role_name "NO_CONSTRUCTORS" multiplicity "[]" init_value "
            new ModelMBeanConstructorInfo[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3816706 // NO_CONSTRUCTORS (<unidirectional association>)
	  b parent class_ref 1194370 // ModelMBeanConstructorInfo
      end

      classrelation 3816834 // NO_NOTIFICATIONS (<unidirectional association>)
	relation 3816834 --->
	  a role_name "NO_NOTIFICATIONS" multiplicity "[]" init_value "
            new ModelMBeanNotificationInfo[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3816834 // NO_NOTIFICATIONS (<unidirectional association>)
	  b parent class_ref 1194626 // ModelMBeanNotificationInfo
      end

      classrelation 3816962 // NO_OPERATIONS (<unidirectional association>)
	relation 3816962 --->
	  a role_name "NO_OPERATIONS" multiplicity "[]" init_value "
            new ModelMBeanOperationInfo[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3816962 // NO_OPERATIONS (<unidirectional association>)
	  b parent class_ref 1194498 // ModelMBeanOperationInfo
      end

      operation 9828738 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Java doc inherited from MOdelMBeanInfo interface

Returns a shallow clone of this instance.  Neither the Descriptor nor
the contained arrays ({@code ModelMBeanAttributeInfo[]} etc) are
cloned.  This method is chiefly of interest to modify the Descriptor
of the clone via {@link #setDescriptor setDescriptor} without affecting
the Descriptor of the original object.

@return a shallow clone of this instance.
"
      end

      operation 9828866 "getDescriptors"
	public return_type class_ref 489986 // Descriptor
	nparams 1
	  param inout name "inDescriptorType" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9828994 "setDescriptors"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptors" type class_ref 489986 // Descriptor
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9829122 "getDescriptor"
	public return_type class_ref 489986 // Descriptor
	nparams 1
	  param inout name "inDescriptorName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Descriptor requested by name.

@param inDescriptorName The name of the descriptor.

@return Descriptor containing a descriptor for the ModelMBean with the
        same name. If no descriptor is found, null is returned.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException
           for null name.

@see #setDescriptor
"
      end

      operation 9829250 "getDescriptor"
	public return_type class_ref 489986 // Descriptor
	nparams 2
	  param inout name "inDescriptorName" type class_ref 128130 // String
	  param inout name "inDescriptorType" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9829378 "setDescriptor"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inDescriptor" type class_ref 489986 // Descriptor
	  param inout name "inDescriptorType" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9829506 "getAttribute"
	public return_type class_ref 1194242 // ModelMBeanAttributeInfo
	nparams 1
	  param inout name "inName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9829634 "getOperation"
	public return_type class_ref 1194498 // ModelMBeanOperationInfo
	nparams 1
	  param inout name "inName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9829762 "getConstructor"
	public return_type class_ref 1194370 // ModelMBeanConstructorInfo
	nparams 1
	  param inout name "inName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ModelMBeanConstructorInfo requested by name.
If no ModelMBeanConstructorInfo exists for this name null is returned.

@param inName the name of the constructor.

@return the constructor info for the named constructor, or null
if there is none.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException
           for a null constructor name.
"
      end

      operation 9829890 "getNotification"
	public return_type class_ref 1194626 // ModelMBeanNotificationInfo
	nparams 1
	  param inout name "inName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9830018 "getDescriptor"
	public return_type class_ref 489986 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " We override MBeanInfo.getDescriptor() to return our descriptor. 

@since 1.6
"
      end

      operation 9830146 "getMBeanDescriptor"
	public return_type class_ref 489986 // Descriptor
	nparams 0
	nexceptions 1
	  exception class_ref 486018 // MBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9830274 "getMBeanDescriptorNoException"
	private return_type class_ref 489986 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9830402 "setMBeanDescriptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inMBeanDescriptor" type class_ref 489986 // Descriptor
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9830530 "validDescriptor"
	private return_type class_ref 489986 // Descriptor
	nparams 1
	  param in name "in" type class_ref 489986 // Descriptor
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clones the passed in Descriptor, sets default values, and checks for validity.
If the Descriptor is invalid (for instance by having the wrong \"name\"),
this indicates programming error and a RuntimeOperationsException will be thrown.

The following fields will be defaulted if they are not already set:
displayName=className,name=className,descriptorType=\"mbean\",
persistPolicy=\"never\", log=\"F\", visibility=\"1\"

@param in Descriptor to be checked, or null which is equivalent to
an empty Descriptor.
@exception RuntimeOperationsException if Descriptor is invalid
"
      end

      operation 9830658 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link ModelMBeanInfoSupport} from an {@link ObjectInputStream}.
"
      end

      operation 9830786 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link ModelMBeanInfoSupport} to an {@link ObjectOutputStream}.
"
      end
    end

    class 1194882 "RequiredModelMBean"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is the implementation of a ModelMBean. An appropriate
implementation of a ModelMBean must be shipped with every JMX Agent
and the class must be named RequiredModelMBean.
<P>
Java resources wishing to be manageable instantiate the
RequiredModelMBean using the MBeanServer's createMBean method.
The resource then sets the MBeanInfo and Descriptors for the
RequiredModelMBean instance. The attributes and operations exposed
via the ModelMBeanInfo for the ModelMBean are accessible
from MBeans, connectors/adaptors like other MBeans. Through the
Descriptors, values and methods in the managed application can be
defined and mapped to attributes and operations of the ModelMBean.
This mapping can be defined in an XML formatted file or dynamically and
programmatically at runtime.
<P>
Every RequiredModelMBean which is instantiated in the MBeanServer
becomes manageable:<br>
its attributes and operations become remotely accessible through the
connectors/adaptors connected to that MBeanServer.
<P>
A Java object cannot be registered in the MBeanServer unless it is a
JMX compliant MBean. By instantiating a RequiredModelMBean, resources
are guaranteed that the MBean is valid.

MBeanException and RuntimeOperationsException must be thrown on every
public method.  This allows for wrapping exceptions from distributed
communications (RMI, EJB, etc.)

@since 1.5
"
      classrelation 3818882 // <realization>
	relation 3818882 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3818882 // <realization>
	  b parent class_ref 1193858 // ModelMBean
      end

      classrelation 3819010 // <realization>
	relation 3819010 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3819010 // <realization>
	  b parent class_ref 488578 // MBeanRegistration
      end

      classrelation 3819138 // <realization>
	relation 3819138 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3819138 // <realization>
	  b parent class_ref 497666 // NotificationEmitter
      end

      classrelation 3819266 // modelMBeanInfo (<unidirectional association>)
	relation 3819266 --->
	  a role_name "modelMBeanInfo" package
	    comment " attributes                        
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3819266 // modelMBeanInfo (<unidirectional association>)
	  b parent class_ref 1194114 // ModelMBeanInfo
      end

      classrelation 3819394 // generalBroadcaster (<unidirectional association>)
	relation 3819394 --->
	  a role_name "generalBroadcaster" init_value " null" private
	    comment " Notification broadcaster for any notification to be sent
from the application through the RequiredModelMBean.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3819394 // generalBroadcaster (<unidirectional association>)
	  b parent class_ref 497922 // NotificationBroadcasterSupport
      end

      classrelation 3819522 // attributeBroadcaster (<unidirectional association>)
	relation 3819522 --->
	  a role_name "attributeBroadcaster" init_value " null" private
	    comment " Notification broadcaster for attribute change notifications 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3819522 // attributeBroadcaster (<unidirectional association>)
	  b parent class_ref 497922 // NotificationBroadcasterSupport
      end

      classrelation 3819650 // managedResource (<unidirectional association>)
	relation 3819650 --->
	  a role_name "managedResource" init_value " null" private
	    comment " handle, name, or reference for instance on which the actual invoke
and operations will be executed 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3819650 // managedResource (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 2282370 "registered"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " records the registering in MBeanServer 
"
      end

      classrelation 3819778 // server (<unidirectional association>)
	relation 3819778 --->
	  a role_name "server" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3819778 // server (<unidirectional association>)
	  b parent class_ref 485122 // MBeanServer
      end

      attribute 2282498 "javaSecurityAccess"
	class_attribute const_attribute private explicit_type "JavaSecurityAccess"
	init_value " SharedSecrets.getJavaSecurityAccess()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3819906 // acc (<unidirectional association>)
	relation 3819906 --->
	  a role_name "acc" init_value " AccessController.getContext()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3819906 // acc (<unidirectional association>)
	  b parent class_ref 129154 // AccessControlContext
      end

      operation 9833730 "RequiredModelMBean"
	public explicit_return_type ""
	nparams 0
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " constructors                      

Constructs an <CODE>RequiredModelMBean</CODE> with an empty
ModelMBeanInfo.
<P>
The RequiredModelMBean's MBeanInfo and Descriptors
can be customized using the {@link #setModelMBeanInfo} method.
After the RequiredModelMBean's MBeanInfo and Descriptors are
customized, the RequiredModelMBean can be registered with
the MBeanServer.

@exception MBeanException Wraps a distributed communication Exception.

@exception RuntimeOperationsException Wraps a {@link
RuntimeException} during the construction of the object.
"
      end

      operation 9833858 "RequiredModelMBean"
	public explicit_return_type ""
	nparams 1
	  param inout name "mbi" type class_ref 1194114 // ModelMBeanInfo
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a RequiredModelMBean object using ModelMBeanInfo passed in.
As long as the RequiredModelMBean is not registered
with the MBeanServer yet, the RequiredModelMBean's MBeanInfo and
Descriptors can be customized using the {@link #setModelMBeanInfo}
method.
After the RequiredModelMBean's MBeanInfo and Descriptors are
customized, the RequiredModelMBean can be registered with the
MBeanServer.

@param mbi The ModelMBeanInfo object to be used by the
           RequiredModelMBean. The given ModelMBeanInfo is cloned
           and modified as specified by {@link #setModelMBeanInfo}

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an
   {link java.lang.IllegalArgumentException}:
         The MBeanInfo passed in parameter is null.

"
      end

      operation 9833986 "setModelMBeanInfo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mbi" type class_ref 1194114 // ModelMBeanInfo
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " initializers                      

Initializes a ModelMBean object using ModelMBeanInfo passed in.
This method makes it possible to set a customized ModelMBeanInfo on
the ModelMBean as long as it is not registered with the MBeanServer.
<br>
Once the ModelMBean's ModelMBeanInfo (with Descriptors) are
customized and set on the ModelMBean, the  ModelMBean be
registered with the MBeanServer.
<P>
If the ModelMBean is currently registered, this method throws
a {@link javax.management.RuntimeOperationsException} wrapping an
{@link IllegalStateException}
<P>
If the given <var>inModelMBeanInfo</var> does not contain any
{@link ModelMBeanNotificationInfo} for the <code>GENERIC</code>
or <code>ATTRIBUTE_CHANGE</code> notifications, then the
RequiredModelMBean will supply its own default
{@link ModelMBeanNotificationInfo ModelMBeanNotificationInfo}s for
those missing notifications.

@param mbi The ModelMBeanInfo object to be used
       by the ModelMBean.

@exception MBeanException Wraps a distributed communication
       Exception.
@exception RuntimeOperationsException
<ul><li>Wraps an {@link IllegalArgumentException} if
        the MBeanInfo passed in parameter is null.</li>
    <li>Wraps an {@link IllegalStateException} if the ModelMBean
        is currently registered in the MBeanServer.</li>
</ul>

"
      end

      operation 9834114 "setManagedResource"
	public explicit_return_type "void"
	nparams 2
	  param inout name "mr" type class_ref 129538 // Object
	  param inout name "mr_type" type class_ref 128130 // String
	nexceptions 4
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 1193730 // InvalidTargetObjectTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the instance handle of the object against which to
execute all methods in this ModelMBean management interface
(MBeanInfo and Descriptors).

@param mr Object that is the managed resource
@param mr_type The type of reference for the managed resource.
    <br>Can be: \"ObjectReference\", \"Handle\", \"IOR\", \"EJBHandle\",
        or \"RMIReference\".
    <br>In this implementation only \"ObjectReference\" is supported.

@exception MBeanException The initializer of the object has
           thrown an exception.
@exception InstanceNotFoundException The managed resource
           object could not be found
@exception InvalidTargetObjectTypeException The managed
           resource type should be \"ObjectReference\".
@exception RuntimeOperationsException Wraps a {@link
           RuntimeException} when setting the resource.
"
      end

      operation 9834242 "load"
	public explicit_return_type "void"
	nparams 0
	nexceptions 3
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Instantiates this MBean instance with the data found for
the MBean in the persistent store.  The data loaded could include
attribute and operation values.</p>

<p>This method should be called during construction or
initialization of this instance, and before the MBean is
registered with the MBeanServer.</p>

<p>If the implementation of this class does not support
persistence, an {@link MBeanException} wrapping a {@link
ServiceNotFoundException} is thrown.</p>

@exception MBeanException Wraps another exception, or
persistence is not supported
@exception RuntimeOperationsException Wraps exceptions from the
persistence mechanism
@exception InstanceNotFoundException Could not find or load
this MBean from persistent storage
"
      end

      operation 9834370 "store"
	public explicit_return_type "void"
	nparams 0
	nexceptions 3
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Captures the current state of this MBean instance and writes
it out to the persistent store.  The state stored could include
attribute and operation values.</p>

<p>If the implementation of this class does not support
persistence, an {@link MBeanException} wrapping a {@link
ServiceNotFoundException} is thrown.</p>

<p>Persistence policy from the MBean and attribute descriptor
is used to guide execution of this method. The MBean should be
stored if 'persistPolicy' field is:</p>

<PRE>{@literal  != \"never\"
  = \"always\"
  = \"onTimer\" and now > 'lastPersistTime' + 'persistPeriod'
  = \"NoMoreOftenThan\" and now > 'lastPersistTime' + 'persistPeriod'
  = \"onUnregister\"
}</PRE>

<p>Do not store the MBean if 'persistPolicy' field is:</p>
<PRE>{@literal
   = \"never\"
   = \"onUpdate\"
   = \"onTimer\" && now < 'lastPersistTime' + 'persistPeriod'
}</PRE>

@exception MBeanException Wraps another exception, or
persistence is not supported
@exception RuntimeOperationsException Wraps exceptions from the
persistence mechanism
@exception InstanceNotFoundException Could not find/access the
persistent store
"
      end

      operation 9834498 "resolveForCacheValue"
	private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "descr" type class_ref 489986 // Descriptor
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " DynamicMBean Interface            

The resolveForCacheValue method checks the descriptor passed in to
see if there is a valid cached value in the descriptor.
The valid value will be in the 'value' field if there is one.
If the 'currencyTimeLimit' field in the descriptor is:
<ul>
  <li><b>&lt;0</b> Then the value is not cached and is never valid.
        Null is returned. The 'value' and 'lastUpdatedTimeStamp'
        fields are cleared.</li>
  <li><b>=0</b> Then the value is always cached and always valid.
        The 'value' field is returned.
        The 'lastUpdatedTimeStamp' field is not checked.</li>
  <li><b>&gt;0</b> Represents the number of seconds that the
        'value' field is valid.
        The 'value' field is no longer valid when
        'lastUpdatedTimeStamp' + 'currencyTimeLimit' &gt; Now.
      <ul>
      <li>When 'value' is valid, 'valid' is returned.</li>
      <li>When 'value' is no longer valid then null is returned and
          'value' and 'lastUpdatedTimeStamp' fields are cleared.</li>
      </ul>
  </li>
</ul>

"
      end

      operation 9834626 "getMBeanInfo"
	public return_type class_ref 487426 // MBeanInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the attributes, operations, constructors and notifications
that this RequiredModelMBean exposes for management.

@return  An instance of ModelMBeanInfo allowing retrieval all
         attributes, operations, and Notifications of this MBean.

"
      end

      operation 9834754 "printModelMBeanInfo"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "info" type class_ref 1194114 // ModelMBeanInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9834882 "invoke"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "opName" type class_ref 128130 // String
	  param inout name "opArgs" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "sig" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes a method on or through a RequiredModelMBean and returns
the result of the method execution.
<P>
If the given method to be invoked, together with the provided
signature, matches one of RequiredModelMbean
accessible methods, this one will be call. Otherwise the call to
the given method will be tried on the managed resource.
<P>
The last value returned by an operation may be cached in
the operation's descriptor which
is in the ModelMBeanOperationInfo's descriptor.
The valid value will be in the 'value' field if there is one.
If the 'currencyTimeLimit' field in the descriptor is:
<UL>
<LI><b>&lt;0</b> Then the value is not cached and is never valid.
     The operation method is invoked.
     The 'value' and 'lastUpdatedTimeStamp' fields are cleared.</LI>
<LI><b>=0</b> Then the value is always cached and always valid.
     The 'value' field is returned. If there is no 'value' field
     then the operation method is invoked for the attribute.
     The 'lastUpdatedTimeStamp' field and `value' fields are set to
     the operation's return value and the current time stamp.</LI>
<LI><b>&gt;0</b> Represents the number of seconds that the 'value'
     field is valid.
     The 'value' field is no longer valid when
     'lastUpdatedTimeStamp' + 'currencyTimeLimit' &gt; Now.
     <UL>
        <LI>When 'value' is valid, 'value' is returned.</LI>
        <LI>When 'value' is no longer valid then the operation
            method is invoked. The 'lastUpdatedTimeStamp' field
            and `value' fields are updated.</lI>
     </UL>
</LI>
</UL>

<p><b>Note:</b> because of inconsistencies in previous versions of
this specification, it is recommended not to use negative or zero
values for <code>currencyTimeLimit</code>.  To indicate that a
cached value is never valid, omit the
<code>currencyTimeLimit</code> field.  To indicate that it is
always valid, use a very large number for this field.</p>

@param opName The name of the method to be invoked. The
    name can be the fully qualified method name including the
    classname, or just the method name if the classname is
    defined in the 'class' field of the operation descriptor.
@param opArgs An array containing the parameters to be set
    when the operation is invoked
@param sig An array containing the signature of the
    operation. The class objects will be loaded using the same
    class loader as the one used for loading the MBean on which
    the operation was invoked.

@return  The object returned by the method, which represents the
    result of invoking the method on the specified managed resource.

@exception MBeanException  Wraps one of the following Exceptions:
<UL>
<LI> An Exception thrown by the managed object's invoked method.</LI>
<LI> {@link ServiceNotFoundException}: No ModelMBeanOperationInfo or
     no descriptor defined for the specified operation or the managed
     resource is null.</LI>
<LI> {@link InvalidTargetObjectTypeException}: The 'targetType'
     field value is not 'objectReference'.</LI>
</UL>
@exception ReflectionException  Wraps an {@link java.lang.Exception}
     thrown while trying to invoke the method.
@exception RuntimeOperationsException Wraps an
     {@link IllegalArgumentException} Method name is null.



The requirement to be able to invoke methods on the
RequiredModelMBean class itself makes this method considerably
more complicated than it might otherwise be.  Note that, unlike
earlier versions, we do not allow you to invoke such methods if
they are not explicitly mentioned in the ModelMBeanInfo.  Doing
so was potentially a security problem, and certainly very
surprising.

We do not look for the method in the RequiredModelMBean class
itself if:
(a) there is a \"targetObject\" field in the Descriptor for the
operation; or
(b) there is a \"class\" field in the Descriptor for the operation
and the named class is not RequiredModelMBean or one of its
superinterfaces; or
(c) the name of the operation is not the name of a method in
RequiredModelMBean (this is just an optimization).

In cases (a) and (b), if you have gone to the trouble of adding
those fields specifically for this operation then presumably you
do not want RequiredModelMBean's methods to be called.

We have to pay attention to class loading issues.  If the
\"class\" field is present, the named class has to be resolved
relative to RequiredModelMBean's class loader to test the
condition (b) above, and relative to the managed resource's
class loader to ensure that the managed resource is in fact of
the named class (or a subclass).  The class names in the sig
array likewise have to be resolved, first against
RequiredModelMBean's class loader, then against the managed
resource's class loader.  There is no point in using any other
loader because when we call Method.invoke we must call it on
a Method that is implemented by the target object.
"
      end

      operation 9835010 "resolveMethod"
	private return_type class_ref 137858 // Method
	nparams 3
	  param inout name "targetClass" type class_ref 130818 // Class
	  param inout name "opMethodName" type class_ref 128130 // String
	  param in name "sig" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, final ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3820034 // primitiveClasses (<unidirectional association>)
	relation 3820034 --->
	  a role_name "primitiveClasses" multiplicity "[]" init_value " {
        int.class, long.class, boolean.class, double.class,
        float.class, short.class, byte.class, char.class,
    }" class_relation const_relation private
	    comment " Map e.g. \"int\" to int.class.  Goodness knows how many time this
particular wheel has been reinvented.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3820034 // primitiveClasses (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3820162 // primitiveClassMap (<unidirectional association>)
	relation 3820162 --->
	  a role_name "primitiveClassMap" init_value "
        new HashMap<String,Class<?>>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Class<?>> ${name}${value};
"
	    classrelation_ref 3820162 // primitiveClassMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      extra_member 181250 "initialization"
	
	cpp "" ""
	java "  static {
        for (int i = 0; i < primitiveClasses.length; i++) {
            final Class<?> c = primitiveClasses[i];
            primitiveClassMap.put(c.getName(), c);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 9835138 "findRMMBMethod"
	private return_type class_ref 137858 // Method
	nparams 4
	  param inout name "opMethodName" type class_ref 128130 // String
	  param inout name "targetObjectField" type class_ref 129538 // Object
	  param inout name "opClassName" type class_ref 128130 // String
	  param inout name "sig" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Find a method in RequiredModelMBean as determined by the given
parameters.  Return null if there is none, or if the parameters
exclude using it.  Called from invoke. "
      end

      operation 9835266 "invokeMethod"
	private return_type class_ref 129538 // Object
	nparams 4
	  param inout name "opName" type class_ref 128130 // String
	  param in name "method" type class_ref 137858 // Method
	  param in name "targetObject" type class_ref 129538 // Object
	  param in name "opArgs" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, final ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke the given method, and throw the somewhat unpredictable
appropriate exception if the method itself gets an exception.
"
      end

      operation 9835394 "cacheResult"
	private explicit_return_type "void"
	nparams 3
	  param inout name "opInfo" type class_ref 1194498 // ModelMBeanOperationInfo
	  param inout name "opDescr" type class_ref 489986 // Descriptor
	  param inout name "result" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 486018 // MBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cache the result of an operation in the descriptor, if that is
called for by the descriptor's configuration.  Note that we
don't remember operation parameters when caching the result, so
this is unlikely to be useful if there are any.
"
      end

      classrelation 3820290 // rmmbMethodNames (<unidirectional association>)
	relation 3820290 --->
	  a role_name "rmmbMethodNames" class_relation private
	    comment "
Determine whether the given name is the name of a public method
in this class.  This is only an optimization: it prevents us
from trying to do argument type lookups and reflection on a
method that will obviously fail because it has the wrong name.

The first time this method is called we do the reflection, and
every other time we reuse the remembered values.

It's conceivable that the (possibly malicious) first caller
doesn't have the required permissions to do reflection, in
which case we don't touch anything so as not to interfere
with a later permissionful caller.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3820290 // rmmbMethodNames (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      operation 9835522 "isRMMBMethodName"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9835650 "getAttribute"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "attrName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of a specific attribute defined for this
ModelMBean.
The last value returned by an attribute may be cached in the
attribute's descriptor.
The valid value will be in the 'value' field if there is one.
If the 'currencyTimeLimit' field in the descriptor is:
<UL>
<LI>  <b>&lt;0</b> Then the value is not cached and is never valid.
      The getter method is invoked for the attribute.
      The 'value' and 'lastUpdatedTimeStamp' fields are cleared.</LI>
<LI>  <b>=0</b> Then the value is always cached and always valid.
      The 'value' field is returned. If there is no'value' field
      then the getter method is invoked for the attribute.
      The 'lastUpdatedTimeStamp' field and `value' fields are set
      to the attribute's value and the current time stamp.</LI>
<LI>  <b>&gt;0</b> Represents the number of seconds that the 'value'
      field is valid.
      The 'value' field is no longer valid when
      'lastUpdatedTimeStamp' + 'currencyTimeLimit' &gt; Now.
  <UL>
       <LI>When 'value' is valid, 'value' is returned.</LI>
       <LI>When 'value' is no longer valid then the getter
           method is invoked for the attribute.
           The 'lastUpdatedTimeStamp' field and `value' fields
           are updated.</LI>
  </UL></LI>
</UL>

<p><b>Note:</b> because of inconsistencies in previous versions of
this specification, it is recommended not to use negative or zero
values for <code>currencyTimeLimit</code>.  To indicate that a
cached value is never valid, omit the
<code>currencyTimeLimit</code> field.  To indicate that it is
always valid, use a very large number for this field.</p>

<p>If the 'getMethod' field contains the name of a valid
operation descriptor, then the method described by the
operation descriptor is executed.  The response from the
method is returned as the value of the attribute.  If the
operation fails or the returned value is not compatible with
the declared type of the attribute, an exception will be thrown.</p>

<p>If no 'getMethod' field is defined then the default value of the
attribute is returned. If the returned value is not compatible with
the declared type of the attribute, an exception will be thrown.</p>

<p>The declared type of the attribute is the String returned by
{@link ModelMBeanAttributeInfo#getType()}.  A value is compatible
with this type if one of the following is true:
<ul>
<li>the value is null;</li>
<li>the declared name is a primitive type name (such as \"int\")
    and the value is an instance of the corresponding wrapper
    type (such as java.lang.Integer);</li>
<li>the name of the value's class is identical to the declared name;</li>
<li>the declared name can be loaded by the value's class loader and
    produces a class to which the value can be assigned.</li>
</ul>

<p>In this implementation, in every case where the getMethod needs to
be called, because the method is invoked through the standard \"invoke\"
method and thus needs operationInfo, an operation must be specified
for that getMethod so that the invocation works correctly.</p>

@param attrName A String specifying the name of the
attribute to be retrieved. It must match the name of a
ModelMBeanAttributeInfo.

@return The value of the retrieved attribute from the
descriptor 'value' field or from the invocation of the
operation in the 'getMethod' field of the descriptor.

@exception AttributeNotFoundException The specified attribute is
   not accessible in the MBean.
   The following cases may result in an AttributeNotFoundException:
   <UL>
     <LI> No ModelMBeanInfo was found for the Model MBean.</LI>
     <LI> No ModelMBeanAttributeInfo was found for the specified
          attribute name.</LI>
     <LI> The ModelMBeanAttributeInfo isReadable method returns
          'false'.</LI>
   </UL>
@exception MBeanException  Wraps one of the following Exceptions:
   <UL>
     <LI> {@link InvalidAttributeValueException}: A wrong value type
          was received from the attribute's getter method or
          no 'getMethod' field defined in the descriptor for
          the attribute and no default value exists.</LI>
     <LI> {@link ServiceNotFoundException}: No
          ModelMBeanOperationInfo defined for the attribute's
          getter method or no descriptor associated with the
          ModelMBeanOperationInfo or the managed resource is
          null.</LI>
     <LI> {@link InvalidTargetObjectTypeException} The 'targetType'
          field value is not 'objectReference'.</LI>
     <LI> An Exception thrown by the managed object's getter.</LI>
   </UL>
@exception ReflectionException  Wraps an {@link java.lang.Exception}
   thrown while trying to invoke the getter.
@exception RuntimeOperationsException Wraps an
   {@link IllegalArgumentException}: The attribute name in
   parameter is null.

@see #setAttribute(javax.management.Attribute)
"
      end

      operation 9835778 "getAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 1
	  param inout name "attrNames" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the values of several attributes in the ModelMBean.
Executes a getAttribute for each attribute name in the
attrNames array passed in.

@param attrNames A String array of names of the attributes
to be retrieved.

@return The array of the retrieved attributes.

@exception RuntimeOperationsException Wraps an
{@link IllegalArgumentException}: The object name in parameter is
null or attributes in parameter is null.

@see #setAttributes(javax.management.AttributeList)
"
      end

      operation 9835906 "setAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "attribute" type class_ref 486786 // Attribute
	nexceptions 4
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486914 // InvalidAttributeValueException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specific attribute of a named ModelMBean.

If the 'setMethod' field of the attribute's descriptor
contains the name of a valid operation descriptor, then the
method described by the operation descriptor is executed.
In this implementation, the operation descriptor must be specified
correctly and assigned to the modelMBeanInfo so that the 'setMethod'
works correctly.
The response from the method is set as the value of the attribute
in the descriptor.

<p>If currencyTimeLimit is &gt; 0, then the new value for the
attribute is cached in the attribute descriptor's
'value' field and the 'lastUpdatedTimeStamp' field is set to
the current time stamp.

<p>If the persist field of the attribute's descriptor is not null
then Persistence policy from the attribute descriptor is used to
guide storing the attribute in a persistent store.
<br>Store the MBean if 'persistPolicy' field is:
<UL>
<Li> != \"never\"</Li>
<Li> = \"always\"</Li>
<Li> = \"onUpdate\"</Li>
<Li> {@literal = \"onTimer\" and now > 'lastPersistTime' + 'persistPeriod'}</Li>
<Li> {@literal = \"NoMoreOftenThan\" and now > 'lastPersistTime' +
        'persistPeriod'}</Li>
</UL>
Do not store the MBean if 'persistPolicy' field is:
<UL>
<Li> = \"never\"</Li>
<Li> = {@literal = \"onTimer\" && now < 'lastPersistTime' + 'persistPeriod'}</Li>
<Li> = \"onUnregister\"</Li>
<Li> = {@literal = \"NoMoreOftenThan\" and now < 'lastPersistTime' +
       'persistPeriod'}</Li>
</UL>

<p>The ModelMBeanInfo of the Model MBean is stored in a file.

@param attribute The Attribute instance containing the name of
       the attribute to be set and the value it is to be set to.


@exception AttributeNotFoundException The specified attribute is
  not accessible in the MBean.
  <br>The following cases may result in an AttributeNotFoundException:
  <UL>
    <LI> No ModelMBeanAttributeInfo is found for the specified
         attribute.</LI>
    <LI> The ModelMBeanAttributeInfo's isWritable method returns
         'false'.</LI>
  </UL>
@exception InvalidAttributeValueException No descriptor is defined
  for the specified attribute.
@exception MBeanException Wraps one of the following Exceptions:
  <UL>
    <LI> An Exception thrown by the managed object's setter.</LI>
    <LI> A {@link ServiceNotFoundException} if a setMethod field is
         defined in the descriptor for the attribute and the managed
         resource is null; or if no setMethod field is defined and
         caching is not enabled for the attribute.
         Note that if there is no getMethod field either, then caching
         is automatically enabled.</LI>
    <LI> {@link InvalidTargetObjectTypeException} The 'targetType'
         field value is not 'objectReference'.</LI>
    <LI> An Exception thrown by the managed object's getter.</LI>
  </UL>
@exception ReflectionException  Wraps an {@link java.lang.Exception}
  thrown while trying to invoke the setter.
@exception RuntimeOperationsException Wraps an
  {@link IllegalArgumentException}: The attribute in parameter is
  null.

@see #getAttribute(java.lang.String)
"
      end

      operation 9836034 "setAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 1
	  param inout name "attributes" type class_ref 486658 // AttributeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the values of an array of attributes of this ModelMBean.
Executes the setAttribute() method for each attribute in the list.

@param attributes A list of attributes: The identification of the
attributes to be set and  the values they are to be set to.

@return  The array of attributes that were set, with their new
   values in Attribute instances.

@exception RuntimeOperationsException Wraps an
  {@link IllegalArgumentException}: The object name in parameter
  is null or attributes in parameter is null.

@see #getAttributes
"
      end

      operation 9836162 "createDefaultModelMBeanInfo"
	private return_type class_ref 1194114 // ModelMBeanInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9836290 "writeToLog"
	private explicit_return_type "void"
	nparams 2
	  param inout name "logFileName" type class_ref 128130 // String
	  param inout name "logEntry" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NotificationBroadcaster Interface "
      end

      operation 9836418 "addNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers an object which implements the NotificationListener
interface as a listener.  This
object's 'handleNotification()' method will be invoked when any
notification is issued through or by the ModelMBean.  This does
not include attributeChangeNotifications.  They must be registered
for independently.

@param listener The listener object which will handles
       notifications emitted by the registered MBean.
@param filter The filter object. If null, no filtering will be
       performed before handling notifications.
@param handback The context to be sent to the listener with
       the notification when a notification is emitted.

@exception IllegalArgumentException The listener cannot be null.

@see #removeNotificationListener
"
      end

      operation 9836546 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 487042 // NotificationListener
	nexceptions 1
	  exception class_ref 487298 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener for Notifications from the RequiredModelMBean.

@param listener The listener name which was handling notifications
   emitted by the registered MBean.
   This method will remove all information related to this listener.

@exception ListenerNotFoundException The listener is not registered
   in the MBean or is null.

@see #addNotificationListener
"
      end

      operation 9836674 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 487298 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9836802 "sendNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ntfyObj" type class_ref 488706 // Notification
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9836930 "sendNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ntfyText" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9837058 "hasNotification"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "info" type class_ref 1194114 // ModelMBeanInfo
	  param in name "notifName" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns `true' if the notification `notifName' is found
in `info'. (bug 4744667)
"
      end

      operation 9837186 "makeGenericInfo"
	class_operation private return_type class_ref 1194626 // ModelMBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default ModelMBeanNotificationInfo for GENERIC
notification.  (bug 4744667)
"
      end

      operation 9837314 "makeAttributeChangeInfo"
	class_operation private return_type class_ref 1194626 // ModelMBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default ModelMBeanNotificationInfo for ATTRIBUTE_CHANGE
notification.  (bug 4744667)
"
      end

      operation 9837442 "getNotificationInfo"
	public return_type class_ref 497154 // MBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of Notifications always generated by the
RequiredModelMBean.
<P>

RequiredModelMBean may always send also two additional notifications:
<UL>
  <LI> One with descriptor <code>\"name=GENERIC,descriptorType=notification,log=T,severity=6,displayName=jmx.modelmbean.generic\"</code></LI>
  <LI> Second is a standard attribute change notification
       with descriptor <code>\"name=ATTRIBUTE_CHANGE,descriptorType=notification,log=T,severity=6,displayName=jmx.attribute.change\"</code></LI>
</UL>
Thus these two notifications are always added to those specified
by the application.

@return MBeanNotificationInfo[]

"
      end

      operation 9837570 "addAttributeChangeNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "inlistener" type class_ref 487042 // NotificationListener
	  param inout name "inAttributeName" type class_ref 128130 // String
	  param inout name "inhandback" type class_ref 129538 // Object
	nexceptions 3
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9837698 "removeAttributeChangeNotificationListener"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inlistener" type class_ref 487042 // NotificationListener
	  param inout name "inAttributeName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	  exception class_ref 487298 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9837826 "sendAttributeChangeNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ntfyObj" type class_ref 1186434 // AttributeChangeNotification
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9837954 "sendAttributeChangeNotification"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inOldVal" type class_ref 486786 // Attribute
	  param inout name "inNewVal" type class_ref 486786 // Attribute
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9838082 "getClassLoaderRepository"
	protected return_type class_ref 487810 // ClassLoaderRepository
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Class Loader Repository used to perform class loading.
Subclasses may wish to redefine this method in order to return
the appropriate {@link javax.management.loading.ClassLoaderRepository}
that should be used in this object.

@return the Class Loader Repository.

"
      end

      operation 9838210 "loadClass"
	private return_type class_ref 130818 // Class
	nparams 1
	  param in name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9838338 "preRegister"
	public return_type class_ref 485506 // ObjectName
	nparams 2
	  param inout name "server" type class_ref 485122 // MBeanServer
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " MBeanRegistration Interface       

Allows the MBean to perform any operations it needs before
being registered in the MBean server.  If the name of the MBean
is not specified, the MBean can provide a name for its
registration.  If any exception is raised, the MBean will not be
registered in the MBean server.
<P>
In order to ensure proper run-time semantics of RequireModelMBean,
Any subclass of RequiredModelMBean overloading or overriding this
method should call <code>super.preRegister(server, name)</code>
in its own <code>preRegister</code> implementation.

@param server The MBean server in which the MBean will be registered.

@param name The object name of the MBean.  This name is null if
the name parameter to one of the <code>createMBean</code> or
<code>registerMBean</code> methods in the {@link MBeanServer}
interface is null.  In that case, this method must return a
non-null ObjectName for the new MBean.

@return The name under which the MBean is to be registered.
This value must not be null.  If the <code>name</code>
parameter is not null, it will usually but not necessarily be
the returned value.

@exception java.lang.Exception This exception will be caught by
the MBean server and re-thrown as an
{@link javax.management.MBeanRegistrationException
MBeanRegistrationException}.
"
      end

      operation 9838466 "postRegister"
	public explicit_return_type "void"
	nparams 1
	  param inout name "registrationDone" type class_ref 315010 // Boolean
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the MBean to perform any operations needed after having been
registered in the MBean server or after the registration has failed.
<P>
In order to ensure proper run-time semantics of RequireModelMBean,
Any subclass of RequiredModelMBean overloading or overriding this
method should call <code>super.postRegister(registrationDone)</code>
in its own <code>postRegister</code> implementation.

@param registrationDone Indicates whether or not the MBean has
been successfully registered in the MBean server. The value
false means that the registration phase has failed.
"
      end

      operation 9838594 "preDeregister"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the MBean to perform any operations it needs before
being unregistered by the MBean server.
<P>
In order to ensure proper run-time semantics of RequireModelMBean,
Any subclass of RequiredModelMBean overloading or overriding this
method should call <code>super.preDeregister()</code> in its own
<code>preDeregister</code> implementation.

@exception java.lang.Exception This exception will be caught by
the MBean server and re-thrown as an
{@link javax.management.MBeanRegistrationException
MBeanRegistrationException}.
"
      end

      operation 9838722 "postDeregister"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the MBean to perform any operations needed after having been
unregistered in the MBean server.
<P>
In order to ensure proper run-time semantics of RequireModelMBean,
Any subclass of RequiredModelMBean overloading or overriding this
method should call <code>super.postDeregister()</code> in its own
<code>postDeregister</code> implementation.
"
      end

      classrelation 3820418 // primitiveTypes (<unidirectional association>)
	relation 3820418 --->
	  a role_name "primitiveTypes" multiplicity "[]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3820418 // primitiveTypes (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3820546 // primitiveWrappers (<unidirectional association>)
	relation 3820546 --->
	  a role_name "primitiveWrappers" multiplicity "[]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3820546 // primitiveWrappers (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      extra_member 181378 "initialization"
	
	cpp "" ""
	java "  static {
        primitiveTypes = new String[] {
            Boolean.TYPE.getName(),
            Byte.TYPE.getName(),
            Character.TYPE.getName(),
            Short.TYPE.getName(),
            Integer.TYPE.getName(),
            Long.TYPE.getName(),
            Float.TYPE.getName(),
            Double.TYPE.getName(),
            Void.TYPE.getName()
        };
        primitiveWrappers = new String[] {
            Boolean.class.getName(),
            Byte.class.getName(),
            Character.class.getName(),
            Short.class.getName(),
            Integer.class.getName(),
            Long.class.getName(),
            Float.class.getName(),
            Double.class.getName(),
            Void.class.getName()
        };
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end
  end

  deploymentview 172802 "modelmbean"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 859394 "DescriptorSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import com.sun.jmx.mbeanserver.Util;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.lang.reflect.Constructor;
import java.security.AccessController;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.logging.Level;
import javax.management.Descriptor;
import javax.management.ImmutableDescriptor;
import javax.management.MBeanException;
import javax.management.RuntimeOperationsException;
import sun.reflect.misc.ReflectUtil;
import static com.sun.jmx.defaults.JmxProperties.MODELMBEAN_LOGGER;
import static com.sun.jmx.mbeanserver.Util.cast;
${definition}"
      associated_elems
	class_ref 1193474 // DescriptorSupport
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 859522 "InvalidTargetObjectTypeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
${definition}"
      associated_elems
	class_ref 1193730 // InvalidTargetObjectTypeException
      end
      comment "Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 859650 "ModelMBeanNotificationBroadcaster"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.Attribute;
import javax.management.AttributeChangeNotification;
import javax.management.ListenerNotFoundException;
import javax.management.MBeanException;
import javax.management.Notification;
import javax.management.NotificationBroadcaster;
import javax.management.NotificationListener;
import javax.management.RuntimeOperationsException;
${definition}"
      associated_elems
	class_ref 1193986 // ModelMBeanNotificationBroadcaster
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 859778 "ModelMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.DynamicMBean;
import javax.management.InstanceNotFoundException;
import javax.management.MBeanException;
import javax.management.PersistentMBean;
import javax.management.RuntimeOperationsException;
${definition}"
      associated_elems
	class_ref 1193858 // ModelMBean
      end
      comment "Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 859906 "ModelMBeanAttributeInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.lang.reflect.Method;
import java.security.AccessController;
import java.util.logging.Level;
import javax.management.Descriptor;
import javax.management.DescriptorKey;
import javax.management.DescriptorAccess;
import javax.management.MBeanAttributeInfo;
import javax.management.RuntimeOperationsException;
import static com.sun.jmx.defaults.JmxProperties.MODELMBEAN_LOGGER;
${definition}"
      associated_elems
	class_ref 1194242 // ModelMBeanAttributeInfo
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 860034 "ModelMBeanConstructorInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.lang.reflect.Constructor;
import java.security.AccessController;
import java.util.logging.Level;
import javax.management.Descriptor;
import javax.management.DescriptorAccess;
import javax.management.DescriptorKey;
import javax.management.MBeanConstructorInfo;
import javax.management.MBeanParameterInfo;
import javax.management.RuntimeOperationsException;
import static com.sun.jmx.defaults.JmxProperties.MODELMBEAN_LOGGER;
${definition}"
      associated_elems
	class_ref 1194370 // ModelMBeanConstructorInfo
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 860162 "ModelMBeanInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.Descriptor;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanConstructorInfo;
import javax.management.RuntimeOperationsException;
import javax.management.MBeanException;
import javax.management.MBeanNotificationInfo;
import javax.management.MBeanOperationInfo;
${definition}"
      associated_elems
	class_ref 1194114 // ModelMBeanInfo
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 860290 "ModelMBeanInfoSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.util.logging.Level;
import javax.management.Descriptor;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanConstructorInfo;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanNotificationInfo;
import javax.management.MBeanOperationInfo;
import javax.management.RuntimeOperationsException;
import static com.sun.jmx.defaults.JmxProperties.MODELMBEAN_LOGGER;
${definition}"
      associated_elems
	class_ref 1194754 // ModelMBeanInfoSupport
      end
      comment "Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 860418 "ModelMBeanNotificationInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.util.logging.Level;
import javax.management.Descriptor;
import javax.management.DescriptorAccess;
import javax.management.MBeanNotificationInfo;
import javax.management.RuntimeOperationsException;
import static com.sun.jmx.defaults.JmxProperties.MODELMBEAN_LOGGER;
${definition}"
      associated_elems
	class_ref 1194626 // ModelMBeanNotificationInfo
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 860546 "ModelMBeanOperationInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.lang.reflect.Method;
import java.security.AccessController;
import java.util.logging.Level;
import javax.management.Descriptor;
import javax.management.DescriptorAccess;
import javax.management.DescriptorKey;
import javax.management.MBeanOperationInfo;
import javax.management.MBeanParameterInfo;
import javax.management.RuntimeOperationsException;
import static com.sun.jmx.defaults.JmxProperties.MODELMBEAN_LOGGER;
${definition}"
      associated_elems
	class_ref 1194498 // ModelMBeanOperationInfo
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 860674 "RequiredModelMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.security.AccessControlContext;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import javax.management.Attribute;
import javax.management.AttributeChangeNotification;
import javax.management.AttributeChangeNotificationFilter;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.Descriptor;
import javax.management.InstanceNotFoundException;
import javax.management.InvalidAttributeValueException;
import javax.management.ListenerNotFoundException;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanConstructorInfo;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanNotificationInfo;
import javax.management.MBeanOperationInfo;
import javax.management.MBeanRegistration;
import javax.management.MBeanServer;
import javax.management.MBeanServerFactory;
import javax.management.Notification;
import javax.management.NotificationBroadcasterSupport;
import javax.management.NotificationEmitter;
import javax.management.NotificationFilter;
import javax.management.NotificationListener;
import javax.management.ObjectName;
import javax.management.ReflectionException;
import javax.management.RuntimeErrorException;
import javax.management.RuntimeOperationsException;
import javax.management.ServiceNotFoundException;
import javax.management.loading.ClassLoaderRepository;
import sun.misc.JavaSecurityAccess;
import sun.misc.SharedSecrets;
import sun.reflect.misc.MethodUtil;
import sun.reflect.misc.ReflectUtil;
import static com.sun.jmx.defaults.JmxProperties.MODELMBEAN_LOGGER;
${definition}"
      associated_elems
	class_ref 1194882 // RequiredModelMBean
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 860802 "XMLParseException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
${definition}"
      associated_elems
	class_ref 1193602 // XMLParseException
      end
      comment "Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end
  end
end
