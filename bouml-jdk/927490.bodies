class SequenceInputStream
!!!6931330.java!!!	SequenceInputStream(inout e : Enumeration)
        this.e = e;
        try {
            nextStream();
        } catch (IOException ex) {
            // This should never happen
            throw new Error("panic");
        }
!!!6931458.java!!!	SequenceInputStream(inout s1 : InputStream, inout s2 : InputStream)
        Vector<InputStream> v = new Vector<>(2);

        v.addElement(s1);
        v.addElement(s2);
        e = v.elements();
        try {
            nextStream();
        } catch (IOException ex) {
            // This should never happen
            throw new Error("panic");
        }
!!!6931586.java!!!	nextStream() : void
        if (in != null) {
            in.close();
        }

        if (e.hasMoreElements()) {
            in = (InputStream) e.nextElement();
            if (in == null)
                throw new NullPointerException();
        }
        else in = null;

!!!6931714.java!!!	available() : int
        if (in == null) {
            return 0; // no way to signal EOF from available()
        }
        return in.available();
!!!6931842.java!!!	read() : int
        while (in != null) {
            int c = in.read();
            if (c != -1) {
                return c;
            }
            nextStream();
        }
        return -1;
!!!6931970.java!!!	read(inout b : byte [[]], in off : int, in len : int) : int
        if (in == null) {
            return -1;
        } else if (b == null) {
            throw new NullPointerException();
        } else if (off < 0 || len < 0 || len > b.length - off) {
            throw new IndexOutOfBoundsException();
        } else if (len == 0) {
            return 0;
        }
        do {
            int n = in.read(b, off, len);
            if (n > 0) {
                return n;
            }
            nextStream();
        } while (in != null);
        return -1;
!!!6932098.java!!!	close() : void
        do {
            nextStream();
        } while (in != null);
