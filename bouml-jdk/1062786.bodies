class WeekFields
!!!8564482.java!!!	of(inout locale : Locale) : WeekFields
        Objects.requireNonNull(locale, "locale");
        locale = new Locale(locale.getLanguage(), locale.getCountry());  // elminate variants

        int calDow = CalendarDataUtility.retrieveFirstDayOfWeek(locale);
        DayOfWeek dow = DayOfWeek.SUNDAY.plus(calDow - 1);
        int minDays = CalendarDataUtility.retrieveMinimalDaysInFirstWeek(locale);
        return WeekFields.of(dow, minDays);
!!!8564610.java!!!	of(inout firstDayOfWeek : DayOfWeek, in minimalDaysInFirstWeek : int) : WeekFields
        String key = firstDayOfWeek.toString() + minimalDaysInFirstWeek;
        WeekFields rules = CACHE.get(key);
        if (rules == null) {
            rules = new WeekFields(firstDayOfWeek, minimalDaysInFirstWeek);
            CACHE.putIfAbsent(key, rules);
            rules = CACHE.get(key);
        }
        return rules;
!!!8564738.java!!!	WeekFields(inout firstDayOfWeek : DayOfWeek, in minimalDaysInFirstWeek : int)
        Objects.requireNonNull(firstDayOfWeek, "firstDayOfWeek");
        if (minimalDaysInFirstWeek < 1 || minimalDaysInFirstWeek > 7) {
            throw new IllegalArgumentException("Minimal number of days is invalid");
        }
        this.firstDayOfWeek = firstDayOfWeek;
        this.minimalDays = minimalDaysInFirstWeek;
!!!8564866.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();
        if (firstDayOfWeek == null) {
            throw new InvalidObjectException("firstDayOfWeek is null");
        }

        if (minimalDays < 1 || minimalDays > 7) {
            throw new InvalidObjectException("Minimal number of days is invalid");
        }
!!!8564994.java!!!	readResolve() : Object
        try {
            return WeekFields.of(firstDayOfWeek, minimalDays);
        } catch (IllegalArgumentException iae) {
            throw new InvalidObjectException("Invalid serialized WeekFields: " + iae.getMessage());
        }
!!!8565122.java!!!	getFirstDayOfWeek() : DayOfWeek
        return firstDayOfWeek;
!!!8565250.java!!!	getMinimalDaysInFirstWeek() : int
        return minimalDays;
!!!8565378.java!!!	dayOfWeek() : TemporalField
        return dayOfWeek;
!!!8565506.java!!!	weekOfMonth() : TemporalField
        return weekOfMonth;
!!!8565634.java!!!	weekOfYear() : TemporalField
        return weekOfYear;
!!!8565762.java!!!	weekOfWeekBasedYear() : TemporalField
        return weekOfWeekBasedYear;
!!!8565890.java!!!	weekBasedYear() : TemporalField
        return weekBasedYear;
!!!8566018.java!!!	equals(inout object : Object) : boolean
        if (this == object) {
            return true;
        }
        if (object instanceof WeekFields) {
            return hashCode() == object.hashCode();
        }
        return false;
!!!8566146.java!!!	hashCode() : int
        return firstDayOfWeek.ordinal() * 7 + minimalDays;
!!!8566274.java!!!	toString() : String
        return "WeekFields[" + firstDayOfWeek + ',' + minimalDays + ']';
