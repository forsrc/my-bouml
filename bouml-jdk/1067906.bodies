class ArrayList
!!!8634498.java!!!	ArrayList(inout array : E [[]])
            a = Objects.requireNonNull(array);
!!!8634626.java!!!	size() : int
            return a.length;
!!!8634754.java!!!	toArray() : Object
            return a.clone();
!!!8634882.java!!!	toArray(inout a : T [[]]) : T
            int size = size();
            if (a.length < size)
                return Arrays.copyOf(this.a, size,
                                     (Class<? extends T[]>) a.getClass());
            System.arraycopy(this.a, 0, a, 0, size);
            if (a.length > size)
                a[size] = null;
            return a;
!!!8635010.java!!!	get(in index : int) : E
            return a[index];
!!!8635138.java!!!	set(in index : int, inout element : E) : E
            E oldValue = a[index];
            a[index] = element;
            return oldValue;
!!!8635266.java!!!	indexOf(inout o : Object) : int
            E[] a = this.a;
            if (o == null) {
                for (int i = 0; i < a.length; i++)
                    if (a[i] == null)
                        return i;
            } else {
                for (int i = 0; i < a.length; i++)
                    if (o.equals(a[i]))
                        return i;
            }
            return -1;
!!!8635394.java!!!	contains(inout o : Object) : boolean
            return indexOf(o) != -1;
!!!8635522.java!!!	spliterator() : Spliterator
            return Spliterators.spliterator(a, Spliterator.ORDERED);
!!!8635650.java!!!	forEach(inout action : Consumer) : void
            Objects.requireNonNull(action);
            for (E e : a) {
                action.accept(e);
            }
!!!8635778.java!!!	replaceAll(inout operator : UnaryOperator) : void
            Objects.requireNonNull(operator);
            E[] a = this.a;
            for (int i = 0; i < a.length; i++) {
                a[i] = operator.apply(a[i]);
            }
!!!8635906.java!!!	sort(inout c : Comparator) : void
            Arrays.sort(a, c);
