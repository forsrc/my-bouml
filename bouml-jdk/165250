format 222
"ref" // jdk1.8::com::sun::org::apache::xml::internal::dtm::ref
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/org/apache/xml/internal/dtm/ref/"
  java_package "com.sun.org.apache.xml.internal.dtm.ref"
  classview 158850 "ref"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 616578 "DTMAxisIteratorBase"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class serves as a default base for implementations of mutable
DTMAxisIterators.
"
      classrelation 1697026 // <realization>
	relation 1697026 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1697026 // <realization>
	  b parent class_ref 590082 // DTMAxisIterator
      end

      attribute 844418 "_last"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The position of the last node within the iteration, as defined by XPath.
Note that this is _not_ the node's handle within the DTM. Also, don't
confuse it with the current (most recently returned) position.

"
      end

      attribute 844546 "_position"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The position of the current node within the iteration, as defined by XPath.
Note that this is _not_ the node's handle within the DTM!

"
      end

      attribute 844674 "_markedNode"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The position of the marked node within the iteration;
a saved itaration state that we may want to come back to.
Note that only one mark is maintained; there is no stack.

"
      end

      attribute 844802 "_startNode"
	protected explicit_type "int"
	init_value " DTMAxisIterator.END"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The handle to the start, or root, of the iteration.
Set this to END to construct an empty iterator.

"
      end

      attribute 844930 "_includeSelf"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " True if the start node should be considered part of the iteration.
False will cause it to be skipped.

"
      end

      attribute 845058 "_isRestartable"
	protected explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " True if this iteration can be restarted. False otherwise (eg, if
we are iterating over a stream that can not be re-scanned, or if
the iterator was produced by cloning another iterator.)

"
      end

      operation 3890434 "getStartNode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@return The root node of the iteration.
"
      end

      operation 3890562 "reset"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return A DTMAxisIterator which has been reset to the start node,
which may or may not be the same as this iterator.
"
      end

      operation 3890690 "includeSelf"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the flag to include the start node in the iteration.


@return This default method returns just returns this DTMAxisIterator,
after setting the flag.
(Returning \"this\" permits C++-style chaining of
method calls into a single expression.)
"
      end

      operation 3890818 "getLast"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the position of the last node within the iteration, as
defined by XPath.  In a forward iterator, I believe this equals the number of nodes which this
iterator will yield. In a reverse iterator, I believe it should return
1 (since the \"last\" is the first produced.)

This may be an expensive operation when called the first time, since
it may have to iterate through a large part of the document to produce
its answer.

@return The number of nodes in this iterator (forward) or 1 (reverse).
"
      end

      operation 3890946 "getPosition"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The position of the current node within the set, as defined by
XPath. Note that this is one-based, not zero-based.
"
      end

      operation 3891074 "isReverse"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if this iterator has a reversed axis, else false
"
      end

      operation 3891202 "cloneIterator"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a deep copy of this iterator. Cloned iterators may not be
restartable. The iterator being cloned may or may not become
non-restartable as a side effect of this operation.

@return a deep copy of this iterator.
"
      end

      operation 3891330 "returnNode"
	protected explicit_return_type "int"
	nparams 1
	  param in name "node" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Do any final cleanup that is required before returning the node that was
passed in, and then return it. The intended use is
<br />
<code>return returnNode(node);</code>

%REVIEW% If we're calling it purely for side effects, should we really
be bothering with a return value? Something like
<br />
<code> accept(node); return node; </code>
<br />
would probably optimize just about as well and avoid questions
about whether what's returned could ever be different from what's
passed in.

@param node Node handle which iteration is about to yield.

@return The node handle passed in.  "
      end

      operation 3891458 "resetPosition"
	protected return_type class_ref 590082 // DTMAxisIterator
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the position to zero. NOTE that this does not change the iteration
state, only the position number associated with that state.

%REVIEW% Document when this would be used?

@return This instance.
"
      end

      operation 3891586 "isDocOrdered"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if all the nodes in the iteration well be returned in document
order.

@return true as a default.
"
      end

      operation 3891714 "getAxis"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the axis being iterated, if it is known.

@return Axis.CHILD, etc., or -1 if the axis is not known or is of multiple
types.
"
      end

      operation 3891842 "setRestartable"
	public explicit_return_type "void"
	nparams 1
	  param inout name "isRestartable" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3891970 "getNodeByPosition"
	public explicit_return_type "int"
	nparams 1
	  param in name "position" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the node at the given position.

@param position The position
@return The node at the given position.
"
      end
    end

    class 619906 "DTMManagerDefault"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The default implementation for the DTMManager.

%REVIEW% There is currently a reentrancy issue, since the finalizer
for XRTreeFrag (which runs in the GC thread) wants to call
DTMManager.release(), and may do so at the same time that the main
transformation thread is accessing the manager. Our current solution is
to make most of the manager's methods <code>synchronized</code>.
Early tests suggest that doing so is not causing a significant
performance hit in Xalan. However, it should be noted that there
is a possible alternative solution: rewrite release() so it merely
posts a request for release onto a threadsafe queue, and explicitly
process that queue on an infrequent basis during main-thread
activity (eg, when getDTM() is invoked). The downside of that solution
would be a greater delay before the DTM's storage is actually released
for reuse.
"
      classrelation 1732354 // <generalisation>
	relation 1732354 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1732354 // <generalisation>
	  b parent class_ref 619266 // DTMManager
      end

      attribute 873218 "DUMPTREE"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "static final boolean JKESS_XNI_EXPERIMENT=true;
 Set this to true if you want a dump of the DTM after creation. 
"
      end

      attribute 873346 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set this to true if you want a basic diagnostics. 
"
      end

      classrelation 1732482 // m_dtms (<unidirectional association>)
	relation 1732482 --->
	  a role_name "m_dtms" multiplicity "[]" init_value " new DTM[256]" protected
	    comment "
Map from DTM identifier numbers to DTM objects that this manager manages.
One DTM may have several prefix numbers, if extended node indexing
is in use; in that case, m_dtm_offsets[] will used to control which
prefix maps to which section of the DTM.

This array grows as necessary; see addDTM().

This array grows as necessary; see addDTM(). Growth is uncommon... but
access needs to be blindingly fast since it's used in node addressing.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1732482 // m_dtms (<unidirectional association>)
	  b parent class_ref 618754 // DTM
      end

      attribute 873474 "m_dtm_offsets"
	package explicit_type "int"
	multiplicity "[]"
	init_value " new int[256]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Map from DTM identifier numbers to offsets. For small DTMs with a
single identifier, this will always be 0. In overflow addressing, where
additional identifiers are allocated to access nodes beyond the range of
a single Node Handle, this table is used to map the handle's node field
into the actual node identifier.

This array grows as necessary; see addDTM().

This array grows as necessary; see addDTM(). Growth is uncommon... but
access needs to be blindingly fast since it's used in node addressing.
(And at the moment, that includes accessing it from DTMDefaultBase,
which is why this is not Protected or Private.)

"
      end

      classrelation 1732610 // m_readerManager (<unidirectional association>)
	relation 1732610 --->
	  a role_name "m_readerManager" init_value " null" protected
	    comment "
The cache for XMLReader objects to be used if the user did not
supply an XMLReader for a SAXSource or supplied a StreamSource.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1732610 // m_readerManager (<unidirectional association>)
	  b parent class_ref 635778 // XMLReaderManager
      end

      classrelation 1732738 // m_defaultHandler (<unidirectional association>)
	relation 1732738 --->
	  a role_name "m_defaultHandler" init_value " new DefaultHandler()" protected
	    comment "
The default implementation of ContentHandler, DTDHandler and ErrorHandler.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1732738 // m_defaultHandler (<unidirectional association>)
	  b parent class_ref 635906 // DefaultHandler
      end

      operation 4057986 "addDTM"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dtm" type class_ref 618754 // DTM
	  param in name "id" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a DTM to the DTM table. This convenience call adds it as the
\"base DTM ID\", with offset 0. The other version of addDTM should
be used if you want to add \"extended\" DTM IDs with nonzero offsets.

@param dtm Should be a valid reference to a DTM.
@param id Integer DTM ID to be bound to this DTM
"
      end

      operation 4058114 "addDTM"
	public explicit_return_type "void"
	nparams 3
	  param inout name "dtm" type class_ref 618754 // DTM
	  param in name "id" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a DTM to the DTM table.

@param dtm Should be a valid reference to a DTM.
@param id Integer DTM ID to be bound to this DTM.
@param offset Integer addressing offset. The internal DTM Node ID is
obtained by adding this offset to the node-number field of the
public DTM Handle. For the first DTM ID accessing each DTM, this is 0;
for overflow addressing it will be a multiple of 1<<IDENT_DTM_NODE_BITS.
"
      end

      operation 4058242 "getFirstFreeDTMID"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the first free DTM ID available. %OPT% Linear search is inefficient!
"
      end

      classrelation 1732866 // m_expandedNameTable (<unidirectional association>)
	relation 1732866 --->
	  a role_name "m_expandedNameTable" init_value "
    new ExpandedNameTable()" private
	    comment "
The default table for exandedNameID lookups.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1732866 // m_expandedNameTable (<unidirectional association>)
	  b parent class_ref 627074 // ExpandedNameTable
      end

      operation 4058370 "DTMManagerDefault"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor DTMManagerDefault

"
      end

      operation 4058498 "getDTM"
	public return_type class_ref 618754 // DTM
	nparams 5
	  param inout name "source" type class_ref 627202 // Source
	  param inout name "unique" explicit_type "boolean"
	  param inout name "whiteSpaceFilter" type class_ref 620162 // DTMWSFilter
	  param inout name "incremental" explicit_type "boolean"
	  param inout name "doIndexing" explicit_type "boolean"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an instance of a DTM, loaded with the content from the
specified source.  If the unique flag is true, a new instance will
always be returned.  Otherwise it is up to the DTMManager to return a
new instance or an instance that it already created and may be being used
by someone else.

A bit of magic in this implementation: If the source is null, unique is true,
and incremental and doIndexing are both false, we return an instance of
SAX2RTFDTM, which see.

(I think more parameters will need to be added for error handling, and entity
resolution, and more explicit control of the RTF situation).

@param source the specification of the source object.
@param unique true if the returned DTM must be unique, probably because it
is going to be mutated.
@param whiteSpaceFilter Enables filtering of whitespace nodes, and may
                        be null.
@param incremental true if the DTM should be built incrementally, if
                   possible.
@param doIndexing true if the caller considers it worth it to use
                  indexing schemes.

@return a non-null DTM reference.
"
      end

      operation 4058626 "getDTMHandleFromNode"
	public explicit_return_type "int"
	nparams 1
	  param inout name "node" type class_ref 317570 // Node
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a W3C DOM node, try and return a DTM handle.
Note: calling this may be non-optimal, and there is no guarantee that
the node will be found in any particular DTM.

@param node Non-null reference to a DOM node.

@return a valid DTM handle.
"
      end

      operation 4058754 "getXMLReader"
	public return_type class_ref 606466 // XMLReader
	nparams 1
	  param inout name "inputSource" type class_ref 627202 // Source
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method returns the SAX2 parser to use with the InputSource
obtained from this URI.
It may return null if any SAX2-conformant XML parser can be used,
or if getInputSource() will also return null. The parser must
be free for use (i.e., not currently in use for another parse().
After use of the parser is completed, the releaseXMLReader(XMLReader)
must be called.

@param inputSource The value returned from the URIResolver.
@return  a SAX2 XMLReader to use to resolve the inputSource argument.

@return non-null XMLReader reference ready to parse.
"
      end

      operation 4058882 "releaseXMLReader"
	public explicit_return_type "void"
	nparams 1
	  param inout name "reader" type class_ref 606466 // XMLReader
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates that the XMLReader object is no longer in use for the transform.

Note that the getXMLReader method may return an XMLReader that was
specified on the SAXSource object by the application code.  Such a
reader should still be passed to releaseXMLReader, but the reader manager
will only re-use XMLReaders that it created.

@param reader The XMLReader to be released.
"
      end

      operation 4059010 "getDTM"
	public return_type class_ref 618754 // DTM
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the DTM object containing a representation of this node.

@param nodeHandle DTM Handle indicating which node to retrieve

@return a reference to the DTM object containing this node.
"
      end

      operation 4059138 "getDTMIdentity"
	public explicit_return_type "int"
	nparams 1
	  param inout name "dtm" type class_ref 618754 // DTM
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a DTM, find the ID number in the DTM tables which addresses
the start of the document. If overflow addressing is in use, other
DTM IDs may also be assigned to this DTM.

@param dtm The DTM which (hopefully) contains this node.

@return The DTM ID (as the high bits of a NodeHandle, not as our
internal index), or -1 if the DTM doesn't belong to this manager.
"
      end

      operation 4059266 "release"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "dtm" type class_ref 618754 // DTM
	  param inout name "shouldHardDelete" explicit_type "boolean"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Release the DTMManager's reference(s) to a DTM, making it unmanaged.
This is typically done as part of returning the DTM to the heap after
we're done with it.

@param dtm the DTM to be released.

@param shouldHardDelete If false, this call is a suggestion rather than an
order, and we may not actually release the DTM. This is intended to
support intelligent caching of documents... which is not implemented
in this version of the DTM manager.

@return true if the DTM was released, false if shouldHardDelete was set
and we decided not to.
"
      end

      operation 4059394 "createDocumentFragment"
	public return_type class_ref 618754 // DTM
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method createDocumentFragment


NEEDSDOC (createDocumentFragment) @return
"
      end

      operation 4059522 "createDTMIterator"
	public return_type class_ref 635522 // DTMIterator
	nparams 3
	  param in name "whatToShow" explicit_type "int"
	  param inout name "filter" type class_ref 623362 // DTMFilter
	  param inout name "entityReferenceExpansion" explicit_type "boolean"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "NEEDSDOC Method createDTMIterator


NEEDSDOC @param whatToShow
NEEDSDOC @param filter
NEEDSDOC @param entityReferenceExpansion

NEEDSDOC (createDTMIterator) @return
"
      end

      operation 4059650 "createDTMIterator"
	public return_type class_ref 635522 // DTMIterator
	nparams 2
	  param inout name "xpathString" type class_ref 128130 // String
	  param inout name "presolver" type class_ref 635650 // PrefixResolver
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "NEEDSDOC Method createDTMIterator


NEEDSDOC @param xpathString
NEEDSDOC @param presolver

NEEDSDOC (createDTMIterator) @return
"
      end

      operation 4059778 "createDTMIterator"
	public return_type class_ref 635522 // DTMIterator
	nparams 1
	  param in name "node" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "NEEDSDOC Method createDTMIterator


NEEDSDOC @param node

NEEDSDOC (createDTMIterator) @return
"
      end

      operation 4059906 "createDTMIterator"
	public return_type class_ref 635522 // DTMIterator
	nparams 2
	  param inout name "xpathCompiler" type class_ref 129538 // Object
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "NEEDSDOC Method createDTMIterator


NEEDSDOC @param xpathCompiler
NEEDSDOC @param pos

NEEDSDOC (createDTMIterator) @return
"
      end

      operation 4060034 "getExpandedNameTable"
	public return_type class_ref 627074 // ExpandedNameTable
	nparams 1
	  param inout name "dtm" type class_ref 618754 // DTM
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "return the expanded name table.

NEEDSDOC @param dtm

NEEDSDOC ($objectName$) @return
"
      end
    end

    class 626306 "DTMDefaultBaseIterators"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class implements the traversers for DTMDefaultBase.
"
      classrelation 1721090 // <generalisation>
	relation 1721090 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1721090 // <generalisation>
	  b parent class_ref 626434 // DTMDefaultBaseTraversers
      end

      operation 4027138 "DTMDefaultBaseIterators"
	public explicit_return_type ""
	nparams 6
	  param inout name "mgr" type class_ref 619266 // DTMManager
	  param inout name "source" type class_ref 627202 // Source
	  param in name "dtmIdentity" explicit_type "int"
	  param inout name "whiteSpaceFilter" type class_ref 620162 // DTMWSFilter
	  param inout name "xstringfactory" type class_ref 626946 // XMLStringFactory
	  param inout name "doIndexing" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a DTMDefaultBaseTraversers object from a DOM node.

@param mgr The DTMManager who owns this DTM.
@param source The object that is used to specify the construction source.
@param dtmIdentity The DTM identity ID for this DTM.
@param whiteSpaceFilter The white space filter for this DTM, which may
                        be null.
@param xstringfactory The factory to use for creating XMLStrings.
@param doIndexing true if the caller considers it worth it to use
                  indexing schemes.
"
      end

      operation 4027266 "DTMDefaultBaseIterators"
	public explicit_return_type ""
	nparams 9
	  param inout name "mgr" type class_ref 619266 // DTMManager
	  param inout name "source" type class_ref 627202 // Source
	  param in name "dtmIdentity" explicit_type "int"
	  param inout name "whiteSpaceFilter" type class_ref 620162 // DTMWSFilter
	  param inout name "xstringfactory" type class_ref 626946 // XMLStringFactory
	  param inout name "doIndexing" explicit_type "boolean"
	  param in name "blocksize" explicit_type "int"
	  param inout name "usePrevsib" explicit_type "boolean"
	  param inout name "newNameTable" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a DTMDefaultBaseTraversers object from a DOM node.

@param mgr The DTMManager who owns this DTM.
@param source The object that is used to specify the construction source.
@param dtmIdentity The DTM identity ID for this DTM.
@param whiteSpaceFilter The white space filter for this DTM, which may
                        be null.
@param xstringfactory The factory to use for creating XMLStrings.
@param doIndexing true if the caller considers it worth it to use
                  indexing schemes.
@param blocksize The block size of the DTM.
@param usePrevsib true if we want to build the previous sibling node array.
@param newNameTable true if we want to use a new ExpandedNameTable for this DTM.
"
      end

      operation 4027394 "getTypedAxisIterator"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 2
	  param in name "axis" explicit_type "int"
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an iterator that can navigate over an XPath Axis, predicated by
the extended type ID.
Returns an iterator that must be initialized
with a start node (using iterator.setStartNode()).

@param axis One of Axes.ANCESTORORSELF, etc.
@param type An extended type ID.

@return A DTMAxisIterator, or null if the given axis isn't supported.
"
      end

      operation 4027522 "getAxisIterator"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 1
	  param in name "axis" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a shortcut to the iterators that implement the
XPath axes.
Returns a bare-bones iterator that must be initialized
with a start node (using iterator.setStartNode()).

@param axis One of Axes.ANCESTORORSELF, etc.

@return A DTMAxisIterator, or null if the given axis isn't supported.
"
      end

      class 630018 "InternalAxisIteratorBase"
	abstract visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1721218 // <generalisation>
	  relation 1721218 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1721218 // <generalisation>
	    b parent class_ref 616578 // DTMAxisIteratorBase
	end

	attribute 864514 "_currentNode"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " %REVIEW% We could opt to share _nodeType and setNodeType() as
 well, and simply ignore them in iterators which don't use them.
 But Scott's worried about the overhead involved in cloning
 these, and wants them to have as few fields as possible. Note
 that we can't create a TypedInternalAxisIteratorBase because
 those are often based on the untyped versions and Java doesn't
 support multiple inheritance. <sigh/>

Current iteration location. Usually this is the last location
returned (starting point for the next() search); for single-node
iterators it may instead be initialized to point to that single node.

"
	end

	operation 4027650 "setMark"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Remembers the current node for the next call to gotoMark().

%REVIEW% Should this save _position too?
"
	end

	operation 4027778 "gotoMark"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Restores the current node remembered by setMark().

%REVEIW% Should this restore _position too?
"
	end
      end

      class 630146 "ChildrenIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1721346 // <generalisation>
	  relation 1721346 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1721346 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	operation 4027906 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Setting start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

If the iterator is not restartable, this has no effect.
%REVIEW% Should it return/throw something in that case,
or set current node to END, to indicate request-not-honored?

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4028034 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END if no more
are available.
"
	end
      end

      class 630274 "ParentIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1721474 // <generalisation>
	  relation 1721474 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1721474 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	attribute 864642 "_nodeType"
	  private explicit_type "int"
	  init_value " -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID that was requested. 
"
	end

	operation 4028162 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4028290 "setNodeType"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "type" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set the node type of the parent that we're looking for.
Note that this does _not_ mean \"find the nearest ancestor of
this type\", but \"yield the parent if it is of this type\".


@param type extended type ID.

@return ParentIterator configured with the type filter set.
"
	end

	operation 4028418 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration. In this case, we return
only the immediate parent, _if_ it matches the requested nodeType.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 630402 "TypedChildrenIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1721602 // <generalisation>
	  relation 1721602 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1721602 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	attribute 864770 "_nodeType"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID that was requested. 
"
	end

	operation 4028546 "TypedChildrenIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "nodeType" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor TypedChildrenIterator


@param nodeType The extended type ID being requested.
"
	end

	operation 4028674 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4028802 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 630530 "NamespaceChildrenIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1721730 // <generalisation>
	  relation 1721730 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1721730 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	attribute 864898 "_nsType"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID being requested. 
"
	end

	operation 4028930 "NamespaceChildrenIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "type" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor NamespaceChildrenIterator


@param type The extended type ID being requested.
"
	end

	operation 4029058 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4029186 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 630658 "NamespaceIterator"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1721858 // <generalisation>
	  relation 1721858 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1721858 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	operation 4029314 "NamespaceIterator"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor NamespaceAttributeIterator
"
	end

	operation 4029442 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4029570 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 630786 "TypedNamespaceIterator"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1721986 // <generalisation>
	  relation 1721986 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1721986 // <generalisation>
	    b parent class_ref 630658 // NamespaceIterator
	end

	attribute 865026 "_nodeType"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID that was requested. 
"
	end

	operation 4029698 "TypedNamespaceIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "nodeType" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor TypedNamespaceIterator


@param nodeType The extended type ID being requested.
"
	end

	operation 4029826 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 630914 "RootIterator"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1722114 // <generalisation>
	  relation 1722114 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1722114 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	operation 4029954 "RootIterator"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor RootIterator
"
	end

	operation 4030082 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4030210 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 631042 "TypedRootIterator"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1722242 // <generalisation>
	  relation 1722242 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1722242 // <generalisation>
	    b parent class_ref 630914 // RootIterator
	end

	attribute 865154 "_nodeType"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID that was requested. 
"
	end

	operation 4030338 "TypedRootIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "nodeType" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor TypedRootIterator

@param nodeType The extended type ID being requested.
"
	end

	operation 4030466 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 631170 "NamespaceAttributeIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1722370 // <generalisation>
	  relation 1722370 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1722370 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	attribute 865282 "_nsType"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID being requested. 
"
	end

	operation 4030594 "NamespaceAttributeIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "nsType" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor NamespaceAttributeIterator


@param nsType The extended type ID being requested.
"
	end

	operation 4030722 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4030850 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 631298 "FollowingSiblingIterator"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1722498 // <generalisation>
	  relation 1722498 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1722498 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	operation 4030978 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4031106 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 631426 "TypedFollowingSiblingIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1722626 // <generalisation>
	  relation 1722626 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1722626 // <generalisation>
	    b parent class_ref 631298 // FollowingSiblingIterator
	end

	attribute 865410 "_nodeType"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID that was requested. 
"
	end

	operation 4031234 "TypedFollowingSiblingIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "type" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor TypedFollowingSiblingIterator


@param type The extended type ID being requested.
"
	end

	operation 4031362 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 631554 "AttributeIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1722754 // <generalisation>
	  relation 1722754 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1722754 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	operation 4031490 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " assumes caller will pass element nodes

Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4031618 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 631682 "TypedAttributeIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1722882 // <generalisation>
	  relation 1722882 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1722882 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	attribute 865538 "_nodeType"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID that was requested. 
"
	end

	operation 4031746 "TypedAttributeIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "nodeType" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor TypedAttributeIterator


@param nodeType The extended type ID that is requested.
"
	end

	operation 4031874 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " assumes caller will pass element nodes

Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4032002 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 631810 "PrecedingSiblingIterator"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1723010 // <generalisation>
	  relation 1723010 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1723010 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	attribute 865666 "_startNodeID"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The node identity of _startNode for this iterator

"
	end

	operation 4032130 "isReverse"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "True if this iterator has a reversed axis.

@return true.
"
	end

	operation 4032258 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4032386 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 631938 "TypedPrecedingSiblingIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1723138 // <generalisation>
	  relation 1723138 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1723138 // <generalisation>
	    b parent class_ref 631810 // PrecedingSiblingIterator
	end

	attribute 865794 "_nodeType"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID that was requested. 
"
	end

	operation 4032514 "TypedPrecedingSiblingIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "type" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor TypedPrecedingSiblingIterator


@param type The extended type ID being requested.
"
	end

	operation 4032642 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 632066 "PrecedingIterator"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1723266 // <generalisation>
	  relation 1723266 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1723266 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	attribute 865922 "_maxAncestors"
	  const_attribute private explicit_type "int"
	  init_value " 8"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The max ancestors, but it can grow... 
"
	end

	attribute 866050 "_stack"
	  protected explicit_type "int"
	  multiplicity "[]"
	  init_value " new int[_maxAncestors]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The stack of start node + ancestors up to the root of the tree,
 which we must avoid.

"
	end

	attribute 866178 "_sp"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " (not sure yet... -sb) 
"
	end

	attribute 866306 "_oldsp"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " (not sure yet... -sb) 
"
	end

	attribute 866434 "_markedsp"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 866562 "_markedNode"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 866690 "_markedDescendant"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 4032770 "isReverse"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " _currentNode precedes candidates.  This is the identity, not the handle! 

True if this iterator has a reversed axis.

@return true since this iterator is a reversed axis.
"
	end

	operation 4032898 "cloneIterator"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a deep copy of this iterator.   The cloned iterator is not reset.

@return a deep copy of this iterator.
"
	end

	operation 4033026 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4033154 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end

	operation 4033282 "reset"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " redefine DTMAxisIteratorBase's reset

Resets the iterator to the last start node.

@return A DTMAxisIterator, which may or may not be the same as this
        iterator.
"
	end

	operation 4033410 "setMark"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4033538 "gotoMark"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 632194 "TypedPrecedingIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1723394 // <generalisation>
	  relation 1723394 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1723394 // <generalisation>
	    b parent class_ref 632066 // PrecedingIterator
	end

	attribute 866818 "_nodeType"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID that was requested. 
"
	end

	operation 4033666 "TypedPrecedingIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "type" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor TypedPrecedingIterator


@param type The extended type ID being requested.
"
	end

	operation 4033794 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 632322 "FollowingIterator"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1723522 // <generalisation>
	  relation 1723522 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1723522 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	classrelation 1723650 // m_traverser (<unidirectional association>)
	  relation 1723650 --->
	    a role_name "m_traverser" package
	      comment " easier for now"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1723650 // m_traverser (<unidirectional association>)
	    b parent class_ref 618882 // DTMAxisTraverser
	end

	operation 4033922 "FollowingIterator"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4034050 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4034178 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 632450 "TypedFollowingIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1723778 // <generalisation>
	  relation 1723778 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1723778 // <generalisation>
	    b parent class_ref 632322 // FollowingIterator
	end

	attribute 866946 "_nodeType"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID that was requested. 
"
	end

	operation 4034306 "TypedFollowingIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "type" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor TypedFollowingIterator


@param type The extended type ID being requested.
"
	end

	operation 4034434 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 632578 "AncestorIterator"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1723906 // <generalisation>
	  relation 1723906 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1723906 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	classrelation 1724034 // m_ancestors (<unidirectional association>)
	  relation 1724034 --->
	    a role_name "m_ancestors" init_value "
         new com.sun.org.apache.xml.internal.utils.NodeVector()" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1724034 // m_ancestors (<unidirectional association>)
	    b parent class_ref 632706 // NodeVector
	end

	attribute 867074 "m_ancestorsPos"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 867202 "m_markedPos"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 867330 "m_realStartNode"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The real start node for this axes, since _startNode will be adjusted. 
"
	end

	operation 4034562 "getStartNode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@return The root node of the iteration.
"
	end

	operation 4034690 "isReverse"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "True if this iterator has a reversed axis.

@return true since this iterator is a reversed axis.
"
	end

	operation 4034818 "cloneIterator"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a deep copy of this iterator.  The cloned iterator is not reset.

@return a deep copy of this iterator.
"
	end

	operation 4034946 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4035074 "reset"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resets the iterator to the last start node.

@return A DTMAxisIterator, which may or may not be the same as this
        iterator.
"
	end

	operation 4035202 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end

	operation 4035330 "setMark"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4035458 "gotoMark"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 632834 "TypedAncestorIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1724162 // <generalisation>
	  relation 1724162 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1724162 // <generalisation>
	    b parent class_ref 632578 // AncestorIterator
	end

	attribute 867458 "_nodeType"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID that was requested. 
"
	end

	operation 4035586 "TypedAncestorIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "type" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor TypedAncestorIterator


@param type The extended type ID being requested.
"
	end

	operation 4035714 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end
      end

      class 632962 "DescendantIterator"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1724290 // <generalisation>
	  relation 1724290 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1724290 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	operation 4035842 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4035970 "isDescendant"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "identity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tell if this node identity is a descendant.  Assumes that
the node info for the element has already been obtained.

This one-sided test works only if the parent has been
previously tested and is known to be a descendent. It fails if
the parent is the _startNode's next sibling, or indeed any node
that follows _startNode in document order.  That may suffice
for this iterator, but it's not really an isDescendent() test.
%REVIEW% rename?

@param identity The index number of the node in question.
@return true if the index is a descendant of _startNode.
"
	end

	operation 4036098 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end

	operation 4036226 "reset"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reset.

"
	end
      end

      class 633090 "TypedDescendantIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1724418 // <generalisation>
	  relation 1724418 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1724418 // <generalisation>
	    b parent class_ref 632962 // DescendantIterator
	end

	attribute 867586 "_nodeType"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID that was requested. 
"
	end

	operation 4036354 "TypedDescendantIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "nodeType" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor TypedDescendantIterator


@param nodeType Extended type ID being requested.
"
	end

	operation 4036482 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 633218 "NthDescendantIterator"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1724546 // <generalisation>
	  relation 1724546 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1724546 // <generalisation>
	    b parent class_ref 632962 // DescendantIterator
	end

	attribute 867714 "_pos"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The current nth position. 
"
	end

	operation 4036610 "NthDescendantIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "pos" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor NthDescendantIterator


@param pos The nth position being requested.
"
	end

	operation 4036738 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 633346 "SingletonIterator"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1724674 // <generalisation>
	  relation 1724674 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1724674 // <generalisation>
	    b parent class_ref 630018 // InternalAxisIteratorBase
	end

	attribute 867842 "_isConstant"
	  private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " (not sure yet what this is.  -sb)  (sc & sb remove final to compile in JDK 1.1.8) 
"
	end

	operation 4036866 "SingletonIterator"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor SingletonIterator

"
	end

	operation 4036994 "SingletonIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor SingletonIterator


@param node The node handle to return.
"
	end

	operation 4037122 "SingletonIterator"
	  public explicit_return_type ""
	  nparams 2
	    param in name "node" explicit_type "int"
	    param inout name "constant" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor SingletonIterator


@param node the node handle to return.
@param constant (Not sure what this is yet.  -sb)
"
	end

	operation 4037250 "setStartNode"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 1
	    param in name "node" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
	end

	operation 4037378 "reset"
	  public return_type class_ref 590082 // DTMAxisIterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resets the iterator to the last start node.

@return A DTMAxisIterator, which may or may not be the same as this
        iterator.
"
	end

	operation 4037506 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end

      class 633474 "TypedSingletonIterator"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1724802 // <generalisation>
	  relation 1724802 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1724802 // <generalisation>
	    b parent class_ref 633346 // SingletonIterator
	end

	attribute 867970 "_nodeType"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The extended type ID that was requested. 
"
	end

	operation 4037634 "TypedSingletonIterator"
	  public explicit_return_type ""
	  nparams 1
	    param in name "nodeType" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor TypedSingletonIterator


@param nodeType The extended type ID being requested.
"
	end

	operation 4037762 "next"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
	end
      end
    end

    class 626434 "DTMDefaultBaseTraversers"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class implements the traversers for DTMDefaultBase.

PLEASE NOTE that the public interface for all traversers should be
in terms of DTM Node Handles... but they may use the internal node
identity indices within their logic, for efficiency's sake. Be very
careful to avoid confusing these when maintaining this code.
"
      classrelation 1718274 // <generalisation>
	relation 1718274 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1718274 // <generalisation>
	  b parent class_ref 626562 // DTMDefaultBase
      end

      operation 4017794 "DTMDefaultBaseTraversers"
	public explicit_return_type ""
	nparams 6
	  param inout name "mgr" type class_ref 619266 // DTMManager
	  param inout name "source" type class_ref 627202 // Source
	  param in name "dtmIdentity" explicit_type "int"
	  param inout name "whiteSpaceFilter" type class_ref 620162 // DTMWSFilter
	  param inout name "xstringfactory" type class_ref 626946 // XMLStringFactory
	  param inout name "doIndexing" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a DTMDefaultBaseTraversers object from a DOM node.

@param mgr The DTMManager who owns this DTM.
@param source The object that is used to specify the construction source.
@param dtmIdentity The DTM identity ID for this DTM.
@param whiteSpaceFilter The white space filter for this DTM, which may
                        be null.
@param xstringfactory The factory to use for creating XMLStrings.
@param doIndexing true if the caller considers it worth it to use
                  indexing schemes.
"
      end

      operation 4017922 "DTMDefaultBaseTraversers"
	public explicit_return_type ""
	nparams 9
	  param inout name "mgr" type class_ref 619266 // DTMManager
	  param inout name "source" type class_ref 627202 // Source
	  param in name "dtmIdentity" explicit_type "int"
	  param inout name "whiteSpaceFilter" type class_ref 620162 // DTMWSFilter
	  param inout name "xstringfactory" type class_ref 626946 // XMLStringFactory
	  param inout name "doIndexing" explicit_type "boolean"
	  param in name "blocksize" explicit_type "int"
	  param inout name "usePrevsib" explicit_type "boolean"
	  param inout name "newNameTable" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a DTMDefaultBaseTraversers object from a DOM node.

@param mgr The DTMManager who owns this DTM.
@param source The object that is used to specify the construction source.
@param dtmIdentity The DTM identity ID for this DTM.
@param whiteSpaceFilter The white space filter for this DTM, which may
                        be null.
@param xstringfactory The factory to use for creating XMLStrings.
@param doIndexing true if the caller considers it worth it to use
                  indexing schemes.
@param blocksize The block size of the DTM.
@param usePrevsib true if we want to build the previous sibling node array.
@param newNameTable true if we want to use a new ExpandedNameTable for this DTM.
"
      end

      operation 4018050 "getAxisTraverser"
	public return_type class_ref 618882 // DTMAxisTraverser
	nparams 1
	  param in name "axis" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This returns a stateless \"traverser\", that can navigate
over an XPath axis, though perhaps not in document order.

@param axis One of Axes.ANCESTORORSELF, etc.

@return A DTMAxisTraverser, or null if the given axis isn't supported.
"
      end

      class 627330 "AncestorTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1718402 // <generalisation>
	  relation 1718402 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1718402 // <generalisation>
	    b parent class_ref 618882 // DTMAxisTraverser
	end

	operation 4018690 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node if this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end

	operation 4018818 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 627458 "AncestorOrSelfTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1718530 // <generalisation>
	  relation 1718530 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1718530 // <generalisation>
	    b parent class_ref 627330 // AncestorTraverser
	end

	operation 4018946 "first"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "context" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  To see if
the self node should be processed, use this function.

@param context The context node of this traversal.

@return the first node in the traversal.
"
	end

	operation 4019074 "first"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  To see if
the self node should be processed, use this function.  If the context
node does not match the expanded type ID, this function will return
false.

@param context The context node of this traversal.
@param expandedTypeID The expanded type ID that must match.

@return the first node in the traversal.
"
	end
      end

      class 627586 "AttributeTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1718658 // <generalisation>
	  relation 1718658 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1718658 // <generalisation>
	    b parent class_ref 618882 // DTMAxisTraverser
	end

	operation 4019202 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end

	operation 4019330 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 627714 "ChildTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1718786 // <generalisation>
	  relation 1718786 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1718786 // <generalisation>
	    b parent class_ref 618882 // DTMAxisTraverser
	end

	operation 4019458 "getNextIndexed"
	  protected explicit_return_type "int"
	  nparams 3
	    param in name "axisRoot" explicit_type "int"
	    param in name "nextPotential" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next indexed node that matches the expanded type ID.  Before
calling this function, one should first call
{@link #isIndexed(int) isIndexed} to make sure that the index can
contain nodes that match the given expanded type ID.

@param axisRoot The root identity of the axis.
@param nextPotential The node found must match or occur after this node.
@param expandedTypeID The expanded type ID for the request.

@return The node ID or NULL if not found.
"
	end

	operation 4019586 "first"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "context" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  So to traverse
an axis, the first function must be used to get the first node.

<p>This method needs to be overloaded only by those axis that process
the self node. <\\p>

@param context The context node of this traversal. This is the point
that the traversal starts from.
@return the first node in the traversal.
"
	end

	operation 4019714 "first"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  So to traverse
an axis, the first function must be used to get the first node.

<p>This method needs to be overloaded only by those axis that process
the self node. <\\p>

@param context The context node of this traversal. This is the point
of origin for the traversal -- its \"root node\" or starting point.
@param expandedTypeID The expanded type ID that must match.

@return the first node in the traversal.
"
	end

	operation 4019842 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end

	operation 4019970 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 627842 "IndexedDTMAxisTraverser"
	abstract visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1718914 // <generalisation>
	  relation 1718914 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1718914 // <generalisation>
	    b parent class_ref 618882 // DTMAxisTraverser
	end

	operation 4020098 "isIndexed"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tell if the indexing is on and the given expanded type ID matches
what is in the indexes.  Derived classes should call this before
calling {@link #getNextIndexed(int, int, int) getNextIndexed} method.

@param expandedTypeID The expanded type ID being requested.

@return true if it is OK to call the
        {@link #getNextIndexed(int, int, int) getNextIndexed} method.
"
	end

	operation 4020226 "isAfterAxis"
	  abstract protected explicit_return_type "boolean"
	  nparams 2
	    param in name "axisRoot" explicit_type "int"
	    param in name "identity" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tell if a node is outside the axis being traversed.  This method must be
implemented by derived classes, and must be robust enough to handle any
node that occurs after the axis root.

@param axisRoot The root identity of the axis.
@param identity The node in question.

@return true if the given node falls outside the axis being traversed.
"
	end

	operation 4020354 "axisHasBeenProcessed"
	  abstract protected explicit_return_type "boolean"
	  nparams 1
	    param in name "axisRoot" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tell if the axis has been fully processed to tell if a the wait for
an arriving node should terminate.  This method must be implemented
be a derived class.

@param axisRoot The root identity of the axis.

@return true if the axis has been fully processed.
"
	end

	operation 4020482 "getNextIndexed"
	  protected explicit_return_type "int"
	  nparams 3
	    param in name "axisRoot" explicit_type "int"
	    param in name "nextPotential" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the next indexed node that matches the expanded type ID.  Before
calling this function, one should first call
{@link #isIndexed(int) isIndexed} to make sure that the index can
contain nodes that match the given expanded type ID.

@param axisRoot The root identity of the axis.
@param nextPotential The node found must match or occur after this node.
@param expandedTypeID The expanded type ID for the request.

@return The node ID or NULL if not found.
"
	end
      end

      class 627970 "DescendantTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1719042 // <generalisation>
	  relation 1719042 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1719042 // <generalisation>
	    b parent class_ref 627842 // IndexedDTMAxisTraverser
	end

	operation 4020610 "getFirstPotential"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "identity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the first potential identity that can be returned.  This should
be overridded by classes that need to return the self node.

@param identity The node identity of the root context of the traversal.

@return The first potential node that can be in the traversal.
"
	end

	operation 4020738 "axisHasBeenProcessed"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "axisRoot" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tell if the axis has been fully processed to tell if a the wait for
an arriving node should terminate.

@param axisRoot The root identity of the axis.

@return true if the axis has been fully processed.
"
	end

	operation 4020866 "getSubtreeRoot"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "handle" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the subtree root identity from the handle that was passed in by
the caller.  Derived classes may override this to change the root
context of the traversal.

@param handle handle to the root context.
@return identity of the root of the subtree.
"
	end

	operation 4020994 "isDescendant"
	  protected explicit_return_type "boolean"
	  nparams 2
	    param in name "subtreeRootIdentity" explicit_type "int"
	    param in name "identity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tell if this node identity is a descendant.  Assumes that
the node info for the element has already been obtained.

%REVIEW% This is really parentFollowsRootInDocumentOrder ...
which fails if the parent starts after the root ends.
May be sufficient for this class's logic, but misleadingly named!

@param subtreeRootIdentity The root context of the subtree in question.
@param identity The index number of the node in question.
@return true if the index is a descendant of _startNode.
"
	end

	operation 4021122 "isAfterAxis"
	  protected explicit_return_type "boolean"
	  nparams 2
	    param in name "axisRoot" explicit_type "int"
	    param in name "identity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tell if a node is outside the axis being traversed.  This method must be
implemented by derived classes, and must be robust enough to handle any
node that occurs after the axis root.

@param axisRoot The root identity of the axis.
@param identity The node in question.

@return true if the given node falls outside the axis being traversed.
"
	end

	operation 4021250 "first"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  So to traverse
an axis, the first function must be used to get the first node.

<p>This method needs to be overloaded only by those axis that process
the self node. <\\p>

@param context The context node of this traversal. This is the point
of origin for the traversal -- its \"root node\" or starting point.
@param expandedTypeID The expanded type ID that must match.

@return the first node in the traversal.
"
	end

	operation 4021378 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end

	operation 4021506 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 628098 "DescendantOrSelfTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1719170 // <generalisation>
	  relation 1719170 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1719170 // <generalisation>
	    b parent class_ref 627970 // DescendantTraverser
	end

	operation 4021634 "getFirstPotential"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "identity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the first potential identity that can be returned, which is the
axis context, in this case.

@param identity The node identity of the root context of the traversal.

@return The axis context.
"
	end

	operation 4021762 "first"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "context" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  To see if
the self node should be processed, use this function.

@param context The context node of this traversal.

@return the first node in the traversal.
"
	end
      end

      class 628226 "AllFromNodeTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1719298 // <generalisation>
	  relation 1719298 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1719298 // <generalisation>
	    b parent class_ref 628098 // DescendantOrSelfTraverser
	end

	operation 4021890 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 628354 "FollowingTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1719426 // <generalisation>
	  relation 1719426 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1719426 // <generalisation>
	    b parent class_ref 627970 // DescendantTraverser
	end

	operation 4022018 "first"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "context" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the first of the following.

@param context The context node of this traversal. This is the point
that the traversal starts from.
@return the first node in the traversal.
"
	end

	operation 4022146 "first"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the first of the following.

@param context The context node of this traversal. This is the point
of origin for the traversal -- its \"root node\" or starting point.
@param expandedTypeID The expanded type ID that must match.

@return the first node in the traversal.
"
	end

	operation 4022274 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end

	operation 4022402 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 628482 "FollowingSiblingTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1719554 // <generalisation>
	  relation 1719554 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1719554 // <generalisation>
	    b parent class_ref 618882 // DTMAxisTraverser
	end

	operation 4022530 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end

	operation 4022658 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 628610 "NamespaceDeclsTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1719682 // <generalisation>
	  relation 1719682 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1719682 // <generalisation>
	    b parent class_ref 618882 // DTMAxisTraverser
	end

	operation 4022786 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end

	operation 4022914 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 628738 "NamespaceTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1719810 // <generalisation>
	  relation 1719810 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1719810 // <generalisation>
	    b parent class_ref 618882 // DTMAxisTraverser
	end

	operation 4023042 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end

	operation 4023170 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 628866 "ParentTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1719938 // <generalisation>
	  relation 1719938 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1719938 // <generalisation>
	    b parent class_ref 618882 // DTMAxisTraverser
	end

	operation 4023298 "first"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "context" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  So to traverse
an axis, the first function must be used to get the first node.

<p>This method needs to be overloaded only by those axis that process
the self node. <\\p>

@param context The context node of this traversal. This is the point
that the traversal starts from.
@return the first node in the traversal.
"
	end

	operation 4023426 "first"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  So to traverse
an axis, the first function must be used to get the first node.

<p>This method needs to be overloaded only by those axis that process
the self node. <\\p>

@param context The context node of this traversal. This is the point
of origin for the traversal -- its \"root node\" or starting point.
@param expandedTypeID The expanded type ID that must match.

@return the first node in the traversal.
"
	end

	operation 4023554 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end

	operation 4023682 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 628994 "PrecedingTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1720066 // <generalisation>
	  relation 1720066 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1720066 // <generalisation>
	    b parent class_ref 618882 // DTMAxisTraverser
	end

	operation 4023810 "isAncestor"
	  protected explicit_return_type "boolean"
	  nparams 2
	    param in name "contextIdent" explicit_type "int"
	    param in name "currentIdent" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tell if the current identity is an ancestor of the context identity.
This is an expensive operation, made worse by the stateless traversal.
But the preceding axis is used fairly infrequently.

@param contextIdent The context node of the axis traversal.
@param currentIdent The node in question.
@return true if the currentIdent node is an ancestor of contextIdent.
"
	end

	operation 4023938 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end

	operation 4024066 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 629122 "PrecedingAndAncestorTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1720194 // <generalisation>
	  relation 1720194 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1720194 // <generalisation>
	    b parent class_ref 618882 // DTMAxisTraverser
	end

	operation 4024194 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end

	operation 4024322 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 629250 "PrecedingSiblingTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1720322 // <generalisation>
	  relation 1720322 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1720322 // <generalisation>
	    b parent class_ref 618882 // DTMAxisTraverser
	end

	operation 4024450 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end

	operation 4024578 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 629378 "SelfTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1720450 // <generalisation>
	  relation 1720450 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1720450 // <generalisation>
	    b parent class_ref 618882 // DTMAxisTraverser
	end

	operation 4024706 "first"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "context" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  To see if
the self node should be processed, use this function.

@param context The context node of this traversal.

@return the first node in the traversal.
"
	end

	operation 4024834 "first"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  To see if
the self node should be processed, use this function.  If the context
node does not match the expanded type ID, this function will return
false.

@param context The context node of this traversal.
@param expandedTypeID The expanded type ID that must match.

@return the first node in the traversal.
"
	end

	operation 4024962 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return Always return NULL for this axis.
"
	end

	operation 4025090 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 629506 "AllFromRootTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1720578 // <generalisation>
	  relation 1720578 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1720578 // <generalisation>
	    b parent class_ref 628226 // AllFromNodeTraverser
	end

	operation 4025218 "first"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "context" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the root.

@param context The context node of this traversal.

@return the first node in the traversal.
"
	end

	operation 4025346 "first"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the root if it matches the expanded type ID.

@param context The context node of this traversal.
@param expandedTypeID The expanded type ID that must match.

@return the first node in the traversal.
"
	end

	operation 4025474 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return the next node in the iteration, or DTM.NULL.
"
	end

	operation 4025602 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 629634 "RootTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1720706 // <generalisation>
	  relation 1720706 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1720706 // <generalisation>
	    b parent class_ref 629506 // AllFromRootTraverser
	end

	operation 4025730 "first"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the root if it matches the expanded type ID,
else return null (nothing found)

@param context The context node of this traversal.
@param expandedTypeID The expanded type ID that must match.

@return the first node in the traversal.
"
	end

	operation 4025858 "next"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node.

@param context The context node of this iteration.
@param current The current node of the iteration.

@return Always return NULL for this axis.
"
	end

	operation 4025986 "next"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "context" explicit_type "int"
	    param in name "current" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Traverse to the next node after the current node that is matched
by the expanded type ID.

@param context The context node of this iteration.
@param current The current node of the iteration.
@param expandedTypeID The expanded type ID that must match.

@return the next node in the iteration, or DTM.NULL.
"
	end
      end

      class 629762 "DescendantOrSelfFromRootTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1720834 // <generalisation>
	  relation 1720834 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1720834 // <generalisation>
	    b parent class_ref 627970 // DescendantTraverser
	end

	operation 4026114 "getFirstPotential"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "identity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the first potential identity that can be returned, which is the axis
root context in this case.

@param identity The node identity of the root context of the traversal.

@return The identity argument.
"
	end

	operation 4026242 "getSubtreeRoot"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "handle" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the first potential identity that can be returned.
@param handle handle to the root context.
@return identity of the root of the subtree.
"
	end

	operation 4026370 "first"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "context" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the root.

@param context The context node of this traversal.

@return the first node in the traversal.
"
	end

	operation 4026498 "first"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  So to traverse
an axis, the first function must be used to get the first node.

<p>This method needs to be overloaded only by those axis that process
the self node. <\\p>

@param context The context node of this traversal. This is the point
of origin for the traversal -- its \"root node\" or starting point.
@param expandedTypeID The expanded type ID that must match.

@return the first node in the traversal.
"
	end
      end

      class 629890 "DescendantFromRootTraverser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1720962 // <generalisation>
	  relation 1720962 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1720962 // <generalisation>
	    b parent class_ref 627970 // DescendantTraverser
	end

	operation 4026626 "getFirstPotential"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "identity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the first potential identity that can be returned, which is the axis
root context in this case.

@param identity The node identity of the root context of the traversal.

@return The identity argument.
"
	end

	operation 4026754 "getSubtreeRoot"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "handle" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the first potential identity that can be returned.
@param handle handle to the root context.
@return identity of the root of the subtree.
"
	end

	operation 4026882 "first"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "context" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the root.

@param context The context node of this traversal.

@return the first node in the traversal.
"
	end

	operation 4027010 "first"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "context" explicit_type "int"
	    param in name "expandedTypeID" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  So to traverse
an axis, the first function must be used to get the first node.

<p>This method needs to be overloaded only by those axis that process
the self node. <\\p>

@param context The context node of this traversal. This is the point
of origin for the traversal -- its \"root node\" or starting point.
@param expandedTypeID The expanded type ID that must match.

@return the first node in the traversal.
"
	end
      end
    end

    class 626562 "DTMDefaultBase"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>DTMDefaultBase</code> class serves as a helper base for DTMs.
It sets up structures for navigation and type, while leaving data
management and construction to the derived classes.
"
      classrelation 1715970 // <realization>
	relation 1715970 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1715970 // <realization>
	  b parent class_ref 618754 // DTM
      end

      attribute 863234 "JJK_DEBUG"
	class_attribute const_attribute package explicit_type "boolean"
	init_value "false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 863362 "ROOTNODE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " This constant is likely to be removed in the future. Use the
 getDocument() method instead of ROOTNODE to get at the root
 node of a DTM.
 The identity of the root node. 
"
      end

      attribute 863490 "m_size"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of nodes, which is also used to determine the next
 node index.

"
      end

      classrelation 1716098 // m_exptype (<unidirectional association>)
	relation 1716098 --->
	  a role_name "m_exptype" protected
	    comment " The expanded names, one array element for each node. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1716098 // m_exptype (<unidirectional association>)
	  b parent class_ref 626690 // SuballocatedIntVector
      end

      classrelation 1716226 // m_firstch (<unidirectional association>)
	relation 1716226 --->
	  a role_name "m_firstch" protected
	    comment " First child values, one array element for each node. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1716226 // m_firstch (<unidirectional association>)
	  b parent class_ref 626690 // SuballocatedIntVector
      end

      classrelation 1716354 // m_nextsib (<unidirectional association>)
	relation 1716354 --->
	  a role_name "m_nextsib" protected
	    comment " Next sibling values, one array element for each node. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1716354 // m_nextsib (<unidirectional association>)
	  b parent class_ref 626690 // SuballocatedIntVector
      end

      classrelation 1716482 // m_prevsib (<unidirectional association>)
	relation 1716482 --->
	  a role_name "m_prevsib" protected
	    comment " Previous sibling values, one array element for each node. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1716482 // m_prevsib (<unidirectional association>)
	  b parent class_ref 626690 // SuballocatedIntVector
      end

      classrelation 1716610 // m_parent (<unidirectional association>)
	relation 1716610 --->
	  a role_name "m_parent" protected
	    comment " Previous sibling values, one array element for each node. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1716610 // m_parent (<unidirectional association>)
	  b parent class_ref 626690 // SuballocatedIntVector
      end

      classrelation 1716738 // m_namespaceDeclSets (<unidirectional association>)
	relation 1716738 --->
	  a role_name "m_namespaceDeclSets" init_value " null" protected
	    comment " Vector of SuballocatedIntVectors of NS decl sets 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1716738 // m_namespaceDeclSets (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      classrelation 1716866 // m_namespaceDeclSetElements (<unidirectional association>)
	relation 1716866 --->
	  a role_name "m_namespaceDeclSetElements" init_value " null" protected
	    comment " SuballocatedIntVector  of elements at which corresponding
namespaceDeclSets were defined 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1716866 // m_namespaceDeclSetElements (<unidirectional association>)
	  b parent class_ref 626690 // SuballocatedIntVector
      end

      attribute 863618 "m_elemIndexes"
	protected explicit_type "int"
	multiplicity "[][][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "These hold indexes to elements based on namespace and local name.
The base lookup is the the namespace.  The second lookup is the local
name, and the last array contains the the first free element
at the start, and the list of element handles following.

"
      end

      attribute 863746 "DEFAULT_BLOCKSIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 512"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The default block size of the node arrays 
 favor small docs."
      end

      attribute 863874 "DEFAULT_NUMBLOCKS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of blocks for the node arrays 
"
      end

      attribute 864002 "DEFAULT_NUMBLOCKS_SMALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of blocks used for small documents & RTFs 
"
      end

      attribute 864130 "NOTPROCESSED"
	class_attribute const_attribute protected explicit_type "int"
	init_value " DTM.NULL - 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The block size of the node arrays 
protected final int m_blocksize;

The value to use when the information has not been built yet.

"
      end

      classrelation 1716994 // m_mgr (<unidirectional association>)
	relation 1716994 --->
	  a role_name "m_mgr" public
	    comment "
The DTM manager who \"owns\" this DTM.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1716994 // m_mgr (<unidirectional association>)
	  b parent class_ref 619266 // DTMManager
      end

      classrelation 1717122 // m_mgrDefault (<unidirectional association>)
	relation 1717122 --->
	  a role_name "m_mgrDefault" init_value "null" protected
	    comment "
m_mgr cast to DTMManagerDefault, or null if it isn't an instance
(Efficiency hook)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1717122 // m_mgrDefault (<unidirectional association>)
	  b parent class_ref 619906 // DTMManagerDefault
      end

      classrelation 1717250 // m_dtmIdent (<unidirectional association>)
	relation 1717250 --->
	  a role_name "m_dtmIdent" protected
	    comment " The document identity number(s). If we have overflowed the addressing
range of the first that was assigned to us, we may add others. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1717250 // m_dtmIdent (<unidirectional association>)
	  b parent class_ref 626690 // SuballocatedIntVector
      end

      classrelation 1717378 // m_documentBaseURI (<unidirectional association>)
	relation 1717378 --->
	  a role_name "m_documentBaseURI" protected
	    comment " The mask for the identity.
%REVIEW% Should this really be set to the _DEFAULT? What if
a particular DTM wanted to use another value? 
protected final static int m_mask = DTMManager.IDENT_NODE_DEFAULT;
 The base URI for this document. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1717378 // m_documentBaseURI (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1717506 // m_wsfilter (<unidirectional association>)
	relation 1717506 --->
	  a role_name "m_wsfilter" protected
	    comment "
The whitespace filter that enables elements to strip whitespace or not.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1717506 // m_wsfilter (<unidirectional association>)
	  b parent class_ref 620162 // DTMWSFilter
      end

      attribute 864258 "m_shouldStripWS"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Flag indicating whether to strip whitespace nodes 
"
      end

      classrelation 1717634 // m_shouldStripWhitespaceStack (<unidirectional association>)
	relation 1717634 --->
	  a role_name "m_shouldStripWhitespaceStack" protected
	    comment " Stack of flags indicating whether to strip whitespace nodes 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1717634 // m_shouldStripWhitespaceStack (<unidirectional association>)
	  b parent class_ref 626818 // BoolStack
      end

      classrelation 1717762 // m_xstrf (<unidirectional association>)
	relation 1717762 --->
	  a role_name "m_xstrf" protected
	    comment " The XMLString factory for creating XMLStrings. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1717762 // m_xstrf (<unidirectional association>)
	  b parent class_ref 626946 // XMLStringFactory
      end

      classrelation 1717890 // m_expandedNameTable (<unidirectional association>)
	relation 1717890 --->
	  a role_name "m_expandedNameTable" protected
	    comment "
The table for exandedNameID lookups.  This may or may not be the same
table as is contained in the DTMManagerDefault.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1717890 // m_expandedNameTable (<unidirectional association>)
	  b parent class_ref 627074 // ExpandedNameTable
      end

      attribute 864386 "m_indexing"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if indexing is turned on. 
"
      end

      operation 4005890 "DTMDefaultBase"
	public explicit_return_type ""
	nparams 6
	  param inout name "mgr" type class_ref 619266 // DTMManager
	  param inout name "source" type class_ref 627202 // Source
	  param in name "dtmIdentity" explicit_type "int"
	  param inout name "whiteSpaceFilter" type class_ref 620162 // DTMWSFilter
	  param inout name "xstringfactory" type class_ref 626946 // XMLStringFactory
	  param inout name "doIndexing" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a DTMDefaultBase object using the default block size.

@param mgr The DTMManager who owns this DTM.
@param source The object that is used to specify the construction source.
@param dtmIdentity The DTM identity ID for this DTM.
@param whiteSpaceFilter The white space filter for this DTM, which may
                        be null.
@param xstringfactory The factory to use for creating XMLStrings.
@param doIndexing true if the caller considers it worth it to use
                  indexing schemes.
"
      end

      operation 4006018 "DTMDefaultBase"
	public explicit_return_type ""
	nparams 9
	  param inout name "mgr" type class_ref 619266 // DTMManager
	  param inout name "source" type class_ref 627202 // Source
	  param in name "dtmIdentity" explicit_type "int"
	  param inout name "whiteSpaceFilter" type class_ref 620162 // DTMWSFilter
	  param inout name "xstringfactory" type class_ref 626946 // XMLStringFactory
	  param inout name "doIndexing" explicit_type "boolean"
	  param in name "blocksize" explicit_type "int"
	  param inout name "usePrevsib" explicit_type "boolean"
	  param inout name "newNameTable" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a DTMDefaultBase object from a DOM node.

@param mgr The DTMManager who owns this DTM.
@param source The object that is used to specify the construction source.
@param dtmIdentity The DTM identity ID for this DTM.
@param whiteSpaceFilter The white space filter for this DTM, which may
                        be null.
@param xstringfactory The factory to use for creating XMLStrings.
@param doIndexing true if the caller considers it worth it to use
                  indexing schemes.
@param blocksize The block size of the DTM.
@param usePrevsib true if we want to build the previous sibling node array.
@param newNameTable true if we want to use a new ExpandedNameTable for this DTM.
"
      end

      operation 4006146 "ensureSizeOfIndex"
	protected explicit_return_type "void"
	nparams 2
	  param in name "namespaceID" explicit_type "int"
	  param in name "LocalNameID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensure that the size of the element indexes can hold the information.

@param namespaceID Namespace ID index.
@param LocalNameID Local name ID.
"
      end

      operation 4006274 "indexNode"
	protected explicit_return_type "void"
	nparams 2
	  param in name "expandedTypeID" explicit_type "int"
	  param in name "identity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a node to the element indexes. The node will not be added unless
it's an element.

@param expandedTypeID The expanded type ID of the node.
@param identity The node identity index.
"
      end

      operation 4006402 "findGTE"
	protected explicit_return_type "int"
	nparams 4
	  param inout name "list" explicit_type "int"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find the first index that occurs in the list that is greater than or
equal to the given value.

@param list A list of integers.
@param start The start index to begin the search.
@param len The number of items to search.
@param value Find the slot that has a value that is greater than or
identical to this argument.

@return The index in the list of the slot that is higher or identical
to the identity argument, or -1 if no node is higher or equal.
"
      end

      operation 4006530 "findElementFromIndex"
	package explicit_return_type "int"
	nparams 3
	  param in name "nsIndex" explicit_type "int"
	  param in name "lnIndex" explicit_type "int"
	  param in name "firstPotential" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find the first matching element from the index at or after the
given node.

@param nsIndex The namespace index lookup.
@param lnIndex The local name index lookup.
@param firstPotential The first potential match that is worth looking at.

@return The first node that is greater than or equal to the
        firstPotential argument, or DTM.NOTPROCESSED if not found.
"
      end

      operation 4006658 "getNextNodeIdentity"
	abstract protected explicit_return_type "int"
	nparams 1
	  param in name "identity" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next node identity value in the list, and call the iterator
if it hasn't been added yet.

@param identity The node identity (index).
@return identity+1, or DTM.NULL.
"
      end

      operation 4006786 "nextNode"
	abstract protected explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method should try and build one or more nodes in the table.

@return The true if a next node is found or false if
        there are no more nodes.
"
      end

      operation 4006914 "getNumberOfNodes"
	abstract protected explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the number of nodes that have been added.

@return the number of nodes that have been mapped.
"
      end

      classrelation 1718018 // m_traversers (<unidirectional association>)
	relation 1718018 --->
	  a role_name "m_traversers" multiplicity "[]" protected
	    comment " Stateless axis traversers, lazely built. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1718018 // m_traversers (<unidirectional association>)
	  b parent class_ref 618882 // DTMAxisTraverser
      end

      operation 4007042 "_type"
	protected explicit_return_type "short"
	nparams 1
	  param in name "identity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    /**
     * Ensure that the size of the information arrays can hold another entry
     * at the given index.
     *
     * @param index On exit from this function, the information arrays sizes must be
     * at least index+1.
     */
    protected void ensureSize(int index)
    {
        // We've cut over to Suballocated*Vector, which are self-sizing.
    }

Get the simple type ID for the given node identity.

@param identity The node identity.

@return The simple type ID, or DTM.NULL.
"
      end

      operation 4007170 "_exptype"
	protected explicit_return_type "int"
	nparams 1
	  param in name "identity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the expanded type ID for the given node identity.

@param identity The node identity.

@return The expanded type ID, or DTM.NULL.
"
      end

      operation 4007298 "_level"
	protected explicit_return_type "int"
	nparams 1
	  param in name "identity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the level in the tree for the given node identity.

@param identity The node identity.

@return The tree level, or DTM.NULL.
"
      end

      operation 4007426 "_firstch"
	protected explicit_return_type "int"
	nparams 1
	  param in name "identity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the first child for the given node identity.

@param identity The node identity.

@return The first child identity, or DTM.NULL.
"
      end

      operation 4007554 "_nextsib"
	protected explicit_return_type "int"
	nparams 1
	  param in name "identity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next sibling for the given node identity.

@param identity The node identity.

@return The next sibling identity, or DTM.NULL.
"
      end

      operation 4007682 "_prevsib"
	protected explicit_return_type "int"
	nparams 1
	  param in name "identity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the previous sibling for the given node identity.

@param identity The node identity.

@return The previous sibling identity, or DTM.NULL.
"
      end

      operation 4007810 "_parent"
	protected explicit_return_type "int"
	nparams 1
	  param in name "identity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the parent for the given node identity.

@param identity The node identity.

@return The parent identity, or DTM.NULL.
"
      end

      operation 4007938 "dumpDTM"
	public explicit_return_type "void"
	nparams 1
	  param inout name "os" type class_ref 151298 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Diagnostics function to dump the DTM.
"
      end

      operation 4008066 "dumpNode"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Diagnostics function to dump a single node.

%REVIEW% KNOWN GLITCH: If you pass it a node index rather than a
node handle, it works just fine... but the displayed identity
number before the colon is different, which complicates comparing
it with nodes printed the other way. We could always OR the DTM ID
into the value, to suppress that distinction...

%REVIEW% This might want to be moved up to DTMDefaultBase, or possibly
DTM itself, since it's a useful diagnostic and uses only DTM's public
APIs.
"
      end

      operation 4008194 "setFeature"
	public explicit_return_type "void"
	nparams 2
	  param inout name "featureId" type class_ref 128130 // String
	  param inout name "state" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ========= DTM Implementation Control Functions. ==============

Set an implementation dependent feature.
<p>
%REVIEW% Do we really expect to set features on DTMs?

@param featureId A feature URL.
@param state true if this feature should be on, false otherwise.
"
      end

      operation 4008322 "hasChildNodes"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ========= Document Navigation Functions =========

Given a node handle, test if it has child nodes.
<p> %REVIEW% This is obviously useful at the DOM layer, where it
would permit testing this without having to create a proxy
node. It's less useful in the DTM API, where
(dtm.getFirstChild(nodeHandle)!=DTM.NULL) is just as fast and
almost as self-evident. But it's a convenience, and eases porting
of DOM code to DTM.  </p>

@param nodeHandle int Handle of the node.
@return int true if the given node has child nodes.
"
      end

      operation 4008450 "makeNodeHandle"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeIdentity" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Given a node identity, return a node handle. If extended addressing
has been used (multiple DTM IDs), we need to map the high bits of the
identity into the proper DTM ID.

This has been made FINAL to facilitate inlining, since we do not expect
any subclass of DTMDefaultBase to ever change the algorithm. (I don't
really like doing so, and would love to have an excuse not to...)

%REVIEW% Is it worth trying to specialcase small documents?
%REVIEW% Should this be exposed at the package/public layers?

@param nodeIdentity Internal offset to this node's records.
@return NodeHandle (external representation of node)
"
      end

      operation 4008578 "makeNodeIdentity"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Given a node handle, return a node identity. If extended addressing
has been used (multiple DTM IDs), we need to map the high bits of the
identity into the proper DTM ID and thence find the proper offset
to add to the low bits of the identity

This has been made FINAL to facilitate inlining, since we do not expect
any subclass of DTMDefaultBase to ever change the algorithm. (I don't
really like doing so, and would love to have an excuse not to...)

%OPT% Performance is critical for this operation.

%REVIEW% Should this be exposed at the package/public layers?

@param nodeHandle (external representation of node)
@return nodeIdentity Internal offset to this node's records.
"
      end

      operation 4008706 "getFirstChild"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, get the handle of the node's first child.
If not yet resolved, waits for more nodes to be added to the document and
tries again.

@param nodeHandle int Handle of the node.
@return int DTM node-number of first child, or DTM.NULL to indicate none exists.
"
      end

      operation 4008834 "getTypedFirstChild"
	public explicit_return_type "int"
	nparams 2
	  param in name "nodeHandle" explicit_type "int"
	  param in name "nodeType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, get the handle of the node's first child.
If not yet resolved, waits for more nodes to be added to the document and
tries again.

@param nodeHandle int Handle of the node.
@return int DTM node-number of first child, or DTM.NULL to indicate none exists.
"
      end

      operation 4008962 "getLastChild"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, advance to its last child.
If not yet resolved, waits for more nodes to be added to the document and
tries again.

@param nodeHandle int Handle of the node.
@return int Node-number of last child,
or DTM.NULL to indicate none exists.
"
      end

      operation 4009090 "getAttributeNode"
	abstract public explicit_return_type "int"
	nparams 3
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an attribute node by by qualified name and namespace URI.

@param nodeHandle int Handle of the node upon which to look up this attribute..
@param namespaceURI The namespace URI of the attribute to
  retrieve, or null.
@param name The local name of the attribute to
  retrieve.
@return The attribute node handle with the specified name (
  <code>nodeName</code>) or <code>DTM.NULL</code> if there is no such
  attribute.
"
      end

      operation 4009218 "getFirstAttribute"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, get the index of the node's first attribute.

@param nodeHandle int Handle of the node.
@return Handle of first attribute, or DTM.NULL to indicate none exists.
"
      end

      operation 4009346 "getFirstAttributeIdentity"
	protected explicit_return_type "int"
	nparams 1
	  param in name "identity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node identity, get the index of the node's first attribute.

@param identity int identity of the node.
@return Identity of first attribute, or DTM.NULL to indicate none exists.
"
      end

      operation 4009474 "getTypedAttribute"
	protected explicit_return_type "int"
	nparams 2
	  param in name "nodeHandle" explicit_type "int"
	  param in name "attType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle and an expanded type ID, get the index of the node's
attribute of that type, if any.

@param nodeHandle int Handle of the node.
@param attType int expanded type ID of the required attribute.
@return Handle of attribute of the required type, or DTM.NULL to indicate
none exists.
"
      end

      operation 4009602 "getNextSibling"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, advance to its next sibling.
If not yet resolved, waits for more nodes to be added to the document and
tries again.
@param nodeHandle int Handle of the node.
@return int Node-number of next sibling,
or DTM.NULL to indicate none exists.
"
      end

      operation 4009730 "getTypedNextSibling"
	public explicit_return_type "int"
	nparams 2
	  param in name "nodeHandle" explicit_type "int"
	  param in name "nodeType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, advance to its next sibling.
If not yet resolved, waits for more nodes to be added to the document and
tries again.
@param nodeHandle int Handle of the node.
@return int Node-number of next sibling,
or DTM.NULL to indicate none exists.
"
      end

      operation 4009858 "getPreviousSibling"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find its preceeding sibling.
WARNING: DTM is asymmetric; this operation is resolved by search, and is
relatively expensive.

@param nodeHandle the id of the node.
@return int Node-number of the previous sib,
or DTM.NULL to indicate none exists.
"
      end

      operation 4009986 "getNextAttribute"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, advance to the next attribute.
If an attr, we advance to
the next attr on the same node.  If not an attribute, we return NULL.

@param nodeHandle int Handle of the node.
@return int DTM node-number of the resolved attr,
or DTM.NULL to indicate none exists.
"
      end

      operation 4010114 "getNextAttributeIdentity"
	protected explicit_return_type "int"
	nparams 1
	  param in name "identity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node identity for an attribute, advance to the next attribute.

@param identity int identity of the attribute node.  This
<strong>must</strong> be an attribute node.

@return int DTM node-identity of the resolved attr,
or DTM.NULL to indicate none exists.

"
      end

      classrelation 1718146 // m_namespaceLists (<unidirectional association>)
	relation 1718146 --->
	  a role_name "m_namespaceLists" init_value " null" private
	    comment " Lazily created namespace lists. 
 on demand"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1718146 // m_namespaceLists (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      operation 4010242 "declareNamespaceInContext"
	protected explicit_return_type "void"
	nparams 2
	  param in name "elementNodeIndex" explicit_type "int"
	  param in name "namespaceNodeIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Build table of namespace declaration
locations during DTM construction. Table is a Vector of
SuballocatedIntVectors containing the namespace node HANDLES declared at
that ID, plus an SuballocatedIntVector of the element node INDEXES at which
these declarations appeared.

NOTE: Since this occurs during model build, nodes will be encountered
in doucment order and thus the table will be ordered by element,
permitting binary-search as a possible retrieval optimization.

%REVIEW% Directly managed arrays rather than vectors?
%REVIEW% Handles or IDs? Given usage, I think handles.
"
      end

      operation 4010370 "findNamespaceContext"
	protected return_type class_ref 626690 // SuballocatedIntVector
	nparams 1
	  param in name "elementNodeIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieve list of namespace declaration locations
active at this node. List is an SuballocatedIntVector whose
entries are the namespace node HANDLES declared at that ID.

%REVIEW% Directly managed arrays rather than vectors?
%REVIEW% Handles or IDs? Given usage, I think handles.
"
      end

      operation 4010498 "findInSortedSuballocatedIntVector"
	protected explicit_return_type "int"
	nparams 2
	  param inout name "vector" type class_ref 626690 // SuballocatedIntVector
	  param in name "lookfor" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subroutine: Locate the specified node within
m_namespaceDeclSetElements, or the last element which
preceeds it in document order

%REVIEW% Inlne this into findNamespaceContext? Create SortedSuballocatedIntVector type?

@return If positive or zero, the index of the found item.
If negative, index of the point at which it would have appeared,
encoded as -1-index and hence reconvertable by subtracting
it from -1. (Encoding because I don't want to recompare the strings
but don't want to burn bytes on a datatype to hold a flagged value.)
"
      end

      operation 4010626 "getFirstNamespaceNode"
	public explicit_return_type "int"
	nparams 2
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "inScope" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, get the index of the node's first child.
If not yet resolved, waits for more nodes to be added to the document and
tries again

@param nodeHandle handle to node, which should probably be an element
                  node, but need not be.

@param inScope    true if all namespaces in scope should be returned,
                  false if only the namespace declarations should be
                  returned.
@return handle of first namespace, or DTM.NULL to indicate none exists.
"
      end

      operation 4010754 "getNextNamespaceNode"
	public explicit_return_type "int"
	nparams 3
	  param in name "baseHandle" explicit_type "int"
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "inScope" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a namespace handle, advance to the next namespace.

@param baseHandle handle to original node from where the first namespace
was relative to (needed to return nodes in document order).
@param nodeHandle A namespace handle for which we will find the next node.
@param inScope true if all namespaces that are in scope should be processed,
otherwise just process the nodes in the given element handle.
@return handle of next namespace, or DTM.NULL to indicate none exists.
"
      end

      operation 4010882 "getParent"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find its parent node.

@param nodeHandle the id of the node.
@return int Node-number of parent,
or DTM.NULL to indicate none exists.
"
      end

      operation 4011010 "getDocument"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find the Document node handle for the document currently under construction.
PLEASE NOTE that most people should use getOwnerDocument(nodeHandle) instead;
this version of the operation is primarily intended for use during negotiation
with the DTM Manager.

 @return int Node handle of document, which should always be valid.
"
      end

      operation 4011138 "getOwnerDocument"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find the owning document node.  This has the exact
same semantics as the DOM Document method of the same name, in that if
the nodeHandle is a document node, it will return NULL.

<p>%REVIEW% Since this is DOM-specific, it may belong at the DOM
binding layer. Included here as a convenience function and to
aid porting of DOM code to DTM.</p>

@param nodeHandle the id of the node.
@return int Node handle of owning document, or -1 if the node was a Docment
"
      end

      operation 4011266 "getDocumentRoot"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find the owning document node.  Unlike the DOM,
this considers the owningDocument of a Document to be itself.

@param nodeHandle the id of the node.
@return int Node handle of owning document, or the nodeHandle if it is
            a Document.
"
      end

      operation 4011394 "getStringValue"
	abstract public return_type class_ref 619010 // XMLString
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the string-value of a node as a String object
(see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value).

@param nodeHandle The node ID.

@return A string object that represents the string-value of the given node.
"
      end

      operation 4011522 "getStringValueChunkCount"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get number of character array chunks in
the string-value of a node.
(see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value).
Note that a single text node may have multiple text chunks.

@param nodeHandle The node ID.

@return number of character array chunks in
        the string-value of a node.
"
      end

      operation 4011650 "getStringValueChunk"
	public explicit_return_type "char"
	nparams 3
	  param in name "nodeHandle" explicit_type "int"
	  param in name "chunkIndex" explicit_type "int"
	  param inout name "startAndLen" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a character array chunk in the string-value of a node.
(see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value).
Note that a single text node may have multiple text chunks.

@param nodeHandle The node ID.
@param chunkIndex Which chunk to get.
@param startAndLen An array of 2 where the start position and length of
                   the chunk will be returned.

@return The character array reference where the chunk occurs.
"
      end

      operation 4011778 "getExpandedTypeID"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return an ID that represents the node's expanded name.

@param nodeHandle The handle to the node in question.

@return the expanded-name id of the node.
"
      end

      operation 4011906 "getExpandedTypeID"
	public explicit_return_type "int"
	nparams 3
	  param inout name "namespace" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded name, return an ID.  If the expanded-name does not
exist in the internal tables, the entry will be created, and the ID will
be returned.  Any additional nodes that are created that have this
expanded name will use this ID.

@param type The simple type, i.e. one of ELEMENT, ATTRIBUTE, etc.

@param namespace The namespace URI, which may be null, may be an empty
                 string (which will be the same as null), or may be a
                 namespace URI.
@param localName The local name string, which must be a valid
                 <a href=\"http://www.w3.org/TR/REC-xml-names/\">NCName</a>.

@return the expanded-name id of the node.
"
      end

      operation 4012034 "getLocalNameFromExpandedNameID"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "expandedNameID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded-name ID, return the local name part.

@param expandedNameID an ID that represents an expanded-name.
@return String Local name of this node.
"
      end

      operation 4012162 "getNamespaceFromExpandedNameID"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "expandedNameID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded-name ID, return the namespace URI part.

@param expandedNameID an ID that represents an expanded-name.
@return String URI value of this node's namespace, or null if no
namespace was resolved.
"
      end

      operation 4012290 "getNamespaceType"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the namespace type of a specific node
@param nodeHandle the id of the node.
@return the ID of the namespace.
"
      end

      operation 4012418 "getNodeName"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style node name. This will
include names such as #text or #document.

@param nodeHandle the id of the node.
@return String Name of this node, which may be an empty string.
%REVIEW% Document when empty string is possible...
%REVIEW-COMMENT% It should never be empty, should it?
"
      end

      operation 4012546 "getNodeNameX"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return the XPath node name.  This should be
the name as described by the XPath data model, NOT the DOM-style
name.

@param nodeHandle the id of the node.
@return String Name of this node, which may be an empty string.
"
      end

      operation 4012674 "getLocalName"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its XPath-style localname.
(As defined in Namespaces, this is the portion of the name after any
colon character).

@param nodeHandle the id of the node.
@return String Local name of this node.
"
      end

      operation 4012802 "getPrefix"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a namespace handle, return the prefix that the namespace decl is
mapping.
Given a node handle, return the prefix used to map to the namespace.

<p> %REVIEW% Are you sure you want \"\" for no prefix?  </p>
<p> %REVIEW-COMMENT% I think so... not totally sure. -sb  </p>

@param nodeHandle the id of the node.
@return String prefix of this node's name, or \"\" if no explicit
namespace prefix was given.
"
      end

      operation 4012930 "getNamespaceURI"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style namespace URI
(As defined in Namespaces, this is the declared URI which this node's
prefix -- or default in lieu thereof -- was mapped to.)

<p>%REVIEW% Null or \"\"? -sb</p>

@param nodeHandle the id of the node.
@return String URI value of this node's namespace, or null if no
namespace was resolved.
"
      end

      operation 4013058 "getNodeValue"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its node value. This is mostly
as defined by the DOM, but may ignore some conveniences.
<p>

@param nodeHandle The node id.
@return String Value of this node, or null if not
meaningful for this node type.
"
      end

      operation 4013186 "getNodeType"
	public explicit_return_type "short"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style node type.
<p>
%REVIEW% Generally, returning short is false economy. Return int?
%REVIEW% Make assumption that node has already arrived.  Is OK?

@param nodeHandle The node id.
@return int Node type, as per the DOM's Node._NODE constants.
"
      end

      operation 4013314 "getLevel"
	public explicit_return_type "short"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the depth level of this node in the tree (equals 1 for
a parentless node).

@param nodeHandle The node id.
@return the number of ancestors, plus one
@xsl.usage internal
"
      end

      operation 4013442 "getNodeIdent"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the identity of this node in the tree

@param nodeHandle The node handle.
@return the node identity
@xsl.usage internal
"
      end

      operation 4013570 "getNodeHandle"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeId" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the handle of this node in the tree

@param nodeId The node identity.
@return the node handle
@xsl.usage internal
"
      end

      operation 4013698 "isSupported"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "feature" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ============== Document query functions ==============

Tests whether DTM DOM implementation implements a specific feature and
that feature is supported by this node.

@param feature The name of the feature to test.
@param version This is the version number of the feature to test.
  If the version is not
  specified, supporting any version of the feature will cause the
  method to return <code>true</code>.
@return Returns <code>true</code> if the specified feature is
  supported on this node, <code>false</code> otherwise.
"
      end

      operation 4013826 "getDocumentBaseURI"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the base URI of the document entity. If it is not known
(because the document was parsed from a socket connection or from
standard input, for example), the value of this property is unknown.

@return the document base URI String object or null if unknown.
"
      end

      operation 4013954 "setDocumentBaseURI"
	public explicit_return_type "void"
	nparams 1
	  param inout name "baseURI" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the base URI of the document entity.

@param baseURI the document base URI String object or null if unknown.
"
      end

      operation 4014082 "getDocumentSystemIdentifier"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the system identifier of the document entity. If
it is not known, the value of this property is unknown.

@param nodeHandle The node id, which can be any valid node handle.
@return the system identifier String object or null if unknown.
"
      end

      operation 4014210 "getDocumentEncoding"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the name of the character encoding scheme
       in which the document entity is expressed.

@param nodeHandle The node id, which can be any valid node handle.
@return the document encoding String object.
@xsl.usage internal
"
      end

      operation 4014338 "getDocumentStandalone"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an indication of the standalone status of the document,
       either \"yes\" or \"no\". This property is derived from the optional
       standalone document declaration in the XML declaration at the
       beginning of the document entity, and has no value if there is no
       standalone document declaration.

@param nodeHandle The node id, which can be any valid node handle.
@return the document standalone String object, either \"yes\", \"no\", or null.
"
      end

      operation 4014466 "getDocumentVersion"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "documentHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string representing the XML version of the document. This
property is derived from the XML declaration optionally present at the
beginning of the document entity, and has no value if there is no XML
declaration.

@param documentHandle The document handle

@return the document version String object.
"
      end

      operation 4014594 "getDocumentAllDeclarationsProcessed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an indication of
whether the processor has read the complete DTD. Its value is a
boolean. If it is false, then certain properties (indicated in their
descriptions below) may be unknown. If it is true, those properties
are never unknown.

@return <code>true</code> if all declarations were processed;
        <code>false</code> otherwise.
"
      end

      operation 4014722 "getDocumentTypeDeclarationSystemIdentifier"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  A document type declaration information item has the following properties:

    1. [system identifier] The system identifier of the external subset, if
       it exists. Otherwise this property has no value.

@return the system identifier String object, or null if there is none.
"
      end

      operation 4014850 "getDocumentTypeDeclarationPublicIdentifier"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the public identifier of the external subset,
normalized as described in 4.2.2 External Entities [XML]. If there is
no external subset or if it has no public identifier, this property
has no value.

@return the public identifier String object, or null if there is none.
"
      end

      operation 4014978 "getElementById"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "elementId" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Element</code> whose <code>ID</code> is given by
<code>elementId</code>. If no such element exists, returns
<code>DTM.NULL</code>. Behavior is not defined if more than one element
has this <code>ID</code>. Attributes (including those
with the name \"ID\") are not of type ID unless so defined by DTD/Schema
information available to the DTM implementation.
Implementations that do not know whether attributes are of type ID or
not are expected to return <code>DTM.NULL</code>.

<p>%REVIEW% Presumably IDs are still scoped to a single document,
and this operation searches only within a single document, right?
Wouldn't want collisions between DTMs in the same process.</p>

@param elementId The unique <code>id</code> value for an element.
@return The handle of the matching element.
"
      end

      operation 4015106 "getUnparsedEntityURI"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The getUnparsedEntityURI function returns the URI of the unparsed
entity with the specified name in the same document as the context
node (see [3.3 Unparsed Entities]). It returns the empty string if
there is no such entity.
<p>
XML processors may choose to use the System Identifier (if one
is provided) to resolve the entity, rather than the URI in the
Public Identifier. The details are dependent on the processor, and
we would have to support some form of plug-in resolver to handle
this properly. Currently, we simply return the System Identifier if
present, and hope that it a usable URI or that our caller can
map it to one.
TODO: Resolve Public Identifiers... or consider changing function name.
<p>
If we find a relative URI
reference, XML expects it to be resolved in terms of the base URI
of the document. The DOM doesn't do that for us, and it isn't
entirely clear whether that should be done here; currently that's
pushed up to a higher level of our application. (Note that DOM Level
1 didn't store the document's base URI.)
TODO: Consider resolving Relative URIs.
<p>
(The DOM's statement that \"An XML processor may choose to
completely expand entities before the structure model is passed
to the DOM\" refers only to parsed entities, not unparsed, and hence
doesn't affect this function.)

@param name A string containing the Entity Name of the unparsed
entity.

@return String containing the URI of the Unparsed Entity, or an
empty string if no such entity exists.
"
      end

      operation 4015234 "supportsPreStripping"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ============== Boolean methods ================

Return true if the xsl:strip-space or xsl:preserve-space was processed
during construction of the DTM document.

@return true if this DTM supports prestripping.
"
      end

      operation 4015362 "isNodeAfter"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "nodeHandle1" explicit_type "int"
	  param in name "nodeHandle2" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Figure out whether nodeHandle2 should be considered as being later
in the document than nodeHandle1, in Document Order as defined
by the XPath model. This may not agree with the ordering defined
by other XML applications.
<p>
There are some cases where ordering isn't defined, and neither are
the results of this function -- though we'll generally return false.

@param nodeHandle1 Node handle to perform position comparison on.
@param nodeHandle2 Second Node handle to perform position comparison on .

@return true if node1 comes before node2, otherwise return false.
You can think of this as
<code>(node1.documentOrderPosition &lt;= node2.documentOrderPosition)</code>.
"
      end

      operation 4015490 "isCharacterElementContentWhitespace"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    2. [element content whitespace] A boolean indicating whether the
       character is white space appearing within element content (see [XML],
       2.10 \"White Space Handling\"). Note that validating XML processors are
       required by XML 1.0 to provide this information. If there is no
       declaration for the containing element, this property has no value for
       white space characters. If no declaration has been read, but the [all
       declarations processed] property of the document information item is
       false (so there may be an unread declaration), then the value of this
       property is unknown for white space characters. It is always false for
       characters that are not white space.

@param nodeHandle the node ID.
@return <code>true</code> if the character data is whitespace;
        <code>false</code> otherwise.
"
      end

      operation 4015618 "isDocumentAllDeclarationsProcessed"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "documentHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "   10. [all declarations processed] This property is not strictly speaking
       part of the infoset of the document. Rather it is an indication of
       whether the processor has read the complete DTD. Its value is a
       boolean. If it is false, then certain properties (indicated in their
       descriptions below) may be unknown. If it is true, those properties
       are never unknown.

@param documentHandle A node handle that must identify a document.
@return <code>true</code> if all declarations were processed;
        <code>false</code> otherwise.
"
      end

      operation 4015746 "isAttributeSpecified"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param in name "attributeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    5. [specified] A flag indicating whether this attribute was actually
       specified in the start-tag of its element, or was defaulted from the
       DTD.

@param attributeHandle The attribute handle in question.

@return <code>true</code> if the attribute was specified;
        <code>false</code> if it was defaulted.
"
      end

      operation 4015874 "dispatchCharactersEvents"
	abstract public explicit_return_type "void"
	nparams 3
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "ch" type class_ref 605954 // ContentHandler
	  param inout name "normalize" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ========== Direct SAX Dispatch, for optimization purposes ========

Directly call the
characters method on the passed ContentHandler for the
string-value of the given node (see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value). Multiple calls to the
ContentHandler's characters methods may well occur for a single call to
this method.

@param nodeHandle The node ID.
@param ch A non-null reference to a ContentHandler.
@param normalize true if the content should be normalized according to
the rules for the XPath
<a href=\"http://www.w3.org/TR/xpath#function-normalize-space\">normalize-space</a>
function.

@throws org.xml.sax.SAXException
"
      end

      operation 4016002 "dispatchToEvents"
	abstract public explicit_return_type "void"
	nparams 2
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "ch" type class_ref 605954 // ContentHandler
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Directly create SAX parser events from a subtree.

@param nodeHandle The node ID.
@param ch A non-null reference to a ContentHandler.

@throws org.xml.sax.SAXException
"
      end

      operation 4016130 "getNode"
	public return_type class_ref 317570 // Node
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an DOM node for the given node.

@param nodeHandle The node ID.

@return A node representation of the DTM node.
"
      end

      operation 4016258 "appendChild"
	public explicit_return_type "void"
	nparams 3
	  param in name "newChild" explicit_type "int"
	  param inout name "clone" explicit_type "boolean"
	  param inout name "cloneDepth" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ==== Construction methods (may not be supported by some implementations!) =====

Append a child to the end of the document. Please note that the node
is always cloned if it is owned by another document.

<p>%REVIEW% \"End of the document\" needs to be defined more clearly.
Does it become the last child of the Document? Of the root element?</p>

@param newChild Must be a valid new node handle.
@param clone true if the child should be cloned into the document.
@param cloneDepth if the clone argument is true, specifies that the
                  clone should include all it's children.
"
      end

      operation 4016386 "appendTextChild"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a text node child that will be constructed from a string,
to the end of the document.

<p>%REVIEW% \"End of the document\" needs to be defined more clearly.
Does it become the last child of the Document? Of the root element?</p>

@param str Non-null reverence to a string.
"
      end

      operation 4016514 "error"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Simple error for asserts and the like.

@param msg Error message to report.
"
      end

      operation 4016642 "getShouldStripWhitespace"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find out whether or not to strip whispace nodes.


@return whether or not to strip whispace nodes.
"
      end

      operation 4016770 "pushShouldStripWhitespace"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "shouldStrip" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set whether to strip whitespaces and push in current value of
m_shouldStripWS in m_shouldStripWhitespaceStack.

@param shouldStrip Flag indicating whether to strip whitespace nodes
"
      end

      operation 4016898 "popShouldStripWhitespace"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set whether to strip whitespaces at this point by popping out
m_shouldStripWhitespaceStack.

"
      end

      operation 4017026 "setShouldStripWhitespace"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "shouldStrip" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set whether to strip whitespaces and set the top of the stack to
the current value of m_shouldStripWS.


@param shouldStrip Flag indicating whether to strip whitespace nodes
"
      end

      operation 4017154 "documentRegistration"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A dummy routine to satisify the abstract interface. If the DTM
implememtation that extends the default base requires notification
of registration, they can override this method.
"
      end

      operation 4017282 "documentRelease"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A dummy routine to satisify the abstract interface. If the DTM
implememtation that extends the default base requires notification
when the document is being released, they can override this method
"
      end

      operation 4017410 "migrateTo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mgr" type class_ref 619266 // DTMManager
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Migrate a DTM built with an old DTMManager to a new DTMManager.
After the migration, the new DTMManager will treat the DTM as
one that is built by itself.
This is used to support DTM sharing between multiple transformations.
@param mgr the DTMManager
"
      end

      operation 4017538 "getManager"
	public return_type class_ref 619266 // DTMManager
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query which DTMManager this DTM is currently being handled by.

%REVEW% Should this become part of the base DTM API?

@return a DTMManager, or null if this is a \"stand-alone\" DTM.
"
      end

      operation 4017666 "getDTMIDs"
	public return_type class_ref 626690 // SuballocatedIntVector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query which DTMIDs this DTM is currently using within the DTMManager.

%REVEW% Should this become part of the base DTM API?

@return an IntVector, or null if this is a \"stand-alone\" DTM.
"
      end
    end

    class 627074 "ExpandedNameTable"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is a default implementation of a table that manages mappings from
expanded names to expandedNameIDs.

%OPT% The performance of the getExpandedTypeID() method is very important
to DTM building. To get the best performance out of this class, we implement
a simple hash algorithm directly into this class, instead of using the
inefficient java.util.Hashtable. The code for the get and put operations
are combined in getExpandedTypeID() method to share the same hash calculation
code. We only need to implement the rehash() interface which is used to
expand the hash table.
"
      classrelation 2240898 // m_extendedTypes (<unidirectional association>)
	relation 2240898 --->
	  a role_name "m_extendedTypes" multiplicity "[]" private
	    comment " Array of extended types for this document   
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2240898 // m_extendedTypes (<unidirectional association>)
	  b parent class_ref 744450 // ExtendedType
      end

      attribute 1157506 "m_initialSize"
	class_attribute private explicit_type "int"
	init_value " 128"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The initial size of the m_extendedTypes array 
"
      end

      attribute 1157634 "m_nextType"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Next available extended type   
 %REVIEW% Since this is (should be) always equal
 to the length of m_extendedTypes, do we need this?
"
      end

      attribute 1157762 "ELEMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " ((int)DTM.ELEMENT_NODE) "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " These are all the types prerotated, for caller convenience.
"
      end

      attribute 1157890 "ATTRIBUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " ((int)DTM.ATTRIBUTE_NODE) "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1158018 "TEXT"
	class_attribute const_attribute public explicit_type "int"
	init_value " ((int)DTM.TEXT_NODE) "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1158146 "CDATA_SECTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " ((int)DTM.CDATA_SECTION_NODE) "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1158274 "ENTITY_REFERENCE"
	class_attribute const_attribute public explicit_type "int"
	init_value " ((int)DTM.ENTITY_REFERENCE_NODE) "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1158402 "ENTITY"
	class_attribute const_attribute public explicit_type "int"
	init_value " ((int)DTM.ENTITY_NODE) "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1158530 "PROCESSING_INSTRUCTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " ((int)DTM.PROCESSING_INSTRUCTION_NODE) "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1158658 "COMMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " ((int)DTM.COMMENT_NODE) "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1158786 "DOCUMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " ((int)DTM.DOCUMENT_NODE) "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1158914 "DOCUMENT_TYPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " ((int)DTM.DOCUMENT_TYPE_NODE) "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1159042 "DOCUMENT_FRAGMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value "((int)DTM.DOCUMENT_FRAGMENT_NODE) "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1159170 "NOTATION"
	class_attribute const_attribute public explicit_type "int"
	init_value " ((int)DTM.NOTATION_NODE) "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1159298 "NAMESPACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " ((int)DTM.NAMESPACE_NODE) "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 2241026 // hashET (<unidirectional association>)
	relation 2241026 --->
	  a role_name "hashET" init_value " new ExtendedType(-1, \"\", \"\")" package
	    comment " Workspace for lookup. NOT THREAD SAFE!

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2241026 // hashET (<unidirectional association>)
	  b parent class_ref 744450 // ExtendedType
      end

      classrelation 2241154 // m_defaultExtendedTypes (<unidirectional association>)
	relation 2241154 --->
	  a role_name "m_defaultExtendedTypes" multiplicity "[]" class_relation private
	    comment " The array to store the default extended types. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2241154 // m_defaultExtendedTypes (<unidirectional association>)
	  b parent class_ref 744450 // ExtendedType
      end

      attribute 1159426 "m_loadFactor"
	class_attribute private explicit_type "float"
	init_value " 0.75f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The default load factor of the Hashtable.
This is used to calcualte the threshold.

"
      end

      attribute 1159554 "m_initialCapacity"
	class_attribute private explicit_type "int"
	init_value " 203"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The initial capacity of the hash table. Use a bigger number
to avoid the cost of expanding the table.

"
      end

      attribute 1159682 "m_capacity"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The capacity of the hash table, i.e. the size of the
internal HashEntry array.

"
      end

      attribute 1159810 "m_threshold"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The threshold of the hash table, which is equal to capacity * loadFactor.
If the number of entries in the hash table is bigger than the threshold,
the hash table needs to be expanded.

"
      end

      class 744578 "HashEntry"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 2241410 // key (<unidirectional association>)
	  relation 2241410 --->
	    a role_name "key" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2241410 // key (<unidirectional association>)
	    b parent class_ref 744450 // ExtendedType
	end

	attribute 1159938 "value"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1160066 "hash"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 2241538 // next (<unidirectional association>)
	  relation 2241538 --->
	    a role_name "next" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2241538 // next (<unidirectional association>)
	    b parent class_ref 744578 // HashEntry
	end

	operation 5228162 "HashEntry"
	  protected explicit_return_type ""
	  nparams 4
	    param inout name "key" type class_ref 744450 // ExtendedType
	    param in name "value" explicit_type "int"
	    param in name "hash" explicit_type "int"
	    param inout name "next" type class_ref 744578 // HashEntry
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 2241282 // m_table (<unidirectional association>)
	relation 2241282 --->
	  a role_name "m_table" multiplicity "[]" private
	    comment "
The internal array to store the hash entries.
Each array member is a slot for a hash bucket.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2241282 // m_table (<unidirectional association>)
	  b parent class_ref 744578 // HashEntry
      end

      extra_member 145410 "initialization"
	
	cpp "" ""
	java "  static {
    m_defaultExtendedTypes = new ExtendedType[DTM.NTYPES];

    for (int i = 0; i < DTM.NTYPES; i++)
    {
      m_defaultExtendedTypes[i] = new ExtendedType(i, \"\", \"\");
    }
  }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 5226498 "ExpandedNameTable"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an expanded name table.
"
      end

      operation 5226626 "initExtendedTypes"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize the vector of extended types with the
 basic DOM node types.
"
      end

      operation 5226754 "getExpandedTypeID"
	public explicit_return_type "int"
	nparams 3
	  param inout name "namespace" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded name represented by namespace, local name and node type,
return an ID.  If the expanded-name does not exist in the internal tables,
the entry will be created, and the ID will be returned.  Any additional
nodes that are created that have this expanded name will use this ID.

@param namespace The namespace
@param localName The local name
@param type The node type

@return the expanded-name id of the node.
"
      end

      operation 5226882 "getExpandedTypeID"
	public explicit_return_type "int"
	nparams 4
	  param inout name "namespace" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param in name "type" explicit_type "int"
	  param inout name "searchOnly" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded name represented by namespace, local name and node type,
return an ID.  If the expanded-name does not exist in the internal tables,
the entry will be created, and the ID will be returned.  Any additional
nodes that are created that have this expanded name will use this ID.
<p>
If searchOnly is true, we will return -1 if the name is not found in the
table, otherwise the name is added to the table and the expanded name id
of the new entry is returned.

@param namespace The namespace
@param localName The local name
@param type The node type
@param searchOnly If it is true, we will only search for the expanded name.
-1 is return is the name is not found.

@return the expanded-name id of the node.
"
      end

      operation 5227010 "rehash"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increases the capacity of and internally reorganizes the hashtable,
in order to accommodate and access its entries more efficiently.
This method is called when the number of keys in the hashtable exceeds
this hashtable's capacity and load factor.
"
      end

      operation 5227138 "getExpandedTypeID"
	public explicit_return_type "int"
	nparams 1
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a type, return an expanded name ID.Any additional nodes that are
created that have this expanded name will use this ID.

@return the expanded-name id of the node.
"
      end

      operation 5227266 "getLocalName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "ExpandedNameID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded-name ID, return the local name part.

@param ExpandedNameID an ID that represents an expanded-name.
@return String Local name of this node, or null if the node has no name.
"
      end

      operation 5227394 "getLocalNameID"
	public explicit_return_type "int"
	nparams 1
	  param in name "ExpandedNameID" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded-name ID, return the local name ID.

@param ExpandedNameID an ID that represents an expanded-name.
@return The id of this local name.
"
      end

      operation 5227522 "getNamespace"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "ExpandedNameID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded-name ID, return the namespace URI part.

@param ExpandedNameID an ID that represents an expanded-name.
@return String URI value of this node's namespace, or null if no
namespace was resolved.
"
      end

      operation 5227650 "getNamespaceID"
	public explicit_return_type "int"
	nparams 1
	  param in name "ExpandedNameID" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded-name ID, return the namespace URI ID.

@param ExpandedNameID an ID that represents an expanded-name.
@return The id of this namespace.
"
      end

      operation 5227778 "getType"
	public explicit_return_type "short"
	nparams 1
	  param in name "ExpandedNameID" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded-name ID, return the local name ID.

@param ExpandedNameID an ID that represents an expanded-name.
@return The id of this local name.
"
      end

      operation 5227906 "getSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the size of the ExpandedNameTable

@return The size of the ExpandedNameTable
"
      end

      operation 5228034 "getExtendedTypes"
	public return_type class_ref 744450 // ExtendedType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the array of extended types

@return The array of extended types
"
      end
    end

    class 633602 "IncrementalSAXSource"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " <p>IncrementalSAXSource is an API that delivers a small number of
SAX events each time a request is made from a \"controller\"
coroutine.  See IncrementalSAXFilter and IncrementalSAXFilter_Xerces
for examples.

Note that interaction is via the deliverMoreNodes
method, and therefore coroutine support is not exposed
here.</p>
"
      operation 5229442 "setContentHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 605954 // ContentHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------------------------------------------------------
 SAX Output API
 ------------------------------------------------------------------
 Register a SAX-style content handler for us to output to
"
      end

      operation 5229570 "setLexicalHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 617602 // LexicalHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Register a SAX-style lexical handler for us to output to
"
      end

      operation 5229698 "setDTDHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 617986 // DTDHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Register a SAX-style DTD handler for us to output to
"
      end

      operation 5229826 "deliverMoreNodes"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "parsemore" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------------------------------------------------------
 Command Input API
 ------------------------------------------------------------------
 deliverMoreNodes() is a simple API which tells the thread in which the
IncrementalSAXSource is running to deliver more events (true),
or stop delivering events and close out its input (false).

This is intended to be called from one of our partner coroutines,
and serves to encapsulate the coroutine communication protocol.

@param parsemore If true, tells the incremental SAX stream to deliver
another chunk of events. If false, finishes out the stream.

@return Boolean.TRUE if the IncrementalSAXSource believes more data
may be available for further parsing. Boolean.FALSE if parsing
ran to completion, or was ended by deliverMoreNodes(false).
"
      end

      operation 5229954 "startParse"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 606594 // InputSource
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------------------------------------------------------
 Parse Thread Convenience API
 ------------------------------------------------------------------
 Launch an XMLReader's parsing operation, feeding events to this
IncrementalSAXSource. In some implementations, this may launch a
thread which runs the previously supplied XMLReader's parse() operation.
In others, it may do other forms of initialization.

@throws SAXException is parse thread is already in progress
or parsing can not be started.
"
      end
    end

    class 633986 "DTMTreeWalker"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class does a pre-order walk of the DTM tree, calling a ContentHandler
interface as it goes. As such, it's more like the Visitor design pattern
than like the DOM's TreeWalker.

I think normally this class should not be needed, because
of DTM#dispatchToEvents.
@xsl.usage advanced
"
      classrelation 2240386 // m_contentHandler (<unidirectional association>)
	relation 2240386 --->
	  a role_name "m_contentHandler" init_value " null" private
	    comment " Local reference to a ContentHandler          
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2240386 // m_contentHandler (<unidirectional association>)
	  b parent class_ref 605954 // ContentHandler
      end

      classrelation 2240514 // m_dtm (<unidirectional association>)
	relation 2240514 --->
	  a role_name "m_dtm" protected
	    comment " DomHelper for this TreeWalker          
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2240514 // m_dtm (<unidirectional association>)
	  b parent class_ref 618754 // DTM
      end

      operation 5223426 "setDTM"
	public explicit_return_type "void"
	nparams 1
	  param inout name "dtm" type class_ref 618754 // DTM
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the DTM to be traversed.

@param dtm The Document Table Model to be used.
"
      end

      operation 5223554 "getcontentHandler"
	public return_type class_ref 605954 // ContentHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the ContentHandler used for the tree walk.

@return the ContentHandler used for the tree walk
"
      end

      operation 5223682 "setcontentHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ch" type class_ref 605954 // ContentHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the ContentHandler used for the tree walk.

@param ch the ContentHandler to be the result of the tree walk.
"
      end

      operation 5223810 "DTMTreeWalker"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.
"
      end

      operation 5223938 "DTMTreeWalker"
	public explicit_return_type ""
	nparams 2
	  param inout name "contentHandler" type class_ref 605954 // ContentHandler
	  param inout name "dtm" type class_ref 618754 // DTM
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.
@param   contentHandler The implemention of the
contentHandler operation (toXMLString, digest, ...)
"
      end

      operation 5224066 "traverse"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Perform a non-recursive pre-order/post-order traversal,
operating as a Visitor. startNode (preorder) and endNode
(postorder) are invoked for each node as we traverse over them,
with the result that the node is written out to m_contentHandler.

@param pos Node in the tree at which to start (and end) traversal --
in other words, the root of the subtree to traverse over.

@throws TransformerException "
      end

      operation 5224194 "traverse"
	public explicit_return_type "void"
	nparams 2
	  param in name "pos" explicit_type "int"
	  param in name "top" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Perform a non-recursive pre-order/post-order traversal,
operating as a Visitor. startNode (preorder) and endNode
(postorder) are invoked for each node as we traverse over them,
with the result that the node is written out to m_contentHandler.

@param pos Node in the tree where to start traversal
@param top Node in the tree where to end traversal.
If top==DTM.NULL, run through end of document.

@throws TransformerException
"
      end

      attribute 1157378 "nextIsRaw"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Flag indicating whether following text to be processed is raw text          
"
      end

      operation 5224322 "dispatachChars"
	private explicit_return_type "void"
	nparams 1
	  param in name "node" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Optimized dispatch of characters.
"
      end

      operation 5224450 "startNode"
	protected explicit_return_type "void"
	nparams 1
	  param in name "node" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Start processing given node


@param node Node to process

@throws org.xml.sax.SAXException
"
      end

      operation 5224578 "endNode"
	protected explicit_return_type "void"
	nparams 1
	  param in name "node" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "End processing of given node


@param node Node we just finished processing

@throws org.xml.sax.SAXException
"
      end
    end

    class 634114 "DTMStringPool"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " <p>DTMStringPool is an \"interning\" mechanism for strings. It will
create a stable 1:1 mapping between a set of string values and a set of
integer index values, so the integers can be used to reliably and
uniquely identify (and when necessary retrieve) the strings.</p>

<p>Design Priorities:
<ul>
<li>String-to-index lookup speed is critical.</li>
<li>Index-to-String lookup speed is slightly less so.</li>
<li>Threadsafety is not guaranteed at this level.
Enforce that in the application if needed.</li>
<li>Storage efficiency is an issue but not a huge one.
It is expected that string pools won't exceed about 2000 entries.</li>
</ul>
</p>

<p>Implementation detail: A standard Hashtable is relatively
inefficient when looking up primitive int values, especially when
we're already maintaining an int-to-string vector.  So I'm
maintaining a simple hash chain within this class.</p>

<p>NOTE: There is nothing in the code that has a real dependency upon
String. It would work with any object type that implements reliable
.hashCode() and .equals() operations. The API enforces Strings because
it's safer that way, but this could trivially be turned into a general
ObjectPool if one was needed.</p>

<p>Status: Passed basic test in main().</p>
"
      classrelation 2234242 // m_intToString (<unidirectional association>)
	relation 2234242 --->
	  a role_name "m_intToString" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2234242 // m_intToString (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      attribute 1154050 "HASHPRIME"
	class_attribute const_attribute package explicit_type "int"
	init_value "101"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1154178 "m_hashStart"
	package explicit_type "int"
	multiplicity "[]"
	init_value "new int[HASHPRIME]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 2234370 // m_hashChain (<unidirectional association>)
	relation 2234370 --->
	  a role_name "m_hashChain" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2234370 // m_hashChain (<unidirectional association>)
	  b parent class_ref 634370 // IntVector
      end

      attribute 1154306 "NULL"
	class_attribute const_attribute public explicit_type "int"
	init_value "-1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 5186178 "DTMStringPool"
	public explicit_return_type ""
	nparams 1
	  param in name "chainSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a DTMStringPool using the given chain size

@param chainSize The size of the hash chain vector
"
      end

      operation 5186306 "DTMStringPool"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5186434 "removeAllElements"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5186562 "indexToString"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "i" explicit_type "int"
	nexceptions 1
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return string whose value is uniquely identified by this integer index.
@throws java.lang.ArrayIndexOutOfBoundsException
 if index doesn't map to a string.
"
      end

      operation 5186690 "stringToIndex"
	public explicit_return_type "int"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return integer index uniquely identifying the value of this string. "
      end

      operation 5186818 "_main"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "args" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Command-line unit test driver. This test relies on the fact that
this version of the pool assigns indices consecutively, starting
from zero, as new unique strings are encountered.
"
      end
    end

    class 742018 "ChunkedIntArray"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>ChunkedIntArray</code> is an extensible array of blocks of integers.
(I'd consider Vector, but it's unable to handle integers except by
turning them into Objects.)

<p>Making this a separate class means some call-and-return overhead. But
doing it all inline tends to be fragile and expensive in coder time,
not to mention driving up code size. If you want to inline it, feel free.
The Java text suggest that private and Final methods may be inlined,
and one can argue that this beast need not be made subclassable...</p>

<p>%REVIEW% This has strong conceptual overlap with the IntVector class.
It would probably be a good thing to merge the two, when time permits.<p>
"
      attribute 1152258 "slotsize"
	const_attribute package explicit_type "int"
	init_value "4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Locked, MUST be power of two in current code"
      end

      attribute 1152386 "lowbits"
	class_attribute const_attribute package explicit_type "int"
	init_value "10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Debugging tip: Cranking lowbits down to 4 or so is a good
 way to pound on the array addressing code.
 How many bits address within chunks"
      end

      attribute 1152514 "chunkalloc"
	class_attribute const_attribute package explicit_type "int"
	init_value "1<<lowbits"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1152642 "lowmask"
	class_attribute const_attribute package explicit_type "int"
	init_value "chunkalloc-1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 742146 "ChunksVector"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1153026 "BLOCKSIZE"
	  const_attribute package explicit_type "int"
	  init_value " 64"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1153154 "m_map"
	  package explicit_type "int"
	  multiplicity "[][]"
	  init_value " new int[BLOCKSIZE][]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1153282 "m_mapSize"
	  package explicit_type "int"
	  init_value " BLOCKSIZE"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1153410 "pos"
	  package explicit_type "int"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 5184002 "ChunksVector"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 5184130 "size"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 5184258 "addElement"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "value" explicit_type "int"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 5184386 "elementAt"
	  package explicit_return_type "int"
	  nparams 1
	    param in name "pos" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 2233858 // chunks (<unidirectional association>)
	relation 2233858 --->
	  a role_name "chunks" init_value "new ChunksVector()" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2233858 // chunks (<unidirectional association>)
	  b parent class_ref 742146 // ChunksVector
      end

      attribute 1152770 "fastArray"
	const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value " new int[chunkalloc]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1152898 "lastUsed"
	package explicit_type "int"
	init_value "0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 5182850 "ChunkedIntArray"
	package explicit_return_type ""
	nparams 1
	  param in name "slotsize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new CIA with specified record size. Currently record size MUST
be a power of two... and in fact is hardcoded to 4.
"
      end

      operation 5182978 "appendSlot"
	package explicit_return_type "int"
	nparams 4
	  param in name "w0" explicit_type "int"
	  param in name "w1" explicit_type "int"
	  param in name "w2" explicit_type "int"
	  param in name "w3" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a 4-integer record to the CIA, starting with record 1. (Since
arrays are initialized to all-0, 0 has been reserved as the \"unknown\"
value in DTM.)
@return the index at which this record was inserted.
"
      end

      operation 5183106 "readEntry"
	package explicit_return_type "int"
	nparams 2
	  param in name "position" explicit_type "int"
	  param in name "offset" explicit_type "int"
	nexceptions 1
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve an integer from the CIA by record number and column within
the record, both 0-based (though position 0 is reserved for special
purposes).
@param position int Record number
@param slotpos int Column number
"
      end

      operation 5183234 "specialFind"
	package explicit_return_type "int"
	nparams 2
	  param in name "startPos" explicit_type "int"
	  param in name "position" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check that the node at index \"position\" is not an ancestor
 of the node at index \"startPos\". IF IT IS, DO NOT ACCEPT IT AND
 RETURN -1. If position is NOT an ancestor, return position.
 Special case: The Document node (position==0) is acceptable.

 This test supports DTM.getNextPreceding."
      end

      operation 5183362 "slotsUsed"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return int index of highest-numbered record currently in use
"
      end

      operation 5183490 "discardLast"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Disard the highest-numbered record. This is used in the string-buffer
CIA; when only a single characters() chunk has been recieved, its index
is moved into the Text node rather than being referenced by indirection
into the text accumulator.
"
      end

      operation 5183618 "writeEntry"
	package explicit_return_type "void"
	nparams 3
	  param in name "position" explicit_type "int"
	  param in name "offset" explicit_type "int"
	  param in name "value" explicit_type "int"
	nexceptions 1
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overwrite the integer found at a specific record and column.
Used to back-patch existing records, most often changing their
\"next sibling\" reference from 0 (unknown) to something meaningful
@param position int Record number
@param offset int Column number
@param value int New contents
"
      end

      operation 5183746 "writeSlot"
	package explicit_return_type "void"
	nparams 5
	  param in name "position" explicit_type "int"
	  param in name "w0" explicit_type "int"
	  param in name "w1" explicit_type "int"
	  param in name "w2" explicit_type "int"
	  param in name "w3" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overwrite an entire (4-integer) record at the specified index.
Mostly used to create record 0, the Document node.
@param position integer Record number
@param w0 int
@param w1 int
@param w2 int
@param w3 int
"
      end

      operation 5183874 "readSlot"
	package explicit_return_type "void"
	nparams 2
	  param in name "position" explicit_type "int"
	  param inout name "buffer" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the contents of a record into a user-supplied buffer array.
Used to reduce addressing overhead when code will access several
columns of the record.
@param position int Record number
@param buffer int[] Integer array provided by user, must be large enough
to hold a complete record.
"
      end
    end

    class 742402 "CoroutineManager"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Support the coroutine design pattern.</p>

<p>A coroutine set is a very simple cooperative non-preemptive
multitasking model, where the switch from one task to another is
performed via an explicit request. Coroutines interact according to
the following rules:</p>

<ul>
<li>One coroutine in the set has control, which it retains until it
either exits or resumes another coroutine.</li>
<li>A coroutine is activated when it is resumed by some other coroutine
for the first time.</li>
<li>An active coroutine that gives up control by resuming another in
the set retains its context -- including call stack and local variables
-- so that if/when it is resumed, it will proceed from the point at which
it last gave up control.</li>
</ul>

<p>Coroutines can be thought of as falling somewhere between pipes and
subroutines. Like call/return, there is an explicit flow of control
from one coroutine to another. Like pipes, neither coroutine is
actually \"in charge\", and neither must exit in order to transfer
control to the other. </p>

<p>One classic application of coroutines is in compilers, where both
the parser and the lexer are maintaining complex state
information. The parser resumes the lexer to process incoming
characters into lexical tokens, and the lexer resumes the parser
when it has reached a point at which it has a reliably interpreted
set of tokens available for semantic processing. Structuring this
as call-and-return would require saving and restoring a
considerable amount of state each time. Structuring it as two tasks
connected by a queue may involve higher overhead (in systems which
can optimize the coroutine metaphor), isn't necessarily as clear in
intent, may have trouble handling cases where data flows in both
directions, and may not handle some of the more complex cases where
more than two coroutines are involved.</p>

<p>Most coroutine systems also provide a way to pass data between the
source and target of a resume operation; this is sometimes referred
to as \"yielding\" a value.  Others rely on the fact that, since only
one member of a coroutine set is running at a time and does not
lose control until it chooses to do so, data structures may be
directly shared between them with only minimal precautions.</p>

<p>\"Note: This should not be taken to mean that producer/consumer
problems should be always be done with coroutines.\" Queueing is
often a better solution when only two threads of execution are
involved and full two-way handshaking is not required. It's a bit
difficult to find short pedagogical examples that require
coroutines for a clear solution.</p>

<p>The fact that only one of a group of coroutines is running at a
time, and the control transfer between them is explicit, simplifies
their possible interactions, and in some implementations permits
them to be implemented more efficiently than general multitasking.
In some situations, coroutines can be compiled out entirely;
in others, they may only require a few instructions more than a
simple function call.</p>

<p>This version is built on top of standard Java threading, since
that's all we have available right now. It's been encapsulated for
code clarity and possible future optimization.</p>

<p>(Two possible approaches: wait-notify based and queue-based. Some
folks think that a one-item queue is a cleaner solution because it's
more abstract -- but since coroutine _is_ an abstraction I'm not really
worried about that; folks should be able to switch this code without
concern.)</p>

<p>%TBD% THIS SHOULD BE AN INTERFACE, to facilitate building other
implementations... perhaps including a true coroutine system
someday, rather than controlled threading. Arguably Coroutine
itself should be an interface much like Runnable, but I think that
can be built on top of this.</p>
"
      classrelation 2233986 // m_activeIDs (<unidirectional association>)
	relation 2233986 --->
	  a role_name "m_activeIDs" init_value "new BitSet()" package
	    comment " \"Is this coroutine ID number already in use\" lookup table.
Currently implemented as a bitset as a compromise between
compactness and speed of access, but obviously other solutions
could be applied.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2233986 // m_activeIDs (<unidirectional association>)
	  b parent class_ref 238082 // BitSet
      end

      attribute 1153538 "m_unreasonableId"
	class_attribute const_attribute package explicit_type "int"
	init_value "1024"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Limit on the coroutine ID numbers accepted. I didn't want the
in-use table to grow without bound. If we switch to a more efficient
sparse-array mechanism, it may be possible to raise or eliminate
this boundary.
@xsl.usage internal

"
      end

      classrelation 2234114 // m_yield (<unidirectional association>)
	relation 2234114 --->
	  a role_name "m_yield" init_value "null" package
	    comment " Internal field used to hold the data being explicitly passed
from one coroutine to another during a co_resume() operation.
(Of course implicit data sharing may also occur; one of the reasons
for using coroutines is that you're guaranteed that none of the
other coroutines in your set are using shared structures at the time
you access them.)

%REVIEW% It's been proposed that we be able to pass types of data
other than Object -- more specific object types, or
lighter-weight primitives.  This would seem to create a potential
explosion of \"pass x recieve y back\" methods (or require
fracturing resume into two calls, resume-other and
wait-to-be-resumed), and the weight issue could be managed by
reusing a mutable buffer object to contain the primitive
(remember that only one coroutine runs at a time, so once the
buffer's set it won't be walked on). Typechecking objects is
interesting from a code-robustness point of view, but it's
unclear whether it makes sense to encapsulate that in the
coroutine code or let the callers do it, since it depends on RTTI
either way. Restricting the parameters to objects implementing a
specific CoroutineParameter interface does _not_ seem to be a net
win; applications can do so if they want via front-end code, but
there seem to be too many use cases involving passing an existing
object type that you may not have the freedom to alter and may
not want to spend time wrapping another object around.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2234114 // m_yield (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1153666 "NOBODY"
	class_attribute const_attribute package explicit_type "int"
	init_value "-1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Expose???
"
      end

      attribute 1153794 "ANYBODY"
	class_attribute const_attribute package explicit_type "int"
	init_value "-1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1153922 "m_nextCoroutine"
	package explicit_type "int"
	init_value "NOBODY"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Internal field used to confirm that the coroutine now waking up is
in fact the one we intended to resume. Some such selection mechanism
is needed when more that two coroutines are operating within the same
group.

"
      end

      operation 5184514 "co_joinCoroutineSet"
	public explicit_return_type "int"
	nparams 1
	  param in name "coroutineID" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <p>Each coroutine in the set managed by a single
CoroutineManager is identified by a small positive integer. This
brings up the question of how to manage those integers to avoid
reuse... since if two coroutines use the same ID number, resuming
that ID could resume either. I can see arguments for either
allowing applications to select their own numbers (they may want
to declare mnemonics via manefest constants) or generating
numbers on demand.  This routine's intended to support both
approaches.</p>

<p>%REVIEW% We could use an object as the identifier. Not sure
it's a net gain, though it would allow the thread to be its own
ID. Ponder.</p>

@param coroutineID  If >=0, requests that we reserve this number.
If <0, requests that we find, reserve, and return an available ID
number.

@return If >=0, the ID number to be used by this coroutine. If <0,
an error occurred -- the ID requested was already in use, or we
couldn't assign one without going over the \"unreasonable value\" mark
"
      end

      operation 5184642 "co_entry_pause"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "thisCoroutine" explicit_type "int"
	nexceptions 1
	  exception class_ref 742530 // NoSuchMethodException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " In the standard coroutine architecture, coroutines are
identified by their method names and are launched and run up to
their first yield by simply resuming them; its's presumed that
this recognizes the not-already-running case and does the right
thing. We seem to need a way to achieve that same threadsafe
run-up...  eg, start the coroutine with a wait.

%TBD% whether this makes any sense...

@param thisCoroutine the identifier of this coroutine, so we can
recognize when we are being resumed.
@exception java.lang.NoSuchMethodException if thisCoroutine isn't
a registered member of this group. %REVIEW% whether this is the
best choice.
"
      end

      operation 5184770 "co_resume"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "arg_object" type class_ref 129538 // Object
	  param in name "thisCoroutine" explicit_type "int"
	  param in name "toCoroutine" explicit_type "int"
	nexceptions 1
	  exception class_ref 742530 // NoSuchMethodException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Transfer control to another coroutine which has already been started and
is waiting on this CoroutineManager. We won't return from this call
until that routine has relinquished control.

%TBD% What should we do if toCoroutine isn't registered? Exception?

@param arg_object A value to be passed to the other coroutine.
@param thisCoroutine Integer identifier for this coroutine. This is the
ID we watch for to see if we're the ones being resumed.
@param toCoroutine  Integer identifier for the coroutine we wish to
invoke.
@exception java.lang.NoSuchMethodException if toCoroutine isn't a
registered member of this group. %REVIEW% whether this is the best choice.
"
      end

      operation 5184898 "co_exit"
	public explicit_return_type "void"
	nparams 1
	  param in name "thisCoroutine" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Terminate this entire set of coroutines. The others will be
deregistered and have exceptions thrown at them. Note that this
is intended as a panic-shutdown operation; under normal
circumstances a coroutine should always end with co_exit_to() in
order to politely inform at least one of its partners that it is
going away.

%TBD% This may need significantly more work.

%TBD% Should this just be co_exit_to(,,CoroutineManager.PANIC)?

@param thisCoroutine Integer identifier for the coroutine requesting exit.
"
      end

      operation 5185026 "co_exit_to"
	public explicit_return_type "void"
	nparams 3
	  param inout name "arg_object" type class_ref 129538 // Object
	  param in name "thisCoroutine" explicit_type "int"
	  param in name "toCoroutine" explicit_type "int"
	nexceptions 1
	  exception class_ref 742530 // NoSuchMethodException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Make the ID available for reuse and terminate this coroutine,
transferring control to the specified coroutine. Note that this
returns immediately rather than waiting for any further coroutine
traffic, so the thread can proceed with other shutdown activities.

@param arg_object    A value to be passed to the other coroutine.
@param thisCoroutine Integer identifier for the coroutine leaving the set.
@param toCoroutine   Integer identifier for the coroutine we wish to
invoke.
@exception java.lang.NoSuchMethodException if toCoroutine isn't a
registered member of this group. %REVIEW% whether this is the best choice.
"
      end
    end

    class 742658 "CoroutineParser"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " <p>CoroutineParser is an API for parser threads that operate as
coroutines. See CoroutineSAXParser and CoroutineSAXParser_Xerces
for examples.</p>

<p>&lt;grumble&gt; I'd like the interface to require a specific form
for either the base constructor or a static factory method. Java
doesn't allow us to specify either, so I'll just document them
here:

<ul>
<li>public CoroutineParser(CoroutineManager co, int appCoroutine);</li>
<li>public CoroutineParser createCoroutineParser(CoroutineManager co, int appCoroutine);</li>
</ul>

&lt;/grumble&gt;</p>

@deprecated Since the ability to start a parse via the
coroutine protocol was not being used and was complicating design.
See {@link IncrementalSAXSource}.
"
      operation 5185154 "getParserCoroutineID"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return the coroutine ID number for this CoroutineParser object.
Note that this isn't useful unless you know which CoroutineManager
you're talking to. Also note that the do...() methods encapsulate
the common transactions with the CoroutineParser, so you shouldn't
need this in most cases.
"
      end

      operation 5185282 "getCoroutineManager"
	public return_type class_ref 742402 // CoroutineManager
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return the CoroutineManager for this CoroutineParser object.
If you're using the do...() methods, applications should only
need to talk to the CoroutineManager once, to obtain the
application's Coroutine ID.
"
      end

      operation 5185410 "setContentHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 605954 // ContentHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Register a SAX-style content handler for us to output to "
      end

      operation 5185538 "setLexHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 617602 // LexicalHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Register a SAX-style lexical handler for us to output to
 Not all parsers support this...

%REVIEW% Not called setLexicalHandler because Xalan uses that name
internally, which causes subclassing nuisances.
"
      end

      operation 5185666 "doParse"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "source" type class_ref 606594 // InputSource
	  param in name "appCoroutine" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The run() method is required in CoroutineParsers that run as
threads (of course)... but it isn't part of our API, and
shouldn't be declared here.

================================================================
 doParse() is a simple API which tells the coroutine parser
to begin reading from a file.  This is intended to be called from one
of our partner coroutines, and serves both to encapsulate the
communication protocol and to avoid having to explicitly use the
CoroutineParser's coroutine ID number.

%REVIEW% Can/should this unify with doMore? (if URI hasn't changed,
parse more from same file, else end and restart parsing...?

@param source The InputSource to parse from.
@param appCoroutine The coroutine ID number of the coroutine invoking
this method, so it can be resumed after the parser has responded to the
request.
@return Boolean.TRUE if the CoroutineParser believes more data may be available
for further parsing. Boolean.FALSE if parsing ran to completion.
Exception if the parser objected for some reason.
"
      end

      operation 5185794 "doMore"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "parsemore" explicit_type "boolean"
	  param in name "appCoroutine" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doMore() is a simple API which tells the coroutine parser
that we need more nodes.  This is intended to be called from one
of our partner coroutines, and serves both to encapsulate the
communication protocol and to avoid having to explicitly use the
CoroutineParser's coroutine ID number.

@param parsemore If true, tells the incremental parser to generate
another chunk of output. If false, tells the parser that we're
satisfied and it can terminate parsing of this document.
@param appCoroutine The coroutine ID number of the coroutine invoking
this method, so it can be resumed after the parser has responded to the
request.
@return Boolean.TRUE if the CoroutineParser believes more data may be available
for further parsing. Boolean.FALSE if parsing ran to completion.
Exception if the parser objected for some reason.
"
      end

      operation 5185922 "doTerminate"
	public explicit_return_type "void"
	nparams 1
	  param in name "appCoroutine" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doTerminate() is a simple API which tells the coroutine
parser to terminate itself.  This is intended to be called from
one of our partner coroutines, and serves both to encapsulate the
communication protocol and to avoid having to explicitly use the
CoroutineParser's coroutine ID number.

Returns only after the CoroutineParser has acknowledged the request.

@param appCoroutine The coroutine ID number of the coroutine invoking
this method, so it can be resumed after the parser has responded to the
request.
"
      end

      operation 5186050 "init"
	public explicit_return_type "void"
	nparams 3
	  param inout name "co" type class_ref 742402 // CoroutineManager
	  param in name "appCoroutineID" explicit_type "int"
	  param inout name "parser" type class_ref 606466 // XMLReader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize the coroutine parser. Same parameters could be passed
in a non-default constructor, or by using using context ClassLoader
and newInstance and then calling init()
"
      end
    end

    class 742786 "CustomStringPool"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "CustomStringPool is an example of an application-provided data structure for a
DTM implementation to hold symbol references, e.g. element names. It will
follow the DTMStringPool interface and use two simple methods
indexToString(int i) and stringToIndex(String s) to map between a set of
string values and a set of integer index values. Therefore, an application
may improve DTM processing speed by substituting the DTM symbol resolution
tables with application specific quick symbol resolution tables.
<p>
%REVIEW% The only difference between this an DTMStringPool seems to be that
it uses a java.lang.Hashtable full of Integers rather than implementing its
own hashing. Joe deliberately avoided that approach when writing
DTMStringPool, since it is both much more memory-hungry and probably slower
-- especially in JDK 1.1.x, where Hashtable is synchronized. We need to
either justify this implementation or discard it.

<p>
Status: In progress, under discussion.

"
      classrelation 2234498 // <generalisation>
	relation 2234498 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2234498 // <generalisation>
	  b parent class_ref 634114 // DTMStringPool
      end

      classrelation 2234626 // m_stringToInt (<unidirectional association>)
	relation 2234626 --->
	  a role_name "m_stringToInt" init_value " new HashMap<>()" const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Integer> ${name}${value};
"
	    classrelation_ref 2234626 // m_stringToInt (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      attribute 1154434 "NULL"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 5186946 "CustomStringPool"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5187074 "removeAllElements"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5187202 "indexToString"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "i" explicit_type "int"
	nexceptions 1
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@return string whose value is uniquely identified by this integer index.
@throws java.lang.ArrayIndexOutOfBoundsException if index doesn't map to
a string.
"
      end

      operation 5187330 "stringToIndex"
	public explicit_return_type "int"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@return integer index uniquely identifying the value of this string.
"
      end
    end

    class 742914 "DTMAxisIterNodeList"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>DTMAxisNodeList</code> gives us an implementation of the DOM's
NodeList interface wrapped around a DTM Iterator. The author
considers this something of an abominations, since NodeList was not
intended to be a general purpose \"list of nodes\" API and is
generally considered by the DOM WG to have be a mistake... but I'm
told that some of the XPath/XSLT folks say they must have this
solution.

Please note that this is not necessarily equivlaent to a DOM
NodeList operating over the same document. In particular:
<ul>

<li>If there are several Text nodes in logical succession (ie,
across CDATASection and EntityReference boundaries), we will return
only the first; the caller is responsible for stepping through
them.
(%REVIEW% Provide a convenience routine here to assist, pending
proposed DOM Level 3 getAdjacentText() operation?) </li>

<li>Since the whole XPath/XSLT architecture assumes that the source
document is not altered while we're working with it, we do not
promise to implement the DOM NodeList's \"live view\" response to
document mutation. </li>

</ul>

<p>State: In progress!!</p>
"
      classrelation 2234882 // <generalisation>
	relation 2234882 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2234882 // <generalisation>
	  b parent class_ref 743042 // DTMNodeListBase
      end

      classrelation 2235010 // m_dtm (<unidirectional association>)
	relation 2235010 --->
	  a role_name "m_dtm" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2235010 // m_dtm (<unidirectional association>)
	  b parent class_ref 618754 // DTM
      end

      classrelation 2235138 // m_iter (<unidirectional association>)
	relation 2235138 --->
	  a role_name "m_iter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2235138 // m_iter (<unidirectional association>)
	  b parent class_ref 590082 // DTMAxisIterator
      end

      classrelation 2235266 // m_cachedNodes (<unidirectional association>)
	relation 2235266 --->
	  a role_name "m_cachedNodes" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2235266 // m_cachedNodes (<unidirectional association>)
	  b parent class_ref 634370 // IntVector
      end

      attribute 1154562 "m_last"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 5187842 "DTMAxisIterNodeList"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Methods unique to this class"
      end

      operation 5187970 "DTMAxisIterNodeList"
	public explicit_return_type ""
	nparams 2
	  param inout name "dtm" type class_ref 618754 // DTM
	  param inout name "dtmAxisIterator" type class_ref 590082 // DTMAxisIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Public constructor: Wrap a DTMNodeList around an existing
and preconfigured DTMAxisIterator
"
      end

      operation 5188098 "getDTMAxisIterator"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Access the wrapped DTMIterator. I'm not sure whether anyone will
need this or not, but let's write it and think about it.

"
      end

      operation 5188226 "item"
	public return_type class_ref 317570 // Node
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 org.w3c.dom.NodeList API follows

Returns the <code>index</code>th item in the collection. If
<code>index</code> is greater than or equal to the number of nodes in
the list, this returns <code>null</code>.
@param index Index into the collection.
@return The node at the <code>index</code>th position in the
  <code>NodeList</code>, or <code>null</code> if that is not a valid
  index.
"
      end

      operation 5188354 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The number of nodes in the list. The range of valid child node indices
is 0 to <code>length-1</code> inclusive.
"
      end
    end

    class 743042 "DTMNodeListBase"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>DTMNodeList</code> gives us an implementation of the DOM's
NodeList interface wrapped around a DTM Iterator. The author
considers this something of an abominations, since NodeList was not
intended to be a general purpose \"list of nodes\" API and is
generally considered by the DOM WG to have be a mistake... but I'm
told that some of the XPath/XSLT folks say they must have this
solution.

Please note that this is not necessarily equivlaent to a DOM
NodeList operating over the same document. In particular:
<ul>

<li>If there are several Text nodes in logical succession (ie,
across CDATASection and EntityReference boundaries), we will return
only the first; the caller is responsible for stepping through
them.
(%REVIEW% Provide a convenience routine here to assist, pending
proposed DOM Level 3 getAdjacentText() operation?) </li>

<li>Since the whole XPath/XSLT architecture assumes that the source
document is not altered while we're working with it, we do not
promise to implement the DOM NodeList's \"live view\" response to
document mutation. </li>

</ul>

<p>State: In progress!!</p>

"
      classrelation 2234754 // <realization>
	relation 2234754 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2234754 // <realization>
	  b parent class_ref 333058 // NodeList
      end

      operation 5187458 "DTMNodeListBase"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5187586 "item"
	public return_type class_ref 317570 // Node
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 org.w3c.dom.NodeList API follows

Returns the <code>index</code>th item in the collection. If
<code>index</code> is greater than or equal to the number of nodes in
the list, this returns <code>null</code>.
@param index Index into the collection.
@return The node at the <code>index</code>th position in the
  <code>NodeList</code>, or <code>null</code> if that is not a valid
  index.
"
      end

      operation 5187714 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The number of nodes in the list. The range of valid child node indices
is 0 to <code>length-1</code> inclusive.
"
      end
    end

    class 743170 "DTMChildIterNodeList"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>DTMNodeList</code> gives us an implementation of the DOM's
NodeList interface wrapped around a DTM Iterator. The author
considers this something of an abominations, since NodeList was not
intended to be a general purpose \"list of nodes\" API and is
generally considered by the DOM WG to have be a mistake... but I'm
told that some of the XPath/XSLT folks say they must have this
solution.

Please note that this is not necessarily equivlaent to a DOM
NodeList operating over the same document. In particular:
<ul>

<li>If there are several Text nodes in logical succession (ie,
across CDATASection and EntityReference boundaries), we will return
only the first; the caller is responsible for stepping through
them.
(%REVIEW% Provide a convenience routine here to assist, pending
proposed DOM Level 3 getAdjacentText() operation?) </li>

<li>Since the whole XPath/XSLT architecture assumes that the source
document is not altered while we're working with it, we do not
promise to implement the DOM NodeList's \"live view\" response to
document mutation. </li>

</ul>

<p>State: In progress!!</p>
"
      classrelation 2235394 // <generalisation>
	relation 2235394 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2235394 // <generalisation>
	  b parent class_ref 743042 // DTMNodeListBase
      end

      attribute 1154690 "m_firstChild"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 2235522 // m_parentDTM (<unidirectional association>)
	relation 2235522 --->
	  a role_name "m_parentDTM" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2235522 // m_parentDTM (<unidirectional association>)
	  b parent class_ref 618754 // DTM
      end

      operation 5188482 "DTMChildIterNodeList"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Methods unique to this class"
      end

      operation 5188610 "DTMChildIterNodeList"
	public explicit_return_type ""
	nparams 2
	  param inout name "parentDTM" type class_ref 618754 // DTM
	  param in name "parentHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Public constructor: Create a NodeList to support
DTMNodeProxy.getChildren().

Unfortunately AxisIterators and DTMIterators don't share an API,
so I can't use the existing Axis.CHILD iterator. Rather than
create Yet Another Class, let's set up a special case of this
one.

@param parentDTM The DTM containing this node
@param parentHandle DTM node-handle integer

"
      end

      operation 5188738 "item"
	public return_type class_ref 317570 // Node
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 org.w3c.dom.NodeList API follows

Returns the <code>index</code>th item in the collection. If
<code>index</code> is greater than or equal to the number of nodes in
the list, this returns <code>null</code>.
@param index Index into the collection.
@return The node at the <code>index</code>th position in the
  <code>NodeList</code>, or <code>null</code> if that is not a valid
  index.
"
      end

      operation 5188866 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The number of nodes in the list. The range of valid child node indices
is 0 to <code>length-1</code> inclusive.
"
      end
    end

    class 743298 "DTMDocumentImpl"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the implementation of the DTM document interface.  It receives
requests from an XML content handler similar to that of an XML DOM or SAX parser
to store information from the xml document in an array based
dtm table structure.  This informtion is used later for document navigation,
query, and SAX event dispatch functions. The DTM can also be used directly as a
document composition model for an application.  The requests received are:
<ul>
<li>initiating DTM to set the doc handle</li>
<li>resetting DTM for data structure reuse</li>
<li>hinting the end of document to adjust the end of data structure pointers</li>
<li>createnodes (element, comment, text, attribute, ....)</li>
<li>hinting the end of an element to patch parent and siblings<li>
<li>setting application provided symbol name stringpool data structures</li>
</ul>
<p>State: In progress!!</p>

%REVIEW% I _think_ the SAX convention is that \"no namespace\" is expressed
as \"\" rather than as null (which is the DOM's convention). What should
DTM expect? What should it do with the other?

<p>Origin: the implemention is a composite logic based on the DTM of XalanJ1 and
    DocImpl, DocumentImpl, ElementImpl, TextImpl, etc. of XalanJ2</p>
"
      classrelation 2235650 // <realization>
	relation 2235650 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2235650 // <realization>
	  b parent class_ref 618754 // DTM
      end

      classrelation 2235778 // <realization>
	relation 2235778 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2235778 // <realization>
	  b parent class_ref 605954 // ContentHandler
      end

      classrelation 2235906 // <realization>
	relation 2235906 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2235906 // <realization>
	  b parent class_ref 617602 // LexicalHandler
      end

      attribute 1154818 "DOCHANDLE_SHIFT"
	class_attribute const_attribute protected explicit_type "byte"
	init_value " 22"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of lower bits used to represent node index.
"
      end

      attribute 1154946 "NODEHANDLE_MASK"
	class_attribute const_attribute protected explicit_type "int"
	init_value " (1 << (DOCHANDLE_SHIFT + 1)) - 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Masks the lower order of node handle.
 Same as {@link DTMConstructor.IDENT_NODE_DEFAULT}
"
      end

      attribute 1155074 "DOCHANDLE_MASK"
	class_attribute const_attribute protected explicit_type "int"
	init_value " -1 - NODEHANDLE_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Masks the higher order Document handle
 Same as {@link DTMConstructor.IDENT_DOC_DEFAULT}
"
      end

      attribute 1155202 "m_docHandle"
	package explicit_type "int"
	init_value " NULL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " masked document handle for this dtm document"
      end

      attribute 1155330 "m_docElement"
	package explicit_type "int"
	init_value " NULL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " nodeHandle to the root of the actual dtm doc content"
      end

      attribute 1155458 "currentParent"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Context for parse-and-append operations
 current parent - default is document root"
      end

      attribute 1155586 "previousSibling"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " previous sibling - no previous sibling"
      end

      attribute 1155714 "m_currentNode"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " current node"
      end

      attribute 1155842 "previousSiblingWasParent"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The tree under construction can itself be used as
 the element stack, so m_elemStack isn't needed.
protected Stack m_elemStack = new Stack();     // element stack
"
      end

      attribute 1155970 "gotslot"
	package explicit_type "int"
	multiplicity "[]"
	init_value " new int[4]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Local cache for record-at-a-time fetch
"
      end

      attribute 1156098 "done"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " endDocument recieved?
"
      end

      attribute 1156226 "m_isError"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1156354 "DEBUG"
	const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 2236034 // m_documentBaseURI (<unidirectional association>)
	relation 2236034 --->
	  a role_name "m_documentBaseURI" protected
	    comment " The document base URI. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2236034 // m_documentBaseURI (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2236162 // m_incrSAXSource (<unidirectional association>)
	relation 2236162 --->
	  a role_name "m_incrSAXSource" init_value "null" private
	    comment " If we're building the model incrementally on demand, we need to
be able to tell the source when to send us more data.

Note that if this has not been set, and you attempt to read ahead
of the current build point, we'll probably throw a null-pointer
exception. We could try to wait-and-retry instead, as a very poor
fallback, but that has all the known problems with multithreading
on multiprocessors and we Don't Want to Go There.

@see setIncrementalSAXSource

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2236162 // m_incrSAXSource (<unidirectional association>)
	  b parent class_ref 633602 // IncrementalSAXSource
      end

      classrelation 2236290 // nodes (<unidirectional association>)
	relation 2236290 --->
	  a role_name "nodes" init_value " new ChunkedIntArray(4)" package
	    comment " ========= DTM data structure declarations. ==============
 nodes array: integer array blocks to hold the first level reference of the nodes,
 each reference slot is addressed by a nodeHandle index value.
 Assumes indices are not larger than {@link NODEHANDLE_MASK}
 ({@link DOCHANDLE_SHIFT} bits).
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2236290 // nodes (<unidirectional association>)
	  b parent class_ref 742018 // ChunkedIntArray
      end

      classrelation 2236418 // m_char (<unidirectional association>)
	relation 2236418 --->
	  a role_name "m_char" init_value " new FastStringBuffer()" private
	    comment " text/comment table: string buffer to hold the text string values of the document,
 each of which is addressed by the absolute offset and length in the buffer
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2236418 // m_char (<unidirectional association>)
	  b parent class_ref 633730 // FastStringBuffer
      end

      attribute 1156482 "m_char_current_start"
	private explicit_type "int"
	init_value "0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Start of string currently being accumulated into m_char;
 needed because the string may be appended in several chunks.
"
      end

      classrelation 2236546 // m_localNames (<unidirectional association>)
	relation 2236546 --->
	  a role_name "m_localNames" init_value " new DTMStringPool()" private
	    comment " %TBD% INITIALIZATION/STARTUP ISSUES
 -- Should we really be creating these, or should they be
 passed in from outside? Scott want to be able to share
 pools across multiple documents, so setting them here is
 probably not the right default.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2236546 // m_localNames (<unidirectional association>)
	  b parent class_ref 634114 // DTMStringPool
      end

      classrelation 2236674 // m_nsNames (<unidirectional association>)
	relation 2236674 --->
	  a role_name "m_nsNames" init_value " new DTMStringPool()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2236674 // m_nsNames (<unidirectional association>)
	  b parent class_ref 634114 // DTMStringPool
      end

      classrelation 2236802 // m_prefixNames (<unidirectional association>)
	relation 2236802 --->
	  a role_name "m_prefixNames" init_value " new DTMStringPool()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2236802 // m_prefixNames (<unidirectional association>)
	  b parent class_ref 634114 // DTMStringPool
      end

      classrelation 2236930 // m_expandedNames (<unidirectional association>)
	relation 2236930 --->
	  a role_name "m_expandedNames" init_value "
                new ExpandedNameTable()" private
	    comment " %TBD% If we use the current ExpandedNameTable mapper, it
 needs to be bound to the NS and local name pools. Which
 means it needs to attach to them AFTER we've resolved their
 startup. Or it needs to attach to this document and
 retrieve them each time. Or this needs to be
 an interface _implemented_ by this class... which might be simplest!
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2236930 // m_expandedNames (<unidirectional association>)
	  b parent class_ref 627074 // ExpandedNameTable
      end

      classrelation 2237058 // m_xsf (<unidirectional association>)
	relation 2237058 --->
	  a role_name "m_xsf" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2237058 // m_xsf (<unidirectional association>)
	  b parent class_ref 626946 // XMLStringFactory
      end

      operation 5188994 "DTMDocumentImpl"
	public explicit_return_type ""
	nparams 4
	  param inout name "mgr" type class_ref 619266 // DTMManager
	  param in name "documentNumber" explicit_type "int"
	  param inout name "whiteSpaceFilter" type class_ref 620162 // DTMWSFilter
	  param inout name "xstringfactory" type class_ref 626946 // XMLStringFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a DTM.

@param documentNumber the ID number assigned to this document.
It will be shifted up into the high bits and returned as part of
all node ID numbers, so those IDs indicate which document they
came from as well as a location within the document. It is the
DTMManager's responsibility to assign a unique number to each
document.
"
      end

      operation 5189122 "setIncrementalSAXSource"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 633602 // IncrementalSAXSource
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bind a IncrementalSAXSource to this DTM. If we discover we need nodes
that have not yet been built, we will ask this object to send us more
events, and it will manage interactions with its data sources.

Note that we do not actually build the IncrementalSAXSource, since we don't
know what source it's reading from, what thread that source will run in,
or when it will run.

@param source The IncrementalSAXSource that we want to recieve events from
on demand.
"
      end

      operation 5189250 "appendNode"
	private explicit_return_type "int"
	nparams 4
	  param in name "w0" explicit_type "int"
	  param in name "w1" explicit_type "int"
	  param in name "w2" explicit_type "int"
	  param in name "w3" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wrapper for ChunkedIntArray.append, to automatically update the
previous sibling's \"next\" reference (if necessary) and periodically
wake a reader who may have encountered incomplete data and entered
a wait state.
@param w0 int As in ChunkedIntArray.append
@param w1 int As in ChunkedIntArray.append
@param w2 int As in ChunkedIntArray.append
@param w3 int As in ChunkedIntArray.append
@return int As in ChunkedIntArray.append
@see ChunkedIntArray.append
"
      end

      operation 5189378 "setFeature"
	public explicit_return_type "void"
	nparams 2
	  param inout name "featureId" type class_ref 128130 // String
	  param inout name "state" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ========= DTM Implementation Control Functions. ==============

Set an implementation dependent feature.
<p>
%REVIEW% Do we really expect to set features on DTMs?

@param featureId A feature URL.
@param state true if this feature should be on, false otherwise.
"
      end

      operation 5189506 "setLocalNameTable"
	public explicit_return_type "void"
	nparams 1
	  param inout name "poolRef" type class_ref 634114 // DTMStringPool
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a reference pointer to the element name symbol table.
%REVIEW% Should this really be Public? Changing it while
DTM is in use would be a disaster.

@param poolRef DTMStringPool reference to an instance of table.
"
      end

      operation 5189634 "getLocalNameTable"
	public return_type class_ref 634114 // DTMStringPool
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a reference pointer to the element name symbol table.

@return DTMStringPool reference to an instance of table.
"
      end

      operation 5189762 "setNsNameTable"
	public explicit_return_type "void"
	nparams 1
	  param inout name "poolRef" type class_ref 634114 // DTMStringPool
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a reference pointer to the namespace URI symbol table.
%REVIEW% Should this really be Public? Changing it while
DTM is in use would be a disaster.

@param poolRef DTMStringPool reference to an instance of table.
"
      end

      operation 5189890 "getNsNameTable"
	public return_type class_ref 634114 // DTMStringPool
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a reference pointer to the namespace URI symbol table.

@return DTMStringPool reference to an instance of table.
"
      end

      operation 5190018 "setPrefixNameTable"
	public explicit_return_type "void"
	nparams 1
	  param inout name "poolRef" type class_ref 634114 // DTMStringPool
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a reference pointer to the prefix name symbol table.
%REVIEW% Should this really be Public? Changing it while
DTM is in use would be a disaster.

@param poolRef DTMStringPool reference to an instance of table.
"
      end

      operation 5190146 "getPrefixNameTable"
	public return_type class_ref 634114 // DTMStringPool
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a reference pointer to the prefix name symbol table.

@return DTMStringPool reference to an instance of table.
"
      end

      operation 5190274 "setContentBuffer"
	package explicit_return_type "void"
	nparams 1
	  param inout name "buffer" type class_ref 633730 // FastStringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a reference pointer to the content-text repository

@param buffer FastStringBuffer reference to an instance of
buffer
"
      end

      operation 5190402 "getContentBuffer"
	package return_type class_ref 633730 // FastStringBuffer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a reference pointer to the content-text repository

@return FastStringBuffer reference to an instance of buffer
"
      end

      operation 5190530 "getContentHandler"
	public return_type class_ref 605954 // ContentHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getContentHandler returns \"our SAX builder\" -- the thing that
someone else should send SAX events to in order to extend this
DTM model.

@return null if this model doesn't respond to SAX events,
\"this\" if the DTM object has a built-in SAX ContentHandler,
the IncrementalSAXSource if we're bound to one and should receive
the SAX stream via it for incremental build purposes...
"
      end

      operation 5190658 "getLexicalHandler"
	public return_type class_ref 617602 // LexicalHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's lexical handler.

%REVIEW% Should this return null if constrution already done/begun?

@return null if this model doesn't respond to lexical SAX events,
\"this\" if the DTM object has a built-in SAX ContentHandler,
the IncrementalSAXSource if we're bound to one and should receive
the SAX stream via it for incremental build purposes...
"
      end

      operation 5190786 "getEntityResolver"
	public return_type class_ref 619138 // EntityResolver
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's EntityResolver.

@return null if this model doesn't respond to SAX entity ref events.
"
      end

      operation 5190914 "getDTDHandler"
	public return_type class_ref 617986 // DTDHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's DTDHandler.

@return null if this model doesn't respond to SAX dtd events.
"
      end

      operation 5191042 "getErrorHandler"
	public return_type class_ref 618114 // ErrorHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's ErrorHandler.

@return null if this model doesn't respond to SAX error events.
"
      end

      operation 5191170 "getDeclHandler"
	public return_type class_ref 617858 // DeclHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's DeclHandler.

@return null if this model doesn't respond to SAX Decl events.
"
      end

      operation 5191298 "needsTwoThreads"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return true iff we're building this model incrementally (eg
we're partnered with a IncrementalSAXSource) and thus require that the
transformation and the parse run simultaneously. Guidance to the
DTMManager.
"
      end

      operation 5191426 "characters"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 ========= SAX2 ContentHandler methods =========
 Accept SAX events, use them to build/extend the DTM tree.
 Replaces the deprecated DocumentHandler interface."
      end

      operation 5191554 "processAccumulatedText"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Flush string accumulation into a text node"
      end

      operation 5191682 "endDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5191810 "endElement"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5191938 "endPrefixMapping"
	public explicit_return_type "void"
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5192066 "ignorableWhitespace"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5192194 "processingInstruction"
	public explicit_return_type "void"
	nparams 2
	  param inout name "target" type class_ref 128130 // String
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5192322 "setDocumentLocator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locator" type class_ref 606082 // Locator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5192450 "skippedEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5192578 "startDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5192706 "startElement"
	public explicit_return_type "void"
	nparams 4
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	  param inout name "atts" type class_ref 593410 // Attributes
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5192834 "startPrefixMapping"
	public explicit_return_type "void"
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5192962 "comment"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " LexicalHandler support. Not all SAX2 parsers support these events
 but we may want to pass them through when they exist...
"
      end

      operation 5193090 "endCDATA"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5193218 "endDTD"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5193346 "endEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5193474 "startCDATA"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5193602 "startDTD"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5193730 "startEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5193858 "initDocument"
	package explicit_return_type "void"
	nparams 1
	  param in name "documentNumber" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 ========= Document Handler Functions =========
 %REVIEW% jjk -- DocumentHandler is  SAX Level 1, and deprecated....
 and this wasn't a fully compliant or declared implementation of that API
 in any case. Phase out in favor of SAX2 ContentHandler/LexicalHandler

Reset a dtm document to its initial (empty) state.

The DTMManager will invoke this method when the dtm is created.

@param documentNumber the handle for the DTM document.
"
      end

      operation 5193986 "hasChildNodes"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "      /**
       * Receive hint of the end of a document.
       *
       * <p>The content handler will invoke this method only once, and it will
       * be the last method invoked during the parse.  The handler shall not
       * not invoke this method until it has either abandoned parsing
       * (because of an unrecoverable error) or reached the end of
       * input.</p>
       */
      public void documentEnd()
      {
              done = true;
              // %TBD% may need to notice the last slot number and slot count to avoid
              // residual data from provious use of this DTM
      }
      /**
       * Receive notification of the beginning of a document.
       *
       * <p>The SAX parser will invoke this method only once, before any
       * other methods in this interface.</p>
       */
      public void reset()
      {
              // %TBD% reset slot 0 to indicate ChunkedIntArray reuse or wait for
              //       the next initDocument().
              m_docElement = NULL;     // reset nodeHandle to the root of the actual dtm doc content
              initDocument(0);
      }
      /**
       * Factory method; creates an Element node in this document.
       *
       * The node created will be chained according to its natural order of request
       * received.  %TBD% It can be rechained later via the optional DTM writable interface.
       *
       * <p>The XML content handler will invoke endElement() method after all
       * of the element's content are processed in order to give DTM the indication
       * to prepare and patch up parent and sibling node pointers.</p>
       *
       * <p>The following interface for createElement will use an index value corresponds
       * to the symbol entry in the DTMDStringPool based symbol tables.</p>
       *
       * @param nsIndex The namespace of the node
       * @param nameIndex The element name.
       * @see #endElement
       * @see org.xml.sax.Attributes
       * @return nodeHandle int of the element created
       */
      public int createElement(int nsIndex, int nameIndex, Attributes atts)
      {
              // do document root node creation here on the first element, create nodes for
              // this element and its attributes, store the element, namespace, and attritute
              // name indexes to the nodes array, keep track of the current node and parent
              // element used
              // W0  High:  Namespace  Low:  Node Type
              int w0 = (nsIndex << 16) | ELEMENT_NODE;
              // W1: Parent
              int w1 = currentParent;
              // W2: Next  (initialized as 0)
              int w2 = 0;
              // W3: Tagname
              int w3 = nameIndex;
              //int ourslot = nodes.appendSlot(w0, w1, w2, w3);
              int ourslot = appendNode(w0, w1, w2, w3);
              currentParent = ourslot;
              previousSibling = 0;
              setAttributes(atts);
              // set the root element pointer when creating the first element node
              if (m_docElement == NULL)
                      m_docElement = ourslot;
              return (m_docHandle | ourslot);
      }
      // Factory method to create an Element node not associated with a given name space
      // using String value parameters passed in from a content handler or application
      /**
       * Factory method; creates an Element node not associated with a given name space in this document.
       *
       * The node created will be chained according to its natural order of request
       * received.  %TBD% It can be rechained later via the optional DTM writable interface.
       *
       * <p>The XML content handler or application will invoke endElement() method after all
       * of the element's content are processed in order to give DTM the indication
       * to prepare and patch up parent and sibling node pointers.</p>
       *
       * <p>The following parameters for createElement contains raw string values for name
       * symbols used in an Element node.</p>
       *
       * @param name String the element name, including the prefix if any.
       * @param atts The attributes attached to the element, if any.
       * @see #endElement
       * @see org.xml.sax.Attributes
       */
      public int createElement(String name, Attributes atts)
      {
              // This method wraps around the index valued interface of the createElement interface.
              // The raw string values are stored into the current DTM name symbol tables.  The method
              // method will then use the index values returned to invoke the other createElement()
              // onverted to index values modified to match a
              // method.
              int nsIndex = NULL;
              int nameIndex = m_localNames.stringToIndex(name);
              // note - there should be no prefix separator in the name because it is not associated
              // with a name space
              return createElement(nsIndex, nameIndex, atts);
      }
      // Factory method to create an Element node associated with a given name space
      // using String value parameters passed in from a content handler or application
      /**
       * Factory method; creates an Element node associated with a given name space in this document.
       *
       * The node created will be chained according to its natural order of request
       * received.  %TBD% It can be rechained later via the optional DTM writable interface.
       *
       * <p>The XML content handler or application will invoke endElement() method after all
       * of the element's content are processed in order to give DTM the indication
       * to prepare and patch up parent and sibling node pointers.</p>
       *
       * <p>The following parameters for createElementNS contains raw string values for name
       * symbols used in an Element node.</p>
       *
       * @param ns String the namespace of the node
       * @param name String the element name, including the prefix if any.
       * @param atts The attributes attached to the element, if any.
       * @see #endElement
       * @see org.xml.sax.Attributes
       */
      public int createElementNS(String ns, String name, Attributes atts)
      {
              // This method wraps around the index valued interface of the createElement interface.
              // The raw string values are stored into the current DTM name symbol tables.  The method
              // method will then use the index values returned to invoke the other createElement()
              // onverted to index values modified to match a
              // method.
              int nsIndex = m_nsNames.stringToIndex(ns);
              int nameIndex = m_localNames.stringToIndex(name);
              // The prefixIndex is not needed by the indexed interface of the createElement method
              int prefixSep = name.indexOf(\":\");
              int prefixIndex = m_prefixNames.stringToIndex(name.substring(0, prefixSep));
              return createElement(nsIndex, nameIndex, atts);
      }
      /**
       * Receive an indication for the end of an element.
       *
       * <p>The XML content handler will invoke this method at the end of every
       * element in the XML document to give hint its time to pop up the current
       * element and parent and patch up parent and sibling pointers if necessary
       *
       * <p>%tbd% The following interface may need to be modified to match a
       * coordinated access to the DTMDStringPool based symbol tables.</p>
               *
       * @param ns the namespace of the element
       * @param name The element name
       */
      public void endElement(String ns, String name)
      {
              // pop up the stacks
              //
              if (previousSiblingWasParent)
                      nodes.writeEntry(previousSibling, 2, NULL);
              // Pop parentage
              previousSibling = currentParent;
              nodes.readSlot(currentParent, gotslot);
              currentParent = gotslot[1] & 0xFFFF;
              // The element just being finished will be
              // the previous sibling for the next operation
              previousSiblingWasParent = true;
              // Pop a level of namespace table
              // namespaceTable.removeLastElem();
      }
      /**
       * Creates attributes for the current node.
       *
       * @param atts Attributes to be created.
       */
      void setAttributes(Attributes atts) {
              int atLength = (null == atts) ? 0 : atts.getLength();
              for (int i=0; i < atLength; i++) {
                      String qname = atts.getQName(i);
                      createAttribute(atts.getQName(i), atts.getValue(i));
              }
      }
      /**
       * Appends an attribute to the document.
       * @param qname Qualified Name of the attribute
       * @param value Value of the attribute
       * @return Handle of node
       */
      public int createAttribute(String qname, String value) {
              int colonpos = qname.indexOf(\":\");
              String attName = qname.substring(colonpos+1);
              int w0 = 0;
              if (colonpos > 0) {
                      String prefix = qname.substring(0, colonpos);
                      if (prefix.equals(\"xml\")) {
                              //w0 = ATTRIBUTE_NODE |
                              //      (com.sun.org.apache.xalan.internal.templates.Constants.S_XMLNAMESPACEURI << 16);
                      } else {
                              //w0 = ATTRIBUTE_NODE |
                      }
              } else {
                      w0 = ATTRIBUTE_NODE;
              }
              // W1:  Parent
              int w1 = currentParent;
              // W2:  Next (not yet resolved)
              int w2 = 0;
              // W3:  Tag name
              int w3 = m_localNames.stringToIndex(attName);
              // Add node
              int ourslot = appendNode(w0, w1, w2, w3);
              previousSibling = ourslot;      // Should attributes be previous siblings
              // W0: Node Type
              w0 = TEXT_NODE;
              // W1: Parent
              w1 = ourslot;
              // W2: Start Position within buffer
              w2 = m_char.length();
              m_char.append(value);
              // W3: Length
              w3 = m_char.length() - w2;
              appendNode(w0, w1, w2, w3);
              charStringStart=m_char.length();
              charStringLength = 0;
              //previousSibling = ourslot;
              // Attrs are Parents
              previousSiblingWasParent = true;
              return (m_docHandle | ourslot);
      }
      /**
       * Factory method; creates a Text node in this document.
       *
       * The node created will be chained according to its natural order of request
       * received.  %TBD% It can be rechained later via the optional DTM writable interface.
       *
       * @param text String The characters text string from the XML document.
       * @return int DTM node-number of the text node created
       */
      public int createTextNode(String text)
      throws DTMException
      {
              // wraps around the index value based createTextNode method
              return createTextNode(text.toCharArray(), 0, text.length());
      }
      /**
       * Factory method; creates a Text node in this document.
       *
       * The node created will be chained according to its natural order of request
       * received.  %TBD% It can be rechained later via the optional DTM writable interface.
       *
       * %REVIEW% for text normalization issues, unless we are willing to
       * insist that all adjacent text must be merged before this method
       * is called.
       *
       * @param ch The characters from the XML document.
       * @param start The start position in the array.
       * @param length The number of characters to read from the array.
       */
      public int createTextNode(char ch[], int start, int length)
      throws DTMException
      {
              m_char.append(ch, start, length);               // store the chunk to the text/comment string table
              // create a Text Node
              // %TBD% may be possible to combine with appendNode()to replace the next chunk of code
              int w0 = TEXT_NODE;
              // W1: Parent
              int w1 = currentParent;
              // W2: Start position within m_char
              int w2 = charStringStart;
              // W3: Length of the full string
              int w3 = length;
              int ourslot = appendNode(w0, w1, w2, w3);
              previousSibling = ourslot;
              charStringStart=m_char.length();
              charStringLength = 0;
              return (m_docHandle | ourslot);
      }
      /**
       * Factory method; creates a Comment node in this document.
       *
       * The node created will be chained according to its natural order of request
       * received.  %TBD% It can be rechained later via the optional DTM writable interface.
       *
       * @param text String The characters text string from the XML document.
       * @return int DTM node-number of the text node created
       */
      public int createComment(String text)
      throws DTMException
      {
              // wraps around the index value based createTextNode method
              return createComment(text.toCharArray(), 0, text.length());
      }
      /**
       * Factory method; creates a Comment node in this document.
       *
       * The node created will be chained according to its natural order of request
       * received.  %TBD% It can be rechained later via the optional DTM writable interface.
       *
       * @param ch An array holding the characters in the comment.
       * @param start The starting position in the array.
       * @param length The number of characters to use from the array.
       * @see DTMException
       */
      public int createComment(char ch[], int start, int length)
      throws DTMException
      {
              m_char.append(ch, start, length);               // store the comment string to the text/comment string table
              // create a Comment Node
              // %TBD% may be possible to combine with appendNode()to replace the next chunk of code
              int w0 = COMMENT_NODE;
              // W1: Parent
              int w1 = currentParent;
              // W2: Start position within m_char
              int w2 = charStringStart;
              // W3: Length of the full string
              int w3 = length;
              int ourslot = appendNode(w0, w1, w2, w3);
              previousSibling = ourslot;
              charStringStart=m_char.length();
              charStringLength = 0;
              return (m_docHandle | ourslot);
      }
      // Counters to keep track of the current text string being accumulated with respect
      // to the text/comment string table: charStringStart should point to the starting
      // offset of the string in the table and charStringLength the acccumulated length when
      // appendAccumulatedText starts, and reset to the end of the table and 0 at the end
      // of appendAccumulatedText for the next set of characters receives
      int charStringStart=0,charStringLength=0;
 ========= Document Navigation Functions =========
 Given a node handle, test if it has child nodes.
<p> %REVIEW% This is obviously useful at the DOM layer, where it
would permit testing this without having to create a proxy
node. It's less useful in the DTM API, where
(dtm.getFirstChild(nodeHandle)!=DTM.NULL) is just as fast and
almost as self-evident. But it's a convenience, and eases porting
of DOM code to DTM.  </p>

@param nodeHandle int Handle of the node.
@return int true if the given node has child nodes.
"
      end

      operation 5194114 "getFirstChild"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, get the handle of the node's first child.
If not yet resolved, waits for more nodes to be added to the document and
tries again.

@param nodeHandle int Handle of the node.
@return int DTM node-number of first child, or DTM.NULL to indicate none exists.
"
      end

      operation 5194242 "getLastChild"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, advance to its last child.
If not yet resolved, waits for more nodes to be added to the document and
tries again.

@param nodeHandle int Handle of the node.
@return int Node-number of last child,
or DTM.NULL to indicate none exists.
"
      end

      operation 5194370 "getAttributeNode"
	public explicit_return_type "int"
	nparams 3
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an attribute node by by qualified name and namespace URI.

@param nodeHandle int Handle of the node upon which to look up this attribute.
@param namespaceURI The namespace URI of the attribute to
  retrieve, or null.
@param name The local name of the attribute to
  retrieve.
@return The attribute node handle with the specified name (
  <code>nodeName</code>) or <code>DTM.NULL</code> if there is no such
  attribute.
"
      end

      operation 5194498 "getFirstAttribute"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, get the index of the node's first attribute.

@param nodeHandle int Handle of the Element node.
@return Handle of first attribute, or DTM.NULL to indicate none exists.
"
      end

      operation 5194626 "getFirstNamespaceNode"
	public explicit_return_type "int"
	nparams 2
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "inScope" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, get the index of the node's first child.
If not yet resolved, waits for more nodes to be added to the document and
tries again

@param nodeHandle handle to node, which should probably be an element
                  node, but need not be.

@param inScope    true if all namespaces in scope should be returned,
                  false if only the namespace declarations should be
                  returned.
@return handle of first namespace, or DTM.NULL to indicate none exists.
"
      end

      operation 5194754 "getNextSibling"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, advance to its next sibling.

%TBD% This currently uses the DTM-internal definition of
sibling; eg, the last attr's next sib is the first
child. In the old DTM, the DOM proxy layer provided the
additional logic for the public view.  If we're rewriting
for XPath emulation, that test must be done here.

%TBD% CODE INTERACTION WITH INCREMENTAL PARSE - If not yet
resolved, should wait for more nodes to be added to the document
and tries again.

@param nodeHandle int Handle of the node.
@return int Node-number of next sibling,
or DTM.NULL to indicate none exists.
"
      end

      operation 5194882 "getPreviousSibling"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find its preceeding sibling.
WARNING: DTM is asymmetric; this operation is resolved by search, and is
relatively expensive.

@param nodeHandle the id of the node.
@return int Node-number of the previous sib,
or DTM.NULL to indicate none exists.
"
      end

      operation 5195010 "getNextAttribute"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, advance to the next attribute. If an
element, we advance to its first attribute; if an attr, we advance to
the next attr on the same node.

@param nodeHandle int Handle of the node.
@return int DTM node-number of the resolved attr,
or DTM.NULL to indicate none exists.
"
      end

      operation 5195138 "getNextNamespaceNode"
	public explicit_return_type "int"
	nparams 3
	  param in name "baseHandle" explicit_type "int"
	  param in name "namespaceHandle" explicit_type "int"
	  param inout name "inScope" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a namespace handle, advance to the next namespace.

%TBD% THIS METHOD DOES NOT MATCH THE CURRENT SIGNATURE IN
THE DTM INTERFACE.  FIX IT, OR JUSTIFY CHANGING THE DTM
API.

@param namespaceHandle handle to node which must be of type NAMESPACE_NODE.
@return handle of next namespace, or DTM.NULL to indicate none exists.
"
      end

      operation 5195266 "getNextDescendant"
	public explicit_return_type "int"
	nparams 2
	  param in name "subtreeRootHandle" explicit_type "int"
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, advance to its next descendant.
If not yet resolved, waits for more nodes to be added to the document and
tries again.

@param subtreeRootHandle
@param nodeHandle int Handle of the node.
@return handle of next descendant,
or DTM.NULL to indicate none exists.
"
      end

      operation 5195394 "getNextFollowing"
	public explicit_return_type "int"
	nparams 2
	  param in name "axisContextHandle" explicit_type "int"
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, advance to the next node on the following axis.

@param axisContextHandle the start of the axis that is being traversed.
@param nodeHandle
@return handle of next sibling,
or DTM.NULL to indicate none exists.
"
      end

      operation 5195522 "getNextPreceding"
	public explicit_return_type "int"
	nparams 2
	  param in name "axisContextHandle" explicit_type "int"
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, advance to the next node on the preceding axis.

@param axisContextHandle the start of the axis that is being traversed.
@param nodeHandle the id of the node.
@return int Node-number of preceding sibling,
or DTM.NULL to indicate none exists.
"
      end

      operation 5195650 "getParent"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find its parent node.

@param nodeHandle the id of the node.
@return int Node-number of parent,
or DTM.NULL to indicate none exists.
"
      end

      operation 5195778 "getDocumentRoot"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root element of the document.
@return nodeHandle to the Document Root.
"
      end

      operation 5195906 "getDocument"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find the owning document node.

@return int Node handle of document, which should always be valid.
"
      end

      operation 5196034 "getOwnerDocument"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find the owning document node.  This has the exact
same semantics as the DOM Document method of the same name, in that if
the nodeHandle is a document node, it will return NULL.

<p>%REVIEW% Since this is DOM-specific, it may belong at the DOM
binding layer. Included here as a convenience function and to
aid porting of DOM code to DTM.</p>

@param nodeHandle the id of the node.
@return int Node handle of owning document, or NULL if the nodeHandle is
            a document.
"
      end

      operation 5196162 "getDocumentRoot"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find the owning document node.  This has the DTM
semantics; a Document node is its own owner.

<p>%REVIEW% Since this is DOM-specific, it may belong at the DOM
binding layer. Included here as a convenience function and to
aid porting of DOM code to DTM.</p>

@param nodeHandle the id of the node.
@return int Node handle of owning document, or NULL if the nodeHandle is
            a document.
"
      end

      operation 5196290 "getStringValue"
	public return_type class_ref 619010 // XMLString
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the string-value of a node as a String object
(see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value).

@param nodeHandle The node ID.

@return A string object that represents the string-value of the given node.
"
      end

      operation 5196418 "getStringValueChunkCount"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get number of character array chunks in
the string-value of a node.
(see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value).
Note that a single text node may have multiple text chunks.

EXPLANATION: This method is an artifact of the fact that the
underlying m_chars object may not store characters in a
single contiguous array -- for example,the current
FastStringBuffer may split a single node's text across
multiple allocation units.  This call tells us how many
separate accesses will be required to retrieve the entire
content. PLEASE NOTE that this may not be the same as the
number of SAX characters() events that caused the text node
to be built in the first place, since m_chars buffering may
be on different boundaries than the parser's buffers.

@param nodeHandle The node ID.

@return number of character array chunks in
        the string-value of a node.

###zaj - tbd"
      end

      operation 5196546 "getStringValueChunk"
	public explicit_return_type "char"
	nparams 3
	  param in name "nodeHandle" explicit_type "int"
	  param in name "chunkIndex" explicit_type "int"
	  param inout name "startAndLen" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a character array chunk in the string-value of a node.
(see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value).
Note that a single text node may have multiple text chunks.

EXPLANATION: This method is an artifact of the fact that
the underlying m_chars object may not store characters in a
single contiguous array -- for example,the current
FastStringBuffer may split a single node's text across
multiple allocation units.  This call retrieves a single
contiguous portion of the text -- as much as m-chars was
able to store in a single allocation unit.  PLEASE NOTE
that this may not be the same granularityas the SAX
characters() events that caused the text node to be built
in the first place, since m_chars buffering may be on
different boundaries than the parser's buffers.

@param nodeHandle The node ID.
@param chunkIndex Which chunk to get.
@param startAndLen An array of 2 where the start position and length of
                   the chunk will be returned.

@return The character array reference where the chunk occurs.  
###zaj - tbd"
      end

      operation 5196674 "getExpandedTypeID"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return an ID that represents the node's expanded name.

@param nodeHandle The handle to the node in question.

@return the expanded-name id of the node.
"
      end

      operation 5196802 "getExpandedTypeID"
	public explicit_return_type "int"
	nparams 3
	  param inout name "namespace" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded name, return an ID.  If the expanded-name does not
exist in the internal tables, the entry will be created, and the ID will
be returned.  Any additional nodes that are created that have this
expanded name will use this ID.

@return the expanded-name id of the node.
"
      end

      operation 5196930 "getLocalNameFromExpandedNameID"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "ExpandedNameID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded-name ID, return the local name part.

@param ExpandedNameID an ID that represents an expanded-name.
@return String Local name of this node.
"
      end

      operation 5197058 "getNamespaceFromExpandedNameID"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "ExpandedNameID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded-name ID, return the namespace URI part.

@param ExpandedNameID an ID that represents an expanded-name.
@return String URI value of this node's namespace, or null if no
namespace was resolved.
"
      end

      classrelation 2237186 // fixednames (<unidirectional association>)
	relation 2237186 --->
	  a role_name "fixednames" multiplicity "[]" init_value "
        {
                null,null,                                                      // nothing, Element
                null,\"#text\",                                           // Attr, Text
                \"#cdata_section\",null,  // CDATA, EntityReference
                null,null,                                                      // Entity, PI
                \"#comment\",\"#document\", // Comment, Document
                null,\"#document-fragment\", // Doctype, DocumentFragment
                null}" class_relation const_relation private
	    comment "
fixednames

 Notation"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2237186 // fixednames (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 5197186 "getNodeName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style node name. This will
include names such as #text or #document.

@param nodeHandle the id of the node.
@return String Name of this node, which may be an empty string.
%REVIEW% Document when empty string is possible...
"
      end

      operation 5197314 "getNodeNameX"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return the XPath node name.  This should be
the name as described by the XPath data model, NOT the DOM-style
name.

@param nodeHandle the id of the node.
@return String Name of this node.
"
      end

      operation 5197442 "getLocalName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style localname.
(As defined in Namespaces, this is the portion of the name after any
colon character)

%REVIEW% What's the local name of something other than Element/Attr?
Should this be DOM-style (undefined unless namespaced), or other?

@param nodeHandle the id of the node.
@return String Local name of this node.
"
      end

      operation 5197570 "getPrefix"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a namespace handle, return the prefix that the namespace decl is
mapping.
Given a node handle, return the prefix used to map to the namespace.

<p> %REVIEW% Are you sure you want \"\" for no prefix?  </p>

%REVIEW%  Should this be DOM-style (undefined unless namespaced),
or other?

@param nodeHandle the id of the node.
@return String prefix of this node's name, or \"\" if no explicit
namespace prefix was given.
"
      end

      operation 5197698 "getNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style namespace URI
(As defined in Namespaces, this is the declared URI which this node's
prefix -- or default in lieu thereof -- was mapped to.)

@param nodeHandle the id of the node.
@return String URI value of this node's namespace, or null if no
namespace was resolved.
"
      end

      operation 5197826 "getNodeValue"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its node value. This is mostly
as defined by the DOM, but may ignore some conveniences.
<p>

@param nodeHandle The node id.
@return String Value of this node, or null if not
meaningful for this node type.
"
      end

      operation 5197954 "getNodeType"
	public explicit_return_type "short"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style node type.
<p>
%REVIEW% Generally, returning short is false economy. Return int?

@param nodeHandle The node id.
@return int Node type, as per the DOM's Node._NODE constants.
"
      end

      operation 5198082 "getLevel"
	public explicit_return_type "short"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the depth level of this node in the tree (equals 1 for
a parentless node).

@param nodeHandle The node id.
@return the number of ancestors, plus one
@xsl.usage internal
"
      end

      operation 5198210 "isSupported"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "feature" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ============== Document query functions ==============

Tests whether DTM DOM implementation implements a specific feature and
that feature is supported by this node.

@param feature The name of the feature to test.
@param version This is the version number of the feature to test.
  If the version is not
  specified, supporting any version of the feature will cause the
  method to return <code>true</code>.
@return Returns <code>true</code> if the specified feature is
  supported on this node, <code>false</code> otherwise.
"
      end

      operation 5198338 "getDocumentBaseURI"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the base URI of the document entity. If it is not known
(because the document was parsed from a socket connection or from
standard input, for example), the value of this property is unknown.

@return the document base URI String object or null if unknown.
"
      end

      operation 5198466 "setDocumentBaseURI"
	public explicit_return_type "void"
	nparams 1
	  param inout name "baseURI" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the base URI of the document entity.

@param baseURI the document base URI String object or null if unknown.
"
      end

      operation 5198594 "getDocumentSystemIdentifier"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the system identifier of the document entity. If
it is not known, the value of this property is unknown.

@param nodeHandle The node id, which can be any valid node handle.
@return the system identifier String object or null if unknown.
"
      end

      operation 5198722 "getDocumentEncoding"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the name of the character encoding scheme
       in which the document entity is expressed.

@param nodeHandle The node id, which can be any valid node handle.
@return the document encoding String object.
"
      end

      operation 5198850 "getDocumentStandalone"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an indication of the standalone status of the document,
       either \"yes\" or \"no\". This property is derived from the optional
       standalone document declaration in the XML declaration at the
       beginning of the document entity, and has no value if there is no
       standalone document declaration.

@param nodeHandle The node id, which can be any valid node handle.
@return the document standalone String object, either \"yes\", \"no\", or null.
"
      end

      operation 5198978 "getDocumentVersion"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "documentHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string representing the XML version of the document. This
property is derived from the XML declaration optionally present at the
beginning of the document entity, and has no value if there is no XML
declaration.

@param documentHandle the document handle

@return the document version String object
"
      end

      operation 5199106 "getDocumentAllDeclarationsProcessed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an indication of
whether the processor has read the complete DTD. Its value is a
boolean. If it is false, then certain properties (indicated in their
descriptions below) may be unknown. If it is true, those properties
are never unknown.

@return <code>true</code> if all declarations were processed {};
        <code>false</code> otherwise.
"
      end

      operation 5199234 "getDocumentTypeDeclarationSystemIdentifier"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  A document type declaration information item has the following properties:

    1. [system identifier] The system identifier of the external subset, if
       it exists. Otherwise this property has no value.

@return the system identifier String object, or null if there is none.
"
      end

      operation 5199362 "getDocumentTypeDeclarationPublicIdentifier"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the public identifier of the external subset,
normalized as described in 4.2.2 External Entities [XML]. If there is
no external subset or if it has no public identifier, this property
has no value.

@return the public identifier String object, or null if there is none.
"
      end

      operation 5199490 "getElementById"
	public explicit_return_type "int"
	nparams 1
	  param inout name "elementId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Element</code> whose <code>ID</code> is given by
<code>elementId</code>. If no such element exists, returns
<code>DTM.NULL</code>. Behavior is not defined if more than one element
has this <code>ID</code>. Attributes (including those
with the name \"ID\") are not of type ID unless so defined by DTD/Schema
information available to the DTM implementation.
Implementations that do not know whether attributes are of type ID or
not are expected to return <code>DTM.NULL</code>.

<p>%REVIEW% Presumably IDs are still scoped to a single document,
and this operation searches only within a single document, right?
Wouldn't want collisions between DTMs in the same process.</p>

@param elementId The unique <code>id</code> value for an element.
@return The handle of the matching element.
"
      end

      operation 5199618 "getUnparsedEntityURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The getUnparsedEntityURI function returns the URI of the unparsed
entity with the specified name in the same document as the context
node (see [3.3 Unparsed Entities]). It returns the empty string if
there is no such entity.
<p>
XML processors may choose to use the System Identifier (if one
is provided) to resolve the entity, rather than the URI in the
Public Identifier. The details are dependent on the processor, and
we would have to support some form of plug-in resolver to handle
this properly. Currently, we simply return the System Identifier if
present, and hope that it a usable URI or that our caller can
map it to one.
TODO: Resolve Public Identifiers... or consider changing function name.
<p>
If we find a relative URI
reference, XML expects it to be resolved in terms of the base URI
of the document. The DOM doesn't do that for us, and it isn't
entirely clear whether that should be done here; currently that's
pushed up to a higher level of our application. (Note that DOM Level
1 didn't store the document's base URI.)
TODO: Consider resolving Relative URIs.
<p>
(The DOM's statement that \"An XML processor may choose to
completely expand entities before the structure model is passed
to the DOM\" refers only to parsed entities, not unparsed, and hence
doesn't affect this function.)

@param name A string containing the Entity Name of the unparsed
entity.

@return String containing the URI of the Unparsed Entity, or an
empty string if no such entity exists.
"
      end

      operation 5199746 "supportsPreStripping"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ============== Boolean methods ================

Return true if the xsl:strip-space or xsl:preserve-space was processed
during construction of the DTM document.

<p>%REVEIW% Presumes a 1:1 mapping from DTM to Document, since
we aren't saying which Document to query...?</p>
"
      end

      operation 5199874 "isNodeAfter"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "nodeHandle1" explicit_type "int"
	  param in name "nodeHandle2" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Figure out whether nodeHandle2 should be considered as being later
in the document than nodeHandle1, in Document Order as defined
by the XPath model. This may not agree with the ordering defined
by other XML applications.
<p>
There are some cases where ordering isn't defined, and neither are
the results of this function -- though we'll generally return true.

TODO: Make sure this does the right thing with attribute nodes!!!

@param nodeHandle1 DOM Node to perform position comparison on.
@param nodeHandle2 DOM Node to perform position comparison on .

@return false if node2 comes before node1, otherwise return true.
You can think of this as
<code>(node1.documentOrderPosition &lt;= node2.documentOrderPosition)</code>.
"
      end

      operation 5200002 "isCharacterElementContentWhitespace"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    2. [element content whitespace] A boolean indicating whether the
       character is white space appearing within element content (see [XML],
       2.10 \"White Space Handling\"). Note that validating XML processors are
       required by XML 1.0 to provide this information. If there is no
       declaration for the containing element, this property has no value for
       white space characters. If no declaration has been read, but the [all
       declarations processed] property of the document information item is
       false (so there may be an unread declaration), then the value of this
       property is unknown for white space characters. It is always false for
       characters that are not white space.

@param nodeHandle the node ID.
@return <code>true</code> if the character data is whitespace;
        <code>false</code> otherwise.
"
      end

      operation 5200130 "isDocumentAllDeclarationsProcessed"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "documentHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "   10. [all declarations processed] This property is not strictly speaking
       part of the infoset of the document. Rather it is an indication of
       whether the processor has read the complete DTD. Its value is a
       boolean. If it is false, then certain properties (indicated in their
       descriptions below) may be unknown. If it is true, those properties
       are never unknown.

@param documentHandle A node handle that must identify a document.
@return <code>true</code> if all declarations were processed;
        <code>false</code> otherwise.
"
      end

      operation 5200258 "isAttributeSpecified"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "attributeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    5. [specified] A flag indicating whether this attribute was actually
       specified in the start-tag of its element, or was defaulted from the
       DTD.

@param attributeHandle the attribute handle
@return <code>true</code> if the attribute was specified;
        <code>false</code> if it was defaulted.
"
      end

      operation 5200386 "dispatchCharactersEvents"
	public explicit_return_type "void"
	nparams 3
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "ch" type class_ref 605954 // ContentHandler
	  param inout name "normalize" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ========== Direct SAX Dispatch, for optimization purposes ========

Directly call the
characters method on the passed ContentHandler for the
string-value of the given node (see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value). Multiple calls to the
ContentHandler's characters methods may well occur for a single call to
this method.

@param nodeHandle The node ID.
@param ch A non-null reference to a ContentHandler.

@throws org.xml.sax.SAXException
"
      end

      operation 5200514 "dispatchToEvents"
	public explicit_return_type "void"
	nparams 2
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "ch" type class_ref 605954 // ContentHandler
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Directly create SAX parser events from a subtree.

@param nodeHandle The node ID.
@param ch A non-null reference to a ContentHandler.

@throws org.xml.sax.SAXException
"
      end

      operation 5200642 "getNode"
	public return_type class_ref 317570 // Node
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an DOM node for the given node.

@param nodeHandle The node ID.

@return A node representation of the DTM node.
"
      end

      operation 5200770 "appendChild"
	public explicit_return_type "void"
	nparams 3
	  param in name "newChild" explicit_type "int"
	  param inout name "clone" explicit_type "boolean"
	  param inout name "cloneDepth" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ==== Construction methods (may not be supported by some implementations!) =====
 %REVIEW% jjk: These probably aren't the right API. At the very least
 they need to deal with current-insertion-location and end-element
 issues.

Append a child to the end of the child list of the current node. Please note that the node
is always cloned if it is owned by another document.

<p>%REVIEW% \"End of the document\" needs to be defined more clearly.
Does it become the last child of the Document? Of the root element?</p>

@param newChild Must be a valid new node handle.
@param clone true if the child should be cloned into the document.
@param cloneDepth if the clone argument is true, specifies that the
                  clone should include all it's children.
"
      end

      operation 5200898 "appendTextChild"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a text node child that will be constructed from a string,
to the end of the document.

<p>%REVIEW% \"End of the document\" needs to be defined more clearly.
Does it become the last child of the Document? Of the root element?</p>

@param str Non-null reference to a string.
"
      end

      operation 5201026 "appendTextChild"
	package explicit_return_type "void"
	nparams 2
	  param in name "m_char_current_start" explicit_type "int"
	  param in name "contentLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 ==== BUILDER methods ====
 %TBD% jjk: SHOULD PROBABLY BE INLINED, unless we want to support
 both SAX1 and SAX2 and share this logic between them.
 Append a text child at the current insertion point. Assumes that the
actual content of the text has previously been appended to the m_char
buffer (shared with the builder).

@param m_char_current_start int Starting offset of node's content in m_char.
@param contentLength int Length of node's content in m_char.
"
      end

      operation 5201154 "appendComment"
	package explicit_return_type "void"
	nparams 2
	  param in name "m_char_current_start" explicit_type "int"
	  param in name "contentLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Append a comment child at the current insertion point. Assumes that the
actual content of the comment has previously been appended to the m_char
buffer (shared with the builder).

@param m_char_current_start int Starting offset of node's content in m_char.
@param contentLength int Length of node's content in m_char.
"
      end

      operation 5201282 "appendStartElement"
	package explicit_return_type "void"
	nparams 3
	  param in name "namespaceIndex" explicit_type "int"
	  param in name "localNameIndex" explicit_type "int"
	  param in name "prefixIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Append an Element child at the current insertion point. This
Element then _becomes_ the insertion point; subsequent appends
become its lastChild until an appendEndElement() call is made.

Assumes that the symbols (local name, namespace URI and prefix)
have already been added to the pools

Note that this _only_ handles the Element node itself. Attrs and
namespace nodes are unbundled in the ContentHandler layer
and appended separately.

@param namespaceIndex: Index within the namespaceURI string pool
@param localNameIndex Index within the local name string pool
@param prefixIndex: Index within the prefix string pool
"
      end

      operation 5201410 "appendNSDeclaration"
	package explicit_return_type "void"
	nparams 3
	  param in name "prefixIndex" explicit_type "int"
	  param in name "namespaceIndex" explicit_type "int"
	  param inout name "isID" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Append a Namespace Declaration child at the current insertion point.
Assumes that the symbols (namespace URI and prefix) have already been
added to the pools

@param prefixIndex: Index within the prefix string pool
@param namespaceIndex: Index within the namespaceURI string pool
@param isID: If someone really insists on writing a bad DTD, it is
theoretically possible for a namespace declaration to also be declared
as being a node ID. I don't really want to support that stupidity,
but I'm not sure we can refuse to accept it.
"
      end

      operation 5201538 "appendAttribute"
	package explicit_return_type "void"
	nparams 6
	  param in name "namespaceIndex" explicit_type "int"
	  param in name "localNameIndex" explicit_type "int"
	  param in name "prefixIndex" explicit_type "int"
	  param inout name "isID" explicit_type "boolean"
	  param in name "m_char_current_start" explicit_type "int"
	  param in name "contentLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Append an Attribute child at the current insertion
point.  Assumes that the symbols (namespace URI, local name, and
prefix) have already been added to the pools, and that the content has
already been appended to m_char. Note that the attribute's content has
been flattened into a single string; DTM does _NOT_ attempt to model
the details of entity references within attribute values.

@param namespaceIndex int Index within the namespaceURI string pool
@param localNameIndex int Index within the local name string pool
@param prefixIndex int Index within the prefix string pool
@param isID boolean True if this attribute was declared as an ID
(for use in supporting getElementByID).
@param m_char_current_start int Starting offset of node's content in m_char.
@param contentLength int Length of node's content in m_char.
"
      end

      operation 5201666 "getAxisTraverser"
	public return_type class_ref 618882 // DTMAxisTraverser
	nparams 1
	  param in name "axis" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This returns a stateless \"traverser\", that can navigate over an
XPath axis, though not in document order.

@param axis One of Axes.ANCESTORORSELF, etc.

@return A DTMAxisIterator, or null if the given axis isn't supported.
"
      end

      operation 5201794 "getAxisIterator"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 1
	  param in name "axis" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a shortcut to the iterators that implement the
supported XPath axes (only namespace::) is not supported.
Returns a bare-bones iterator that must be initialized
with a start node (using iterator.setStartNode()).

@param axis One of Axes.ANCESTORORSELF, etc.

@return A DTMAxisIterator, or null if the given axis isn't supported.
"
      end

      operation 5201922 "getTypedAxisIterator"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 2
	  param in name "axis" explicit_type "int"
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an iterator that can navigate over an XPath Axis, predicated by
the extended type ID.


@param axis
@param type An extended type ID.

@return A DTMAxisIterator, or null if the given axis isn't supported.
"
      end

      operation 5202050 "appendEndElement"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Terminate the element currently acting as an insertion point. Subsequent
insertions will occur as the last child of this element's parent.
"
      end

      operation 5202178 "appendStartDocument"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Starting a new document. Perform any resets/initialization
not already handled.
"
      end

      operation 5202306 "appendEndDocument"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  All appends to this document have finished; do whatever final
cleanup is needed.
"
      end

      operation 5202434 "setProperty"
	public explicit_return_type "void"
	nparams 2
	  param inout name "property" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For the moment all the run time properties are ignored by this
class.

@param property a <code>String</code> value
@param value an <code>Object</code> value
"
      end

      operation 5202562 "getSourceLocatorFor"
	public return_type class_ref 617346 // SourceLocator
	nparams 1
	  param in name "node" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Source information is not handled yet, so return
<code>null</code> here.

@param node an <code>int</code> value
@return null
"
      end

      operation 5202690 "documentRegistration"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A dummy routine to satisify the abstract interface. If the DTM
implememtation that extends the default base requires notification
of registration, they can override this method.
"
      end

      operation 5202818 "documentRelease"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A dummy routine to satisify the abstract interface. If the DTM
implememtation that extends the default base requires notification
when the document is being released, they can override this method
"
      end

      operation 5202946 "migrateTo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "manager" type class_ref 619266 // DTMManager
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Migrate a DTM built with an old DTMManager to a new DTMManager.
After the migration, the new DTMManager will treat the DTM as
one that is built by itself.
This is used to support DTM sharing between multiple transformations.
@param manager the DTMManager
"
      end
    end

    class 743426 "DTMNamedNodeMap"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "DTMNamedNodeMap is a quickie (as opposed to quick) implementation of the DOM's
NamedNodeMap interface, intended to support DTMProxy's getAttributes()
call.
<p>
***** Note: this does _not_ current attempt to cache any of the data;
if you ask for attribute 27 and then 28, you'll have to rescan the first
27. It should probably at least keep track of the last one retrieved,
and possibly buffer the whole array.
<p>
***** Also note that there's no fastpath for the by-name query; we search
linearly until we find it or fail to find it. Again, that could be
optimized at some cost in object creation/storage.
@xsl.usage internal
"
      classrelation 2237314 // <realization>
	relation 2237314 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2237314 // <realization>
	  b parent class_ref 327042 // NamedNodeMap
      end

      classrelation 2237442 // dtm (<unidirectional association>)
	relation 2237442 --->
	  a role_name "dtm" package
	    comment " The DTM for this node. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2237442 // dtm (<unidirectional association>)
	  b parent class_ref 618754 // DTM
      end

      attribute 1156610 "element"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The DTM element handle. 
"
      end

      attribute 1156738 "m_count"
	package explicit_type "short"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of nodes in this map. 
"
      end

      operation 5203074 "DTMNamedNodeMap"
	public explicit_return_type ""
	nparams 2
	  param inout name "dtm" type class_ref 618754 // DTM
	  param in name "element" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a getAttributes NamedNodeMap for a given DTM element node

@param dtm The DTM Reference, must be non-null.
@param element The DTM element handle.
"
      end

      operation 5203202 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the number of Attributes on this Element

@return The number of nodes in this map.
"
      end

      operation 5203330 "getNamedItem"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a node specified by name.
@param name The <code>nodeName</code> of a node to retrieve.
@return A <code>Node</code> (of any type) with the specified
  <code>nodeName</code>, or <code>null</code> if it does not identify
  any node in this map.
"
      end

      operation 5203458 "item"
	public return_type class_ref 317570 // Node
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>index</code>th item in the map. If <code>index</code>
is greater than or equal to the number of nodes in this map, this
returns <code>null</code>.
@param i The index of the requested item.
@return The node at the <code>index</code>th position in the map, or
  <code>null</code> if that is not a valid index.
"
      end

      operation 5203586 "setNamedItem"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "newNode" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a node using its <code>nodeName</code> attribute. If a node with
that name is already present in this map, it is replaced by the new
one.
<br>As the <code>nodeName</code> attribute is used to derive the name
which the node must be stored under, multiple nodes of certain types
(those that have a \"special\" string value) cannot be stored as the
names would clash. This is seen as preferable to allowing nodes to be
aliased.
@param newNode node to store in this map. The node will later be
  accessible using the value of its <code>nodeName</code> attribute.

@return If the new <code>Node</code> replaces an existing node the
  replaced <code>Node</code> is returned, otherwise <code>null</code>
  is returned.
@exception DOMException
  WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created from a
  different document than the one that created this map.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.
  <br>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an
  <code>Attr</code> that is already an attribute of another
  <code>Element</code> object. The DOM user must explicitly clone
  <code>Attr</code> nodes to re-use them in other elements.
"
      end

      operation 5203714 "removeNamedItem"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a node specified by name. When this map contains the attributes
attached to an element, if the removed attribute is known to have a
default value, an attribute immediately appears containing the
default value as well as the corresponding namespace URI, local name,
and prefix when applicable.
@param name The <code>nodeName</code> of the node to remove.

@return The node removed from this map if a node with such a name
  exists.
@exception DOMException
  NOT_FOUND_ERR: Raised if there is no node named <code>name</code> in
  this map.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.
"
      end

      operation 5203842 "getNamedItemNS"
	public return_type class_ref 317570 // Node
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a node specified by local name and namespace URI. HTML-only
DOM implementations do not need to implement this method.
@param namespaceURI The namespace URI of the node to retrieve.
@param localName The local name of the node to retrieve.

@return A <code>Node</code> (of any type) with the specified local
  name and namespace URI, or <code>null</code> if they do not
  identify any node in this map.
@since DOM Level 2
"
      end

      operation 5203970 "setNamedItemNS"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "arg" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a node using its <code>namespaceURI</code> and
<code>localName</code>. If a node with that namespace URI and that
local name is already present in this map, it is replaced by the new
one.
<br>HTML-only DOM implementations do not need to implement this method.
@param arg A node to store in this map. The node will later be
  accessible using the value of its <code>namespaceURI</code> and
  <code>localName</code> attributes.

@return If the new <code>Node</code> replaces an existing node the
  replaced <code>Node</code> is returned, otherwise <code>null</code>
  is returned.
@exception DOMException
  WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created from a
  different document than the one that created this map.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.
  <br>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an
  <code>Attr</code> that is already an attribute of another
  <code>Element</code> object. The DOM user must explicitly clone
  <code>Attr</code> nodes to re-use them in other elements.
@since DOM Level 2
"
      end

      operation 5204098 "removeNamedItemNS"
	public return_type class_ref 317570 // Node
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a node specified by local name and namespace URI. A removed
attribute may be known to have a default value when this map contains
the attributes attached to an element, as returned by the attributes
attribute of the <code>Node</code> interface. If so, an attribute
immediately appears containing the default value as well as the
corresponding namespace URI, local name, and prefix when applicable.
<br>HTML-only DOM implementations do not need to implement this method.

@param namespaceURI The namespace URI of the node to remove.
@param localName The local name of the node to remove.

@return The node removed from this map if a node with such a local
  name and namespace URI exists.
@exception DOMException
  NOT_FOUND_ERR: Raised if there is no node with the specified
  <code>namespaceURI</code> and <code>localName</code> in this map.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.
@since DOM Level 2
"
      end

      class 743554 "DTMException"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 2237570 // <generalisation>
	  relation 2237570 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 2237570 // <generalisation>
	    b parent class_ref 646658 // DOMException
	end

	attribute 1156866 "serialVersionUID"
	  class_attribute const_attribute package explicit_type "long"
	  init_value " -8290238117162437678L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 5204226 "DTMException"
	  public explicit_return_type ""
	  nparams 2
	    param in name "code" explicit_type "short"
	    param inout name "message" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a DOM/DTM exception.

@param code
@param message
"
	end

	operation 5204354 "DTMException"
	  public explicit_return_type ""
	  nparams 1
	    param in name "code" explicit_type "short"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor DTMException


@param code
"
	end
      end
    end

    class 743682 "DTMNodeIterator"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>DTMNodeIterator</code> gives us an implementation of the
DTMNodeIterator which returns DOM nodes.

Please note that this is not necessarily equivlaent to a DOM
NodeIterator operating over the same document. In particular:
<ul>

<li>If there are several Text nodes in logical succession (ie,
across CDATASection and EntityReference boundaries), we will return
only the first; the caller is responsible for stepping through
them.
(%REVIEW% Provide a convenience routine here to assist, pending
proposed DOM Level 3 getAdjacentText() operation?) </li>

<li>Since the whole XPath/XSLT architecture assumes that the source
document is not altered while we're working with it, we do not
promise to implement the DOM NodeIterator's \"maintain current
position\" response to document mutation. </li>

<li>Since our design for XPath NodeIterators builds a stateful
filter directly into the traversal object, getNodeFilter() is not
supported.</li>

</ul>

<p>State: In progress!!</p>
"
      classrelation 2237698 // <realization>
	relation 2237698 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2237698 // <realization>
	  b parent class_ref 583042 // NodeIterator
      end

      classrelation 2237826 // dtm_iter (<unidirectional association>)
	relation 2237826 --->
	  a role_name "dtm_iter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2237826 // dtm_iter (<unidirectional association>)
	  b parent class_ref 635522 // DTMIterator
      end

      attribute 1156994 "valid"
	private explicit_type "boolean"
	init_value "true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 5204482 "DTMNodeIterator"
	public explicit_return_type ""
	nparams 1
	  param inout name "dtmIterator" type class_ref 635522 // DTMIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Methods unique to this class
 Public constructor: Wrap a DTMNodeIterator around an existing
and preconfigured DTMIterator
"
      end

      operation 5204610 "getDTMIterator"
	public return_type class_ref 635522 // DTMIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Access the wrapped DTMIterator. I'm not sure whether anyone will
need this or not, but let's write it and think about it.
"
      end

      operation 5204738 "detach"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 org.w3c.dom.traversal.NodeFilter API follows
 Detaches the NodeIterator from the set which it iterated over,
releasing any computational resources and placing the iterator in
the INVALID state.
"
      end

      operation 5204866 "getExpandEntityReferences"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The value of this flag determines whether the children
of entity reference nodes are visible to the iterator.

@return false, always (the DTM model flattens entity references)
"
      end

      operation 5204994 "getFilter"
	public return_type class_ref 653442 // NodeFilter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a handle to the filter used to screen nodes.

This is ill-defined in Xalan's usage of Nodeiterator, where we have
built stateful XPath-based filtering directly into the traversal
object. We could return something which supports the NodeFilter interface
and allows querying whether a given node would be permitted if it appeared
as our next node, but in the current implementation that would be very
complex -- and just isn't all that useful.

@throws DOMException -- NOT_SUPPORTED_ERROR because I can't think
of anything more useful to do in this case
"
      end

      operation 5205122 "getRoot"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return The root node of the NodeIterator, as specified
when it was created.
"
      end

      operation 5205250 "getWhatToShow"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a mask describing which node types are presented via the
iterator.
"
      end

      operation 5205378 "nextNode"
	public return_type class_ref 317570 // Node
	nparams 0
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return the next node in the set and advance the position of the
iterator in the set.

@throws DOMException - INVALID_STATE_ERR Raised if this method is
called after the detach method was invoked.
"
      end

      operation 5205506 "previousNode"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return the next previous in the set and advance the position of the
iterator in the set.

@throws DOMException - INVALID_STATE_ERR Raised if this method is
called after the detach method was invoked.
"
      end
    end

    class 743810 "DTMNodeList"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>DTMNodeList</code> gives us an implementation of the DOM's
NodeList interface wrapped around a DTM Iterator. The author
considers this something of an abominations, since NodeList was not
intended to be a general purpose \"list of nodes\" API and is
generally considered by the DOM WG to have be a mistake... but I'm
told that some of the XPath/XSLT folks say they must have this
solution.

Please note that this is not necessarily equivlaent to a DOM
NodeList operating over the same document. In particular:
<ul>

<li>If there are several Text nodes in logical succession (ie,
across CDATASection and EntityReference boundaries), we will return
only the first; the caller is responsible for stepping through
them.
(%REVIEW% Provide a convenience routine here to assist, pending
proposed DOM Level 3 getAdjacentText() operation?) </li>

<li>Since the whole XPath/XSLT architecture assumes that the source
document is not altered while we're working with it, we do not
promise to implement the DOM NodeList's \"live view\" response to
document mutation. </li>

</ul>

<p>State: In progress!!</p>
"
      classrelation 2237954 // <generalisation>
	relation 2237954 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2237954 // <generalisation>
	  b parent class_ref 743042 // DTMNodeListBase
      end

      classrelation 2238082 // m_iter (<unidirectional association>)
	relation 2238082 --->
	  a role_name "m_iter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2238082 // m_iter (<unidirectional association>)
	  b parent class_ref 635522 // DTMIterator
      end

      operation 5205634 "DTMNodeList"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Methods unique to this class"
      end

      operation 5205762 "DTMNodeList"
	public explicit_return_type ""
	nparams 1
	  param inout name "dtmIterator" type class_ref 635522 // DTMIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Public constructor: Wrap a DTMNodeList around an existing
and preconfigured DTMIterator

WARNING: THIS HAS THE SIDE EFFECT OF ISSUING setShouldCacheNodes(true)
AGAINST THE DTMIterator.

"
      end

      operation 5205890 "getDTMIterator"
	public return_type class_ref 635522 // DTMIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Access the wrapped DTMIterator. I'm not sure whether anyone will
need this or not, but let's write it and think about it.

"
      end

      operation 5206018 "item"
	public return_type class_ref 317570 // Node
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 org.w3c.dom.NodeList API follows

Returns the <code>index</code>th item in the collection. If
<code>index</code> is greater than or equal to the number of nodes in
the list, this returns <code>null</code>.
@param index Index into the collection.
@return The node at the <code>index</code>th position in the
  <code>NodeList</code>, or <code>null</code> if that is not a valid
  index.
"
      end

      operation 5206146 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The number of nodes in the list. The range of valid child node indices
is 0 to <code>length-1</code> inclusive.
"
      end
    end

    class 743938 "DTMNodeProxy"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>DTMNodeProxy</code> presents a DOM Node API front-end to the DTM model.
<p>
It does _not_ attempt to address the \"node identity\" question; no effort
is made to prevent the creation of multiple proxies referring to a single
DTM node. Users can create a mechanism for managing this, or relinquish the
use of \"==\" and use the .sameNodeAs() mechanism, which is under
consideration for future versions of the DOM.
<p>
DTMNodeProxy may be subclassed further to present specific DOM node types.

@see org.w3c.dom
"
      classrelation 2238210 // <realization>
	relation 2238210 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2238210 // <realization>
	  b parent class_ref 317570 // Node
      end

      classrelation 2238338 // <realization>
	relation 2238338 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2238338 // <realization>
	  b parent class_ref 378626 // Document
      end

      classrelation 2238466 // <realization>
	relation 2238466 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2238466 // <realization>
	  b parent class_ref 649090 // Text
      end

      classrelation 2238594 // <realization>
	relation 2238594 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2238594 // <realization>
	  b parent class_ref 648194 // Element
      end

      classrelation 2238722 // <realization>
	relation 2238722 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2238722 // <realization>
	  b parent class_ref 648066 // Attr
      end

      classrelation 2238850 // <realization>
	relation 2238850 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2238850 // <realization>
	  b parent class_ref 650242 // ProcessingInstruction
      end

      classrelation 2238978 // <realization>
	relation 2238978 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2238978 // <realization>
	  b parent class_ref 649474 // Comment
      end

      classrelation 2239106 // <realization>
	relation 2239106 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2239106 // <realization>
	  b parent class_ref 650114 // DocumentFragment
      end

      classrelation 2239234 // dtm (<unidirectional association>)
	relation 2239234 --->
	  a role_name "dtm" public
	    comment " The DTM for this node. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2239234 // dtm (<unidirectional association>)
	  b parent class_ref 618754 // DTM
      end

      attribute 1157122 "node"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The DTM node handle. 
"
      end

      classrelation 2239362 // EMPTYSTRING (<unidirectional association>)
	relation 2239362 --->
	  a role_name "EMPTYSTRING" init_value " \"\"" class_relation const_relation private
	    comment " The return value as Empty String. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2239362 // EMPTYSTRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2239490 // implementation (<unidirectional association>)
	relation 2239490 --->
	  a role_name "implementation" init_value "new DTMNodeProxyImplementation()" class_relation const_relation package
	    comment " The DOMImplementation object 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2239490 // implementation (<unidirectional association>)
	  b parent class_ref 636674 // DOMImplementation
      end

      operation 5206274 "DTMNodeProxy"
	public explicit_return_type ""
	nparams 2
	  param inout name "dtm" type class_ref 618754 // DTM
	  param in name "node" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a DTMNodeProxy Node representing a specific Node in a DTM

@param dtm The DTM Reference, must be non-null.
@param node The DTM node handle.
"
      end

      operation 5206402 "getDTM"
	public return_type class_ref 618754 // DTM
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "NON-DOM: Return the DTM model

@return The DTM that this proxy is a representative for.
"
      end

      operation 5206530 "getDTMNodeNumber"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "NON-DOM: Return the DTM node number

@return The DTM node handle.
"
      end

      operation 5206658 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "node" type class_ref 317570 // Node
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test for equality based on node number.

@param node A DTM node proxy reference.

@return true if the given node has the same handle as this node.
"
      end

      operation 5206786 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "node" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Test for equality based on node number.

@param node A DTM node proxy reference.

@return true if the given node has the same handle as this node.
"
      end

      operation 5206914 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 5207042 "sameNodeAs"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 317570 // Node
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "FUTURE DOM: Test node identity, in lieu of Node==Node

@param other

@return true if the given node has the same handle as this node.
"
      end

      operation 5207170 "getNodeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Node
"
      end

      operation 5207298 "getTarget"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A PI's \"target\" states what processor channel the PI's data
should be directed to. It is defined differently in HTML and XML.
<p>
In XML, a PI's \"target\" is the first (whitespace-delimited) token
following the \"<?\" token that begins the PI.
<p>
In HTML, target is always null.
<p>
Note that getNodeName is aliased to getTarget.


"
      end

      operation 5207426 "getLocalName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " getTarget():String



@see org.w3c.dom.Node as of DOM Level 2
"
      end

      operation 5207554 "getPrefix"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@return The prefix for this node.
@see org.w3c.dom.Node as of DOM Level 2
"
      end

      operation 5207682 "setPrefix"
	public explicit_return_type "void"
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param prefix

@throws DOMException
@see org.w3c.dom.Node as of DOM Level 2 -- DTMNodeProxy is read-only
"
      end

      operation 5207810 "getNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Node as of DOM Level 2
"
      end

      operation 5207938 "supports"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "feature" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Ask whether we support a given DOM feature.
In fact, we do not _fully_ support any DOM feature -- we're a
read-only subset -- so arguably we should always return false.
Or we could say that we support DOM Core Level 2 but all nodes
are read-only. Unclear which answer is least misleading.

NON-DOM method. This was present in early drafts of DOM Level 2,
but was renamed isSupported. It's present here only because it's
cheap, harmless, and might help some poor fool who is still trying
to use an early Working Draft of the DOM.

@param feature
@param version

@return false
"
      end

      operation 5208066 "isSupported"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "feature" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Ask whether we support a given DOM feature.
In fact, we do not _fully_ support any DOM feature -- we're a
read-only subset -- so arguably we should always return false.

@param feature
@param version

@return false
@see org.w3c.dom.Node as of DOM Level 2
"
      end

      operation 5208194 "getNodeValue"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "


@throws DOMException
@see org.w3c.dom.Node
"
      end

      operation 5208322 "getStringValue"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The string value of the node

@throws DOMException
"
      end

      operation 5208450 "setNodeValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "nodeValue" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param nodeValue

@throws DOMException
@see org.w3c.dom.Node -- DTMNodeProxy is read-only
"
      end

      operation 5208578 "getNodeType"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Node
"
      end

      operation 5208706 "getParentNode"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Node
"
      end

      operation 5208834 "getOwnerNode"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "

@see org.w3c.dom.Node
"
      end

      operation 5208962 "getChildNodes"
	public return_type class_ref 333058 // NodeList
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Node
"
      end

      operation 5209090 "getFirstChild"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Node
"
      end

      operation 5209218 "getLastChild"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Node
"
      end

      operation 5209346 "getPreviousSibling"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Node
"
      end

      operation 5209474 "getNextSibling"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Node
"
      end

      operation 5209602 "getAttributes"
	public return_type class_ref 327042 // NamedNodeMap
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " DTMNamedNodeMap m_attrs;



@see org.w3c.dom.Node
"
      end

      operation 5209730 "hasAttribute"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Method hasAttribute


@param name

"
      end

      operation 5209858 "hasAttributeNS"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Method hasAttributeNS


@param namespaceURI
@param localName


"
      end

      operation 5209986 "getOwnerDocument"
	public return_type class_ref 378626 // Document
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Node
"
      end

      operation 5210114 "insertBefore"
	public return_type class_ref 317570 // Node
	nparams 2
	  param inout name "newChild" type class_ref 317570 // Node
	  param inout name "refChild" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param newChild
@param refChild



@throws DOMException
@see org.w3c.dom.Node -- DTMNodeProxy is read-only
"
      end

      operation 5210242 "replaceChild"
	public return_type class_ref 317570 // Node
	nparams 2
	  param inout name "newChild" type class_ref 317570 // Node
	  param inout name "oldChild" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param newChild
@param oldChild



@throws DOMException
@see org.w3c.dom.Node -- DTMNodeProxy is read-only
"
      end

      operation 5210370 "removeChild"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "oldChild" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param oldChild



@throws DOMException
@see org.w3c.dom.Node -- DTMNodeProxy is read-only
"
      end

      operation 5210498 "appendChild"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "newChild" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param newChild



@throws DOMException
@see org.w3c.dom.Node -- DTMNodeProxy is read-only
"
      end

      operation 5210626 "hasChildNodes"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Node
"
      end

      operation 5210754 "cloneNode"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "deep" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param deep


@see org.w3c.dom.Node -- DTMNodeProxy is read-only
"
      end

      operation 5210882 "getDoctype"
	public return_type class_ref 649986 // DocumentType
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Document
"
      end

      operation 5211010 "getImplementation"
	public return_type class_ref 636674 // DOMImplementation
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Document
"
      end

      operation 5211138 "getDocumentElement"
	public return_type class_ref 648194 // Element
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " This is a bit of a problem in DTM, since a DTM may be a Document
Fragment and hence not have a clear-cut Document Element. We can
make it work in the well-formed cases but would that be confusing for others?


@see org.w3c.dom.Document
"
      end

      operation 5211266 "createElement"
	public return_type class_ref 648194 // Element
	nparams 1
	  param inout name "tagName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param tagName



@throws DOMException
@see org.w3c.dom.Document
"
      end

      operation 5211394 "createDocumentFragment"
	public return_type class_ref 650114 // DocumentFragment
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Document
"
      end

      operation 5211522 "createTextNode"
	public return_type class_ref 649090 // Text
	nparams 1
	  param inout name "data" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param data


@see org.w3c.dom.Document
"
      end

      operation 5211650 "createComment"
	public return_type class_ref 649474 // Comment
	nparams 1
	  param inout name "data" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param data


@see org.w3c.dom.Document
"
      end

      operation 5211778 "createCDATASection"
	public return_type class_ref 649218 // CDATASection
	nparams 1
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param data



@throws DOMException
@see org.w3c.dom.Document
"
      end

      operation 5211906 "createProcessingInstruction"
	public return_type class_ref 650242 // ProcessingInstruction
	nparams 2
	  param inout name "target" type class_ref 128130 // String
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param target
@param data



@throws DOMException
@see org.w3c.dom.Document
"
      end

      operation 5212034 "createAttribute"
	public return_type class_ref 648066 // Attr
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param name



@throws DOMException
@see org.w3c.dom.Document
"
      end

      operation 5212162 "createEntityReference"
	public return_type class_ref 650370 // EntityReference
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param name



@throws DOMException
@see org.w3c.dom.Document
"
      end

      operation 5212290 "getElementsByTagName"
	public return_type class_ref 333058 // NodeList
	nparams 1
	  param inout name "tagname" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param tagname


@see org.w3c.dom.Document
"
      end

      operation 5212418 "traverseChildren"
	private explicit_return_type "void"
	nparams 4
	  param inout name "listVector" type class_ref 141442 // Vector
	  param inout name "tempNode" type class_ref 317570 // Node
	  param inout name "tagname" type class_ref 128130 // String
	  param inout name "isTagNameWildCard" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@param listVector
@param tempNode
@param tagname
@param isTagNameWildCard


Private method to be used for recursive iterations to obtain elements by tag name.
"
      end

      operation 5212546 "importNode"
	public return_type class_ref 317570 // Node
	nparams 2
	  param inout name "importedNode" type class_ref 317570 // Node
	  param inout name "deep" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param importedNode
@param deep



@throws DOMException
@see org.w3c.dom.Document as of DOM Level 2 -- DTMNodeProxy is read-only
"
      end

      operation 5212674 "createElementNS"
	public return_type class_ref 648194 // Element
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "qualifiedName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param namespaceURI
@param qualifiedName



@throws DOMException
@see org.w3c.dom.Document as of DOM Level 2
"
      end

      operation 5212802 "createAttributeNS"
	public return_type class_ref 648066 // Attr
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "qualifiedName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param namespaceURI
@param qualifiedName



@throws DOMException
@see org.w3c.dom.Document as of DOM Level 2
"
      end

      operation 5212930 "getElementsByTagNameNS"
	public return_type class_ref 333058 // NodeList
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param namespaceURI
@param localName


@see org.w3c.dom.Document as of DOM Level 2
"
      end

      operation 5213058 "traverseChildren"
	private explicit_return_type "void"
	nparams 6
	  param inout name "listVector" type class_ref 141442 // Vector
	  param inout name "tempNode" type class_ref 317570 // Node
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localname" type class_ref 128130 // String
	  param inout name "isNamespaceURIWildCard" explicit_type "boolean"
	  param inout name "isLocalNameWildCard" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@param listVector
@param tempNode
@param namespaceURI
@param localname
@param isNamespaceURIWildCard
@param isLocalNameWildCard

Private method to be used for recursive iterations to obtain elements by tag name
and namespaceURI.
"
      end

      operation 5213186 "getElementById"
	public return_type class_ref 648194 // Element
	nparams 1
	  param inout name "elementId" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param elementId


@see org.w3c.dom.Document as of DOM Level 2
"
      end

      operation 5213314 "splitText"
	public return_type class_ref 649090 // Text
	nparams 1
	  param in name "offset" explicit_type "int"
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param offset



@throws DOMException
@see org.w3c.dom.Text
"
      end

      operation 5213442 "getData"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "


@throws DOMException
@see org.w3c.dom.CharacterData
"
      end

      operation 5213570 "setData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param data

@throws DOMException
@see org.w3c.dom.CharacterData
"
      end

      operation 5213698 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.CharacterData
"
      end

      operation 5213826 "substringData"
	public return_type class_ref 128130 // String
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param offset
@param count



@throws DOMException
@see org.w3c.dom.CharacterData
"
      end

      operation 5213954 "appendData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "arg" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param arg

@throws DOMException
@see org.w3c.dom.CharacterData
"
      end

      operation 5214082 "insertData"
	public explicit_return_type "void"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "arg" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param offset
@param arg

@throws DOMException
@see org.w3c.dom.CharacterData
"
      end

      operation 5214210 "deleteData"
	public explicit_return_type "void"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param offset
@param count

@throws DOMException
@see org.w3c.dom.CharacterData
"
      end

      operation 5214338 "replaceData"
	public explicit_return_type "void"
	nparams 3
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "arg" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param offset
@param count
@param arg

@throws DOMException
@see org.w3c.dom.CharacterData
"
      end

      operation 5214466 "getTagName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Element
"
      end

      operation 5214594 "getAttribute"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param name


@see org.w3c.dom.Element
"
      end

      operation 5214722 "setAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param name
@param value

@throws DOMException
@see org.w3c.dom.Element
"
      end

      operation 5214850 "removeAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param name

@throws DOMException
@see org.w3c.dom.Element
"
      end

      operation 5214978 "getAttributeNode"
	public return_type class_ref 648066 // Attr
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param name


@see org.w3c.dom.Element
"
      end

      operation 5215106 "setAttributeNode"
	public return_type class_ref 648066 // Attr
	nparams 1
	  param inout name "newAttr" type class_ref 648066 // Attr
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param newAttr



@throws DOMException
@see org.w3c.dom.Element
"
      end

      operation 5215234 "removeAttributeNode"
	public return_type class_ref 648066 // Attr
	nparams 1
	  param inout name "oldAttr" type class_ref 648066 // Attr
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param oldAttr



@throws DOMException
@see org.w3c.dom.Element
"
      end

      operation 5215362 "hasAttributes"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Introduced in DOM Level 2.


"
      end

      operation 5215490 "normalize"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " @see org.w3c.dom.Element "
      end

      operation 5215618 "getAttributeNS"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param namespaceURI
@param localName


@see org.w3c.dom.Element
"
      end

      operation 5215746 "setAttributeNS"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "qualifiedName" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param namespaceURI
@param qualifiedName
@param value

@throws DOMException
@see org.w3c.dom.Element
"
      end

      operation 5215874 "removeAttributeNS"
	public explicit_return_type "void"
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param namespaceURI
@param localName

@throws DOMException
@see org.w3c.dom.Element
"
      end

      operation 5216002 "getAttributeNodeNS"
	public return_type class_ref 648066 // Attr
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param namespaceURI
@param localName


@see org.w3c.dom.Element
"
      end

      operation 5216130 "setAttributeNodeNS"
	public return_type class_ref 648066 // Attr
	nparams 1
	  param inout name "newAttr" type class_ref 648066 // Attr
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param newAttr



@throws DOMException
@see org.w3c.dom.Element
"
      end

      operation 5216258 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Attr
"
      end

      operation 5216386 "getSpecified"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Attr
"
      end

      operation 5216514 "getValue"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "

@see org.w3c.dom.Attr
"
      end

      operation 5216642 "setValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
@param value
@see org.w3c.dom.Attr
"
      end

      operation 5216770 "getOwnerElement"
	public return_type class_ref 648194 // Element
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Get the owner element of an attribute.


@see org.w3c.dom.Attr as of DOM Level 2
"
      end

      operation 5216898 "adoptNode"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "source" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "NEEDSDOC Method adoptNode


NEEDSDOC @param source

NEEDSDOC (adoptNode) @return

@throws DOMException
"
      end

      operation 5217026 "getInputEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>EXPERIMENTAL! Based on the <a
href='http://www.w3.org/TR/2001/WD-DOM-Level-3-Core-20010605'>Document
Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.</a>.
<p>
An attribute specifying, as part of the XML declaration, the encoding
of this document. This is <code>null</code> when unspecified.
@since DOM Level 3

NEEDSDOC ($objectName$) @return
"
      end

      operation 5217154 "setEncoding"
	public explicit_return_type "void"
	nparams 1
	  param inout name "encoding" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>EXPERIMENTAL! Based on the <a
href='http://www.w3.org/TR/2001/WD-DOM-Level-3-Core-20010605'>Document
Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.</a>.
<p>
An attribute specifying, as part of the XML declaration, the encoding
of this document. This is <code>null</code> when unspecified.
@since DOM Level 3

NEEDSDOC @param encoding
"
      end

      operation 5217282 "getStandalone"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>EXPERIMENTAL! Based on the <a
href='http://www.w3.org/TR/2001/WD-DOM-Level-3-Core-20010605'>Document
Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.</a>.
<p>
An attribute specifying, as part of the XML declaration, whether this
document is standalone.
@since DOM Level 3

NEEDSDOC ($objectName$) @return
"
      end

      operation 5217410 "setStandalone"
	public explicit_return_type "void"
	nparams 1
	  param inout name "standalone" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>EXPERIMENTAL! Based on the <a
href='http://www.w3.org/TR/2001/WD-DOM-Level-3-Core-20010605'>Document
Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.</a>.
<p>
An attribute specifying, as part of the XML declaration, whether this
document is standalone.
@since DOM Level 3

NEEDSDOC @param standalone
"
      end

      operation 5217538 "getStrictErrorChecking"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>EXPERIMENTAL! Based on the <a
href='http://www.w3.org/TR/2001/WD-DOM-Level-3-Core-20010605'>Document
Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.</a>.
<p>
An attribute specifying whether errors checking is enforced or not.
When set to <code>false</code>, the implementation is free to not
test every possible error case normally defined on DOM operations,
and not raise any <code>DOMException</code>. In case of error, the
behavior is undefined. This attribute is <code>true</code> by
defaults.
@since DOM Level 3

NEEDSDOC ($objectName$) @return
"
      end

      operation 5217666 "setStrictErrorChecking"
	public explicit_return_type "void"
	nparams 1
	  param inout name "strictErrorChecking" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>EXPERIMENTAL! Based on the <a
href='http://www.w3.org/TR/2001/WD-DOM-Level-3-Core-20010605'>Document
Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.</a>.
<p>
An attribute specifying whether errors checking is enforced or not.
When set to <code>false</code>, the implementation is free to not
test every possible error case normally defined on DOM operations,
and not raise any <code>DOMException</code>. In case of error, the
behavior is undefined. This attribute is <code>true</code> by
defaults.
@since DOM Level 3

NEEDSDOC @param strictErrorChecking
"
      end

      operation 5217794 "getVersion"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>EXPERIMENTAL! Based on the <a
href='http://www.w3.org/TR/2001/WD-DOM-Level-3-Core-20010605'>Document
Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.</a>.
<p>
An attribute specifying, as part of the XML declaration, the version
number of this document. This is <code>null</code> when unspecified.
@since DOM Level 3

NEEDSDOC ($objectName$) @return
"
      end

      operation 5217922 "setVersion"
	public explicit_return_type "void"
	nparams 1
	  param inout name "version" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>EXPERIMENTAL! Based on the <a
href='http://www.w3.org/TR/2001/WD-DOM-Level-3-Core-20010605'>Document
Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.</a>.
<p>
An attribute specifying, as part of the XML declaration, the version
number of this document. This is <code>null</code> when unspecified.
@since DOM Level 3

NEEDSDOC @param version
"
      end

      class 744066 "DTMNodeProxyImplementation"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 2239618 // <realization>
	  relation 2239618 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 2239618 // <realization>
	    b parent class_ref 636674 // DOMImplementation
	end

	operation 5218050 "createDocumentType"
	  public return_type class_ref 649986 // DocumentType
	  nparams 3
	    param inout name "qualifiedName" type class_ref 128130 // String
	    param inout name "publicId" type class_ref 128130 // String
	    param inout name "systemId" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 5218178 "createDocument"
	  public return_type class_ref 378626 // Document
	  nparams 3
	    param inout name "namespaceURI" type class_ref 128130 // String
	    param inout name "qualfiedName" type class_ref 128130 // String
	    param inout name "doctype" type class_ref 649986 // DocumentType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 5218306 "hasFeature"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "feature" type class_ref 128130 // String
	    param inout name "version" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " Ask whether we support a given DOM feature.

In fact, we do not _fully_ support any DOM feature -- we're a
read-only subset -- so arguably we should always return false.
On the other hand, it may be more practically useful to return
true and simply treat the whole DOM as read-only, failing on the
methods we can't support. I'm not sure which would be more useful
to the caller.
"
	end

	operation 5218434 "getFeature"
	  public return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "feature" type class_ref 128130 // String
	    param inout name "version" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " This method returns a specialized object which implements the
specialized APIs of the specified feature and version. The
specialized object may also be obtained by using binding-specific
casting methods but is not necessarily expected to, as discussed in Mixed DOM implementations
.
@param feature The name of the feature requested (case-insensitive).
@param version  This is the version number of the feature to test. If
  the version is <code>null</code> or the empty string, supporting
  any version of the feature will cause the method to return an
  object that supports at least one version of the feature.
@return  Returns an object which implements the specialized APIs of
  the specified feature and version, if any, or <code>null</code> if
  there is no object which implements interfaces associated with that
  feature. If the <code>DOMObject</code> returned by this method
  implements the <code>Node</code> interface, it must delegate to the
  primary core <code>Node</code> and not return results inconsistent
  with the primary core <code>Node</code> such as attributes,
  childNodes, etc.
@since DOM Level 3
"
	end
      end

      operation 5218562 "setUserData"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "key" type class_ref 128130 // String
	  param inout name "data" type class_ref 129538 // Object
	  param inout name "handler" type class_ref 647298 // UserDataHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "RAMESH : Pending proper implementation of DOM Level 3"
      end

      operation 5218690 "getUserData"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Retrieves the object associated to a key on a this node. The object
must first have been set to this node by calling
<code>setUserData</code> with the same key.
@param key The key the object is associated to.
@return Returns the <code>DOMObject</code> associated to the given key
  on this node, or <code>null</code> if there was none.
@since DOM Level 3
"
      end

      operation 5218818 "getFeature"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "feature" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " This method returns a specialized object which implements the
specialized APIs of the specified feature and version. The
specialized object may also be obtained by using binding-specific
casting methods but is not necessarily expected to, as discussed in Mixed DOM implementations.
@param feature The name of the feature requested (case-insensitive).
@param version  This is the version number of the feature to test. If
  the version is <code>null</code> or the empty string, supporting
  any version of the feature will cause the method to return an
  object that supports at least one version of the feature.
@return  Returns an object which implements the specialized APIs of
  the specified feature and version, if any, or <code>null</code> if
  there is no object which implements interfaces associated with that
  feature. If the <code>DOMObject</code> returned by this method
  implements the <code>Node</code> interface, it must delegate to the
  primary core <code>Node</code> and not return results inconsistent
  with the primary core <code>Node</code> such as attributes,
  childNodes, etc.
@since DOM Level 3
"
      end

      operation 5218946 "isEqualNode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "arg" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Tests whether two nodes are equal.
<br>This method tests for equality of nodes, not sameness (i.e.,
whether the two nodes are references to the same object) which can be
tested with <code>Node.isSameNode</code>. All nodes that are the same
will also be equal, though the reverse may not be true.
<br>Two nodes are equal if and only if the following conditions are
satisfied: The two nodes are of the same type.The following string
attributes are equal: <code>nodeName</code>, <code>localName</code>,
<code>namespaceURI</code>, <code>prefix</code>, <code>nodeValue</code>
, <code>baseURI</code>. This is: they are both <code>null</code>, or
they have the same length and are character for character identical.
The <code>attributes</code> <code>NamedNodeMaps</code> are equal.
This is: they are both <code>null</code>, or they have the same
length and for each node that exists in one map there is a node that
exists in the other map and is equal, although not necessarily at the
same index.The <code>childNodes</code> <code>NodeLists</code> are
equal. This is: they are both <code>null</code>, or they have the
same length and contain equal nodes at the same index. This is true
for <code>Attr</code> nodes as for any other type of node. Note that
normalization can affect equality; to avoid this, nodes should be
normalized before being compared.
<br>For two <code>DocumentType</code> nodes to be equal, the following
conditions must also be satisfied: The following string attributes
are equal: <code>publicId</code>, <code>systemId</code>,
<code>internalSubset</code>.The <code>entities</code>
<code>NamedNodeMaps</code> are equal.The <code>notations</code>
<code>NamedNodeMaps</code> are equal.
<br>On the other hand, the following do not affect equality: the
<code>ownerDocument</code> attribute, the <code>specified</code>
attribute for <code>Attr</code> nodes, the
<code>isWhitespaceInElementContent</code> attribute for
<code>Text</code> nodes, as well as any user data or event listeners
registered on the nodes.
@param arg The node to compare equality with.
@param deep If <code>true</code>, recursively compare the subtrees; if
  <code>false</code>, compare only the nodes themselves (and its
  attributes, if it is an <code>Element</code>).
@return If the nodes, and possibly subtrees are equal,
  <code>true</code> otherwise <code>false</code>.
@since DOM Level 3
"
      end

      operation 5219074 "lookupNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "specifiedPrefix" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "DOM Level 3
Look up the namespace URI associated to the given prefix, starting from this node.
Use lookupNamespaceURI(null) to lookup the default namespace

@param namespaceURI
@return th URI for the namespace
@since DOM Level 3
"
      end

      operation 5219202 "isDefaultNamespace"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "namespaceURI" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " DOM Level 3
 This method checks if the specified <code>namespaceURI</code> is the
 default namespace or not.
 @param namespaceURI The namespace URI to look for.
 @return  <code>true</code> if the specified <code>namespaceURI</code>
  is the default namespace, <code>false</code> otherwise.
@since DOM Level 3
"
      end

      operation 5219330 "lookupPrefix"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "namespaceURI" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "
DOM Level 3
Look up the prefix associated to the given namespace URI, starting from this node.

@param namespaceURI
@return the prefix for the namespace
"
      end

      operation 5219458 "isSameNode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns whether this node is the same node as the given one.
<br>This method provides a way to determine whether two
<code>Node</code> references returned by the implementation reference
the same object. When two <code>Node</code> references are references
to the same object, even if through a proxy, the references may be
used completely interchangably, such that all attributes have the
same values and calling the same DOM method on either reference
always has exactly the same effect.
@param other The node to test against.
@return Returns <code>true</code> if the nodes are the same,
  <code>false</code> otherwise.
@since DOM Level 3
"
      end

      operation 5219586 "setTextContent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "textContent" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This attribute returns the text content of this node and its
descendants. When it is defined to be null, setting it has no effect.
When set, any possible children this node may have are removed and
replaced by a single <code>Text</code> node containing the string
this attribute is set to. On getting, no serialization is performed,
the returned string does not contain any markup. No whitespace
normalization is performed, the returned string does not contain the
element content whitespaces . Similarly, on setting, no parsing is
performed either, the input string is taken as pure textual content.
<br>The string returned is made of the text content of this node
depending on its type, as defined below:
<table border='1'>
<tr>
<th>Node type</th>
<th>Content</th>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>
ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,
DOCUMENT_FRAGMENT_NODE</td>
<td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>
attribute value of every child node, excluding COMMENT_NODE and
PROCESSING_INSTRUCTION_NODE nodes</td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>ATTRIBUTE_NODE, TEXT_NODE,
CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>
<td valign='top' rowspan='1' colspan='1'>
<code>nodeValue</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>
<td valign='top' rowspan='1' colspan='1'>
null</td>
</tr>
</table>
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
@exception DOMException
  DOMSTRING_SIZE_ERR: Raised when it would return more characters than
  fit in a <code>DOMString</code> variable on the implementation
  platform.
@since DOM Level 3
"
      end

      operation 5219714 "getTextContent"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This attribute returns the text content of this node and its
descendants. When it is defined to be null, setting it has no effect.
When set, any possible children this node may have are removed and
replaced by a single <code>Text</code> node containing the string
this attribute is set to. On getting, no serialization is performed,
the returned string does not contain any markup. No whitespace
normalization is performed, the returned string does not contain the
element content whitespaces . Similarly, on setting, no parsing is
performed either, the input string is taken as pure textual content.
<br>The string returned is made of the text content of this node
depending on its type, as defined below:
<table border='1'>
<tr>
<th>Node type</th>
<th>Content</th>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>
ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,
DOCUMENT_FRAGMENT_NODE</td>
<td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>
attribute value of every child node, excluding COMMENT_NODE and
PROCESSING_INSTRUCTION_NODE nodes</td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>ATTRIBUTE_NODE, TEXT_NODE,
CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>
<td valign='top' rowspan='1' colspan='1'>
<code>nodeValue</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>
<td valign='top' rowspan='1' colspan='1'>
null</td>
</tr>
</table>
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
@exception DOMException
  DOMSTRING_SIZE_ERR: Raised when it would return more characters than
  fit in a <code>DOMString</code> variable on the implementation
  platform.
@since DOM Level 3
"
      end

      operation 5219842 "compareDocumentPosition"
	public explicit_return_type "short"
	nparams 1
	  param inout name "other" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares a node with this node with regard to their position in the
document.
@param other The node to compare against this node.
@return Returns how the given node is positioned relatively to this
  node.
@since DOM Level 3
"
      end

      operation 5219970 "getBaseURI"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "The absolute base URI of this node or <code>null</code> if undefined.
This value is computed according to . However, when the
<code>Document</code> supports the feature \"HTML\" , the base URI is
computed using first the value of the href attribute of the HTML BASE
element if any, and the value of the <code>documentURI</code>
attribute from the <code>Document</code> interface otherwise.
<br> When the node is an <code>Element</code>, a <code>Document</code>
or a a <code>ProcessingInstruction</code>, this attribute represents
the properties [base URI] defined in . When the node is a
<code>Notation</code>, an <code>Entity</code>, or an
<code>EntityReference</code>, this attribute represents the
properties [declaration base URI] in the . How will this be affected
by resolution of relative namespace URIs issue?It's not.Should this
only be on Document, Element, ProcessingInstruction, Entity, and
Notation nodes, according to the infoset? If not, what is it equal to
on other nodes? Null? An empty string? I think it should be the
parent's.No.Should this be read-only and computed or and actual
read-write attribute?Read-only and computed (F2F 19 Jun 2000 and
teleconference 30 May 2001).If the base HTML element is not yet
attached to a document, does the insert change the Document.baseURI?
Yes. (F2F 26 Sep 2001)
@since DOM Level 3
"
      end

      operation 5220098 "renameNode"
	public return_type class_ref 317570 // Node
	nparams 3
	  param inout name "n" type class_ref 317570 // Node
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "DOM Level 3
Renaming node
"
      end

      operation 5220226 "normalizeDocument"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " DOM Level 3
 Normalize document.
"
      end

      operation 5220354 "getDomConfig"
	public return_type class_ref 650498 // DOMConfiguration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "The configuration used when <code>Document.normalizeDocument</code> is
invoked.
@since DOM Level 3
"
      end

      classrelation 2239746 // fDocumentURI (<unidirectional association>)
	relation 2239746 --->
	  a role_name "fDocumentURI" protected
	    comment " DOM Level 3 feature: documentURI 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2239746 // fDocumentURI (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 5220482 "setDocumentURI"
	public explicit_return_type "void"
	nparams 1
	  param inout name "documentURI" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "DOM Level 3
"
      end

      operation 5220610 "getDocumentURI"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "DOM Level 3
The location of the document or <code>null</code> if undefined.
<br>Beware that when the <code>Document</code> supports the feature
\"HTML\" , the href attribute of the HTML BASE element takes precedence
over this attribute.
@since DOM Level 3
"
      end

      classrelation 2239874 // actualEncoding (<unidirectional association>)
	relation 2239874 --->
	  a role_name "actualEncoding" protected
	    comment "DOM Level 3 feature: Document actualEncoding 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2239874 // actualEncoding (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 5220738 "getActualEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DOM Level 3
An attribute specifying the actual encoding of this document. This is
<code>null</code> otherwise.
<br> This attribute represents the property [character encoding scheme]
defined in .
@since DOM Level 3
"
      end

      operation 5220866 "setActualEncoding"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DOM Level 3
An attribute specifying the actual encoding of this document. This is
<code>null</code> otherwise.
<br> This attribute represents the property [character encoding scheme]
defined in .
@since DOM Level 3
"
      end

      operation 5220994 "replaceWholeText"
	public return_type class_ref 649090 // Text
	nparams 1
	  param inout name "content" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "DOM Level 3
"
      end

      operation 5221122 "getWholeText"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "DOM Level 3
Returns all text of <code>Text</code> nodes logically-adjacent text
nodes to this node, concatenated in document order.
@since DOM Level 3
"
      end

      operation 5221250 "isElementContentWhitespace"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "DOM Level 3
Returns whether this text node contains whitespace in element content,
often abusively called \"ignorable whitespace\".
"
      end

      operation 5221378 "setIdAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "id" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "NON-DOM: set the type of this attribute to be ID type.

@param id
"
      end

      operation 5221506 "setIdAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "makeId" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "DOM Level 3: register the given attribute node as an ID attribute
"
      end

      operation 5221634 "setIdAttributeNode"
	public explicit_return_type "void"
	nparams 2
	  param inout name "at" type class_ref 648066 // Attr
	  param inout name "makeId" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "DOM Level 3: register the given attribute node as an ID attribute
"
      end

      operation 5221762 "setIdAttributeNS"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "makeId" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "DOM Level 3: register the given attribute node as an ID attribute
"
      end

      operation 5221890 "getSchemaTypeInfo"
	public return_type class_ref 648322 // TypeInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Method getSchemaTypeInfo.
@return TypeInfo
"
      end

      operation 5222018 "isId"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      classrelation 2240002 // xmlEncoding (<unidirectional association>)
	relation 2240002 --->
	  a role_name "xmlEncoding" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2240002 // xmlEncoding (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 5222146 "getXmlEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 5222274 "setXmlEncoding"
	public explicit_return_type "void"
	nparams 1
	  param inout name "xmlEncoding" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1157250 "xmlStandalone"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 5222402 "getXmlStandalone"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 5222530 "setXmlStandalone"
	public explicit_return_type "void"
	nparams 1
	  param inout name "xmlStandalone" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      classrelation 2240130 // xmlVersion (<unidirectional association>)
	relation 2240130 --->
	  a role_name "xmlVersion" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2240130 // xmlVersion (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 5222658 "getXmlVersion"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 5222786 "setXmlVersion"
	public explicit_return_type "void"
	nparams 1
	  param inout name "xmlVersion" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 744194 "DTMSafeStringPool"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " <p>Like DTMStringPool, but threadsafe. It's been proposed that DTMs
share their string pool(s); that raises threadsafety issues which
this addresses. Of course performance is inferior to that of the
bare-bones version.</p>

<p>Status: Passed basic test in main().</p>
"
      classrelation 2240258 // <generalisation>
	relation 2240258 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2240258 // <generalisation>
	  b parent class_ref 634114 // DTMStringPool
      end

      operation 5222914 "removeAllElements"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5223042 "indexToString"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "i" explicit_type "int"
	nexceptions 1
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return string whose value is uniquely identified by this integer index.
@throws java.lang.ArrayIndexOutOfBoundsException
 if index doesn't map to a string.
"
      end

      operation 5223170 "stringToIndex"
	public explicit_return_type "int"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return integer index uniquely identifying the value of this string. "
      end

      operation 5223298 "_main"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "args" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Command-line unit test driver. This test relies on the fact that
this version of the pool assigns indices consecutively, starting
from zero, as new unique strings are encountered.
"
      end
    end

    class 744322 "EmptyIterator"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "DTM Empty Axis Iterator. The class is immutable
"
      classrelation 2240642 // <realization>
	relation 2240642 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2240642 // <realization>
	  b parent class_ref 590082 // DTMAxisIterator
      end

      classrelation 2240770 // INSTANCE (<unidirectional association>)
	relation 2240770 --->
	  a role_name "INSTANCE" init_value "  new EmptyIterator()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2240770 // INSTANCE (<unidirectional association>)
	  b parent class_ref 744322 // EmptyIterator
      end

      operation 5224706 "getInstance"
	class_operation public return_type class_ref 590082 // DTMAxisIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5224834 "EmptyIterator"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5224962 "next"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5225090 "reset"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5225218 "getLast"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5225346 "getPosition"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5225474 "setMark"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5225602 "gotoMark"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5225730 "setStartNode"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 1
	  param in name "node" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5225858 "getStartNode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5225986 "isReverse"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5226114 "cloneIterator"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5226242 "setRestartable"
	public explicit_return_type "void"
	nparams 1
	  param inout name "isRestartable" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5226370 "getNodeByPosition"
	public explicit_return_type "int"
	nparams 1
	  param in name "position" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 744450 "ExtendedType"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The class ExtendedType represents an extended type object used by
ExpandedNameTable.
"
      attribute 1160194 "nodetype"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 2241666 // namespace (<unidirectional association>)
	relation 2241666 --->
	  a role_name "namespace" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2241666 // namespace (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2241794 // localName (<unidirectional association>)
	relation 2241794 --->
	  a role_name "localName" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2241794 // localName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1160322 "hash"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 5228290 "ExtendedType"
	public explicit_return_type ""
	nparams 3
	  param in name "nodetype" explicit_type "int"
	  param inout name "namespace" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an ExtendedType object from node type, namespace and local name.
The hash code is calculated from the node type, namespace and local name.

@param nodetype Type of the node
@param namespace Namespace of the node
@param localName Local name of the node
"
      end

      operation 5228418 "ExtendedType"
	public explicit_return_type ""
	nparams 4
	  param in name "nodetype" explicit_type "int"
	  param inout name "namespace" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param in name "hash" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an ExtendedType object from node type, namespace, local name
and a given hash code.

@param nodetype Type of the node
@param namespace Namespace of the node
@param localName Local name of the node
@param hash The given hash code
"
      end

      operation 5228546 "redefine"
	protected explicit_return_type "void"
	nparams 3
	  param in name "nodetype" explicit_type "int"
	  param inout name "namespace" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Redefine this ExtendedType object to represent a different extended type.
This is intended to be used ONLY on the hashET object. Using it elsewhere
will mess up existing hashtable entries!
"
      end

      operation 5228674 "redefine"
	protected explicit_return_type "void"
	nparams 4
	  param in name "nodetype" explicit_type "int"
	  param inout name "namespace" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param in name "hash" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Redefine this ExtendedType object to represent a different extended type.
This is intended to be used ONLY on the hashET object. Using it elsewhere
will mess up existing hashtable entries!
"
      end

      operation 5228802 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Override the hashCode() method in the Object class
"
      end

      operation 5228930 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 744450 // ExtendedType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test if this ExtendedType object is equal to the given ExtendedType.

@param other The other ExtendedType object to test for equality
@return true if the two ExtendedType objects are equal.
"
      end

      operation 5229058 "getNodeType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the node type
"
      end

      operation 5229186 "getLocalName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the local name
"
      end

      operation 5229314 "getNamespace"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the namespace
"
      end
    end

    class 744706 "IncrementalSAXSource_Filter"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " <p>IncrementalSAXSource_Filter implements IncrementalSAXSource, using a
standard SAX2 event source as its input and parcelling out those
events gradually in reponse to deliverMoreNodes() requests.  Output from the
filter will be passed along to a SAX handler registered as our
listener, but those callbacks will pass through a counting stage
which periodically yields control back to the controller coroutine.
</p>

<p>%REVIEW%: This filter is not currenly intended to be reusable
for parsing additional streams/documents. We may want to consider
making it resettable at some point in the future. But it's a
small object, so that'd be mostly a convenience issue; the cost
of allocating each time is trivial compared to the cost of processing
any nontrival stream.</p>

<p>For a brief usage example, see the unit-test main() method.</p>

<p>This is a simplification of the old CoroutineSAXParser, focusing
specifically on filtering. The resulting controller protocol is _far_
simpler and less error-prone; the only controller operation is deliverMoreNodes(),
and the only requirement is that deliverMoreNodes(false) be called if you want to
discard the rest of the stream and the previous deliverMoreNodes() didn't return
false.

This class is final and package private for security reasons. Please
see CR 6537912 for further details.

"
      classrelation 2241922 // <realization>
	relation 2241922 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2241922 // <realization>
	  b parent class_ref 633602 // IncrementalSAXSource
      end

      classrelation 2242050 // <realization>
	relation 2242050 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2242050 // <realization>
	  b parent class_ref 605954 // ContentHandler
      end

      classrelation 2242178 // <realization>
	relation 2242178 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2242178 // <realization>
	  b parent class_ref 617986 // DTDHandler
      end

      classrelation 2242306 // <realization>
	relation 2242306 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2242306 // <realization>
	  b parent class_ref 617602 // LexicalHandler
      end

      classrelation 2242434 // <realization>
	relation 2242434 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2242434 // <realization>
	  b parent class_ref 618114 // ErrorHandler
      end

      classrelation 2242562 // <realization>
	relation 2242562 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2242562 // <realization>
	  b parent class_ref 128770 // Runnable
      end

      attribute 1160450 "DEBUG"
	package explicit_type "boolean"
	init_value "false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Internal status report"
      end

      classrelation 2242690 // fCoroutineManager (<unidirectional association>)
	relation 2242690 --->
	  a role_name "fCoroutineManager" init_value " null" private
	    comment " Data

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2242690 // fCoroutineManager (<unidirectional association>)
	  b parent class_ref 742402 // CoroutineManager
      end

      attribute 1160578 "fControllerCoroutineID"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1160706 "fSourceCoroutineID"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 2242818 // clientContentHandler (<unidirectional association>)
	relation 2242818 --->
	  a role_name "clientContentHandler" init_value "null" private
	    comment " %REVIEW% support multiple?"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2242818 // clientContentHandler (<unidirectional association>)
	  b parent class_ref 605954 // ContentHandler
      end

      classrelation 2242946 // clientLexicalHandler (<unidirectional association>)
	relation 2242946 --->
	  a role_name "clientLexicalHandler" init_value "null" private
	    comment " %REVIEW% support multiple?"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2242946 // clientLexicalHandler (<unidirectional association>)
	  b parent class_ref 617602 // LexicalHandler
      end

      classrelation 2243074 // clientDTDHandler (<unidirectional association>)
	relation 2243074 --->
	  a role_name "clientDTDHandler" init_value "null" private
	    comment " %REVIEW% support multiple?"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2243074 // clientDTDHandler (<unidirectional association>)
	  b parent class_ref 617986 // DTDHandler
      end

      classrelation 2243202 // clientErrorHandler (<unidirectional association>)
	relation 2243202 --->
	  a role_name "clientErrorHandler" init_value "null" private
	    comment " %REVIEW% support multiple?"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2243202 // clientErrorHandler (<unidirectional association>)
	  b parent class_ref 618114 // ErrorHandler
      end

      attribute 1160834 "eventcounter"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1160962 "frequency"
	private explicit_type "int"
	init_value "5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1161090 "fNoMoreEvents"
	private explicit_type "boolean"
	init_value "false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Flag indicating that no more events should be delivered -- either
 because input stream ran to completion (endDocument), or because
 the user requested an early stop via deliverMoreNodes(false).
"
      end

      classrelation 2243330 // fXMLReader (<unidirectional association>)
	relation 2243330 --->
	  a role_name "fXMLReader" init_value "null" private
	    comment " Support for startParse()
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2243330 // fXMLReader (<unidirectional association>)
	  b parent class_ref 606466 // XMLReader
      end

      classrelation 2243458 // fXMLReaderInputSource (<unidirectional association>)
	relation 2243458 --->
	  a role_name "fXMLReaderInputSource" init_value "null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2243458 // fXMLReaderInputSource (<unidirectional association>)
	  b parent class_ref 606594 // InputSource
      end

      operation 5230082 "IncrementalSAXSource_Filter"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors
"
      end

      operation 5230210 "IncrementalSAXSource_Filter"
	public explicit_return_type ""
	nparams 2
	  param inout name "co" type class_ref 742402 // CoroutineManager
	  param in name "controllerCoroutineID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a IncrementalSAXSource_Filter which is not yet bound to a specific
SAX event source.
"
      end

      operation 5230338 "createIncrementalSAXSource"
	class_operation public return_type class_ref 633602 // IncrementalSAXSource
	nparams 2
	  param inout name "co" type class_ref 742402 // CoroutineManager
	  param in name "controllerCoroutineID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Factories
"
      end

      operation 5230466 "init"
	public explicit_return_type "void"
	nparams 3
	  param inout name "co" type class_ref 742402 // CoroutineManager
	  param in name "controllerCoroutineID" explicit_type "int"
	  param in name "sourceCoroutineID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Public methods
"
      end

      operation 5230594 "setXMLReader"
	public explicit_return_type "void"
	nparams 1
	  param inout name "eventsource" type class_ref 606466 // XMLReader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bind our input streams to an XMLReader.

Just a convenience routine; obviously you can explicitly register
this as a listener with the same effect.
"
      end

      operation 5230722 "setContentHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 605954 // ContentHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Register a content handler for us to output to"
      end

      operation 5230850 "setDTDHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 617986 // DTDHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Register a DTD handler for us to output to"
      end

      operation 5230978 "setLexicalHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 617602 // LexicalHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Register a lexical handler for us to output to
 Not all filters support this...
 ??? Should we register directly on the filter?
 NOTE NAME -- subclassing issue in the Xerces version"
      end

      operation 5231106 "setErrHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 618114 // ErrorHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Register an error handler for us to output to
 NOTE NAME -- subclassing issue in the Xerces version"
      end

      operation 5231234 "setReturnFrequency"
	public explicit_return_type "void"
	nparams 1
	  param in name "events" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set the number of events between resumes of our coroutine
 Immediately resets number of events before _next_ resume as well."
      end

      operation 5231362 "characters"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ContentHandler methods
 These  pass the data to our client ContentHandler...
 but they also count the number of events passing through,
 and resume our coroutine each time that counter hits zero and
 is reset.

 Note that for everything except endDocument and fatalError, we do the count-and-yield
 BEFORE passing the call along. I'm hoping that this will encourage JIT
 compilers to realize that these are tail-calls, reducing the expense of
 the additional layer of data flow.

 %REVIEW% Glenn suggests that pausing after endElement, endDocument,
 and characters may be sufficient. I actually may not want to
 stop after characters, since in our application these wind up being
 concatenated before they're processed... but that risks huge blocks of
 text causing greater than usual readahead. (Unlikely? Consider the
 possibility of a large base-64 block in a SOAP stream.)
"
      end

      operation 5231490 "endDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5231618 "endElement"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5231746 "endPrefixMapping"
	public explicit_return_type "void"
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5231874 "ignorableWhitespace"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5232002 "processingInstruction"
	public explicit_return_type "void"
	nparams 2
	  param inout name "target" type class_ref 128130 // String
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5232130 "setDocumentLocator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locator" type class_ref 606082 // Locator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5232258 "skippedEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5232386 "startDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5232514 "startElement"
	public explicit_return_type "void"
	nparams 4
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	  param inout name "atts" type class_ref 593410 // Attributes
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5232642 "startPrefixMapping"
	public explicit_return_type "void"
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5232770 "comment"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " LexicalHandler support. Not all SAX2 filters support these events
 but we may want to pass them through when they exist...

 %REVIEW% These do NOT currently affect the eventcounter; I'm asserting
 that they're rare enough that it makes little or no sense to
 pause after them. As such, it may make more sense for folks who
 actually want to use them to register directly with the filter.
 But I want 'em here for now, to remind us to recheck this assertion!
"
      end

      operation 5232898 "endCDATA"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5233026 "endDTD"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5233154 "endEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5233282 "startCDATA"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5233410 "startDTD"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5233538 "startEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5233666 "notationDecl"
	public explicit_return_type "void"
	nparams 3
	  param inout name "a" type class_ref 128130 // String
	  param inout name "b" type class_ref 128130 // String
	  param inout name "c" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " DTDHandler support."
      end

      operation 5233794 "unparsedEntityDecl"
	public explicit_return_type "void"
	nparams 4
	  param inout name "a" type class_ref 128130 // String
	  param inout name "b" type class_ref 128130 // String
	  param inout name "c" type class_ref 128130 // String
	  param inout name "d" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5233922 "error"
	public explicit_return_type "void"
	nparams 1
	  param inout name "exception" type class_ref 618242 // SAXParseException
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ErrorHandler support.

 PROBLEM: Xerces is apparently _not_ calling the ErrorHandler for
 exceptions thrown by the ContentHandler, which prevents us from
 handling this properly when running in filtering mode with Xerces
 as our event source.  It's unclear whether this is a Xerces bug
 or a SAX design flaw.

 %REVIEW% Current solution: In filtering mode, it is REQUIRED that
 event source make sure this method is invoked if the event stream
 abends before endDocument is delivered. If that means explicitly calling
 us in the exception handling code because it won't be delivered as part
 of the normal SAX ErrorHandler stream, that's fine; Not Our Problem.
"
      end

      operation 5234050 "fatalError"
	public explicit_return_type "void"
	nparams 1
	  param inout name "exception" type class_ref 618242 // SAXParseException
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5234178 "warning"
	public explicit_return_type "void"
	nparams 1
	  param inout name "exception" type class_ref 618242 // SAXParseException
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5234306 "getSourceCoroutineID"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " coroutine support
"
      end

      operation 5234434 "getControllerCoroutineID"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5234562 "getCoroutineManager"
	public return_type class_ref 742402 // CoroutineManager
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return the CoroutineManager this CoroutineFilter object is bound to.
If you're using the do...() methods, applications should only
need to talk to the CoroutineManager once, to obtain the
application's Coroutine ID.
"
      end

      operation 5234690 "count_and_yield"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "moreExpected" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <p>In the SAX delegation code, I've inlined the count-down in
the hope of encouraging compilers to deliver better
performance. However, if we subclass (eg to directly connect the
output to a DTM builder), that would require calling super in
order to run that logic... which seems inelegant.  Hence this
routine for the convenience of subclasses: every [frequency]
invocations, issue a co_yield.</p>

@param moreExepected Should always be true unless this is being called
at the end of endDocument() handling.
"
      end

      operation 5234818 "co_entry_pause"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "co_entry_pause is called in startDocument() before anything else
happens. It causes the filter to wait for a \"go ahead\" request
from the controller before delivering any events. Note that
the very first thing the controller tells us may be \"I don't
need events after all\"!
"
      end

      operation 5234946 "co_yield"
	private explicit_return_type "void"
	nparams 1
	  param inout name "moreRemains" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Co_Yield handles coroutine interactions while a parse is in progress.

When moreRemains==true, we are pausing after delivering events, to
ask if more are needed. We will resume the controller thread with
  co_resume(Boolean.TRUE, ...)
When control is passed back it may indicate
     Boolean.TRUE    indication to continue delivering events
     Boolean.FALSE   indication to discontinue events and shut down.

When moreRemains==false, we shut down immediately without asking the
controller's permission. Normally this means end of document has been
reached.

Shutting down a IncrementalSAXSource_Filter requires terminating the incoming
SAX event stream. If we are in control of that stream (if it came
from an XMLReader passed to our startReader() method), we can do so
very quickly by throwing a reserved exception to it. If the stream is
coming from another source, we can't do that because its caller may
not be prepared for this \"normal abnormal exit\", and instead we put
ourselves in a \"spin\" mode where events are discarded.
"
      end

      operation 5235074 "startParse"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 606594 // InputSource
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convenience: Run an XMLReader in a thread

 Launch a thread that will run an XMLReader's parse() operation within
 a thread, feeding events to this IncrementalSAXSource_Filter. Mostly a convenience
 routine, but has the advantage that -- since we invoked parse() --
 we can halt parsing quickly via a StopException rather than waiting
 for the SAX stream to end by itself.

@throws SAXException is parse thread is already in progress
or parsing can not be started.
"
      end

      operation 5235202 "run"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Thread logic to support startParseThread()
"
      end

      class 744834 "StopException"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 2243586 // <generalisation>
	  relation 2243586 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 2243586 // <generalisation>
	    b parent class_ref 214786 // RuntimeException
	end

	attribute 1161218 "serialVersionUID"
	  class_attribute const_attribute package explicit_type "long"
	  init_value " -1129245796185754956L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 5235330 "deliverMoreNodes"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "parsemore" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " deliverMoreNodes() is a simple API which tells the coroutine
parser that we need more nodes.  This is intended to be called
from one of our partner routines, and serves to encapsulate the
details of how incremental parsing has been achieved.

@param parsemore If true, tells the incremental filter to generate
another chunk of output. If false, tells the filter that we're
satisfied and it can terminate parsing of this document.

@return Boolean.TRUE if there may be more events available by invoking
deliverMoreNodes() again. Boolean.FALSE if parsing has run to completion (or been
terminated by deliverMoreNodes(false). Or an exception object if something
malfunctioned. %REVIEW% We _could_ actually throw the exception, but
that would require runinng deliverMoreNodes() in a try/catch... and for many
applications, exception will be simply be treated as \"not TRUE\" in
any case.
"
      end
    end

    class 744962 "IncrementalSAXSource_Xerces"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " <p>IncrementalSAXSource_Xerces takes advantage of the fact that Xerces1
incremental mode is already a coroutine of sorts, and just wraps our
IncrementalSAXSource API around it.</p>

<p>Usage example: See main().</p>

<p>Status: Passes simple main() unit-test. NEEDS JAVADOC.</p>
"
      classrelation 2243714 // <realization>
	relation 2243714 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2243714 // <realization>
	  b parent class_ref 633602 // IncrementalSAXSource
      end

      classrelation 2243842 // fParseSomeSetup (<unidirectional association>)
	relation 2243842 --->
	  a role_name "fParseSomeSetup" init_value "null" package
	    comment " Reflection. To allow this to compile with both Xerces1 and Xerces2, which
 require very different methods and objects, we need to avoid static
 references to those APIs. So until Xerces2 is pervasive and we're willing
 to make it a prerequisite, we will rely upon relection.

 Xerces1 method"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2243842 // fParseSomeSetup (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 2243970 // fParseSome (<unidirectional association>)
	relation 2243970 --->
	  a role_name "fParseSome" init_value "null" package
	    comment " Xerces1 method"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2243970 // fParseSome (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 2244098 // fPullParserConfig (<unidirectional association>)
	relation 2244098 --->
	  a role_name "fPullParserConfig" init_value "null" package
	    comment " Xerces2 pull control object"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2244098 // fPullParserConfig (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 2244226 // fConfigSetInput (<unidirectional association>)
	relation 2244226 --->
	  a role_name "fConfigSetInput" init_value "null" package
	    comment " Xerces2 method"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2244226 // fConfigSetInput (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 2244354 // fConfigParse (<unidirectional association>)
	relation 2244354 --->
	  a role_name "fConfigParse" init_value "null" package
	    comment " Xerces2 method"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2244354 // fConfigParse (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 2244482 // fSetInputSource (<unidirectional association>)
	relation 2244482 --->
	  a role_name "fSetInputSource" init_value "null" package
	    comment " Xerces2 pull control method"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2244482 // fSetInputSource (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 2244610 // fConfigInputSourceCtor (<unidirectional association>)
	relation 2244610 --->
	  a role_name "fConfigInputSourceCtor" init_value "null" package
	    comment " Xerces2 initialization method"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2244610 // fConfigInputSourceCtor (<unidirectional association>)
	  b parent class_ref 189186 // Constructor
      end

      classrelation 2244738 // fConfigSetByteStream (<unidirectional association>)
	relation 2244738 --->
	  a role_name "fConfigSetByteStream" init_value "null" package
	    comment " Xerces2 initialization method"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2244738 // fConfigSetByteStream (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 2244866 // fConfigSetCharStream (<unidirectional association>)
	relation 2244866 --->
	  a role_name "fConfigSetCharStream" init_value "null" package
	    comment " Xerces2 initialization method"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2244866 // fConfigSetCharStream (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 2244994 // fConfigSetEncoding (<unidirectional association>)
	relation 2244994 --->
	  a role_name "fConfigSetEncoding" init_value "null" package
	    comment " Xerces2 initialization method"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2244994 // fConfigSetEncoding (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 2245122 // fReset (<unidirectional association>)
	relation 2245122 --->
	  a role_name "fReset" init_value "null" package
	    comment " Both Xerces1 and Xerces2, but diff. signatures"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2245122 // fReset (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 2245250 // fIncrementalParser (<unidirectional association>)
	relation 2245250 --->
	  a role_name "fIncrementalParser" package
	    comment " Data

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2245250 // fIncrementalParser (<unidirectional association>)
	  b parent class_ref 701058 // SAXParser
      end

      attribute 1161346 "fParseInProgress"
	private explicit_type "boolean"
	init_value "false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 5235458 "IncrementalSAXSource_Xerces"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 742530 // NoSuchMethodException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors

 Create a IncrementalSAXSource_Xerces, and create a SAXParser
to go with it. Xerces2 incremental parsing is only supported if
this constructor is used, due to limitations in the Xerces2 API (as of
Beta 3). If you don't like that restriction, tell the Xerces folks that
there should be a simpler way to request incremental SAX parsing.
"
      end

      operation 5235586 "IncrementalSAXSource_Xerces"
	public explicit_return_type ""
	nparams 1
	  param inout name "parser" type class_ref 701058 // SAXParser
	nexceptions 1
	  exception class_ref 742530 // NoSuchMethodException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a IncrementalSAXSource_Xerces wrapped around
an existing SAXParser. Currently this works only for recent
releases of Xerces-1.  Xerces-2 incremental is currently possible
only if we are allowed to create the parser instance, due to
limitations in the API exposed by Xerces-2 Beta 3; see the
no-args constructor for that code.

@exception if the SAXParser class doesn't support the Xerces
incremental parse operations. In that case, caller should
fall back upon the IncrementalSAXSource_Filter approach.
"
      end

      operation 5235714 "createIncrementalSAXSource"
	class_operation public return_type class_ref 633602 // IncrementalSAXSource
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Factories
"
      end

      operation 5235842 "createIncrementalSAXSource"
	class_operation public return_type class_ref 633602 // IncrementalSAXSource
	nparams 1
	  param inout name "parser" type class_ref 701058 // SAXParser
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5235970 "setContentHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 605954 // ContentHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Public methods

 Register handler directly with the incremental parser"
      end

      operation 5236098 "setLexicalHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 617602 // LexicalHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Register handler directly with the incremental parser"
      end

      operation 5236226 "setDTDHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 617986 // DTDHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Register handler directly with the incremental parser"
      end

      operation 5236354 "startParse"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 606594 // InputSource
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 startParse() is a simple API which tells the IncrementalSAXSource
to begin reading a document.

@throws SAXException is parse thread is already in progress
or parsing can not be started.
"
      end

      operation 5236482 "deliverMoreNodes"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "parsemore" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " deliverMoreNodes() is a simple API which tells the coroutine
parser that we need more nodes.  This is intended to be called
from one of our partner routines, and serves to encapsulate the
details of how incremental parsing has been achieved.

@param parsemore If true, tells the incremental parser to generate
another chunk of output. If false, tells the parser that we're
satisfied and it can terminate parsing of this document.
@return Boolean.TRUE if the CoroutineParser believes more data may be available
for further parsing. Boolean.FALSE if parsing ran to completion.
Exception if the parser objected for some reason.
"
      end

      operation 5236610 "parseSomeSetup"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "source" type class_ref 606594 // InputSource
	nexceptions 5
	  exception class_ref 379266 // SAXException
	  exception class_ref 146818 // IOException
	  exception class_ref 321538 // IllegalAccessException
	  exception class_ref 193410 // InvocationTargetException
	  exception class_ref 193282 // InstantiationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private methods -- conveniences to hide the reflection details"
      end

      classrelation 2245378 // noparms (<unidirectional association>)
	relation 2245378 --->
	  a role_name "noparms" multiplicity "[]" init_value "new Object[0]" class_relation const_relation private
	    comment "  Would null work???
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2245378 // noparms (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 2245506 // parmsfalse (<unidirectional association>)
	relation 2245506 --->
	  a role_name "parmsfalse" multiplicity "[]" init_value "{Boolean.FALSE}" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2245506 // parmsfalse (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 5236738 "parseSome"
	private explicit_return_type "boolean"
	nparams 0
	nexceptions 4
	  exception class_ref 379266 // SAXException
	  exception class_ref 146818 // IOException
	  exception class_ref 321538 // IllegalAccessException
	  exception class_ref 193410 // InvocationTargetException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5236866 "_main"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "args" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Simple unit test. Attempt coroutine parsing of document indicated
by first argument (as a URI), report progress.
"
      end
    end

    class 745090 "NodeLocator"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>NodeLocator</code> maintains information on an XML source
node.

@author <a href=\"mailto:ovidiu@cup.hp.com\">Ovidiu Predescu</a>
@since May 23, 2001
"
      classrelation 2245634 // <realization>
	relation 2245634 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2245634 // <realization>
	  b parent class_ref 617346 // SourceLocator
      end

      classrelation 2245762 // m_publicId (<unidirectional association>)
	relation 2245762 --->
	  a role_name "m_publicId" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2245762 // m_publicId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2245890 // m_systemId (<unidirectional association>)
	relation 2245890 --->
	  a role_name "m_systemId" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2245890 // m_systemId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1161474 "m_lineNumber"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1161602 "m_columnNumber"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 5237506 "NodeLocator"
	public explicit_return_type ""
	nparams 4
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	  param in name "lineNumber" explicit_type "int"
	  param in name "columnNumber" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>NodeLocator</code> instance.

@param publicId a <code>String</code> value
@param systemId a <code>String</code> value
@param lineNumber an <code>int</code> value
@param columnNumber an <code>int</code> value
"
      end

      operation 5237634 "getPublicId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>getPublicId</code> returns the public ID of the node.

@return a <code>String</code> value
"
      end

      operation 5237762 "getSystemId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>getSystemId</code> returns the system ID of the node.

@return a <code>String</code> value
"
      end

      operation 5237890 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>getLineNumber</code> returns the line number of the node.

@return an <code>int</code> value
"
      end

      operation 5238018 "getColumnNumber"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>getColumnNumber</code> returns the column number of the
node.

@return an <code>int</code> value
"
      end

      operation 5238146 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>toString</code> returns a string representation of this
NodeLocator instance.

@return a <code>String</code> value
"
      end
    end
  end

  deploymentview 151938 "ref"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 429826 "DTMAxisIteratorBase"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
${definition}"
      associated_elems
	class_ref 616578 // DTMAxisIteratorBase
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMAxisIteratorBase.java,v 1.2.4.1 2005/09/15 08:14:59 suresh_emailid Exp $
"
    end

    artifact 435970 "DTMDefaultBase"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.*;
import com.sun.org.apache.xml.internal.utils.SuballocatedIntVector;
import com.sun.org.apache.xml.internal.utils.BoolStack;
import java.util.Vector;
import javax.xml.transform.Source;
import com.sun.org.apache.xml.internal.utils.XMLString;
import com.sun.org.apache.xml.internal.utils.XMLStringFactory;
import com.sun.org.apache.xml.internal.res.XMLMessages;
import com.sun.org.apache.xml.internal.res.XMLErrorResources;
import java.io.*;
${definition}"
      associated_elems
	class_ref 626562 // DTMDefaultBase
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMDefaultBase.java,v 1.3 2005/09/28 13:48:52 pvedula Exp $
"
    end

    artifact 436226 "DTMDefaultBaseTraversers"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.*;
import javax.xml.transform.Source;
import com.sun.org.apache.xml.internal.utils.XMLStringFactory;
import com.sun.org.apache.xml.internal.res.XMLErrorResources;
import com.sun.org.apache.xml.internal.res.XMLMessages;
import com.sun.org.apache.xalan.internal.xsltc.dom.NodeCounter;
${definition}"
      associated_elems
	class_ref 626434 // DTMDefaultBaseTraversers
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMDefaultBaseTraversers.java,v 1.2.4.1 2005/09/15 08:15:00 suresh_emailid Exp $
"
    end

    artifact 436354 "DTMDefaultBaseIterators"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.*;
import javax.xml.transform.Source;
import com.sun.org.apache.xml.internal.utils.XMLStringFactory;
import com.sun.org.apache.xml.internal.res.XMLErrorResources;
import com.sun.org.apache.xml.internal.res.XMLMessages;
import com.sun.org.apache.xalan.internal.xsltc.dom.NodeCounter;
${definition}"
      associated_elems
	class_ref 626306 // DTMDefaultBaseIterators
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMDefaultBaseIterators.java,v 1.2.4.1 2005/09/15 08:15:00 suresh_emailid Exp $
"
    end

    artifact 437634 "DTMManagerDefault"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xalan.internal.utils.FactoryImpl;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Source;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.sax.SAXSource;
import javax.xml.transform.stream.StreamSource;
import com.sun.org.apache.xml.internal.dtm.DTM;
import com.sun.org.apache.xml.internal.dtm.DTMException;
import com.sun.org.apache.xml.internal.dtm.DTMFilter;
import com.sun.org.apache.xml.internal.dtm.DTMIterator;
import com.sun.org.apache.xml.internal.dtm.DTMManager;
import com.sun.org.apache.xml.internal.dtm.DTMWSFilter;
import com.sun.org.apache.xml.internal.dtm.ref.dom2dtm.DOM2DTM;
import com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM;
import com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2RTFDTM;
import com.sun.org.apache.xml.internal.res.XMLErrorResources;
import com.sun.org.apache.xml.internal.res.XMLMessages;
import com.sun.org.apache.xml.internal.utils.PrefixResolver;
import com.sun.org.apache.xml.internal.utils.SystemIDResolver;
import com.sun.org.apache.xml.internal.utils.XMLReaderManager;
import com.sun.org.apache.xml.internal.utils.XMLStringFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
${definition}"
      associated_elems
	class_ref 619906 // DTMManagerDefault
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMManagerDefault.java,v 1.2.4.1 2005/09/15 08:15:02 suresh_emailid Exp $
"
    end

    artifact 521090 "ChunkedIntArray"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.res.XMLErrorResources;
import com.sun.org.apache.xml.internal.res.XMLMessages;
${definition}"
      associated_elems
	class_ref 742018 // ChunkedIntArray
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: ChunkedIntArray.java,v 1.2.4.1 2005/09/15 08:14:58 suresh_emailid Exp $
"
    end

    artifact 521218 "CoroutineManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.BitSet;
import com.sun.org.apache.xml.internal.res.XMLErrorResources;
import com.sun.org.apache.xml.internal.res.XMLMessages;
${definition}"
      associated_elems
	class_ref 742402 // CoroutineManager
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: CoroutineManager.java,v 1.2.4.1 2005/09/15 08:14:58 suresh_emailid Exp $
"
    end

    artifact 521346 "CoroutineParser"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.xml.sax.ContentHandler;
import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;
${definition}"
      associated_elems
	class_ref 742658 // CoroutineParser
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: CoroutineParser.java,v 1.2.4.1 2005/09/15 08:14:59 suresh_emailid Exp $
"
    end

    artifact 521474 "DTMStringPool"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import com.sun.org.apache.xml.internal.utils.IntVector;
${definition}"
      associated_elems
	class_ref 634114 // DTMStringPool
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMStringPool.java,v 1.2.4.1 2005/09/15 08:15:05 suresh_emailid Exp $
"
    end

    artifact 521602 "CustomStringPool"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.HashMap;
import java.util.Map;
${definition}"
      associated_elems
	class_ref 742786 // CustomStringPool
      end
      comment "Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.


Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: CustomStringPool.java,v 1.2.4.1 2005/09/15 08:14:59 suresh_emailid Exp $
"
    end

    artifact 521730 "DTMNodeListBase"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.w3c.dom.Node;
${definition}"
      associated_elems
	class_ref 743042 // DTMNodeListBase
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMNodeListBase.java,v 1.2.4.1 2005/09/15 08:15:04 suresh_emailid Exp $
"
    end

    artifact 521858 "DTMAxisIterNodeList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.DTM;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.utils.IntVector;
import org.w3c.dom.Node;
${definition}"
      associated_elems
	class_ref 742914 // DTMAxisIterNodeList
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMAxisIterNodeList.java,v 1.2.4.1 2005/09/15 08:14:59 suresh_emailid Exp $
"
    end

    artifact 521986 "DTMChildIterNodeList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.DTM;
import org.w3c.dom.Node;
${definition}"
      associated_elems
	class_ref 743170 // DTMChildIterNodeList
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMChildIterNodeList.java,v 1.2.4.1 2005/09/15 08:15:00 suresh_emailid Exp $
"
    end

    artifact 522114 "DTMDocumentImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.SourceLocator;
import com.sun.org.apache.xml.internal.dtm.DTM;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.dtm.DTMAxisTraverser;
import com.sun.org.apache.xml.internal.dtm.DTMManager;
import com.sun.org.apache.xml.internal.dtm.DTMWSFilter;
import com.sun.org.apache.xml.internal.utils.FastStringBuffer;
import com.sun.org.apache.xml.internal.utils.XMLString;
import com.sun.org.apache.xml.internal.utils.XMLStringFactory;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.Locator;
import org.xml.sax.ext.LexicalHandler;
${definition}"
      associated_elems
	class_ref 743298 // DTMDocumentImpl
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMDocumentImpl.java,v 1.2.4.1 2005/09/15 08:15:01 suresh_emailid Exp $
"
    end

    artifact 522242 "DTMNamedNodeMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.DTM;
import org.w3c.dom.DOMException;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
${definition}"
      associated_elems
	class_ref 743426 // DTMNamedNodeMap
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMNamedNodeMap.java,v 1.2.4.1 2005/09/15 08:15:03 suresh_emailid Exp $
"
    end

    artifact 522370 "DTMNodeIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.DTM;
import com.sun.org.apache.xml.internal.dtm.DTMDOMException;
import com.sun.org.apache.xml.internal.dtm.DTMIterator;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.traversal.NodeFilter;
${definition}"
      associated_elems
	class_ref 743682 // DTMNodeIterator
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMNodeIterator.java,v 1.2.4.1 2005/09/15 08:15:03 suresh_emailid Exp $
"
    end

    artifact 522498 "DTMNodeList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.DTM;
import com.sun.org.apache.xml.internal.dtm.DTMIterator;
import org.w3c.dom.Node;
${definition}"
      associated_elems
	class_ref 743810 // DTMNodeList
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMNodeList.java,v 1.2.4.1 2005/09/15 08:15:04 suresh_emailid Exp $
"
    end

    artifact 522626 "DTMNodeProxy"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import com.sun.org.apache.xml.internal.dtm.DTM;
import com.sun.org.apache.xml.internal.dtm.DTMDOMException;
import com.sun.org.apache.xpath.internal.NodeSet;
import java.util.Objects;
import org.w3c.dom.Attr;
import org.w3c.dom.CDATASection;
import org.w3c.dom.Comment;
import org.w3c.dom.DOMException;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.EntityReference;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.ProcessingInstruction;
import org.w3c.dom.Text;
import org.w3c.dom.UserDataHandler;
import org.w3c.dom.DOMConfiguration;
import org.w3c.dom.TypeInfo;
${definition}"
      associated_elems
	class_ref 743938 // DTMNodeProxy
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMNodeProxy.java,v
"
    end

    artifact 522754 "DTMSafeStringPool"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 744194 // DTMSafeStringPool
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMSafeStringPool.java,v 1.2.4.1 2005/09/15 08:15:04 suresh_emailid Exp $
"
    end

    artifact 522882 "DTMTreeWalker"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.DTM;
import com.sun.org.apache.xml.internal.utils.NodeConsumer;
import com.sun.org.apache.xml.internal.utils.XMLString;
import org.xml.sax.ContentHandler;
import org.xml.sax.ext.LexicalHandler;
${definition}"
      associated_elems
	class_ref 633986 // DTMTreeWalker
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMTreeWalker.java,v 1.2.4.1 2005/09/15 08:15:05 suresh_emailid Exp $
"
    end

    artifact 523010 "EmptyIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.dtm.DTM;
${definition}"
      associated_elems
	class_ref 744322 // EmptyIterator
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: EmptyIterator.java,v 1.2.4.1 2005/09/15 08:15:05 suresh_emailid Exp $
"
    end

    artifact 523138 "ExpandedNameTable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.DTM;
${definition}"
      associated_elems
	class_ref 627074 // ExpandedNameTable
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: ExpandedNameTable.java,v 1.2.4.1 2005/09/15 08:15:06 suresh_emailid Exp $
"
    end

    artifact 523266 "ExtendedType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 744450 // ExtendedType
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: ExtendedType.java,v 1.2.4.1 2005/09/15 08:15:06 suresh_emailid Exp $
"
    end

    artifact 523394 "IncrementalSAXSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.xml.sax.ContentHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
${definition}"
      associated_elems
	class_ref 633602 // IncrementalSAXSource
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: IncrementalSAXSource.java,v 1.2.4.1 2005/09/15 08:15:06 suresh_emailid Exp $
"
    end

    artifact 523522 "IncrementalSAXSource_Filter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import com.sun.org.apache.xml.internal.res.XMLErrorResources;
import com.sun.org.apache.xml.internal.res.XMLMessages;
import com.sun.org.apache.xml.internal.utils.ThreadControllerWrapper;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.DTDHandler;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.LexicalHandler;
${definition}"
      associated_elems
	class_ref 744706 // IncrementalSAXSource_Filter
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: IncrementalSAXSource_Filter.java,v 1.2.4.1 2005/09/15 08:15:07 suresh_emailid Exp $
"
    end

    artifact 523650 "IncrementalSAXSource_Xerces"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import com.sun.org.apache.xerces.internal.parsers.SAXParser;
import com.sun.org.apache.xml.internal.res.XMLErrorResources;
import com.sun.org.apache.xml.internal.res.XMLMessages;
import com.sun.org.apache.xalan.internal.utils.ObjectFactory;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
${definition}"
      associated_elems
	class_ref 744962 // IncrementalSAXSource_Xerces
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: IncrementalSAXSource_Xerces.java,v 1.2.4.1 2005/09/15 08:15:08 suresh_emailid Exp $
"
    end

    artifact 523906 "NodeLocator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.SourceLocator;
${definition}"
      associated_elems
	class_ref 745090 // NodeLocator
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: NodeLocator.java,v 1.2.4.1 2005/09/15 08:15:08 suresh_emailid Exp $
"
    end
  end

  package_ref 165762 // sax2dtm

  package_ref 172162 // dom2dtm
end
