class Line2D
!!!6558594.java!!!	setLine(inout p1 : Point2D, inout p2 : Point2D) : void
        setLine(p1.getX(), p1.getY(), p2.getX(), p2.getY());
!!!6558722.java!!!	setLine(inout l : Line2D) : void
        setLine(l.getX1(), l.getY1(), l.getX2(), l.getY2());
!!!6558850.java!!!	relativeCCW(in x1 : double, in y1 : double, in x2 : double, in y2 : double, in px : double, in py : double) : int
        x2 -= x1;
        y2 -= y1;
        px -= x1;
        py -= y1;
        double ccw = px * y2 - py * x2;
        if (ccw == 0.0) {
            // The point is colinear, classify based on which side of
            // the segment the point falls on.  We can calculate a
            // relative value using the projection of px,py onto the
            // segment - a negative value indicates the point projects
            // outside of the segment in the direction of the particular
            // endpoint used as the origin for the projection.
            ccw = px * x2 + py * y2;
            if (ccw > 0.0) {
                // Reverse the projection to be relative to the original x2,y2
                // x2 and y2 are simply negated.
                // px and py need to have (x2 - x1) or (y2 - y1) subtracted
                //    from them (based on the original values)
                // Since we really want to get a positive answer when the
                //    point is "beyond (x2,y2)", then we want to calculate
                //    the inverse anyway - thus we leave x2 & y2 negated.
                px -= x2;
                py -= y2;
                ccw = px * x2 + py * y2;
                if (ccw < 0.0) {
                    ccw = 0.0;
                }
            }
        }
        return (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);
!!!6558978.java!!!	relativeCCW(in px : double, in py : double) : int
        return relativeCCW(getX1(), getY1(), getX2(), getY2(), px, py);
!!!6559106.java!!!	relativeCCW(inout p : Point2D) : int
        return relativeCCW(getX1(), getY1(), getX2(), getY2(),
                           p.getX(), p.getY());
!!!6559234.java!!!	linesIntersect(in x1 : double, in y1 : double, in x2 : double, in y2 : double, in x3 : double, in y3 : double, in x4 : double, in y4 : double) : boolean
        return ((relativeCCW(x1, y1, x2, y2, x3, y3) *
                 relativeCCW(x1, y1, x2, y2, x4, y4) <= 0)
                && (relativeCCW(x3, y3, x4, y4, x1, y1) *
                    relativeCCW(x3, y3, x4, y4, x2, y2) <= 0));
!!!6559362.java!!!	intersectsLine(in x1 : double, in y1 : double, in x2 : double, in y2 : double) : boolean
        return linesIntersect(x1, y1, x2, y2,
                              getX1(), getY1(), getX2(), getY2());
!!!6559490.java!!!	intersectsLine(inout l : Line2D) : boolean
        return linesIntersect(l.getX1(), l.getY1(), l.getX2(), l.getY2(),
                              getX1(), getY1(), getX2(), getY2());
!!!6559618.java!!!	ptSegDistSq(in x1 : double, in y1 : double, in x2 : double, in y2 : double, in px : double, in py : double) : double
        // Adjust vectors relative to x1,y1
        // x2,y2 becomes relative vector from x1,y1 to end of segment
        x2 -= x1;
        y2 -= y1;
        // px,py becomes relative vector from x1,y1 to test point
        px -= x1;
        py -= y1;
        double dotprod = px * x2 + py * y2;
        double projlenSq;
        if (dotprod <= 0.0) {
            // px,py is on the side of x1,y1 away from x2,y2
            // distance to segment is length of px,py vector
            // "length of its (clipped) projection" is now 0.0
            projlenSq = 0.0;
        } else {
            // switch to backwards vectors relative to x2,y2
            // x2,y2 are already the negative of x1,y1=>x2,y2
            // to get px,py to be the negative of px,py=>x2,y2
            // the dot product of two negated vectors is the same
            // as the dot product of the two normal vectors
            px = x2 - px;
            py = y2 - py;
            dotprod = px * x2 + py * y2;
            if (dotprod <= 0.0) {
                // px,py is on the side of x2,y2 away from x1,y1
                // distance to segment is length of (backwards) px,py vector
                // "length of its (clipped) projection" is now 0.0
                projlenSq = 0.0;
            } else {
                // px,py is between x1,y1 and x2,y2
                // dotprod is the length of the px,py vector
                // projected on the x2,y2=>x1,y1 vector times the
                // length of the x2,y2=>x1,y1 vector
                projlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);
            }
        }
        // Distance to line is now the length of the relative point
        // vector minus the length of its projection onto the line
        // (which is zero if the projection falls outside the range
        //  of the line segment).
        double lenSq = px * px + py * py - projlenSq;
        if (lenSq < 0) {
            lenSq = 0;
        }
        return lenSq;
!!!6559746.java!!!	ptSegDist(in x1 : double, in y1 : double, in x2 : double, in y2 : double, in px : double, in py : double) : double
        return Math.sqrt(ptSegDistSq(x1, y1, x2, y2, px, py));
!!!6559874.java!!!	ptSegDistSq(in px : double, in py : double) : double
        return ptSegDistSq(getX1(), getY1(), getX2(), getY2(), px, py);
!!!6560002.java!!!	ptSegDistSq(inout pt : Point2D) : double
        return ptSegDistSq(getX1(), getY1(), getX2(), getY2(),
                           pt.getX(), pt.getY());
!!!6560130.java!!!	ptSegDist(in px : double, in py : double) : double
        return ptSegDist(getX1(), getY1(), getX2(), getY2(), px, py);
!!!6560258.java!!!	ptSegDist(inout pt : Point2D) : double
        return ptSegDist(getX1(), getY1(), getX2(), getY2(),
                         pt.getX(), pt.getY());
!!!6560386.java!!!	ptLineDistSq(in x1 : double, in y1 : double, in x2 : double, in y2 : double, in px : double, in py : double) : double
        // Adjust vectors relative to x1,y1
        // x2,y2 becomes relative vector from x1,y1 to end of segment
        x2 -= x1;
        y2 -= y1;
        // px,py becomes relative vector from x1,y1 to test point
        px -= x1;
        py -= y1;
        double dotprod = px * x2 + py * y2;
        // dotprod is the length of the px,py vector
        // projected on the x1,y1=>x2,y2 vector times the
        // length of the x1,y1=>x2,y2 vector
        double projlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);
        // Distance to line is now the length of the relative point
        // vector minus the length of its projection onto the line
        double lenSq = px * px + py * py - projlenSq;
        if (lenSq < 0) {
            lenSq = 0;
        }
        return lenSq;
!!!6560514.java!!!	ptLineDist(in x1 : double, in y1 : double, in x2 : double, in y2 : double, in px : double, in py : double) : double
        return Math.sqrt(ptLineDistSq(x1, y1, x2, y2, px, py));
!!!6560642.java!!!	ptLineDistSq(in px : double, in py : double) : double
        return ptLineDistSq(getX1(), getY1(), getX2(), getY2(), px, py);
!!!6560770.java!!!	ptLineDistSq(inout pt : Point2D) : double
        return ptLineDistSq(getX1(), getY1(), getX2(), getY2(),
                            pt.getX(), pt.getY());
!!!6560898.java!!!	ptLineDist(in px : double, in py : double) : double
        return ptLineDist(getX1(), getY1(), getX2(), getY2(), px, py);
!!!6561026.java!!!	ptLineDist(inout pt : Point2D) : double
        return ptLineDist(getX1(), getY1(), getX2(), getY2(),
                         pt.getX(), pt.getY());
!!!6561154.java!!!	contains(in x : double, in y : double) : boolean
        return false;
!!!6561282.java!!!	contains(inout p : Point2D) : boolean
        return false;
!!!6561410.java!!!	intersects(in x : double, in y : double, in w : double, in h : double) : boolean
        return intersects(new Rectangle2D.Double(x, y, w, h));
!!!6561538.java!!!	intersects(inout r : Rectangle2D) : boolean
        return r.intersectsLine(getX1(), getY1(), getX2(), getY2());
!!!6561666.java!!!	contains(in x : double, in y : double, in w : double, in h : double) : boolean
        return false;
!!!6561794.java!!!	contains(inout r : Rectangle2D) : boolean
        return false;
!!!6561922.java!!!	getBounds() : Rectangle
        return getBounds2D().getBounds();
!!!6562050.java!!!	getPathIterator(inout at : AffineTransform) : PathIterator
        return new LineIterator(this, at);
!!!6562178.java!!!	getPathIterator(inout at : AffineTransform, in flatness : double) : PathIterator
        return new LineIterator(this, at);
!!!6562306.java!!!	clone() : Object
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {
            // this shouldn't happen, since we are Cloneable
            throw new InternalError(e);
        }
