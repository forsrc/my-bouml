format 222
"sax2dtm" // jdk1.8::com::sun::org::apache::xml::internal::dtm::ref::sax2dtm
  revision 1
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/"
  java_package "com.sun.org.apache.xml.internal.dtm.ref.sax2dtm"
  classview 159362 "sax2dtm"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 626050 "SAX2DTM2"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "SAX2DTM2 is an optimized version of SAX2DTM which is used in non-incremental situation.
It is used as the super class of the XSLTC SAXImpl. Many of the interfaces in SAX2DTM
and DTMDefaultBase are overridden in SAX2DTM2 in order to allow fast, efficient
access to the DTM model. Some nested iterators in DTMDefaultBaseIterators
are also overridden in SAX2DTM2 for performance reasons.
<p>
Performance is the biggest consideration in the design of SAX2DTM2. To make the code most
efficient, the incremental support is dropped in SAX2DTM2, which means that you should not
use it in incremental situation. To reduce the overhead of pulling data from the DTM model,
a few core interfaces in SAX2DTM2 have direct access to the internal arrays of the
SuballocatedIntVectors.
<p>
The design of SAX2DTM2 may limit its extensibilty. If you have a reason to extend the
SAX2DTM model, please extend from SAX2DTM instead of this class.
<p>
TODO: This class is currently only used by XSLTC. We need to investigate the possibility
of also using it in Xalan-J Interpretive. Xalan's performance is likely to get an instant
boost if we use SAX2DTM2 instead of SAX2DTM in non-incremental case.
<p>
%MK% The code in this class is critical to the XSLTC_DTM performance. Be very careful
when making changes here!
"
      classrelation 1728002 // <generalisation>
	relation 1728002 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1728002 // <generalisation>
	  b parent class_ref 626178 // SAX2DTM
      end
    end

    class 626178 "SAX2DTM"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class implements a DTM that tends to be optimized more for speed than
for compactness, that is constructed via SAX2 ContentHandler events.
"
      classrelation 1724930 // <generalisation>
	relation 1724930 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1724930 // <generalisation>
	  b parent class_ref 626306 // DTMDefaultBaseIterators
      end

      classrelation 1725058 // <realization>
	relation 1725058 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1725058 // <realization>
	  b parent class_ref 619138 // EntityResolver
      end

      classrelation 1725186 // <realization>
	relation 1725186 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1725186 // <realization>
	  b parent class_ref 617986 // DTDHandler
      end

      classrelation 1725314 // <realization>
	relation 1725314 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1725314 // <realization>
	  b parent class_ref 605954 // ContentHandler
      end

      classrelation 1725442 // <realization>
	relation 1725442 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1725442 // <realization>
	  b parent class_ref 618114 // ErrorHandler
      end

      classrelation 1725570 // <realization>
	relation 1725570 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1725570 // <realization>
	  b parent class_ref 617858 // DeclHandler
      end

      classrelation 1725698 // <realization>
	relation 1725698 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1725698 // <realization>
	  b parent class_ref 617602 // LexicalHandler
      end

      attribute 868098 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set true to monitor SAX events and similar diagnostic info. 
"
      end

      classrelation 1725826 // m_incrementalSAXSource (<unidirectional association>)
	relation 1725826 --->
	  a role_name "m_incrementalSAXSource" init_value " null" private
	    comment "
If we're building the model incrementally on demand, we need to
be able to tell the source when to send us more data.

Note that if this has not been set, and you attempt to read ahead
of the current build point, we'll probably throw a null-pointer
exception. We could try to wait-and-retry instead, as a very poor
fallback, but that has all the known problems with multithreading
on multiprocessors and we Don't Want to Go There.

@see setIncrementalSAXSource

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1725826 // m_incrementalSAXSource (<unidirectional association>)
	  b parent class_ref 633602 // IncrementalSAXSource
      end

      classrelation 1725954 // m_chars (<unidirectional association>)
	relation 1725954 --->
	  a role_name "m_chars" protected
	    comment "
All the character content, including attribute values, are stored in
this buffer.

%REVIEW% Should this have an option of being shared across DTMs?
Sequentially only; not threadsafe... Currently, I think not.

%REVIEW% Initial size was pushed way down to reduce weight of RTFs.
pending reduction in number of RTF DTMs. Now that we're sharing a DTM
between RTFs, and tail-pruning... consider going back to the larger/faster.

Made protected rather than private so SAX2RTFDTM can access it.

private FastStringBuffer m_chars = new FastStringBuffer(13, 13);
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1725954 // m_chars (<unidirectional association>)
	  b parent class_ref 633730 // FastStringBuffer
      end

      classrelation 1726082 // m_data (<unidirectional association>)
	relation 1726082 --->
	  a role_name "m_data" protected
	    comment " This vector holds offset and length data.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1726082 // m_data (<unidirectional association>)
	  b parent class_ref 626690 // SuballocatedIntVector
      end

      classrelation 1726210 // m_parents (<unidirectional association>)
	relation 1726210 --->
	  a role_name "m_parents" protected
	    comment " The parent stack, needed only for construction.
Made protected rather than private so SAX2RTFDTM can access it.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1726210 // m_parents (<unidirectional association>)
	  b parent class_ref 633858 // IntStack
      end

      attribute 868226 "m_previous"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The current previous node, needed only for construction time.
Made protected rather than private so SAX2RTFDTM can access it.

"
      end

      classrelation 1726338 // m_prefixMappings (<unidirectional association>)
	relation 1726338 --->
	  a role_name "m_prefixMappings" init_value "
    new java.util.Vector()" protected
	    comment " Namespace support, only relevent at construction time.
Made protected rather than private so SAX2RTFDTM can access it.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1726338 // m_prefixMappings (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      classrelation 1726466 // m_contextIndexes (<unidirectional association>)
	relation 1726466 --->
	  a role_name "m_contextIndexes" protected
	    comment " Namespace support, only relevent at construction time.
Made protected rather than private so SAX2RTFDTM can access it.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1726466 // m_contextIndexes (<unidirectional association>)
	  b parent class_ref 633858 // IntStack
      end

      attribute 868354 "m_textType"
	protected explicit_type "int"
	init_value " DTM.TEXT_NODE"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Type of next characters() event within text block in prgress. 
"
      end

      attribute 868482 "m_coalescedTextType"
	protected explicit_type "int"
	init_value " DTM.TEXT_NODE"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Type of coalesced text block. See logic in the characters()
method.

"
      end

      classrelation 1726594 // m_locator (<unidirectional association>)
	relation 1726594 --->
	  a role_name "m_locator" init_value " null" protected
	    comment " The SAX Document locator 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1726594 // m_locator (<unidirectional association>)
	  b parent class_ref 606082 // Locator
      end

      classrelation 1726722 // m_systemId (<unidirectional association>)
	relation 1726722 --->
	  a role_name "m_systemId" init_value " null" private
	    comment " The SAX Document system-id 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1726722 // m_systemId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 868610 "m_insideDTD"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " We are inside the DTD.  This is used for ignoring comments.  
"
      end

      classrelation 1726850 // m_walker (<unidirectional association>)
	relation 1726850 --->
	  a role_name "m_walker" init_value " new DTMTreeWalker()" protected
	    comment " Tree Walker for dispatchToEvents. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1726850 // m_walker (<unidirectional association>)
	  b parent class_ref 633986 // DTMTreeWalker
      end

      classrelation 1726978 // m_valuesOrPrefixes (<unidirectional association>)
	relation 1726978 --->
	  a role_name "m_valuesOrPrefixes" protected
	    comment " pool of string values that come as strings. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1726978 // m_valuesOrPrefixes (<unidirectional association>)
	  b parent class_ref 634114 // DTMStringPool
      end

      attribute 868738 "m_endDocumentOccured"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " End document has been reached.
Made protected rather than private so SAX2RTFDTM can access it.

"
      end

      classrelation 1727106 // m_dataOrQName (<unidirectional association>)
	relation 1727106 --->
	  a role_name "m_dataOrQName" protected
	    comment " Data or qualified name values, one array element for each node. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1727106 // m_dataOrQName (<unidirectional association>)
	  b parent class_ref 626690 // SuballocatedIntVector
      end

      classrelation 1727234 // m_idAttributes (<unidirectional association>)
	relation 1727234 --->
	  a role_name "m_idAttributes" init_value " new HashMap<>()" protected
	    comment "
This table holds the ID string to node associations, for
XML IDs.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Integer> ${name}${value};
"
	    classrelation_ref 1727234 // m_idAttributes (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 1727362 // m_fixednames (<unidirectional association>)
	relation 1727362 --->
	  a role_name "m_fixednames" multiplicity "[]" init_value " { null,
                    null,  // nothing, Element
                    null, \"#text\",  // Attr, Text
                    \"#cdata_section\", null,  // CDATA, EntityReference
                    null, null,  // Entity, PI
                    \"#comment\", \"#document\",  // Comment, Document
                    null, \"#document-fragment\",  // Doctype, DocumentFragment
                    null }" class_relation const_relation private
	    comment "
fixed dom-style names.

 Notation"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1727362 // m_fixednames (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1727490 // m_entities (<unidirectional association>)
	relation 1727490 --->
	  a role_name "m_entities" init_value " null" private
	    comment "
Vector of entities.  Each record is composed of four Strings:
 publicId, systemID, notationName, and name.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1727490 // m_entities (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      attribute 868866 "ENTITY_FIELD_PUBLICID"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " m_entities public ID offset. 
"
      end

      attribute 868994 "ENTITY_FIELD_SYSTEMID"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " m_entities system ID offset. 
"
      end

      attribute 869122 "ENTITY_FIELD_NOTATIONNAME"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " m_entities notation name offset. 
"
      end

      attribute 869250 "ENTITY_FIELD_NAME"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " m_entities name offset. 
"
      end

      attribute 869378 "ENTITY_FIELDS_PER"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of entries per record for m_entities. 
"
      end

      attribute 869506 "m_textPendingStart"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The starting offset within m_chars for the text or
CDATA_SECTION node currently being acumulated,
or -1 if there is no text node in progress

"
      end

      attribute 869634 "m_useSourceLocationProperty"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Describes whether information about document source location
should be maintained or not.

Made protected for access by SAX2RTFDTM.

"
      end

      classrelation 1727618 // m_sourceSystemId (<unidirectional association>)
	relation 1727618 --->
	  a role_name "m_sourceSystemId" protected
	    comment " Made protected for access by SAX2RTFDTM.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1727618 // m_sourceSystemId (<unidirectional association>)
	  b parent class_ref 634242 // StringVector
      end

      classrelation 1727746 // m_sourceLine (<unidirectional association>)
	relation 1727746 --->
	  a role_name "m_sourceLine" protected
	    comment " Made protected for access by SAX2RTFDTM.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1727746 // m_sourceLine (<unidirectional association>)
	  b parent class_ref 634370 // IntVector
      end

      classrelation 1727874 // m_sourceColumn (<unidirectional association>)
	relation 1727874 --->
	  a role_name "m_sourceColumn" protected
	    comment " Made protected for access by SAX2RTFDTM.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1727874 // m_sourceColumn (<unidirectional association>)
	  b parent class_ref 634370 // IntVector
      end

      operation 4038018 "SAX2DTM"
	public explicit_return_type ""
	nparams 6
	  param inout name "mgr" type class_ref 619266 // DTMManager
	  param inout name "source" type class_ref 627202 // Source
	  param in name "dtmIdentity" explicit_type "int"
	  param inout name "whiteSpaceFilter" type class_ref 620162 // DTMWSFilter
	  param inout name "xstringfactory" type class_ref 626946 // XMLStringFactory
	  param inout name "doIndexing" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a SAX2DTM object using the default block size.

@param mgr The DTMManager who owns this DTM.
@param source the JAXP 1.1 Source object for this DTM.
@param dtmIdentity The DTM identity ID for this DTM.
@param whiteSpaceFilter The white space filter for this DTM, which may
                        be null.
@param xstringfactory XMLString factory for creating character content.
@param doIndexing true if the caller considers it worth it to use
                  indexing schemes.
"
      end

      operation 4038146 "SAX2DTM"
	public explicit_return_type ""
	nparams 9
	  param inout name "mgr" type class_ref 619266 // DTMManager
	  param inout name "source" type class_ref 627202 // Source
	  param in name "dtmIdentity" explicit_type "int"
	  param inout name "whiteSpaceFilter" type class_ref 620162 // DTMWSFilter
	  param inout name "xstringfactory" type class_ref 626946 // XMLStringFactory
	  param inout name "doIndexing" explicit_type "boolean"
	  param in name "blocksize" explicit_type "int"
	  param inout name "usePrevsib" explicit_type "boolean"
	  param inout name "newNameTable" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a SAX2DTM object ready to be constructed from SAX2
ContentHandler events.

@param mgr The DTMManager who owns this DTM.
@param source the JAXP 1.1 Source object for this DTM.
@param dtmIdentity The DTM identity ID for this DTM.
@param whiteSpaceFilter The white space filter for this DTM, which may
                        be null.
@param xstringfactory XMLString factory for creating character content.
@param doIndexing true if the caller considers it worth it to use
                  indexing schemes.
@param blocksize The block size of the DTM.
@param usePrevsib true if we want to build the previous sibling node array.
@param newNameTable true if we want to use a new ExpandedNameTable for this DTM.
"
      end

      operation 4038274 "setUseSourceLocation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "useSourceLocation" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set whether information about document source location
should be maintained or not.
"
      end

      operation 4038402 "_dataOrQName"
	protected explicit_return_type "int"
	nparams 1
	  param in name "identity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the data or qualified name for the given node identity.

@param identity The node identity.

@return The data or qualified name, or DTM.NULL.
"
      end

      operation 4038530 "clearCoRoutine"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ask the CoRoutine parser to doTerminate and clear the reference.
"
      end

      operation 4038658 "clearCoRoutine"
	public explicit_return_type "void"
	nparams 1
	  param inout name "callDoTerminate" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ask the CoRoutine parser to doTerminate and clear the reference. If
the CoRoutine parser has already been cleared, this will have no effect.

@param callDoTerminate true of doTerminate should be called on the
coRoutine parser.
"
      end

      operation 4038786 "setIncrementalSAXSource"
	public explicit_return_type "void"
	nparams 1
	  param inout name "incrementalSAXSource" type class_ref 633602 // IncrementalSAXSource
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Bind a IncrementalSAXSource to this DTM. If we discover we need nodes
that have not yet been built, we will ask this object to send us more
events, and it will manage interactions with its data sources.

Note that we do not actually build the IncrementalSAXSource, since we don't
know what source it's reading from, what thread that source will run in,
or when it will run.

@param incrementalSAXSource The parser that we want to recieve events from
on demand.
"
      end

      operation 4038914 "getContentHandler"
	public return_type class_ref 605954 // ContentHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "getContentHandler returns \"our SAX builder\" -- the thing that
someone else should send SAX events to in order to extend this
DTM model.

%REVIEW% Should this return null if constrution already done/begun?

@return null if this model doesn't respond to SAX events,
\"this\" if the DTM object has a built-in SAX ContentHandler,
the IncrementalSAXSource if we're bound to one and should receive
the SAX stream via it for incremental build purposes...

Note that IncrementalSAXSource_Filter is package private, hence
it can be statically referenced using instanceof (CR 6537912).
"
      end

      operation 4039042 "getLexicalHandler"
	public return_type class_ref 617602 // LexicalHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's lexical handler.

%REVIEW% Should this return null if constrution already done/begun?

@return null if this model doesn't respond to lexical SAX events,
\"this\" if the DTM object has a built-in SAX ContentHandler,
the IncrementalSAXSource if we're bound to one and should receive
the SAX stream via it for incremental build purposes...

Note that IncrementalSAXSource_Filter is package private, hence
it can be statically referenced using instanceof (CR 6537912).
"
      end

      operation 4039170 "getEntityResolver"
	public return_type class_ref 619138 // EntityResolver
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's EntityResolver.

@return null if this model doesn't respond to SAX entity ref events.
"
      end

      operation 4039298 "getDTDHandler"
	public return_type class_ref 617986 // DTDHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's DTDHandler.

@return null if this model doesn't respond to SAX dtd events.
"
      end

      operation 4039426 "getErrorHandler"
	public return_type class_ref 618114 // ErrorHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's ErrorHandler.

@return null if this model doesn't respond to SAX error events.
"
      end

      operation 4039554 "getDeclHandler"
	public return_type class_ref 617858 // DeclHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's DeclHandler.

@return null if this model doesn't respond to SAX Decl events.
"
      end

      operation 4039682 "needsTwoThreads"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true iff we're building this model incrementally (eg
we're partnered with a IncrementalSAXSource) and thus require that the
transformation and the parse run simultaneously. Guidance to the
DTMManager.
"
      end

      operation 4039810 "dispatchCharactersEvents"
	public explicit_return_type "void"
	nparams 3
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "ch" type class_ref 605954 // ContentHandler
	  param inout name "normalize" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Directly call the
characters method on the passed ContentHandler for the
string-value of the given node (see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value). Multiple calls to the
ContentHandler's characters methods may well occur for a single call to
this method.

@param nodeHandle The node ID.
@param ch A non-null reference to a ContentHandler.
@param normalize true if the content should be normalized according to
the rules for the XPath
<a href=\"http://www.w3.org/TR/xpath#function-normalize-space\">normalize-space</a>
function.

@throws SAXException
"
      end

      operation 4039938 "getNodeName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style node name. This will
include names such as #text or #document.

@param nodeHandle the id of the node.
@return String Name of this node, which may be an empty string.
%REVIEW% Document when empty string is possible...
%REVIEW-COMMENT% It should never be empty, should it?
"
      end

      operation 4040066 "getNodeNameX"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return the XPath node name.  This should be
the name as described by the XPath data model, NOT the DOM-style
name.

@param nodeHandle the id of the node.
@return String Name of this node, which may be an empty string.
"
      end

      operation 4040194 "isAttributeSpecified"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "attributeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    5. [specified] A flag indicating whether this attribute was actually
       specified in the start-tag of its element, or was defaulted from the
       DTD.

@param attributeHandle Must be a valid handle to an attribute node.
@return <code>true</code> if the attribute was specified;
        <code>false</code> if it was defaulted.
"
      end

      operation 4040322 "getDocumentTypeDeclarationSystemIdentifier"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  A document type declaration information item has the following properties:

    1. [system identifier] The system identifier of the external subset, if
       it exists. Otherwise this property has no value.

@return the system identifier String object, or null if there is none.
"
      end

      operation 4040450 "getNextNodeIdentity"
	protected explicit_return_type "int"
	nparams 1
	  param in name "identity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next node identity value in the list, and call the iterator
if it hasn't been added yet.

@param identity The node identity (index).
@return identity+1, or DTM.NULL.
"
      end

      operation 4040578 "dispatchToEvents"
	public explicit_return_type "void"
	nparams 2
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "ch" type class_ref 605954 // ContentHandler
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Directly create SAX parser events from a subtree.

@param nodeHandle The node ID.
@param ch A non-null reference to a ContentHandler.

@throws org.xml.sax.SAXException
"
      end

      operation 4040706 "getNumberOfNodes"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the number of nodes that have been added.

@return The number of that are currently in the tree.
"
      end

      operation 4040834 "nextNode"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method should try and build one or more nodes in the table.

@return The true if a next node is found or false if
        there are no more nodes.
"
      end

      operation 4040962 "isTextType"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Bottleneck determination of text type.

@param type oneof DTM.XXX_NODE.

@return true if this is a text or cdata section.
"
      end

      operation 4041090 "addNode"
	protected explicit_return_type "int"
	nparams 6
	  param in name "type" explicit_type "int"
	  param in name "expandedTypeID" explicit_type "int"
	  param in name "parentIndex" explicit_type "int"
	  param in name "previousSibling" explicit_type "int"
	  param in name "dataOrPrefix" explicit_type "int"
	  param inout name "canHaveFirstChild" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    /**
     * Ensure that the size of the information arrays can hold another entry
     * at the given index.
     *
     * @param on exit from this function, the information arrays sizes must be
     * at least index+1.
     *
     * NEEDSDOC @param index
     */
    protected void ensureSize(int index)
    {
          // dataOrQName is an SuballocatedIntVector and hence self-sizing.
          // But DTMDefaultBase may need fixup.
        super.ensureSize(index);
    }

Construct the node map from the node.

@param type raw type ID, one of DTM.XXX_NODE.
@param expandedTypeID The expended type ID.
@param parentIndex The current parent index.
@param previousSibling The previous sibling index.
@param dataOrPrefix index into m_data table, or string handle.
@param canHaveFirstChild true if the node can have a first child, false
                         if it is atomic.

@return The index identity of the node that was added.
"
      end

      operation 4041218 "addNewDTMID"
	protected explicit_return_type "void"
	nparams 1
	  param in name "nodeIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a new DTM ID beginning at the specified node index.
@param  nodeIndex The node identity at which the new DTM ID will begin
addressing.
"
      end

      operation 4041346 "migrateTo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "manager" type class_ref 619266 // DTMManager
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Migrate a DTM built with an old DTMManager to a new DTMManager.
After the migration, the new DTMManager will treat the DTM as
one that is built by itself.
This is used to support DTM sharing between multiple transformations.
@param manager the DTMManager
"
      end

      operation 4041474 "setSourceLocation"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Store the source location of the current node.  This method must be called
as every node is added to the DTM or for no node.
"
      end

      operation 4041602 "getNodeValue"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its node value. This is mostly
as defined by the DOM, but may ignore some conveniences.
<p>

@param nodeHandle The node id.
@return String Value of this node, or null if not
meaningful for this node type.
"
      end

      operation 4041730 "getLocalName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its XPath-style localname.
(As defined in Namespaces, this is the portion of the name after any
colon character).

@param nodeHandle the id of the node.
@return String Local name of this node.
"
      end

      operation 4041858 "getUnparsedEntityURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The getUnparsedEntityURI function returns the URI of the unparsed
entity with the specified name in the same document as the context
node (see [3.3 Unparsed Entities]). It returns the empty string if
there is no such entity.
<p>
XML processors may choose to use the System Identifier (if one
is provided) to resolve the entity, rather than the URI in the
Public Identifier. The details are dependent on the processor, and
we would have to support some form of plug-in resolver to handle
this properly. Currently, we simply return the System Identifier if
present, and hope that it a usable URI or that our caller can
map it to one.
TODO: Resolve Public Identifiers... or consider changing function name.
<p>
If we find a relative URI
reference, XML expects it to be resolved in terms of the base URI
of the document. The DOM doesn't do that for us, and it isn't
entirely clear whether that should be done here; currently that's
pushed up to a higher level of our application. (Note that DOM Level
1 didn't store the document's base URI.)
TODO: Consider resolving Relative URIs.
<p>
(The DOM's statement that \"An XML processor may choose to
completely expand entities before the structure model is passed
to the DOM\" refers only to parsed entities, not unparsed, and hence
doesn't affect this function.)

@param name A string containing the Entity Name of the unparsed
entity.

@return String containing the URI of the Unparsed Entity, or an
empty string if no such entity exists.
"
      end

      operation 4041986 "getPrefix"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a namespace handle, return the prefix that the namespace decl is
mapping.
Given a node handle, return the prefix used to map to the namespace.

<p> %REVIEW% Are you sure you want \"\" for no prefix?  </p>
<p> %REVIEW-COMMENT% I think so... not totally sure. -sb  </p>

@param nodeHandle the id of the node.
@return String prefix of this node's name, or \"\" if no explicit
namespace prefix was given.
"
      end

      operation 4042114 "getAttributeNode"
	public explicit_return_type "int"
	nparams 3
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an attribute node by by qualified name and namespace URI.

@param nodeHandle int Handle of the node upon which to look up this attribute..
@param namespaceURI The namespace URI of the attribute to
  retrieve, or null.
@param name The local name of the attribute to
  retrieve.
@return The attribute node handle with the specified name (
  <code>nodeName</code>) or <code>DTM.NULL</code> if there is no such
  attribute.
"
      end

      operation 4042242 "getDocumentTypeDeclarationPublicIdentifier"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the public identifier of the external subset,
normalized as described in 4.2.2 External Entities [XML]. If there is
no external subset or if it has no public identifier, this property
has no value.

@return the public identifier String object, or null if there is none.
"
      end

      operation 4042370 "getNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style namespace URI
(As defined in Namespaces, this is the declared URI which this node's
prefix -- or default in lieu thereof -- was mapped to.)

<p>%REVIEW% Null or \"\"? -sb</p>

@param nodeHandle the id of the node.
@return String URI value of this node's namespace, or null if no
namespace was resolved.
"
      end

      operation 4042498 "getStringValue"
	public return_type class_ref 619010 // XMLString
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the string-value of a node as a String object
(see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value).

@param nodeHandle The node ID.

@return A string object that represents the string-value of the given node.
"
      end

      operation 4042626 "isWhitespace"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the string-value of a node is whitespace

@param nodeHandle The node Handle.

@return Return true if the given node is whitespace.
"
      end

      operation 4042754 "getElementById"
	public explicit_return_type "int"
	nparams 1
	  param inout name "elementId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Element</code> whose <code>ID</code> is given by
<code>elementId</code>. If no such element exists, returns
<code>DTM.NULL</code>. Behavior is not defined if more than one element
has this <code>ID</code>. Attributes (including those
with the name \"ID\") are not of type ID unless so defined by DTD/Schema
information available to the DTM implementation.
Implementations that do not know whether attributes are of type ID or
not are expected to return <code>DTM.NULL</code>.

<p>%REVIEW% Presumably IDs are still scoped to a single document,
and this operation searches only within a single document, right?
Wouldn't want collisions between DTMs in the same process.</p>

@param elementId The unique <code>id</code> value for an element.
@return The handle of the matching element.
"
      end

      operation 4042882 "getPrefix"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "qname" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a prefix either from the qname or from the uri mapping, or just make
one up!

@param qname The qualified name, which may be null.
@param uri The namespace URI, which may be null.

@return The prefix if there is one, or null.
"
      end

      operation 4043010 "getIdForNamespace"
	public explicit_return_type "int"
	nparams 1
	  param inout name "uri" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a prefix either from the uri mapping, or just make
one up!

@param uri The namespace URI, which may be null.

@return The prefix if there is one, or null.
"
      end

      operation 4043138 "getNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a prefix either from the qname or from the uri mapping, or just make
one up!

@return The prefix if there is one, or null.
"
      end

      operation 4043266 "setIDAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "id" type class_ref 128130 // String
	  param in name "elem" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set an ID string to node association in the ID table.

@param id The ID string.
@param elem The associated element handle.
"
      end

      operation 4043394 "charactersFlush"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check whether accumulated text should be stripped; if not,
append the appropriate flavor of text/cdata node.
"
      end

      operation 4043522 "resolveEntity"
	public return_type class_ref 606594 // InputSource
	nparams 2
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "//////////////////////////////////////////////////////////////////
 Implementation of the EntityResolver interface.
//////////////////////////////////////////////////////////////////

Resolve an external entity.

<p>Always return null, so that the parser will use the system
identifier provided in the XML document.  This method implements
the SAX default behaviour: application writers can override it
in a subclass to do special translations such as catalog lookups
or URI redirection.</p>

@param publicId The public identifer, or null if none is
                available.
@param systemId The system identifier provided in the XML
                document.
@return The new input source, or null to require the
        default behaviour.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.EntityResolver#resolveEntity

@throws SAXException
"
      end

      operation 4043650 "notationDecl"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "//////////////////////////////////////////////////////////////////
 Implementation of DTDHandler interface.
//////////////////////////////////////////////////////////////////

Receive notification of a notation declaration.

<p>By default, do nothing.  Application writers may override this
method in a subclass if they wish to keep track of the notations
declared in a document.</p>

@param name The notation name.
@param publicId The notation public identifier, or null if not
                available.
@param systemId The notation system identifier.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.DTDHandler#notationDecl

@throws SAXException
"
      end

      operation 4043778 "unparsedEntityDecl"
	public explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	  param inout name "notationName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of an unparsed entity declaration.

<p>By default, do nothing.  Application writers may override this
method in a subclass to keep track of the unparsed entities
declared in a document.</p>

@param name The entity name.
@param publicId The entity public identifier, or null if not
                available.
@param systemId The entity system identifier.
@param notationName The name of the associated notation.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.DTDHandler#unparsedEntityDecl

@throws SAXException
"
      end

      operation 4043906 "setDocumentLocator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locator" type class_ref 606082 // Locator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "//////////////////////////////////////////////////////////////////
 Implementation of ContentHandler interface.
//////////////////////////////////////////////////////////////////

Receive a Locator object for document events.

<p>By default, do nothing.  Application writers may override this
method in a subclass if they wish to store the locator for use
with other document events.</p>

@param locator A locator for all SAX document events.
@see org.xml.sax.ContentHandler#setDocumentLocator
@see org.xml.sax.Locator
"
      end

      operation 4044034 "startDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of the beginning of the document.

@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ContentHandler#startDocument
"
      end

      operation 4044162 "endDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of the end of the document.

@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ContentHandler#endDocument
"
      end

      operation 4044290 "startPrefixMapping"
	public explicit_return_type "void"
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of the start of a Namespace mapping.

<p>By default, do nothing.  Application writers may override this
method in a subclass to take specific actions at the start of
each Namespace prefix scope (such as storing the prefix mapping).</p>

@param prefix The Namespace prefix being declared.
@param uri The Namespace URI mapped to the prefix.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ContentHandler#startPrefixMapping
"
      end

      operation 4044418 "endPrefixMapping"
	public explicit_return_type "void"
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of the end of a Namespace mapping.

<p>By default, do nothing.  Application writers may override this
method in a subclass to take specific actions at the end of
each prefix mapping.</p>

@param prefix The Namespace prefix being declared.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ContentHandler#endPrefixMapping
"
      end

      operation 4044546 "declAlreadyDeclared"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if a declaration has already been made for a given prefix.

@param prefix non-null prefix string.

@return true if the declaration has already been declared in the
        current context.
"
      end

      attribute 869762 "m_pastFirstElement"
	package explicit_type "boolean"
	init_value "false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 4044674 "startElement"
	public explicit_return_type "void"
	nparams 4
	  param inout name "uri" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	  param inout name "attributes" type class_ref 593410 // Attributes
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of the start of an element.

<p>By default, do nothing.  Application writers may override this
method in a subclass to take specific actions at the start of
each element (such as allocating a new tree node or writing
output to a file).</p>

@param uri The Namespace URI, or the empty string if the
       element has no Namespace URI or if Namespace
       processing is not being performed.
@param localName The local name (without prefix), or the
       empty string if Namespace processing is not being
       performed.
@param qName The qualified name (with prefix), or the
       empty string if qualified names are not available.
@param attributes The specified or defaulted attributes.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ContentHandler#startElement
"
      end

      operation 4044802 "endElement"
	public explicit_return_type "void"
	nparams 3
	  param inout name "uri" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of the end of an element.

<p>By default, do nothing.  Application writers may override this
method in a subclass to take specific actions at the end of
each element (such as finalising a tree node or writing
output to a file).</p>

@param uri The Namespace URI, or the empty string if the
       element has no Namespace URI or if Namespace
       processing is not being performed.
@param localName The local name (without prefix), or the
       empty string if Namespace processing is not being
       performed.
@param qName The qualified XML 1.0 name (with prefix), or the
       empty string if qualified names are not available.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ContentHandler#endElement
"
      end

      operation 4044930 "characters"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of character data inside an element.

<p>By default, do nothing.  Application writers may override this
method to take specific actions for each chunk of character data
(such as adding the data to a node or buffer, or printing it to
a file).</p>

@param ch The characters.
@param start The start position in the character array.
@param length The number of characters to use from the
              character array.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ContentHandler#characters
"
      end

      operation 4045058 "ignorableWhitespace"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of ignorable whitespace in element content.

<p>By default, do nothing.  Application writers may override this
method to take specific actions for each chunk of ignorable
whitespace (such as adding data to a node or buffer, or printing
it to a file).</p>

@param ch The whitespace characters.
@param start The start position in the character array.
@param length The number of characters to use from the
              character array.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ContentHandler#ignorableWhitespace
"
      end

      operation 4045186 "processingInstruction"
	public explicit_return_type "void"
	nparams 2
	  param inout name "target" type class_ref 128130 // String
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of a processing instruction.

<p>By default, do nothing.  Application writers may override this
method in a subclass to take specific actions for each
processing instruction, such as setting status variables or
invoking other methods.</p>

@param target The processing instruction target.
@param data The processing instruction data, or null if
            none is supplied.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ContentHandler#processingInstruction
"
      end

      operation 4045314 "skippedEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of a skipped entity.

<p>By default, do nothing.  Application writers may override this
method in a subclass to take specific actions for each
processing instruction, such as setting status variables or
invoking other methods.</p>

@param name The name of the skipped entity.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ContentHandler#processingInstruction
"
      end

      operation 4045442 "warning"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 618242 // SAXParseException
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "//////////////////////////////////////////////////////////////////
 Implementation of the ErrorHandler interface.
//////////////////////////////////////////////////////////////////

Receive notification of a parser warning.

<p>The default implementation does nothing.  Application writers
may override this method in a subclass to take specific actions
for each warning, such as inserting the message in a log file or
printing it to the console.</p>

@param e The warning information encoded as an exception.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ErrorHandler#warning
@see org.xml.sax.SAXParseException
"
      end

      operation 4045570 "error"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 618242 // SAXParseException
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of a recoverable parser error.

<p>The default implementation does nothing.  Application writers
may override this method in a subclass to take specific actions
for each error, such as inserting the message in a log file or
printing it to the console.</p>

@param e The warning information encoded as an exception.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ErrorHandler#warning
@see org.xml.sax.SAXParseException
"
      end

      operation 4045698 "fatalError"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 618242 // SAXParseException
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report a fatal XML parsing error.

<p>The default implementation throws a SAXParseException.
Application writers may override this method in a subclass if
they need to take specific actions for each fatal error (such as
collecting all of the errors into a single report): in any case,
the application must stop all regular processing when this
method is invoked, since the document is no longer reliable, and
the parser may no longer report parsing events.</p>

@param e The error information encoded as an exception.
@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ErrorHandler#fatalError
@see org.xml.sax.SAXParseException
"
      end

      operation 4045826 "elementDecl"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "model" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "//////////////////////////////////////////////////////////////////
 Implementation of the DeclHandler interface.
//////////////////////////////////////////////////////////////////

Report an element type declaration.

<p>The content model will consist of the string \"EMPTY\", the
string \"ANY\", or a parenthesised group, optionally followed
by an occurrence indicator.  The model will be normalized so
that all whitespace is removed,and will include the enclosing
parentheses.</p>

@param name The element type name.
@param model The content model as a normalized string.
@throws SAXException The application may raise an exception.
"
      end

      operation 4045954 "attributeDecl"
	public explicit_return_type "void"
	nparams 5
	  param inout name "eName" type class_ref 128130 // String
	  param inout name "aName" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "valueDefault" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report an attribute type declaration.

<p>Only the effective (first) declaration for an attribute will
be reported.  The type will be one of the strings \"CDATA\",
\"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\",
\"ENTITIES\", or \"NOTATION\", or a parenthesized token group with
the separator \"|\" and all whitespace removed.</p>

@param eName The name of the associated element.
@param aName The name of the attribute.
@param type A string representing the attribute type.
@param valueDefault A string representing the attribute default
       (\"#IMPLIED\", \"#REQUIRED\", or \"#FIXED\") or null if
       none of these applies.
@param value A string representing the attribute's default value,
       or null if there is none.
@throws SAXException The application may raise an exception.
"
      end

      operation 4046082 "internalEntityDecl"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report an internal entity declaration.

<p>Only the effective (first) declaration for each entity
will be reported.</p>

@param name The name of the entity.  If it is a parameter
       entity, the name will begin with '%'.
@param value The replacement text of the entity.
@throws SAXException The application may raise an exception.
@see #externalEntityDecl
@see org.xml.sax.DTDHandler#unparsedEntityDecl
"
      end

      operation 4046210 "externalEntityDecl"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report a parsed external entity declaration.

<p>Only the effective (first) declaration for each entity
will be reported.</p>

@param name The name of the entity.  If it is a parameter
       entity, the name will begin with '%'.
@param publicId The declared public identifier of the entity, or
       null if none was declared.
@param systemId The declared system identifier of the entity.
@throws SAXException The application may raise an exception.
@see #internalEntityDecl
@see org.xml.sax.DTDHandler#unparsedEntityDecl
"
      end

      operation 4046338 "startDTD"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "//////////////////////////////////////////////////////////////////
 Implementation of the LexicalHandler interface.
//////////////////////////////////////////////////////////////////

Report the start of DTD declarations, if any.

<p>Any declarations are assumed to be in the internal subset
unless otherwise indicated by a {@link #startEntity startEntity}
event.</p>

<p>Note that the start/endDTD events will appear within
the start/endDocument events from ContentHandler and
before the first startElement event.</p>

@param name The document type name.
@param publicId The declared public identifier for the
       external DTD subset, or null if none was declared.
@param systemId The declared system identifier for the
       external DTD subset, or null if none was declared.
@throws SAXException The application may raise an
           exception.
@see #endDTD
@see #startEntity
"
      end

      operation 4046466 "endDTD"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the end of DTD declarations.

@throws SAXException The application may raise an exception.
@see #startDTD
"
      end

      operation 4046594 "startEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the beginning of an entity in content.

<p><strong>NOTE:</entity> entity references in attribute
values -- and the start and end of the document entity --
are never reported.</p>

<p>The start and end of the external DTD subset are reported
using the pseudo-name \"[dtd]\".  All other events must be
properly nested within start/end entity events.</p>

<p>Note that skipped entities will be reported through the
{@link org.xml.sax.ContentHandler#skippedEntity skippedEntity}
event, which is part of the ContentHandler interface.</p>

@param name The name of the entity.  If it is a parameter
       entity, the name will begin with '%'.
@throws SAXException The application may raise an exception.
@see #endEntity
@see org.xml.sax.ext.DeclHandler#internalEntityDecl
@see org.xml.sax.ext.DeclHandler#externalEntityDecl
"
      end

      operation 4046722 "endEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the end of an entity.

@param name The name of the entity that is ending.
@throws SAXException The application may raise an exception.
@see #startEntity
"
      end

      operation 4046850 "startCDATA"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the start of a CDATA section.

<p>The contents of the CDATA section will be reported through
the regular {@link org.xml.sax.ContentHandler#characters
characters} event.</p>

@throws SAXException The application may raise an exception.
@see #endCDATA
"
      end

      operation 4046978 "endCDATA"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the end of a CDATA section.

@throws SAXException The application may raise an exception.
@see #startCDATA
"
      end

      operation 4047106 "comment"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report an XML comment anywhere in the document.

<p>This callback will be used for comments inside or outside the
document element, including comments in the external DTD
subset (if read).</p>

@param ch An array holding the characters in the comment.
@param start The starting position in the array.
@param length The number of characters to use from the array.
@throws SAXException The application may raise an exception.
"
      end

      operation 4047234 "setProperty"
	public explicit_return_type "void"
	nparams 2
	  param inout name "property" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a run time property for this DTM instance.

%REVIEW% Now that we no longer use this method to support
getSourceLocatorFor, can we remove it?

@param property a <code>String</code> value
@param value an <code>Object</code> value
"
      end

      operation 4047362 "getSourceLocatorFor"
	public return_type class_ref 617346 // SourceLocator
	nparams 1
	  param in name "node" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieve the SourceLocator associated with a specific node.
This is only meaningful if the XalanProperties.SOURCE_LOCATION flag was
set True using setProperty; if it was never set, or was set false, we
will return null.

(We _could_ return a locator with the document's base URI and bogus
line/column information. Trying that; see the else clause.)
"
      end

      operation 4047490 "getFixedNames"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 745730 "SAX2RTFDTM"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is a subclass of SAX2DTM which has been modified to meet the needs of
Result Tree Frameworks (RTFs). The differences are:

1) Multiple XML trees may be appended to the single DTM. This means
that the root node of each document is _not_ node 0. Some code has
had to be deoptimized to support this mode of operation, and an
explicit mechanism for obtaining the Node Handle of the root node
has been provided.

2) A stack of these documents is maintained, allowing us to \"tail-prune\" the
most recently added trees off the end of the DTM as stylesheet elements
(and thus variable contexts) are exited.

PLEASE NOTE that this class may be _heavily_ dependent upon the
internals of the SAX2DTM superclass, and must be maintained in
parallel with that code.  Arguably, they should be conditionals
within a single class... but they have deen separated for
performance reasons. (In fact, one could even argue about which is
the superclass and which is the subclass; the current arrangement
is as much about preserving stability of existing code during
development as anything else.)

%REVIEW% In fact, since the differences are so minor, I think it
may be possible/practical to fold them back into the base
SAX2DTM. Consider that as a future code-size optimization.
"
      classrelation 2247682 // <generalisation>
	relation 2247682 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2247682 // <generalisation>
	  b parent class_ref 626178 // SAX2DTM
      end

      attribute 1162626 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set true to monitor SAX events and similar diagnostic info. 
"
      end

      attribute 1162754 "m_currentDocumentNode"
	private explicit_type "int"
	init_value "NULL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Most recently started Document, or null if the DTM is empty.  
"
      end

      classrelation 2247810 // mark_size (<unidirectional association>)
	relation 2247810 --->
	  a role_name "mark_size" init_value "new IntStack()" package
	    comment " Tail-pruning mark: Number of nodes in use 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2247810 // mark_size (<unidirectional association>)
	  b parent class_ref 633858 // IntStack
      end

      classrelation 2247938 // mark_data_size (<unidirectional association>)
	relation 2247938 --->
	  a role_name "mark_data_size" init_value "new IntStack()" package
	    comment " Tail-pruning mark: Number of data items in use 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2247938 // mark_data_size (<unidirectional association>)
	  b parent class_ref 633858 // IntStack
      end

      classrelation 2248066 // mark_char_size (<unidirectional association>)
	relation 2248066 --->
	  a role_name "mark_char_size" init_value "new IntStack()" package
	    comment " Tail-pruning mark: Number of size-of-data fields in use 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2248066 // mark_char_size (<unidirectional association>)
	  b parent class_ref 633858 // IntStack
      end

      classrelation 2248194 // mark_doq_size (<unidirectional association>)
	relation 2248194 --->
	  a role_name "mark_doq_size" init_value "new IntStack()" package
	    comment " Tail-pruning mark: Number of dataOrQName slots in use 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2248194 // mark_doq_size (<unidirectional association>)
	  b parent class_ref 633858 // IntStack
      end

      classrelation 2248322 // mark_nsdeclset_size (<unidirectional association>)
	relation 2248322 --->
	  a role_name "mark_nsdeclset_size" init_value "new IntStack()" package
	    comment " Tail-pruning mark: Number of namespace declaration sets in use
%REVIEW% I don't think number of NS sets is ever different from number
of NS elements. We can probabably reduce these to a single stack and save
some storage.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2248322 // mark_nsdeclset_size (<unidirectional association>)
	  b parent class_ref 633858 // IntStack
      end

      classrelation 2248450 // mark_nsdeclelem_size (<unidirectional association>)
	relation 2248450 --->
	  a role_name "mark_nsdeclelem_size" init_value "new IntStack()" package
	    comment " Tail-pruning mark: Number of naespace declaration elements in use
%REVIEW% I don't think number of NS sets is ever different from number
of NS elements. We can probabably reduce these to a single stack and save
some storage.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2248450 // mark_nsdeclelem_size (<unidirectional association>)
	  b parent class_ref 633858 // IntStack
      end

      attribute 1162882 "m_emptyNodeCount"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tail-pruning mark:  initial number of nodes in use

"
      end

      attribute 1163010 "m_emptyNSDeclSetCount"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tail-pruning mark:  initial number of namespace declaration sets

"
      end

      attribute 1163138 "m_emptyNSDeclSetElemsCount"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tail-pruning mark:  initial number of namespace declaration elements

"
      end

      attribute 1163266 "m_emptyDataCount"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tail-pruning mark:  initial number of data items in use

"
      end

      attribute 1163394 "m_emptyCharsCount"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tail-pruning mark:  initial number of characters in use

"
      end

      attribute 1163522 "m_emptyDataQNCount"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tail-pruning mark:  default initial number of dataOrQName slots in use

"
      end

      operation 5249666 "SAX2RTFDTM"
	public explicit_return_type ""
	nparams 6
	  param inout name "mgr" type class_ref 619266 // DTMManager
	  param inout name "source" type class_ref 627202 // Source
	  param in name "dtmIdentity" explicit_type "int"
	  param inout name "whiteSpaceFilter" type class_ref 620162 // DTMWSFilter
	  param inout name "xstringfactory" type class_ref 626946 // XMLStringFactory
	  param inout name "doIndexing" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5249794 "getDocument"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a DTM, find the owning document node. In the case of
SAX2RTFDTM, which may contain multiple documents, this returns
the <b>most recently started</b> document, or null if the DTM is
empty or no document is currently under construction.

%REVIEW% Should we continue to report the most recent after
construction has ended? I think not, given that it may have been
tail-pruned.

 @return int Node handle of Document node, or null if this DTM does not
 contain an \"active\" document.
"
      end

      operation 5249922 "getDocumentRoot"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find the owning document node, using DTM semantics
(Document owns itself) rather than DOM semantics (Document has no owner).

(I'm counting on the fact that getOwnerDocument() is implemented on top
of this call, in the superclass, to avoid having to rewrite that one.
Be careful if that code changes!)

@param nodeHandle the id of the node.
@return int Node handle of owning document
"
      end

      operation 5250050 "_documentRoot"
	protected explicit_return_type "int"
	nparams 1
	  param in name "nodeIdentifier" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node identifier, find the owning document node.  Unlike the DOM,
this considers the owningDocument of a Document to be itself. Note that
in shared DTMs this may not be zero.

@param nodeIdentifier the id of the starting node.
@return int Node identifier of the root of this DTM tree
"
      end

      operation 5250178 "startDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of the beginning of a new RTF document.

%REVIEW% Y'know, this isn't all that much of a deoptimization. We
might want to consider folding the start/endDocument changes back
into the main SAX2DTM so we don't have to expose so many fields
(even as Protected) and carry the additional code.

@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ContentHandler#startDocument
"
      end

      operation 5250306 "endDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of the end of the document.

%REVIEW% Y'know, this isn't all that much of a deoptimization. We
might want to consider folding the start/endDocument changes back
into the main SAX2DTM so we don't have to expose so many fields
(even as Protected).

@throws SAXException Any SAX exception, possibly
           wrapping another exception.
@see org.xml.sax.ContentHandler#endDocument
"
      end

      operation 5250434 "pushRewindMark"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " \"Tail-pruning\" support for RTFs.

This function pushes information about the current size of the
DTM's data structures onto a stack, for use by popRewindMark()
(which see).

%REVIEW% I have no idea how to rewind m_elemIndexes. However,
RTFs will not be indexed, so I can simply panic if that case
arises. Hey, it works...
"
      end

      operation 5250562 "popRewindMark"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " \"Tail-pruning\" support for RTFs.

This function pops the information previously saved by
pushRewindMark (which see) and uses it to discard all nodes added
to the DTM after that time. We expect that this will allow us to
reuse storage more effectively.

This is _not_ intended to be called while a document is still being
constructed -- only between endDocument and the next startDocument

%REVIEW% WARNING: This is the first use of some of the truncation
methods.  If Xalan blows up after this is called, that's a likely
place to check.

%REVIEW% Our original design for DTMs permitted them to share
string pools.  If there any risk that this might be happening, we
can _not_ rewind and recover the string storage. One solution
might to assert that DTMs used for RTFs Must Not take advantage
of that feature, but this seems excessively fragile. Another, much
less attractive, would be to just let them leak... Nah.

@return true if and only if the pop completely emptied the
RTF. That response is used when determining how to unspool
RTF-started-while-RTF-open situations.
"
      end

      operation 5250690 "isTreeIncomplete"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return true if a DTM tree is currently under construction.
"
      end
    end
  end

  deploymentview 152450 "sax2dtm"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 436610 "SAX2DTM"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.DTM;
import com.sun.org.apache.xml.internal.dtm.DTMManager;
import com.sun.org.apache.xml.internal.dtm.DTMWSFilter;
import com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators;
import com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault;
import com.sun.org.apache.xml.internal.dtm.ref.DTMStringPool;
import com.sun.org.apache.xml.internal.dtm.ref.DTMTreeWalker;
import com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource;
import com.sun.org.apache.xml.internal.dtm.ref.NodeLocator;
import com.sun.org.apache.xml.internal.res.XMLErrorResources;
import com.sun.org.apache.xml.internal.res.XMLMessages;
import com.sun.org.apache.xml.internal.utils.FastStringBuffer;
import com.sun.org.apache.xml.internal.utils.IntStack;
import com.sun.org.apache.xml.internal.utils.IntVector;
import com.sun.org.apache.xml.internal.utils.StringVector;
import com.sun.org.apache.xml.internal.utils.SuballocatedIntVector;
import com.sun.org.apache.xml.internal.utils.SystemIDResolver;
import com.sun.org.apache.xml.internal.utils.WrappedRuntimeException;
import com.sun.org.apache.xml.internal.utils.XMLString;
import com.sun.org.apache.xml.internal.utils.XMLStringFactory;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.xml.transform.Source;
import javax.xml.transform.SourceLocator;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.DTDHandler;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.ext.DeclHandler;
import org.xml.sax.ext.LexicalHandler;
${definition}"
      associated_elems
	class_ref 626178 // SAX2DTM
      end
      comment "Copyright (c) 2007, 2015, Oracle and/or its affiliates. All rights reserved.


Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: SAX2DTM.java,v 1.2.4.1 2005/09/15 08:15:11 suresh_emailid Exp $
"
    end

    artifact 524290 "SAX2RTFDTM"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.Source;
import com.sun.org.apache.xml.internal.dtm.DTM;
import com.sun.org.apache.xml.internal.dtm.DTMManager;
import com.sun.org.apache.xml.internal.dtm.DTMWSFilter;
import com.sun.org.apache.xml.internal.utils.IntStack;
import com.sun.org.apache.xml.internal.utils.IntVector;
import com.sun.org.apache.xml.internal.utils.StringVector;
import com.sun.org.apache.xml.internal.utils.XMLStringFactory;
import org.xml.sax.SAXException;
${definition}"
      associated_elems
	class_ref 745730 // SAX2RTFDTM
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: SAX2RTFDTM.java,v 1.2.4.1 2005/09/15 08:15:13 suresh_emailid Exp $
"
    end
  end
end
