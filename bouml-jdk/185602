format 222
"cert" // jdk1.8::javax::security::cert
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/security/cert/"
  java_package "javax.security.cert"
  classview 178562 "cert"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1246082 "Certificate"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Abstract class for managing a variety of identity certificates.
An identity certificate is a guarantee by a principal that
a public key is that of another principal.  (A principal represents
an entity such as an individual user, a group, or a corporation.)
<p>
This class is an abstraction for certificates that have different
formats but important common uses.  For example, different types of
certificates, such as X.509 and PGP, share general certificate
functionality (like encoding and verifying) and
some types of information (like a public key).
<p>
X.509, PGP, and SDSI certificates can all be implemented by
subclassing the Certificate class, even though they contain different
sets of information, and they store and retrieve the information in
different ways.

<p><em>Note: The classes in the package {@code javax.security.cert}
exist for compatibility with earlier versions of the
Java Secure Sockets Extension (JSSE). New applications should instead
use the standard Java SE certificate classes located in
{@code java.security.cert}.</em></p>

@since 1.4
@see X509Certificate

@author Hemma Prafullchandra
"
      operation 10247042 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this certificate for equality with the specified
object. If the {@code other} object is an
{@code instanceof} {@code Certificate}, then
its encoded form is retrieved and compared with the
encoded form of this certificate.

@param other the object to test for equality with this certificate.
@return true if the encoded forms of the two certificates
        match, false otherwise.
"
      end

      operation 10247170 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode value for this certificate from its
encoded form.

@return the hashcode value.
"
      end

      operation 10247298 "getEncoded"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 1246210 // CertificateEncodingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encoded form of this certificate. It is
assumed that each certificate type would have only a single
form of encoding; for example, X.509 certificates would
be encoded as ASN.1 DER.

@return encoded form of this certificate
@exception CertificateEncodingException on internal certificate
           encoding failure
"
      end

      operation 10247426 "verify"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 765826 // PublicKey
	nexceptions 5
	  exception class_ref 1246338 // CertificateException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1017346 // InvalidKeyException
	  exception class_ref 509442 // NoSuchProviderException
	  exception class_ref 1024770 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this certificate was signed using the
private key that corresponds to the specified public key.

@param key the PublicKey used to carry out the verification.

@exception NoSuchAlgorithmException on unsupported signature
algorithms.
@exception InvalidKeyException on incorrect key.
@exception NoSuchProviderException if there's no default provider.
@exception SignatureException on signature errors.
@exception CertificateException on encoding errors.
"
      end

      operation 10247554 "verify"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 765826 // PublicKey
	  param inout name "sigProvider" type class_ref 128130 // String
	nexceptions 5
	  exception class_ref 1246338 // CertificateException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1017346 // InvalidKeyException
	  exception class_ref 509442 // NoSuchProviderException
	  exception class_ref 1024770 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this certificate was signed using the
private key that corresponds to the specified public key.
This method uses the signature verification engine
supplied by the specified provider.

@param key the PublicKey used to carry out the verification.
@param sigProvider the name of the signature provider.
@exception NoSuchAlgorithmException on unsupported signature algorithms.
@exception InvalidKeyException on incorrect key.
@exception NoSuchProviderException on incorrect provider.
@exception SignatureException on signature errors.
@exception CertificateException on encoding errors.
"
      end

      operation 10247682 "toString"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this certificate.

@return a string representation of this certificate.
"
      end

      operation 10247810 "getPublicKey"
	abstract public return_type class_ref 765826 // PublicKey
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the public key from this certificate.

@return the public key.
"
      end
    end

    class 1246210 "CertificateEncodingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Certificate Encoding Exception. This is thrown whenever an error
occurs whilst attempting to encode a certificate.

<p><em>Note: The classes in the package {@code javax.security.cert}
exist for compatibility with earlier versions of the
Java Secure Sockets Extension (JSSE). New applications should instead
use the standard Java SE certificate classes located in
{@code java.security.cert}.</em></p>

@since 1.4
@author Hemma Prafullchandra
"
      classrelation 4027650 // <generalisation>
	relation 4027650 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4027650 // <generalisation>
	  b parent class_ref 1246338 // CertificateException
      end

      attribute 2356354 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8187642723048403470L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 10248194 "CertificateEncodingException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateEncodingException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 10248322 "CertificateEncodingException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateEncodingException with the specified detail
message. A detail message is a String that describes this
particular exception.

@param message the detail message.
"
      end
    end

    class 1246338 "CertificateException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception indicates one of a variety of certificate problems.

<p><em>Note: The classes in the package {@code javax.security.cert}
exist for compatibility with earlier versions of the
Java Secure Sockets Extension (JSSE). New applications should instead
use the standard Java SE certificate classes located in
{@code java.security.cert}.</em></p>

@author Hemma Prafullchandra
@since 1.4
@see Certificate
"
      classrelation 4027522 // <generalisation>
	relation 4027522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4027522 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 2356226 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5757213374030785290L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 10247938 "CertificateException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a certificate exception with no detail message. A detail
message is a String that describes this particular exception.
"
      end

      operation 10248066 "CertificateException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a certificate exception with the given detail
message. A detail message is a String that describes this
particular exception.

@param msg the detail message.
"
      end
    end

    class 1246466 "CertificateExpiredException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Certificate Expired Exception. This is thrown whenever the current
{@code Date} or the specified {@code Date} is after the
{@code notAfter} date/time specified in the validity period
of the certificate.

<p><em>Note: The classes in the package {@code javax.security.cert}
exist for compatibility with earlier versions of the
Java Secure Sockets Extension (JSSE). New applications should instead
use the standard Java SE certificate classes located in
{@code java.security.cert}.</em></p>

@since 1.4
@author Hemma Prafullchandra
"
      classrelation 4027778 // <generalisation>
	relation 4027778 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4027778 // <generalisation>
	  b parent class_ref 1246338 // CertificateException
      end

      attribute 2356482 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5091601212177261883L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 10248450 "CertificateExpiredException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateExpiredException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 10248578 "CertificateExpiredException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateExpiredException with the specified detail
message. A detail message is a String that describes this
particular exception.

@param message the detail message.
"
      end
    end

    class 1246594 "CertificateNotYetValidException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Certificate is not yet valid exception. This is thrown whenever
the current {@code Date} or the specified {@code Date}
is before the {@code notBefore} date/time in the Certificate
validity period.

<p><em>Note: The classes in the package {@code javax.security.cert}
exist for compatibility with earlier versions of the
Java Secure Sockets Extension (JSSE). New applications should instead
use the standard Java SE certificate classes located in
{@code java.security.cert}.</em></p>

@since 1.4
@author Hemma Prafullchandra
"
      classrelation 4027906 // <generalisation>
	relation 4027906 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4027906 // <generalisation>
	  b parent class_ref 1246338 // CertificateException
      end

      attribute 2356610 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8976172474266822818L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 10248706 "CertificateNotYetValidException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateNotYetValidException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 10248834 "CertificateNotYetValidException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateNotYetValidException with the specified detail
message. A detail message is a String that describes this
particular exception.

@param message the detail message.
"
      end
    end

    class 1246722 "CertificateParsingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Certificate Parsing Exception. This is thrown whenever
invalid DER encoded certificate is parsed or unsupported DER features
are found in the Certificate.

<p><em>Note: The classes in the package {@code javax.security.cert}
exist for compatibility with earlier versions of the
Java Secure Sockets Extension (JSSE). New applications should instead
use the standard Java SE certificate classes located in
{@code java.security.cert}.</em></p>

@since 1.4
@author Hemma Prafullchandra
"
      classrelation 4028034 // <generalisation>
	relation 4028034 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4028034 // <generalisation>
	  b parent class_ref 1246338 // CertificateException
      end

      attribute 2356738 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8449352422951136229L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 10248962 "CertificateParsingException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateParsingException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 10249090 "CertificateParsingException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateParsingException with the specified detail
message. A detail message is a String that describes this
particular exception.

@param message the detail message.
"
      end
    end

    class 1246850 "X509Certificate"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract class for X.509 v1 certificates. This provides a standard
way to access all the version 1 attributes of an X.509 certificate.
Attributes that are specific to X.509 v2 or v3 are not available
through this interface. Future API evolution will provide full access to
complete X.509 v3 attributes.
<p>
The basic X.509 format was defined by
ISO/IEC and ANSI X9 and is described below in ASN.1:
<pre>
Certificate  ::=  SEQUENCE  {
    tbsCertificate       TBSCertificate,
    signatureAlgorithm   AlgorithmIdentifier,
    signature            BIT STRING  }
</pre>
<p>
These certificates are widely used to support authentication and
other functionality in Internet security systems. Common applications
include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL),
code signing for trusted software distribution, and Secure Electronic
Transactions (SET).
<p>
These certificates are managed and vouched for by <em>Certificate
Authorities</em> (CAs). CAs are services which create certificates by
placing data in the X.509 standard format and then digitally signing
that data. CAs act as trusted third parties, making introductions
between principals who have no direct knowledge of each other.
CA certificates are either signed by themselves, or by some other
CA such as a \"root\" CA.
<p>
The ASN.1 definition of {@code tbsCertificate} is:
<pre>
TBSCertificate  ::=  SEQUENCE  {
    version         [0]  EXPLICIT Version DEFAULT v1,
    serialNumber         CertificateSerialNumber,
    signature            AlgorithmIdentifier,
    issuer               Name,
    validity             Validity,
    subject              Name,
    subjectPublicKeyInfo SubjectPublicKeyInfo,
    }
</pre>
<p>
Here is sample code to instantiate an X.509 certificate:
<pre>
InputStream inStream = new FileInputStream(\"fileName-of-cert\");
X509Certificate cert = X509Certificate.getInstance(inStream);
inStream.close();
</pre>
OR
<pre>
byte[] certData = &lt;certificate read from a file, say&gt;
X509Certificate cert = X509Certificate.getInstance(certData);
</pre>
<p>
In either case, the code that instantiates an X.509 certificate
consults the value of the {@code cert.provider.x509v1} security property
to locate the actual implementation or instantiates a default implementation.
<p>
The {@code cert.provider.x509v1} property is set to a default
implementation for X.509 such as:
<pre>
cert.provider.x509v1=com.sun.security.cert.internal.x509.X509V1CertImpl
</pre>
<p>
The value of this {@code cert.provider.x509v1} property has to be
changed to instantiate another implementation. If this security
property is not set, a default implementation will be used.
Currently, due to possible security restrictions on access to
Security properties, this value is looked up and cached at class
initialization time and will fallback on a default implementation if
the Security property is not accessible.

<p><em>Note: The classes in the package {@code javax.security.cert}
exist for compatibility with earlier versions of the
Java Secure Sockets Extension (JSSE). New applications should instead
use the standard Java SE certificate classes located in
{@code java.security.cert}.</em></p>

@author Hemma Prafullchandra
@since 1.4
@see Certificate
@see java.security.cert.X509Extension
@see java.security.Security security properties
"
      classrelation 4028162 // <generalisation>
	relation 4028162 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4028162 // <generalisation>
	  b parent class_ref 1246082 // Certificate
      end

      classrelation 4028290 // X509_PROVIDER (<unidirectional association>)
	relation 4028290 --->
	  a role_name "X509_PROVIDER" init_value " \"cert.provider.x509v1\"" class_relation const_relation private
	    comment "
Constant to lookup in the Security properties file.
In the Security properties file the default implementation
for X.509 v3 is given as:
<pre>
cert.provider.x509v1=com.sun.security.cert.internal.x509.X509V1CertImpl
</pre>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4028290 // X509_PROVIDER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4028418 // X509Provider (<unidirectional association>)
	relation 4028418 --->
	  a role_name "X509Provider" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4028418 // X509Provider (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      extra_member 184322 "initialization"
	
	cpp "" ""
	java "  static {
        X509Provider = AccessController.doPrivileged(
            new PrivilegedAction<String>() {
                public String run() {
                    return Security.getProperty(X509_PROVIDER);
                }
            }
        );
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 10249218 "getInstance"
	class_operation public return_type class_ref 1246850 // X509Certificate
	nparams 1
	  param inout name "inStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1246338 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates an X509Certificate object, and initializes it with
the data read from the input stream {@code inStream}.
The implementation (X509Certificate is an abstract class) is
provided by the class specified as the value of the
{@code cert.provider.x509v1} security property.

<p>Note: Only one DER-encoded
certificate is expected to be in the input stream.
Also, all X509Certificate
subclasses must provide a constructor of the form:
<pre>{@code
public <subClass>(InputStream inStream) ...
}</pre>

@param inStream an input stream with the data to be read to
       initialize the certificate.
@return an X509Certificate object initialized with the data
        from the input stream.
@exception CertificateException if a class initialization
           or certificate parsing error occurs.
"
      end

      operation 10249346 "getInstance"
	class_operation public return_type class_ref 1246850 // X509Certificate
	nparams 1
	  param inout name "certData" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1246338 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates an X509Certificate object, and initializes it with
the specified byte array.
The implementation (X509Certificate is an abstract class) is
provided by the class specified as the value of the
{@code cert.provider.x509v1} security property.

<p>Note: All X509Certificate
subclasses must provide a constructor of the form:
<pre>{@code
public <subClass>(InputStream inStream) ...
}</pre>

@param certData a byte array containing the DER-encoded
       certificate.
@return an X509Certificate object initialized with the data
        from {@code certData}.
@exception CertificateException if a class initialization
           or certificate parsing error occurs.
"
      end

      operation 10249474 "getInst"
	class_operation private return_type class_ref 1246850 // X509Certificate
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1246338 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10249602 "checkValidity"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 2
	  exception class_ref 1246466 // CertificateExpiredException
	  exception class_ref 1246594 // CertificateNotYetValidException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks that the certificate is currently valid. It is if
the current date and time are within the validity period given in the
certificate.
<p>
The validity period consists of two date/time values:
the first and last dates (and times) on which the certificate
is valid. It is defined in
ASN.1 as:
<pre>
validity             Validity

Validity ::= SEQUENCE {
    notBefore      CertificateValidityDate,
    notAfter       CertificateValidityDate }

CertificateValidityDate ::= CHOICE {
    utcTime        UTCTime,
    generalTime    GeneralizedTime }
</pre>

@exception CertificateExpiredException if the certificate has expired.
@exception CertificateNotYetValidException if the certificate is not
           yet valid.
"
      end

      operation 10249730 "checkValidity"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "date" type class_ref 521474 // Date
	nexceptions 2
	  exception class_ref 1246466 // CertificateExpiredException
	  exception class_ref 1246594 // CertificateNotYetValidException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks that the specified date is within the certificate's
validity period. In other words, this determines whether the
certificate would be valid at the specified date/time.

@param date the Date to check against to see if this certificate
       is valid at that date/time.
@exception CertificateExpiredException if the certificate has expired
           with respect to the {@code date} supplied.
@exception CertificateNotYetValidException if the certificate is not
           yet valid with respect to the {@code date} supplied.
@see #checkValidity()
"
      end

      operation 10249858 "getVersion"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code version} (version number) value from the
certificate. The ASN.1 definition for this is:
<pre>
version         [0]  EXPLICIT Version DEFAULT v1

Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
</pre>

@return the version number from the ASN.1 encoding, i.e. 0, 1 or 2.
"
      end

      operation 10249986 "getSerialNumber"
	abstract public return_type class_ref 686338 // BigInteger
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code serialNumber} value from the certificate.
The serial number is an integer assigned by the certification
authority to each certificate. It must be unique for each
certificate issued by a given CA (i.e., the issuer name and
serial number identify a unique certificate).
The ASN.1 definition for this is:
<pre>
serialNumber     CertificateSerialNumber

CertificateSerialNumber  ::=  INTEGER
</pre>

@return the serial number.
"
      end

      operation 10250114 "getIssuerDN"
	abstract public return_type class_ref 510594 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code issuer} (issuer distinguished name) value from
the certificate. The issuer name identifies the entity that signed (and
issued) the certificate.

<p>The issuer name field contains an
X.500 distinguished name (DN).
The ASN.1 definition for this is:
<pre>
issuer    Name

Name ::= CHOICE { RDNSequence }
RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
RelativeDistinguishedName ::=
    SET OF AttributeValueAssertion

AttributeValueAssertion ::= SEQUENCE {
                              AttributeType,
                              AttributeValue }
AttributeType ::= OBJECT IDENTIFIER
AttributeValue ::= ANY
</pre>
The {@code Name} describes a hierarchical name composed of
attributes, such as country name, and corresponding values, such as US.
The type of the {@code AttributeValue} component is determined by
the {@code AttributeType}; in general it will be a
{@code directoryString}. A {@code directoryString} is usually
one of {@code PrintableString},
{@code TeletexString} or {@code UniversalString}.

@return a Principal whose name is the issuer distinguished name.
"
      end

      operation 10250242 "getSubjectDN"
	abstract public return_type class_ref 510594 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code subject} (subject distinguished name) value
from the certificate.
The ASN.1 definition for this is:
<pre>
subject    Name
</pre>

<p>See {@link #getIssuerDN() getIssuerDN} for {@code Name}
and other relevant definitions.

@return a Principal whose name is the subject name.
@see #getIssuerDN()
"
      end

      operation 10250370 "getNotBefore"
	abstract public return_type class_ref 521474 // Date
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code notBefore} date from the validity period of
the certificate.
The relevant ASN.1 definitions are:
<pre>
validity             Validity

Validity ::= SEQUENCE {
    notBefore      CertificateValidityDate,
    notAfter       CertificateValidityDate }

CertificateValidityDate ::= CHOICE {
    utcTime        UTCTime,
    generalTime    GeneralizedTime }
</pre>

@return the start date of the validity period.
@see #checkValidity()
"
      end

      operation 10250498 "getNotAfter"
	abstract public return_type class_ref 521474 // Date
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code notAfter} date from the validity period of
the certificate. See {@link #getNotBefore() getNotBefore}
for relevant ASN.1 definitions.

@return the end date of the validity period.
@see #checkValidity()
"
      end

      operation 10250626 "getSigAlgName"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the signature algorithm name for the certificate
signature algorithm. An example is the string \"SHA-1/DSA\".
The ASN.1 definition for this is:
<pre>
signatureAlgorithm   AlgorithmIdentifier

AlgorithmIdentifier  ::=  SEQUENCE  {
    algorithm               OBJECT IDENTIFIER,
    parameters              ANY DEFINED BY algorithm OPTIONAL  }
                            -- contains a value of the type
                            -- registered for use with the
                            -- algorithm object identifier value
</pre>

<p>The algorithm name is determined from the {@code algorithm}
OID string.

@return the signature algorithm name.
"
      end

      operation 10250754 "getSigAlgOID"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the signature algorithm OID string from the certificate.
An OID is represented by a set of positive whole numbers separated
by periods.
For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1
with DSA signature algorithm, as per the PKIX part I.

<p>See {@link #getSigAlgName() getSigAlgName} for
relevant ASN.1 definitions.

@return the signature algorithm OID string.
"
      end

      operation 10250882 "getSigAlgParams"
	abstract public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the DER-encoded signature algorithm parameters from this
certificate's signature algorithm. In most cases, the signature
algorithm parameters are null; the parameters are usually
supplied with the certificate's public key.

<p>See {@link #getSigAlgName() getSigAlgName} for
relevant ASN.1 definitions.

@return the DER-encoded signature algorithm parameters, or
        null if no parameters are present.
"
      end
    end
  end

  deploymentview 175106 "cert"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 908546 "Certificate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.PublicKey;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.SignatureException;
${definition}"
      associated_elems
	class_ref 1246082 // Certificate
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 908674 "CertificateException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1246338 // CertificateException
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 908802 "CertificateEncodingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1246210 // CertificateEncodingException
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 908930 "CertificateExpiredException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1246466 // CertificateExpiredException
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 909058 "CertificateNotYetValidException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1246594 // CertificateNotYetValidException
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 909186 "CertificateParsingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1246722 // CertificateParsingException
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 909314 "X509Certificate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.lang.Class;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.security.Security;
import java.math.BigInteger;
import java.security.AccessController;
import java.security.Principal;
import java.security.PrivilegedAction;
import java.security.PublicKey;
import java.util.BitSet;
import java.util.Date;
${definition}"
      associated_elems
	class_ref 1246850 // X509Certificate
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
