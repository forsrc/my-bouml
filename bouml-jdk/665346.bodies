class TreeWalkerImpl
!!!4333442.java!!!	TreeWalkerImpl(inout root : Node, in whatToShow : int, inout nodeFilter : NodeFilter, inout entityReferenceExpansion : boolean)
        fCurrentNode = root;
        fRoot = root;
        fWhatToShow = whatToShow;
        fNodeFilter = nodeFilter;
        fEntityReferenceExpansion = entityReferenceExpansion;
!!!4333570.java!!!	getRoot() : Node
        return fRoot;
!!!4333698.java!!!	getWhatToShow() : int
        return fWhatToShow;
!!!4333826.java!!!	setWhatShow(in whatToShow : int) : void
        fWhatToShow = whatToShow;
!!!4333954.java!!!	getFilter() : NodeFilter
        return fNodeFilter;
!!!4334082.java!!!	getExpandEntityReferences() : boolean
        return fEntityReferenceExpansion;
!!!4334210.java!!!	getCurrentNode() : Node
        return fCurrentNode;
!!!4334338.java!!!	setCurrentNode(inout node : Node) : void
        if (node == null) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_SUPPORTED_ERR", null);
              throw new DOMException(DOMException.NOT_SUPPORTED_ERR, msg);
        }

        fCurrentNode = node;
!!!4334466.java!!!	parentNode() : Node

        if (fCurrentNode == null) return null;

        Node node = getParentNode(fCurrentNode);
        if (node !=null) {
            fCurrentNode = node;
        }
        return node;

!!!4334594.java!!!	firstChild() : Node

        if (fCurrentNode == null) return null;

        Node node = getFirstChild(fCurrentNode);
        if (node !=null) {
            fCurrentNode = node;
        }
        return node;
!!!4334722.java!!!	lastChild() : Node

        if (fCurrentNode == null) return null;

        Node node = getLastChild(fCurrentNode);
        if (node !=null) {
            fCurrentNode = node;
        }
        return node;
!!!4334850.java!!!	previousSibling() : Node

        if (fCurrentNode == null) return null;

        Node node = getPreviousSibling(fCurrentNode);
        if (node !=null) {
            fCurrentNode = node;
        }
        return node;
!!!4334978.java!!!	nextSibling() : Node
        if (fCurrentNode == null) return null;

        Node node = getNextSibling(fCurrentNode);
        if (node !=null) {
            fCurrentNode = node;
        }
        return node;
!!!4335106.java!!!	previousNode() : Node
        Node result;

        if (fCurrentNode == null) return null;

        // get sibling
        result = getPreviousSibling(fCurrentNode);
        if (result == null) {
            result = getParentNode(fCurrentNode);
            if (result != null) {
                fCurrentNode = result;
                return fCurrentNode;
            }
            return null;
        }

        // get the lastChild of result.
        Node lastChild  = getLastChild(result);

        Node prev = lastChild ;
        while (lastChild != null) {
          prev = lastChild ;
          lastChild = getLastChild(prev) ;
        }

        lastChild = prev ;

        // if there is a lastChild which passes filters return it.
        if (lastChild != null) {
            fCurrentNode = lastChild;
            return fCurrentNode;
        }

        // otherwise return the previous sibling.
        if (result != null) {
            fCurrentNode = result;
            return fCurrentNode;
        }

        // otherwise return null.
        return null;
!!!4335234.java!!!	nextNode() : Node

        if (fCurrentNode == null) return null;

        Node result = getFirstChild(fCurrentNode);

        if (result != null) {
            fCurrentNode = result;
            return result;
        }

        result = getNextSibling(fCurrentNode);

        if (result != null) {
            fCurrentNode = result;
            return result;
        }

        // return parent's 1st sibling.
        Node parent = getParentNode(fCurrentNode);
        while (parent != null) {
            result = getNextSibling(parent);
            if (result != null) {
                fCurrentNode = result;
                return result;
            } else {
                parent = getParentNode(parent);
            }
        }

        // end , return null
        return null;
!!!4335362.java!!!	getParentNode(inout node : Node) : Node

        if (node == null || node == fRoot) return null;

        Node newNode = node.getParentNode();
        if (newNode == null)  return null;

        int accept = acceptNode(newNode);

        if (accept == NodeFilter.FILTER_ACCEPT)
            return newNode;
        else
        //if (accept == NodeFilter.SKIP_NODE) // and REJECT too.
        {
            return getParentNode(newNode);
        }


!!!4335490.java!!!	getNextSibling(inout node : Node) : Node
                return getNextSibling(node, fRoot);
!!!4335618.java!!!	getNextSibling(inout node : Node, inout root : Node) : Node

        if (node == null || node == root) return null;

        Node newNode = node.getNextSibling();
        if (newNode == null) {

            newNode = node.getParentNode();

            if (newNode == null || newNode == root)  return null;

            int parentAccept = acceptNode(newNode);

            if (parentAccept==NodeFilter.FILTER_SKIP) {
                return getNextSibling(newNode, root);
            }

            return null;
        }

        int accept = acceptNode(newNode);

        if (accept == NodeFilter.FILTER_ACCEPT)
            return newNode;
        else
        if (accept == NodeFilter.FILTER_SKIP) {
            Node fChild = getFirstChild(newNode);
            if (fChild == null) {
                return getNextSibling(newNode, root);
            }
            return fChild;
        }
        else
        //if (accept == NodeFilter.REJECT_NODE)
        {
            return getNextSibling(newNode, root);
        }

!!!4335746.java!!!	getPreviousSibling(inout node : Node) : Node
                return getPreviousSibling(node, fRoot);
!!!4335874.java!!!	getPreviousSibling(inout node : Node, inout root : Node) : Node

        if (node == null || node == root) return null;

        Node newNode = node.getPreviousSibling();
        if (newNode == null) {

            newNode = node.getParentNode();
            if (newNode == null || newNode == root)  return null;

            int parentAccept = acceptNode(newNode);

            if (parentAccept==NodeFilter.FILTER_SKIP) {
                return getPreviousSibling(newNode, root);
            }

            return null;
        }

        int accept = acceptNode(newNode);

        if (accept == NodeFilter.FILTER_ACCEPT)
            return newNode;
        else
        if (accept == NodeFilter.FILTER_SKIP) {
            Node fChild =  getLastChild(newNode);
            if (fChild == null) {
                return getPreviousSibling(newNode, root);
            }
            return fChild;
        }
        else
        //if (accept == NodeFilter.REJECT_NODE)
        {
            return getPreviousSibling(newNode, root);
        }

!!!4336002.java!!!	getFirstChild(inout node : Node) : Node
        if (node == null) return null;

        if ( !fEntityReferenceExpansion
             && node.getNodeType() == Node.ENTITY_REFERENCE_NODE)
            return null;
        Node newNode = node.getFirstChild();
        if (newNode == null)  return null;
        int accept = acceptNode(newNode);

        if (accept == NodeFilter.FILTER_ACCEPT)
            return newNode;
        else
        if (accept == NodeFilter.FILTER_SKIP
            && newNode.hasChildNodes())
        {
            Node fChild = getFirstChild(newNode);

            if (fChild == null) {
                return getNextSibling(newNode, node);
            }
            return fChild;
        }
        else
        //if (accept == NodeFilter.REJECT_NODE)
        {
            return getNextSibling(newNode, node);
        }


!!!4336130.java!!!	getLastChild(inout node : Node) : Node

        if (node == null) return null;

        if ( !fEntityReferenceExpansion
             && node.getNodeType() == Node.ENTITY_REFERENCE_NODE)
            return null;

        Node newNode = node.getLastChild();
        if (newNode == null)  return null;

        int accept = acceptNode(newNode);

        if (accept == NodeFilter.FILTER_ACCEPT)
            return newNode;
        else
        if (accept == NodeFilter.FILTER_SKIP
            && newNode.hasChildNodes())
        {
            Node lChild = getLastChild(newNode);
            if (lChild == null) {
                return getPreviousSibling(newNode, node);
            }
            return lChild;
        }
        else
        //if (accept == NodeFilter.REJECT_NODE)
        {
            return getPreviousSibling(newNode, node);
        }


!!!4336258.java!!!	acceptNode(inout node : Node) : short
        /***
         7.1.2.4. Filters and whatToShow flags

         Iterator and TreeWalker apply whatToShow flags before applying Filters. If a node is rejected by the
         active whatToShow flags, a Filter will not be called to evaluate that node. When a node is rejected by
         the active whatToShow flags, children of that node will still be considered, and Filters may be called to
         evaluate them.
         ***/

        if (fNodeFilter == null) {
            if ( ( fWhatToShow & (1 << node.getNodeType()-1)) != 0) {
                return NodeFilter.FILTER_ACCEPT;
            } else {
                return NodeFilter.FILTER_SKIP;
            }
        } else {
            if ((fWhatToShow & (1 << node.getNodeType()-1)) != 0 ) {
                return fNodeFilter.acceptNode(node);
            } else {
                // What to show has failed. See above excerpt from spec.
                // Equivalent to FILTER_SKIP.
                return NodeFilter.FILTER_SKIP;
            }
        }
