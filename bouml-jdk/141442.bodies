class Vector
!!!529026.java!!!	Vector(in initialCapacity : int, in capacityIncrement : int)
        super();
        if (initialCapacity < 0)
            throw new IllegalArgumentException("Illegal Capacity: "+
                                               initialCapacity);
        this.elementData = new Object[initialCapacity];
        this.capacityIncrement = capacityIncrement;
!!!529154.java!!!	Vector(in initialCapacity : int)
        this(initialCapacity, 0);
!!!529282.java!!!	Vector()
        this(10);
!!!529410.java!!!	Vector(inout c : Collection)
        elementData = c.toArray();
        elementCount = elementData.length;
        // c.toArray might (incorrectly) not return Object[] (see 6260652)
        if (elementData.getClass() != Object[].class)
            elementData = Arrays.copyOf(elementData, elementCount, Object[].class);
!!!529538.java!!!	copyInto(inout anArray : Object [[]]) : void
        System.arraycopy(elementData, 0, anArray, 0, elementCount);
!!!529666.java!!!	trimToSize() : void
        modCount++;
        int oldCapacity = elementData.length;
        if (elementCount < oldCapacity) {
            elementData = Arrays.copyOf(elementData, elementCount);
        }
!!!529794.java!!!	ensureCapacity(in minCapacity : int) : void
        if (minCapacity > 0) {
            modCount++;
            ensureCapacityHelper(minCapacity);
        }
!!!529922.java!!!	ensureCapacityHelper(in minCapacity : int) : void
        // overflow-conscious code
        if (minCapacity - elementData.length > 0)
            grow(minCapacity);
!!!530050.java!!!	grow(in minCapacity : int) : void
        // overflow-conscious code
        int oldCapacity = elementData.length;
        int newCapacity = oldCapacity + ((capacityIncrement > 0) ?
                                         capacityIncrement : oldCapacity);
        if (newCapacity - minCapacity < 0)
            newCapacity = minCapacity;
        if (newCapacity - MAX_ARRAY_SIZE > 0)
            newCapacity = hugeCapacity(minCapacity);
        elementData = Arrays.copyOf(elementData, newCapacity);
!!!530178.java!!!	hugeCapacity(in minCapacity : int) : int
        if (minCapacity < 0) // overflow
            throw new OutOfMemoryError();
        return (minCapacity > MAX_ARRAY_SIZE) ?
            Integer.MAX_VALUE :
            MAX_ARRAY_SIZE;
!!!530306.java!!!	setSize(in newSize : int) : void
        modCount++;
        if (newSize > elementCount) {
            ensureCapacityHelper(newSize);
        } else {
            for (int i = newSize ; i < elementCount ; i++) {
                elementData[i] = null;
            }
        }
        elementCount = newSize;
!!!530434.java!!!	capacity() : int
        return elementData.length;
!!!530562.java!!!	size() : int
        return elementCount;
!!!530690.java!!!	isEmpty() : boolean
        return elementCount == 0;
!!!530818.java!!!	elements() : Enumeration
        return new Enumeration<E>() {
            int count = 0;

            public boolean hasMoreElements() {
                return count < elementCount;
            }

            public E nextElement() {
                synchronized (Vector.this) {
                    if (count < elementCount) {
                        return elementData(count++);
                    }
                }
                throw new NoSuchElementException("Vector Enumeration");
            }
        };
!!!530946.java!!!	contains(inout o : Object) : boolean
        return indexOf(o, 0) >= 0;
!!!531074.java!!!	indexOf(inout o : Object) : int
        return indexOf(o, 0);
!!!531202.java!!!	indexOf(inout o : Object, in index : int) : int
        if (o == null) {
            for (int i = index ; i < elementCount ; i++)
                if (elementData[i]==null)
                    return i;
        } else {
            for (int i = index ; i < elementCount ; i++)
                if (o.equals(elementData[i]))
                    return i;
        }
        return -1;
!!!531330.java!!!	lastIndexOf(inout o : Object) : int
        return lastIndexOf(o, elementCount-1);
!!!531458.java!!!	lastIndexOf(inout o : Object, in index : int) : int
        if (index >= elementCount)
            throw new IndexOutOfBoundsException(index + " >= "+ elementCount);

        if (o == null) {
            for (int i = index; i >= 0; i--)
                if (elementData[i]==null)
                    return i;
        } else {
            for (int i = index; i >= 0; i--)
                if (o.equals(elementData[i]))
                    return i;
        }
        return -1;
!!!531586.java!!!	elementAt(in index : int) : E
        if (index >= elementCount) {
            throw new ArrayIndexOutOfBoundsException(index + " >= " + elementCount);
        }

        return elementData(index);
!!!531714.java!!!	firstElement() : E
        if (elementCount == 0) {
            throw new NoSuchElementException();
        }
        return elementData(0);
!!!531842.java!!!	lastElement() : E
        if (elementCount == 0) {
            throw new NoSuchElementException();
        }
        return elementData(elementCount - 1);
!!!531970.java!!!	setElementAt(inout obj : E, in index : int) : void
        if (index >= elementCount) {
            throw new ArrayIndexOutOfBoundsException(index + " >= " +
                                                     elementCount);
        }
        elementData[index] = obj;
!!!532098.java!!!	removeElementAt(in index : int) : void
        modCount++;
        if (index >= elementCount) {
            throw new ArrayIndexOutOfBoundsException(index + " >= " +
                                                     elementCount);
        }
        else if (index < 0) {
            throw new ArrayIndexOutOfBoundsException(index);
        }
        int j = elementCount - index - 1;
        if (j > 0) {
            System.arraycopy(elementData, index + 1, elementData, index, j);
        }
        elementCount--;
        elementData[elementCount] = null; /* to let gc do its work */
!!!532226.java!!!	insertElementAt(inout obj : E, in index : int) : void
        modCount++;
        if (index > elementCount) {
            throw new ArrayIndexOutOfBoundsException(index
                                                     + " > " + elementCount);
        }
        ensureCapacityHelper(elementCount + 1);
        System.arraycopy(elementData, index, elementData, index + 1, elementCount - index);
        elementData[index] = obj;
        elementCount++;
!!!532354.java!!!	addElement(inout obj : E) : void
        modCount++;
        ensureCapacityHelper(elementCount + 1);
        elementData[elementCount++] = obj;
!!!532482.java!!!	removeElement(inout obj : Object) : boolean
        modCount++;
        int i = indexOf(obj);
        if (i >= 0) {
            removeElementAt(i);
            return true;
        }
        return false;
!!!532610.java!!!	removeAllElements() : void
        modCount++;
        // Let gc do its work
        for (int i = 0; i < elementCount; i++)
            elementData[i] = null;

        elementCount = 0;
!!!532738.java!!!	clone() : Object
        try {
            @SuppressWarnings("unchecked")
                Vector<E> v = (Vector<E>) super.clone();
            v.elementData = Arrays.copyOf(elementData, elementCount);
            v.modCount = 0;
            return v;
        } catch (CloneNotSupportedException e) {
            // this shouldn't happen, since we are Cloneable
            throw new InternalError(e);
        }
!!!532866.java!!!	toArray() : Object
        return Arrays.copyOf(elementData, elementCount);
!!!532994.java!!!	toArray(inout a : T [[]]) : T
        if (a.length < elementCount)
            return (T[]) Arrays.copyOf(elementData, elementCount, a.getClass());

        System.arraycopy(elementData, 0, a, 0, elementCount);

        if (a.length > elementCount)
            a[elementCount] = null;

        return a;
!!!533122.java!!!	elementData(in index : int) : E
        return (E) elementData[index];
!!!533250.java!!!	get(in index : int) : E
        if (index >= elementCount)
            throw new ArrayIndexOutOfBoundsException(index);

        return elementData(index);
!!!533378.java!!!	set(in index : int, inout element : E) : E
        if (index >= elementCount)
            throw new ArrayIndexOutOfBoundsException(index);

        E oldValue = elementData(index);
        elementData[index] = element;
        return oldValue;
!!!533506.java!!!	add(inout e : E) : boolean
        modCount++;
        ensureCapacityHelper(elementCount + 1);
        elementData[elementCount++] = e;
        return true;
!!!533634.java!!!	remove(inout o : Object) : boolean
        return removeElement(o);
!!!533762.java!!!	add(in index : int, inout element : E) : void
        insertElementAt(element, index);
!!!533890.java!!!	remove(in index : int) : E
        modCount++;
        if (index >= elementCount)
            throw new ArrayIndexOutOfBoundsException(index);
        E oldValue = elementData(index);

        int numMoved = elementCount - index - 1;
        if (numMoved > 0)
            System.arraycopy(elementData, index+1, elementData, index,
                             numMoved);
        elementData[--elementCount] = null; // Let gc do its work

        return oldValue;
!!!534018.java!!!	clear() : void
        removeAllElements();
!!!534146.java!!!	containsAll(inout c : Collection) : boolean
        return super.containsAll(c);
!!!534274.java!!!	addAll(inout c : Collection) : boolean
        modCount++;
        Object[] a = c.toArray();
        int numNew = a.length;
        ensureCapacityHelper(elementCount + numNew);
        System.arraycopy(a, 0, elementData, elementCount, numNew);
        elementCount += numNew;
        return numNew != 0;
!!!534402.java!!!	removeAll(inout c : Collection) : boolean
        return super.removeAll(c);
!!!534530.java!!!	retainAll(inout c : Collection) : boolean
        return super.retainAll(c);
!!!534658.java!!!	addAll(in index : int, inout c : Collection) : boolean
        modCount++;
        if (index < 0 || index > elementCount)
            throw new ArrayIndexOutOfBoundsException(index);

        Object[] a = c.toArray();
        int numNew = a.length;
        ensureCapacityHelper(elementCount + numNew);

        int numMoved = elementCount - index;
        if (numMoved > 0)
            System.arraycopy(elementData, index, elementData, index + numNew,
                             numMoved);

        System.arraycopy(a, 0, elementData, index, numNew);
        elementCount += numNew;
        return numNew != 0;
!!!534786.java!!!	equals(inout o : Object) : boolean
        return super.equals(o);
!!!534914.java!!!	hashCode() : int
        return super.hashCode();
!!!535042.java!!!	toString() : String
        return super.toString();
!!!535170.java!!!	subList(in fromIndex : int, in toIndex : int) : List
        return Collections.synchronizedList(super.subList(fromIndex, toIndex),
                                            this);
!!!535298.java!!!	removeRange(in fromIndex : int, in toIndex : int) : void
        modCount++;
        int numMoved = elementCount - toIndex;
        System.arraycopy(elementData, toIndex, elementData, fromIndex,
                         numMoved);

        // Let gc do its work
        int newElementCount = elementCount - (toIndex-fromIndex);
        while (elementCount != newElementCount)
            elementData[--elementCount] = null;
!!!535426.java!!!	writeObject(inout s : ObjectOutputStream) : void
        final java.io.ObjectOutputStream.PutField fields = s.putFields();
        final Object[] data;
        synchronized (this) {
            fields.put("capacityIncrement", capacityIncrement);
            fields.put("elementCount", elementCount);
            data = elementData.clone();
        }
        fields.put("elementData", data);
        s.writeFields();
!!!535554.java!!!	listIterator(in index : int) : ListIterator
        if (index < 0 || index > elementCount)
            throw new IndexOutOfBoundsException("Index: "+index);
        return new ListItr(index);
!!!535682.java!!!	listIterator() : ListIterator
        return new ListItr(0);
!!!535810.java!!!	iterator() : Iterator
        return new Itr();
