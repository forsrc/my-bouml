class Node
!!!9105666.java!!!	Node(inout key : K, inout value : Object, inout next : ConcurrentSkipListMap::Node)
            this.key = key;
            this.value = value;
            this.next = next;
!!!9105794.java!!!	Node(inout next : ConcurrentSkipListMap::Node)
            this.key = null;
            this.value = this;
            this.next = next;
!!!9105922.java!!!	casValue(inout cmp : Object, inout val : Object) : boolean
            return UNSAFE.compareAndSwapObject(this, valueOffset, cmp, val);
!!!9106050.java!!!	casNext(inout cmp : ConcurrentSkipListMap::Node, inout val : ConcurrentSkipListMap::Node) : boolean
            return UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);
!!!9106178.java!!!	isMarker() : boolean
            return value == this;
!!!9106306.java!!!	isBaseHeader() : boolean
            return value == BASE_HEADER;
!!!9106434.java!!!	appendMarker(inout f : ConcurrentSkipListMap::Node) : boolean
            return casNext(f, new Node<K,V>(f));
!!!9106562.java!!!	helpDelete(inout b : ConcurrentSkipListMap::Node, inout f : ConcurrentSkipListMap::Node) : void
            /*
             * Rechecking links and then doing only one of the
             * help-out stages per call tends to minimize CAS
             * interference among helping threads.
             */
            if (f == next && this == b.next) {
                if (f == null || f.value != f) // not already marked
                    casNext(f, new Node<K,V>(f));
                else
                    b.casNext(this, f.next);
            }
!!!9106690.java!!!	getValidValue() : V
            Object v = value;
            if (v == this || v == BASE_HEADER)
                return null;
            @SuppressWarnings("unchecked") V vv = (V)v;
            return vv;
!!!9106818.java!!!	createSnapshot() : AbstractMap::SimpleImmutableEntry
            Object v = value;
            if (v == null || v == this || v == BASE_HEADER)
                return null;
            @SuppressWarnings("unchecked") V vv = (V)v;
            return new AbstractMap.SimpleImmutableEntry<K,V>(key, vv);
