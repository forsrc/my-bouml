class MonthDay
!!!8377730.java!!!	now() : MonthDay
        return now(Clock.systemDefaultZone());
!!!8377858.java!!!	now(inout zone : ZoneId) : MonthDay
        return now(Clock.system(zone));
!!!8377986.java!!!	now(inout clock : Clock) : MonthDay
        final LocalDate now = LocalDate.now(clock);  // called once
        return MonthDay.of(now.getMonth(), now.getDayOfMonth());
!!!8378114.java!!!	of(inout month : Month, in dayOfMonth : int) : MonthDay
        Objects.requireNonNull(month, "month");
        DAY_OF_MONTH.checkValidValue(dayOfMonth);
        if (dayOfMonth > month.maxLength()) {
            throw new DateTimeException("Illegal value for DayOfMonth field, value " + dayOfMonth +
                    " is not valid for month " + month.name());
        }
        return new MonthDay(month.getValue(), dayOfMonth);
!!!8378242.java!!!	of(in month : int, in dayOfMonth : int) : MonthDay
        return of(Month.of(month), dayOfMonth);
!!!8378370.java!!!	from(inout temporal : TemporalAccessor) : MonthDay
        if (temporal instanceof MonthDay) {
            return (MonthDay) temporal;
        }
        try {
            if (IsoChronology.INSTANCE.equals(Chronology.from(temporal)) == false) {
                temporal = LocalDate.from(temporal);
            }
            return of(temporal.get(MONTH_OF_YEAR), temporal.get(DAY_OF_MONTH));
        } catch (DateTimeException ex) {
            throw new DateTimeException("Unable to obtain MonthDay from TemporalAccessor: " +
                    temporal + " of type " + temporal.getClass().getName(), ex);
        }
!!!8378498.java!!!	parse(inout text : CharSequence) : MonthDay
        return parse(text, PARSER);
!!!8378626.java!!!	parse(inout text : CharSequence, inout formatter : DateTimeFormatter) : MonthDay
        Objects.requireNonNull(formatter, "formatter");
        return formatter.parse(text, MonthDay::from);
!!!8378754.java!!!	MonthDay(in month : int, in dayOfMonth : int)
        this.month = month;
        this.day = dayOfMonth;
!!!8378882.java!!!	isSupported(inout field : TemporalField) : boolean
        if (field instanceof ChronoField) {
            return field == MONTH_OF_YEAR || field == DAY_OF_MONTH;
        }
        return field != null && field.isSupportedBy(this);
!!!8379010.java!!!	range(inout field : TemporalField) : ValueRange
        if (field == MONTH_OF_YEAR) {
            return field.range();
        } else if (field == DAY_OF_MONTH) {
            return ValueRange.of(1, getMonth().minLength(), getMonth().maxLength());
        }
        return TemporalAccessor.super.range(field);
!!!8379138.java!!!	get(inout field : TemporalField) : int
        return range(field).checkValidIntValue(getLong(field), field);
!!!8379266.java!!!	getLong(inout field : TemporalField) : long
        if (field instanceof ChronoField) {
            switch ((ChronoField) field) {
                // alignedDOW and alignedWOM not supported because they cannot be set in with()
                case DAY_OF_MONTH: return day;
                case MONTH_OF_YEAR: return month;
            }
            throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
        }
        return field.getFrom(this);
!!!8379394.java!!!	getMonthValue() : int
        return month;
!!!8379522.java!!!	getMonth() : Month
        return Month.of(month);
!!!8379650.java!!!	getDayOfMonth() : int
        return day;
!!!8379778.java!!!	isValidYear(in year : int) : boolean
        return (day == 29 && month == 2 && Year.isLeap(year) == false) == false;
!!!8379906.java!!!	withMonth(in month : int) : MonthDay
        return with(Month.of(month));
!!!8380034.java!!!	with(inout month : Month) : MonthDay
        Objects.requireNonNull(month, "month");
        if (month.getValue() == this.month) {
            return this;
        }
        int day = Math.min(this.day, month.maxLength());
        return new MonthDay(month.getValue(), day);
!!!8380162.java!!!	withDayOfMonth(in dayOfMonth : int) : MonthDay
        if (dayOfMonth == this.day) {
            return this;
        }
        return of(month, dayOfMonth);
!!!8380290.java!!!	query(inout query : TemporalQuery) : R
        if (query == TemporalQueries.chronology()) {
            return (R) IsoChronology.INSTANCE;
        }
        return TemporalAccessor.super.query(query);
!!!8380418.java!!!	adjustInto(inout temporal : Temporal) : Temporal
        if (Chronology.from(temporal).equals(IsoChronology.INSTANCE) == false) {
            throw new DateTimeException("Adjustment only supported on ISO date-time");
        }
        temporal = temporal.with(MONTH_OF_YEAR, month);
        return temporal.with(DAY_OF_MONTH, Math.min(temporal.range(DAY_OF_MONTH).getMaximum(), day));
!!!8380546.java!!!	format(inout formatter : DateTimeFormatter) : String
        Objects.requireNonNull(formatter, "formatter");
        return formatter.format(this);
!!!8380674.java!!!	atYear(in year : int) : LocalDate
        return LocalDate.of(year, month, isValidYear(year) ? day : 28);
!!!8380802.java!!!	compareTo(inout other : MonthDay) : int
        int cmp = (month - other.month);
        if (cmp == 0) {
            cmp = (day - other.day);
        }
        return cmp;
!!!8380930.java!!!	isAfter(inout other : MonthDay) : boolean
        return compareTo(other) > 0;
!!!8381058.java!!!	isBefore(inout other : MonthDay) : boolean
        return compareTo(other) < 0;
!!!8381186.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj instanceof MonthDay) {
            MonthDay other = (MonthDay) obj;
            return month == other.month && day == other.day;
        }
        return false;
!!!8381314.java!!!	hashCode() : int
        return (month << 6) + day;
!!!8381442.java!!!	toString() : String
        return new StringBuilder(10).append("--")
            .append(month < 10 ? "0" : "").append(month)
            .append(day < 10 ? "-0" : "-").append(day)
            .toString();
!!!8381570.java!!!	writeReplace() : Object
        return new Ser(Ser.MONTH_DAY_TYPE, this);
!!!8381698.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8381826.java!!!	writeExternal(inout out : DataOutput) : void
        out.writeByte(month);
        out.writeByte(day);
!!!8381954.java!!!	readExternal(inout in : DataInput) : MonthDay
        byte month = in.readByte();
        byte day = in.readByte();
        return MonthDay.of(month, day);
