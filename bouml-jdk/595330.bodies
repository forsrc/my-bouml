class AncestorPattern
!!!3699714.java!!!	AncestorPattern(inout right : RelativePathPattern)
        this(null, right);
!!!3699842.java!!!	AncestorPattern(inout left : Pattern, inout right : RelativePathPattern)
        _left = left;
        (_right = right).setParent(this);
        if (left != null) {
            left.setParent(this);
        }
!!!3699970.java!!!	getLoopHandle() : InstructionHandle
        return _loop;
!!!3700098.java!!!	setParser(inout parser : Parser) : void
        super.setParser(parser);
        if (_left != null) {
            _left.setParser(parser);
        }
        _right.setParser(parser);
!!!3700226.java!!!	isWildcard() : boolean
        //!!! can be wildcard
        return false;
!!!3700354.java!!!	getKernelPattern() : StepPattern
        return _right.getKernelPattern();
!!!3700482.java!!!	reduceKernelPattern() : void
        _right.reduceKernelPattern();
!!!3700610.java!!!	typeCheck(inout stable : SymbolTable) : Type
        if (_left != null) {
            _left.typeCheck(stable);
        }
        return _right.typeCheck(stable);
!!!3700738.java!!!	translate(inout classGen : ClassGenerator, inout methodGen : MethodGenerator) : void
        InstructionHandle parent;
        final ConstantPoolGen cpg = classGen.getConstantPool();
        final InstructionList il = methodGen.getInstructionList();

        /*
         * The scope of this local var must be the entire method since
         * a another pattern may decide to jump back into the loop
         */
        final LocalVariableGen local =
            methodGen.addLocalVariable2("app", Util.getJCRefType(NODE_SIG),
                                        il.getEnd());

        final com.sun.org.apache.bcel.internal.generic.Instruction loadLocal =
            new ILOAD(local.getIndex());
        final com.sun.org.apache.bcel.internal.generic.Instruction storeLocal =
            new ISTORE(local.getIndex());

        if (_right instanceof StepPattern) {
            il.append(DUP);
            il.append(storeLocal);
            _right.translate(classGen, methodGen);
            il.append(methodGen.loadDOM());
            il.append(loadLocal);
        }
        else {
            _right.translate(classGen, methodGen);

            if (_right instanceof AncestorPattern) {
                il.append(methodGen.loadDOM());
                il.append(SWAP);
            }
        }

        if (_left != null) {
            final int getParent = cpg.addInterfaceMethodref(DOM_INTF,
                                                            GET_PARENT,
                                                            GET_PARENT_SIG);
            parent = il.append(new INVOKEINTERFACE(getParent, 2));

            il.append(DUP);
            il.append(storeLocal);
            _falseList.add(il.append(new IFLT(null)));
            il.append(loadLocal);

            _left.translate(classGen, methodGen);

            final SyntaxTreeNode p = getParent();
            if (p == null || p instanceof Instruction ||
                p instanceof TopLevelElement)
            {
                // do nothing
            }
            else {
                il.append(loadLocal);
            }

            final BranchHandle exit = il.append(new GOTO(null));
            _loop = il.append(methodGen.loadDOM());
            il.append(loadLocal);
            local.setEnd(_loop);
            il.append(new GOTO(parent));
            exit.setTarget(il.append(NOP));
            _left.backPatchFalseList(_loop);

            _trueList.append(_left._trueList);
        }
        else {
            il.append(POP2);
        }

        /*
         * If _right is an ancestor pattern, backpatch this pattern's false
         * list to the loop that searches for more ancestors.
         */
        if (_right instanceof AncestorPattern) {
            final AncestorPattern ancestor = (AncestorPattern) _right;
            _falseList.backPatch(ancestor.getLoopHandle());    // clears list
        }

        _trueList.append(_right._trueList);
        _falseList.append(_right._falseList);
!!!3700866.java!!!	toString() : String
        return "AncestorPattern(" + _left + ", " + _right + ')';
