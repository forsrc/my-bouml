format 222
"zone" // jdk1.8::java::time::zone
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/time/zone/"
  java_package "java.time.zone"
  classview 176514 "zone"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1054338 "ZoneRules"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The rules defining how the zone offset varies for a single time-zone.
<p>
The rules model all the historic and future transitions for a time-zone.
{@link ZoneOffsetTransition} is used for known transitions, typically historic.
{@link ZoneOffsetTransitionRule} is used for future transitions that are based
on the result of an algorithm.
<p>
The rules are loaded via {@link ZoneRulesProvider} using a {@link ZoneId}.
The same rules may be shared internally between multiple zone IDs.
<p>
Serializing an instance of {@code ZoneRules} will store the entire set of rules.
It does not store the zone ID as it is not part of the state of this object.
<p>
A rule implementation may or may not store full information about historic
and future transitions, and the information stored is only as accurate as
that supplied to the implementation by the rules provider.
Applications should treat the data provided as representing the best information
available to the implementation of this rule.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3474050 // <realization>
	relation 3474050 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3474050 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1978370 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3044319355680032515L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      attribute 1978498 "LAST_CACHED_YEAR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The last year to have its transitions cached.

"
      end

      attribute 1978626 "standardTransitions"
	const_attribute private explicit_type "long"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The transitions between standard offsets (epoch seconds), sorted.

"
      end

      classrelation 3474178 // standardOffsets (<unidirectional association>)
	relation 3474178 --->
	  a role_name "standardOffsets" multiplicity "[]" const_relation private
	    comment "
The standard offsets.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3474178 // standardOffsets (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      attribute 1978754 "savingsInstantTransitions"
	const_attribute private explicit_type "long"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The transitions between instants (epoch seconds), sorted.

"
      end

      classrelation 3474306 // savingsLocalTransitions (<unidirectional association>)
	relation 3474306 --->
	  a role_name "savingsLocalTransitions" multiplicity "[]" const_relation private
	    comment "
The transitions between local date-times, sorted.
This is a paired array, where the first entry is the start of the transition
and the second entry is the end of the transition.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3474306 // savingsLocalTransitions (<unidirectional association>)
	  b parent class_ref 1043970 // LocalDateTime
      end

      classrelation 3474434 // wallOffsets (<unidirectional association>)
	relation 3474434 --->
	  a role_name "wallOffsets" multiplicity "[]" const_relation private
	    comment "
The wall offsets.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3474434 // wallOffsets (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      classrelation 3474562 // lastRules (<unidirectional association>)
	relation 3474562 --->
	  a role_name "lastRules" multiplicity "[]" const_relation private
	    comment "
The last rule.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3474562 // lastRules (<unidirectional association>)
	  b parent class_ref 1063682 // ZoneOffsetTransitionRule
      end

      classrelation 3474690 // lastRulesCache (<unidirectional association>)
	relation 3474690 --->
	  a role_name "lastRulesCache" init_value "
                new ConcurrentHashMap<Integer, ZoneOffsetTransition[]>()" const_relation private
	    comment "
The map of recent transitions.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer, ZoneOffsetTransition[]> ${name}${value};
"
	    classrelation_ref 3474690 // lastRulesCache (<unidirectional association>)
	  b parent class_ref 130690 // ConcurrentMap
      end

      attribute 1978882 "EMPTY_LONG_ARRAY"
	class_attribute const_attribute private explicit_type "long"
	multiplicity "[]"
	init_value " new long[0]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The zero-length long array.

"
      end

      classrelation 3474818 // EMPTY_LASTRULES (<unidirectional association>)
	relation 3474818 --->
	  a role_name "EMPTY_LASTRULES" multiplicity "[]" init_value "
        new ZoneOffsetTransitionRule[0]" class_relation const_relation private
	    comment "
The zero-length lastrules array.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3474818 // EMPTY_LASTRULES (<unidirectional association>)
	  b parent class_ref 1063682 // ZoneOffsetTransitionRule
      end

      classrelation 3474946 // EMPTY_LDT_ARRAY (<unidirectional association>)
	relation 3474946 --->
	  a role_name "EMPTY_LDT_ARRAY" multiplicity "[]" init_value " new LocalDateTime[0]" class_relation const_relation private
	    comment "
The zero-length ldt array.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3474946 // EMPTY_LDT_ARRAY (<unidirectional association>)
	  b parent class_ref 1043970 // LocalDateTime
      end

      operation 8579970 "of"
	class_operation public return_type class_ref 1054338 // ZoneRules
	nparams 5
	  param inout name "baseStandardOffset" type class_ref 1052162 // ZoneOffset
	  param inout name "baseWallOffset" type class_ref 1052162 // ZoneOffset
	  param inout name "standardOffsetTransitionList" type class_ref 175362 // List
	  param inout name "transitionList" type class_ref 175362 // List
	  param inout name "lastRules" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<ZoneOffsetTransition> ${p2}, ${t3}<ZoneOffsetTransition> ${p3}, ${t4}<ZoneOffsetTransitionRule> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of a ZoneRules.

@param baseStandardOffset  the standard offset to use before legal rules were set, not null
@param baseWallOffset  the wall offset to use before legal rules were set, not null
@param standardOffsetTransitionList  the list of changes to the standard offset, not null
@param transitionList  the list of transitions, not null
@param lastRules  the recurring last rules, size 16 or less, not null
@return the zone rules, not null
"
      end

      operation 8580098 "of"
	class_operation public return_type class_ref 1054338 // ZoneRules
	nparams 1
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of ZoneRules that has fixed zone rules.

@param offset  the offset this fixed zone rules is based on, not null
@return the zone rules, not null
@see #isFixedOffset()
"
      end

      operation 8580226 "ZoneRules"
	package explicit_return_type ""
	nparams 5
	  param inout name "baseStandardOffset" type class_ref 1052162 // ZoneOffset
	  param inout name "baseWallOffset" type class_ref 1052162 // ZoneOffset
	  param inout name "standardOffsetTransitionList" type class_ref 175362 // List
	  param inout name "transitionList" type class_ref 175362 // List
	  param inout name "lastRules" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<ZoneOffsetTransition> ${p2}, ${t3}<ZoneOffsetTransition> ${p3}, ${t4}<ZoneOffsetTransitionRule> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance.

@param baseStandardOffset  the standard offset to use before legal rules were set, not null
@param baseWallOffset  the wall offset to use before legal rules were set, not null
@param standardOffsetTransitionList  the list of changes to the standard offset, not null
@param transitionList  the list of transitions, not null
@param lastRules  the recurring last rules, size 16 or less, not null
"
      end

      operation 8580354 "ZoneRules"
	private explicit_return_type ""
	nparams 5
	  param inout name "standardTransitions" explicit_type "long"
	multiplicity "[]"
	  param inout name "standardOffsets" type class_ref 1052162 // ZoneOffset
	multiplicity "[]"
	  param inout name "savingsInstantTransitions" explicit_type "long"
	multiplicity "[]"
	  param inout name "wallOffsets" type class_ref 1052162 // ZoneOffset
	multiplicity "[]"
	  param inout name "lastRules" type class_ref 1063682 // ZoneOffsetTransitionRule
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param standardTransitions  the standard transitions, not null
@param standardOffsets  the standard offsets, not null
@param savingsInstantTransitions  the standard transitions, not null
@param wallOffsets  the wall offsets, not null
@param lastRules  the recurring last rules, size 15 or less, not null
"
      end

      operation 8580482 "ZoneRules"
	private explicit_return_type ""
	nparams 1
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of ZoneRules that has fixed zone rules.

@param offset  the offset this fixed zone rules is based on, not null
@return the zone rules, not null
@see #isFixedOffset()
"
      end

      operation 8580610 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8580738 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the object using a
<a href=\"../../../serialized-form.html#java.time.zone.Ser\">dedicated serialized form</a>.
@serialData
<pre style=\"font-size:1.0em\">{@code

  out.writeByte(1);  // identifies a ZoneRules
  out.writeInt(standardTransitions.length);
  for (long trans : standardTransitions) {
      Ser.writeEpochSec(trans, out);
  }
  for (ZoneOffset offset : standardOffsets) {
      Ser.writeOffset(offset, out);
  }
  out.writeInt(savingsInstantTransitions.length);
  for (long trans : savingsInstantTransitions) {
      Ser.writeEpochSec(trans, out);
  }
  for (ZoneOffset offset : wallOffsets) {
      Ser.writeOffset(offset, out);
  }
  out.writeByte(lastRules.length);
  for (ZoneOffsetTransitionRule rule : lastRules) {
      rule.writeExternal(out);
  }
}
</pre>
<p>
Epoch second values used for offsets are encoded in a variable
length form to make the common cases put fewer bytes in the stream.
<pre style=\"font-size:1.0em\">{@code

 static void writeEpochSec(long epochSec, DataOutput out) throws IOException {
    if (epochSec >= -4575744000L && epochSec < 10413792000L && epochSec % 900 == 0) {  // quarter hours between 1825 and 2300
        int store = (int) ((epochSec + 4575744000L) / 900);
        out.writeByte((store >>> 16) & 255);
        out.writeByte((store >>> 8) & 255);
        out.writeByte(store & 255);
     } else {
         out.writeByte(255);
         out.writeLong(epochSec);
     }
 }
}
</pre>
<p>
ZoneOffset values are encoded in a variable length form so the
common cases put fewer bytes in the stream.
<pre style=\"font-size:1.0em\">{@code

 static void writeOffset(ZoneOffset offset, DataOutput out) throws IOException {
    final int offsetSecs = offset.getTotalSeconds();
    int offsetByte = offsetSecs % 900 == 0 ? offsetSecs / 900 : 127;  // compress to -72 to +72
    out.writeByte(offsetByte);
    if (offsetByte == 127) {
        out.writeInt(offsetSecs);
    }
}
}
</pre>
@return the replacing object, not null
"
      end

      operation 8580866 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the state to the stream.

@param out  the output stream, not null
@throws IOException if an error occurs
"
      end

      operation 8580994 "readExternal"
	class_operation package return_type class_ref 1054338 // ZoneRules
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the state from the stream.

@param in  the input stream, not null
@return the created object, not null
@throws IOException if an error occurs
"
      end

      operation 8581122 "isFixedOffset"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks of the zone rules are fixed, such that the offset never varies.

@return true if the time-zone is fixed and the offset never changes
"
      end

      operation 8581250 "getOffset"
	public return_type class_ref 1052162 // ZoneOffset
	nparams 1
	  param inout name "instant" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the offset applicable at the specified instant in these rules.
<p>
The mapping from an instant to an offset is simple, there is only
one valid offset for each instant.
This method returns that offset.

@param instant  the instant to find the offset for, not null, but null
 may be ignored if the rules have a single offset for all instants
@return the offset, not null
"
      end

      operation 8581378 "getOffset"
	public return_type class_ref 1052162 // ZoneOffset
	nparams 1
	  param inout name "localDateTime" type class_ref 1043970 // LocalDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a suitable offset for the specified local date-time in these rules.
<p>
The mapping from a local date-time to an offset is not straightforward.
There are three cases:
<ul>
<li>Normal, with one valid offset. For the vast majority of the year, the normal
 case applies, where there is a single valid offset for the local date-time.</li>
<li>Gap, with zero valid offsets. This is when clocks jump forward typically
 due to the spring daylight savings change from \"winter\" to \"summer\".
 In a gap there are local date-time values with no valid offset.</li>
<li>Overlap, with two valid offsets. This is when clocks are set back typically
 due to the autumn daylight savings change from \"summer\" to \"winter\".
 In an overlap there are local date-time values with two valid offsets.</li>
</ul>
Thus, for any given local date-time there can be zero, one or two valid offsets.
This method returns the single offset in the Normal case, and in the Gap or Overlap
case it returns the offset before the transition.
<p>
Since, in the case of Gap and Overlap, the offset returned is a \"best\" value, rather
than the \"correct\" value, it should be treated with care. Applications that care
about the correct offset should use a combination of this method,
{@link #getValidOffsets(LocalDateTime)} and {@link #getTransition(LocalDateTime)}.

@param localDateTime  the local date-time to query, not null, but null
 may be ignored if the rules have a single offset for all instants
@return the best available offset for the local date-time, not null
"
      end

      operation 8581506 "getValidOffsets"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "localDateTime" type class_ref 1043970 // LocalDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ZoneOffset> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the offset applicable at the specified local date-time in these rules.
<p>
The mapping from a local date-time to an offset is not straightforward.
There are three cases:
<ul>
<li>Normal, with one valid offset. For the vast majority of the year, the normal
 case applies, where there is a single valid offset for the local date-time.</li>
<li>Gap, with zero valid offsets. This is when clocks jump forward typically
 due to the spring daylight savings change from \"winter\" to \"summer\".
 In a gap there are local date-time values with no valid offset.</li>
<li>Overlap, with two valid offsets. This is when clocks are set back typically
 due to the autumn daylight savings change from \"summer\" to \"winter\".
 In an overlap there are local date-time values with two valid offsets.</li>
</ul>
Thus, for any given local date-time there can be zero, one or two valid offsets.
This method returns that list of valid offsets, which is a list of size 0, 1 or 2.
In the case where there are two offsets, the earlier offset is returned at index 0
and the later offset at index 1.
<p>
There are various ways to handle the conversion from a {@code LocalDateTime}.
One technique, using this method, would be:
<pre>
 List&lt;ZoneOffset&gt; validOffsets = rules.getOffset(localDT);
 if (validOffsets.size() == 1) {
   // Normal case: only one valid offset
   zoneOffset = validOffsets.get(0);
 } else {
   // Gap or Overlap: determine what to do from transition (which will be non-null)
   ZoneOffsetTransition trans = rules.getTransition(localDT);
 }
</pre>
<p>
In theory, it is possible for there to be more than two valid offsets.
This would happen if clocks to be put back more than once in quick succession.
This has never happened in the history of time-zones and thus has no special handling.
However, if it were to happen, then the list would return more than 2 entries.

@param localDateTime  the local date-time to query for valid offsets, not null, but null
 may be ignored if the rules have a single offset for all instants
@return the list of valid offsets, may be immutable, not null
"
      end

      operation 8581634 "getTransition"
	public return_type class_ref 1063554 // ZoneOffsetTransition
	nparams 1
	  param inout name "localDateTime" type class_ref 1043970 // LocalDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the offset transition applicable at the specified local date-time in these rules.
<p>
The mapping from a local date-time to an offset is not straightforward.
There are three cases:
<ul>
<li>Normal, with one valid offset. For the vast majority of the year, the normal
 case applies, where there is a single valid offset for the local date-time.</li>
<li>Gap, with zero valid offsets. This is when clocks jump forward typically
 due to the spring daylight savings change from \"winter\" to \"summer\".
 In a gap there are local date-time values with no valid offset.</li>
<li>Overlap, with two valid offsets. This is when clocks are set back typically
 due to the autumn daylight savings change from \"summer\" to \"winter\".
 In an overlap there are local date-time values with two valid offsets.</li>
</ul>
A transition is used to model the cases of a Gap or Overlap.
The Normal case will return null.
<p>
There are various ways to handle the conversion from a {@code LocalDateTime}.
One technique, using this method, would be:
<pre>
 ZoneOffsetTransition trans = rules.getTransition(localDT);
 if (trans == null) {
   // Gap or Overlap: determine what to do from transition
 } else {
   // Normal case: only one valid offset
   zoneOffset = rule.getOffset(localDT);
 }
</pre>

@param localDateTime  the local date-time to query for offset transition, not null, but null
 may be ignored if the rules have a single offset for all instants
@return the offset transition, null if the local date-time is not in transition
"
      end

      operation 8581762 "getOffsetInfo"
	private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "dt" type class_ref 1043970 // LocalDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8581890 "findOffsetInfo"
	private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "dt" type class_ref 1043970 // LocalDateTime
	  param inout name "trans" type class_ref 1063554 // ZoneOffsetTransition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the offset info for a local date-time and transition.

@param dt  the date-time, not null
@param trans  the transition, not null
@return the offset info, not null
"
      end

      operation 8582018 "findTransitionArray"
	private return_type class_ref 1063554 // ZoneOffsetTransition
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the appropriate transition array for the given year.

@param year  the year, not null
@return the transition array, not null
"
      end

      operation 8582146 "getStandardOffset"
	public return_type class_ref 1052162 // ZoneOffset
	nparams 1
	  param inout name "instant" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the standard offset for the specified instant in this zone.
<p>
This provides access to historic information on how the standard offset
has changed over time.
The standard offset is the offset before any daylight saving time is applied.
This is typically the offset applicable during winter.

@param instant  the instant to find the offset information for, not null, but null
 may be ignored if the rules have a single offset for all instants
@return the standard offset, not null
"
      end

      operation 8582274 "getDaylightSavings"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param inout name "instant" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the amount of daylight savings in use for the specified instant in this zone.
<p>
This provides access to historic information on how the amount of daylight
savings has changed over time.
This is the difference between the standard offset and the actual offset.
Typically the amount is zero during winter and one hour during summer.
Time-zones are second-based, so the nanosecond part of the duration will be zero.
<p>
This default implementation calculates the duration from the
{@link #getOffset(java.time.Instant) actual} and
{@link #getStandardOffset(java.time.Instant) standard} offsets.

@param instant  the instant to find the daylight savings for, not null, but null
 may be ignored if the rules have a single offset for all instants
@return the difference between the standard and actual offset, not null
"
      end

      operation 8582402 "isDaylightSavings"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "instant" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the specified instant is in daylight savings.
<p>
This checks if the standard offset and the actual offset are the same
for the specified instant.
If they are not, it is assumed that daylight savings is in operation.
<p>
This default implementation compares the {@link #getOffset(java.time.Instant) actual}
and {@link #getStandardOffset(java.time.Instant) standard} offsets.

@param instant  the instant to find the offset information for, not null, but null
 may be ignored if the rules have a single offset for all instants
@return the standard offset, not null
"
      end

      operation 8582530 "isValidOffset"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "localDateTime" type class_ref 1043970 // LocalDateTime
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the offset date-time is valid for these rules.
<p>
To be valid, the local date-time must not be in a gap and the offset
must match one of the valid offsets.
<p>
This default implementation checks if {@link #getValidOffsets(java.time.LocalDateTime)}
contains the specified offset.

@param localDateTime  the date-time to check, not null, but null
 may be ignored if the rules have a single offset for all instants
@param offset  the offset to check, null returns false
@return true if the offset date-time is valid for these rules
"
      end

      operation 8582658 "nextTransition"
	public return_type class_ref 1063554 // ZoneOffsetTransition
	nparams 1
	  param inout name "instant" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the next transition after the specified instant.
<p>
This returns details of the next transition after the specified instant.
For example, if the instant represents a point where \"Summer\" daylight savings time
applies, then the method will return the transition to the next \"Winter\" time.

@param instant  the instant to get the next transition after, not null, but null
 may be ignored if the rules have a single offset for all instants
@return the next transition after the specified instant, null if this is after the last transition
"
      end

      operation 8582786 "previousTransition"
	public return_type class_ref 1063554 // ZoneOffsetTransition
	nparams 1
	  param inout name "instant" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the previous transition before the specified instant.
<p>
This returns details of the previous transition after the specified instant.
For example, if the instant represents a point where \"summer\" daylight saving time
applies, then the method will return the transition from the previous \"winter\" time.

@param instant  the instant to get the previous transition after, not null, but null
 may be ignored if the rules have a single offset for all instants
@return the previous transition after the specified instant, null if this is before the first transition
"
      end

      operation 8582914 "findYear"
	private explicit_return_type "int"
	nparams 2
	  param in name "epochSecond" explicit_type "long"
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8583042 "getTransitions"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ZoneOffsetTransition> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the complete list of fully defined transitions.
<p>
The complete set of transitions for this rules instance is defined by this method
and {@link #getTransitionRules()}. This method returns those transitions that have
been fully defined. These are typically historical, but may be in the future.
<p>
The list will be empty for fixed offset rules and for any time-zone where there has
only ever been a single offset. The list will also be empty if the transition rules are unknown.

@return an immutable list of fully defined transitions, not null
"
      end

      operation 8583170 "getTransitionRules"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ZoneOffsetTransitionRule> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the list of transition rules for years beyond those defined in the transition list.
<p>
The complete set of transitions for this rules instance is defined by this method
and {@link #getTransitions()}. This method returns instances of {@link ZoneOffsetTransitionRule}
that define an algorithm for when transitions will occur.
<p>
For any given {@code ZoneRules}, this list contains the transition rules for years
beyond those years that have been fully defined. These rules typically refer to future
daylight saving time rule changes.
<p>
If the zone defines daylight savings into the future, then the list will normally
be of size two and hold information about entering and exiting daylight savings.
If the zone does not have daylight savings, or information about future changes
is uncertain, then the list will be empty.
<p>
The list will be empty for fixed offset rules and for any time-zone where there is no
daylight saving time. The list will also be empty if the transition rules are unknown.

@return an immutable list of transition rules, not null
"
      end

      operation 8583298 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "otherRules" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if this set of rules equals another.
<p>
Two rule sets are equal if they will always result in the same output
for any given input instant or local date-time.
Rules from two different groups may return false even if they are in fact the same.
<p>
This definition should result in implementations comparing their entire state.

@param otherRules  the other rules, null returns false
@return true if this rules is the same as that specified
"
      end

      operation 8583426 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a suitable hash code given the definition of {@code #equals}.

@return the hash code
"
      end

      operation 8583554 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string describing this object.

@return a string for debugging, not null
"
      end
    end

    class 1063042 "Ser"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The shared serialization delegate for this package.

@implNote
This class is mutable and should be created once per serialization.

@serial include
@since 1.8
"
      classrelation 3471362 // <realization>
	relation 3471362 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3471362 // <realization>
	  b parent class_ref 172162 // Externalizable
      end

      attribute 1976834 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8885321777449118786L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      attribute 1976962 "ZRULES"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Type for ZoneRules. 
"
      end

      attribute 1977090 "ZOT"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Type for ZoneOffsetTransition. 
"
      end

      attribute 1977218 "ZOTRULE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Type for ZoneOffsetTransition. 
"
      end

      attribute 1977346 "type"
	private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The type being serialized. 
"
      end

      classrelation 3471490 // object (<unidirectional association>)
	relation 3471490 --->
	  a role_name "object" private
	    comment " The object being serialized. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3471490 // object (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 8570498 "Ser"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for deserialization.
"
      end

      operation 8570626 "Ser"
	package explicit_return_type ""
	nparams 2
	  param in name "type" explicit_type "byte"
	  param inout name "object" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance for serialization.

@param type  the type
@param object  the object
"
      end

      operation 8570754 "writeExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174082 // ObjectOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Implements the {@code Externalizable} interface to write the object.
@serialData
Each serializable class is mapped to a type that is the first byte
in the stream.  Refer to each class {@code writeReplace}
serialized form for the value of the type and sequence of values for the type.

<ul>
<li><a href=\"../../../serialized-form.html#java.time.zone.ZoneRules\">ZoneRules.writeReplace</a>
<li><a href=\"../../../serialized-form.html#java.time.zone.ZoneOffsetTransition\">ZoneOffsetTransition.writeReplace</a>
<li><a href=\"../../../serialized-form.html#java.time.zone.ZoneOffsetTransitionRule\">ZoneOffsetTransitionRule.writeReplace</a>
</ul>

@param out  the data stream to write to, not null
"
      end

      operation 8570882 "write"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 129538 // Object
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8571010 "writeInternal"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "type" explicit_type "byte"
	  param inout name "object" type class_ref 129538 // Object
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8571138 "readExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Implements the {@code Externalizable} interface to read the object.
@serialData
The streamed type and parameters defined by the type's {@code writeReplace}
method are read and passed to the corresponding static factory for the type
to create a new instance.  That instance is returned as the de-serialized
{@code Ser} object.

<ul>
<li><a href=\"../../../serialized-form.html#java.time.zone.ZoneRules\">ZoneRules</a>
- {@code ZoneRules.of(standardTransitions, standardOffsets, savingsInstantTransitions, wallOffsets, lastRules);}
<li><a href=\"../../../serialized-form.html#java.time.zone.ZoneOffsetTransition\">ZoneOffsetTransition</a>
- {@code ZoneOffsetTransition of(LocalDateTime.ofEpochSecond(epochSecond), offsetBefore, offsetAfter);}
<li><a href=\"../../../serialized-form.html#java.time.zone.ZoneOffsetTransitionRule\">ZoneOffsetTransitionRule</a>
- {@code ZoneOffsetTransitionRule.of(month, dom, dow, time, timeEndOfDay, timeDefinition, standardOffset, offsetBefore, offsetAfter);}
</ul>
@param in  the data to read, not null
"
      end

      operation 8571266 "read"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8571394 "readInternal"
	class_operation private return_type class_ref 129538 // Object
	nparams 2
	  param in name "type" explicit_type "byte"
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8571522 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the object that will replace this one.

@return the read object, should never be null
"
      end

      operation 8571650 "writeOffset"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the state to the stream.

@param offset  the offset, not null
@param out  the output stream, not null
@throws IOException if an error occurs
"
      end

      operation 8571778 "readOffset"
	class_operation package return_type class_ref 1052162 // ZoneOffset
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the state from the stream.

@param in  the input stream, not null
@return the created object, not null
@throws IOException if an error occurs
"
      end

      operation 8571906 "writeEpochSec"
	class_operation package explicit_return_type "void"
	nparams 2
	  param in name "epochSec" explicit_type "long"
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the state to the stream.

@param epochSec  the epoch seconds, not null
@param out  the output stream, not null
@throws IOException if an error occurs
"
      end

      operation 8572034 "readEpochSec"
	class_operation package explicit_return_type "long"
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the state from the stream.

@param in  the input stream, not null
@return the epoch seconds, not null
@throws IOException if an error occurs
"
      end
    end

    class 1063170 "TzdbZoneRulesProvider"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Loads time-zone rules for 'TZDB'.

@since 1.8
"
      classrelation 3471874 // <generalisation>
	relation 3471874 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3471874 // <generalisation>
	  b parent class_ref 1063298 // ZoneRulesProvider
      end

      classrelation 3472002 // regionIds (<unidirectional association>)
	relation 3472002 --->
	  a role_name "regionIds" private
	    comment "
All the regions that are available.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3472002 // regionIds (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3472130 // versionId (<unidirectional association>)
	relation 3472130 --->
	  a role_name "versionId" private
	    comment "
Version Id of this tzdb rules

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3472130 // versionId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3472258 // regionToRules (<unidirectional association>)
	relation 3472258 --->
	  a role_name "regionToRules" init_value " new ConcurrentHashMap<>()" const_relation private
	    comment "
Region to rules mapping

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Object> ${name}${value};
"
	    classrelation_ref 3472258 // regionToRules (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 8573698 "TzdbZoneRulesProvider"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance.
Created by the {@code ServiceLoader}.

@throws ZoneRulesException if unable to load
"
      end

      operation 8573826 "provideZoneIds"
	protected return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8573954 "provideRules"
	protected return_type class_ref 1054338 // ZoneRules
	nparams 2
	  param inout name "zoneId" type class_ref 128130 // String
	  param inout name "forCaching" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8574082 "provideVersions"
	protected return_type class_ref 1063426 // NavigableMap
	nparams 1
	  param inout name "zoneId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, ZoneRules> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8574210 "load"
	private explicit_return_type "void"
	nparams 1
	  param inout name "dis" type class_ref 172930 // DataInputStream
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the rules from a DateInputStream, often in a jar file.

@param dis  the DateInputStream to load, not null
@throws Exception if an error occurs
"
      end

      operation 8574338 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 1063298 "ZoneRulesProvider"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provider of time-zone rules to the system.
<p>
This class manages the configuration of time-zone rules.
The static methods provide the public API that can be used to manage the providers.
The abstract methods provide the SPI that allows rules to be provided.
<p>
ZoneRulesProvider may be installed in an instance of the Java Platform as
extension classes, that is, jar files placed into any of the usual extension
directories. Installed providers are loaded using the service-provider loading
facility defined by the {@link ServiceLoader} class. A ZoneRulesProvider
identifies itself with a provider configuration file named
{@code java.time.zone.ZoneRulesProvider} in the resource directory
{@code META-INF/services}. The file should contain a line that specifies the
fully qualified concrete zonerules-provider class name.
Providers may also be made available by adding them to the class path or by
registering themselves via {@link #registerProvider} method.
<p>
The Java virtual machine has a default provider that provides zone rules
for the time-zones defined by IANA Time Zone Database (TZDB). If the system
property {@code java.time.zone.DefaultZoneRulesProvider} is defined then
it is taken to be the fully-qualified name of a concrete ZoneRulesProvider
class to be loaded as the default provider, using the system class loader.
If this system property is not defined, a system-default provider will be
loaded to serve as the default provider.
<p>
Rules are looked up primarily by zone ID, as used by {@link ZoneId}.
Only zone region IDs may be used, zone offset IDs are not used here.
<p>
Time-zone rules are political, thus the data can change at any time.
Each provider will provide the latest rules for each zone ID, but they
may also provide the history of how the rules changed.

@implSpec
This interface is a service provider that can be called by multiple threads.
Implementations must be immutable and thread-safe.
<p>
Providers must ensure that once a rule has been seen by the application, the
rule must continue to be available.
<p>
 Providers are encouraged to implement a meaningful {@code toString} method.
<p>
Many systems would like to update time-zone rules dynamically without stopping the JVM.
When examined in detail, this is a complex problem.
Providers may choose to handle dynamic updates, however the default provider does not.

@since 1.8
"
      classrelation 3471618 // PROVIDERS (<unidirectional association>)
	relation 3471618 --->
	  a role_name "PROVIDERS" init_value " new CopyOnWriteArrayList<>()" class_relation const_relation private
	    comment "
The set of loaded providers.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ZoneRulesProvider> ${name}${value};
"
	    classrelation_ref 3471618 // PROVIDERS (<unidirectional association>)
	  b parent class_ref 589058 // CopyOnWriteArrayList
      end

      classrelation 3471746 // ZONES (<unidirectional association>)
	relation 3471746 --->
	  a role_name "ZONES" init_value " new ConcurrentHashMap<>(512, 0.75f, 2)" class_relation const_relation private
	    comment "
The lookup from zone ID to provider.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, ZoneRulesProvider> ${name}${value};
"
	    classrelation_ref 3471746 // ZONES (<unidirectional association>)
	  b parent class_ref 130690 // ConcurrentMap
      end

      extra_member 171394 "initialization"
	
	cpp "" ""
	java "  static {
        // if the property java.time.zone.DefaultZoneRulesProvider is
        // set then its value is the class name of the default provider
        final List<ZoneRulesProvider> loaded = new ArrayList<>();
        AccessController.doPrivileged(new PrivilegedAction<Object>() {
            public Object run() {
                String prop = System.getProperty(\"java.time.zone.DefaultZoneRulesProvider\");
                if (prop != null) {
                    try {
                        Class<?> c = Class.forName(prop, true, ClassLoader.getSystemClassLoader());
                        ZoneRulesProvider provider = ZoneRulesProvider.class.cast(c.newInstance());
                        registerProvider(provider);
                        loaded.add(provider);
                    } catch (Exception x) {
                        throw new Error(x);
                    }
                } else {
                    registerProvider(new TzdbZoneRulesProvider());
                }
                return null;
            }
        });

        ServiceLoader<ZoneRulesProvider> sl = ServiceLoader.load(ZoneRulesProvider.class, ClassLoader.getSystemClassLoader());
        Iterator<ZoneRulesProvider> it = sl.iterator();
        while (it.hasNext()) {
            ZoneRulesProvider provider;
            try {
                provider = it.next();
            } catch (ServiceConfigurationError ex) {
                if (ex.getCause() instanceof SecurityException) {
                    continue;  // ignore the security exception, try the next provider
                }
                throw ex;
            }
            boolean found = false;
            for (ZoneRulesProvider p : loaded) {
                if (p.getClass() == provider.getClass()) {
                    found = true;
                }
            }
            if (!found) {
                registerProvider0(provider);
                loaded.add(provider);
            }
        }
        // CopyOnWriteList could be slow if lots of providers and each added individually
        PROVIDERS.addAll(loaded);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 8572162 "getAvailableZoneIds"
	class_operation public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-------------------------------------------------------------------------

Gets the set of available zone IDs.
<p>
These IDs are the string form of a {@link ZoneId}.

@return a modifiable copy of the set of zone IDs, not null
"
      end

      operation 8572290 "getRules"
	class_operation public return_type class_ref 1054338 // ZoneRules
	nparams 2
	  param inout name "zoneId" type class_ref 128130 // String
	  param inout name "forCaching" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the rules for the zone ID.
<p>
This returns the latest available rules for the zone ID.
<p>
This method relies on time-zone data provider files that are configured.
These are loaded using a {@code ServiceLoader}.
<p>
The caching flag is designed to allow provider implementations to
prevent the rules being cached in {@code ZoneId}.
Under normal circumstances, the caching of zone rules is highly desirable
as it will provide greater performance. However, there is a use case where
the caching would not be desirable, see {@link #provideRules}.

@param zoneId the zone ID as defined by {@code ZoneId}, not null
@param forCaching whether the rules are being queried for caching,
true if the returned rules will be cached by {@code ZoneId},
false if they will be returned to the user without being cached in {@code ZoneId}
@return the rules, null if {@code forCaching} is true and this
is a dynamic provider that wants to prevent caching in {@code ZoneId},
otherwise not null
@throws ZoneRulesException if rules cannot be obtained for the zone ID
"
      end

      operation 8572418 "getVersions"
	class_operation public return_type class_ref 1063426 // NavigableMap
	nparams 1
	  param inout name "zoneId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, ZoneRules> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the history of rules for the zone ID.
<p>
Time-zones are defined by governments and change frequently.
This method allows applications to find the history of changes to the
rules for a single zone ID. The map is keyed by a string, which is the
version string associated with the rules.
<p>
The exact meaning and format of the version is provider specific.
The version must follow lexicographical order, thus the returned map will
be order from the oldest known rules to the newest available rules.
The default 'TZDB' group uses version numbering consisting of the year
followed by a letter, such as '2009e' or '2012f'.
<p>
Implementations must provide a result for each valid zone ID, however
they do not have to provide a history of rules.
Thus the map will always contain one element, and will only contain more
than one element if historical rule information is available.

@param zoneId  the zone ID as defined by {@code ZoneId}, not null
@return a modifiable copy of the history of the rules for the ID, sorted
 from oldest to newest, not null
@throws ZoneRulesException if history cannot be obtained for the zone ID
"
      end

      operation 8572546 "getProvider"
	class_operation private return_type class_ref 1063298 // ZoneRulesProvider
	nparams 1
	  param inout name "zoneId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the provider for the zone ID.

@param zoneId  the zone ID as defined by {@code ZoneId}, not null
@return the provider, not null
@throws ZoneRulesException if the zone ID is unknown
"
      end

      operation 8572674 "registerProvider"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "provider" type class_ref 1063298 // ZoneRulesProvider
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-------------------------------------------------------------------------

Registers a zone rules provider.
<p>
This adds a new provider to those currently available.
A provider supplies rules for one or more zone IDs.
A provider cannot be registered if it supplies a zone ID that has already been
registered. See the notes on time-zone IDs in {@link ZoneId}, especially
the section on using the concept of a \"group\" to make IDs unique.
<p>
To ensure the integrity of time-zones already created, there is no way
to deregister providers.

@param provider  the provider to register, not null
@throws ZoneRulesException if a zone ID is already registered
"
      end

      operation 8572802 "registerProvider0"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "provider" type class_ref 1063298 // ZoneRulesProvider
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the provider.

@param provider  the provider to register, not null
@throws ZoneRulesException if unable to complete the registration
"
      end

      operation 8572930 "refresh"
	class_operation public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Refreshes the rules from the underlying data provider.
<p>
This method allows an application to request that the providers check
for any updates to the provided rules.
After calling this method, the offset stored in any {@link ZonedDateTime}
may be invalid for the zone ID.
<p>
Dynamic update of rules is a complex problem and most applications
should not use this method or dynamic rules.
To achieve dynamic rules, a provider implementation will have to be written
as per the specification of this class.
In addition, instances of {@code ZoneRules} must not be cached in the
application as they will become stale. However, the boolean flag on
{@link #provideRules(String, boolean)} allows provider implementations
to control the caching of {@code ZoneId}, potentially ensuring that
all objects in the system see the new rules.
Note that there is likely to be a cost in performance of a dynamic rules
provider. Note also that no dynamic rules provider is in this specification.

@return true if the rules were updated
@throws ZoneRulesException if an error occurs during the refresh
"
      end

      operation 8573058 "ZoneRulesProvider"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.
"
      end

      operation 8573186 "provideZoneIds"
	abstract protected return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

SPI method to get the available zone IDs.
<p>
This obtains the IDs that this {@code ZoneRulesProvider} provides.
A provider should provide data for at least one zone ID.
<p>
The returned zone IDs remain available and valid for the lifetime of the application.
A dynamic provider may increase the set of IDs as more data becomes available.

@return the set of zone IDs being provided, not null
@throws ZoneRulesException if a problem occurs while providing the IDs
"
      end

      operation 8573314 "provideRules"
	abstract protected return_type class_ref 1054338 // ZoneRules
	nparams 2
	  param inout name "zoneId" type class_ref 128130 // String
	  param inout name "forCaching" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SPI method to get the rules for the zone ID.
<p>
This loads the rules for the specified zone ID.
The provider implementation must validate that the zone ID is valid and
available, throwing a {@code ZoneRulesException} if it is not.
The result of the method in the valid case depends on the caching flag.
<p>
If the provider implementation is not dynamic, then the result of the
method must be the non-null set of rules selected by the ID.
<p>
If the provider implementation is dynamic, then the flag gives the option
of preventing the returned rules from being cached in {@link ZoneId}.
When the flag is true, the provider is permitted to return null, where
null will prevent the rules from being cached in {@code ZoneId}.
When the flag is false, the provider must return non-null rules.

@param zoneId the zone ID as defined by {@code ZoneId}, not null
@param forCaching whether the rules are being queried for caching,
true if the returned rules will be cached by {@code ZoneId},
false if they will be returned to the user without being cached in {@code ZoneId}
@return the rules, null if {@code forCaching} is true and this
is a dynamic provider that wants to prevent caching in {@code ZoneId},
otherwise not null
@throws ZoneRulesException if rules cannot be obtained for the zone ID
"
      end

      operation 8573442 "provideVersions"
	abstract protected return_type class_ref 1063426 // NavigableMap
	nparams 1
	  param inout name "zoneId" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, ZoneRules> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SPI method to get the history of rules for the zone ID.
<p>
This returns a map of historical rules keyed by a version string.
The exact meaning and format of the version is provider specific.
The version must follow lexicographical order, thus the returned map will
be order from the oldest known rules to the newest available rules.
The default 'TZDB' group uses version numbering consisting of the year
followed by a letter, such as '2009e' or '2012f'.
<p>
Implementations must provide a result for each valid zone ID, however
they do not have to provide a history of rules.
Thus the map will contain at least one element, and will only contain
more than one element if historical rule information is available.
<p>
The returned versions remain available and valid for the lifetime of the application.
A dynamic provider may increase the set of versions as more data becomes available.

@param zoneId  the zone ID as defined by {@code ZoneId}, not null
@return a modifiable copy of the history of the rules for the ID, sorted
 from oldest to newest, not null
@throws ZoneRulesException if history cannot be obtained for the zone ID
"
      end

      operation 8573570 "provideRefresh"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SPI method to refresh the rules from the underlying data provider.
<p>
This method provides the opportunity for a provider to dynamically
recheck the underlying data provider to find the latest rules.
This could be used to load new rules without stopping the JVM.
Dynamic behavior is entirely optional and most providers do not support it.
<p>
This implementation returns false.

@return true if the rules were updated
@throws ZoneRulesException if an error occurs during the refresh
"
      end
    end

    class 1063554 "ZoneOffsetTransition"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A transition between two offsets caused by a discontinuity in the local time-line.
<p>
A transition between two offsets is normally the result of a daylight savings cutover.
The discontinuity is normally a gap in spring and an overlap in autumn.
{@code ZoneOffsetTransition} models the transition between the two offsets.
<p>
Gaps occur where there are local date-times that simply do not exist.
An example would be when the offset changes from {@code +03:00} to {@code +04:00}.
This might be described as 'the clocks will move forward one hour tonight at 1am'.
<p>
Overlaps occur where there are local date-times that exist twice.
An example would be when the offset changes from {@code +04:00} to {@code +03:00}.
This might be described as 'the clocks will move back one hour tonight at 2am'.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3472386 // <realization>
	relation 3472386 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3472386 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3472514 // <realization>
	relation 3472514 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3472514 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1977474 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6946044323557704546L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3472642 // transition (<unidirectional association>)
	relation 3472642 --->
	  a role_name "transition" const_relation private
	    comment "
The local transition date-time at the transition.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3472642 // transition (<unidirectional association>)
	  b parent class_ref 1043970 // LocalDateTime
      end

      classrelation 3472770 // offsetBefore (<unidirectional association>)
	relation 3472770 --->
	  a role_name "offsetBefore" const_relation private
	    comment "
The offset before transition.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3472770 // offsetBefore (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      classrelation 3472898 // offsetAfter (<unidirectional association>)
	relation 3472898 --->
	  a role_name "offsetAfter" const_relation private
	    comment "
The offset after transition.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3472898 // offsetAfter (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      operation 8574466 "of"
	class_operation public return_type class_ref 1063554 // ZoneOffsetTransition
	nparams 3
	  param inout name "transition" type class_ref 1043970 // LocalDateTime
	  param inout name "offsetBefore" type class_ref 1052162 // ZoneOffset
	  param inout name "offsetAfter" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance defining a transition between two offsets.
<p>
Applications should normally obtain an instance from {@link ZoneRules}.
This factory is only intended for use when creating {@link ZoneRules}.

@param transition  the transition date-time at the transition, which never
 actually occurs, expressed local to the before offset, not null
@param offsetBefore  the offset before the transition, not null
@param offsetAfter  the offset at and after the transition, not null
@return the transition, not null
@throws IllegalArgumentException if {@code offsetBefore} and {@code offsetAfter}
        are equal, or {@code transition.getNano()} returns non-zero value
"
      end

      operation 8574594 "ZoneOffsetTransition"
	package explicit_return_type ""
	nparams 3
	  param inout name "transition" type class_ref 1043970 // LocalDateTime
	  param inout name "offsetBefore" type class_ref 1052162 // ZoneOffset
	  param inout name "offsetAfter" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance defining a transition between two offsets.

@param transition  the transition date-time with the offset before the transition, not null
@param offsetBefore  the offset before the transition, not null
@param offsetAfter  the offset at and after the transition, not null
"
      end

      operation 8574722 "ZoneOffsetTransition"
	package explicit_return_type ""
	nparams 3
	  param in name "epochSecond" explicit_type "long"
	  param inout name "offsetBefore" type class_ref 1052162 // ZoneOffset
	  param inout name "offsetAfter" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance from epoch-second and offsets.

@param epochSecond  the transition epoch-second
@param offsetBefore  the offset before the transition, not null
@param offsetAfter  the offset at and after the transition, not null
"
      end

      operation 8574850 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8574978 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the object using a
<a href=\"../../../serialized-form.html#java.time.zone.Ser\">dedicated serialized form</a>.
@serialData
Refer to the serialized form of
<a href=\"../../../serialized-form.html#java.time.zone.ZoneRules\">ZoneRules.writeReplace</a>
for the encoding of epoch seconds and offsets.
<pre style=\"font-size:1.0em\">{@code

  out.writeByte(2);                // identifies a ZoneOffsetTransition
  out.writeEpochSec(toEpochSecond);
  out.writeOffset(offsetBefore);
  out.writeOffset(offsetAfter);
}
</pre>
@return the replacing object, not null
"
      end

      operation 8575106 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the state to the stream.

@param out  the output stream, not null
@throws IOException if an error occurs
"
      end

      operation 8575234 "readExternal"
	class_operation package return_type class_ref 1063554 // ZoneOffsetTransition
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the state from the stream.

@param in  the input stream, not null
@return the created object, not null
@throws IOException if an error occurs
"
      end

      operation 8575362 "getInstant"
	public return_type class_ref 1003778 // Instant
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the transition instant.
<p>
This is the instant of the discontinuity, which is defined as the first
instant that the 'after' offset applies.
<p>
The methods {@link #getInstant()}, {@link #getDateTimeBefore()} and {@link #getDateTimeAfter()}
all represent the same instant.

@return the transition instant, not null
"
      end

      operation 8575490 "toEpochSecond"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the transition instant as an epoch second.

@return the transition epoch second
"
      end

      operation 8575618 "getDateTimeBefore"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-------------------------------------------------------------------------

Gets the local transition date-time, as would be expressed with the 'before' offset.
<p>
This is the date-time where the discontinuity begins expressed with the 'before' offset.
At this instant, the 'after' offset is actually used, therefore the combination of this
date-time and the 'before' offset will never occur.
<p>
The combination of the 'before' date-time and offset represents the same instant
as the 'after' date-time and offset.

@return the transition date-time expressed with the before offset, not null
"
      end

      operation 8575746 "getDateTimeAfter"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the local transition date-time, as would be expressed with the 'after' offset.
<p>
This is the first date-time after the discontinuity, when the new offset applies.
<p>
The combination of the 'before' date-time and offset represents the same instant
as the 'after' date-time and offset.

@return the transition date-time expressed with the after offset, not null
"
      end

      operation 8575874 "getOffsetBefore"
	public return_type class_ref 1052162 // ZoneOffset
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the offset before the transition.
<p>
This is the offset in use before the instant of the transition.

@return the offset before the transition, not null
"
      end

      operation 8576002 "getOffsetAfter"
	public return_type class_ref 1052162 // ZoneOffset
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the offset after the transition.
<p>
This is the offset in use on and after the instant of the transition.

@return the offset after the transition, not null
"
      end

      operation 8576130 "getDuration"
	public return_type class_ref 1049858 // Duration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the duration of the transition.
<p>
In most cases, the transition duration is one hour, however this is not always the case.
The duration will be positive for a gap and negative for an overlap.
Time-zones are second-based, so the nanosecond part of the duration will be zero.

@return the duration of the transition, positive for gaps, negative for overlaps
"
      end

      operation 8576258 "getDurationSeconds"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the duration of the transition in seconds.

@return the duration in seconds
"
      end

      operation 8576386 "isGap"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does this transition represent a gap in the local time-line.
<p>
Gaps occur where there are local date-times that simply do not exist.
An example would be when the offset changes from {@code +01:00} to {@code +02:00}.
This might be described as 'the clocks will move forward one hour tonight at 1am'.

@return true if this transition is a gap, false if it is an overlap
"
      end

      operation 8576514 "isOverlap"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does this transition represent an overlap in the local time-line.
<p>
Overlaps occur where there are local date-times that exist twice.
An example would be when the offset changes from {@code +02:00} to {@code +01:00}.
This might be described as 'the clocks will move back one hour tonight at 2am'.

@return true if this transition is an overlap, false if it is a gap
"
      end

      operation 8576642 "isValidOffset"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the specified offset is valid during this transition.
<p>
This checks to see if the given offset will be valid at some point in the transition.
A gap will always return false.
An overlap will return true if the offset is either the before or after offset.

@param offset  the offset to check, null returns false
@return true if the offset is valid during the transition
"
      end

      operation 8576770 "getValidOffsets"
	package return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ZoneOffset> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the valid offsets during this transition.
<p>
A gap will return an empty list, while an overlap will return both offsets.

@return the list of valid offsets
"
      end

      operation 8576898 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "transition" type class_ref 1063554 // ZoneOffsetTransition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this transition to another based on the transition instant.
<p>
This compares the instants of each transition.
The offsets are ignored, making this order inconsistent with equals.

@param transition  the transition to compare to, not null
@return the comparator value, negative if less, positive if greater
"
      end

      operation 8577026 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this object equals another.
<p>
The entire state of the object is compared.

@param other  the other object to compare to, null returns false
@return true if equal
"
      end

      operation 8577154 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a suitable hash code.

@return the hash code
"
      end

      operation 8577282 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a string describing this object.

@return a string for debugging, not null
"
      end
    end

    class 1063682 "ZoneOffsetTransitionRule"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A rule expressing how to create a transition.
<p>
This class allows rules for identifying future transitions to be expressed.
A rule might be written in many forms:
<ul>
<li>the 16th March
<li>the Sunday on or after the 16th March
<li>the Sunday on or before the 16th March
<li>the last Sunday in February
</ul>
These different rule types can be expressed and queried.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3473026 // <realization>
	relation 3473026 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3473026 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1977602 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6889046316657758795L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3473154 // month (<unidirectional association>)
	relation 3473154 --->
	  a role_name "month" const_relation private
	    comment "
The month of the month-day of the first day of the cutover week.
The actual date will be adjusted by the dowChange field.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3473154 // month (<unidirectional association>)
	  b parent class_ref 1053186 // Month
      end

      attribute 1977730 "dom"
	const_attribute private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The day-of-month of the month-day of the cutover week.
If positive, it is the start of the week where the cutover can occur.
If negative, it represents the end of the week where cutover can occur.
The value is the number of days from the end of the month, such that
{@code -1} is the last day of the month, {@code -2} is the second
to last day, and so on.

"
      end

      classrelation 3473282 // dow (<unidirectional association>)
	relation 3473282 --->
	  a role_name "dow" const_relation private
	    comment "
The cutover day-of-week, null to retain the day-of-month.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3473282 // dow (<unidirectional association>)
	  b parent class_ref 1050626 // DayOfWeek
      end

      classrelation 3473410 // time (<unidirectional association>)
	relation 3473410 --->
	  a role_name "time" const_relation private
	    comment "
The cutover time in the 'before' offset.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3473410 // time (<unidirectional association>)
	  b parent class_ref 1043842 // LocalTime
      end

      attribute 1977858 "timeEndOfDay"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Whether the cutover time is midnight at the end of day.

"
      end

      class 1063810 "TimeDefinition"
	visibility public stereotype "enum"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1977986 "UTC"
	  public type class_ref 1063810 // TimeDefinition
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The local date-time is expressed in terms of the UTC offset. 
"
	end

	attribute 1978114 "WALL"
	  public type class_ref 1063810 // TimeDefinition
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The local date-time is expressed in terms of the wall offset. 
"
	end

	attribute 1978242 "STANDARD"
	  public type class_ref 1063810 // TimeDefinition
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The local date-time is expressed in terms of the standard offset. "
	end

	operation 8579842 "createDateTime"
	  public return_type class_ref 1043970 // LocalDateTime
	  nparams 3
	    param inout name "dateTime" type class_ref 1043970 // LocalDateTime
	    param inout name "standardOffset" type class_ref 1052162 // ZoneOffset
	    param inout name "wallOffset" type class_ref 1052162 // ZoneOffset
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Converts the specified local date-time to the local date-time actually
seen on a wall clock.
<p>
This method converts using the type of this enum.
The output is defined relative to the 'before' offset of the transition.
<p>
The UTC type uses the UTC offset.
The STANDARD type uses the standard offset.
The WALL type returns the input date-time.
The result is intended for use with the wall-offset.

@param dateTime  the local date-time, not null
@param standardOffset  the standard offset, not null
@param wallOffset  the wall offset, not null
@return the date-time relative to the wall/before offset, not null
"
	end
      end

      classrelation 3473538 // timeDefinition (<unidirectional association>)
	relation 3473538 --->
	  a role_name "timeDefinition" const_relation private
	    comment "
The definition of how the local time should be interpreted.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3473538 // timeDefinition (<unidirectional association>)
	  b parent class_ref 1063810 // TimeDefinition
      end

      classrelation 3473666 // standardOffset (<unidirectional association>)
	relation 3473666 --->
	  a role_name "standardOffset" const_relation private
	    comment "
The standard offset at the cutover.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3473666 // standardOffset (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      classrelation 3473794 // offsetBefore (<unidirectional association>)
	relation 3473794 --->
	  a role_name "offsetBefore" const_relation private
	    comment "
The offset before the cutover.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3473794 // offsetBefore (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      classrelation 3473922 // offsetAfter (<unidirectional association>)
	relation 3473922 --->
	  a role_name "offsetAfter" const_relation private
	    comment "
The offset after the cutover.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3473922 // offsetAfter (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      operation 8577410 "of"
	class_operation public return_type class_ref 1063682 // ZoneOffsetTransitionRule
	nparams 9
	  param inout name "month" type class_ref 1053186 // Month
	  param in name "dayOfMonthIndicator" explicit_type "int"
	  param inout name "dayOfWeek" type class_ref 1050626 // DayOfWeek
	  param inout name "time" type class_ref 1043842 // LocalTime
	  param inout name "timeEndOfDay" explicit_type "boolean"
	  param inout name "timeDefnition" type class_ref 1063810 // TimeDefinition
	  param inout name "standardOffset" type class_ref 1052162 // ZoneOffset
	  param inout name "offsetBefore" type class_ref 1052162 // ZoneOffset
	  param inout name "offsetAfter" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance defining the yearly rule to create transitions between two offsets.
<p>
Applications should normally obtain an instance from {@link ZoneRules}.
This factory is only intended for use when creating {@link ZoneRules}.

@param month  the month of the month-day of the first day of the cutover week, not null
@param dayOfMonthIndicator  the day of the month-day of the cutover week, positive if the week is that
 day or later, negative if the week is that day or earlier, counting from the last day of the month,
 from -28 to 31 excluding 0
@param dayOfWeek  the required day-of-week, null if the month-day should not be changed
@param time  the cutover time in the 'before' offset, not null
@param timeEndOfDay  whether the time is midnight at the end of day
@param timeDefnition  how to interpret the cutover
@param standardOffset  the standard offset in force at the cutover, not null
@param offsetBefore  the offset before the cutover, not null
@param offsetAfter  the offset after the cutover, not null
@return the rule, not null
@throws IllegalArgumentException if the day of month indicator is invalid
@throws IllegalArgumentException if the end of day flag is true when the time is not midnight
"
      end

      operation 8577538 "ZoneOffsetTransitionRule"
	package explicit_return_type ""
	nparams 9
	  param inout name "month" type class_ref 1053186 // Month
	  param in name "dayOfMonthIndicator" explicit_type "int"
	  param inout name "dayOfWeek" type class_ref 1050626 // DayOfWeek
	  param inout name "time" type class_ref 1043842 // LocalTime
	  param inout name "timeEndOfDay" explicit_type "boolean"
	  param inout name "timeDefnition" type class_ref 1063810 // TimeDefinition
	  param inout name "standardOffset" type class_ref 1052162 // ZoneOffset
	  param inout name "offsetBefore" type class_ref 1052162 // ZoneOffset
	  param inout name "offsetAfter" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance defining the yearly rule to create transitions between two offsets.

@param month  the month of the month-day of the first day of the cutover week, not null
@param dayOfMonthIndicator  the day of the month-day of the cutover week, positive if the week is that
 day or later, negative if the week is that day or earlier, counting from the last day of the month,
 from -28 to 31 excluding 0
@param dayOfWeek  the required day-of-week, null if the month-day should not be changed
@param time  the cutover time in the 'before' offset, not null
@param timeEndOfDay  whether the time is midnight at the end of day
@param timeDefnition  how to interpret the cutover
@param standardOffset  the standard offset in force at the cutover, not null
@param offsetBefore  the offset before the cutover, not null
@param offsetAfter  the offset after the cutover, not null
@throws IllegalArgumentException if the day of month indicator is invalid
@throws IllegalArgumentException if the end of day flag is true when the time is not midnight
"
      end

      operation 8577666 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8577794 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the object using a
<a href=\"../../../serialized-form.html#java.time.zone.Ser\">dedicated serialized form</a>.
@serialData
Refer to the serialized form of
<a href=\"../../../serialized-form.html#java.time.zone.ZoneRules\">ZoneRules.writeReplace</a>
for the encoding of epoch seconds and offsets.
<pre style=\"font-size:1.0em\">{@code

     out.writeByte(3);                // identifies a ZoneOffsetTransition
     final int timeSecs = (timeEndOfDay ? 86400 : time.toSecondOfDay());
     final int stdOffset = standardOffset.getTotalSeconds();
     final int beforeDiff = offsetBefore.getTotalSeconds() - stdOffset;
     final int afterDiff = offsetAfter.getTotalSeconds() - stdOffset;
     final int timeByte = (timeSecs % 3600 == 0 ? (timeEndOfDay ? 24 : time.getHour()) : 31);
     final int stdOffsetByte = (stdOffset % 900 == 0 ? stdOffset / 900 + 128 : 255);
     final int beforeByte = (beforeDiff == 0 || beforeDiff == 1800 || beforeDiff == 3600 ? beforeDiff / 1800 : 3);
     final int afterByte = (afterDiff == 0 || afterDiff == 1800 || afterDiff == 3600 ? afterDiff / 1800 : 3);
     final int dowByte = (dow == null ? 0 : dow.getValue());
     int b = (month.getValue() << 28) +          // 4 bits
             ((dom + 32) << 22) +                // 6 bits
             (dowByte << 19) +                   // 3 bits
             (timeByte << 14) +                  // 5 bits
             (timeDefinition.ordinal() << 12) +  // 2 bits
             (stdOffsetByte << 4) +              // 8 bits
             (beforeByte << 2) +                 // 2 bits
             afterByte;                          // 2 bits
     out.writeInt(b);
     if (timeByte == 31) {
         out.writeInt(timeSecs);
     }
     if (stdOffsetByte == 255) {
         out.writeInt(stdOffset);
     }
     if (beforeByte == 3) {
         out.writeInt(offsetBefore.getTotalSeconds());
     }
     if (afterByte == 3) {
         out.writeInt(offsetAfter.getTotalSeconds());
     }
}
</pre>

@return the replacing object, not null
"
      end

      operation 8577922 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the state to the stream.

@param out  the output stream, not null
@throws IOException if an error occurs
"
      end

      operation 8578050 "readExternal"
	class_operation package return_type class_ref 1063682 // ZoneOffsetTransitionRule
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the state from the stream.

@param in  the input stream, not null
@return the created object, not null
@throws IOException if an error occurs
"
      end

      operation 8578178 "getMonth"
	public return_type class_ref 1053186 // Month
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the month of the transition.
<p>
If the rule defines an exact date then the month is the month of that date.
<p>
If the rule defines a week where the transition might occur, then the month
if the month of either the earliest or latest possible date of the cutover.

@return the month of the transition, not null
"
      end

      operation 8578306 "getDayOfMonthIndicator"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the indicator of the day-of-month of the transition.
<p>
If the rule defines an exact date then the day is the month of that date.
<p>
If the rule defines a week where the transition might occur, then the day
defines either the start of the end of the transition week.
<p>
If the value is positive, then it represents a normal day-of-month, and is the
earliest possible date that the transition can be.
The date may refer to 29th February which should be treated as 1st March in non-leap years.
<p>
If the value is negative, then it represents the number of days back from the
end of the month where {@code -1} is the last day of the month.
In this case, the day identified is the latest possible date that the transition can be.

@return the day-of-month indicator, from -28 to 31 excluding 0
"
      end

      operation 8578434 "getDayOfWeek"
	public return_type class_ref 1050626 // DayOfWeek
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-week of the transition.
<p>
If the rule defines an exact date then this returns null.
<p>
If the rule defines a week where the cutover might occur, then this method
returns the day-of-week that the month-day will be adjusted to.
If the day is positive then the adjustment is later.
If the day is negative then the adjustment is earlier.

@return the day-of-week that the transition occurs, null if the rule defines an exact date
"
      end

      operation 8578562 "getLocalTime"
	public return_type class_ref 1043842 // LocalTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the local time of day of the transition which must be checked with
{@link #isMidnightEndOfDay()}.
<p>
The time is converted into an instant using the time definition.

@return the local time of day of the transition, not null
"
      end

      operation 8578690 "isMidnightEndOfDay"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Is the transition local time midnight at the end of day.
<p>
The transition may be represented as occurring at 24:00.

@return whether a local time of midnight is at the start or end of the day
"
      end

      operation 8578818 "getTimeDefinition"
	public return_type class_ref 1063810 // TimeDefinition
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time definition, specifying how to convert the time to an instant.
<p>
The local time can be converted to an instant using the standard offset,
the wall offset or UTC.

@return the time definition, not null
"
      end

      operation 8578946 "getStandardOffset"
	public return_type class_ref 1052162 // ZoneOffset
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the standard offset in force at the transition.

@return the standard offset, not null
"
      end

      operation 8579074 "getOffsetBefore"
	public return_type class_ref 1052162 // ZoneOffset
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the offset before the transition.

@return the offset before, not null
"
      end

      operation 8579202 "getOffsetAfter"
	public return_type class_ref 1052162 // ZoneOffset
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the offset after the transition.

@return the offset after, not null
"
      end

      operation 8579330 "createTransition"
	public return_type class_ref 1063554 // ZoneOffsetTransition
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Creates a transition instance for the specified year.
<p>
Calculations are performed using the ISO-8601 chronology.

@param year  the year to create a transition for, not null
@return the transition instance, not null
"
      end

      operation 8579458 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "otherRule" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this object equals another.
<p>
The entire state of the object is compared.

@param otherRule  the other object to compare to, null returns false
@return true if equal
"
      end

      operation 8579586 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a suitable hash code.

@return the hash code
"
      end

      operation 8579714 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a string describing this object.

@return a string for debugging, not null
"
      end
    end

    class 1063938 "ZoneRulesException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown to indicate a problem with time-zone configuration.
<p>
This exception is used to indicate a problems with the configured
time-zone rules.

@implSpec
This class is intended for use in a single thread.

@since 1.8
"
      classrelation 3475074 // <generalisation>
	relation 3475074 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3475074 // <generalisation>
	  b parent class_ref 1050498 // DateTimeException
      end

      attribute 1979010 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1632418723876261839L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      operation 8583682 "ZoneRulesException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new date-time exception with the specified message.

@param message  the message to use for this exception, may be null
"
      end

      operation 8583810 "ZoneRulesException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new date-time exception with the specified message and cause.

@param message  the message to use for this exception, may be null
@param cause  the cause of the exception, may be null
"
      end
    end
  end

  deploymentview 170626 "zone"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 791426 "Ser"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.Externalizable;
import java.io.IOException;
import java.io.InvalidClassException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.StreamCorruptedException;
import java.time.ZoneOffset;
${definition}"
      associated_elems
	class_ref 1063042 // Ser
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2011-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 791554 "ZoneRulesProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.NavigableMap;
import java.util.Objects;
import java.util.ServiceConfigurationError;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.CopyOnWriteArrayList;
${definition}"
      associated_elems
	class_ref 1063298 // ZoneRulesProvider
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2009-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 791682 "TzdbZoneRulesProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ByteArrayInputStream;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
${definition}"
      associated_elems
	class_ref 1063170 // TzdbZoneRulesProvider
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2009-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 791810 "ZoneOffsetTransition"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1063554 // ZoneOffsetTransition
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2009-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 791938 "ZoneOffsetTransitionRule"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.Objects;
import static java.time.temporal.TemporalAdjusters.nextOrSame;
import static java.time.temporal.TemporalAdjusters.previousOrSame;
${definition}"
      associated_elems
	class_ref 1063682 // ZoneOffsetTransitionRule
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2009-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 792066 "ZoneRules"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.Year;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
${definition}"
      associated_elems
	class_ref 1054338 // ZoneRules
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2009-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 792194 "ZoneRulesException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
${definition}"
      associated_elems
	class_ref 1063938 // ZoneRulesException
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2008-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end
  end
end
