class DOMNamespaceContext
!!!4952578.java!!!	pushContext() : void
            fNamespaceContext.pushContext();
!!!4952706.java!!!	popContext() : void
            fNamespaceContext.popContext();
!!!4952834.java!!!	declarePrefix(inout prefix : String, inout uri : String) : boolean
            return fNamespaceContext.declarePrefix(prefix, uri);
!!!4952962.java!!!	getURI(inout prefix : String) : String
            String uri = fNamespaceContext.getURI(prefix);
            if (uri == null) {
                if (!fDOMContextBuilt) {
                    fillNamespaceContext();
                    fDOMContextBuilt = true;
                }
                if (fNamespaceSize > 0 &&
                    !fNamespaceContext.containsPrefix(prefix)) {
                    uri = getURI0(prefix);
                }
            }
            return uri;
!!!4953090.java!!!	getPrefix(inout uri : String) : String
            return fNamespaceContext.getPrefix(uri);
!!!4953218.java!!!	getDeclaredPrefixCount() : int
            return fNamespaceContext.getDeclaredPrefixCount();
!!!4953346.java!!!	getDeclaredPrefixAt(in index : int) : String
            return fNamespaceContext.getDeclaredPrefixAt(index);
!!!4953474.java!!!	getAllPrefixes() : Enumeration
            return fNamespaceContext.getAllPrefixes();
!!!4953602.java!!!	reset() : void
            fDOMContextBuilt = false;
            fNamespaceSize = 0;
!!!4953730.java!!!	fillNamespaceContext() : void
            if (fRoot != null) {
                Node currentNode = fRoot.getParentNode();
                while (currentNode != null) {
                    if (Node.ELEMENT_NODE == currentNode.getNodeType()) {
                        NamedNodeMap attributes = currentNode.getAttributes();
                        final int attrCount = attributes.getLength();
                        for (int i = 0; i < attrCount; ++i) {
                            Attr attr = (Attr) attributes.item(i);
                            String value = attr.getValue();
                            if (value == null) {
                                value = XMLSymbols.EMPTY_STRING;
                            }
                            fillQName(fAttributeQName, attr);
                            // REVISIT: Should we be looking at non-namespace attributes
                            // for additional mappings? Should we detect illegal namespace
                            // declarations and exclude them from the context? -- mrglavas
                            if (fAttributeQName.uri == NamespaceContext.XMLNS_URI) {
                                // process namespace attribute
                                if (fAttributeQName.prefix == XMLSymbols.PREFIX_XMLNS) {
                                    declarePrefix0(fAttributeQName.localpart, value.length() != 0 ? fSymbolTable.addSymbol(value) : null);
                                }
                                else {
                                    declarePrefix0(XMLSymbols.EMPTY_STRING, value.length() != 0 ? fSymbolTable.addSymbol(value) : null);
                                }
                            }
                        }

                    }
                    currentNode = currentNode.getParentNode();
                }
            }
!!!4953858.java!!!	declarePrefix0(inout prefix : String, inout uri : String) : void
            // resize array, if needed
            if (fNamespaceSize == fNamespace.length) {
                String[] namespacearray = new String[fNamespaceSize * 2];
                System.arraycopy(fNamespace, 0, namespacearray, 0, fNamespaceSize);
                fNamespace = namespacearray;
            }

            // bind prefix to uri in current context
            fNamespace[fNamespaceSize++] = prefix;
            fNamespace[fNamespaceSize++] = uri;
!!!4953986.java!!!	getURI0(inout prefix : String) : String
            // find prefix in the DOM context
            for (int i = 0; i < fNamespaceSize; i += 2) {
                if (fNamespace[i] == prefix) {
                    return fNamespace[i + 1];
                }
            }
            // prefix not found
            return null;
