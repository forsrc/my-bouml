class XPath2FilterContainer
!!!5476482.java!!!	XPath2FilterContainer()
        // no instantiation
!!!5476610.java!!!	XPath2FilterContainer(inout doc : Document, inout xpath2filter : String, inout filterType : String)
        super(doc);

        this.constructionElement.setAttributeNS(
            null, XPath2FilterContainer._ATT_FILTER, filterType);
        this.constructionElement.appendChild(doc.createTextNode(xpath2filter));
!!!5476738.java!!!	XPath2FilterContainer(inout element : Element, inout BaseURI : String)

        super(element, BaseURI);

        String filterStr =
            this.constructionElement.getAttributeNS(null, XPath2FilterContainer._ATT_FILTER);

        if (!filterStr.equals(XPath2FilterContainer._ATT_FILTER_VALUE_INTERSECT)
            && !filterStr.equals(XPath2FilterContainer._ATT_FILTER_VALUE_SUBTRACT)
            && !filterStr.equals(XPath2FilterContainer._ATT_FILTER_VALUE_UNION)) {
            Object exArgs[] = { XPath2FilterContainer._ATT_FILTER, filterStr,
                                XPath2FilterContainer._ATT_FILTER_VALUE_INTERSECT
                                + ", "
                                + XPath2FilterContainer._ATT_FILTER_VALUE_SUBTRACT
                                + " or "
                                + XPath2FilterContainer._ATT_FILTER_VALUE_UNION };

            throw new XMLSecurityException("attributeValueIllegal", exArgs);
        }
!!!5476866.java!!!	newInstanceIntersect(inout doc : Document, inout xpath2filter : String) : XPath2FilterContainer
        return new XPath2FilterContainer(
            doc, xpath2filter, XPath2FilterContainer._ATT_FILTER_VALUE_INTERSECT);
!!!5476994.java!!!	newInstanceSubtract(inout doc : Document, inout xpath2filter : String) : XPath2FilterContainer
        return new XPath2FilterContainer(
            doc, xpath2filter, XPath2FilterContainer._ATT_FILTER_VALUE_SUBTRACT);
!!!5477122.java!!!	newInstanceUnion(inout doc : Document, inout xpath2filter : String) : XPath2FilterContainer
        return new XPath2FilterContainer(
            doc, xpath2filter, XPath2FilterContainer._ATT_FILTER_VALUE_UNION);
!!!5477250.java!!!	newInstances(inout doc : Document, inout params : String [[][]]) : NodeList
        HelperNodeList nl = new HelperNodeList();

        XMLUtils.addReturnToElement(doc, nl);

        for (int i = 0; i < params.length; i++) {
            String type = params[i][0];
            String xpath = params[i][1];

            if (!(type.equals(XPath2FilterContainer._ATT_FILTER_VALUE_INTERSECT)
                || type.equals(XPath2FilterContainer._ATT_FILTER_VALUE_SUBTRACT)
                || type.equals(XPath2FilterContainer._ATT_FILTER_VALUE_UNION))){
                throw new IllegalArgumentException("The type(" + i + ")=\"" + type
                                                   + "\" is illegal");
            }

            XPath2FilterContainer c = new XPath2FilterContainer(doc, xpath, type);

            nl.appendChild(c.getElement());
            XMLUtils.addReturnToElement(doc, nl);
        }

        return nl;
!!!5477378.java!!!	newInstance(inout element : Element, inout BaseURI : String) : XPath2FilterContainer
        return new XPath2FilterContainer(element, BaseURI);
!!!5477506.java!!!	isIntersect() : boolean
        return this.constructionElement.getAttributeNS(
            null, XPath2FilterContainer._ATT_FILTER
        ).equals(XPath2FilterContainer._ATT_FILTER_VALUE_INTERSECT);
!!!5477634.java!!!	isSubtract() : boolean
        return this.constructionElement.getAttributeNS(
            null, XPath2FilterContainer._ATT_FILTER
        ).equals(XPath2FilterContainer._ATT_FILTER_VALUE_SUBTRACT);
!!!5477762.java!!!	isUnion() : boolean
        return this.constructionElement.getAttributeNS(
            null, XPath2FilterContainer._ATT_FILTER
        ).equals(XPath2FilterContainer._ATT_FILTER_VALUE_UNION);
!!!5477890.java!!!	getXPathFilterStr() : String
        return this.getTextFromTextChild();
!!!5478018.java!!!	getXPathFilterTextNode() : Node

        NodeList children = this.constructionElement.getChildNodes();
        int length = children.getLength();

        for (int i = 0; i < length; i++) {
            if (children.item(i).getNodeType() == Node.TEXT_NODE) {
                return children.item(i);
            }
        }

        return null;
!!!5478146.java!!!	getBaseLocalName() : String
        return XPath2FilterContainer._TAG_XPATH2;
!!!5478274.java!!!	getBaseNamespace() : String
        return XPath2FilterContainer.XPathFilter2NS;
