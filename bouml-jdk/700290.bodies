class XSElementDecl
!!!4705538.java!!!	setConstraintType(in constraintType : short) : void
        // first clear the bits
        fMiscFlags ^= (fMiscFlags & CONSTRAINT_MASK);
        // then set the proper one
        fMiscFlags |= (constraintType & CONSTRAINT_MASK);
!!!4705666.java!!!	setIsNillable() : void
        fMiscFlags |= NILLABLE;
!!!4705794.java!!!	setIsAbstract() : void
        fMiscFlags |= ABSTRACT;
!!!4705922.java!!!	setIsGlobal() : void
        fScope = SCOPE_GLOBAL;
!!!4706050.java!!!	setIsLocal(inout enclosingCT : XSComplexTypeDecl) : void
        fScope = SCOPE_LOCAL;
        fEnclosingCT = enclosingCT;
!!!4706178.java!!!	addIDConstraint(inout idc : IdentityConstraint) : void
        if (fIDCPos == fIDConstraints.length) {
            fIDConstraints = resize(fIDConstraints, fIDCPos*2);
        }
        fIDConstraints[fIDCPos++] = idc;
!!!4706306.java!!!	getIDConstraints() : IdentityConstraint
        if (fIDCPos == 0) {
            return null;
        }
        if (fIDCPos < fIDConstraints.length) {
            fIDConstraints = resize(fIDConstraints, fIDCPos);
        }
        return fIDConstraints;
!!!4706434.java!!!	resize(inout oldArray : IdentityConstraint [[]], in newSize : int) : IdentityConstraint
        IdentityConstraint[] newArray = new IdentityConstraint[newSize];
        System.arraycopy(oldArray, 0, newArray, 0, Math.min(oldArray.length, newSize));
        return newArray;
!!!4706562.java!!!	toString() : String
        if (fDescription == null) {
            if (fTargetNamespace != null) {
                StringBuffer buffer = new StringBuffer(
                    fTargetNamespace.length() +
                    ((fName != null) ? fName.length() : 4) + 3);
                buffer.append('"');
                buffer.append(fTargetNamespace);
                buffer.append('"');
                buffer.append(':');
                buffer.append(fName);
                fDescription = buffer.toString();
            }
            else {
                fDescription = fName;
            }
        }
        return fDescription;
!!!4706690.java!!!	hashCode() : int
        int code = fName.hashCode();
        if (fTargetNamespace != null)
            code = (code<<16)+fTargetNamespace.hashCode();
        return code;
!!!4706818.java!!!	equals(inout o : Object) : boolean
        return o == this;
!!!4706946.java!!!	reset() : void
        fScope = XSConstants.SCOPE_ABSENT;
        fName = null;
        fTargetNamespace = null;
        fType = null;
        fUnresolvedTypeName = null;
        fMiscFlags = 0;
        fBlock = XSConstants.DERIVATION_NONE;
        fFinal = XSConstants.DERIVATION_NONE;
        fDefault = null;
        fAnnotations = null;
        fSubGroup = null;
        // reset identity constraints
        for (int i=0;i<fIDCPos;i++) {
            fIDConstraints[i] = null;
        }

        fIDCPos = 0;
!!!4707074.java!!!	getType() : short
        return XSConstants.ELEMENT_DECLARATION;
!!!4707202.java!!!	getName() : String
        return fName;
!!!4707330.java!!!	getNamespace() : String
        return fTargetNamespace;
!!!4707458.java!!!	getTypeDefinition() : XSTypeDefinition
        return fType;
!!!4707586.java!!!	getScope() : short
        return fScope;
!!!4707714.java!!!	getEnclosingCTDefinition() : XSComplexTypeDefinition
        return fEnclosingCT;
!!!4707842.java!!!	getConstraintType() : short
        return (short)(fMiscFlags & CONSTRAINT_MASK);
!!!4707970.java!!!	getConstraintValue() : String
        // REVISIT: SCAPI: what's the proper representation
        return getConstraintType() == XSConstants.VC_NONE ?
               null :
               fDefault.stringValue();
!!!4708098.java!!!	getNillable() : boolean
        return ((fMiscFlags & NILLABLE) != 0);
!!!4708226.java!!!	getIdentityConstraints() : XSNamedMap
        return new XSNamedMapImpl(fIDConstraints, fIDCPos);
!!!4708354.java!!!	getSubstitutionGroupAffiliation() : XSElementDeclaration
        return fSubGroup;
!!!4708482.java!!!	isSubstitutionGroupExclusion(in exclusion : short) : boolean
        return (fFinal & exclusion) != 0;
!!!4708610.java!!!	getSubstitutionGroupExclusions() : short
        return fFinal;
!!!4708738.java!!!	isDisallowedSubstitution(in disallowed : short) : boolean
        return (fBlock & disallowed) != 0;
!!!4708866.java!!!	getDisallowedSubstitutions() : short
        return fBlock;
!!!4708994.java!!!	getAbstract() : boolean
        return ((fMiscFlags & ABSTRACT) != 0);
!!!4709122.java!!!	getAnnotation() : XSAnnotation
        return (fAnnotations != null) ? (XSAnnotation) fAnnotations.item(0) : null;
!!!4709250.java!!!	getAnnotations() : XSObjectList
        return (fAnnotations != null) ? fAnnotations : XSObjectListImpl.EMPTY_LIST;
!!!4709378.java!!!	getNamespaceItem() : XSNamespaceItem
        return fNamespaceItem;
!!!4709506.java!!!	setNamespaceItem(inout namespaceItem : XSNamespaceItem) : void
        fNamespaceItem = namespaceItem;
!!!4709634.java!!!	getActualVC() : Object
        return getConstraintType() == XSConstants.VC_NONE ?
               null :
               fDefault.actualValue;
!!!4709762.java!!!	getActualVCType() : short
        return getConstraintType() == XSConstants.VC_NONE ?
               XSConstants.UNAVAILABLE_DT :
               fDefault.actualValueType;
!!!4709890.java!!!	getItemValueTypes() : ShortList
        return getConstraintType() == XSConstants.VC_NONE ?
               null :
               fDefault.itemValueTypes;
