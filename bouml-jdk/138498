format 222
"rmi" // jdk1.8::com::sun::corba::se::impl::javax::rmi
  revision 1
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/corba/se/impl/javax/rmi/"
  java_package "com.sun.corba.se.impl.javax.rmi"
  classview 135938 "rmi"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 206850 "PortableRemoteObject"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Server implementation objects may either inherit from
javax.rmi.PortableRemoteObject or they may implement a remote interface
and then use the exportObject method to register themselves as a server object.
The toStub method takes a server implementation and returns a stub that
can be used to access that server object.
The connect method makes a Remote object ready for remote communication.
The unexportObject method is used to deregister a server object, allowing it to become
available for garbage collection.
The narrow method takes an object reference or abstract interface type and
attempts to narrow it to conform to
the given interface. If the operation is successful the result will be an
object of the specified type, otherwise an exception will be thrown.
"
      classrelation 258818 // <realization>
	relation 258818 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 258818 // <realization>
	  b parent class_ref 206978 // PortableRemoteObjectDelegate
      end

      operation 679042 "exportObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 207106 // Remote
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a server object ready to receive remote calls. Note
that subclasses of PortableRemoteObject do not need to call this
method, as it is called by the constructor.
@param obj the server object to export.
@exception RemoteException if export fails.
"
      end

      operation 679170 "toStub"
	public return_type class_ref 207106 // Remote
	nparams 1
	  param inout name "obj" type class_ref 207106 // Remote
	nexceptions 1
	  exception class_ref 207362 // NoSuchObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stub for the given server object.
@param obj the server object for which a stub is required. Must either be a subclass
of PortableRemoteObject or have been previously the target of a call to
{@link #exportObject}.
@return the most derived stub for the object.
@exception NoSuchObjectException if a stub cannot be located for the given server object.
"
      end

      operation 679298 "unexportObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 207106 // Remote
	nexceptions 1
	  exception class_ref 207362 // NoSuchObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deregisters a server object from the runtime, allowing the object to become
available for garbage collection.
@param obj the object to unexport.
@exception NoSuchObjectException if the remote object is not
currently exported.
"
      end

      operation 679426 "narrow"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "narrowFrom" type class_ref 129538 // Object
	  param inout name "narrowTo" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 207490 // ClassCastException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks to ensure that an object of a remote or abstract interface type
can be cast to a desired type.
@param narrowFrom the object to check.
@param narrowTo the desired type.
@return an object which can be cast to the desired type.
@throws ClassCastException if narrowFrom cannot be cast to narrowTo.
"
      end

      operation 679554 "connect"
	public explicit_return_type "void"
	nparams 2
	  param inout name "target" type class_ref 207106 // Remote
	  param inout name "source" type class_ref 207106 // Remote
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a Remote object ready for remote communication. This normally
happens implicitly when the object is sent or received as an argument
on a remote method call, but in some circumstances it is useful to
perform this action by making an explicit call.  See the
{@link Stub#connect} method for more information.
@param target the object to connect.
@param source a previously connected object.
@throws RemoteException if <code>source</code> is not connected
or if <code>target</code> is already connected to a different ORB than
<code>source</code>.
"
      end
    end
  end

  deploymentview 131714 "rmi"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 168962 "PortableRemoteObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Method;
import javax.rmi.CORBA.Tie;
import javax.rmi.CORBA.Util;
import java.rmi.RemoteException;
import java.rmi.NoSuchObjectException;
import java.rmi.Remote;
import java.util.Properties;
import org.omg.CORBA.ORB;
import org.omg.CORBA.portable.Delegate;
import org.omg.CORBA.SystemException;
import java.rmi.server.UnicastRemoteObject;
import java.rmi.server.RemoteStub;
import java.rmi.server.ExportException;
import java.net.URL;
import com.sun.corba.se.impl.util.JDKBridge;
import com.sun.corba.se.impl.util.Utility;
import com.sun.corba.se.impl.util.RepositoryId;
import com.sun.corba.se.spi.presentation.rmi.StubAdapter;
import java.security.AccessController;
import com.sun.corba.se.impl.orbutil.GetPropertyAction;
${definition}"
      associated_elems
	class_ref 206850 // PortableRemoteObject
      end
      comment "Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Licensed Materials - Property of IBM
RMI-IIOP v1.0
Copyright IBM Corp. 1998 1999  All Rights Reserved

"
    end
  end

  package_ref 138754 // CORBA
end
