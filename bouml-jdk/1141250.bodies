class Beans
!!!9402882.java!!!	getClass(inout name : String) : Class
            try {
                return Class.forName(name, true, Beans.class.getClassLoader());
            } catch (ClassNotFoundException e) {
                return null;
            }
!!!9403010.java!!!	getConstructor(inout c : Class, inout types : Class<?>...) : Constructor
            try {
                return (c == null) ? null : c.getDeclaredConstructor(types);
            } catch (NoSuchMethodException x) {
                throw new AssertionError(x);
            }
!!!9403138.java!!!	getMethod(inout c : Class, inout name : String, inout types : Class<?>...) : Method
            try {
                return (c == null) ? null : c.getMethod(name, types);
            } catch (NoSuchMethodException e) {
                throw new AssertionError(e);
            }
!!!9403266.java!!!	isBeansPresent() : boolean
            return propertyChangeListenerClass != null &&
                   propertyChangeEventClass != null;
!!!9403394.java!!!	newPropertyChangeEvent(inout source : Object, inout prop : String, inout oldValue : Object, inout newValue : Object) : Object
            try {
                return propertyEventCtor.newInstance(source, prop, oldValue, newValue);
            } catch (InstantiationException | IllegalAccessException x) {
                throw new AssertionError(x);
            } catch (InvocationTargetException x) {
                Throwable cause = x.getCause();
                if (cause instanceof Error)
                    throw (Error)cause;
                if (cause instanceof RuntimeException)
                    throw (RuntimeException)cause;
                throw new AssertionError(x);
            }
!!!9403522.java!!!	invokePropertyChange(inout listener : Object, inout ev : Object) : void
            try {
                propertyChangeMethod.invoke(listener, ev);
            } catch (IllegalAccessException x) {
                throw new AssertionError(x);
            } catch (InvocationTargetException x) {
                Throwable cause = x.getCause();
                if (cause instanceof Error)
                    throw (Error)cause;
                if (cause instanceof RuntimeException)
                    throw (RuntimeException)cause;
                throw new AssertionError(x);
            }
