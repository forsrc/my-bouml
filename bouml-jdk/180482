format 222
"font" // jdk1.8::java::awt::font
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/awt/font/"
  java_package "java.awt.font"
  classview 173186 "font"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 865922 "TextAttribute"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>TextAttribute</code> class defines attribute keys and
attribute values used for text rendering.
<p>
<code>TextAttribute</code> instances are used as attribute keys to
identify attributes in
{@link java.awt.Font Font},
{@link java.awt.font.TextLayout TextLayout},
{@link java.text.AttributedCharacterIterator AttributedCharacterIterator},
and other classes handling text attributes. Other constants defined
in this class can be used as attribute values.
<p>
For each text attribute, the documentation provides:
<UL>
  <LI>the type of its value,
  <LI>the relevant predefined constants, if any
  <LI>the default effect if the attribute is absent
  <LI>the valid values if there are limitations
  <LI>a description of the effect.
</UL>
<p>
<H3>Values</H3>
<UL>
  <LI>The values of attributes must always be immutable.
  <LI>Where value limitations are given, any value outside of that
  set is reserved for future use; the value will be treated as
  the default.
  <LI>The value <code>null</code> is treated the same as the
  default value and results in the default behavior.
  <li>If the value is not of the proper type, the attribute
  will be ignored.
  <li>The identity of the value does not matter, only the actual
  value.  For example, <code>TextAttribute.WEIGHT_BOLD</code> and
  <code>new Float(2.0)</code>
  indicate the same <code>WEIGHT</code>.
  <li>Attribute values of type <code>Number</code> (used for
  <code>WEIGHT</code>, <code>WIDTH</code>, <code>POSTURE</code>,
  <code>SIZE</code>, <code>JUSTIFICATION</code>, and
  <code>TRACKING</code>) can vary along their natural range and are
  not restricted to the predefined constants.
  <code>Number.floatValue()</code> is used to get the actual value
  from the <code>Number</code>.
  <li>The values for <code>WEIGHT</code>, <code>WIDTH</code>, and
  <code>POSTURE</code> are interpolated by the system, which
  can select the 'nearest available' font or use other techniques to
  approximate the user's request.

</UL>

<h4>Summary of attributes</h4>
<p>
<table style=\"float:center\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\" width=\"%95\"
    summary=\"Key, value type, principal constants, and default value
    behavior of all TextAttributes\">
<tr style=\"background-color:#ccccff\">
<th valign=\"TOP\" align=\"CENTER\">Key</th>
<th valign=\"TOP\" align=\"CENTER\">Value Type</th>
<th valign=\"TOP\" align=\"CENTER\">Principal Constants</th>
<th valign=\"TOP\" align=\"CENTER\">Default Value</th>
</tr>
<tr>
<td valign=\"TOP\">{@link #FAMILY}</td>
<td valign=\"TOP\">String</td>
<td valign=\"TOP\">See Font {@link java.awt.Font#DIALOG DIALOG},
{@link java.awt.Font#DIALOG_INPUT DIALOG_INPUT},<br> {@link java.awt.Font#SERIF SERIF},
{@link java.awt.Font#SANS_SERIF SANS_SERIF}, and {@link java.awt.Font#MONOSPACED MONOSPACED}.
</td>
<td valign=\"TOP\">\"Default\" (use platform default)</td>
</tr>
<tr style=\"background-color:#eeeeff\">
<td valign=\"TOP\">{@link #WEIGHT}</td>
<td valign=\"TOP\">Number</td>
<td valign=\"TOP\">WEIGHT_REGULAR, WEIGHT_BOLD</td>
<td valign=\"TOP\">WEIGHT_REGULAR</td>
</tr>
<tr>
<td valign=\"TOP\">{@link #WIDTH}</td>
<td valign=\"TOP\">Number</td>
<td valign=\"TOP\">WIDTH_CONDENSED, WIDTH_REGULAR,<br>WIDTH_EXTENDED</td>
<td valign=\"TOP\">WIDTH_REGULAR</td>
</tr>
<tr style=\"background-color:#eeeeff\">
<td valign=\"TOP\">{@link #POSTURE}</td>
<td valign=\"TOP\">Number</td>
<td valign=\"TOP\">POSTURE_REGULAR, POSTURE_OBLIQUE</td>
<td valign=\"TOP\">POSTURE_REGULAR</td>
</tr>
<tr>
<td valign=\"TOP\">{@link #SIZE}</td>
<td valign=\"TOP\">Number</td>
<td valign=\"TOP\">none</td>
<td valign=\"TOP\">12.0</td>
</tr>
<tr style=\"background-color:#eeeeff\">
<td valign=\"TOP\">{@link #TRANSFORM}</td>
<td valign=\"TOP\">{@link TransformAttribute}</td>
<td valign=\"TOP\">See TransformAttribute {@link TransformAttribute#IDENTITY IDENTITY}</td>
<td valign=\"TOP\">TransformAttribute.IDENTITY</td>
</tr>
<tr>
<td valign=\"TOP\">{@link #SUPERSCRIPT}</td>
<td valign=\"TOP\">Integer</td>
<td valign=\"TOP\">SUPERSCRIPT_SUPER, SUPERSCRIPT_SUB</td>
<td valign=\"TOP\">0 (use the standard glyphs and metrics)</td>
</tr>
<tr style=\"background-color:#eeeeff\">
<td valign=\"TOP\">{@link #FONT}</td>
<td valign=\"TOP\">{@link java.awt.Font}</td>
<td valign=\"TOP\">none</td>
<td valign=\"TOP\">null (do not override font resolution)</td>
</tr>
<tr>
<td valign=\"TOP\">{@link #CHAR_REPLACEMENT}</td>
<td valign=\"TOP\">{@link GraphicAttribute}</td>
<td valign=\"TOP\">none</td>
<td valign=\"TOP\">null (draw text using font glyphs)</td>
</tr>
<tr style=\"background-color:#eeeeff\">
<td valign=\"TOP\">{@link #FOREGROUND}</td>
<td valign=\"TOP\">{@link java.awt.Paint}</td>
<td valign=\"TOP\">none</td>
<td valign=\"TOP\">null (use current graphics paint)</td>
</tr>
<tr>
<td valign=\"TOP\">{@link #BACKGROUND}</td>
<td valign=\"TOP\">{@link java.awt.Paint}</td>
<td valign=\"TOP\">none</td>
<td valign=\"TOP\">null (do not render background)</td>
</tr>
<tr style=\"background-color:#eeeeff\">
<td valign=\"TOP\">{@link #UNDERLINE}</td>
<td valign=\"TOP\">Integer</td>
<td valign=\"TOP\">UNDERLINE_ON</td>
<td valign=\"TOP\">-1 (do not render underline)</td>
</tr>
<tr>
<td valign=\"TOP\">{@link #STRIKETHROUGH}</td>
<td valign=\"TOP\">Boolean</td>
<td valign=\"TOP\">STRIKETHROUGH_ON</td>
<td valign=\"TOP\">false (do not render strikethrough)</td>
</tr>
<tr style=\"background-color:#eeeeff\">
<td valign=\"TOP\">{@link #RUN_DIRECTION}</td>
<td valign=\"TOP\">Boolean</td>
<td valign=\"TOP\">RUN_DIRECTION_LTR<br>RUN_DIRECTION_RTL</td>
<td valign=\"TOP\">null (use {@link java.text.Bidi} standard default)</td>
</tr>
<tr>
<td valign=\"TOP\">{@link #BIDI_EMBEDDING}</td>
<td valign=\"TOP\">Integer</td>
<td valign=\"TOP\">none</td>
<td valign=\"TOP\">0 (use base line direction)</td>
</tr>
<tr style=\"background-color:#eeeeff\">
<td valign=\"TOP\">{@link #JUSTIFICATION}</td>
<td valign=\"TOP\">Number</td>
<td valign=\"TOP\">JUSTIFICATION_FULL</td>
<td valign=\"TOP\">JUSTIFICATION_FULL</td>
</tr>
<tr>
<td valign=\"TOP\">{@link #INPUT_METHOD_HIGHLIGHT}</td>
<td valign=\"TOP\">{@link java.awt.im.InputMethodHighlight},<br>{@link java.text.Annotation}</td>
<td valign=\"TOP\">(see class)</td>
<td valign=\"TOP\">null (do not apply input highlighting)</td>
</tr>
<tr style=\"background-color:#eeeeff\">
<td valign=\"TOP\">{@link #INPUT_METHOD_UNDERLINE}</td>
<td valign=\"TOP\">Integer</td>
<td valign=\"TOP\">UNDERLINE_LOW_ONE_PIXEL,<br>UNDERLINE_LOW_TWO_PIXEL</td>
<td valign=\"TOP\">-1 (do not render underline)</td>
</tr>
<tr>
<td valign=\"TOP\">{@link #SWAP_COLORS}</td>
<td valign=\"TOP\">Boolean</td>
<td valign=\"TOP\">SWAP_COLORS_ON</td>
<td valign=\"TOP\">false (do not swap colors)</td>
</tr>
<tr style=\"background-color:#eeeeff\">
<td valign=\"TOP\">{@link #NUMERIC_SHAPING}</td>
<td valign=\"TOP\">{@link java.awt.font.NumericShaper}</td>
<td valign=\"TOP\">none</td>
<td valign=\"TOP\">null (do not shape digits)</td>
</tr>
<tr>
<td valign=\"TOP\">{@link #KERNING}</td>
<td valign=\"TOP\">Integer</td>
<td valign=\"TOP\">KERNING_ON</td>
<td valign=\"TOP\">0 (do not request kerning)</td>
</tr>
<tr style=\"background-color:#eeeeff\">
<td valign=\"TOP\">{@link #LIGATURES}</td>
<td valign=\"TOP\">Integer</td>
<td valign=\"TOP\">LIGATURES_ON</td>
<td valign=\"TOP\">0 (do not form optional ligatures)</td>
</tr>
<tr>
<td valign=\"TOP\">{@link #TRACKING}</td>
<td valign=\"TOP\">Number</td>
<td valign=\"TOP\">TRACKING_LOOSE, TRACKING_TIGHT</td>
<td valign=\"TOP\">0 (do not add tracking)</td>
</tr>
</table>

@see java.awt.Font
@see java.awt.font.TextLayout
@see java.text.AttributedCharacterIterator
"
      classrelation 3013634 // <generalisation>
	relation 3013634 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3013634 // <generalisation>
	  b parent class_ref 866050 // Attribute
      end

      classrelation 3013762 // instanceMap (<unidirectional association>)
	relation 3013762 --->
	  a role_name "instanceMap" init_value " new HashMap<String, TextAttribute>(29)" class_relation const_relation private
	    comment " table of all instances in this class, used by readResolve
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, TextAttribute> ${name}${value};
"
	    classrelation_ref 3013762 // instanceMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 6477186 "TextAttribute"
	protected explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>TextAttribute</code> with the specified name.
@param name the attribute name to assign to this
<code>TextAttribute</code>
"
      end

      operation 6477314 "readResolve"
	protected return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves instances being deserialized to the predefined constants.
"
      end

      attribute 1537282 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 7744112784117861702L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility with Java 2 platform v1.2.
 1.2 will throw an InvalidObjectException if ever asked to
 deserialize INPUT_METHOD_UNDERLINE.
 This shouldn't happen in real life.
"
      end

      classrelation 3013890 // FAMILY (<unidirectional association>)
	relation 3013890 --->
	  a role_name "FAMILY" init_value "
        new TextAttribute(\"family\")" class_relation const_relation public
	    comment " For use with Font.


Attribute key for the font name.  Values are instances of
<b><code>String</code></b>.  The default value is
<code>\"Default\"</code>, which causes the platform default font
family to be used.

<p> The <code>Font</code> class defines constants for the logical
font names
{@link java.awt.Font#DIALOG DIALOG},
{@link java.awt.Font#DIALOG_INPUT DIALOG_INPUT},
{@link java.awt.Font#SANS_SERIF SANS_SERIF},
{@link java.awt.Font#SERIF SERIF}, and
{@link java.awt.Font#MONOSPACED MONOSPACED}.

<p>This defines the value passed as <code>name</code> to the
<code>Font</code> constructor.  Both logical and physical
font names are allowed. If a font with the requested name
is not found, the default font is used.

<p><em>Note:</em> This attribute is unfortunately misnamed, as
it specifies the face name and not just the family.  Thus
values such as \"Lucida Sans Bold\" will select that face if it
exists.  Note, though, that if the requested face does not
exist, the default will be used with <em>regular</em> weight.
The \"Bold\" in the name is part of the face name, not a separate
request that the font's weight be bold.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3013890 // FAMILY (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3014018 // WEIGHT (<unidirectional association>)
	relation 3014018 --->
	  a role_name "WEIGHT" init_value "
        new TextAttribute(\"weight\")" class_relation const_relation public
	    comment "
Attribute key for the weight of a font.  Values are instances
of <b><code>Number</code></b>.  The default value is
<code>WEIGHT_REGULAR</code>.

<p>Several constant values are provided, see {@link
#WEIGHT_EXTRA_LIGHT}, {@link #WEIGHT_LIGHT}, {@link
#WEIGHT_DEMILIGHT}, {@link #WEIGHT_REGULAR}, {@link
#WEIGHT_SEMIBOLD}, {@link #WEIGHT_MEDIUM}, {@link
#WEIGHT_DEMIBOLD}, {@link #WEIGHT_BOLD}, {@link #WEIGHT_HEAVY},
{@link #WEIGHT_EXTRABOLD}, and {@link #WEIGHT_ULTRABOLD}.  The
value <code>WEIGHT_BOLD</code> corresponds to the
style value <code>Font.BOLD</code> as passed to the
<code>Font</code> constructor.

<p>The value is roughly the ratio of the stem width to that of
the regular weight.

<p>The system can interpolate the provided value.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3014018 // WEIGHT (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3014146 // WEIGHT_EXTRA_LIGHT (<unidirectional association>)
	relation 3014146 --->
	  a role_name "WEIGHT_EXTRA_LIGHT" init_value "
        Float.valueOf(0.5f)" class_relation const_relation public
	    comment "
The lightest predefined weight.
@see #WEIGHT

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3014146 // WEIGHT_EXTRA_LIGHT (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3014274 // WEIGHT_LIGHT (<unidirectional association>)
	relation 3014274 --->
	  a role_name "WEIGHT_LIGHT" init_value "
        Float.valueOf(0.75f)" class_relation const_relation public
	    comment "
The standard light weight.
@see #WEIGHT

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3014274 // WEIGHT_LIGHT (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3014402 // WEIGHT_DEMILIGHT (<unidirectional association>)
	relation 3014402 --->
	  a role_name "WEIGHT_DEMILIGHT" init_value "
        Float.valueOf(0.875f)" class_relation const_relation public
	    comment "
An intermediate weight between <code>WEIGHT_LIGHT</code> and
<code>WEIGHT_STANDARD</code>.
@see #WEIGHT

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3014402 // WEIGHT_DEMILIGHT (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3014530 // WEIGHT_REGULAR (<unidirectional association>)
	relation 3014530 --->
	  a role_name "WEIGHT_REGULAR" init_value "
        Float.valueOf(1.0f)" class_relation const_relation public
	    comment "
The standard weight. This is the default value for <code>WEIGHT</code>.
@see #WEIGHT

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3014530 // WEIGHT_REGULAR (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3014658 // WEIGHT_SEMIBOLD (<unidirectional association>)
	relation 3014658 --->
	  a role_name "WEIGHT_SEMIBOLD" init_value "
        Float.valueOf(1.25f)" class_relation const_relation public
	    comment "
A moderately heavier weight than <code>WEIGHT_REGULAR</code>.
@see #WEIGHT

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3014658 // WEIGHT_SEMIBOLD (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3014786 // WEIGHT_MEDIUM (<unidirectional association>)
	relation 3014786 --->
	  a role_name "WEIGHT_MEDIUM" init_value "
        Float.valueOf(1.5f)" class_relation const_relation public
	    comment "
An intermediate weight between <code>WEIGHT_REGULAR</code> and
<code>WEIGHT_BOLD</code>.
@see #WEIGHT

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3014786 // WEIGHT_MEDIUM (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3014914 // WEIGHT_DEMIBOLD (<unidirectional association>)
	relation 3014914 --->
	  a role_name "WEIGHT_DEMIBOLD" init_value "
        Float.valueOf(1.75f)" class_relation const_relation public
	    comment "
A moderately lighter weight than <code>WEIGHT_BOLD</code>.
@see #WEIGHT

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3014914 // WEIGHT_DEMIBOLD (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3015042 // WEIGHT_BOLD (<unidirectional association>)
	relation 3015042 --->
	  a role_name "WEIGHT_BOLD" init_value "
        Float.valueOf(2.0f)" class_relation const_relation public
	    comment "
The standard bold weight.
@see #WEIGHT

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3015042 // WEIGHT_BOLD (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3015170 // WEIGHT_HEAVY (<unidirectional association>)
	relation 3015170 --->
	  a role_name "WEIGHT_HEAVY" init_value "
        Float.valueOf(2.25f)" class_relation const_relation public
	    comment "
A moderately heavier weight than <code>WEIGHT_BOLD</code>.
@see #WEIGHT

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3015170 // WEIGHT_HEAVY (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3015298 // WEIGHT_EXTRABOLD (<unidirectional association>)
	relation 3015298 --->
	  a role_name "WEIGHT_EXTRABOLD" init_value "
        Float.valueOf(2.5f)" class_relation const_relation public
	    comment "
An extra heavy weight.
@see #WEIGHT

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3015298 // WEIGHT_EXTRABOLD (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3015426 // WEIGHT_ULTRABOLD (<unidirectional association>)
	relation 3015426 --->
	  a role_name "WEIGHT_ULTRABOLD" init_value "
        Float.valueOf(2.75f)" class_relation const_relation public
	    comment "
The heaviest predefined weight.
@see #WEIGHT

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3015426 // WEIGHT_ULTRABOLD (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3015554 // WIDTH (<unidirectional association>)
	relation 3015554 --->
	  a role_name "WIDTH" init_value "
        new TextAttribute(\"width\")" class_relation const_relation public
	    comment "
Attribute key for the width of a font.  Values are instances of
<b><code>Number</code></b>.  The default value is
<code>WIDTH_REGULAR</code>.

<p>Several constant values are provided, see {@link
#WIDTH_CONDENSED}, {@link #WIDTH_SEMI_CONDENSED}, {@link
#WIDTH_REGULAR}, {@link #WIDTH_SEMI_EXTENDED}, {@link
#WIDTH_EXTENDED}.

<p>The value is roughly the ratio of the advance width to that
of the regular width.

<p>The system can interpolate the provided value.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3015554 // WIDTH (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3015682 // WIDTH_CONDENSED (<unidirectional association>)
	relation 3015682 --->
	  a role_name "WIDTH_CONDENSED" init_value "
        Float.valueOf(0.75f)" class_relation const_relation public
	    comment "
The most condensed predefined width.
@see #WIDTH

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3015682 // WIDTH_CONDENSED (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3015810 // WIDTH_SEMI_CONDENSED (<unidirectional association>)
	relation 3015810 --->
	  a role_name "WIDTH_SEMI_CONDENSED" init_value "
        Float.valueOf(0.875f)" class_relation const_relation public
	    comment "
A moderately condensed width.
@see #WIDTH

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3015810 // WIDTH_SEMI_CONDENSED (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3015938 // WIDTH_REGULAR (<unidirectional association>)
	relation 3015938 --->
	  a role_name "WIDTH_REGULAR" init_value "
        Float.valueOf(1.0f)" class_relation const_relation public
	    comment "
The standard width. This is the default value for
<code>WIDTH</code>.
@see #WIDTH

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3015938 // WIDTH_REGULAR (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3016066 // WIDTH_SEMI_EXTENDED (<unidirectional association>)
	relation 3016066 --->
	  a role_name "WIDTH_SEMI_EXTENDED" init_value "
        Float.valueOf(1.25f)" class_relation const_relation public
	    comment "
A moderately extended width.
@see #WIDTH

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3016066 // WIDTH_SEMI_EXTENDED (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3016194 // WIDTH_EXTENDED (<unidirectional association>)
	relation 3016194 --->
	  a role_name "WIDTH_EXTENDED" init_value "
        Float.valueOf(1.5f)" class_relation const_relation public
	    comment "
The most extended predefined width.
@see #WIDTH

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3016194 // WIDTH_EXTENDED (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3016322 // POSTURE (<unidirectional association>)
	relation 3016322 --->
	  a role_name "POSTURE" init_value "
        new TextAttribute(\"posture\")" class_relation const_relation public
	    comment "
Attribute key for the posture of a font.  Values are instances
of <b><code>Number</code></b>. The default value is
<code>POSTURE_REGULAR</code>.

<p>Two constant values are provided, {@link #POSTURE_REGULAR}
and {@link #POSTURE_OBLIQUE}. The value
<code>POSTURE_OBLIQUE</code> corresponds to the style value
<code>Font.ITALIC</code> as passed to the <code>Font</code>
constructor.

<p>The value is roughly the slope of the stems of the font,
expressed as the run over the rise.  Positive values lean right.

<p>The system can interpolate the provided value.

<p>This will affect the font's italic angle as returned by
<code>Font.getItalicAngle</code>.

@see java.awt.Font#getItalicAngle()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3016322 // POSTURE (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3016450 // POSTURE_REGULAR (<unidirectional association>)
	relation 3016450 --->
	  a role_name "POSTURE_REGULAR" init_value "
        Float.valueOf(0.0f)" class_relation const_relation public
	    comment "
The standard posture, upright.  This is the default value for
<code>POSTURE</code>.
@see #POSTURE

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3016450 // POSTURE_REGULAR (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3016578 // POSTURE_OBLIQUE (<unidirectional association>)
	relation 3016578 --->
	  a role_name "POSTURE_OBLIQUE" init_value "
        Float.valueOf(0.20f)" class_relation const_relation public
	    comment "
The standard italic posture.
@see #POSTURE

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3016578 // POSTURE_OBLIQUE (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3016706 // SIZE (<unidirectional association>)
	relation 3016706 --->
	  a role_name "SIZE" init_value "
        new TextAttribute(\"size\")" class_relation const_relation public
	    comment "
Attribute key for the font size.  Values are instances of
<b><code>Number</code></b>.  The default value is 12pt.

<p>This corresponds to the <code>size</code> parameter to the
<code>Font</code> constructor.

<p>Very large or small sizes will impact rendering performance,
and the rendering system might not render text at these sizes.
Negative sizes are illegal and result in the default size.

<p>Note that the appearance and metrics of a 12pt font with a
2x transform might be different than that of a 24 point font
with no transform.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3016706 // SIZE (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3016834 // TRANSFORM (<unidirectional association>)
	relation 3016834 --->
	  a role_name "TRANSFORM" init_value "
        new TextAttribute(\"transform\")" class_relation const_relation public
	    comment "
Attribute key for the transform of a font.  Values are
instances of <b><code>TransformAttribute</code></b>.  The
default value is <code>TransformAttribute.IDENTITY</code>.

<p>The <code>TransformAttribute</code> class defines the
constant {@link TransformAttribute#IDENTITY IDENTITY}.

<p>This corresponds to the transform passed to
<code>Font.deriveFont(AffineTransform)</code>.  Since that
transform is mutable and <code>TextAttribute</code> values must
not be, the <code>TransformAttribute</code> wrapper class is
used.

<p>The primary intent is to support scaling and skewing, though
other effects are possible.</p>

<p>Some transforms will cause the baseline to be rotated and/or
shifted.  The text and the baseline are transformed together so
that the text follows the new baseline.  For example, with text
on a horizontal baseline, the new baseline follows the
direction of the unit x vector passed through the
transform. Text metrics are measured against this new baseline.
So, for example, with other things being equal, text rendered
with a rotated TRANSFORM and an unrotated TRANSFORM will measure as
having the same ascent, descent, and advance.</p>

<p>In styled text, the baselines for each such run are aligned
one after the other to potentially create a non-linear baseline
for the entire run of text. For more information, see {@link
TextLayout#getLayoutPath}.</p>

@see TransformAttribute
@see java.awt.geom.AffineTransform

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3016834 // TRANSFORM (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3016962 // SUPERSCRIPT (<unidirectional association>)
	relation 3016962 --->
	  a role_name "SUPERSCRIPT" init_value "
        new TextAttribute(\"superscript\")" class_relation const_relation public
	    comment "
Attribute key for superscripting and subscripting.  Values are
instances of <b><code>Integer</code></b>.  The default value is
0, which means that no superscript or subscript is used.

<p>Two constant values are provided, see {@link
#SUPERSCRIPT_SUPER} and {@link #SUPERSCRIPT_SUB}.  These have
the values 1 and -1 respectively.  Values of
greater magnitude define greater levels of superscript or
subscripting, for example, 2 corresponds to super-superscript,
3 to super-super-superscript, and similarly for negative values
and subscript, up to a level of 7 (or -7).  Values beyond this
range are reserved; behavior is platform-dependent.

<p><code>SUPERSCRIPT</code> can
impact the ascent and descent of a font.  The ascent
and descent can never become negative, however.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3016962 // SUPERSCRIPT (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3017090 // SUPERSCRIPT_SUPER (<unidirectional association>)
	relation 3017090 --->
	  a role_name "SUPERSCRIPT_SUPER" init_value "
        Integer.valueOf(1)" class_relation const_relation public
	    comment "
Standard superscript.
@see #SUPERSCRIPT

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3017090 // SUPERSCRIPT_SUPER (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3017218 // SUPERSCRIPT_SUB (<unidirectional association>)
	relation 3017218 --->
	  a role_name "SUPERSCRIPT_SUB" init_value "
        Integer.valueOf(-1)" class_relation const_relation public
	    comment "
Standard subscript.
@see #SUPERSCRIPT

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3017218 // SUPERSCRIPT_SUB (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3017346 // FONT (<unidirectional association>)
	relation 3017346 --->
	  a role_name "FONT" init_value "
        new TextAttribute(\"font\")" class_relation const_relation public
	    comment "
Attribute key used to provide the font to use to render text.
Values are instances of {@link java.awt.Font}.  The default
value is null, indicating that normal resolution of a
<code>Font</code> from attributes should be performed.

<p><code>TextLayout</code> and
<code>AttributedCharacterIterator</code> work in terms of
<code>Maps</code> of <code>TextAttributes</code>.  Normally,
all the attributes are examined and used to select and
configure a <code>Font</code> instance.  If a <code>FONT</code>
attribute is present, though, its associated <code>Font</code>
will be used.  This provides a way for users to override the
resolution of font attributes into a <code>Font</code>, or
force use of a particular <code>Font</code> instance.  This
also allows users to specify subclasses of <code>Font</code> in
cases where a <code>Font</code> can be subclassed.

<p><code>FONT</code> is used for special situations where
clients already have a <code>Font</code> instance but still
need to use <code>Map</code>-based APIs.  Typically, there will
be no other attributes in the <code>Map</code> except the
<code>FONT</code> attribute.  With <code>Map</code>-based APIs
the common case is to specify all attributes individually, so
<code>FONT</code> is not needed or desireable.

<p>However, if both <code>FONT</code> and other attributes are
present in the <code>Map</code>, the rendering system will
merge the attributes defined in the <code>Font</code> with the
additional attributes.  This merging process classifies
<code>TextAttributes</code> into two groups.  One group, the
'primary' group, is considered fundamental to the selection and
metric behavior of a font.  These attributes are
<code>FAMILY</code>, <code>WEIGHT</code>, <code>WIDTH</code>,
<code>POSTURE</code>, <code>SIZE</code>,
<code>TRANSFORM</code>, <code>SUPERSCRIPT</code>, and
<code>TRACKING</code>. The other group, the 'secondary' group,
consists of all other defined attributes, with the exception of
<code>FONT</code> itself.

<p>To generate the new <code>Map</code>, first the
<code>Font</code> is obtained from the <code>FONT</code>
attribute, and <em>all</em> of its attributes extracted into a
new <code>Map</code>.  Then only the <em>secondary</em>
attributes from the original <code>Map</code> are added to
those in the new <code>Map</code>.  Thus the values of primary
attributes come solely from the <code>Font</code>, and the
values of secondary attributes originate with the
<code>Font</code> but can be overridden by other values in the
<code>Map</code>.

<p><em>Note:</em><code>Font's</code> <code>Map</code>-based
constructor and <code>deriveFont</code> methods do not process
the <code>FONT</code> attribute, as these are used to create
new <code>Font</code> objects.  Instead, {@link
java.awt.Font#getFont(Map) Font.getFont(Map)} should be used to
handle the <code>FONT</code> attribute.

@see java.awt.Font

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3017346 // FONT (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3017474 // CHAR_REPLACEMENT (<unidirectional association>)
	relation 3017474 --->
	  a role_name "CHAR_REPLACEMENT" init_value "
        new TextAttribute(\"char_replacement\")" class_relation const_relation public
	    comment "
Attribute key for a user-defined glyph to display in lieu
of the font's standard glyph for a character.  Values are
intances of GraphicAttribute.  The default value is null,
indicating that the standard glyphs provided by the font
should be used.

<p>This attribute is used to reserve space for a graphic or
other component embedded in a line of text.  It is required for
correct positioning of 'inline' components within a line when
bidirectional reordering (see {@link java.text.Bidi}) is
performed.  Each character (Unicode code point) will be
rendered using the provided GraphicAttribute. Typically, the
characters to which this attribute is applied should be
<code>&#92;uFFFC</code>.

<p>The GraphicAttribute determines the logical and visual
bounds of the text; the actual Font values are ignored.

@see GraphicAttribute

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3017474 // CHAR_REPLACEMENT (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3017602 // FOREGROUND (<unidirectional association>)
	relation 3017602 --->
	  a role_name "FOREGROUND" init_value "
        new TextAttribute(\"foreground\")" class_relation const_relation public
	    comment " Adornments added to text.


Attribute key for the paint used to render the text.  Values are
instances of <b><code>Paint</code></b>.  The default value is
null, indicating that the <code>Paint</code> set on the
<code>Graphics2D</code> at the time of rendering is used.

<p>Glyphs will be rendered using this
<code>Paint</code> regardless of the <code>Paint</code> value
set on the <code>Graphics</code> (but see {@link #SWAP_COLORS}).

@see java.awt.Paint
@see #SWAP_COLORS

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3017602 // FOREGROUND (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3017730 // BACKGROUND (<unidirectional association>)
	relation 3017730 --->
	  a role_name "BACKGROUND" init_value "
        new TextAttribute(\"background\")" class_relation const_relation public
	    comment "
Attribute key for the paint used to render the background of
the text.  Values are instances of <b><code>Paint</code></b>.
The default value is null, indicating that the background
should not be rendered.

<p>The logical bounds of the text will be filled using this
<code>Paint</code>, and then the text will be rendered on top
of it (but see {@link #SWAP_COLORS}).

<p>The visual bounds of the text is extended to include the
logical bounds, if necessary.  The outline is not affected.

@see java.awt.Paint
@see #SWAP_COLORS

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3017730 // BACKGROUND (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3017858 // UNDERLINE (<unidirectional association>)
	relation 3017858 --->
	  a role_name "UNDERLINE" init_value "
        new TextAttribute(\"underline\")" class_relation const_relation public
	    comment "
Attribute key for underline.  Values are instances of
<b><code>Integer</code></b>.  The default value is -1, which
means no underline.

<p>The constant value {@link #UNDERLINE_ON} is provided.

<p>The underline affects both the visual bounds and the outline
of the text.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3017858 // UNDERLINE (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3017986 // UNDERLINE_ON (<unidirectional association>)
	relation 3017986 --->
	  a role_name "UNDERLINE_ON" init_value "
        Integer.valueOf(0)" class_relation const_relation public
	    comment "
Standard underline.

@see #UNDERLINE

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3017986 // UNDERLINE_ON (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3018114 // STRIKETHROUGH (<unidirectional association>)
	relation 3018114 --->
	  a role_name "STRIKETHROUGH" init_value "
        new TextAttribute(\"strikethrough\")" class_relation const_relation public
	    comment "
Attribute key for strikethrough.  Values are instances of
<b><code>Boolean</code></b>.  The default value is
<code>false</code>, which means no strikethrough.

<p>The constant value {@link #STRIKETHROUGH_ON} is provided.

<p>The strikethrough affects both the visual bounds and the
outline of the text.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3018114 // STRIKETHROUGH (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3018242 // STRIKETHROUGH_ON (<unidirectional association>)
	relation 3018242 --->
	  a role_name "STRIKETHROUGH_ON" init_value "
        Boolean.TRUE" class_relation const_relation public
	    comment "
A single strikethrough.

@see #STRIKETHROUGH

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3018242 // STRIKETHROUGH_ON (<unidirectional association>)
	  b parent class_ref 315010 // Boolean
      end

      classrelation 3018370 // RUN_DIRECTION (<unidirectional association>)
	relation 3018370 --->
	  a role_name "RUN_DIRECTION" init_value "
        new TextAttribute(\"run_direction\")" class_relation const_relation public
	    comment " Attributes use to control layout of text on a line.


Attribute key for the run direction of the line.  Values are
instances of <b><code>Boolean</code></b>.  The default value is
null, which indicates that the standard Bidi algorithm for
determining run direction should be used with the value {@link
java.text.Bidi#DIRECTION_DEFAULT_LEFT_TO_RIGHT}.

<p>The constants {@link #RUN_DIRECTION_RTL} and {@link
#RUN_DIRECTION_LTR} are provided.

<p>This determines the value passed to the {@link
java.text.Bidi} constructor to select the primary direction of
the text in the paragraph.

<p><em>Note:</em> This attribute should have the same value for
all the text in a paragraph, otherwise the behavior is
undetermined.

@see java.text.Bidi

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3018370 // RUN_DIRECTION (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3018498 // RUN_DIRECTION_LTR (<unidirectional association>)
	relation 3018498 --->
	  a role_name "RUN_DIRECTION_LTR" init_value "
        Boolean.FALSE" class_relation const_relation public
	    comment "
Left-to-right run direction.
@see #RUN_DIRECTION

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3018498 // RUN_DIRECTION_LTR (<unidirectional association>)
	  b parent class_ref 315010 // Boolean
      end

      classrelation 3018626 // RUN_DIRECTION_RTL (<unidirectional association>)
	relation 3018626 --->
	  a role_name "RUN_DIRECTION_RTL" init_value "
        Boolean.TRUE" class_relation const_relation public
	    comment "
Right-to-left run direction.
@see #RUN_DIRECTION

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3018626 // RUN_DIRECTION_RTL (<unidirectional association>)
	  b parent class_ref 315010 // Boolean
      end

      classrelation 3018754 // BIDI_EMBEDDING (<unidirectional association>)
	relation 3018754 --->
	  a role_name "BIDI_EMBEDDING" init_value "
        new TextAttribute(\"bidi_embedding\")" class_relation const_relation public
	    comment "
Attribute key for the embedding level of the text.  Values are
instances of <b><code>Integer</code></b>.  The default value is
<code>null</code>, indicating that the the Bidirectional
algorithm should run without explicit embeddings.

<p>Positive values 1 through 61 are <em>embedding</em> levels,
negative values -1 through -61 are <em>override</em> levels.
The value 0 means that the base line direction is used.  These
levels are passed in the embedding levels array to the {@link
java.text.Bidi} constructor.

<p><em>Note:</em> When this attribute is present anywhere in
a paragraph, then any Unicode bidi control characters (RLO,
LRO, RLE, LRE, and PDF) in the paragraph are
disregarded, and runs of text where this attribute is not
present are treated as though it were present and had the value
0.

@see java.text.Bidi

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3018754 // BIDI_EMBEDDING (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3018882 // JUSTIFICATION (<unidirectional association>)
	relation 3018882 --->
	  a role_name "JUSTIFICATION" init_value "
        new TextAttribute(\"justification\")" class_relation const_relation public
	    comment "
Attribute key for the justification of a paragraph.  Values are
instances of <b><code>Number</code></b>.  The default value is
1, indicating that justification should use the full width
provided.  Values are pinned to the range [0..1].

<p>The constants {@link #JUSTIFICATION_FULL} and {@link
#JUSTIFICATION_NONE} are provided.

<p>Specifies the fraction of the extra space to use when
justification is requested on a <code>TextLayout</code>. For
example, if the line is 50 points wide and it is requested to
justify to 70 points, a value of 0.75 will pad to use
three-quarters of the remaining space, or 15 points, so that
the resulting line will be 65 points in length.

<p><em>Note:</em> This should have the same value for all the
text in a paragraph, otherwise the behavior is undetermined.

@see TextLayout#getJustifiedLayout

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3018882 // JUSTIFICATION (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3019010 // JUSTIFICATION_FULL (<unidirectional association>)
	relation 3019010 --->
	  a role_name "JUSTIFICATION_FULL" init_value "
        Float.valueOf(1.0f)" class_relation const_relation public
	    comment "
Justify the line to the full requested width.  This is the
default value for <code>JUSTIFICATION</code>.
@see #JUSTIFICATION

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3019010 // JUSTIFICATION_FULL (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3019138 // JUSTIFICATION_NONE (<unidirectional association>)
	relation 3019138 --->
	  a role_name "JUSTIFICATION_NONE" init_value "
        Float.valueOf(0.0f)" class_relation const_relation public
	    comment "
Do not allow the line to be justified.
@see #JUSTIFICATION

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3019138 // JUSTIFICATION_NONE (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3019266 // INPUT_METHOD_HIGHLIGHT (<unidirectional association>)
	relation 3019266 --->
	  a role_name "INPUT_METHOD_HIGHLIGHT" init_value "
        new TextAttribute(\"input method highlight\")" class_relation const_relation public
	    comment " For use by input method.


Attribute key for input method highlight styles.

<p>Values are instances of {@link
java.awt.im.InputMethodHighlight} or {@link
java.text.Annotation}.  The default value is <code>null</code>,
which means that input method styles should not be applied
before rendering.

<p>If adjacent runs of text with the same
<code>InputMethodHighlight</code> need to be rendered
separately, the <code>InputMethodHighlights</code> should be
wrapped in <code>Annotation</code> instances.

<p>Input method highlights are used while text is being
composed by an input method. Text editing components should
retain them even if they generally only deal with unstyled
text, and make them available to the drawing routines.

@see java.awt.Font
@see java.awt.im.InputMethodHighlight
@see java.text.Annotation

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3019266 // INPUT_METHOD_HIGHLIGHT (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3019394 // INPUT_METHOD_UNDERLINE (<unidirectional association>)
	relation 3019394 --->
	  a role_name "INPUT_METHOD_UNDERLINE" init_value "
        new TextAttribute(\"input method underline\")" class_relation const_relation public
	    comment "
Attribute key for input method underlines.  Values
are instances of <b><code>Integer</code></b>.  The default
value is <code>-1</code>, which means no underline.

<p>Several constant values are provided, see {@link
#UNDERLINE_LOW_ONE_PIXEL}, {@link #UNDERLINE_LOW_TWO_PIXEL},
{@link #UNDERLINE_LOW_DOTTED}, {@link #UNDERLINE_LOW_GRAY}, and
{@link #UNDERLINE_LOW_DASHED}.

<p>This may be used in conjunction with {@link #UNDERLINE} if
desired.  The primary purpose is for use by input methods.
Other use of these underlines for simple ornamentation might
confuse users.

<p>The input method underline affects both the visual bounds and
the outline of the text.

@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3019394 // INPUT_METHOD_UNDERLINE (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3019522 // UNDERLINE_LOW_ONE_PIXEL (<unidirectional association>)
	relation 3019522 --->
	  a role_name "UNDERLINE_LOW_ONE_PIXEL" init_value "
        Integer.valueOf(1)" class_relation const_relation public
	    comment "
Single pixel solid low underline.
@see #INPUT_METHOD_UNDERLINE
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3019522 // UNDERLINE_LOW_ONE_PIXEL (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3019650 // UNDERLINE_LOW_TWO_PIXEL (<unidirectional association>)
	relation 3019650 --->
	  a role_name "UNDERLINE_LOW_TWO_PIXEL" init_value "
        Integer.valueOf(2)" class_relation const_relation public
	    comment "
Double pixel solid low underline.
@see #INPUT_METHOD_UNDERLINE
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3019650 // UNDERLINE_LOW_TWO_PIXEL (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3019778 // UNDERLINE_LOW_DOTTED (<unidirectional association>)
	relation 3019778 --->
	  a role_name "UNDERLINE_LOW_DOTTED" init_value "
        Integer.valueOf(3)" class_relation const_relation public
	    comment "
Single pixel dotted low underline.
@see #INPUT_METHOD_UNDERLINE
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3019778 // UNDERLINE_LOW_DOTTED (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3019906 // UNDERLINE_LOW_GRAY (<unidirectional association>)
	relation 3019906 --->
	  a role_name "UNDERLINE_LOW_GRAY" init_value "
        Integer.valueOf(4)" class_relation const_relation public
	    comment "
Double pixel gray low underline.
@see #INPUT_METHOD_UNDERLINE
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3019906 // UNDERLINE_LOW_GRAY (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3020034 // UNDERLINE_LOW_DASHED (<unidirectional association>)
	relation 3020034 --->
	  a role_name "UNDERLINE_LOW_DASHED" init_value "
        Integer.valueOf(5)" class_relation const_relation public
	    comment "
Single pixel dashed low underline.
@see #INPUT_METHOD_UNDERLINE
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3020034 // UNDERLINE_LOW_DASHED (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3020162 // SWAP_COLORS (<unidirectional association>)
	relation 3020162 --->
	  a role_name "SWAP_COLORS" init_value "
        new TextAttribute(\"swap_colors\")" class_relation const_relation public
	    comment "
Attribute key for swapping foreground and background
<code>Paints</code>.  Values are instances of
<b><code>Boolean</code></b>.  The default value is
<code>false</code>, which means do not swap colors.

<p>The constant value {@link #SWAP_COLORS_ON} is defined.

<p>If the {@link #FOREGROUND} attribute is set, its
<code>Paint</code> will be used as the background, otherwise
the <code>Paint</code> currently on the <code>Graphics</code>
will be used.  If the {@link #BACKGROUND} attribute is set, its
<code>Paint</code> will be used as the foreground, otherwise
the system will find a contrasting color to the
(resolved) background so that the text will be visible.

@see #FOREGROUND
@see #BACKGROUND

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3020162 // SWAP_COLORS (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3020290 // SWAP_COLORS_ON (<unidirectional association>)
	relation 3020290 --->
	  a role_name "SWAP_COLORS_ON" init_value "
        Boolean.TRUE" class_relation const_relation public
	    comment "
Swap foreground and background.
@see #SWAP_COLORS
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3020290 // SWAP_COLORS_ON (<unidirectional association>)
	  b parent class_ref 315010 // Boolean
      end

      classrelation 3020418 // NUMERIC_SHAPING (<unidirectional association>)
	relation 3020418 --->
	  a role_name "NUMERIC_SHAPING" init_value "
        new TextAttribute(\"numeric_shaping\")" class_relation const_relation public
	    comment "
Attribute key for converting ASCII decimal digits to other
decimal ranges.  Values are instances of {@link NumericShaper}.
The default is <code>null</code>, which means do not perform
numeric shaping.

<p>When a numeric shaper is defined, the text is first
processed by the shaper before any other analysis of the text
is performed.

<p><em>Note:</em> This should have the same value for all the
text in the paragraph, otherwise the behavior is undetermined.

@see NumericShaper
@since 1.4

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3020418 // NUMERIC_SHAPING (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3020546 // KERNING (<unidirectional association>)
	relation 3020546 --->
	  a role_name "KERNING" init_value "
        new TextAttribute(\"kerning\")" class_relation const_relation public
	    comment "
Attribute key to request kerning. Values are instances of
<b><code>Integer</code></b>.  The default value is
<code>0</code>, which does not request kerning.

<p>The constant value {@link #KERNING_ON} is provided.

<p>The default advances of single characters are not
appropriate for some character sequences, for example \"To\" or
\"AWAY\".  Without kerning the adjacent characters appear to be
separated by too much space.  Kerning causes selected sequences
of characters to be spaced differently for a more pleasing
visual appearance.

@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3020546 // KERNING (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3020674 // KERNING_ON (<unidirectional association>)
	relation 3020674 --->
	  a role_name "KERNING_ON" init_value "
        Integer.valueOf(1)" class_relation const_relation public
	    comment "
Request standard kerning.
@see #KERNING
@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3020674 // KERNING_ON (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3020802 // LIGATURES (<unidirectional association>)
	relation 3020802 --->
	  a role_name "LIGATURES" init_value "
        new TextAttribute(\"ligatures\")" class_relation const_relation public
	    comment "
Attribute key for enabling optional ligatures. Values are
instances of <b><code>Integer</code></b>.  The default value is
<code>0</code>, which means do not use optional ligatures.

<p>The constant value {@link #LIGATURES_ON} is defined.

<p>Ligatures required by the writing system are always enabled.

@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3020802 // LIGATURES (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3020930 // LIGATURES_ON (<unidirectional association>)
	relation 3020930 --->
	  a role_name "LIGATURES_ON" init_value "
        Integer.valueOf(1)" class_relation const_relation public
	    comment "
Request standard optional ligatures.
@see #LIGATURES
@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3020930 // LIGATURES_ON (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3021058 // TRACKING (<unidirectional association>)
	relation 3021058 --->
	  a role_name "TRACKING" init_value "
        new TextAttribute(\"tracking\")" class_relation const_relation public
	    comment "
Attribute key to control tracking.  Values are instances of
<b><code>Number</code></b>.  The default value is
<code>0</code>, which means no additional tracking.

<p>The constant values {@link #TRACKING_TIGHT} and {@link
#TRACKING_LOOSE} are provided.

<p>The tracking value is multiplied by the font point size and
passed through the font transform to determine an additional
amount to add to the advance of each glyph cluster.  Positive
tracking values will inhibit formation of optional ligatures.
Tracking values are typically between <code>-0.1</code> and
<code>0.3</code>; values outside this range are generally not
desireable.

@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3021058 // TRACKING (<unidirectional association>)
	  b parent class_ref 865922 // TextAttribute
      end

      classrelation 3021186 // TRACKING_TIGHT (<unidirectional association>)
	relation 3021186 --->
	  a role_name "TRACKING_TIGHT" init_value "
        Float.valueOf(-.04f)" class_relation const_relation public
	    comment "
Perform tight tracking.
@see #TRACKING
@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3021186 // TRACKING_TIGHT (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end

      classrelation 3021314 // TRACKING_LOOSE (<unidirectional association>)
	relation 3021314 --->
	  a role_name "TRACKING_LOOSE" init_value "
        Float.valueOf(.04f)" class_relation const_relation public
	    comment "
Perform loose tracking.
@see #TRACKING
@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3021314 // TRACKING_LOOSE (<unidirectional association>)
	  b parent class_ref 889218 // Float
      end
    end

    class 866178 "FontRenderContext"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "  The <code>FontRenderContext</code> class is a container for the
  information needed to correctly measure text.  The measurement of text
  can vary because of rules that map outlines to pixels, and rendering
  hints provided by an application.
  <p>
  One such piece of information is a transform that scales
  typographical points to pixels. (A point is defined to be exactly 1/72
  of an inch, which is slightly different than
  the traditional mechanical measurement of a point.)  A character that
  is rendered at 12pt on a 600dpi device might have a different size
  than the same character rendered at 12pt on a 72dpi device because of
  such factors as rounding to pixel boundaries and hints that the font
  designer may have specified.
  <p>
  Anti-aliasing and Fractional-metrics specified by an application can also
  affect the size of a character because of rounding to pixel
  boundaries.
  <p>
  Typically, instances of <code>FontRenderContext</code> are
  obtained from a {@link java.awt.Graphics2D Graphics2D} object.  A
  <code>FontRenderContext</code> which is directly constructed will
  most likely not represent any actual graphics device, and may lead
  to unexpected or incorrect results.
  @see java.awt.RenderingHints#KEY_TEXT_ANTIALIASING
  @see java.awt.RenderingHints#KEY_FRACTIONALMETRICS
  @see java.awt.Graphics2D#getFontRenderContext()
  @see java.awt.font.LineMetrics
"
      classrelation 3010050 // tx (<unidirectional association>)
	relation 3010050 --->
	  a role_name "tx" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3010050 // tx (<unidirectional association>)
	  b parent class_ref 381058 // AffineTransform
      end

      classrelation 3010178 // aaHintValue (<unidirectional association>)
	relation 3010178 --->
	  a role_name "aaHintValue" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3010178 // aaHintValue (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3010306 // fmHintValue (<unidirectional association>)
	relation 3010306 --->
	  a role_name "fmHintValue" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3010306 // fmHintValue (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1512962 "defaulting"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6453250 "FontRenderContext"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>FontRenderContext</code>
object.

"
      end

      operation 6453378 "FontRenderContext"
	public explicit_return_type ""
	nparams 3
	  param inout name "tx" type class_ref 381058 // AffineTransform
	  param inout name "isAntiAliased" explicit_type "boolean"
	  param inout name "usesFractionalMetrics" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FontRenderContext</code> object from an
optional {@link AffineTransform} and two <code>boolean</code>
values that determine if the newly constructed object has
anti-aliasing or fractional metrics.
In each case the boolean values <CODE>true</CODE> and <CODE>false</CODE>
correspond to the rendering hint values <CODE>ON</CODE> and
<CODE>OFF</CODE> respectively.
<p>
To specify other hint values, use the constructor which
specifies the rendering hint values as parameters :
{@link #FontRenderContext(AffineTransform, Object, Object)}.
@param tx the transform which is used to scale typographical points
to pixels in this <code>FontRenderContext</code>.  If null, an
identity transform is used.
@param isAntiAliased determines if the newly constructed object
has anti-aliasing.
@param usesFractionalMetrics determines if the newly constructed
object has fractional metrics.
"
      end

      operation 6453506 "FontRenderContext"
	public explicit_return_type ""
	nparams 3
	  param inout name "tx" type class_ref 381058 // AffineTransform
	  param inout name "aaHint" type class_ref 129538 // Object
	  param inout name "fmHint" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FontRenderContext</code> object from an
optional {@link AffineTransform} and two <code>Object</code>
values that determine if the newly constructed object has
anti-aliasing or fractional metrics.
@param tx the transform which is used to scale typographical points
to pixels in this <code>FontRenderContext</code>.  If null, an
identity transform is used.
@param aaHint - one of the text antialiasing rendering hint values
defined in {@link java.awt.RenderingHints java.awt.RenderingHints}.
Any other value will throw <code>IllegalArgumentException</code>.
{@link java.awt.RenderingHints#VALUE_TEXT_ANTIALIAS_DEFAULT VALUE_TEXT_ANTIALIAS_DEFAULT}
may be specified, in which case the mode used is implementation
dependent.
@param fmHint - one of the text fractional rendering hint values defined
in {@link java.awt.RenderingHints java.awt.RenderingHints}.
{@link java.awt.RenderingHints#VALUE_FRACTIONALMETRICS_DEFAULT VALUE_FRACTIONALMETRICS_DEFAULT}
may be specified, in which case the mode used is implementation
dependent.
Any other value will throw <code>IllegalArgumentException</code>
@throws IllegalArgumentException if the hints are not one of the
legal values.
@since 1.6
"
      end

      operation 6453634 "isTransformed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not this <code>FontRenderContext</code> object
measures text in a transformed render context.
@return  <code>true</code> if this <code>FontRenderContext</code>
         object has a non-identity AffineTransform attribute.
         <code>false</code> otherwise.
@see     java.awt.font.FontRenderContext#getTransform
@since   1.6
"
      end

      operation 6453762 "getTransformType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the integer type of the affine transform for this
<code>FontRenderContext</code> as specified by
{@link java.awt.geom.AffineTransform#getType()}
@return the type of the transform.
@see AffineTransform
@since 1.6
"
      end

      operation 6453890 "getTransform"
	public return_type class_ref 381058 // AffineTransform
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Gets the transform that is used to scale typographical points
  to pixels in this <code>FontRenderContext</code>.
  @return the <code>AffineTransform</code> of this
   <code>FontRenderContext</code>.
  @see AffineTransform
"
      end

      operation 6454018 "isAntiAliased"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a boolean which indicates whether or not some form of
antialiasing is specified by this <code>FontRenderContext</code>.
Call {@link #getAntiAliasingHint() getAntiAliasingHint()}
for the specific rendering hint value.
  @return    <code>true</code>, if text is anti-aliased in this
  <code>FontRenderContext</code>; <code>false</code> otherwise.
  @see        java.awt.RenderingHints#KEY_TEXT_ANTIALIASING
  @see #FontRenderContext(AffineTransform,boolean,boolean)
  @see #FontRenderContext(AffineTransform,Object,Object)
"
      end

      operation 6454146 "usesFractionalMetrics"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a boolean which whether text fractional metrics mode
is used in this <code>FontRenderContext</code>.
Call {@link #getFractionalMetricsHint() getFractionalMetricsHint()}
to obtain the corresponding rendering hint value.
  @return    <code>true</code>, if layout should be performed with
  fractional metrics; <code>false</code> otherwise.
              in this <code>FontRenderContext</code>.
  @see java.awt.RenderingHints#KEY_FRACTIONALMETRICS
  @see #FontRenderContext(AffineTransform,boolean,boolean)
  @see #FontRenderContext(AffineTransform,Object,Object)
"
      end

      operation 6454274 "getAntiAliasingHint"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the text anti-aliasing rendering mode hint used in this
<code>FontRenderContext</code>.
This will be one of the text antialiasing rendering hint values
defined in {@link java.awt.RenderingHints java.awt.RenderingHints}.
@return  text anti-aliasing rendering mode hint used in this
<code>FontRenderContext</code>.
@since 1.6
"
      end

      operation 6454402 "getFractionalMetricsHint"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the text fractional metrics rendering mode hint used in this
<code>FontRenderContext</code>.
This will be one of the text fractional metrics rendering hint values
defined in {@link java.awt.RenderingHints java.awt.RenderingHints}.
@return the text fractional metrics rendering mode hint used in this
<code>FontRenderContext</code>.
@since 1.6
"
      end

      operation 6454530 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if obj is an instance of FontRenderContext and has the same
transform, antialiasing, and fractional metrics values as this.
@param obj the object to test for equality
@return <code>true</code> if the specified object is equal to
        this <code>FontRenderContext</code>; <code>false</code>
        otherwise.
"
      end

      operation 6454658 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "rhs" type class_ref 866178 // FontRenderContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if rhs has the same transform, antialiasing,
and fractional metrics values as this.
@param rhs the <code>FontRenderContext</code> to test for equality
@return <code>true</code> if <code>rhs</code> is equal to
        this <code>FontRenderContext</code>; <code>false</code>
        otherwise.
@since 1.4
"
      end

      operation 6454786 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a hashcode for this FontRenderContext.
"
      end
    end

    class 866306 "LineMetrics"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>LineMetrics</code> class allows access to the
metrics needed to layout characters along a line
and to layout of a set of lines.  A <code>LineMetrics</code>
object encapsulates the measurement information associated
with a run of text.
<p>
Fonts can have different metrics for different ranges of
characters.  The <code>getLineMetrics</code> methods of
{@link java.awt.Font Font} take some text as an argument
and return a <code>LineMetrics</code> object describing the
metrics of the initial number of characters in that text, as
returned by {@link #getNumChars}.
"
      operation 6464386 "getNumChars"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of characters (<code>char</code> values) in the text whose
metrics are encapsulated by this <code>LineMetrics</code>
object.
@return the number of characters (<code>char</code> values) in the text with which
        this <code>LineMetrics</code> was created.
"
      end

      operation 6464514 "getAscent"
	abstract public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ascent of the text.  The ascent
is the distance from the baseline
to the ascender line.  The ascent usually represents the
the height of the capital letters of the text.  Some characters
can extend above the ascender line.
@return the ascent of the text.
"
      end

      operation 6464642 "getDescent"
	abstract public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the descent of the text.  The descent
is the distance from the baseline
to the descender line.  The descent usually represents
the distance to the bottom of lower case letters like
'p'.  Some characters can extend below the descender
line.
@return the descent of the text.
"
      end

      operation 6464770 "getLeading"
	abstract public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the leading of the text. The
leading is the recommended
distance from the bottom of the descender line to the
top of the next line.
@return the leading of the text.
"
      end

      operation 6464898 "getHeight"
	abstract public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the height of the text.  The
height is equal to the sum of the ascent, the
descent and the leading.
@return the height of the text.
"
      end

      operation 6465026 "getBaselineIndex"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the baseline index of the text.
The index is one of
{@link java.awt.Font#ROMAN_BASELINE ROMAN_BASELINE},
{@link java.awt.Font#CENTER_BASELINE CENTER_BASELINE},
{@link java.awt.Font#HANGING_BASELINE HANGING_BASELINE}.
@return the baseline of the text.
"
      end

      operation 6465154 "getBaselineOffsets"
	abstract public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the baseline offsets of the text,
relative to the baseline of the text.  The
offsets are indexed by baseline index.  For
example, if the baseline index is
<code>CENTER_BASELINE</code> then
<code>offsets[HANGING_BASELINE]</code> is usually
negative, <code>offsets[CENTER_BASELINE]</code>
is zero, and <code>offsets[ROMAN_BASELINE]</code>
is usually positive.
@return the baseline offsets of the text.
"
      end

      operation 6465282 "getStrikethroughOffset"
	abstract public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the position of the strike-through line
relative to the baseline.
@return the position of the strike-through line.
"
      end

      operation 6465410 "getStrikethroughThickness"
	abstract public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thickness of the strike-through line.
@return the thickness of the strike-through line.
"
      end

      operation 6465538 "getUnderlineOffset"
	abstract public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the position of the underline relative to
the baseline.
@return the position of the underline.
"
      end

      operation 6465666 "getUnderlineThickness"
	abstract public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thickness of the underline.
@return the thickness of the underline.
"
      end
    end

    class 866434 "GlyphVector"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>GlyphVector</code> object is a collection of glyphs
containing geometric information for the placement of each glyph
in a transformed coordinate space which corresponds to the
device on which the <code>GlyphVector</code> is ultimately
displayed.
<p>
The <code>GlyphVector</code> does not attempt any interpretation of
the sequence of glyphs it contains.  Relationships between adjacent
glyphs in sequence are solely used to determine the placement of
the glyphs in the visual coordinate space.
<p>
Instances of <code>GlyphVector</code> are created by a {@link Font}.
<p>
In a text processing application that can cache intermediate
representations of text, creation and subsequent caching of a
<code>GlyphVector</code> for use during rendering is the fastest
method to present the visual representation of characters to a user.
<p>
A <code>GlyphVector</code> is associated with exactly one
<code>Font</code>, and can provide data useful only in relation to
this <code>Font</code>.  In addition, metrics obtained from a
<code>GlyphVector</code> are not generally geometrically scaleable
since the pixelization and spacing are dependent on grid-fitting
algorithms within a <code>Font</code>.  To facilitate accurate
measurement of a <code>GlyphVector</code> and its component
glyphs, you must specify a scaling transform, anti-alias mode, and
fractional metrics mode when creating the <code>GlyphVector</code>.
These characteristics can be derived from the destination device.
<p>
For each glyph in the <code>GlyphVector</code>, you can obtain:
<ul>
<li>the position of the glyph
<li>the transform associated with the glyph
<li>the metrics of the glyph in the context of the
  <code>GlyphVector</code>.  The metrics of the glyph may be
  different under different transforms, application specified
  rendering hints, and the specific instance of the glyph within
  the <code>GlyphVector</code>.
</ul>
<p>
Altering the data used to create the <code>GlyphVector</code> does not
alter the state of the <code>GlyphVector</code>.
<p>
Methods are provided to adjust the positions of the glyphs
within the <code>GlyphVector</code>.  These methods are most
appropriate for applications that are performing justification
operations for the presentation of the glyphs.
<p>
Methods are provided to transform individual glyphs within the
<code>GlyphVector</code>.  These methods are primarily useful for
special effects.
<p>
Methods are provided to return both the visual, logical, and pixel bounds
of the entire <code>GlyphVector</code> or of individual glyphs within
the <code>GlyphVector</code>.
<p>
Methods are provided to return a {@link Shape} for the
<code>GlyphVector</code>, and for individual glyphs within the
<code>GlyphVector</code>.
@see Font
@see GlyphMetrics
@see TextLayout
@author Charlton Innovations, Inc.
"
      classrelation 3010562 // <realization>
	relation 3010562 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3010562 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      operation 6456962 "getFont"
	abstract public return_type class_ref 340354 // Font
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " methods associated with creation-time state


Returns the <code>Font</code> associated with this
<code>GlyphVector</code>.
@return <code>Font</code> used to create this
<code>GlyphVector</code>.
@see Font
"
      end

      operation 6457090 "getFontRenderContext"
	abstract public return_type class_ref 866178 // FontRenderContext
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link FontRenderContext} associated with this
<code>GlyphVector</code>.
@return <code>FontRenderContext</code> used to create this
<code>GlyphVector</code>.
@see FontRenderContext
@see Font
"
      end

      operation 6457218 "performDefaultLayout"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " methods associated with the GlyphVector as a whole


Assigns default positions to each glyph in this
<code>GlyphVector</code>. This can destroy information
generated during initial layout of this <code>GlyphVector</code>.
"
      end

      operation 6457346 "getNumGlyphs"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of glyphs in this <code>GlyphVector</code>.
@return number of glyphs in this <code>GlyphVector</code>.
"
      end

      operation 6457474 "getGlyphCode"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "glyphIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the glyphcode of the specified glyph.
This return value is meaningless to anything other
than the <code>Font</code> object that created this
<code>GlyphVector</code>.
@param glyphIndex the index into this <code>GlyphVector</code>
that corresponds to the glyph from which to retrieve the
glyphcode.
@return the glyphcode of the glyph at the specified
<code>glyphIndex</code>.
@throws IndexOutOfBoundsException if <code>glyphIndex</code>
is less than 0 or greater than or equal to the
number of glyphs in this <code>GlyphVector</code>
"
      end

      operation 6457602 "getGlyphCodes"
	abstract public explicit_return_type "int"
	nparams 3
	  param in name "beginGlyphIndex" explicit_type "int"
	  param in name "numEntries" explicit_type "int"
	  param inout name "codeReturn" explicit_type "int"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of glyphcodes for the specified glyphs.
The contents of this return value are meaningless to anything other
than the <code>Font</code> used to create this
<code>GlyphVector</code>.  This method is used
for convenience and performance when processing glyphcodes.
If no array is passed in, a new array is created.
@param beginGlyphIndex the index into this
  <code>GlyphVector</code> at which to start retrieving glyphcodes
@param numEntries the number of glyphcodes to retrieve
@param codeReturn the array that receives the glyphcodes and is
  then returned
@return an array of glyphcodes for the specified glyphs.
@throws IllegalArgumentException if <code>numEntries</code> is
  less than 0
@throws IndexOutOfBoundsException if <code>beginGlyphIndex</code>
  is less than 0
@throws IndexOutOfBoundsException if the sum of
  <code>beginGlyphIndex</code> and <code>numEntries</code> is
  greater than the number of glyphs in this
  <code>GlyphVector</code>
"
      end

      operation 6457730 "getGlyphCharIndex"
	public explicit_return_type "int"
	nparams 1
	  param in name "glyphIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character index of the specified glyph.
The character index is the index of the first logical
character represented by the glyph.  The default
implementation assumes a one-to-one, left-to-right mapping
of glyphs to characters.
@param glyphIndex the index of the glyph
@return the index of the first character represented by the glyph
@since 1.4
"
      end

      operation 6457858 "getGlyphCharIndices"
	public explicit_return_type "int"
	nparams 3
	  param in name "beginGlyphIndex" explicit_type "int"
	  param in name "numEntries" explicit_type "int"
	  param inout name "codeReturn" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character indices of the specified glyphs.
The character index is the index of the first logical
character represented by the glyph.  Indices are returned
in glyph order.  The default implementation invokes
getGlyphCharIndex for each glyph, and subclassers will probably
want to override this implementation for performance reasons.
Use this method for convenience and performance
in processing of glyphcodes. If no array is passed in,
a new array is created.
@param beginGlyphIndex the index of the first glyph
@param numEntries the number of glyph indices
@param codeReturn the array into which to return the character indices
@return an array of character indices, one per glyph.
@since 1.4
"
      end

      operation 6457986 "getLogicalBounds"
	abstract public return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the logical bounds of this <code>GlyphVector</code>.
This method is used when positioning this <code>GlyphVector</code>
in relation to visually adjacent <code>GlyphVector</code> objects.
@return a {@link Rectangle2D} that is the logical bounds of this
<code>GlyphVector</code>.
"
      end

      operation 6458114 "getVisualBounds"
	abstract public return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the visual bounds of this <code>GlyphVector</code>
The visual bounds is the bounding box of the outline of this
<code>GlyphVector</code>.  Because of rasterization and
alignment of pixels, it is possible that this box does not
enclose all pixels affected by rendering this <code>GlyphVector</code>.
@return a <code>Rectangle2D</code> that is the bounding box
of this <code>GlyphVector</code>.
"
      end

      operation 6458242 "getPixelBounds"
	public return_type class_ref 314114 // Rectangle
	nparams 3
	  param inout name "renderFRC" type class_ref 866178 // FontRenderContext
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pixel bounds of this <code>GlyphVector</code> when
rendered in a graphics with the given
<code>FontRenderContext</code> at the given location.  The
renderFRC need not be the same as the
<code>FontRenderContext</code> of this
<code>GlyphVector</code>, and can be null.  If it is null, the
<code>FontRenderContext</code> of this <code>GlyphVector</code>
is used.  The default implementation returns the visual bounds,
offset to x, y and rounded out to the next integer value (i.e. returns an
integer rectangle which encloses the visual bounds) and
ignores the FRC.  Subclassers should override this method.
@param renderFRC the <code>FontRenderContext</code> of the <code>Graphics</code>.
@param x the x-coordinate at which to render this <code>GlyphVector</code>.
@param y the y-coordinate at which to render this <code>GlyphVector</code>.
@return a <code>Rectangle</code> bounding the pixels that would be affected.
@since 1.4
"
      end

      operation 6458370 "getOutline"
	abstract public return_type class_ref 379394 // Shape
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Shape</code> whose interior corresponds to the
visual representation of this <code>GlyphVector</code>.
@return a <code>Shape</code> that is the outline of this
<code>GlyphVector</code>.
"
      end

      operation 6458498 "getOutline"
	abstract public return_type class_ref 379394 // Shape
	nparams 2
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Shape</code> whose interior corresponds to the
visual representation of this <code>GlyphVector</code> when
rendered at x,&nbsp;y.
@param x the X coordinate of this <code>GlyphVector</code>.
@param y the Y coordinate of this <code>GlyphVector</code>.
@return a <code>Shape</code> that is the outline of this
  <code>GlyphVector</code> when rendered at the specified
  coordinates.
"
      end

      operation 6458626 "getGlyphOutline"
	abstract public return_type class_ref 379394 // Shape
	nparams 1
	  param in name "glyphIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Shape</code> whose interior corresponds to the
visual representation of the specified glyph
within this <code>GlyphVector</code>.
The outline returned by this method is positioned around the
origin of each individual glyph.
@param glyphIndex the index into this <code>GlyphVector</code>
@return a <code>Shape</code> that is the outline of the glyph
  at the specified <code>glyphIndex</code> of this
  <code>GlyphVector</code>.
@throws IndexOutOfBoundsException if <code>glyphIndex</code>
  is less than 0 or greater than or equal to the number
  of glyphs in this <code>GlyphVector</code>
"
      end

      operation 6458754 "getGlyphOutline"
	public return_type class_ref 379394 // Shape
	nparams 3
	  param in name "glyphIndex" explicit_type "int"
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Shape</code> whose interior corresponds to the
visual representation of the specified glyph
within this <code>GlyphVector</code>, offset to x,&nbsp;y.
The outline returned by this method is positioned around the
origin of each individual glyph.
@param glyphIndex the index into this <code>GlyphVector</code>
@param x the X coordinate of the location of this {@code GlyphVector}
@param y the Y coordinate of the location of this {@code GlyphVector}
@return a <code>Shape</code> that is the outline of the glyph
  at the specified <code>glyphIndex</code> of this
  <code>GlyphVector</code> when rendered at the specified
  coordinates.
@throws IndexOutOfBoundsException if <code>glyphIndex</code>
  is less than 0 or greater than or equal to the number
  of glyphs in this <code>GlyphVector</code>
@since 1.4
"
      end

      operation 6458882 "getGlyphPosition"
	abstract public return_type class_ref 380802 // Point2D
	nparams 1
	  param in name "glyphIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the position of the specified glyph relative to the
origin of this <code>GlyphVector</code>.
If <code>glyphIndex</code> equals the number of of glyphs in
this <code>GlyphVector</code>, this method returns the position after
the last glyph. This position is used to define the advance of
the entire <code>GlyphVector</code>.
@param glyphIndex the index into this <code>GlyphVector</code>
@return a {@link Point2D} object that is the position of the glyph
  at the specified <code>glyphIndex</code>.
@throws IndexOutOfBoundsException if <code>glyphIndex</code>
  is less than 0 or greater than the number of glyphs
  in this <code>GlyphVector</code>
@see #setGlyphPosition
"
      end

      operation 6459010 "setGlyphPosition"
	abstract public explicit_return_type "void"
	nparams 2
	  param in name "glyphIndex" explicit_type "int"
	  param inout name "newPos" type class_ref 380802 // Point2D
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position of the specified glyph within this
<code>GlyphVector</code>.
If <code>glyphIndex</code> equals the number of of glyphs in
this <code>GlyphVector</code>, this method sets the position after
the last glyph. This position is used to define the advance of
the entire <code>GlyphVector</code>.
@param glyphIndex the index into this <code>GlyphVector</code>
@param newPos the <code>Point2D</code> at which to position the
  glyph at the specified <code>glyphIndex</code>
@throws IndexOutOfBoundsException if <code>glyphIndex</code>
  is less than 0 or greater than the number of glyphs
  in this <code>GlyphVector</code>
@see #getGlyphPosition
"
      end

      operation 6459138 "getGlyphTransform"
	abstract public return_type class_ref 381058 // AffineTransform
	nparams 1
	  param in name "glyphIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the transform of the specified glyph within this
<code>GlyphVector</code>.  The transform is relative to the
glyph position.  If no special transform has been applied,
<code>null</code> can be returned.  A null return indicates
an identity transform.
@param glyphIndex the index into this <code>GlyphVector</code>
@return an {@link AffineTransform} that is the transform of
  the glyph at the specified <code>glyphIndex</code>.
@throws IndexOutOfBoundsException if <code>glyphIndex</code>
  is less than 0 or greater than or equal to the number
  of glyphs in this <code>GlyphVector</code>
@see #setGlyphTransform
"
      end

      operation 6459266 "setGlyphTransform"
	abstract public explicit_return_type "void"
	nparams 2
	  param in name "glyphIndex" explicit_type "int"
	  param inout name "newTX" type class_ref 381058 // AffineTransform
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the transform of the specified glyph within this
<code>GlyphVector</code>.  The transform is relative to the glyph
position.  A <code>null</code> argument for <code>newTX</code>
indicates that no special transform is applied for the specified
glyph.
This method can be used to rotate, mirror, translate and scale the
glyph.  Adding a transform can result in significant performance changes.
@param glyphIndex the index into this <code>GlyphVector</code>
@param newTX the new transform of the glyph at <code>glyphIndex</code>
@throws IndexOutOfBoundsException if <code>glyphIndex</code>
  is less than 0 or greater than or equal to the number
  of glyphs in this <code>GlyphVector</code>
@see #getGlyphTransform
"
      end

      operation 6459394 "getLayoutFlags"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns flags describing the global state of the GlyphVector.
Flags not described below are reserved.  The default
implementation returns 0 (meaning false) for the position adjustments,
transforms, rtl, and complex flags.
Subclassers should override this method, and make sure
it correctly describes the GlyphVector and corresponds
to the results of related calls.
@return an int containing the flags describing the state
@see #FLAG_HAS_POSITION_ADJUSTMENTS
@see #FLAG_HAS_TRANSFORMS
@see #FLAG_RUN_RTL
@see #FLAG_COMPLEX_GLYPHS
@see #FLAG_MASK
@since 1.4
"
      end

      attribute 1515906 "FLAG_HAS_TRANSFORMS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A flag used with getLayoutFlags that indicates that this <code>GlyphVector</code> has
per-glyph transforms.
@since 1.4

"
      end

      attribute 1516034 "FLAG_HAS_POSITION_ADJUSTMENTS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A flag used with getLayoutFlags that indicates that this <code>GlyphVector</code> has
position adjustments.  When this is true, the glyph positions don't match the
accumulated default advances of the glyphs (for example, if kerning has been done).
@since 1.4

"
      end

      attribute 1516162 "FLAG_RUN_RTL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A flag used with getLayoutFlags that indicates that this <code>GlyphVector</code> has
a right-to-left run direction.  This refers to the glyph-to-char mapping and does
not imply that the visual locations of the glyphs are necessarily in this order,
although generally they will be.
@since 1.4

"
      end

      attribute 1516290 "FLAG_COMPLEX_GLYPHS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A flag used with getLayoutFlags that indicates that this <code>GlyphVector</code> has
a complex glyph-to-char mapping (one that does not map glyphs to chars one-to-one in
strictly ascending or descending order matching the run direction).
@since 1.4

"
      end

      attribute 1516418 "FLAG_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value "
        FLAG_HAS_TRANSFORMS |
        FLAG_HAS_POSITION_ADJUSTMENTS |
        FLAG_RUN_RTL |
        FLAG_COMPLEX_GLYPHS"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A mask for supported flags from getLayoutFlags.  Only bits covered by the mask
should be tested.
@since 1.4

"
      end

      operation 6459522 "getGlyphPositions"
	abstract public explicit_return_type "float"
	nparams 3
	  param in name "beginGlyphIndex" explicit_type "int"
	  param in name "numEntries" explicit_type "int"
	  param inout name "positionReturn" explicit_type "float"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of glyph positions for the specified glyphs.
This method is used for convenience and performance when
processing glyph positions.
If no array is passed in, a new array is created.
Even numbered array entries beginning with position zero are the X
coordinates of the glyph numbered <code>beginGlyphIndex + position/2</code>.
Odd numbered array entries beginning with position one are the Y
coordinates of the glyph numbered <code>beginGlyphIndex + (position-1)/2</code>.
If <code>beginGlyphIndex</code> equals the number of of glyphs in
this <code>GlyphVector</code>, this method gets the position after
the last glyph and this position is used to define the advance of
the entire <code>GlyphVector</code>.
@param beginGlyphIndex the index at which to begin retrieving
  glyph positions
@param numEntries the number of glyphs to retrieve
@param positionReturn the array that receives the glyph positions
  and is then returned.
@return an array of glyph positions specified by
 <code>beginGlyphIndex</code> and <code>numEntries</code>.
@throws IllegalArgumentException if <code>numEntries</code> is
  less than 0
@throws IndexOutOfBoundsException if <code>beginGlyphIndex</code>
  is less than 0
@throws IndexOutOfBoundsException if the sum of
  <code>beginGlyphIndex</code> and <code>numEntries</code>
  is greater than the number of glyphs in this
  <code>GlyphVector</code> plus one
"
      end

      operation 6459650 "getGlyphLogicalBounds"
	abstract public return_type class_ref 379394 // Shape
	nparams 1
	  param in name "glyphIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the logical bounds of the specified glyph within this
<code>GlyphVector</code>.
These logical bounds have a total of four edges, with two edges
parallel to the baseline under the glyph's transform and the other two
edges are shared with adjacent glyphs if they are present.  This
method is useful for hit-testing of the specified glyph,
positioning of a caret at the leading or trailing edge of a glyph,
and for drawing a highlight region around the specified glyph.
@param glyphIndex the index into this <code>GlyphVector</code>
  that corresponds to the glyph from which to retrieve its logical
  bounds
@return  a <code>Shape</code> that is the logical bounds of the
  glyph at the specified <code>glyphIndex</code>.
@throws IndexOutOfBoundsException if <code>glyphIndex</code>
  is less than 0 or greater than or equal to the number
  of glyphs in this <code>GlyphVector</code>
@see #getGlyphVisualBounds
"
      end

      operation 6459778 "getGlyphVisualBounds"
	abstract public return_type class_ref 379394 // Shape
	nparams 1
	  param in name "glyphIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the visual bounds of the specified glyph within the
<code>GlyphVector</code>.
The bounds returned by this method is positioned around the
origin of each individual glyph.
@param glyphIndex the index into this <code>GlyphVector</code>
  that corresponds to the glyph from which to retrieve its visual
  bounds
@return a <code>Shape</code> that is the visual bounds of the
  glyph at the specified <code>glyphIndex</code>.
@throws IndexOutOfBoundsException if <code>glyphIndex</code>
  is less than 0 or greater than or equal to the number
  of glyphs in this <code>GlyphVector</code>
@see #getGlyphLogicalBounds
"
      end

      operation 6459906 "getGlyphPixelBounds"
	public return_type class_ref 314114 // Rectangle
	nparams 4
	  param in name "index" explicit_type "int"
	  param inout name "renderFRC" type class_ref 866178 // FontRenderContext
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pixel bounds of the glyph at index when this
<code>GlyphVector</code> is rendered in a <code>Graphics</code> with the
given <code>FontRenderContext</code> at the given location. The
renderFRC need not be the same as the
<code>FontRenderContext</code> of this
<code>GlyphVector</code>, and can be null.  If it is null, the
<code>FontRenderContext</code> of this <code>GlyphVector</code>
is used.  The default implementation returns the visual bounds of the glyph,
offset to x, y and rounded out to the next integer value, and
ignores the FRC.  Subclassers should override this method.
@param index the index of the glyph.
@param renderFRC the <code>FontRenderContext</code> of the <code>Graphics</code>.
@param x the X position at which to render this <code>GlyphVector</code>.
@param y the Y position at which to render this <code>GlyphVector</code>.
@return a <code>Rectangle</code> bounding the pixels that would be affected.
@since 1.4
"
      end

      operation 6460034 "getGlyphMetrics"
	abstract public return_type class_ref 887554 // GlyphMetrics
	nparams 1
	  param in name "glyphIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the metrics of the glyph at the specified index into
this <code>GlyphVector</code>.
@param glyphIndex the index into this <code>GlyphVector</code>
  that corresponds to the glyph from which to retrieve its metrics
@return a {@link GlyphMetrics} object that represents the
  metrics of the glyph at the specified <code>glyphIndex</code>
  into this <code>GlyphVector</code>.
@throws IndexOutOfBoundsException if <code>glyphIndex</code>
  is less than 0 or greater than or equal to the number
  of glyphs in this <code>GlyphVector</code>
"
      end

      operation 6460162 "getGlyphJustificationInfo"
	abstract public return_type class_ref 887426 // GlyphJustificationInfo
	nparams 1
	  param in name "glyphIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the justification information for the glyph at
the specified index into this <code>GlyphVector</code>.
@param glyphIndex the index into this <code>GlyphVector</code>
  that corresponds to the glyph from which to retrieve its
  justification properties
@return a {@link GlyphJustificationInfo} object that
  represents the justification properties of the glyph at the
  specified <code>glyphIndex</code> into this
  <code>GlyphVector</code>.
@throws IndexOutOfBoundsException if <code>glyphIndex</code>
  is less than 0 or greater than or equal to the number
  of glyphs in this <code>GlyphVector</code>
"
      end

      operation 6460290 "equals"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "set" type class_ref 866434 // GlyphVector
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " general utility methods


Tests if the specified <code>GlyphVector</code> exactly
equals this <code>GlyphVector</code>.
@param set the specified <code>GlyphVector</code> to test
@return <code>true</code> if the specified
  <code>GlyphVector</code> equals this <code>GlyphVector</code>;
  <code>false</code> otherwise.
"
      end
    end

    class 886914 "TextHitInfo"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>TextHitInfo</code> class represents a character position in a
text model, and a <b>bias</b>, or \"side,\" of the character.  Biases are
either <EM>leading</EM> (the left edge, for a left-to-right character)
or <EM>trailing</EM> (the right edge, for a left-to-right character).
Instances of <code>TextHitInfo</code> are used to specify caret and
insertion positions within text.
<p>
For example, consider the text \"abc\".  TextHitInfo.trailing(1)
corresponds to the right side of the 'b' in the text.
<p>
<code>TextHitInfo</code> is used primarily by {@link TextLayout} and
clients of <code>TextLayout</code>.  Clients of <code>TextLayout</code>
query <code>TextHitInfo</code> instances for an insertion offset, where
new text is inserted into the text model.  The insertion offset is equal
to the character position in the <code>TextHitInfo</code> if the bias
is leading, and one character after if the bias is trailing.  The
insertion offset for TextHitInfo.trailing(1) is 2.
<p>
Sometimes it is convenient to construct a <code>TextHitInfo</code> with
the same insertion offset as an existing one, but on the opposite
character.  The <code>getOtherHit</code> method constructs a new
<code>TextHitInfo</code> with the same insertion offset as an existing
one, with a hit on the character on the other side of the insertion offset.
Calling <code>getOtherHit</code> on trailing(1) would return leading(2).
In general, <code>getOtherHit</code> for trailing(n) returns
leading(n+1) and <code>getOtherHit</code> for leading(n)
returns trailing(n-1).
<p>
<strong>Example</strong>:<p>
Converting a graphical point to an insertion point within a text
model
<blockquote><pre>
TextLayout layout = ...;
Point2D.Float hitPoint = ...;
TextHitInfo hitInfo = layout.hitTestChar(hitPoint.x, hitPoint.y);
int insPoint = hitInfo.getInsertionIndex();
// insPoint is relative to layout;  may need to adjust for use
// in a text model
</pre></blockquote>

@see TextLayout
"
      attribute 1537410 "charIndex"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1537538 "isLeadingEdge"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6477442 "TextHitInfo"
	private explicit_return_type ""
	nparams 2
	  param in name "charIndex" explicit_type "int"
	  param inout name "isLeadingEdge" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>TextHitInfo</code>.
@param charIndex the index of the character hit
@param isLeadingEdge <code>true</code> if the leading edge of the
character was hit
"
      end

      operation 6477570 "getCharIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the character hit.
@return the index of the character hit.
"
      end

      operation 6477698 "isLeadingEdge"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the leading edge of the character was
hit.
@return <code>true</code> if the leading edge of the character was
hit; <code>false</code> otherwise.
"
      end

      operation 6477826 "getInsertionIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the insertion index.  This is the character index if
the leading edge of the character was hit, and one greater
than the character index if the trailing edge was hit.
@return the insertion index.
"
      end

      operation 6477954 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code.
@return the hash code of this <code>TextHitInfo</code>, which is
also the <code>charIndex</code> of this <code>TextHitInfo</code>.
"
      end

      operation 6478082 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the specified <code>Object</code> is a
<code>TextHitInfo</code> and equals this <code>TextHitInfo</code>.
@param obj the <code>Object</code> to test for equality
@return <code>true</code> if the specified <code>Object</code>
equals this <code>TextHitInfo</code>; <code>false</code> otherwise.
"
      end

      operation 6478210 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "hitInfo" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the specified <code>TextHitInfo</code>
has the same <code>charIndex</code> and <code>isLeadingEdge</code>
as this <code>TextHitInfo</code>.  This is not the same as having
the same insertion offset.
@param hitInfo a specified <code>TextHitInfo</code>
@return <code>true</code> if the specified <code>TextHitInfo</code>
has the same <code>charIndex</code> and <code>isLeadingEdge</code>
as this <code>TextHitInfo</code>.
"
      end

      operation 6478338 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> representing the hit for debugging
use only.
@return a <code>String</code> representing this
<code>TextHitInfo</code>.
"
      end

      operation 6478466 "leading"
	class_operation public return_type class_ref 886914 // TextHitInfo
	nparams 1
	  param in name "charIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>TextHitInfo</code> on the leading edge of the
character at the specified <code>charIndex</code>.
@param charIndex the index of the character hit
@return a <code>TextHitInfo</code> on the leading edge of the
character at the specified <code>charIndex</code>.
"
      end

      operation 6478594 "trailing"
	class_operation public return_type class_ref 886914 // TextHitInfo
	nparams 1
	  param in name "charIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a hit on the trailing edge of the character at
the specified <code>charIndex</code>.
@param charIndex the index of the character hit
@return a <code>TextHitInfo</code> on the trailing edge of the
character at the specified <code>charIndex</code>.
"
      end

      operation 6478722 "beforeOffset"
	class_operation public return_type class_ref 886914 // TextHitInfo
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>TextHitInfo</code> at the specified offset,
associated with the character before the offset.
@param offset an offset associated with the character before
the offset
@return a <code>TextHitInfo</code> at the specified offset.
"
      end

      operation 6478850 "afterOffset"
	class_operation public return_type class_ref 886914 // TextHitInfo
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>TextHitInfo</code> at the specified offset,
associated with the character after the offset.
@param offset an offset associated with the character after
the offset
@return a <code>TextHitInfo</code> at the specified offset.
"
      end

      operation 6478978 "getOtherHit"
	public return_type class_ref 886914 // TextHitInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>TextHitInfo</code> on the other side of the
insertion point.  This <code>TextHitInfo</code> remains unchanged.
@return a <code>TextHitInfo</code> on the other side of the
insertion point.
"
      end

      operation 6479106 "getOffsetHit"
	public return_type class_ref 886914 // TextHitInfo
	nparams 1
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>TextHitInfo</code> whose character index is offset
by <code>delta</code> from the <code>charIndex</code> of this
<code>TextHitInfo</code>. This <code>TextHitInfo</code> remains
unchanged.
@param delta the value to offset this <code>charIndex</code>
@return a <code>TextHitInfo</code> whose <code>charIndex</code> is
offset by <code>delta</code> from the <code>charIndex</code> of
this <code>TextHitInfo</code>.
"
      end
    end

    class 887298 "CharArrayIterator"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3009922 // <realization>
	relation 3009922 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3009922 // <realization>
	  b parent class_ref 429314 // CharacterIterator
      end

      attribute 1512578 "chars"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1512706 "pos"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1512834 "begin"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6451458 "CharArrayIterator"
	package explicit_return_type ""
	nparams 1
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6451586 "CharArrayIterator"
	package explicit_return_type ""
	nparams 2
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	  param in name "begin" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6451714 "first"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position to getBeginIndex() and returns the character at that
position.
@return the first character in the text, or DONE if the text is empty
@see getBeginIndex
"
      end

      operation 6451842 "last"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty)
and returns the character at that position.
@return the last character in the text, or DONE if the text is empty
@see getEndIndex
"
      end

      operation 6451970 "current"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character at the current position (as returned by getIndex()).
@return the character at the current position or DONE if the current
position is off the end of the text.
@see getIndex
"
      end

      operation 6452098 "next"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increments the iterator's index by one and returns the character
at the new index.  If the resulting index is greater or equal
to getEndIndex(), the current index is reset to getEndIndex() and
a value of DONE is returned.
@return the character at the new position or DONE if the new
position is off the end of the text range.
"
      end

      operation 6452226 "previous"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrements the iterator's index by one and returns the character
at the new index. If the current index is getBeginIndex(), the index
remains at getBeginIndex() and a value of DONE is returned.
@return the character at the new position or DONE if the current
position is equal to getBeginIndex().
"
      end

      operation 6452354 "setIndex"
	public explicit_return_type "char"
	nparams 1
	  param in name "position" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position to the specified position in the text and returns that
character.
@param position the position within the text.  Valid values range from
getBeginIndex() to getEndIndex().  An IllegalArgumentException is thrown
if an invalid value is supplied.
@return the character at the specified position or DONE if the specified position is equal to getEndIndex()
"
      end

      operation 6452482 "getBeginIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the start index of the text.
@return the index at which the text begins.
"
      end

      operation 6452610 "getEndIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the end index of the text.  This index is the index of the first
character following the end of the text.
@return the index after the last character in the text
"
      end

      operation 6452738 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current index.
@return the current index.
"
      end

      operation 6452866 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a copy of this iterator
@return A copy of this
"
      end

      operation 6452994 "reset"
	package explicit_return_type "void"
	nparams 1
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6453122 "reset"
	package explicit_return_type "void"
	nparams 2
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	  param in name "begin" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 887426 "GlyphJustificationInfo"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>GlyphJustificationInfo</code> class represents information
about the justification properties of a glyph.  A glyph is the visual
representation of one or more characters.  Many different glyphs can
be used to represent a single character or combination of characters.
The four justification properties represented by
<code>GlyphJustificationInfo</code> are weight, priority, absorb and
limit.
<p>
Weight is the overall 'weight' of the glyph in the line.  Generally it is
proportional to the size of the font.  Glyphs with larger weight are
allocated a correspondingly larger amount of the change in space.
<p>
Priority determines the justification phase in which this glyph is used.
All glyphs of the same priority are examined before glyphs of the next
priority.  If all the change in space can be allocated to these glyphs
without exceeding their limits, then glyphs of the next priority are not
examined. There are four priorities, kashida, whitespace, interchar,
and none.  KASHIDA is the first priority examined. NONE is the last
priority examined.
<p>
Absorb determines whether a glyph absorbs all change in space.  Within a
given priority, some glyphs may absorb all the change in space.  If any of
these glyphs are present, no glyphs of later priority are examined.
<p>
Limit determines the maximum or minimum amount by which the glyph can
change. Left and right sides of the glyph can have different limits.
<p>
Each <code>GlyphJustificationInfo</code> represents two sets of
metrics, which are <i>growing</i> and <i>shrinking</i>.  Growing
metrics are used when the glyphs on a line are to be
spread apart to fit a larger width.  Shrinking metrics are used when
the glyphs are to be moved together to fit a smaller width.
"
      operation 6454914 "GlyphJustificationInfo"
	public explicit_return_type ""
	nparams 9
	  param in name "weight" explicit_type "float"
	  param inout name "growAbsorb" explicit_type "boolean"
	  param in name "growPriority" explicit_type "int"
	  param in name "growLeftLimit" explicit_type "float"
	  param in name "growRightLimit" explicit_type "float"
	  param inout name "shrinkAbsorb" explicit_type "boolean"
	  param in name "shrinkPriority" explicit_type "int"
	  param in name "shrinkLeftLimit" explicit_type "float"
	  param in name "shrinkRightLimit" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs information about the justification properties of a
glyph.
@param weight the weight of this glyph when allocating space.  Must be non-negative.
@param growAbsorb if <code>true</code> this glyph absorbs
all extra space at this priority and lower priority levels when it
grows
@param growPriority the priority level of this glyph when it
grows
@param growLeftLimit the maximum amount by which the left side of this
glyph can grow.  Must be non-negative.
@param growRightLimit the maximum amount by which the right side of this
glyph can grow.  Must be non-negative.
@param shrinkAbsorb if <code>true</code>, this glyph absorbs all
remaining shrinkage at this and lower priority levels when it
shrinks
@param shrinkPriority the priority level of this glyph when
it shrinks
@param shrinkLeftLimit the maximum amount by which the left side of this
glyph can shrink.  Must be non-negative.
@param shrinkRightLimit the maximum amount by which the right side
of this glyph can shrink.  Must be non-negative.
"
      end

      operation 6455042 "priorityIsValid"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "priority" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1513090 "PRIORITY_KASHIDA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The highest justification priority. 
"
      end

      attribute 1513218 "PRIORITY_WHITESPACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The second highest justification priority. 
"
      end

      attribute 1513346 "PRIORITY_INTERCHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The second lowest justification priority. 
"
      end

      attribute 1513474 "PRIORITY_NONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The lowest justification priority. 
"
      end

      attribute 1513602 "weight"
	const_attribute public explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The weight of this glyph.

"
      end

      attribute 1513730 "growPriority"
	const_attribute public explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The priority level of this glyph as it is growing.

"
      end

      attribute 1513858 "growAbsorb"
	const_attribute public explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If <code>true</code>, this glyph absorbs all extra
space at this and lower priority levels when it grows.

"
      end

      attribute 1513986 "growLeftLimit"
	const_attribute public explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum amount by which the left side of this glyph can grow.

"
      end

      attribute 1514114 "growRightLimit"
	const_attribute public explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum amount by which the right side of this glyph can grow.

"
      end

      attribute 1514242 "shrinkPriority"
	const_attribute public explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The priority level of this glyph as it is shrinking.

"
      end

      attribute 1514370 "shrinkAbsorb"
	const_attribute public explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If <code>true</code>,this glyph absorbs all remaining shrinkage at
this and lower priority levels as it shrinks.

"
      end

      attribute 1514498 "shrinkLeftLimit"
	const_attribute public explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum amount by which the left side of this glyph can shrink
(a positive number).

"
      end

      attribute 1514626 "shrinkRightLimit"
	const_attribute public explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum amount by which the right side of this glyph can shrink
(a positive number).

"
      end
    end

    class 887554 "GlyphMetrics"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>GlyphMetrics</code> class represents information for a
single glyph.   A glyph is the visual representation of one or more
characters.  Many different glyphs can be used to represent a single
character or combination of characters.  <code>GlyphMetrics</code>
instances are produced by {@link java.awt.Font Font} and are applicable
to a specific glyph in a particular <code>Font</code>.
<p>
Glyphs are either STANDARD, LIGATURE, COMBINING, or COMPONENT.
<ul>
<li>STANDARD glyphs are commonly used to represent single characters.
<li>LIGATURE glyphs are used to represent sequences of characters.
<li>COMPONENT glyphs in a {@link GlyphVector} do not correspond to a
particular character in a text model. Instead, COMPONENT glyphs are
added for typographical reasons, such as Arabic justification.
<li>COMBINING glyphs embellish STANDARD or LIGATURE glyphs, such
as accent marks.  Carets do not appear before COMBINING glyphs.
</ul>
<p>
Other metrics available through <code>GlyphMetrics</code> are the
components of the advance, the visual bounds, and the left and right
side bearings.
<p>
Glyphs for a rotated font, or obtained from a <code>GlyphVector</code>
which has applied a rotation to the glyph, can have advances that
contain both X and Y components.  Usually the advance only has one
component.
<p>
The advance of a glyph is the distance from the glyph's origin to the
origin of the next glyph along the baseline, which is either vertical
or horizontal.  Note that, in a <code>GlyphVector</code>,
the distance from a glyph to its following glyph might not be the
glyph's advance, because of kerning or other positioning adjustments.
<p>
The bounds is the smallest rectangle that completely contains the
outline of the glyph.  The bounds rectangle is relative to the
glyph's origin.  The left-side bearing is the distance from the glyph
origin to the left of its bounds rectangle. If the left-side bearing is
negative, part of the glyph is drawn to the left of its origin.  The
right-side bearing is the distance from the right side of the bounds
rectangle to the next glyph origin (the origin plus the advance).  If
negative, part of the glyph is drawn to the right of the next glyph's
origin.  Note that the bounds does not necessarily enclose all the pixels
affected when rendering the glyph, because of rasterization and pixel
adjustment effects.
<p>
Although instances of <code>GlyphMetrics</code> can be directly
constructed, they are almost always obtained from a
<code>GlyphVector</code>.  Once constructed, <code>GlyphMetrics</code>
objects are immutable.
<p>
<strong>Example</strong>:<p>
Querying a <code>Font</code> for glyph information
<blockquote><pre>
Font font = ...;
int glyphIndex = ...;
GlyphMetrics metrics = GlyphVector.getGlyphMetrics(glyphIndex);
int isStandard = metrics.isStandard();
float glyphAdvance = metrics.getAdvance();
</pre></blockquote>
@see java.awt.Font
@see GlyphVector
"
      attribute 1514754 "horizontal"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates whether the metrics are for a horizontal or vertical baseline.

"
      end

      attribute 1514882 "advanceX"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The x-component of the advance.

"
      end

      attribute 1515010 "advanceY"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The y-component of the advance.

"
      end

      classrelation 3010434 // bounds (<unidirectional association>)
	relation 3010434 --->
	  a role_name "bounds" private
	    comment "
The bounds of the associated glyph.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3010434 // bounds (<unidirectional association>)
	  b parent class_ref 402690 // Float
      end

      attribute 1515138 "glyphType"
	private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Additional information about the glyph encoded as a byte.

"
      end

      attribute 1515266 "STANDARD"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates a glyph that represents a single standard
character.

"
      end

      attribute 1515394 "LIGATURE"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates a glyph that represents multiple characters
as a ligature, for example 'fi' or 'ffi'.  It is followed by
filler glyphs for the remaining characters. Filler and combining
glyphs can be intermixed to control positioning of accent marks
on the logically preceding ligature.

"
      end

      attribute 1515522 "COMBINING"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates a glyph that represents a combining character,
such as an umlaut.  There is no caret position between this glyph
and the preceding glyph.

"
      end

      attribute 1515650 "COMPONENT"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates a glyph with no corresponding character in the
backing store.  The glyph is associated with the character
represented by the logically preceding non-component glyph.  This
is used for kashida justification or other visual modifications to
existing glyphs.  There is no caret position between this glyph
and the preceding glyph.

"
      end

      attribute 1515778 "WHITESPACE"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates a glyph with no visual representation. It can
be added to the other code values to indicate an invisible glyph.

"
      end

      operation 6455170 "GlyphMetrics"
	public explicit_return_type ""
	nparams 3
	  param in name "advance" explicit_type "float"
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	  param in name "glyphType" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>GlyphMetrics</code> object.
@param advance the advance width of the glyph
@param bounds the black box bounds of the glyph
@param glyphType the type of the glyph
"
      end

      operation 6455298 "GlyphMetrics"
	public explicit_return_type ""
	nparams 5
	  param inout name "horizontal" explicit_type "boolean"
	  param in name "advanceX" explicit_type "float"
	  param in name "advanceY" explicit_type "float"
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	  param in name "glyphType" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>GlyphMetrics</code> object.
@param horizontal if true, metrics are for a horizontal baseline,
  otherwise they are for a vertical baseline
@param advanceX the X-component of the glyph's advance
@param advanceY the Y-component of the glyph's advance
@param bounds the visual bounds of the glyph
@param glyphType the type of the glyph
@since 1.4
"
      end

      operation 6455426 "getAdvance"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the advance of the glyph along the baseline (either
horizontal or vertical).
@return the advance of the glyph
"
      end

      operation 6455554 "getAdvanceX"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the x-component of the advance of the glyph.
@return the x-component of the advance of the glyph
@since 1.4
"
      end

      operation 6455682 "getAdvanceY"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the y-component of the advance of the glyph.
@return the y-component of the advance of the glyph
@since 1.4
"
      end

      operation 6455810 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounds of the glyph. This is the bounding box of the glyph outline.
Because of rasterization and pixel alignment effects, it does not necessarily
enclose the pixels that are affected when rendering the glyph.
@return a {@link Rectangle2D} that is the bounds of the glyph.
"
      end

      operation 6455938 "getLSB"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the left (top) side bearing of the glyph.
<p>
This is the distance from 0,&nbsp;0 to the left (top) of the glyph
bounds.  If the bounds of the glyph is to the left of (above) the
origin, the LSB is negative.
@return the left side bearing of the glyph.
"
      end

      operation 6456066 "getRSB"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the right (bottom) side bearing of the glyph.
<p>
This is the distance from the right (bottom) of the glyph bounds to
the advance. If the bounds of the glyph is to the right of (below)
the advance, the RSB is negative.
@return the right side bearing of the glyph.
"
      end

      operation 6456194 "getType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the raw glyph type code.
@return the raw glyph type code.
"
      end

      operation 6456322 "isStandard"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this is a standard glyph.
@return <code>true</code> if this is a standard glyph;
         <code>false</code> otherwise.
"
      end

      operation 6456450 "isLigature"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this is a ligature glyph.
@return <code>true</code> if this is a ligature glyph;
         <code>false</code> otherwise.
"
      end

      operation 6456578 "isCombining"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this is a combining glyph.
@return <code>true</code> if this is a combining glyph;
         <code>false</code> otherwise.
"
      end

      operation 6456706 "isComponent"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this is a component glyph.
@return <code>true</code> if this is a component glyph;
         <code>false</code> otherwise.
"
      end

      operation 6456834 "isWhitespace"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this is a whitespace glyph.
@return <code>true</code> if this is a whitespace glyph;
         <code>false</code> otherwise.
"
      end
    end

    class 887682 "GraphicAttribute"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used with the CHAR_REPLACEMENT attribute.
<p>
The <code>GraphicAttribute</code> class represents a graphic embedded
in text. Clients subclass this class to implement their own char
replacement graphics.  Clients wishing to embed shapes and images in
text need not subclass this class.  Instead, clients can use the
{@link ShapeGraphicAttribute} and {@link ImageGraphicAttribute}
classes.
<p>
Subclasses must ensure that their objects are immutable once they
are constructed.  Mutating a <code>GraphicAttribute</code> that
is used in a {@link TextLayout} results in undefined behavior from the
<code>TextLayout</code>.
"
      attribute 1516546 "fAlignment"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1516674 "TOP_ALIGNMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Aligns top of graphic to top of line.

"
      end

      attribute 1516802 "BOTTOM_ALIGNMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Aligns bottom of graphic to bottom of line.

"
      end

      attribute 1516930 "ROMAN_BASELINE"
	class_attribute const_attribute public explicit_type "int"
	init_value " Font.ROMAN_BASELINE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Aligns origin of graphic to roman baseline of line.

"
      end

      attribute 1517058 "CENTER_BASELINE"
	class_attribute const_attribute public explicit_type "int"
	init_value " Font.CENTER_BASELINE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Aligns origin of graphic to center baseline of line.

"
      end

      attribute 1517186 "HANGING_BASELINE"
	class_attribute const_attribute public explicit_type "int"
	init_value " Font.HANGING_BASELINE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Aligns origin of graphic to hanging baseline of line.

"
      end

      operation 6460418 "GraphicAttribute"
	protected explicit_return_type ""
	nparams 1
	  param in name "alignment" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>GraphicAttribute</code>.
Subclasses use this to define the alignment of the graphic.
@param alignment an int representing one of the
<code>GraphicAttribute</code> alignment fields
@throws IllegalArgumentException if alignment is not one of the
five defined values.
"
      end

      operation 6460546 "getAscent"
	abstract public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ascent of this <code>GraphicAttribute</code>.  A
graphic can be rendered above its ascent.
@return the ascent of this <code>GraphicAttribute</code>.
@see #getBounds()
"
      end

      operation 6460674 "getDescent"
	abstract public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the descent of this <code>GraphicAttribute</code>.  A
graphic can be rendered below its descent.
@return the descent of this <code>GraphicAttribute</code>.
@see #getBounds()
"
      end

      operation 6460802 "getAdvance"
	abstract public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the advance of this <code>GraphicAttribute</code>.  The
<code>GraphicAttribute</code> object's advance is the distance
from the point at which the graphic is rendered and the point where
the next character or graphic is rendered.  A graphic can be
rendered beyond its advance
@return the advance of this <code>GraphicAttribute</code>.
@see #getBounds()
"
      end

      operation 6460930 "getBounds"
	public return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Rectangle2D} that encloses all of the
bits drawn by this <code>GraphicAttribute</code> relative to the
rendering position.
A graphic may be rendered beyond its origin, ascent, descent,
or advance;  but if it is, this method's implementation must
indicate where the graphic is rendered.
Default bounds is the rectangle (0, -ascent, advance, ascent+descent).
@return a <code>Rectangle2D</code> that encloses all of the bits
rendered by this <code>GraphicAttribute</code>.
"
      end

      operation 6461058 "getOutline"
	public return_type class_ref 379394 // Shape
	nparams 1
	  param inout name "tx" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a {@link java.awt.Shape} that represents the region that
this <code>GraphicAttribute</code> renders.  This is used when a
{@link TextLayout} is requested to return the outline of the text.
The (untransformed) shape must not extend outside the rectangular
bounds returned by <code>getBounds</code>.
The default implementation returns the rectangle returned by
{@link #getBounds}, transformed by the provided {@link AffineTransform}
if present.
@param tx an optional {@link AffineTransform} to apply to the
  outline of this <code>GraphicAttribute</code>. This can be null.
@return a <code>Shape</code> representing this graphic attribute,
  suitable for stroking or filling.
@since 1.6
"
      end

      operation 6461186 "draw"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "graphics" type class_ref 338178 // Graphics2D
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Renders this <code>GraphicAttribute</code> at the specified
location.
@param graphics the {@link Graphics2D} into which to render the
graphic
@param x the user-space X coordinate where the graphic is rendered
@param y the user-space Y coordinate where the graphic is rendered
"
      end

      operation 6461314 "getAlignment"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the alignment of this <code>GraphicAttribute</code>.
Alignment can be to a particular baseline, or to the absolute top
or bottom of a line.
@return the alignment of this <code>GraphicAttribute</code>.
"
      end

      operation 6461442 "getJustificationInfo"
	public return_type class_ref 887426 // GlyphJustificationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the justification information for this
<code>GraphicAttribute</code>.  Subclasses
can override this method to provide different justification
information.
@return a {@link GlyphJustificationInfo} object that contains the
justification information for this <code>GraphicAttribute</code>.
"
      end
    end

    class 887810 "ImageGraphicAttribute"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>ImageGraphicAttribute</code> class is an implementation of
{@link GraphicAttribute} which draws images in
a {@link TextLayout}.
@see GraphicAttribute
"
      classrelation 3010690 // <generalisation>
	relation 3010690 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3010690 // <generalisation>
	  b parent class_ref 887682 // GraphicAttribute
      end

      classrelation 3010818 // fImage (<unidirectional association>)
	relation 3010818 --->
	  a role_name "fImage" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3010818 // fImage (<unidirectional association>)
	  b parent class_ref 340098 // Image
      end

      attribute 1517314 "fImageWidth"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1517442 "fImageHeight"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1517570 "fOriginX"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1517698 "fOriginY"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6461570 "ImageGraphicAttribute"
	public explicit_return_type ""
	nparams 2
	  param inout name "image" type class_ref 340098 // Image
	  param in name "alignment" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constucts an <code>ImageGraphicAttribute</code> from the specified
{@link Image}.  The origin is at (0,&nbsp;0).
@param image the <code>Image</code> rendered by this
<code>ImageGraphicAttribute</code>.
This object keeps a reference to <code>image</code>.
@param alignment one of the alignments from this
<code>ImageGraphicAttribute</code>
"
      end

      operation 6461698 "ImageGraphicAttribute"
	public explicit_return_type ""
	nparams 4
	  param inout name "image" type class_ref 340098 // Image
	  param in name "alignment" explicit_type "int"
	  param in name "originX" explicit_type "float"
	  param in name "originY" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ImageGraphicAttribute</code> from the specified
<code>Image</code>. The point
(<code>originX</code>,&nbsp;<code>originY</code>) in the
<code>Image</code> appears at the origin of the
<code>ImageGraphicAttribute</code> within the text.
@param image the <code>Image</code> rendered by this
<code>ImageGraphicAttribute</code>.
This object keeps a reference to <code>image</code>.
@param alignment one of the alignments from this
<code>ImageGraphicAttribute</code>
@param originX the X coordinate of the point within
the <code>Image</code> that appears at the origin of the
<code>ImageGraphicAttribute</code> in the text line.
@param originY the Y coordinate of the point within
the <code>Image</code> that appears at the origin of the
<code>ImageGraphicAttribute</code> in the text line.
"
      end

      operation 6461826 "getAscent"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ascent of this <code>ImageGraphicAttribute</code>.  The
ascent of an <code>ImageGraphicAttribute</code> is the distance
from the top of the image to the origin.
@return the ascent of this <code>ImageGraphicAttribute</code>.
"
      end

      operation 6461954 "getDescent"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the descent of this <code>ImageGraphicAttribute</code>.
The descent of an <code>ImageGraphicAttribute</code> is the
distance from the origin to the bottom of the image.
@return the descent of this <code>ImageGraphicAttribute</code>.
"
      end

      operation 6462082 "getAdvance"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the advance of this <code>ImageGraphicAttribute</code>.
The advance of an <code>ImageGraphicAttribute</code> is the
distance from the origin to the right edge of the image.
@return the advance of this <code>ImageGraphicAttribute</code>.
"
      end

      operation 6462210 "getBounds"
	public return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Rectangle2D} that encloses all of the
bits rendered by this <code>ImageGraphicAttribute</code>, relative
to the rendering position.  A graphic can be rendered beyond its
origin, ascent, descent, or advance;  but if it is, this
method's implementation must indicate where the graphic is rendered.
@return a <code>Rectangle2D</code> that encloses all of the bits
rendered by this <code>ImageGraphicAttribute</code>.
"
      end

      operation 6462338 "draw"
	public explicit_return_type "void"
	nparams 3
	  param inout name "graphics" type class_ref 338178 // Graphics2D
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 6462466 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this <code>ImageGraphicAttribute</code>.
@return  a hash code value for this object.
"
      end

      operation 6462594 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "rhs" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>ImageGraphicAttribute</code> to the specified
{@link Object}.
@param rhs the <code>Object</code> to compare for equality
@return <code>true</code> if this
<code>ImageGraphicAttribute</code> equals <code>rhs</code>;
<code>false</code> otherwise.
"
      end

      operation 6462722 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "rhs" type class_ref 887810 // ImageGraphicAttribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>ImageGraphicAttribute</code> to the specified
<code>ImageGraphicAttribute</code>.
@param rhs the <code>ImageGraphicAttribute</code> to compare for
equality
@return <code>true</code> if this
<code>ImageGraphicAttribute</code> equals <code>rhs</code>;
<code>false</code> otherwise.
"
      end
    end

    class 887938 "LayoutPath"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "LayoutPath provides a mapping between locations relative to the
baseline and points in user space.  Locations consist of an advance
along the baseline, and an offset perpendicular to the baseline at
the advance.  Positive values along the perpendicular are in the
direction that is 90 degrees clockwise from the baseline vector.
Locations are represented as a <code>Point2D</code>, where x is the advance and
y is the offset.

@since 1.6
"
      operation 6462850 "pointToPath"
	abstract public explicit_return_type "boolean"
	nparams 2
	  param inout name "point" type class_ref 380802 // Point2D
	  param inout name "location" type class_ref 380802 // Point2D
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a point in user space to a location relative to the
path. The location is chosen so as to minimize the distance
from the point to the path (e.g., the magnitude of the offset
will be smallest).  If there is more than one such location,
the location with the smallest advance is chosen.
@param point the point to convert.  If it is not the same
object as location, point will remain unmodified by this call.
@param location a <code>Point2D</code> to hold the returned location.
It can be the same object as point.
@return true if the point is associated with the portion of the
path preceding the location, false if it is associated with
the portion following.  The default, if the location is not at
a break or sharp bend in the path, is to return true.
@throws NullPointerException if point or location is null
@since 1.6
"
      end

      operation 6462978 "pathToPoint"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "location" type class_ref 380802 // Point2D
	  param inout name "preceding" explicit_type "boolean"
	  param inout name "point" type class_ref 380802 // Point2D
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a location relative to the path to a point in user
coordinates.  The path might bend abruptly or be disjoint at
the location's advance.  If this is the case, the value of
'preceding' is used to disambiguate the portion of the path
whose location and slope is to be used to interpret the offset.
@param location a <code>Point2D</code> representing the advance (in x) and
offset (in y) of a location relative to the path.  If location
is not the same object as point, location will remain
unmodified by this call.
@param preceding if true, the portion preceding the advance
should be used, if false the portion after should be used.
This has no effect if the path does not break or bend sharply
at the advance.
@param point a <code>Point2D</code> to hold the returned point.  It can be
the same object as location.
@throws NullPointerException if location or point is null
@since 1.6
"
      end
    end

    class 888066 "LineBreakMeasurer"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>LineBreakMeasurer</code> class allows styled text to be
broken into lines (or segments) that fit within a particular visual
advance.  This is useful for clients who wish to display a paragraph of
text that fits within a specific width, called the <b>wrapping
width</b>.
<p>
<code>LineBreakMeasurer</code> is constructed with an iterator over
styled text.  The iterator's range should be a single paragraph in the
text.
<code>LineBreakMeasurer</code> maintains a position in the text for the
start of the next text segment.  Initially, this position is the
start of text.  Paragraphs are assigned an overall direction (either
left-to-right or right-to-left) according to the bidirectional
formatting rules.  All segments obtained from a paragraph have the
same direction as the paragraph.
<p>
Segments of text are obtained by calling the method
<code>nextLayout</code>, which returns a {@link TextLayout}
representing the text that fits within the wrapping width.
The <code>nextLayout</code> method moves the current position
to the end of the layout returned from <code>nextLayout</code>.
<p>
<code>LineBreakMeasurer</code> implements the most commonly used
line-breaking policy: Every word that fits within the wrapping
width is placed on the line. If the first word does not fit, then all
of the characters that fit within the wrapping width are placed on the
line.  At least one character is placed on each line.
<p>
The <code>TextLayout</code> instances returned by
<code>LineBreakMeasurer</code> treat tabs like 0-width spaces.  Clients
who wish to obtain tab-delimited segments for positioning should use
the overload of <code>nextLayout</code> which takes a limiting offset
in the text.
The limiting offset should be the first character after the tab.
The <code>TextLayout</code> objects returned from this method end
at the limit provided (or before, if the text between the current
position and the limit won't fit entirely within the  wrapping
width).
<p>
Clients who are laying out tab-delimited text need a slightly
different line-breaking policy after the first segment has been
placed on a line.  Instead of fitting partial words in the
remaining space, they should place words which don't fit in the
remaining space entirely on the next line.  This change of policy
can be requested in the overload of <code>nextLayout</code> which
takes a <code>boolean</code> parameter.  If this parameter is
<code>true</code>, <code>nextLayout</code> returns
<code>null</code> if the first word won't fit in
the given space.  See the tab sample below.
<p>
In general, if the text used to construct the
<code>LineBreakMeasurer</code> changes, a new
<code>LineBreakMeasurer</code> must be constructed to reflect
the change.  (The old <code>LineBreakMeasurer</code> continues to
function properly, but it won't be aware of the text change.)
Nevertheless, if the text change is the insertion or deletion of a
single character, an existing <code>LineBreakMeasurer</code> can be
'updated' by calling <code>insertChar</code> or
<code>deleteChar</code>. Updating an existing
<code>LineBreakMeasurer</code> is much faster than creating a new one.
Clients who modify text based on user typing should take advantage
of these methods.
<p>
<strong>Examples</strong>:<p>
Rendering a paragraph in a component
<blockquote>
<pre>{@code
public void paint(Graphics graphics) {

    Point2D pen = new Point2D(10, 20);
    Graphics2D g2d = (Graphics2D)graphics;
    FontRenderContext frc = g2d.getFontRenderContext();

    // let styledText be an AttributedCharacterIterator containing at least
    // one character

    LineBreakMeasurer measurer = new LineBreakMeasurer(styledText, frc);
    float wrappingWidth = getSize().width - 15;

    while (measurer.getPosition() < fStyledText.length()) {

        TextLayout layout = measurer.nextLayout(wrappingWidth);

        pen.y += (layout.getAscent());
        float dx = layout.isLeftToRight() ?
            0 : (wrappingWidth - layout.getAdvance());

        layout.draw(graphics, pen.x + dx, pen.y);
        pen.y += layout.getDescent() + layout.getLeading();
    }
}
}</pre>
</blockquote>
<p>
Rendering text with tabs.  For simplicity, the overall text
direction is assumed to be left-to-right
<blockquote>
<pre>{@code
public void paint(Graphics graphics) {

    float leftMargin = 10, rightMargin = 310;
    float[] tabStops = { 100, 250 };

    // assume styledText is an AttributedCharacterIterator, and the number
    // of tabs in styledText is tabCount

    int[] tabLocations = new int[tabCount+1];

    int i = 0;
    for (char c = styledText.first(); c != styledText.DONE; c = styledText.next()) {
        if (c == '\\t') {
            tabLocations[i++] = styledText.getIndex();
        }
    }
    tabLocations[tabCount] = styledText.getEndIndex() - 1;

    // Now tabLocations has an entry for every tab's offset in
    // the text.  For convenience, the last entry is tabLocations
    // is the offset of the last character in the text.

    LineBreakMeasurer measurer = new LineBreakMeasurer(styledText);
    int currentTab = 0;
    float verticalPos = 20;

    while (measurer.getPosition() < styledText.getEndIndex()) {

        // Lay out and draw each line.  All segments on a line
        // must be computed before any drawing can occur, since
        // we must know the largest ascent on the line.
        // TextLayouts are computed and stored in a Vector;
        // their horizontal positions are stored in a parallel
        // Vector.

        // lineContainsText is true after first segment is drawn
        boolean lineContainsText = false;
        boolean lineComplete = false;
        float maxAscent = 0, maxDescent = 0;
        float horizontalPos = leftMargin;
        Vector layouts = new Vector(1);
        Vector penPositions = new Vector(1);

        while (!lineComplete) {
            float wrappingWidth = rightMargin - horizontalPos;
            TextLayout layout =
                    measurer.nextLayout(wrappingWidth,
                                        tabLocations[currentTab]+1,
                                        lineContainsText);

            // layout can be null if lineContainsText is true
            if (layout != null) {
                layouts.addElement(layout);
                penPositions.addElement(new Float(horizontalPos));
                horizontalPos += layout.getAdvance();
                maxAscent = Math.max(maxAscent, layout.getAscent());
                maxDescent = Math.max(maxDescent,
                    layout.getDescent() + layout.getLeading());
            } else {
                lineComplete = true;
            }

            lineContainsText = true;

            if (measurer.getPosition() == tabLocations[currentTab]+1) {
                currentTab++;
            }

            if (measurer.getPosition() == styledText.getEndIndex())
                lineComplete = true;
            else if (horizontalPos >= tabStops[tabStops.length-1])
                lineComplete = true;

            if (!lineComplete) {
                // move to next tab stop
                int j;
                for (j=0; horizontalPos >= tabStops[j]; j++) {}
                horizontalPos = tabStops[j];
            }
        }

        verticalPos += maxAscent;

        Enumeration layoutEnum = layouts.elements();
        Enumeration positionEnum = penPositions.elements();

        // now iterate through layouts and draw them
        while (layoutEnum.hasMoreElements()) {
            TextLayout nextLayout = (TextLayout) layoutEnum.nextElement();
            Float nextPosition = (Float) positionEnum.nextElement();
            nextLayout.draw(graphics, nextPosition.floatValue(), verticalPos);
        }

        verticalPos += maxDescent;
    }
}
}</pre>
</blockquote>
@see TextLayout
"
      classrelation 3010946 // breakIter (<unidirectional association>)
	relation 3010946 --->
	  a role_name "breakIter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3010946 // breakIter (<unidirectional association>)
	  b parent class_ref 877058 // BreakIterator
      end

      attribute 1517826 "start"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1517954 "pos"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1518082 "limit"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3011074 // measurer (<unidirectional association>)
	relation 3011074 --->
	  a role_name "measurer" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3011074 // measurer (<unidirectional association>)
	  b parent class_ref 888194 // TextMeasurer
      end

      classrelation 3011202 // charIter (<unidirectional association>)
	relation 3011202 --->
	  a role_name "charIter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3011202 // charIter (<unidirectional association>)
	  b parent class_ref 887298 // CharArrayIterator
      end

      operation 6463106 "LineBreakMeasurer"
	public explicit_return_type ""
	nparams 2
	  param inout name "text" type class_ref 472962 // AttributedCharacterIterator
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>LineBreakMeasurer</code> for the specified text.

@param text the text for which this <code>LineBreakMeasurer</code>
      produces <code>TextLayout</code> objects; the text must contain
      at least one character; if the text available through
      <code>iter</code> changes, further calls to this
      <code>LineBreakMeasurer</code> instance are undefined (except,
      in some cases, when <code>insertChar</code> or
      <code>deleteChar</code> are invoked afterward - see below)
@param frc contains information about a graphics device which is
      needed to measure the text correctly;
      text measurements can vary slightly depending on the
      device resolution, and attributes such as antialiasing; this
      parameter does not specify a translation between the
      <code>LineBreakMeasurer</code> and user space
@see LineBreakMeasurer#insertChar
@see LineBreakMeasurer#deleteChar
"
      end

      operation 6463234 "LineBreakMeasurer"
	public explicit_return_type ""
	nparams 3
	  param inout name "text" type class_ref 472962 // AttributedCharacterIterator
	  param inout name "breakIter" type class_ref 877058 // BreakIterator
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>LineBreakMeasurer</code> for the specified text.

@param text the text for which this <code>LineBreakMeasurer</code>
    produces <code>TextLayout</code> objects; the text must contain
    at least one character; if the text available through
    <code>iter</code> changes, further calls to this
    <code>LineBreakMeasurer</code> instance are undefined (except,
    in some cases, when <code>insertChar</code> or
    <code>deleteChar</code> are invoked afterward - see below)
@param breakIter the {@link BreakIterator} which defines line
    breaks
@param frc contains information about a graphics device which is
      needed to measure the text correctly;
      text measurements can vary slightly depending on the
      device resolution, and attributes such as antialiasing; this
      parameter does not specify a translation between the
      <code>LineBreakMeasurer</code> and user space
@throws IllegalArgumentException if the text has less than one character
@see LineBreakMeasurer#insertChar
@see LineBreakMeasurer#deleteChar
"
      end

      operation 6463362 "nextOffset"
	public explicit_return_type "int"
	nparams 1
	  param in name "wrappingWidth" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the position at the end of the next layout.  Does NOT
update the current position of this <code>LineBreakMeasurer</code>.

@param wrappingWidth the maximum visible advance permitted for
   the text in the next layout
@return an offset in the text representing the limit of the
   next <code>TextLayout</code>.
"
      end

      operation 6463490 "nextOffset"
	public explicit_return_type "int"
	nparams 3
	  param in name "wrappingWidth" explicit_type "float"
	  param in name "offsetLimit" explicit_type "int"
	  param inout name "requireNextWord" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the position at the end of the next layout.  Does NOT
update the current position of this <code>LineBreakMeasurer</code>.

@param wrappingWidth the maximum visible advance permitted for
   the text in the next layout
@param offsetLimit the first character that can not be included
   in the next layout, even if the text after the limit would fit
   within the wrapping width; <code>offsetLimit</code> must be
   greater than the current position
@param requireNextWord if <code>true</code>, the current position
   that is returned if the entire next word does not fit within
   <code>wrappingWidth</code>; if <code>false</code>, the offset
   returned is at least one greater than the current position
@return an offset in the text representing the limit of the
   next <code>TextLayout</code>
"
      end

      operation 6463618 "nextLayout"
	public return_type class_ref 888322 // TextLayout
	nparams 1
	  param in name "wrappingWidth" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next layout, and updates the current position.

@param wrappingWidth the maximum visible advance permitted for
    the text in the next layout
@return a <code>TextLayout</code>, beginning at the current
    position, which represents the next line fitting within
    <code>wrappingWidth</code>
"
      end

      operation 6463746 "nextLayout"
	public return_type class_ref 888322 // TextLayout
	nparams 3
	  param in name "wrappingWidth" explicit_type "float"
	  param in name "offsetLimit" explicit_type "int"
	  param inout name "requireNextWord" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next layout, and updates the current position.

@param wrappingWidth the maximum visible advance permitted
   for the text in the next layout
@param offsetLimit the first character that can not be
   included in the next layout, even if the text after the limit
   would fit within the wrapping width; <code>offsetLimit</code>
   must be greater than the current position
@param requireNextWord if <code>true</code>, and if the entire word
   at the current position does not fit within the wrapping width,
   <code>null</code> is returned. If <code>false</code>, a valid
   layout is returned that includes at least the character at the
   current position
@return a <code>TextLayout</code>, beginning at the current
   position, that represents the next line fitting within
   <code>wrappingWidth</code>.  If the current position is at the end
   of the text used by this <code>LineBreakMeasurer</code>,
   <code>null</code> is returned
"
      end

      operation 6463874 "getPosition"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current position of this <code>LineBreakMeasurer</code>.

@return the current position of this <code>LineBreakMeasurer</code>
@see #setPosition
"
      end

      operation 6464002 "setPosition"
	public explicit_return_type "void"
	nparams 1
	  param in name "newPosition" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current position of this <code>LineBreakMeasurer</code>.

@param newPosition the current position of this
   <code>LineBreakMeasurer</code>; the position should be within the
   text used to construct this <code>LineBreakMeasurer</code> (or in
   the text most recently passed to <code>insertChar</code>
   or <code>deleteChar</code>
@see #getPosition
"
      end

      operation 6464130 "insertChar"
	public explicit_return_type "void"
	nparams 2
	  param inout name "newParagraph" type class_ref 472962 // AttributedCharacterIterator
	  param in name "insertPos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates this <code>LineBreakMeasurer</code> after a single
character is inserted into the text, and sets the current
position to the beginning of the paragraph.

@param newParagraph the text after the insertion
@param insertPos the position in the text at which the character
   is inserted
@throws IndexOutOfBoundsException if <code>insertPos</code> is less
        than the start of <code>newParagraph</code> or greater than
        or equal to the end of <code>newParagraph</code>
@throws NullPointerException if <code>newParagraph</code> is
        <code>null</code>
@see #deleteChar
"
      end

      operation 6464258 "deleteChar"
	public explicit_return_type "void"
	nparams 2
	  param inout name "newParagraph" type class_ref 472962 // AttributedCharacterIterator
	  param in name "deletePos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates this <code>LineBreakMeasurer</code> after a single
character is deleted from the text, and sets the current
position to the beginning of the paragraph.
@param newParagraph the text after the deletion
@param deletePos the position in the text at which the character
   is deleted
@throws IndexOutOfBoundsException if <code>deletePos</code> is
        less than the start of <code>newParagraph</code> or greater
        than the end of <code>newParagraph</code>
@throws NullPointerException if <code>newParagraph</code> is
        <code>null</code>
@see #insertChar
"
      end
    end

    class 888194 "TextMeasurer"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>TextMeasurer</code> class provides the primitive operations
needed for line break: measuring up to a given advance, determining the
advance of a range of characters, and generating a
<code>TextLayout</code> for a range of characters. It also provides
methods for incremental editing of paragraphs.
<p>
A <code>TextMeasurer</code> object is constructed with an
{@link java.text.AttributedCharacterIterator AttributedCharacterIterator}
representing a single paragraph of text.  The value returned by the
{@link AttributedCharacterIterator#getBeginIndex() getBeginIndex}
method of <code>AttributedCharacterIterator</code>
defines the absolute index of the first character.  The value
returned by the
{@link AttributedCharacterIterator#getEndIndex() getEndIndex}
method of <code>AttributedCharacterIterator</code> defines the index
past the last character.  These values define the range of indexes to
use in calls to the <code>TextMeasurer</code>.  For example, calls to
get the advance of a range of text or the line break of a range of text
must use indexes between the beginning and end index values.  Calls to
{@link #insertChar(java.text.AttributedCharacterIterator, int) insertChar}
and
{@link #deleteChar(java.text.AttributedCharacterIterator, int) deleteChar}
reset the <code>TextMeasurer</code> to use the beginning index and end
index of the <code>AttributedCharacterIterator</code> passed in those calls.
<p>
Most clients will use the more convenient <code>LineBreakMeasurer</code>,
which implements the standard line break policy (placing as many words
as will fit on each line).

@author John Raley
@see LineBreakMeasurer
@since 1.3
"
      classrelation 3023234 // <realization>
	relation 3023234 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3023234 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 1541890 "EST_LINES"
	class_attribute private explicit_type "float"
	init_value " (float) 2.1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of lines to format to.
"
      end

      classrelation 3023362 // fFrc (<unidirectional association>)
	relation 3023362 --->
	  a role_name "fFrc" private
	    comment "
static {
String s = System.getProperty(\"estLines\");
if (s != null) {
try {
Float f = new Float(s);
EST_LINES = f.floatValue();
}
catch(NumberFormatException e) {
}
}
//System.out.println(\"EST_LINES=\"+EST_LINES);
}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3023362 // fFrc (<unidirectional association>)
	  b parent class_ref 866178 // FontRenderContext
      end

      attribute 1542018 "fStart"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1542146 "fChars"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " characters in source text
"
      end

      classrelation 3023490 // fBidi (<unidirectional association>)
	relation 3023490 --->
	  a role_name "fBidi" private
	    comment " Bidi for this paragraph
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3023490 // fBidi (<unidirectional association>)
	  b parent class_ref 890114 // Bidi
      end

      attribute 1542274 "fLevels"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Levels array for chars in this paragraph - needed to reorder
 trailing counterdirectional whitespace
"
      end

      attribute 1542402 "fComponents"
	private explicit_type "TextLineComponent"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " line components in logical order
"
      end

      attribute 1542530 "fComponentStart"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " index where components begin
"
      end

      attribute 1542658 "fComponentLimit"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " index where components end
"
      end

      attribute 1542786 "haveLayoutWindow"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3023618 // fLineBreak (<unidirectional association>)
	relation 3023618 --->
	  a role_name "fLineBreak" init_value " null" private
	    comment " used to find valid starting points for line components
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3023618 // fLineBreak (<unidirectional association>)
	  b parent class_ref 877058 // BreakIterator
      end

      classrelation 3023746 // charIter (<unidirectional association>)
	relation 3023746 --->
	  a role_name "charIter" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3023746 // charIter (<unidirectional association>)
	  b parent class_ref 887298 // CharArrayIterator
      end

      attribute 1542914 "layoutCount"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1543042 "layoutCharCount"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3023874 // fParagraph (<unidirectional association>)
	relation 3023874 --->
	  a role_name "fParagraph" private
	    comment " paragraph, with resolved fonts and styles
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3023874 // fParagraph (<unidirectional association>)
	  b parent class_ref 889090 // StyledParagraph
      end

      attribute 1543170 "fIsDirectionLTR"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " paragraph data - same across all layouts
"
      end

      attribute 1543298 "fBaseline"
	private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1543426 "fBaselineOffsets"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1543554 "fJustifyRatio"
	private explicit_type "float"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6496130 "TextMeasurer"
	public explicit_return_type ""
	nparams 2
	  param inout name "text" type class_ref 472962 // AttributedCharacterIterator
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>TextMeasurer</code> from the source text.
The source text should be a single entire paragraph.
@param text the source paragraph.  Cannot be null.
@param frc the information about a graphics device which is needed
      to measure the text correctly.  Cannot be null.
"
      end

      operation 6496258 "clone"
	protected return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6496386 "invalidateComponents"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6496514 "initAll"
	private explicit_return_type "void"
	nparams 1
	  param inout name "text" type class_ref 472962 // AttributedCharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize state, including fChars array, direction, and
fBidi.
"
      end

      operation 6496642 "generateComponents"
	private explicit_return_type "void"
	nparams 2
	  param in name "startingAt" explicit_type "int"
	  param in name "endingAt" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate components for the paragraph.  fChars, fBidi should have been
initialized already.
"
      end

      operation 6496770 "calcLineBreak"
	private explicit_return_type "int"
	nparams 2
	  param in name "pos" explicit_type "int"
	  param in name "maxAdvance" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6496898 "trailingCdWhitespaceStart"
	private explicit_return_type "int"
	nparams 2
	  param in name "startPos" explicit_type "int"
	  param in name "limitPos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "According to the Unicode Bidirectional Behavior specification
(Unicode Standard 2.0, section 3.11), whitespace at the ends
of lines which would naturally flow against the base direction
must be made to flow with the line direction, and moved to the
end of the line.  This method returns the start of the sequence
of trailing whitespace characters to move to the end of a
line taken from the given range.
"
      end

      operation 6497026 "makeComponentsOnRange"
	private explicit_return_type "TextLineComponent"
	nparams 2
	  param in name "startPos" explicit_type "int"
	  param in name "limitPos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6497154 "makeTextLineOnRange"
	private return_type class_ref 889474 // TextLine
	nparams 2
	  param in name "startPos" explicit_type "int"
	  param in name "limitPos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6497282 "ensureComponents"
	private explicit_return_type "void"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6497410 "makeLayoutWindow"
	private explicit_return_type "void"
	nparams 1
	  param in name "localStart" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6497538 "getLineBreakIndex"
	public explicit_return_type "int"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "maxAdvance" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character which will not fit on
on a line beginning at <code>start</code> and possible
measuring up to <code>maxAdvance</code> in graphical width.

@param start the character index at which to start measuring.
 <code>start</code> is an absolute index, not relative to the
 start of the paragraph
@param maxAdvance the graphical width in which the line must fit
@return the index after the last character that will fit
 on a line beginning at <code>start</code>, which is not longer
 than <code>maxAdvance</code> in graphical width
@throws IllegalArgumentException if <code>start</code> is
         less than the beginning of the paragraph.
"
      end

      operation 6497666 "getAdvanceBetween"
	public explicit_return_type "float"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the graphical width of a line beginning at <code>start</code>
and including characters up to <code>limit</code>.
<code>start</code> and <code>limit</code> are absolute indices,
not relative to the start of the paragraph.

@param start the character index at which to start measuring
@param limit the character index at which to stop measuring
@return the graphical width of a line beginning at <code>start</code>
  and including characters up to <code>limit</code>
@throws IndexOutOfBoundsException if <code>limit</code> is less
        than <code>start</code>
@throws IllegalArgumentException if <code>start</code> or
         <code>limit</code> is not between the beginning of
         the paragraph and the end of the paragraph.
"
      end

      operation 6497794 "getLayout"
	public return_type class_ref 888322 // TextLayout
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>TextLayout</code> on the given character range.

@param start the index of the first character
@param limit the index after the last character.  Must be greater
  than <code>start</code>
@return a <code>TextLayout</code> for the characters beginning at
 <code>start</code> up to (but not including) <code>limit</code>
@throws IndexOutOfBoundsException if <code>limit</code> is less
        than <code>start</code>
@throws IllegalArgumentException if <code>start</code> or
         <code>limit</code> is not between the beginning of
         the paragraph and the end of the paragraph.
"
      end

      attribute 1543682 "formattedChars"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1543810 "wantStats"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "\"true\".equals(System.getProperty(\"collectStats\"));"
      end

      attribute 1543938 "collectStats"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6497922 "printStats"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6498050 "insertChar"
	public explicit_return_type "void"
	nparams 2
	  param inout name "newParagraph" type class_ref 472962 // AttributedCharacterIterator
	  param in name "insertPos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the <code>TextMeasurer</code> after a single character has
been inserted
into the paragraph currently represented by this
<code>TextMeasurer</code>.  After this call, this
<code>TextMeasurer</code> is equivalent to a new
<code>TextMeasurer</code> created from the text;  however, it will
usually be more efficient to update an existing
<code>TextMeasurer</code> than to create a new one from scratch.

@param newParagraph the text of the paragraph after performing
the insertion.  Cannot be null.
@param insertPos the position in the text where the character was
inserted.  Must not be less than the start of
<code>newParagraph</code>, and must be less than the end of
<code>newParagraph</code>.
@throws IndexOutOfBoundsException if <code>insertPos</code> is less
        than the start of <code>newParagraph</code> or greater than
        or equal to the end of <code>newParagraph</code>
@throws NullPointerException if <code>newParagraph</code> is
        <code>null</code>
"
      end

      operation 6498178 "deleteChar"
	public explicit_return_type "void"
	nparams 2
	  param inout name "newParagraph" type class_ref 472962 // AttributedCharacterIterator
	  param in name "deletePos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the <code>TextMeasurer</code> after a single character has
been deleted
from the paragraph currently represented by this
<code>TextMeasurer</code>.  After this call, this
<code>TextMeasurer</code> is equivalent to a new <code>TextMeasurer</code>
created from the text;  however, it will usually be more efficient
to update an existing <code>TextMeasurer</code> than to create a new one
from scratch.

@param newParagraph the text of the paragraph after performing
the deletion.  Cannot be null.
@param deletePos the position in the text where the character was removed.
Must not be less than
the start of <code>newParagraph</code>, and must not be greater than the
end of <code>newParagraph</code>.
@throws IndexOutOfBoundsException if <code>deletePos</code> is
        less than the start of <code>newParagraph</code> or greater
        than the end of <code>newParagraph</code>
@throws NullPointerException if <code>newParagraph</code> is
        <code>null</code>
"
      end

      operation 6498306 "getChars"
	package explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "NOTE:  This method is only for LineBreakMeasurer's use.  It is package-
private because it returns internal data.
"
      end
    end

    class 888322 "TextLayout"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
<code>TextLayout</code> is an immutable graphical representation of styled
character data.
<p>
It provides the following capabilities:
<ul>
<li>implicit bidirectional analysis and reordering,
<li>cursor positioning and movement, including split cursors for
mixed directional text,
<li>highlighting, including both logical and visual highlighting
for mixed directional text,
<li>multiple baselines (roman, hanging, and centered),
<li>hit testing,
<li>justification,
<li>default font substitution,
<li>metric information such as ascent, descent, and advance, and
<li>rendering
</ul>
<p>
A <code>TextLayout</code> object can be rendered using
its <code>draw</code> method.
<p>
<code>TextLayout</code> can be constructed either directly or through
the use of a {@link LineBreakMeasurer}.  When constructed directly, the
source text represents a single paragraph.  <code>LineBreakMeasurer</code>
allows styled text to be broken into lines that fit within a particular
width.  See the <code>LineBreakMeasurer</code> documentation for more
information.
<p>
<code>TextLayout</code> construction logically proceeds as follows:
<ul>
<li>paragraph attributes are extracted and examined,
<li>text is analyzed for bidirectional reordering, and reordering
information is computed if needed,
<li>text is segmented into style runs
<li>fonts are chosen for style runs, first by using a font if the
attribute {@link TextAttribute#FONT} is present, otherwise by computing
a default font using the attributes that have been defined
<li>if text is on multiple baselines, the runs or subruns are further
broken into subruns sharing a common baseline,
<li>glyphvectors are generated for each run using the chosen font,
<li>final bidirectional reordering is performed on the glyphvectors
</ul>
<p>
All graphical information returned from a <code>TextLayout</code>
object's methods is relative to the origin of the
<code>TextLayout</code>, which is the intersection of the
<code>TextLayout</code> object's baseline with its left edge.  Also,
coordinates passed into a <code>TextLayout</code> object's methods
are assumed to be relative to the <code>TextLayout</code> object's
origin.  Clients usually need to translate between a
<code>TextLayout</code> object's coordinate system and the coordinate
system in another object (such as a
{@link java.awt.Graphics Graphics} object).
<p>
<code>TextLayout</code> objects are constructed from styled text,
but they do not retain a reference to their source text.  Thus,
changes in the text previously used to generate a <code>TextLayout</code>
do not affect the <code>TextLayout</code>.
<p>
Three methods on a <code>TextLayout</code> object
(<code>getNextRightHit</code>, <code>getNextLeftHit</code>, and
<code>hitTestChar</code>) return instances of {@link TextHitInfo}.
The offsets contained in these <code>TextHitInfo</code> objects
are relative to the start of the <code>TextLayout</code>, <b>not</b>
to the text used to create the <code>TextLayout</code>.  Similarly,
<code>TextLayout</code> methods that accept <code>TextHitInfo</code>
instances as parameters expect the <code>TextHitInfo</code> object's
offsets to be relative to the <code>TextLayout</code>, not to any
underlying text storage model.
<p>
<strong>Examples</strong>:<p>
Constructing and drawing a <code>TextLayout</code> and its bounding
rectangle:
<blockquote><pre>
  Graphics2D g = ...;
  Point2D loc = ...;
  Font font = Font.getFont(\"Helvetica-bold-italic\");
  FontRenderContext frc = g.getFontRenderContext();
  TextLayout layout = new TextLayout(\"This is a string\", font, frc);
  layout.draw(g, (float)loc.getX(), (float)loc.getY());

  Rectangle2D bounds = layout.getBounds();
  bounds.setRect(bounds.getX()+loc.getX(),
                 bounds.getY()+loc.getY(),
                 bounds.getWidth(),
                 bounds.getHeight());
  g.draw(bounds);
</pre>
</blockquote>
<p>
Hit-testing a <code>TextLayout</code> (determining which character is at
a particular graphical location):
<blockquote><pre>
  Point2D click = ...;
  TextHitInfo hit = layout.hitTestChar(
                        (float) (click.getX() - loc.getX()),
                        (float) (click.getY() - loc.getY()));
</pre>
</blockquote>
<p>
Responding to a right-arrow key press:
<blockquote><pre>
  int insertionIndex = ...;
  TextHitInfo next = layout.getNextRightHit(insertionIndex);
  if (next != null) {
      // translate graphics to origin of layout on screen
      g.translate(loc.getX(), loc.getY());
      Shape[] carets = layout.getCaretShapes(next.getInsertionIndex());
      g.draw(carets[0]);
      if (carets[1] != null) {
          g.draw(carets[1]);
      }
  }
</pre></blockquote>
<p>
Drawing a selection range corresponding to a substring in the source text.
The selected area may not be visually contiguous:
<blockquote><pre>
  // selStart, selLimit should be relative to the layout,
  // not to the source text

  int selStart = ..., selLimit = ...;
  Color selectionColor = ...;
  Shape selection = layout.getLogicalHighlightShape(selStart, selLimit);
  // selection may consist of disjoint areas
  // graphics is assumed to be tranlated to origin of layout
  g.setColor(selectionColor);
  g.fill(selection);
</pre></blockquote>
<p>
Drawing a visually contiguous selection range.  The selection range may
correspond to more than one substring in the source text.  The ranges of
the corresponding source text substrings can be obtained with
<code>getLogicalRangesForVisualSelection()</code>:
<blockquote><pre>
  TextHitInfo selStart = ..., selLimit = ...;
  Shape selection = layout.getVisualHighlightShape(selStart, selLimit);
  g.setColor(selectionColor);
  g.fill(selection);
  int[] ranges = getLogicalRangesForVisualSelection(selStart, selLimit);
  // ranges[0], ranges[1] is the first selection range,
  // ranges[2], ranges[3] is the second selection range, etc.
</pre></blockquote>
<p>
Note: Font rotations can cause text baselines to be rotated, and
multiple runs with different rotations can cause the baseline to
bend or zig-zag.  In order to account for this (rare) possibility,
some APIs are specified to return metrics and take parameters 'in
baseline-relative coordinates' (e.g. ascent, advance), and others
are in 'in standard coordinates' (e.g. getBounds).  Values in
baseline-relative coordinates map the 'x' coordinate to the
distance along the baseline, (positive x is forward along the
baseline), and the 'y' coordinate to a distance along the
perpendicular to the baseline at 'x' (positive y is 90 degrees
clockwise from the baseline vector).  Values in standard
coordinates are measured along the x and y axes, with 0,0 at the
origin of the TextLayout.  Documentation for each relevant API
indicates what values are in what coordinate system.  In general,
measurement-related APIs are in baseline-relative coordinates,
while display-related APIs are in standard coordinates.

@see LineBreakMeasurer
@see TextAttribute
@see TextHitInfo
@see LayoutPath
"
      classrelation 3021570 // <realization>
	relation 3021570 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3021570 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 1538178 "characterCount"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1538306 "isVerticalLine"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1538434 "baseline"
	private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1538562 "baselineOffsets"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " why have these ?"
      end

      classrelation 3021698 // textLine (<unidirectional association>)
	relation 3021698 --->
	  a role_name "textLine" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3021698 // textLine (<unidirectional association>)
	  b parent class_ref 889474 // TextLine
      end

      classrelation 3021826 // lineMetrics (<unidirectional association>)
	relation 3021826 --->
	  a role_name "lineMetrics" init_value " null" private
	    comment " cached values computed from GlyphSets and set info:
 all are recomputed from scratch in buildCache()
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3021826 // lineMetrics (<unidirectional association>)
	  b parent class_ref 889602 // TextLineMetrics
      end

      attribute 1538690 "visibleAdvance"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1538818 "hashCodeCache"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1538946 "cacheIsValid"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "TextLayouts are supposedly immutable.  If you mutate a TextLayout under
the covers (like the justification code does) you'll need to set this
back to false.  Could be replaced with textLine != null <--> cacheIsValid.

"
      end

      attribute 1539074 "justifyRatio"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " This value is obtained from an attribute, and constrained to the
 interval [0,1].  If 0, the layout cannot be justified.
"
      end

      attribute 1539202 "ALREADY_JUSTIFIED"
	class_attribute const_attribute private explicit_type "float"
	init_value " -53.9f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " If a layout is produced by justification, then that layout
 cannot be justified.  To enforce this constraint the
 justifyRatio of the justified layout is set to this value.
"
      end

      attribute 1539330 "dx"
	class_attribute private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " dx and dy specify the distance between the TextLayout's origin
 and the origin of the leftmost GlyphSet (TextLayoutComponent,
 actually).  They were used for hanging punctuation support,
 which is no longer implemented.  Currently they are both always 0,
 and TextLayout is not guaranteed to work with non-zero dx, dy
 values right now.  They were left in as an aide and reminder to
 anyone who implements hanging punctuation or other similar stuff.
 They are static now so they don't take up space in TextLayout
 instances.
"
      end

      attribute 1539458 "dy"
	class_attribute private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3021954 // naturalBounds (<unidirectional association>)
	relation 3021954 --->
	  a role_name "naturalBounds" init_value " null" private
	    comment "
Natural bounds is used internally.  It is built on demand in
getNaturalBounds.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3021954 // naturalBounds (<unidirectional association>)
	  b parent class_ref 380674 // Rectangle2D
      end

      classrelation 3022082 // boundsRect (<unidirectional association>)
	relation 3022082 --->
	  a role_name "boundsRect" init_value " null" private
	    comment "
boundsRect encloses all of the bits this TextLayout can draw.  It
is build on demand in getBounds.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3022082 // boundsRect (<unidirectional association>)
	  b parent class_ref 380674 // Rectangle2D
      end

      attribute 1539586 "caretsInLigaturesAreAllowed"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "flag to supress/allow carets inside of ligatures when hit testing or
arrow-keying

"
      end

      class 889730 "CaretPolicy"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 6479490 "CaretPolicy"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a <code>CaretPolicy</code>.
"
	end

	operation 6479618 "getStrongCaret"
	  public return_type class_ref 886914 // TextHitInfo
	  nparams 3
	    param inout name "hit1" type class_ref 886914 // TextHitInfo
	    param inout name "hit2" type class_ref 886914 // TextHitInfo
	    param inout name "layout" type class_ref 888322 // TextLayout
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Chooses one of the specified <code>TextHitInfo</code> instances as
a strong caret in the specified <code>TextLayout</code>.
@param hit1 a valid hit in <code>layout</code>
@param hit2 a valid hit in <code>layout</code>
@param layout the <code>TextLayout</code> in which
       <code>hit1</code> and <code>hit2</code> are used
@return <code>hit1</code> or <code>hit2</code>
       (or an equivalent <code>TextHitInfo</code>), indicating the
       strong caret.
"
	end
      end

      classrelation 3022210 // DEFAULT_CARET_POLICY (<unidirectional association>)
	relation 3022210 --->
	  a role_name "DEFAULT_CARET_POLICY" init_value " new CaretPolicy()" class_relation const_relation public
	    comment "
This <code>CaretPolicy</code> is used when a policy is not specified
by the client.  With this policy, a hit on a character whose direction
is the same as the line direction is stronger than a hit on a
counterdirectional character.  If the characters' directions are
the same, a hit on the leading edge of a character is stronger
than a hit on the trailing edge of a character.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3022210 // DEFAULT_CARET_POLICY (<unidirectional association>)
	  b parent class_ref 889730 // CaretPolicy
      end

      operation 6479746 "TextLayout"
	public explicit_return_type ""
	nparams 3
	  param inout name "string" type class_ref 128130 // String
	  param inout name "font" type class_ref 340354 // Font
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>TextLayout</code> from a <code>String</code>
and a {@link Font}.  All the text is styled using the specified
<code>Font</code>.
<p>
The <code>String</code> must specify a single paragraph of text,
because an entire paragraph is required for the bidirectional
algorithm.
@param string the text to display
@param font a <code>Font</code> used to style the text
@param frc contains information about a graphics device which is needed
      to measure the text correctly.
      Text measurements can vary slightly depending on the
      device resolution, and attributes such as antialiasing.  This
      parameter does not specify a translation between the
      <code>TextLayout</code> and user space.
"
      end

      operation 6479874 "TextLayout"
	public explicit_return_type ""
	nparams 3
	  param inout name "string" type class_ref 128130 // String
	  param inout name "attributes" type class_ref 130178 // Map
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? extends Attribute,?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>TextLayout</code> from a <code>String</code>
and an attribute set.
<p>
All the text is styled using the provided attributes.
<p>
<code>string</code> must specify a single paragraph of text because an
entire paragraph is required for the bidirectional algorithm.
@param string the text to display
@param attributes the attributes used to style the text
@param frc contains information about a graphics device which is needed
      to measure the text correctly.
      Text measurements can vary slightly depending on the
      device resolution, and attributes such as antialiasing.  This
      parameter does not specify a translation between the
      <code>TextLayout</code> and user space.
"
      end

      operation 6480002 "singleFont"
	class_operation private return_type class_ref 340354 // Font
	nparams 4
	  param inout name "text" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	  param inout name "attributes" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<? extends Attribute, ?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines a font for the attributes, and if a single font can render
all the text on one baseline, return it, otherwise null.  If the
attributes specify a font, assume it can display all the text without
checking.
If the AttributeSet contains an embedded graphic, return null.
"
      end

      operation 6480130 "TextLayout"
	public explicit_return_type ""
	nparams 2
	  param inout name "text" type class_ref 472962 // AttributedCharacterIterator
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>TextLayout</code> from an iterator over styled text.
<p>
The iterator must specify a single paragraph of text because an
entire paragraph is required for the bidirectional
algorithm.
@param text the styled text to display
@param frc contains information about a graphics device which is needed
      to measure the text correctly.
      Text measurements can vary slightly depending on the
      device resolution, and attributes such as antialiasing.  This
      parameter does not specify a translation between the
      <code>TextLayout</code> and user space.
"
      end

      operation 6480258 "TextLayout"
	package explicit_return_type ""
	nparams 4
	  param inout name "textLine" type class_ref 889474 // TextLine
	  param in name "baseline" explicit_type "byte"
	  param inout name "baselineOffsets" explicit_type "float"
	multiplicity "[]"
	  param in name "justifyRatio" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>TextLayout</code> from a {@link TextLine} and
some paragraph data.  This method is used by {@link TextMeasurer}.
@param textLine the line measurement attributes to apply to the
      the resulting <code>TextLayout</code>
@param baseline the baseline of the text
@param baselineOffsets the baseline offsets for this
<code>TextLayout</code>.  This should already be normalized to
<code>baseline</code>
@param justifyRatio <code>0</code> if the <code>TextLayout</code>
    cannot be justified; <code>1</code> otherwise.
"
      end

      operation 6480386 "paragraphInit"
	private explicit_return_type "void"
	nparams 4
	  param in name "aBaseline" explicit_type "byte"
	  param inout name "lm" explicit_type "CoreMetrics"
	  param inout name "paragraphAttrs" type class_ref 130178 // Map
	  param inout name "text" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? extends Attribute, ?> ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize the paragraph-specific data.
"
      end

      operation 6480514 "fastInit"
	private explicit_return_type "void"
	nparams 4
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	  param inout name "font" type class_ref 340354 // Font
	  param inout name "attrs" type class_ref 130178 // Map
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}<? extends Attribute, ?> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "the fast init generates a single glyph set.  This requires:
all one style
all renderable by one font (ie no embedded graphics)
all on one baseline
"
      end

      operation 6480642 "standardInit"
	private explicit_return_type "void"
	nparams 3
	  param inout name "text" type class_ref 472962 // AttributedCharacterIterator
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "the standard init generates multiple glyph sets based on style,
renderable, and baseline runs.
@param chars the text in the iterator, extracted into a char array
"
      end

      operation 6480770 "ensureCache"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A utility to rebuild the ascent/descent/leading/advance cache.
You'll need to call this if you clone and mutate (like justification,
editing methods do)
"
      end

      operation 6480898 "buildCache"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6481026 "getNaturalBounds"
	private return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The 'natural bounds' encloses all the carets the layout can draw.

"
      end

      operation 6481154 "clone"
	protected return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a copy of this <code>TextLayout</code>.
"
      end

      operation 6481282 "checkTextHit"
	private explicit_return_type "void"
	nparams 1
	  param inout name "hit" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility to throw an expection if an invalid TextHitInfo is passed
as a parameter.  Avoids code duplication.
"
      end

      operation 6481410 "getJustifiedLayout"
	public return_type class_ref 888322 // TextLayout
	nparams 1
	  param in name "justificationWidth" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a copy of this <code>TextLayout</code> justified to the
specified width.
<p>
If this <code>TextLayout</code> has already been justified, an
exception is thrown.  If this <code>TextLayout</code> object's
justification ratio is zero, a <code>TextLayout</code> identical
to this <code>TextLayout</code> is returned.
@param justificationWidth the width to use when justifying the line.
For best results, it should not be too different from the current
advance of the line.
@return a <code>TextLayout</code> justified to the specified width.
@exception Error if this layout has already been justified, an Error is
thrown.
"
      end

      operation 6481538 "handleJustify"
	protected explicit_return_type "void"
	nparams 1
	  param in name "justificationWidth" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Justify this layout.  Overridden by subclassers to control justification
(if there were subclassers, that is...)

The layout will only justify if the paragraph attributes (from the
source text, possibly defaulted by the layout attributes) indicate a
non-zero justification ratio.  The text will be justified to the
indicated width.  The current implementation also adjusts hanging
punctuation and trailing whitespace to overhang the justification width.
Once justified, the layout may not be rejustified.
<p>
Some code may rely on immutablity of layouts.  Subclassers should not
call this directly, but instead should call getJustifiedLayout, which
will call this method on a clone of this layout, preserving
the original.

@param justificationWidth the width to use when justifying the line.
For best results, it should not be too different from the current
advance of the line.
@see #getJustifiedLayout(float)
"
      end

      operation 6481666 "getBaseline"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the baseline for this <code>TextLayout</code>.
The baseline is one of the values defined in <code>Font</code>,
which are roman, centered and hanging.  Ascent and descent are
relative to this baseline.  The <code>baselineOffsets</code>
are also relative to this baseline.
@return the baseline of this <code>TextLayout</code>.
@see #getBaselineOffsets()
@see Font
"
      end

      operation 6481794 "getBaselineOffsets"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the offsets array for the baselines used for this
<code>TextLayout</code>.
<p>
The array is indexed by one of the values defined in
<code>Font</code>, which are roman, centered and hanging.  The
values are relative to this <code>TextLayout</code> object's
baseline, so that <code>getBaselineOffsets[getBaseline()] == 0</code>.
Offsets are added to the position of the <code>TextLayout</code>
object's baseline to get the position for the new baseline.
@return the offsets array containing the baselines used for this
   <code>TextLayout</code>.
@see #getBaseline()
@see Font
"
      end

      operation 6481922 "getAdvance"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the advance of this <code>TextLayout</code>.
The advance is the distance from the origin to the advance of the
rightmost (bottommost) character.  This is in baseline-relative
coordinates.
@return the advance of this <code>TextLayout</code>.
"
      end

      operation 6482050 "getVisibleAdvance"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the advance of this <code>TextLayout</code>, minus trailing
whitespace.  This is in baseline-relative coordinates.
@return the advance of this <code>TextLayout</code> without the
     trailing whitespace.
@see #getAdvance()
"
      end

      operation 6482178 "getAscent"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ascent of this <code>TextLayout</code>.
The ascent is the distance from the top (right) of the
<code>TextLayout</code> to the baseline.  It is always either
positive or zero.  The ascent is sufficient to
accommodate superscripted text and is the maximum of the sum of the
ascent, offset, and baseline of each glyph.  The ascent is
the maximum ascent from the baseline of all the text in the
TextLayout.  It is in baseline-relative coordinates.
@return the ascent of this <code>TextLayout</code>.
"
      end

      operation 6482306 "getDescent"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the descent of this <code>TextLayout</code>.
The descent is the distance from the baseline to the bottom (left) of
the <code>TextLayout</code>.  It is always either positive or zero.
The descent is sufficient to accommodate subscripted text and is the
maximum of the sum of the descent, offset, and baseline of each glyph.
This is the maximum descent from the baseline of all the text in
the TextLayout.  It is in baseline-relative coordinates.
@return the descent of this <code>TextLayout</code>.
"
      end

      operation 6482434 "getLeading"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the leading of the <code>TextLayout</code>.
The leading is the suggested interline spacing for this
<code>TextLayout</code>.  This is in baseline-relative
coordinates.
<p>
The leading is computed from the leading, descent, and baseline
of all glyphvectors in the <code>TextLayout</code>.  The algorithm
is roughly as follows:
<blockquote><pre>
maxD = 0;
maxDL = 0;
for (GlyphVector g in all glyphvectors) {
   maxD = max(maxD, g.getDescent() + offsets[g.getBaseline()]);
   maxDL = max(maxDL, g.getDescent() + g.getLeading() +
                      offsets[g.getBaseline()]);
}
return maxDL - maxD;
</pre></blockquote>
@return the leading of this <code>TextLayout</code>.
"
      end

      operation 6482562 "getBounds"
	public return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounds of this <code>TextLayout</code>.
The bounds are in standard coordinates.
<p>Due to rasterization effects, this bounds might not enclose all of the
pixels rendered by the TextLayout.</p>
It might not coincide exactly with the ascent, descent,
origin or advance of the <code>TextLayout</code>.
@return a {@link Rectangle2D} that is the bounds of this
       <code>TextLayout</code>.
"
      end

      operation 6482690 "getPixelBounds"
	public return_type class_ref 314114 // Rectangle
	nparams 3
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pixel bounds of this <code>TextLayout</code> when
rendered in a graphics with the given
<code>FontRenderContext</code> at the given location.  The
graphics render context need not be the same as the
<code>FontRenderContext</code> used to create this
<code>TextLayout</code>, and can be null.  If it is null, the
<code>FontRenderContext</code> of this <code>TextLayout</code>
is used.
@param frc the <code>FontRenderContext</code> of the <code>Graphics</code>.
@param x the x-coordinate at which to render this <code>TextLayout</code>.
@param y the y-coordinate at which to render this <code>TextLayout</code>.
@return a <code>Rectangle</code> bounding the pixels that would be affected.
@see GlyphVector#getPixelBounds
@since 1.6
"
      end

      operation 6482818 "isLeftToRight"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this <code>TextLayout</code> has
a left-to-right base direction or <code>false</code> if it has
a right-to-left base direction.  The <code>TextLayout</code>
has a base direction of either left-to-right (LTR) or
right-to-left (RTL).  The base direction is independent of the
actual direction of text on the line, which may be either LTR,
RTL, or mixed. Left-to-right layouts by default should position
flush left.  If the layout is on a tabbed line, the
tabs run left to right, so that logically successive layouts position
left to right.  The opposite is true for RTL layouts. By default they
should position flush left, and tabs run right-to-left.
@return <code>true</code> if the base direction of this
        <code>TextLayout</code> is left-to-right; <code>false</code>
        otherwise.
"
      end

      operation 6482946 "isVertical"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this <code>TextLayout</code> is vertical.
@return <code>true</code> if this <code>TextLayout</code> is vertical;
     <code>false</code> otherwise.
"
      end

      operation 6483074 "getCharacterCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of characters represented by this
<code>TextLayout</code>.
@return the number of characters in this <code>TextLayout</code>.
"
      end

      operation 6483202 "getCaretInfo"
	private explicit_return_type "float"
	nparams 3
	  param in name "caret" explicit_type "int"
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	  param inout name "info" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "carets and hit testing

Positions on a text line are represented by instances of TextHitInfo.
Any TextHitInfo with characterOffset between 0 and characterCount-1,
inclusive, represents a valid position on the line.  Additionally,
[-1, trailing] and [characterCount, leading] are valid positions, and
represent positions at the logical start and end of the line,
respectively.

The characterOffsets in TextHitInfo's used and returned by TextLayout
are relative to the beginning of the text layout, not necessarily to
the beginning of the text storage the client is using.


Every valid TextHitInfo has either one or two carets associated with it.
A caret is a visual location in the TextLayout indicating where text at
the TextHitInfo will be displayed on screen.  If a TextHitInfo
represents a location on a directional boundary, then there are two
possible visible positions for newly inserted text.  Consider the
following example, in which capital letters indicate right-to-left text,
and the overall line direction is left-to-right:

Text Storage: [ a, b, C, D, E, f ]
Display:        a b E D C f

The text hit info (1, t) represents the trailing side of 'b'.  If 'q',
a left-to-right character is inserted into the text storage at this
location, it will be displayed between the 'b' and the 'E':

Text Storage: [ a, b, q, C, D, E, f ]
Display:        a b q E D C f

However, if a 'W', which is right-to-left, is inserted into the storage
after 'b', the storage and display will be:

Text Storage: [ a, b, W, C, D, E, f ]
Display:        a b E D C W f

So, for the original text storage, two carets should be displayed for
location (1, t): one visually between 'b' and 'E' and one visually
between 'C' and 'f'.


When two carets are displayed for a TextHitInfo, one caret is the
'strong' caret and the other is the 'weak' caret.  The strong caret
indicates where an inserted character will be displayed when that
character's direction is the same as the direction of the TextLayout.
The weak caret shows where an character inserted character will be
displayed when the character's direction is opposite that of the
TextLayout.


Clients should not be overly concerned with the details of correct
caret display. TextLayout.getCaretShapes(TextHitInfo) will return an
array of two paths representing where carets should be displayed.
The first path in the array is the strong caret; the second element,
if non-null, is the weak caret.  If the second element is null,
then there is no weak caret for the given TextHitInfo.


Since text can be visually reordered, logically consecutive
TextHitInfo's may not be visually consecutive.  One implication of this
is that a client cannot tell from inspecting a TextHitInfo whether the
hit represents the first (or last) caret in the layout.  Clients
can call getVisualOtherHit();  if the visual companion is
(-1, TRAILING) or (characterCount, LEADING), then the hit is at the
first (last) caret position in the layout.
"
      end

      operation 6483330 "getCaretInfo"
	public explicit_return_type "float"
	nparams 2
	  param inout name "hit" type class_ref 886914 // TextHitInfo
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns information about the caret corresponding to <code>hit</code>.
The first element of the array is the intersection of the caret with
the baseline, as a distance along the baseline. The second element
of the array is the inverse slope (run/rise) of the caret, measured
with respect to the baseline at that point.
<p>
This method is meant for informational use.  To display carets, it
is better to use <code>getCaretShapes</code>.
@param hit a hit on a character in this <code>TextLayout</code>
@param bounds the bounds to which the caret info is constructed.
    The bounds is in baseline-relative coordinates.
@return a two-element array containing the position and slope of
the caret.  The returned caret info is in baseline-relative coordinates.
@see #getCaretShapes(int, Rectangle2D, TextLayout.CaretPolicy)
@see Font#getItalicAngle
"
      end

      operation 6483458 "getCaretInfoTestInternal"
	private explicit_return_type "float"
	nparams 2
	  param inout name "hit" type class_ref 886914 // TextHitInfo
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this version provides extra info in the float array
 the first two values are as above
 the next four values are the endpoints of the caret, as computed
 using the hit character's offset (baseline + ssoffset) and
 natural ascent and descent.
 these  values are trimmed to the bounds where required to fit,
 but otherwise independent of it."
      end

      operation 6483586 "getCaretInfo"
	public explicit_return_type "float"
	nparams 1
	  param inout name "hit" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns information about the caret corresponding to <code>hit</code>.
This method is a convenience overload of <code>getCaretInfo</code> and
uses the natural bounds of this <code>TextLayout</code>.
@param hit a hit on a character in this <code>TextLayout</code>
@return the information about a caret corresponding to a hit.  The
    returned caret info is in baseline-relative coordinates.
"
      end

      operation 6483714 "hitToCaret"
	private explicit_return_type "int"
	nparams 1
	  param inout name "hit" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a caret index corresponding to <code>hit</code>.
Carets are numbered from left to right (top to bottom) starting from
zero. This always places carets next to the character hit, on the
indicated side of the character.
@param hit a hit on a character in this <code>TextLayout</code>
@return a caret index corresponding to the specified hit.
"
      end

      operation 6483842 "caretToHit"
	private return_type class_ref 886914 // TextHitInfo
	nparams 1
	  param in name "caret" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a caret index, return a hit whose caret is at the index.
The hit is NOT guaranteed to be strong!!!

@param caret a caret index.
@return a hit on this layout whose strong caret is at the requested
index.
"
      end

      operation 6483970 "caretIsValid"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "caret" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6484098 "getNextRightHit"
	public return_type class_ref 886914 // TextHitInfo
	nparams 1
	  param inout name "hit" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hit for the next caret to the right (bottom); if there
is no such hit, returns <code>null</code>.
If the hit character index is out of bounds, an
{@link IllegalArgumentException} is thrown.
@param hit a hit on a character in this layout
@return a hit whose caret appears at the next position to the
right (bottom) of the caret of the provided hit or <code>null</code>.
"
      end

      operation 6484226 "getNextRightHit"
	public return_type class_ref 886914 // TextHitInfo
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "policy" type class_ref 889730 // CaretPolicy
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hit for the next caret to the right (bottom); if no
such hit, returns <code>null</code>.  The hit is to the right of
the strong caret at the specified offset, as determined by the
specified policy.
The returned hit is the stronger of the two possible
hits, as determined by the specified policy.
@param offset an insertion offset in this <code>TextLayout</code>.
Cannot be less than 0 or greater than this <code>TextLayout</code>
object's character count.
@param policy the policy used to select the strong caret
@return a hit whose caret appears at the next position to the
right (bottom) of the caret of the provided hit, or <code>null</code>.
"
      end

      operation 6484354 "getNextRightHit"
	public return_type class_ref 886914 // TextHitInfo
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hit for the next caret to the right (bottom); if no
such hit, returns <code>null</code>.  The hit is to the right of
the strong caret at the specified offset, as determined by the
default policy.
The returned hit is the stronger of the two possible
hits, as determined by the default policy.
@param offset an insertion offset in this <code>TextLayout</code>.
Cannot be less than 0 or greater than the <code>TextLayout</code>
object's character count.
@return a hit whose caret appears at the next position to the
right (bottom) of the caret of the provided hit, or <code>null</code>.
"
      end

      operation 6484482 "getNextLeftHit"
	public return_type class_ref 886914 // TextHitInfo
	nparams 1
	  param inout name "hit" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hit for the next caret to the left (top); if no such
hit, returns <code>null</code>.
If the hit character index is out of bounds, an
<code>IllegalArgumentException</code> is thrown.
@param hit a hit on a character in this <code>TextLayout</code>.
@return a hit whose caret appears at the next position to the
left (top) of the caret of the provided hit, or <code>null</code>.
"
      end

      operation 6484610 "getNextLeftHit"
	public return_type class_ref 886914 // TextHitInfo
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "policy" type class_ref 889730 // CaretPolicy
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hit for the next caret to the left (top); if no
such hit, returns <code>null</code>.  The hit is to the left of
the strong caret at the specified offset, as determined by the
specified policy.
The returned hit is the stronger of the two possible
hits, as determined by the specified policy.
@param offset an insertion offset in this <code>TextLayout</code>.
Cannot be less than 0 or greater than this <code>TextLayout</code>
object's character count.
@param policy the policy used to select the strong caret
@return a hit whose caret appears at the next position to the
left (top) of the caret of the provided hit, or <code>null</code>.
"
      end

      operation 6484738 "getNextLeftHit"
	public return_type class_ref 886914 // TextHitInfo
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hit for the next caret to the left (top); if no
such hit, returns <code>null</code>.  The hit is to the left of
the strong caret at the specified offset, as determined by the
default policy.
The returned hit is the stronger of the two possible
hits, as determined by the default policy.
@param offset an insertion offset in this <code>TextLayout</code>.
Cannot be less than 0 or greater than this <code>TextLayout</code>
object's character count.
@return a hit whose caret appears at the next position to the
left (top) of the caret of the provided hit, or <code>null</code>.
"
      end

      operation 6484866 "getVisualOtherHit"
	public return_type class_ref 886914 // TextHitInfo
	nparams 1
	  param inout name "hit" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hit on the opposite side of the specified hit's caret.
@param hit the specified hit
@return a hit that is on the opposite side of the specified hit's
   caret.
"
      end

      operation 6484994 "getCaretPath"
	private explicit_return_type "double"
	nparams 2
	  param inout name "hit" type class_ref 886914 // TextHitInfo
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6485122 "getCaretPath"
	private explicit_return_type "double"
	nparams 3
	  param in name "caret" explicit_type "int"
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	  param inout name "clipToBounds" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an array of four floats corresponding the endpoints of the caret
x0, y0, x1, y1.

This creates a line along the slope of the caret intersecting the
baseline at the caret
position, and extending from ascent above the baseline to descent below
it.
"
      end

      operation 6485250 "pathToShape"
	class_operation private return_type class_ref 889858 // GeneralPath
	nparams 3
	  param inout name "path" explicit_type "double"
	multiplicity "[]"
	  param inout name "close" explicit_type "boolean"
	  param inout name "lp" explicit_type "LayoutPathImpl"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6485378 "getCaretShape"
	public return_type class_ref 379394 // Shape
	nparams 2
	  param inout name "hit" type class_ref 886914 // TextHitInfo
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Shape} representing the caret at the specified
hit inside the specified bounds.
@param hit the hit at which to generate the caret
@param bounds the bounds of the <code>TextLayout</code> to use
   in generating the caret.  The bounds is in baseline-relative
   coordinates.
@return a <code>Shape</code> representing the caret.  The returned
   shape is in standard coordinates.
"
      end

      operation 6485506 "getCaretShape"
	public return_type class_ref 379394 // Shape
	nparams 1
	  param inout name "hit" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Shape</code> representing the caret at the specified
hit inside the natural bounds of this <code>TextLayout</code>.
@param hit the hit at which to generate the caret
@return a <code>Shape</code> representing the caret.  The returned
    shape is in standard coordinates.
"
      end

      operation 6485634 "getStrongHit"
	private return_type class_ref 886914 // TextHitInfo
	nparams 2
	  param inout name "hit1" type class_ref 886914 // TextHitInfo
	  param inout name "hit2" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the \"stronger\" of the TextHitInfos.  The TextHitInfos
should be logical or visual counterparts.  They are not
checked for validity.
"
      end

      operation 6485762 "getCharacterLevel"
	public explicit_return_type "byte"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the level of the character at <code>index</code>.
Indices -1 and <code>characterCount</code> are assigned the base
level of this <code>TextLayout</code>.
@param index the index of the character from which to get the level
@return the level of the character at the specified index.
"
      end

      operation 6485890 "getCaretShapes"
	public return_type class_ref 379394 // Shape
	nparams 3
	  param in name "offset" explicit_type "int"
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	  param inout name "policy" type class_ref 889730 // CaretPolicy
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns two paths corresponding to the strong and weak caret.
@param offset an offset in this <code>TextLayout</code>
@param bounds the bounds to which to extend the carets.  The
bounds is in baseline-relative coordinates.
@param policy the specified <code>CaretPolicy</code>
@return an array of two paths.  Element zero is the strong
caret.  If there are two carets, element one is the weak caret,
otherwise it is <code>null</code>. The returned shapes
are in standard coordinates.
"
      end

      operation 6486018 "getCaretShapes"
	public return_type class_ref 379394 // Shape
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns two paths corresponding to the strong and weak caret.
This method is a convenience overload of <code>getCaretShapes</code>
that uses the default caret policy.
@param offset an offset in this <code>TextLayout</code>
@param bounds the bounds to which to extend the carets.  This is
    in baseline-relative coordinates.
@return two paths corresponding to the strong and weak caret as
   defined by the <code>DEFAULT_CARET_POLICY</code>.  These are
   in standard coordinates.
"
      end

      operation 6486146 "getCaretShapes"
	public return_type class_ref 379394 // Shape
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns two paths corresponding to the strong and weak caret.
This method is a convenience overload of <code>getCaretShapes</code>
that uses the default caret policy and this <code>TextLayout</code>
object's natural bounds.
@param offset an offset in this <code>TextLayout</code>
@return two paths corresponding to the strong and weak caret as
   defined by the <code>DEFAULT_CARET_POLICY</code>.  These are
   in standard coordinates.
"
      end

      operation 6486274 "boundingShape"
	private return_type class_ref 889858 // GeneralPath
	nparams 2
	  param inout name "path0" explicit_type "double"
	multiplicity "[]"
	  param inout name "path1" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A utility to return a path enclosing the given path
 Path0 must be left or top of path1
 {jbr} no assumptions about size of path0, path1 anymore."
      end

      operation 6486402 "caretBoundingShape"
	private return_type class_ref 889858 // GeneralPath
	nparams 3
	  param in name "caret0" explicit_type "int"
	  param in name "caret1" explicit_type "int"
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A utility to convert a pair of carets into a bounding path
 {jbr} Shape is never outside of bounds."
      end

      operation 6486530 "leftShape"
	private return_type class_ref 889858 // GeneralPath
	nparams 1
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A utility to return the path bounding the area to the left (top) of the
layout.
Shape is never outside of bounds.
"
      end

      operation 6486658 "rightShape"
	private return_type class_ref 889858 // GeneralPath
	nparams 1
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A utility to return the path bounding the area to the right (bottom) of
the layout.
"
      end

      operation 6486786 "getLogicalRangesForVisualSelection"
	public explicit_return_type "int"
	nparams 2
	  param inout name "firstEndpoint" type class_ref 886914 // TextHitInfo
	  param inout name "secondEndpoint" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the logical ranges of text corresponding to a visual selection.
@param firstEndpoint an endpoint of the visual range
@param secondEndpoint the other endpoint of the visual range.
This endpoint can be less than <code>firstEndpoint</code>.
@return an array of integers representing start/limit pairs for the
selected ranges.
@see #getVisualHighlightShape(TextHitInfo, TextHitInfo, Rectangle2D)
"
      end

      operation 6486914 "getVisualHighlightShape"
	public return_type class_ref 379394 // Shape
	nparams 3
	  param inout name "firstEndpoint" type class_ref 886914 // TextHitInfo
	  param inout name "secondEndpoint" type class_ref 886914 // TextHitInfo
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a path enclosing the visual selection in the specified range,
extended to <code>bounds</code>.
<p>
If the selection includes the leftmost (topmost) position, the selection
is extended to the left (top) of <code>bounds</code>.  If the
selection includes the rightmost (bottommost) position, the selection
is extended to the right (bottom) of the bounds.  The height
(width on vertical lines) of the selection is always extended to
<code>bounds</code>.
<p>
Although the selection is always contiguous, the logically selected
text can be discontiguous on lines with mixed-direction text.  The
logical ranges of text selected can be retrieved using
<code>getLogicalRangesForVisualSelection</code>.  For example,
consider the text 'ABCdef' where capital letters indicate
right-to-left text, rendered on a right-to-left line, with a visual
selection from 0L (the leading edge of 'A') to 3T (the trailing edge
of 'd').  The text appears as follows, with bold underlined areas
representing the selection:
<br><pre>
   d<u><b>efCBA  </b></u>
</pre>
The logical selection ranges are 0-3, 4-6 (ABC, ef) because the
visually contiguous text is logically discontiguous.  Also note that
since the rightmost position on the layout (to the right of 'A') is
selected, the selection is extended to the right of the bounds.
@param firstEndpoint one end of the visual selection
@param secondEndpoint the other end of the visual selection
@param bounds the bounding rectangle to which to extend the selection.
    This is in baseline-relative coordinates.
@return a <code>Shape</code> enclosing the selection.  This is in
    standard coordinates.
@see #getLogicalRangesForVisualSelection(TextHitInfo, TextHitInfo)
@see #getLogicalHighlightShape(int, int, Rectangle2D)
"
      end

      operation 6487042 "getVisualHighlightShape"
	public return_type class_ref 379394 // Shape
	nparams 2
	  param inout name "firstEndpoint" type class_ref 886914 // TextHitInfo
	  param inout name "secondEndpoint" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Shape</code> enclosing the visual selection in the
specified range, extended to the bounds.  This method is a
convenience overload of <code>getVisualHighlightShape</code> that
uses the natural bounds of this <code>TextLayout</code>.
@param firstEndpoint one end of the visual selection
@param secondEndpoint the other end of the visual selection
@return a <code>Shape</code> enclosing the selection.  This is
    in standard coordinates.
"
      end

      operation 6487170 "getLogicalHighlightShape"
	public return_type class_ref 379394 // Shape
	nparams 3
	  param in name "firstEndpoint" explicit_type "int"
	  param in name "secondEndpoint" explicit_type "int"
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Shape</code> enclosing the logical selection in the
specified range, extended to the specified <code>bounds</code>.
<p>
If the selection range includes the first logical character, the
selection is extended to the portion of <code>bounds</code> before
the start of this <code>TextLayout</code>.  If the range includes
the last logical character, the selection is extended to the portion
of <code>bounds</code> after the end of this <code>TextLayout</code>.
The height (width on vertical lines) of the selection is always
extended to <code>bounds</code>.
<p>
The selection can be discontiguous on lines with mixed-direction text.
Only those characters in the logical range between start and limit
appear selected.  For example, consider the text 'ABCdef' where capital
letters indicate right-to-left text, rendered on a right-to-left line,
with a logical selection from 0 to 4 ('ABCd').  The text appears as
follows, with bold standing in for the selection, and underlining for
the extension:
<br><pre>
   <u><b>d</b></u>ef<u><b>CBA  </b></u>
</pre>
The selection is discontiguous because the selected characters are
visually discontiguous. Also note that since the range includes the
first logical character (A), the selection is extended to the portion
of the <code>bounds</code> before the start of the layout, which in
this case (a right-to-left line) is the right portion of the
<code>bounds</code>.
@param firstEndpoint an endpoint in the range of characters to select
@param secondEndpoint the other endpoint of the range of characters
to select. Can be less than <code>firstEndpoint</code>.  The range
includes the character at min(firstEndpoint, secondEndpoint), but
excludes max(firstEndpoint, secondEndpoint).
@param bounds the bounding rectangle to which to extend the selection.
    This is in baseline-relative coordinates.
@return an area enclosing the selection.  This is in standard
    coordinates.
@see #getVisualHighlightShape(TextHitInfo, TextHitInfo, Rectangle2D)
"
      end

      operation 6487298 "getLogicalHighlightShape"
	public return_type class_ref 379394 // Shape
	nparams 2
	  param in name "firstEndpoint" explicit_type "int"
	  param in name "secondEndpoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Shape</code> enclosing the logical selection in the
specified range, extended to the natural bounds of this
<code>TextLayout</code>.  This method is a convenience overload of
<code>getLogicalHighlightShape</code> that uses the natural bounds of
this <code>TextLayout</code>.
@param firstEndpoint an endpoint in the range of characters to select
@param secondEndpoint the other endpoint of the range of characters
to select. Can be less than <code>firstEndpoint</code>.  The range
includes the character at min(firstEndpoint, secondEndpoint), but
excludes max(firstEndpoint, secondEndpoint).
@return a <code>Shape</code> enclosing the selection.  This is in
    standard coordinates.
"
      end

      operation 6487426 "getBlackBoxBounds"
	public return_type class_ref 379394 // Shape
	nparams 2
	  param in name "firstEndpoint" explicit_type "int"
	  param in name "secondEndpoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the black box bounds of the characters in the specified range.
The black box bounds is an area consisting of the union of the bounding
boxes of all the glyphs corresponding to the characters between start
and limit.  This area can be disjoint.
@param firstEndpoint one end of the character range
@param secondEndpoint the other end of the character range.  Can be
less than <code>firstEndpoint</code>.
@return a <code>Shape</code> enclosing the black box bounds.  This is
    in standard coordinates.
"
      end

      operation 6487554 "caretToPointDistance"
	private explicit_return_type "float"
	nparams 3
	  param inout name "caretInfo" explicit_type "float"
	multiplicity "[]"
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the distance from the point (x,&nbsp;y) to the caret along
the line direction defined in <code>caretInfo</code>.  Distance is
negative if the point is to the left of the caret on a horizontal
line, or above the caret on a vertical line.
Utility for use by hitTestChar.
"
      end

      operation 6487682 "hitTestChar"
	public return_type class_ref 886914 // TextHitInfo
	nparams 3
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	  param inout name "bounds" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>TextHitInfo</code> corresponding to the
specified point.
Coordinates outside the bounds of the <code>TextLayout</code>
map to hits on the leading edge of the first logical character,
or the trailing edge of the last logical character, as appropriate,
regardless of the position of that character in the line.  Only the
direction along the baseline is used to make this evaluation.
@param x the x offset from the origin of this
    <code>TextLayout</code>.  This is in standard coordinates.
@param y the y offset from the origin of this
    <code>TextLayout</code>.  This is in standard coordinates.
@param bounds the bounds of the <code>TextLayout</code>.  This
    is in baseline-relative coordinates.
@return a hit describing the character and edge (leading or trailing)
    under the specified point.
"
      end

      operation 6487810 "hitTestChar"
	public return_type class_ref 886914 // TextHitInfo
	nparams 2
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>TextHitInfo</code> corresponding to the
specified point.  This method is a convenience overload of
<code>hitTestChar</code> that uses the natural bounds of this
<code>TextLayout</code>.
@param x the x offset from the origin of this
    <code>TextLayout</code>.  This is in standard coordinates.
@param y the y offset from the origin of this
    <code>TextLayout</code>.  This is in standard coordinates.
@return a hit describing the character and edge (leading or trailing)
under the specified point.
"
      end

      operation 6487938 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code of this <code>TextLayout</code>.
@return the hash code of this <code>TextLayout</code>.
"
      end

      operation 6488066 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the specified <code>Object</code> is a
<code>TextLayout</code> object and if the specified <code>Object</code>
equals this <code>TextLayout</code>.
@param obj an <code>Object</code> to test for equality
@return <code>true</code> if the specified <code>Object</code>
     equals this <code>TextLayout</code>; <code>false</code>
     otherwise.
"
      end

      operation 6488194 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "rhs" type class_ref 888322 // TextLayout
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the two layouts are equal.
Two layouts are equal if they contain equal glyphvectors in the same order.
@param rhs the <code>TextLayout</code> to compare to this
      <code>TextLayout</code>
@return <code>true</code> if the specified <code>TextLayout</code>
     equals this <code>TextLayout</code>.

"
      end

      operation 6488322 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns debugging information for this <code>TextLayout</code>.
@return the <code>textLine</code> of this <code>TextLayout</code>
       as a <code>String</code>.
"
      end

      operation 6488450 "draw"
	public explicit_return_type "void"
	nparams 3
	  param inout name "g2" type class_ref 338178 // Graphics2D
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Renders this <code>TextLayout</code> at the specified location in
the specified {@link java.awt.Graphics2D Graphics2D} context.
The origin of the layout is placed at x,&nbsp;y.  Rendering may touch
any point within <code>getBounds()</code> of this position.  This
leaves the <code>g2</code> unchanged.  Text is rendered along the
baseline path.
@param g2 the <code>Graphics2D</code> context into which to render
        the layout
@param x the X coordinate of the origin of this <code>TextLayout</code>
@param y the Y coordinate of the origin of this <code>TextLayout</code>
@see #getBounds()
"
      end

      operation 6488578 "getTextLineForTesting"
	package return_type class_ref 889474 // TextLine
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-only method for testing ONLY.  Please don't abuse.
"
      end

      operation 6488706 "sameBaselineUpTo"
	class_operation private explicit_return_type "int"
	nparams 4
	  param inout name "font" type class_ref 340354 // Font
	  param inout name "text" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Return the index of the first character with a different baseline from the
character at start, or limit if all characters between start and limit have
the same baseline.
"
      end

      operation 6488834 "getBaselineFromGraphic"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param inout name "graphic" type class_ref 887682 // GraphicAttribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6488962 "getOutline"
	public return_type class_ref 379394 // Shape
	nparams 1
	  param inout name "tx" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Shape</code> representing the outline of this
<code>TextLayout</code>.
@param tx an optional {@link AffineTransform} to apply to the
    outline of this <code>TextLayout</code>.
@return a <code>Shape</code> that is the outline of this
    <code>TextLayout</code>.  This is in standard coordinates.
"
      end

      operation 6489090 "getLayoutPath"
	public return_type class_ref 887938 // LayoutPath
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the LayoutPath, or null if the layout path is the
default path (x maps to advance, y maps to offset).
@return the layout path
@since 1.6
"
      end

      operation 6489218 "hitToPoint"
	public explicit_return_type "void"
	nparams 2
	  param inout name "hit" type class_ref 886914 // TextHitInfo
	  param inout name "point" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a hit to a point in standard coordinates.  The point is
on the baseline of the character at the leading or trailing
edge of the character, as appropriate.  If the path is
broken at the side of the character represented by the hit, the
point will be adjacent to the character.
@param hit the hit to check.  This must be a valid hit on
the TextLayout.
@param point the returned point. The point is in standard
    coordinates.
@throws IllegalArgumentException if the hit is not valid for the
TextLayout.
@throws NullPointerException if hit or point is null.
@since 1.6
"
      end
    end

    class 888450 "MultipleMaster"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>MultipleMaster</code> interface represents Type 1
Multiple Master fonts.
A particular {@link Font} object can implement this interface.
"
      operation 6465794 "getNumDesignAxes"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of multiple master design controls.
Design axes include things like width, weight and optical scaling.
@return the number of multiple master design controls
"
      end

      operation 6465922 "getDesignAxisRanges"
	public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of design limits interleaved in the form [from&rarr;to]
for each axis.  For example,
design limits for weight could be from 0.1 to 1.0. The values are
returned in the same order returned by
<code>getDesignAxisNames</code>.
@return an array of design limits for each axis.
"
      end

      operation 6466050 "getDesignAxisDefaults"
	public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of default design values for each axis.  For example,
the default value for weight could be 1.6. The values are returned
in the same order returned by <code>getDesignAxisNames</code>.
@return an array of default design values for each axis.
"
      end

      operation 6466178 "getDesignAxisNames"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name for each design axis. This also determines the order in
which the values for each axis are returned.
@return an array containing the names of each design axis.
"
      end

      operation 6466306 "deriveMMFont"
	public return_type class_ref 340354 // Font
	nparams 1
	  param inout name "axes" explicit_type "float"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of a multiple master font based on the design
axis values contained in the specified array. The size of the array
must correspond to the value returned from
<code>getNumDesignAxes</code> and the values of the array elements
must fall within limits specified by
<code>getDesignAxesLimits</code>. In case of an error,
<code>null</code> is returned.
@param axes an array containing axis values
@return a {@link Font} object that is an instance of
<code>MultipleMaster</code> and is based on the design axis values
provided by <code>axes</code>.
"
      end

      operation 6466434 "deriveMMFont"
	public return_type class_ref 340354 // Font
	nparams 5
	  param inout name "glyphWidths" explicit_type "float"
	multiplicity "[]"
	  param in name "avgStemWidth" explicit_type "float"
	  param in name "typicalCapHeight" explicit_type "float"
	  param in name "typicalXHeight" explicit_type "float"
	  param in name "italicAngle" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of a multiple master font based on detailed metric
information. In case of an error, <code>null</code> is returned.
@param glyphWidths an array of floats representing the desired width
of each glyph in font space
@param avgStemWidth the average stem width for the overall font in
font space
@param typicalCapHeight the height of a typical upper case char
@param typicalXHeight the height of a typical lower case char
@param italicAngle the angle at which the italics lean, in degrees
counterclockwise from vertical
@return a <code>Font</code> object that is an instance of
<code>MultipleMaster</code> and is based on the specified metric
information.
"
      end
    end

    class 888578 "NumericShaper"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>NumericShaper</code> class is used to convert Latin-1 (European)
digits to other Unicode decimal digits.  Users of this class will
primarily be people who wish to present data using
national digit shapes, but find it more convenient to represent the
data internally using Latin-1 (European) digits.  This does not
interpret the deprecated numeric shape selector character (U+206E).
<p>
Instances of <code>NumericShaper</code> are typically applied
as attributes to text with the
{@link TextAttribute#NUMERIC_SHAPING NUMERIC_SHAPING} attribute
of the <code>TextAttribute</code> class.
For example, this code snippet causes a <code>TextLayout</code> to
shape European digits to Arabic in an Arabic context:<br>
<blockquote><pre>
Map map = new HashMap();
map.put(TextAttribute.NUMERIC_SHAPING,
    NumericShaper.getContextualShaper(NumericShaper.ARABIC));
FontRenderContext frc = ...;
TextLayout layout = new TextLayout(text, map, frc);
layout.draw(g2d, x, y);
</pre></blockquote>
<br>
It is also possible to perform numeric shaping explicitly using instances
of <code>NumericShaper</code>, as this code snippet demonstrates:<br>
<blockquote><pre>
char[] text = ...;
// shape all EUROPEAN digits (except zero) to ARABIC digits
NumericShaper shaper = NumericShaper.getShaper(NumericShaper.ARABIC);
shaper.shape(text, start, count);

// shape European digits to ARABIC digits if preceding text is Arabic, or
// shape European digits to TAMIL digits if preceding text is Tamil, or
// leave European digits alone if there is no preceding text, or
// preceding text is neither Arabic nor Tamil
NumericShaper shaper =
    NumericShaper.getContextualShaper(NumericShaper.ARABIC |
                                        NumericShaper.TAMIL,
                                      NumericShaper.EUROPEAN);
shaper.shape(text, start, count);
</pre></blockquote>

<p><b>Bit mask- and enum-based Unicode ranges</b></p>

<p>This class supports two different programming interfaces to
represent Unicode ranges for script-specific digits: bit
mask-based ones, such as {@link #ARABIC NumericShaper.ARABIC}, and
enum-based ones, such as {@link NumericShaper.Range#ARABIC}.
Multiple ranges can be specified by ORing bit mask-based constants,
such as:
<blockquote><pre>
NumericShaper.ARABIC | NumericShaper.TAMIL
</pre></blockquote>
or creating a {@code Set} with the {@link NumericShaper.Range}
constants, such as:
<blockquote><pre>
EnumSet.of(NumericShaper.Scirpt.ARABIC, NumericShaper.Range.TAMIL)
</pre></blockquote>
The enum-based ranges are a super set of the bit mask-based ones.

<p>If the two interfaces are mixed (including serialization),
Unicode range values are mapped to their counterparts where such
mapping is possible, such as {@code NumericShaper.Range.ARABIC}
from/to {@code NumericShaper.ARABIC}.  If any unmappable range
values are specified, such as {@code NumericShaper.Range.BALINESE},
those ranges are ignored.

<p><b>Decimal Digits Precedence</b></p>

<p>A Unicode range may have more than one set of decimal digits. If
multiple decimal digits sets are specified for the same Unicode
range, one of the sets will take precedence as follows.

<table border=1 cellspacing=3 cellpadding=0 summary=\"NumericShaper constants precedence.\">
   <tr>
      <th class=\"TableHeadingColor\">Unicode Range</th>
      <th class=\"TableHeadingColor\"><code>NumericShaper</code> Constants</th>
      <th class=\"TableHeadingColor\">Precedence</th>
   </tr>
   <tr>
      <td rowspan=\"2\">Arabic</td>
      <td>{@link NumericShaper#ARABIC NumericShaper.ARABIC}<br>
          {@link NumericShaper#EASTERN_ARABIC NumericShaper.EASTERN_ARABIC}</td>
      <td>{@link NumericShaper#EASTERN_ARABIC NumericShaper.EASTERN_ARABIC}</td>
   </tr>
   <tr>
      <td>{@link NumericShaper.Range#ARABIC}<br>
          {@link NumericShaper.Range#EASTERN_ARABIC}</td>
      <td>{@link NumericShaper.Range#EASTERN_ARABIC}</td>
   </tr>
   <tr>
      <td>Tai Tham</td>
      <td>{@link NumericShaper.Range#TAI_THAM_HORA}<br>
          {@link NumericShaper.Range#TAI_THAM_THAM}</td>
      <td>{@link NumericShaper.Range#TAI_THAM_THAM}</td>
   </tr>
</table>

@since 1.4
"
      classrelation 3011330 // <realization>
	relation 3011330 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3011330 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      class 888706 "Range"
	visibility public stereotype "enum"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1518210 "EUROPEAN"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}        ('\\u0030', '\\u0000', '\\u0300'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The order of EUROPEAN to MOGOLIAN must be consistent
 with the bitmask-based constants.

The Latin (European) range with the Latin (ASCII) digits.
"
	end

	attribute 1518338 "ARABIC"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}          ('\\u0660', '\\u0600', '\\u0780'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Arabic range with the Arabic-Indic digits.
"
	end

	attribute 1518466 "EASTERN_ARABIC"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}  ('\\u06f0', '\\u0600', '\\u0780'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Arabic range with the Eastern Arabic-Indic digits.
"
	end

	attribute 1518594 "DEVANAGARI"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}      ('\\u0966', '\\u0900', '\\u0980'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Devanagari range with the Devanagari digits.
"
	end

	attribute 1518722 "BENGALI"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}         ('\\u09e6', '\\u0980', '\\u0a00'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Bengali range with the Bengali digits.
"
	end

	attribute 1518850 "GURMUKHI"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}        ('\\u0a66', '\\u0a00', '\\u0a80'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Gurmukhi range with the Gurmukhi digits.
"
	end

	attribute 1518978 "GUJARATI"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}        ('\\u0ae6', '\\u0b00', '\\u0b80'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Gujarati range with the Gujarati digits.
"
	end

	attribute 1519106 "ORIYA"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}           ('\\u0b66', '\\u0b00', '\\u0b80'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Oriya range with the Oriya digits.
"
	end

	attribute 1519234 "TAMIL"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}           ('\\u0be6', '\\u0b80', '\\u0c00'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Tamil range with the Tamil digits.
"
	end

	attribute 1519362 "TELUGU"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}          ('\\u0c66', '\\u0c00', '\\u0c80'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Telugu range with the Telugu digits.
"
	end

	attribute 1519490 "KANNADA"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}         ('\\u0ce6', '\\u0c80', '\\u0d00'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Kannada range with the Kannada digits.
"
	end

	attribute 1519618 "MALAYALAM"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}       ('\\u0d66', '\\u0d00', '\\u0d80'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Malayalam range with the Malayalam digits.
"
	end

	attribute 1519746 "THAI"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}            ('\\u0e50', '\\u0e00', '\\u0e80'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Thai range with the Thai digits.
"
	end

	attribute 1519874 "LAO"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}             ('\\u0ed0', '\\u0e80', '\\u0f00'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Lao range with the Lao digits.
"
	end

	attribute 1520002 "TIBETAN"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}         ('\\u0f20', '\\u0f00', '\\u1000'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Tibetan range with the Tibetan digits.
"
	end

	attribute 1520130 "MYANMAR"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}         ('\\u1040', '\\u1000', '\\u1080'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Myanmar range with the Myanmar digits.
"
	end

	attribute 1520258 "ETHIOPIC"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}        ('\\u1369', '\\u1200', '\\u1380') {
            @Override
            char getNumericBase() { return 1; }
        },${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Ethiopic range with the Ethiopic digits. Ethiopic
does not have a decimal digit 0 so Latin (European) 0 is
used.
"
	end

	attribute 1520386 "KHMER"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}           ('\\u17e0', '\\u1780', '\\u1800'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Khmer range with the Khmer digits.
"
	end

	attribute 1520514 "MONGOLIAN"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}       ('\\u1810', '\\u1800', '\\u1900'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Mongolian range with the Mongolian digits.
"
	end

	attribute 1520642 "NKO"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}             ('\\u07c0', '\\u07c0', '\\u0800'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The order of EUROPEAN to MOGOLIAN must be consistent
 with the bitmask-based constants.

The N'Ko range with the N'Ko digits.
"
	end

	attribute 1520770 "MYANMAR_SHAN"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}    ('\\u1090', '\\u1000', '\\u10a0'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Myanmar range with the Myanmar Shan digits.
"
	end

	attribute 1520898 "LIMBU"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}           ('\\u1946', '\\u1900', '\\u1950'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Limbu range with the Limbu digits.
"
	end

	attribute 1521026 "NEW_TAI_LUE"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}     ('\\u19d0', '\\u1980', '\\u19e0'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The New Tai Lue range with the New Tai Lue digits.
"
	end

	attribute 1521154 "BALINESE"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}        ('\\u1b50', '\\u1b00', '\\u1b80'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Balinese range with the Balinese digits.
"
	end

	attribute 1521282 "SUNDANESE"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}       ('\\u1bb0', '\\u1b80', '\\u1bc0'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Sundanese range with the Sundanese digits.
"
	end

	attribute 1521410 "LEPCHA"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}          ('\\u1c40', '\\u1c00', '\\u1c50'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Lepcha range with the Lepcha digits.
"
	end

	attribute 1521538 "OL_CHIKI"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}        ('\\u1c50', '\\u1c50', '\\u1c80'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Ol Chiki range with the Ol Chiki digits.
"
	end

	attribute 1521666 "VAI"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}             ('\\ua620', '\\ua500', '\\ua640'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Vai range with the Vai digits.
"
	end

	attribute 1521794 "SAURASHTRA"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}      ('\\ua8d0', '\\ua880', '\\ua8e0'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Saurashtra range with the Saurashtra digits.
"
	end

	attribute 1521922 "KAYAH_LI"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}        ('\\ua900', '\\ua900', '\\ua930'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Kayah Li range with the Kayah Li digits.
"
	end

	attribute 1522050 "CHAM"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}            ('\\uaa50', '\\uaa00', '\\uaa60'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Cham range with the Cham digits.
"
	end

	attribute 1522178 "TAI_THAM_HORA"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}   ('\\u1a80', '\\u1a20', '\\u1ab0'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Tai Tham Hora range with the Tai Tham Hora digits.
"
	end

	attribute 1522306 "TAI_THAM_THAM"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}   ('\\u1a90', '\\u1a20', '\\u1ab0'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Tai Tham Tham range with the Tai Tham Tham digits.
"
	end

	attribute 1522434 "JAVANESE"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}        ('\\ua9d0', '\\ua980', '\\ua9e0'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Javanese range with the Javanese digits.
"
	end

	attribute 1522562 "MEETEI_MAYEK"
	  public type class_ref 888706 // Range
	  cpp_decl ""
	  java_decl "  ${@}${name}    ('\\uabf0', '\\uabc0', '\\uac00'),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Meetei Mayek range with the Meetei Mayek digits.
"
	end

	operation 6466562 "toRangeIndex"
	  class_operation private explicit_return_type "int"
	  nparams 1
	    param inout name "script" type class_ref 888706 // Range
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6466690 "indexToRange"
	  class_operation private return_type class_ref 888706 // Range
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6466818 "toRangeMask"
	  class_operation private explicit_return_type "int"
	  nparams 1
	    param inout name "ranges" type class_ref 192258 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Range> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6466946 "maskToRangeSet"
	  class_operation private return_type class_ref 192258 // Set
	  nparams 1
	    param in name "mask" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Range> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1522690 "base"
	  const_attribute private explicit_type "int"
	  stereotype "attribute"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " base character of range digits
"
	end

	attribute 1522818 "start"
	  const_attribute private explicit_type "int"
	  stereotype "attribute"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Unicode range
 inclusive"
	end

	attribute 1522946 "end"
	  const_attribute private explicit_type "int"
	  stereotype "attribute"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Unicode range
 exclusive"
	end

	operation 6467074 "Range"
	  private explicit_return_type ""
	  nparams 3
	    param in name "base" explicit_type "int"
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6467202 "getDigitBase"
	  private explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6467330 "getNumericBase"
	  package explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6467458 "inRange"
	  private explicit_return_type "boolean"
	  nparams 1
	    param in name "c" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 1523074 "key"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " index of context for contextual shaping - values range from 0 to 18 
"
      end

      attribute 1523202 "mask"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " flag indicating whether to shape contextually (high bit) and which
 digit ranges to shape (bits 0-18)

"
      end

      classrelation 3011458 // shapingRange (<unidirectional association>)
	relation 3011458 --->
	  a role_name "shapingRange" private
	    comment "
The context {@code Range} for contextual shaping or the {@code
Range} for non-contextual shaping. {@code null} for the bit
mask-based API.

@since 1.7

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3011458 // shapingRange (<unidirectional association>)
	  b parent class_ref 888706 // Range
      end

      classrelation 3011586 // rangeSet (<unidirectional association>)
	relation 3011586 --->
	  a role_name "rangeSet" private
	    comment "
{@code Set<Range>} indicating which Unicode ranges to
shape. {@code null} for the bit mask-based API.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Range> ${name}${value};
"
	    classrelation_ref 3011586 // rangeSet (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3011714 // rangeArray (<unidirectional association>)
	relation 3011714 --->
	  a role_name "rangeArray" multiplicity "[]" private
	    comment "
rangeSet.toArray() value. Sorted by Range.base when the number
of elements is greater then BSEARCH_THRESHOLD.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3011714 // rangeArray (<unidirectional association>)
	  b parent class_ref 888706 // Range
      end

      attribute 1523330 "BSEARCH_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If more than BSEARCH_THRESHOLD ranges are specified, binary search is used.

"
      end

      attribute 1523458 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8022764705923730308L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1523586 "EUROPEAN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the Latin-1 (European) and extended range, and
 Latin-1 (European) decimal base.

"
      end

      attribute 1523714 "ARABIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the ARABIC range and decimal base. 
"
      end

      attribute 1523842 "EASTERN_ARABIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the ARABIC range and ARABIC_EXTENDED decimal base. 
"
      end

      attribute 1523970 "DEVANAGARI"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the DEVANAGARI range and decimal base. 
"
      end

      attribute 1524098 "BENGALI"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the BENGALI range and decimal base. 
"
      end

      attribute 1524226 "GURMUKHI"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the GURMUKHI range and decimal base. 
"
      end

      attribute 1524354 "GUJARATI"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the GUJARATI range and decimal base. 
"
      end

      attribute 1524482 "ORIYA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the ORIYA range and decimal base. 
"
      end

      attribute 1524610 "TAMIL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the TAMIL range and decimal base. 
 TAMIL DIGIT ZERO was added in Unicode 4.1
"
      end

      attribute 1524738 "TELUGU"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the TELUGU range and decimal base. 
"
      end

      attribute 1524866 "KANNADA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the KANNADA range and decimal base. 
"
      end

      attribute 1524994 "MALAYALAM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the MALAYALAM range and decimal base. 
"
      end

      attribute 1525122 "THAI"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the THAI range and decimal base. 
"
      end

      attribute 1525250 "LAO"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the LAO range and decimal base. 
"
      end

      attribute 1525378 "TIBETAN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the TIBETAN range and decimal base. 
"
      end

      attribute 1525506 "MYANMAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the MYANMAR range and decimal base. 
"
      end

      attribute 1525634 "ETHIOPIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the ETHIOPIC range and decimal base. 
"
      end

      attribute 1525762 "KHMER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the KHMER range and decimal base. 
"
      end

      attribute 1525890 "MONGOLIAN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<18"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies the MONGOLIAN range and decimal base. 
"
      end

      attribute 1526018 "ALL_RANGES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0007ffff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifies all ranges, for full contextual shaping.

<p>This constant specifies all of the bit mask-based
ranges. Use {@code EmunSet.allOf(NumericShaper.Range.class)} to
specify all of the enum-based ranges.

"
      end

      attribute 1526146 "EUROPEAN_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1526274 "ARABIC_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1526402 "EASTERN_ARABIC_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1526530 "DEVANAGARI_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1526658 "BENGALI_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1526786 "GURMUKHI_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1526914 "GUJARATI_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1527042 "ORIYA_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1527170 "TAMIL_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1527298 "TELUGU_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1527426 "KANNADA_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1527554 "MALAYALAM_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1527682 "THAI_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1527810 "LAO_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1527938 "TIBETAN_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1528066 "MYANMAR_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1528194 "ETHIOPIC_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1528322 "KHMER_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1528450 "MONGOLIAN_KEY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 18"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1528578 "NUM_KEYS"
	class_attribute const_attribute private explicit_type "int"
	init_value " MONGOLIAN_KEY + 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " fixed"
      end

      attribute 1528706 "CONTEXTUAL_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1<<31"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1528834 "bases"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " {
        '\\u0030' - '\\u0030', // EUROPEAN
        '\\u0660' - '\\u0030', // ARABIC-INDIC
        '\\u06f0' - '\\u0030', // EXTENDED ARABIC-INDIC (EASTERN_ARABIC)
        '\\u0966' - '\\u0030', // DEVANAGARI
        '\\u09e6' - '\\u0030', // BENGALI
        '\\u0a66' - '\\u0030', // GURMUKHI
        '\\u0ae6' - '\\u0030', // GUJARATI
        '\\u0b66' - '\\u0030', // ORIYA
        '\\u0be6' - '\\u0030', // TAMIL - zero was added in Unicode 4.1
        '\\u0c66' - '\\u0030', // TELUGU
        '\\u0ce6' - '\\u0030', // KANNADA
        '\\u0d66' - '\\u0030', // MALAYALAM
        '\\u0e50' - '\\u0030', // THAI
        '\\u0ed0' - '\\u0030', // LAO
        '\\u0f20' - '\\u0030', // TIBETAN
        '\\u1040' - '\\u0030', // MYANMAR
        '\\u1369' - '\\u0031', // ETHIOPIC - no zero
        '\\u17e0' - '\\u0030', // KHMER
        '\\u1810' - '\\u0030', // MONGOLIAN
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1528962 "contexts"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " {
        '\\u0000', '\\u0300', // 'EUROPEAN' (really latin-1 and extended)
        '\\u0600', '\\u0780', // ARABIC
        '\\u0600', '\\u0780', // EASTERN_ARABIC -- note overlap with arabic
        '\\u0900', '\\u0980', // DEVANAGARI
        '\\u0980', '\\u0a00', // BENGALI
        '\\u0a00', '\\u0a80', // GURMUKHI
        '\\u0a80', '\\u0b00', // GUJARATI
        '\\u0b00', '\\u0b80', // ORIYA
        '\\u0b80', '\\u0c00', // TAMIL
        '\\u0c00', '\\u0c80', // TELUGU
        '\\u0c80', '\\u0d00', // KANNADA
        '\\u0d00', '\\u0d80', // MALAYALAM
        '\\u0e00', '\\u0e80', // THAI
        '\\u0e80', '\\u0f00', // LAO
        '\\u0f00', '\\u1000', // TIBETAN
        '\\u1000', '\\u1080', // MYANMAR
        '\\u1200', '\\u1380', // ETHIOPIC - note missing zero
        '\\u1780', '\\u1800', // KHMER
        '\\u1800', '\\u1900', // MONGOLIAN
        '\\uffff',
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " some ranges adjoin or overlap, rethink if we want to do a binary search on this
"
      end

      attribute 1529090 "ctCache"
	class_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " assume most characters are near each other so probing the cache is infrequent,
 and a linear probe is ok.
"
      end

      attribute 1529218 "ctCacheLimit"
	class_attribute private explicit_type "int"
	init_value " contexts.length - 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6467586 "getContextKey"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " warning, synchronize access to this as it modifies state"
      end

      classrelation 3011842 // currentRange (<unidirectional association>)
	relation 3011842 --->
	  a role_name "currentRange" init_value " Range.EUROPEAN" volatile private
	    comment " cache for the NumericShaper.Range version
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3011842 // currentRange (<unidirectional association>)
	  b parent class_ref 888706 // Range
      end

      operation 6467714 "rangeForCodePoint"
	private return_type class_ref 888706 // Range
	nparams 1
	  param in name "codepoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1529346 "strongTable"
	class_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        0x0000, 0x0041,
        0x005b, 0x0061,
        0x007b, 0x00aa,
        0x00ab, 0x00b5,
        0x00b6, 0x00ba,
        0x00bb, 0x00c0,
        0x00d7, 0x00d8,
        0x00f7, 0x00f8,
        0x02b9, 0x02bb,
        0x02c2, 0x02d0,
        0x02d2, 0x02e0,
        0x02e5, 0x02ee,
        0x02ef, 0x0370,
        0x0374, 0x0376,
        0x037e, 0x0386,
        0x0387, 0x0388,
        0x03f6, 0x03f7,
        0x0483, 0x048a,
        0x058a, 0x05be,
        0x05bf, 0x05c0,
        0x05c1, 0x05c3,
        0x05c4, 0x05c6,
        0x05c7, 0x05d0,
        0x0600, 0x0608,
        0x0609, 0x060b,
        0x060c, 0x060d,
        0x060e, 0x061b,
        0x064b, 0x066d,
        0x0670, 0x0671,
        0x06d6, 0x06e5,
        0x06e7, 0x06ee,
        0x06f0, 0x06fa,
        0x0711, 0x0712,
        0x0730, 0x074d,
        0x07a6, 0x07b1,
        0x07eb, 0x07f4,
        0x07f6, 0x07fa,
        0x0816, 0x081a,
        0x081b, 0x0824,
        0x0825, 0x0828,
        0x0829, 0x0830,
        0x0859, 0x085e,
        0x08e4, 0x0903,
        0x093a, 0x093b,
        0x093c, 0x093d,
        0x0941, 0x0949,
        0x094d, 0x094e,
        0x0951, 0x0958,
        0x0962, 0x0964,
        0x0981, 0x0982,
        0x09bc, 0x09bd,
        0x09c1, 0x09c7,
        0x09cd, 0x09ce,
        0x09e2, 0x09e6,
        0x09f2, 0x09f4,
        0x09fb, 0x0a03,
        0x0a3c, 0x0a3e,
        0x0a41, 0x0a59,
        0x0a70, 0x0a72,
        0x0a75, 0x0a83,
        0x0abc, 0x0abd,
        0x0ac1, 0x0ac9,
        0x0acd, 0x0ad0,
        0x0ae2, 0x0ae6,
        0x0af1, 0x0b02,
        0x0b3c, 0x0b3d,
        0x0b3f, 0x0b40,
        0x0b41, 0x0b47,
        0x0b4d, 0x0b57,
        0x0b62, 0x0b66,
        0x0b82, 0x0b83,
        0x0bc0, 0x0bc1,
        0x0bcd, 0x0bd0,
        0x0bf3, 0x0c01,
        0x0c3e, 0x0c41,
        0x0c46, 0x0c58,
        0x0c62, 0x0c66,
        0x0c78, 0x0c7f,
        0x0cbc, 0x0cbd,
        0x0ccc, 0x0cd5,
        0x0ce2, 0x0ce6,
        0x0d41, 0x0d46,
        0x0d4d, 0x0d4e,
        0x0d62, 0x0d66,
        0x0dca, 0x0dcf,
        0x0dd2, 0x0dd8,
        0x0e31, 0x0e32,
        0x0e34, 0x0e40,
        0x0e47, 0x0e4f,
        0x0eb1, 0x0eb2,
        0x0eb4, 0x0ebd,
        0x0ec8, 0x0ed0,
        0x0f18, 0x0f1a,
        0x0f35, 0x0f36,
        0x0f37, 0x0f38,
        0x0f39, 0x0f3e,
        0x0f71, 0x0f7f,
        0x0f80, 0x0f85,
        0x0f86, 0x0f88,
        0x0f8d, 0x0fbe,
        0x0fc6, 0x0fc7,
        0x102d, 0x1031,
        0x1032, 0x1038,
        0x1039, 0x103b,
        0x103d, 0x103f,
        0x1058, 0x105a,
        0x105e, 0x1061,
        0x1071, 0x1075,
        0x1082, 0x1083,
        0x1085, 0x1087,
        0x108d, 0x108e,
        0x109d, 0x109e,
        0x135d, 0x1360,
        0x1390, 0x13a0,
        0x1400, 0x1401,
        0x1680, 0x1681,
        0x169b, 0x16a0,
        0x1712, 0x1720,
        0x1732, 0x1735,
        0x1752, 0x1760,
        0x1772, 0x1780,
        0x17b4, 0x17b6,
        0x17b7, 0x17be,
        0x17c6, 0x17c7,
        0x17c9, 0x17d4,
        0x17db, 0x17dc,
        0x17dd, 0x17e0,
        0x17f0, 0x1810,
        0x18a9, 0x18aa,
        0x1920, 0x1923,
        0x1927, 0x1929,
        0x1932, 0x1933,
        0x1939, 0x1946,
        0x19de, 0x1a00,
        0x1a17, 0x1a19,
        0x1a56, 0x1a57,
        0x1a58, 0x1a61,
        0x1a62, 0x1a63,
        0x1a65, 0x1a6d,
        0x1a73, 0x1a80,
        0x1b00, 0x1b04,
        0x1b34, 0x1b35,
        0x1b36, 0x1b3b,
        0x1b3c, 0x1b3d,
        0x1b42, 0x1b43,
        0x1b6b, 0x1b74,
        0x1b80, 0x1b82,
        0x1ba2, 0x1ba6,
        0x1ba8, 0x1baa,
        0x1bab, 0x1bac,
        0x1be6, 0x1be7,
        0x1be8, 0x1bea,
        0x1bed, 0x1bee,
        0x1bef, 0x1bf2,
        0x1c2c, 0x1c34,
        0x1c36, 0x1c3b,
        0x1cd0, 0x1cd3,
        0x1cd4, 0x1ce1,
        0x1ce2, 0x1ce9,
        0x1ced, 0x1cee,
        0x1cf4, 0x1cf5,
        0x1dc0, 0x1e00,
        0x1fbd, 0x1fbe,
        0x1fbf, 0x1fc2,
        0x1fcd, 0x1fd0,
        0x1fdd, 0x1fe0,
        0x1fed, 0x1ff2,
        0x1ffd, 0x200e,
        0x2010, 0x2071,
        0x2074, 0x207f,
        0x2080, 0x2090,
        0x20a0, 0x2102,
        0x2103, 0x2107,
        0x2108, 0x210a,
        0x2114, 0x2115,
        0x2116, 0x2119,
        0x211e, 0x2124,
        0x2125, 0x2126,
        0x2127, 0x2128,
        0x2129, 0x212a,
        0x212e, 0x212f,
        0x213a, 0x213c,
        0x2140, 0x2145,
        0x214a, 0x214e,
        0x2150, 0x2160,
        0x2189, 0x2336,
        0x237b, 0x2395,
        0x2396, 0x249c,
        0x24ea, 0x26ac,
        0x26ad, 0x2800,
        0x2900, 0x2c00,
        0x2ce5, 0x2ceb,
        0x2cef, 0x2cf2,
        0x2cf9, 0x2d00,
        0x2d7f, 0x2d80,
        0x2de0, 0x3005,
        0x3008, 0x3021,
        0x302a, 0x3031,
        0x3036, 0x3038,
        0x303d, 0x3041,
        0x3099, 0x309d,
        0x30a0, 0x30a1,
        0x30fb, 0x30fc,
        0x31c0, 0x31f0,
        0x321d, 0x3220,
        0x3250, 0x3260,
        0x327c, 0x327f,
        0x32b1, 0x32c0,
        0x32cc, 0x32d0,
        0x3377, 0x337b,
        0x33de, 0x33e0,
        0x33ff, 0x3400,
        0x4dc0, 0x4e00,
        0xa490, 0xa4d0,
        0xa60d, 0xa610,
        0xa66f, 0xa680,
        0xa69f, 0xa6a0,
        0xa6f0, 0xa6f2,
        0xa700, 0xa722,
        0xa788, 0xa789,
        0xa802, 0xa803,
        0xa806, 0xa807,
        0xa80b, 0xa80c,
        0xa825, 0xa827,
        0xa828, 0xa830,
        0xa838, 0xa840,
        0xa874, 0xa880,
        0xa8c4, 0xa8ce,
        0xa8e0, 0xa8f2,
        0xa926, 0xa92e,
        0xa947, 0xa952,
        0xa980, 0xa983,
        0xa9b3, 0xa9b4,
        0xa9b6, 0xa9ba,
        0xa9bc, 0xa9bd,
        0xaa29, 0xaa2f,
        0xaa31, 0xaa33,
        0xaa35, 0xaa40,
        0xaa43, 0xaa44,
        0xaa4c, 0xaa4d,
        0xaab0, 0xaab1,
        0xaab2, 0xaab5,
        0xaab7, 0xaab9,
        0xaabe, 0xaac0,
        0xaac1, 0xaac2,
        0xaaec, 0xaaee,
        0xaaf6, 0xab01,
        0xabe5, 0xabe6,
        0xabe8, 0xabe9,
        0xabed, 0xabf0,
        0xfb1e, 0xfb1f,
        0xfb29, 0xfb2a,
        0xfd3e, 0xfd50,
        0xfdfd, 0xfe70,
        0xfeff, 0xff21,
        0xff3b, 0xff41,
        0xff5b, 0xff66,
        0xffe0, 0x10000,
        0x10101, 0x10102,
        0x10140, 0x101d0,
        0x101fd, 0x10280,
        0x1091f, 0x10920,
        0x10a01, 0x10a10,
        0x10a38, 0x10a40,
        0x10b39, 0x10b40,
        0x10e60, 0x11000,
        0x11001, 0x11002,
        0x11038, 0x11047,
        0x11052, 0x11066,
        0x11080, 0x11082,
        0x110b3, 0x110b7,
        0x110b9, 0x110bb,
        0x11100, 0x11103,
        0x11127, 0x1112c,
        0x1112d, 0x11136,
        0x11180, 0x11182,
        0x111b6, 0x111bf,
        0x116ab, 0x116ac,
        0x116ad, 0x116ae,
        0x116b0, 0x116b6,
        0x116b7, 0x116c0,
        0x16f8f, 0x16f93,
        0x1d167, 0x1d16a,
        0x1d173, 0x1d183,
        0x1d185, 0x1d18c,
        0x1d1aa, 0x1d1ae,
        0x1d200, 0x1d360,
        0x1d6db, 0x1d6dc,
        0x1d715, 0x1d716,
        0x1d74f, 0x1d750,
        0x1d789, 0x1d78a,
        0x1d7c3, 0x1d7c4,
        0x1d7ce, 0x1ee00,
        0x1eef0, 0x1f110,
        0x1f16a, 0x1f170,
        0x1f300, 0x1f48c,
        0x1f48d, 0x1f524,
        0x1f525, 0x20000,
        0xe0001, 0xf0000,
        0x10fffe, 0x10ffff // sentinel
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A range table of strong directional characters (types L, R, AL).
Even (left) indexes are starts of ranges of non-strong-directional (or undefined)
characters, odd (right) indexes are starts of ranges of strong directional
characters.

"
      end

      attribute 1529474 "stCache"
	volatile private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " use a binary search with a cache
"
      end

      operation 6467842 "isStrongDirectional"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6467970 "getKeyFromMask"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6468098 "getShaper"
	class_operation public return_type class_ref 888578 // NumericShaper
	nparams 1
	  param in name "singleRange" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shaper for the provided unicode range.  All
Latin-1 (EUROPEAN) digits are converted
to the corresponding decimal unicode digits.
@param singleRange the specified Unicode range
@return a non-contextual numeric shaper
@throws IllegalArgumentException if the range is not a single range
"
      end

      operation 6468226 "getShaper"
	class_operation public return_type class_ref 888578 // NumericShaper
	nparams 1
	  param inout name "singleRange" type class_ref 888706 // Range
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shaper for the provided Unicode
range. All Latin-1 (EUROPEAN) digits are converted to the
corresponding decimal digits of the specified Unicode range.

@param singleRange the Unicode range given by a {@link
                   NumericShaper.Range} constant.
@return a non-contextual {@code NumericShaper}.
@throws NullPointerException if {@code singleRange} is {@code null}
@since 1.7
"
      end

      operation 6468354 "getContextualShaper"
	class_operation public return_type class_ref 888578 // NumericShaper
	nparams 1
	  param in name "ranges" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a contextual shaper for the provided unicode range(s).
Latin-1 (EUROPEAN) digits are converted to the decimal digits
corresponding to the range of the preceding text, if the
range is one of the provided ranges.  Multiple ranges are
represented by or-ing the values together, such as,
<code>NumericShaper.ARABIC | NumericShaper.THAI</code>.  The
shaper assumes EUROPEAN as the starting context, that is, if
EUROPEAN digits are encountered before any strong directional
text in the string, the context is presumed to be EUROPEAN, and
so the digits will not shape.
@param ranges the specified Unicode ranges
@return a shaper for the specified ranges
"
      end

      operation 6468482 "getContextualShaper"
	class_operation public return_type class_ref 888578 // NumericShaper
	nparams 1
	  param inout name "ranges" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Range> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a contextual shaper for the provided Unicode
range(s). The Latin-1 (EUROPEAN) digits are converted to the
decimal digits corresponding to the range of the preceding
text, if the range is one of the provided ranges.

<p>The shaper assumes EUROPEAN as the starting context, that
is, if EUROPEAN digits are encountered before any strong
directional text in the string, the context is presumed to be
EUROPEAN, and so the digits will not shape.

@param ranges the specified Unicode ranges
@return a contextual shaper for the specified ranges
@throws NullPointerException if {@code ranges} is {@code null}.
@since 1.7
"
      end

      operation 6468610 "getContextualShaper"
	class_operation public return_type class_ref 888578 // NumericShaper
	nparams 2
	  param in name "ranges" explicit_type "int"
	  param in name "defaultContext" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a contextual shaper for the provided unicode range(s).
Latin-1 (EUROPEAN) digits will be converted to the decimal digits
corresponding to the range of the preceding text, if the
range is one of the provided ranges.  Multiple ranges are
represented by or-ing the values together, for example,
<code>NumericShaper.ARABIC | NumericShaper.THAI</code>.  The
shaper uses defaultContext as the starting context.
@param ranges the specified Unicode ranges
@param defaultContext the starting context, such as
<code>NumericShaper.EUROPEAN</code>
@return a shaper for the specified Unicode ranges.
@throws IllegalArgumentException if the specified
<code>defaultContext</code> is not a single valid range.
"
      end

      operation 6468738 "getContextualShaper"
	class_operation public return_type class_ref 888578 // NumericShaper
	nparams 2
	  param inout name "ranges" type class_ref 192258 // Set
	  param inout name "defaultContext" type class_ref 888706 // Range
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Range> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a contextual shaper for the provided Unicode range(s).
The Latin-1 (EUROPEAN) digits will be converted to the decimal
digits corresponding to the range of the preceding text, if the
range is one of the provided ranges. The shaper uses {@code
defaultContext} as the starting context.

@param ranges the specified Unicode ranges
@param defaultContext the starting context, such as
                      {@code NumericShaper.Range.EUROPEAN}
@return a contextual shaper for the specified Unicode ranges.
@throws NullPointerException
        if {@code ranges} or {@code defaultContext} is {@code null}
@since 1.7
"
      end

      operation 6468866 "NumericShaper"
	private explicit_return_type ""
	nparams 2
	  param in name "key" explicit_type "int"
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private constructor.
"
      end

      operation 6468994 "NumericShaper"
	private explicit_return_type ""
	nparams 2
	  param inout name "defaultContext" type class_ref 888706 // Range
	  param inout name "ranges" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Range> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6469122 "shape"
	public explicit_return_type "void"
	nparams 3
	  param inout name "text" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the digits in the text that occur between start and
start + count.
@param text an array of characters to convert
@param start the index into <code>text</code> to start
       converting
@param count the number of characters in <code>text</code>
       to convert
@throws IndexOutOfBoundsException if start or start + count is
       out of bounds
@throws NullPointerException if text is null
"
      end

      operation 6469250 "shape"
	public explicit_return_type "void"
	nparams 4
	  param inout name "text" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "context" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the digits in the text that occur between start and
start + count, using the provided context.
Context is ignored if the shaper is not a contextual shaper.
@param text an array of characters
@param start the index into <code>text</code> to start
       converting
@param count the number of characters in <code>text</code>
       to convert
@param context the context to which to convert the
       characters, such as <code>NumericShaper.EUROPEAN</code>
@throws IndexOutOfBoundsException if start or start + count is
       out of bounds
@throws NullPointerException if text is null
@throws IllegalArgumentException if this is a contextual shaper
and the specified <code>context</code> is not a single valid
range.
"
      end

      operation 6469378 "shape"
	public explicit_return_type "void"
	nparams 4
	  param inout name "text" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "context" type class_ref 888706 // Range
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the digits in the text that occur between {@code
start} and {@code start + count}, using the provided {@code
context}. {@code Context} is ignored if the shaper is not a
contextual shaper.

@param text  a {@code char} array
@param start the index into {@code text} to start converting
@param count the number of {@code char}s in {@code text}
             to convert
@param context the context to which to convert the characters,
               such as {@code NumericShaper.Range.EUROPEAN}
@throws IndexOutOfBoundsException
        if {@code start} or {@code start + count} is out of bounds
@throws NullPointerException
        if {@code text} or {@code context} is null
@since 1.7
"
      end

      operation 6469506 "checkParams"
	private explicit_return_type "void"
	nparams 3
	  param inout name "text" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6469634 "isContextual"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>boolean</code> indicating whether or not
this shaper shapes contextually.
@return <code>true</code> if this shaper is contextual;
        <code>false</code> otherwise.
"
      end

      operation 6469762 "getRanges"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>int</code> that ORs together the values for
all the ranges that will be shaped.
<p>
For example, to check if a shaper shapes to Arabic, you would use the
following:
<blockquote>
  {@code if ((shaper.getRanges() & shaper.ARABIC) != 0) &#123; ... }
</blockquote>

<p>Note that this method supports only the bit mask-based
ranges. Call {@link #getRangeSet()} for the enum-based ranges.

@return the values for all the ranges to be shaped.
"
      end

      operation 6469890 "getRangeSet"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Range> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Set} representing all the Unicode ranges in
this {@code NumericShaper} that will be shaped.

@return all the Unicode ranges to be shaped.
@since 1.7
"
      end

      operation 6470018 "shapeNonContextually"
	private explicit_return_type "void"
	nparams 3
	  param inout name "text" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform non-contextual shaping.
"
      end

      operation 6470146 "shapeContextually"
	private explicit_return_type "void"
	nparams 4
	  param inout name "text" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "ctxKey" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform contextual shaping.
Synchronized to protect caches used in getContextKey.
"
      end

      operation 6470274 "shapeContextually"
	private explicit_return_type "void"
	nparams 4
	  param inout name "text" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "ctxKey" type class_ref 888706 // Range
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6470402 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this shaper.
@return this shaper's hash code.
@see java.lang.Object#hashCode
"
      end

      operation 6470530 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if the specified object is an instance of
<code>NumericShaper</code> and shapes identically to this one,
regardless of the range representations, the bit mask or the
enum. For example, the following code produces {@code \"true\"}.
<blockquote><pre>
NumericShaper ns1 = NumericShaper.getShaper(NumericShaper.ARABIC);
NumericShaper ns2 = NumericShaper.getShaper(NumericShaper.Range.ARABIC);
System.out.println(ns1.equals(ns2));
</pre></blockquote>

@param o the specified object to compare to this
         <code>NumericShaper</code>
@return <code>true</code> if <code>o</code> is an instance
        of <code>NumericShaper</code> and shapes in the same way;
        <code>false</code> otherwise.
@see java.lang.Object#equals(java.lang.Object)
"
      end

      operation 6470658 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> that describes this shaper. This method
is used for debugging purposes only.
@return a <code>String</code> describing this shaper.
"
      end

      operation 6470786 "getHighBit"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the high bit in value (assuming le, actually
power of 2 >= value). value must be positive.
"
      end

      operation 6470914 "search"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "value" explicit_type "int"
	  param inout name "array" explicit_type "int"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "fast binary search over subrange of array.
"
      end

      operation 6471042 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the {@code NumericShaper.Range} enum-based parameters,
if any, to the bit mask-based counterparts and writes this
object to the {@code stream}. Any enum constants that have no
bit mask-based counterparts are ignored in the conversion.

@param stream the output stream to write to
@throws IOException if an I/O error occurs while writing to {@code stream}
@since 1.7
"
      end
    end

    class 888834 "OpenType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>OpenType</code> interface represents OpenType and
TrueType fonts.  This interface makes it possible to obtain
<i>sfnt</i> tables from the font.  A particular
<code>Font</code> object can implement this interface.
<p>
For more information on TrueType and OpenType fonts, see the
OpenType specification.
( <a href=\"http://www.microsoft.com/typography/otspec/\">http://www.microsoft.com/typography/otspec/</a> ).
"
      attribute 1529602 "TAG_CMAP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x636d6170"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " 51 tag types so far 

Character to glyph mapping.  Table tag \"cmap\" in the Open
Type Specification.

"
      end

      attribute 1529730 "TAG_HEAD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x68656164"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Font header.  Table tag \"head\" in the Open
Type Specification.

"
      end

      attribute 1529858 "TAG_NAME"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6e616d65"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Naming table.  Table tag \"name\" in the Open
Type Specification.

"
      end

      attribute 1529986 "TAG_GLYF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x676c7966"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Glyph data.  Table tag \"glyf\" in the Open
Type Specification.

"
      end

      attribute 1530114 "TAG_MAXP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6d617870"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Maximum profile.  Table tag \"maxp\" in the Open
Type Specification.

"
      end

      attribute 1530242 "TAG_PREP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x70726570"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "CVT preprogram.  Table tag \"prep\" in the Open
Type Specification.

"
      end

      attribute 1530370 "TAG_HMTX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x686d7478"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Horizontal metrics.  Table tag \"hmtx\" in the Open
Type Specification.

"
      end

      attribute 1530498 "TAG_KERN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6b65726e"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Kerning.  Table tag \"kern\" in the Open
Type Specification.

"
      end

      attribute 1530626 "TAG_HDMX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x68646d78"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Horizontal device metrics.  Table tag \"hdmx\" in the Open
Type Specification.

"
      end

      attribute 1530754 "TAG_LOCA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6c6f6361"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Index to location.  Table tag \"loca\" in the Open
Type Specification.

"
      end

      attribute 1530882 "TAG_POST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x706f7374"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "PostScript Information.  Table tag \"post\" in the Open
Type Specification.

"
      end

      attribute 1531010 "TAG_OS2"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4f532f32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "OS/2 and Windows specific metrics.  Table tag \"OS/2\"
in the Open Type Specification.

"
      end

      attribute 1531138 "TAG_CVT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x63767420"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Control value table.  Table tag \"cvt \"
in the Open Type Specification.

"
      end

      attribute 1531266 "TAG_GASP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x67617370"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Grid-fitting and scan conversion procedure.  Table tag
\"gasp\" in the Open Type Specification.

"
      end

      attribute 1531394 "TAG_VDMX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x56444d58"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Vertical device metrics.  Table tag \"VDMX\" in the Open
Type Specification.

"
      end

      attribute 1531522 "TAG_VMTX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x766d7478"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Vertical metrics.  Table tag \"vmtx\" in the Open
Type Specification.

"
      end

      attribute 1531650 "TAG_VHEA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x76686561"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Vertical metrics header.  Table tag \"vhea\" in the Open
Type Specification.

"
      end

      attribute 1531778 "TAG_HHEA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x68686561"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Horizontal metrics header.  Table tag \"hhea\" in the Open
Type Specification.

"
      end

      attribute 1531906 "TAG_TYP1"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x74797031"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Adobe Type 1 font data.  Table tag \"typ1\" in the Open
Type Specification.

"
      end

      attribute 1532034 "TAG_BSLN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x62736c6e"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Baseline table.  Table tag \"bsln\" in the Open
Type Specification.

"
      end

      attribute 1532162 "TAG_GSUB"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x47535542"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Glyph substitution.  Table tag \"GSUB\" in the Open
Type Specification.

"
      end

      attribute 1532290 "TAG_DSIG"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x44534947"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Digital signature.  Table tag \"DSIG\" in the Open
Type Specification.

"
      end

      attribute 1532418 "TAG_FPGM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6670676d"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Font program.   Table tag \"fpgm\" in the Open
Type Specification.

"
      end

      attribute 1532546 "TAG_FVAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x66766172"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Font variation.   Table tag \"fvar\" in the Open
Type Specification.

"
      end

      attribute 1532674 "TAG_GVAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x67766172"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Glyph variation.  Table tag \"gvar\" in the Open
Type Specification.

"
      end

      attribute 1532802 "TAG_CFF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x43464620"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Compact font format (Type1 font).  Table tag
\"CFF \" in the Open Type Specification.

"
      end

      attribute 1532930 "TAG_MMSD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4d4d5344"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Multiple master supplementary data.  Table tag
\"MMSD\" in the Open Type Specification.

"
      end

      attribute 1533058 "TAG_MMFX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4d4d4658"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Multiple master font metrics.  Table tag
\"MMFX\" in the Open Type Specification.

"
      end

      attribute 1533186 "TAG_BASE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x42415345"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Baseline data.  Table tag \"BASE\" in the Open
Type Specification.

"
      end

      attribute 1533314 "TAG_GDEF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x47444546"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Glyph definition.  Table tag \"GDEF\" in the Open
Type Specification.

"
      end

      attribute 1533442 "TAG_GPOS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x47504f53"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Glyph positioning.  Table tag \"GPOS\" in the Open
Type Specification.

"
      end

      attribute 1533570 "TAG_JSTF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4a535446"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Justification.  Table tag \"JSTF\" in the Open
Type Specification.

"
      end

      attribute 1533698 "TAG_EBDT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x45424454"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Embedded bitmap data.  Table tag \"EBDT\" in the Open
Type Specification.

"
      end

      attribute 1533826 "TAG_EBLC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x45424c43"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Embedded bitmap location.  Table tag \"EBLC\" in the Open
Type Specification.

"
      end

      attribute 1533954 "TAG_EBSC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x45425343"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Embedded bitmap scaling.  Table tag \"EBSC\" in the Open
Type Specification.

"
      end

      attribute 1534082 "TAG_LTSH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4c545348"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Linear threshold.  Table tag \"LTSH\" in the Open
Type Specification.

"
      end

      attribute 1534210 "TAG_PCLT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x50434c54"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "PCL 5 data.  Table tag \"PCLT\" in the Open
Type Specification.

"
      end

      attribute 1534338 "TAG_ACNT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x61636e74"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Accent attachment.  Table tag \"acnt\" in the Open
Type Specification.

"
      end

      attribute 1534466 "TAG_AVAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x61766172"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Axis variation.  Table tag \"avar\" in the Open
Type Specification.

"
      end

      attribute 1534594 "TAG_BDAT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x62646174"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Bitmap data.  Table tag \"bdat\" in the Open
Type Specification.

"
      end

      attribute 1534722 "TAG_BLOC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x626c6f63"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Bitmap location.  Table tag \"bloc\" in the Open
Type Specification.

"
      end

      attribute 1534850 "TAG_CVAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x63766172"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "CVT variation.  Table tag \"cvar\" in the Open
Type Specification.

"
      end

      attribute 1534978 "TAG_FEAT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x66656174"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Feature name.  Table tag \"feat\" in the Open
Type Specification.

"
      end

      attribute 1535106 "TAG_FDSC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x66647363"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Font descriptors.  Table tag \"fdsc\" in the Open
Type Specification.

"
      end

      attribute 1535234 "TAG_FMTX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x666d7478"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Font metrics.  Table tag \"fmtx\" in the Open
Type Specification.

"
      end

      attribute 1535362 "TAG_JUST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6a757374"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Justification.  Table tag \"just\" in the Open
Type Specification.

"
      end

      attribute 1535490 "TAG_LCAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6c636172"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Ligature caret.   Table tag \"lcar\" in the Open
Type Specification.

"
      end

      attribute 1535618 "TAG_MORT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6d6f7274"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Glyph metamorphosis.  Table tag \"mort\" in the Open
Type Specification.

"
      end

      attribute 1535746 "TAG_OPBD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6d6f7274"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Optical bounds.  Table tag \"opbd\" in the Open
Type Specification.

"
      end

      attribute 1535874 "TAG_PROP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x70726f70"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Glyph properties.  Table tag \"prop\" in the Open
Type Specification.

"
      end

      attribute 1536002 "TAG_TRAK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x7472616b"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tracking.  Table tag \"trak\" in the Open
Type Specification.

"
      end

      operation 6471170 "getVersion"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the version of the <code>OpenType</code> font.
1.0 is represented as 0x00010000.
@return the version of the <code>OpenType</code> font.
"
      end

      operation 6471298 "getFontTable"
	public explicit_return_type "byte"
	nparams 1
	  param in name "sfntTag" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the table as an array of bytes for a specified tag.
Tags for sfnt tables include items like <i>cmap</i>,
<i>name</i> and <i>head</i>.  The <code>byte</code> array
returned is a copy of the font data in memory.
@param     sfntTag a four-character code as a 32-bit integer
@return a <code>byte</code> array that is the table that
contains the font data corresponding to the specified
tag.
"
      end

      operation 6471426 "getFontTable"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "strSfntTag" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the table as an array of bytes for a specified tag.
Tags for sfnt tables include items like <i>cmap</i>,
<i>name</i> and <i>head</i>.  The byte array returned is a
copy of the font data in memory.
@param     strSfntTag a four-character code as a
           <code>String</code>
@return a <code>byte</code> array that is the table that
contains the font data corresponding to the specified
tag.
"
      end

      operation 6471554 "getFontTable"
	public explicit_return_type "byte"
	nparams 3
	  param in name "sfntTag" explicit_type "int"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a subset of the table as an array of bytes
for a specified tag.  Tags for sfnt tables include
items like <i>cmap</i>, <i>name</i> and <i>head</i>.
The byte array returned is a copy of the font data in
memory.
@param     sfntTag a four-character code as a 32-bit integer
@param     offset index of first byte to return from table
@param     count number of bytes to return from table
@return a subset of the table corresponding to
           <code>sfntTag</code> and containing the bytes
           starting at <code>offset</code> byte and including
           <code>count</code> bytes.
"
      end

      operation 6471682 "getFontTable"
	public explicit_return_type "byte"
	nparams 3
	  param inout name "strSfntTag" type class_ref 128130 // String
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a subset of the table as an array of bytes
for a specified tag.  Tags for sfnt tables include items
like <i>cmap</i>, <i>name</i> and <i>head</i>. The
<code>byte</code> array returned is a copy of the font
data in memory.
@param     strSfntTag a four-character code as a
<code>String</code>
@param     offset index of first byte to return from table
@param     count  number of bytes to return from table
@return a subset of the table corresponding to
           <code>strSfntTag</code> and containing the bytes
           starting at <code>offset</code> byte and including
           <code>count</code> bytes.
"
      end

      operation 6471810 "getFontTableSize"
	public explicit_return_type "int"
	nparams 1
	  param in name "sfntTag" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of the table for a specified tag. Tags for sfnt
tables include items like <i>cmap</i>, <i>name</i> and <i>head</i>.
@param     sfntTag a four-character code as a 32-bit integer
@return the size of the table corresponding to the specified
tag.
"
      end

      operation 6471938 "getFontTableSize"
	public explicit_return_type "int"
	nparams 1
	  param inout name "strSfntTag" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of the table for a specified tag. Tags for sfnt
tables include items like <i>cmap</i>, <i>name</i> and <i>head</i>.
@param     strSfntTag a four-character code as a
<code>String</code>
@return the size of the table corresponding to the specified tag.
"
      end
    end

    class 888962 "ShapeGraphicAttribute"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>ShapeGraphicAttribute</code> class is an implementation of
{@link GraphicAttribute} that draws shapes in a {@link TextLayout}.
@see GraphicAttribute
"
      classrelation 3011970 // <generalisation>
	relation 3011970 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3011970 // <generalisation>
	  b parent class_ref 887682 // GraphicAttribute
      end

      classrelation 3012098 // fShape (<unidirectional association>)
	relation 3012098 --->
	  a role_name "fShape" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3012098 // fShape (<unidirectional association>)
	  b parent class_ref 379394 // Shape
      end

      attribute 1536130 "fStroke"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1536258 "STROKE"
	class_attribute const_attribute public explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A key indicating the shape should be stroked with a 1-pixel wide stroke.

"
      end

      attribute 1536386 "FILL"
	class_attribute const_attribute public explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A key indicating the shape should be filled.

"
      end

      classrelation 3012226 // fShapeBounds (<unidirectional association>)
	relation 3012226 --->
	  a role_name "fShapeBounds" private
	    comment " cache shape bounds, since GeneralPath doesn't
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3012226 // fShapeBounds (<unidirectional association>)
	  b parent class_ref 380674 // Rectangle2D
      end

      operation 6472066 "ShapeGraphicAttribute"
	public explicit_return_type ""
	nparams 3
	  param inout name "shape" type class_ref 379394 // Shape
	  param in name "alignment" explicit_type "int"
	  param inout name "stroke" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ShapeGraphicAttribute</code> for the specified
{@link Shape}.
@param shape the <code>Shape</code> to render.  The
<code>Shape</code> is rendered with its origin at the origin of
this <code>ShapeGraphicAttribute</code> in the
host <code>TextLayout</code>.  This object maintains a reference to
<code>shape</code>.
@param alignment one of the alignments from this
<code>ShapeGraphicAttribute</code>.
@param stroke <code>true</code> if the <code>Shape</code> should be
stroked; <code>false</code> if the <code>Shape</code> should be
filled.
"
      end

      operation 6472194 "getAscent"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ascent of this <code>ShapeGraphicAttribute</code>.  The
ascent of a <code>ShapeGraphicAttribute</code> is the positive
distance from the origin of its <code>Shape</code> to the top of
bounds of its <code>Shape</code>.
@return the ascent of this <code>ShapeGraphicAttribute</code>.
"
      end

      operation 6472322 "getDescent"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the descent of this <code>ShapeGraphicAttribute</code>.
The descent of a <code>ShapeGraphicAttribute</code> is the distance
from the origin of its <code>Shape</code> to the bottom of the
bounds of its <code>Shape</code>.
@return the descent of this <code>ShapeGraphicAttribute</code>.
"
      end

      operation 6472450 "getAdvance"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the advance of this <code>ShapeGraphicAttribute</code>.
The advance of a <code>ShapeGraphicAttribute</code> is the distance
from the origin of its <code>Shape</code> to the right side of the
bounds of its <code>Shape</code>.
@return the advance of this <code>ShapeGraphicAttribute</code>.
"
      end

      operation 6472578 "draw"
	public explicit_return_type "void"
	nparams 3
	  param inout name "graphics" type class_ref 338178 // Graphics2D
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 6472706 "getBounds"
	public return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Rectangle2D} that encloses all of the
bits drawn by this <code>ShapeGraphicAttribute</code> relative to
the rendering position.  A graphic can be rendered beyond its
origin, ascent, descent, or advance;  but if it does, this method's
implementation should indicate where the graphic is rendered.
@return a <code>Rectangle2D</code> that encloses all of the bits
rendered by this <code>ShapeGraphicAttribute</code>.
"
      end

      operation 6472834 "getOutline"
	public return_type class_ref 379394 // Shape
	nparams 1
	  param inout name "tx" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a {@link java.awt.Shape} that represents the region that
this <code>ShapeGraphicAttribute</code> renders.  This is used when a
{@link TextLayout} is requested to return the outline of the text.
The (untransformed) shape must not extend outside the rectangular
bounds returned by <code>getBounds</code>.
@param tx an optional {@link AffineTransform} to apply to the
  this <code>ShapeGraphicAttribute</code>. This can be null.
@return the <code>Shape</code> representing this graphic attribute,
  suitable for stroking or filling.
@since 1.6
"
      end

      operation 6472962 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this <code>ShapeGraphicAttribute</code>.
@return  a hash code value for this
<code>ShapeGraphicAttribute</code>.
"
      end

      operation 6473090 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "rhs" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>ShapeGraphicAttribute</code> to the specified
<code>Object</code>.
@param rhs the <code>Object</code> to compare for equality
@return <code>true</code> if this
<code>ShapeGraphicAttribute</code> equals <code>rhs</code>;
<code>false</code> otherwise.
"
      end

      operation 6473218 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "rhs" type class_ref 888962 // ShapeGraphicAttribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>ShapeGraphicAttribute</code> to the specified
<code>ShapeGraphicAttribute</code>.
@param rhs the <code>ShapeGraphicAttribute</code> to compare for
equality
@return <code>true</code> if this
<code>ShapeGraphicAttribute</code> equals <code>rhs</code>;
<code>false</code> otherwise.
"
      end
    end

    class 889090 "StyledParagraph"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class stores Font, GraphicAttribute, and Decoration intervals
on a paragraph of styled text.
<p>
Currently, this class is optimized for a small number of intervals
(preferrably 1).
"
      attribute 1536514 "length"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " the length of the paragraph
"
      end

      attribute 1536642 "decoration"
	private explicit_type "Decoration"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " If there is a single Decoration for the whole paragraph, it
 is stored here.  Otherwise this field is ignored.
"
      end

      classrelation 3012354 // font (<unidirectional association>)
	relation 3012354 --->
	  a role_name "font" private
	    comment " If there is a single Font or GraphicAttribute for the whole
 paragraph, it is stored here.  Otherwise this field is ignored.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3012354 // font (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3012482 // decorations (<unidirectional association>)
	relation 3012482 --->
	  a role_name "decorations" private
	    comment " If there are multiple Decorations in the paragraph, they are
 stored in this Vector, in order.  Otherwise this vector and
 the decorationStarts array are null.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Decoration> ${name}${value};
"
	    classrelation_ref 3012482 // decorations (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      attribute 1536770 "decorationStarts"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " If there are multiple Decorations in the paragraph,
 decorationStarts[i] contains the index where decoration i
 starts.  For convenience, there is an extra entry at the
 end of this array with the length of the paragraph.
"
      end

      classrelation 3012610 // fonts (<unidirectional association>)
	relation 3012610 --->
	  a role_name "fonts" private
	    comment " If there are multiple Fonts/GraphicAttributes in the paragraph,
 they are
 stored in this Vector, in order.  Otherwise this vector and
 the fontStarts array are null.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 3012610 // fonts (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      attribute 1536898 "fontStarts"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " If there are multiple Fonts/GraphicAttributes in the paragraph,
 fontStarts[i] contains the index where decoration i
 starts.  For convenience, there is an extra entry at the
 end of this array with the length of the paragraph.
"
      end

      attribute 1537026 "INITIAL_SIZE"
	class_attribute private explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6473346 "StyledParagraph"
	public explicit_return_type ""
	nparams 2
	  param inout name "aci" type class_ref 472962 // AttributedCharacterIterator
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new StyledParagraph over the given styled text.
@param aci an iterator over the text
@param chars the characters extracted from aci
"
      end

      operation 6473474 "insertInto"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "pos" explicit_type "int"
	  param inout name "starts" explicit_type "int"
	multiplicity "[]"
	  param in name "numStarts" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adjust indices in starts to reflect an insertion after pos.
Any index in starts greater than pos will be increased by 1.
"
      end

      operation 6473602 "insertChar"
	class_operation public return_type class_ref 889090 // StyledParagraph
	nparams 4
	  param inout name "aci" type class_ref 472962 // AttributedCharacterIterator
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	  param in name "insertPos" explicit_type "int"
	  param inout name "oldParagraph" type class_ref 889090 // StyledParagraph
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a StyledParagraph reflecting the insertion of a single character
into the text.  This method will attempt to reuse the given paragraph,
but may create a new paragraph.
@param aci an iterator over the text.  The text should be the same as the
    text used to create (or most recently update) oldParagraph, with
    the exception of inserting a single character at insertPos.
@param chars the characters in aci
@param insertPos the index of the new character in aci
@param oldParagraph a StyledParagraph for the text in aci before the
    insertion
"
      end

      operation 6473730 "deleteFrom"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "deleteAt" explicit_type "int"
	  param inout name "starts" explicit_type "int"
	multiplicity "[]"
	  param in name "numStarts" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adjust indices in starts to reflect a deletion after deleteAt.
Any index in starts greater than deleteAt will be increased by 1.
It is the caller's responsibility to make sure that no 0-length
runs result.
"
      end

      operation 6473858 "deleteChar"
	class_operation public return_type class_ref 889090 // StyledParagraph
	nparams 4
	  param inout name "aci" type class_ref 472962 // AttributedCharacterIterator
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	  param in name "deletePos" explicit_type "int"
	  param inout name "oldParagraph" type class_ref 889090 // StyledParagraph
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a StyledParagraph reflecting the insertion of a single character
into the text.  This method will attempt to reuse the given paragraph,
but may create a new paragraph.
@param aci an iterator over the text.  The text should be the same as the
    text used to create (or most recently update) oldParagraph, with
    the exception of deleting a single character at deletePos.
@param chars the characters in aci
@param deletePos the index where a character was removed
@param oldParagraph a StyledParagraph for the text in aci before the
    insertion
"
      end

      operation 6473986 "getRunLimit"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the index at which there is a different Font, GraphicAttribute, or
Dcoration than at the given index.
@param index a valid index in the paragraph
@return the first index where there is a change in attributes from
     those at index
"
      end

      operation 6474114 "getDecorationAt"
	public explicit_return_type "Decoration"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Decoration in effect at the given index.
@param index a valid index in the paragraph
@return the Decoration at index.
"
      end

      operation 6474242 "getFontOrGraphicAt"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Font or GraphicAttribute in effect at the given index.
The client must test the type of the return value to determine what
it is.
@param index a valid index in the paragraph
@return the Font or GraphicAttribute at index.
"
      end

      operation 6474370 "findRunContaining"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "starts" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return i such that starts[i] &lt;= index &lt; starts[i+1].  starts
must be in increasing order, with at least one element greater
than index.
"
      end

      operation 6474498 "addToVector"
	class_operation private explicit_return_type "int"
	nparams 4
	  param inout name "obj" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	  param inout name "v" type class_ref 141442 // Vector
	  param inout name "starts" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings({\"rawtypes\", \"unchecked\"})
"
	
	
	
	comment "Append the given Object to the given Vector.  Add
the given index to the given starts array.  If the
starts array does not have room for the index, a
new array is created and returned.
"
      end

      operation 6474626 "addDecoration"
	private explicit_return_type "void"
	nparams 2
	  param inout name "d" explicit_type "Decoration"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new Decoration run with the given Decoration at the
given index.
"
      end

      operation 6474754 "addFont"
	private explicit_return_type "void"
	nparams 2
	  param inout name "f" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new Font/GraphicAttribute run with the given object at the
given index.
"
      end

      operation 6474882 "addFonts"
	private explicit_return_type "void"
	nparams 4
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	  param inout name "attributes" type class_ref 130178 // Map
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}<? extends Attribute, ?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolve the given chars into Fonts using FontResolver, then add
font runs for each.
"
      end

      operation 6475010 "addInputMethodAttrs"
	class_operation package return_type class_ref 130178 // Map
	nparams 1
	  param inout name "oldStyles" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Attribute, ?> ${name}${(}${t0}<? extends Attribute, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a Map with entries from oldStyles, as well as input
method entries, if any.
"
      end

      operation 6475138 "getGraphicOrFont"
	class_operation private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "attributes" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Extract a GraphicAttribute or Font from the given attributes.
If attributes does not contain a GraphicAttribute, Font, or
Font family entry this method returns null.
"
      end
    end

    class 889346 "TextJustifier"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "one info for each side of each glyph
separate infos for grow and shrink case
!!! this doesn't really need to be a separate class.  If we keep it
separate, probably the newJustify code from TextLayout belongs here as well.
"
      classrelation 3021442 // info (<unidirectional association>)
	relation 3021442 --->
	  a role_name "info" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3021442 // info (<unidirectional association>)
	  b parent class_ref 887426 // GlyphJustificationInfo
      end

      attribute 1537666 "start"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1537794 "limit"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1537922 "DEBUG"
	class_attribute package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6479234 "TextJustifier"
	package explicit_return_type ""
	nparams 3
	  param inout name "info" type class_ref 887426 // GlyphJustificationInfo
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize the justifier with an array of infos corresponding to each
glyph. Start and limit indicate the range of the array to examine.
"
      end

      attribute 1538050 "MAX_PRIORITY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6479362 "justify"
	public explicit_return_type "float"
	nparams 1
	  param in name "delta" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an array of deltas twice as long as the original info array,
indicating the amount by which each side of each glyph should grow
or shrink.

Delta should be positive to expand the line, and negative to compress it.
"
      end
    end

    class 889474 "TextLine"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 889602 "TextLineMetrics"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1539714 "ascent"
	  const_attribute public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1539842 "descent"
	  const_attribute public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1539970 "leading"
	  const_attribute public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1540098 "advance"
	  const_attribute public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 6489346 "TextLineMetrics"
	  public explicit_return_type ""
	  nparams 4
	    param in name "ascent" explicit_type "float"
	    param in name "descent" explicit_type "float"
	    param in name "leading" explicit_type "float"
	    param in name "advance" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 1540226 "fComponents"
	private explicit_type "TextLineComponent"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1540354 "fBaselineOffsets"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1540482 "fComponentVisualOrder"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " if null, ltr"
      end

      attribute 1540610 "locs"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " x,y pairs for components in visual order"
      end

      attribute 1540738 "fChars"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1540866 "fCharsStart"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1540994 "fCharsLimit"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1541122 "fCharVisualOrder"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " if null, ltr"
      end

      attribute 1541250 "fCharLogicalOrder"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " if null, ltr"
      end

      attribute 1541378 "fCharLevels"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " if null, 0"
      end

      attribute 1541506 "fIsDirectionLTR"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1541634 "lp"
	private explicit_type "LayoutPathImpl"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1541762 "isSimple"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3022338 // pixelBounds (<unidirectional association>)
	relation 3022338 --->
	  a role_name "pixelBounds" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3022338 // pixelBounds (<unidirectional association>)
	  b parent class_ref 314114 // Rectangle
      end

      classrelation 3022466 // frc (<unidirectional association>)
	relation 3022466 --->
	  a role_name "frc" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3022466 // frc (<unidirectional association>)
	  b parent class_ref 866178 // FontRenderContext
      end

      classrelation 3022594 // fMetrics (<unidirectional association>)
	relation 3022594 --->
	  a role_name "fMetrics" init_value " null" private
	    comment " built on demand in getMetrics"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3022594 // fMetrics (<unidirectional association>)
	  b parent class_ref 889602 // TextLineMetrics
      end

      operation 6489474 "TextLine"
	public explicit_return_type ""
	nparams 9
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	  param inout name "components" explicit_type "TextLineComponent"
	multiplicity "[]"
	  param inout name "baselineOffsets" explicit_type "float"
	multiplicity "[]"
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	  param in name "charsStart" explicit_type "int"
	  param in name "charsLimit" explicit_type "int"
	  param inout name "charLogicalOrder" explicit_type "int"
	multiplicity "[]"
	  param inout name "charLevels" explicit_type "byte"
	multiplicity "[]"
	  param inout name "isDirectionLTR" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7}[] ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6489602 "checkCtorArgs"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6489730 "init"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6489858 "getPixelBounds"
	public return_type class_ref 314114 // Rectangle
	nparams 3
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6489986 "computePixelBounds"
	class_operation package return_type class_ref 314114 // Rectangle
	nparams 1
	  param inout name "im" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 889986 "Function"
	abstract visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 6490114 "computeFunction"
	  abstract package explicit_return_type "float"
	  nparams 3
	    param inout name "line" type class_ref 889474 // TextLine
	    param in name "componentIndex" explicit_type "int"
	    param in name "indexInArray" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3022722 // fgPosAdvF (<unidirectional association>)
	relation 3022722 --->
	  a role_name "fgPosAdvF" init_value " new Function() {
        float computeFunction(TextLine line,
                              int componentIndex,
                              int indexInArray) {

            TextLineComponent tlc = line.fComponents[componentIndex];
                int vi = line.getComponentVisualIndex(componentIndex);
            return line.locs[vi * 2] + tlc.getCharX(indexInArray) + tlc.getCharAdvance(indexInArray);
        }
    }" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3022722 // fgPosAdvF (<unidirectional association>)
	  b parent class_ref 889986 // Function
      end

      classrelation 3022850 // fgAdvanceF (<unidirectional association>)
	relation 3022850 --->
	  a role_name "fgAdvanceF" init_value " new Function() {

        float computeFunction(TextLine line,
                              int componentIndex,
                              int indexInArray) {

            TextLineComponent tlc = line.fComponents[componentIndex];
            return tlc.getCharAdvance(indexInArray);
        }
    }" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3022850 // fgAdvanceF (<unidirectional association>)
	  b parent class_ref 889986 // Function
      end

      classrelation 3022978 // fgXPositionF (<unidirectional association>)
	relation 3022978 --->
	  a role_name "fgXPositionF" init_value " new Function() {

        float computeFunction(TextLine line,
                              int componentIndex,
                              int indexInArray) {

                int vi = line.getComponentVisualIndex(componentIndex);
            TextLineComponent tlc = line.fComponents[componentIndex];
            return line.locs[vi * 2] + tlc.getCharX(indexInArray);
        }
    }" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3022978 // fgXPositionF (<unidirectional association>)
	  b parent class_ref 889986 // Function
      end

      classrelation 3023106 // fgYPositionF (<unidirectional association>)
	relation 3023106 --->
	  a role_name "fgYPositionF" init_value " new Function() {

        float computeFunction(TextLine line,
                              int componentIndex,
                              int indexInArray) {

            TextLineComponent tlc = line.fComponents[componentIndex];
            float charPos = tlc.getCharY(indexInArray);

            // charPos is relative to the component - adjust for
            // baseline

            return charPos + line.getComponentShift(componentIndex);
        }
    }" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3023106 // fgYPositionF (<unidirectional association>)
	  b parent class_ref 889986 // Function
      end

      operation 6490242 "characterCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6490370 "isDirectionLTR"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6490498 "getMetrics"
	public return_type class_ref 889602 // TextLineMetrics
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6490626 "visualToLogical"
	public explicit_return_type "int"
	nparams 1
	  param in name "visualIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6490754 "logicalToVisual"
	public explicit_return_type "int"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6490882 "getCharLevel"
	public explicit_return_type "byte"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6491010 "isCharLTR"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6491138 "getCharType"
	public explicit_return_type "int"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6491266 "isCharSpace"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6491394 "isCharWhitespace"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6491522 "getCharAngle"
	public explicit_return_type "float"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6491650 "getCoreMetricsAt"
	public explicit_return_type "CoreMetrics"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6491778 "getCharAscent"
	public explicit_return_type "float"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6491906 "getCharDescent"
	public explicit_return_type "float"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6492034 "getCharShift"
	public explicit_return_type "float"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6492162 "applyFunctionAtIndex"
	private explicit_return_type "float"
	nparams 2
	  param in name "logicalIndex" explicit_type "int"
	  param inout name "f" type class_ref 889986 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6492290 "getCharAdvance"
	public explicit_return_type "float"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6492418 "getCharXPosition"
	public explicit_return_type "float"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6492546 "getCharYPosition"
	public explicit_return_type "float"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6492674 "getCharLinePosition"
	public explicit_return_type "float"
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6492802 "getCharLinePosition"
	public explicit_return_type "float"
	nparams 2
	  param in name "logicalIndex" explicit_type "int"
	  param inout name "leading" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6492930 "caretAtOffsetIsValid"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6493058 "getComponentLogicalIndex"
	private explicit_return_type "int"
	nparams 1
	  param in name "vi" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "map a component visual index to the logical index.
"
      end

      operation 6493186 "getComponentVisualIndex"
	private explicit_return_type "int"
	nparams 1
	  param in name "li" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "map a component logical index to the visual index.
"
      end

      operation 6493314 "getCharBounds"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param in name "logicalIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6493442 "getComponentShift"
	private explicit_return_type "float"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6493570 "draw"
	public explicit_return_type "void"
	nparams 3
	  param inout name "g2" type class_ref 338178 // Graphics2D
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6493698 "getVisualBounds"
	public return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the union of the visual bounds of all the components.
This incorporates the path.  It does not include logical
bounds (used by carets).
"
      end

      operation 6493826 "getItalicBounds"
	public return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6493954 "getOutline"
	public return_type class_ref 379394 // Shape
	nparams 1
	  param inout name "tx" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6494082 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6494210 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6494338 "fastCreateTextLine"
	class_operation public return_type class_ref 889474 // TextLine
	nparams 5
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	  param inout name "font" type class_ref 340354 // Font
	  param inout name "lm" explicit_type "CoreMetrics"
	  param inout name "attributes" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<? extends Attribute, ?> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a TextLine from the text.  The Font must be able to
display all of the text.
attributes==null is equivalent to using an empty Map for
attributes
"
      end

      operation 6494466 "expandArray"
	class_operation private explicit_return_type "TextLineComponent"
	nparams 1
	  param inout name "orig" explicit_type "TextLineComponent"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6494594 "createComponentsOnRun"
	class_operation public explicit_return_type "TextLineComponent"
	nparams 12
	  param in name "runStart" explicit_type "int"
	  param in name "runLimit" explicit_type "int"
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	  param inout name "charsLtoV" explicit_type "int"
	multiplicity "[]"
	  param inout name "levels" explicit_type "byte"
	multiplicity "[]"
	  param inout name "factory" explicit_type "TextLabelFactory"
	  param inout name "font" type class_ref 340354 // Font
	  param inout name "cm" explicit_type "CoreMetrics"
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	  param inout name "decorator" explicit_type "Decoration"
	  param inout name "components" explicit_type "TextLineComponent"
	multiplicity "[]"
	  param in name "numComponents" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10}[] ${p10}, ${t11} ${p11}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array in logical order of the TextLineComponents on
the text in the given range, with the given attributes.
"
      end

      operation 6494722 "getComponents"
	class_operation public explicit_return_type "TextLineComponent"
	nparams 7
	  param inout name "styledParagraph" type class_ref 889090 // StyledParagraph
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	  param in name "textStart" explicit_type "int"
	  param in name "textLimit" explicit_type "int"
	  param inout name "charsLtoV" explicit_type "int"
	multiplicity "[]"
	  param inout name "levels" explicit_type "byte"
	multiplicity "[]"
	  param inout name "factory" explicit_type "TextLabelFactory"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array (in logical order) of the TextLineComponents representing
the text.  The components are both logically and visually contiguous.
"
      end

      operation 6494850 "createLineFromText"
	class_operation public return_type class_ref 889474 // TextLine
	nparams 5
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	  param inout name "styledParagraph" type class_ref 889090 // StyledParagraph
	  param inout name "factory" explicit_type "TextLabelFactory"
	  param inout name "isDirectionLTR" explicit_type "boolean"
	  param inout name "baselineOffsets" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a TextLine from the Font and character data over the
range.  The range is relative to both the StyledParagraph and the
character array.
"
      end

      operation 6494978 "computeComponentOrder"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "components" explicit_type "TextLineComponent"
	multiplicity "[]"
	  param inout name "charsLtoV" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute the components order from the given components array and
logical-to-visual character mapping.  May return null if canonical.
"
      end

      operation 6495106 "standardCreateTextLine"
	class_operation public return_type class_ref 889474 // TextLine
	nparams 4
	  param inout name "frc" type class_ref 866178 // FontRenderContext
	  param inout name "text" type class_ref 472962 // AttributedCharacterIterator
	  param inout name "chars" explicit_type "char"
	multiplicity "[]"
	  param inout name "baselineOffsets" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a TextLine from the text.  chars is just the text in the iterator.
"
      end

      operation 6495234 "advanceToFirstFont"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "aci" type class_ref 472962 // AttributedCharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A utility to get a range of text that is both logically and visually
contiguous.
If the entire range is ok, return limit, otherwise return the first
directional change after start.  We could do better than this, but
it doesn't seem worth it at the moment.
private static int firstVisualChunk(int order[], byte direction[],
int start, int limit)
{
if (order != null) {
int min = order[start];
int max = order[start];
int count = limit - start;
for (int i = start + 1; i < limit; i++) {
min = Math.min(min, order[i]);
max = Math.max(max, order[i]);
if (max - min >= count) {
if (direction != null) {
byte baseLevel = direction[start];
for (int j = start + 1; j < i; j++) {
if (direction[j] != baseLevel) {
return j;
}
}
}
return i;
}
}
}
return limit;
}


When this returns, the ACI's current position will be at the start of the
first run which does NOT contain a GraphicAttribute.  If no such run exists
the ACI's position will be at the end, and this method will return false.
"
      end

      operation 6495362 "getNormalizedOffsets"
	class_operation package explicit_return_type "float"
	nparams 2
	  param inout name "baselineOffsets" explicit_type "float"
	multiplicity "[]"
	  param in name "baseline" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6495490 "getFontAtCurrentPos"
	class_operation package return_type class_ref 340354 // Font
	nparams 1
	  param inout name "aci" type class_ref 472962 // AttributedCharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6495618 "firstVisualChunk"
	class_operation private explicit_return_type "int"
	nparams 4
	  param inout name "order" explicit_type "int"
	multiplicity "[]"
	  param inout name "direction" explicit_type "byte"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The new version requires that chunks be at the same level.
"
      end

      operation 6495746 "getJustifiedLine"
	public return_type class_ref 889474 // TextLine
	nparams 4
	  param in name "justificationWidth" explicit_type "float"
	  param in name "justifyRatio" explicit_type "float"
	  param in name "justStart" explicit_type "int"
	  param in name "justLimit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "create a new line with characters between charStart and charLimit
justified using the provided width and ratio.
"
      end

      operation 6495874 "getAdvanceBetween"
	class_operation public explicit_return_type "float"
	nparams 3
	  param inout name "components" explicit_type "TextLineComponent"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " return the sum of the advances of text between the logical start and limit"
      end

      operation 6496002 "getLayoutPath"
	package explicit_return_type "LayoutPathImpl"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 890242 "TransformAttribute"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>TransformAttribute</code> class provides an immutable
wrapper for a transform so that it is safe to use as an attribute.
"
      classrelation 3024002 // <realization>
	relation 3024002 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3024002 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3024130 // transform (<unidirectional association>)
	relation 3024130 --->
	  a role_name "transform" private
	    comment "
The <code>AffineTransform</code> for this
<code>TransformAttribute</code>, or <code>null</code>
if <code>AffineTransform</code> is the identity transform.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3024130 // transform (<unidirectional association>)
	  b parent class_ref 381058 // AffineTransform
      end

      operation 6498434 "TransformAttribute"
	public explicit_return_type ""
	nparams 1
	  param inout name "transform" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wraps the specified transform.  The transform is cloned and a
reference to the clone is kept.  The original transform is unchanged.
If null is passed as the argument, this constructor behaves as though
it were the identity transform.  (Note that it is preferable to use
{@link #IDENTITY} in this case.)
@param transform the specified {@link AffineTransform} to be wrapped,
or null.
"
      end

      operation 6498562 "getTransform"
	public return_type class_ref 381058 // AffineTransform
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the wrapped transform.
@return a <code>AffineTransform</code> that is a copy of the wrapped
transform of this <code>TransformAttribute</code>.
"
      end

      operation 6498690 "isIdentity"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the wrapped transform is
an identity transform.
@return <code>true</code> if the wrapped transform is
an identity transform; <code>false</code> otherwise.
@since 1.4
"
      end

      classrelation 3024258 // IDENTITY (<unidirectional association>)
	relation 3024258 --->
	  a role_name "IDENTITY" init_value " new TransformAttribute(null)" class_relation const_relation public
	    comment "
A <code>TransformAttribute</code> representing the identity transform.
@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3024258 // IDENTITY (<unidirectional association>)
	  b parent class_ref 890242 // TransformAttribute
      end

      operation 6498818 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 2
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6498946 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 261506 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since 1.6
"
      end

      attribute 1544066 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 3356247357827709530L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Added for serial backwards compatibility (4348425)
"
      end

      operation 6499074 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since 1.6
"
      end

      operation 6499202 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "rhs" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if rhs is a <code>TransformAttribute</code>
whose transform is equal to this <code>TransformAttribute</code>'s
transform.
@param rhs the object to compare to
@return <code>true</code> if the argument is a <code>TransformAttribute</code>
whose transform is equal to this <code>TransformAttribute</code>'s
transform.
@since 1.6
"
      end
    end
  end

  deploymentview 166018 "font"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 639106 "CharArrayIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.text.CharacterIterator;
${definition}"
      associated_elems
	class_ref 887298 // CharArrayIterator
      end
      comment "Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 639234 "FontRenderContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import static java.awt.RenderingHints.*;
${definition}"
      associated_elems
	class_ref 866178 // FontRenderContext
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author Charlton Innovations, Inc.
"
    end

    artifact 639362 "GlyphJustificationInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 887426 // GlyphJustificationInfo
      end
      comment "Copyright (c) 1997, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - 1997, All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998, All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by Taligent, Inc., a wholly-owned subsidiary
of IBM. These materials are provided under terms of a License
Agreement between Taligent and Sun. This technology is protected
by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 639490 "GlyphMetrics"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.geom.Rectangle2D;
${definition}"
      associated_elems
	class_ref 887554 // GlyphMetrics
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - 1997, All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998, All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by Taligent, Inc., a wholly-owned subsidiary
of IBM. These materials are provided under terms of a License
Agreement between Taligent and Sun. This technology is protected
by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 639618 "GlyphVector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Graphics2D;
import java.awt.Font;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.AffineTransform;
import java.awt.Shape;
import java.awt.font.GlyphMetrics;
import java.awt.font.GlyphJustificationInfo;
${definition}"
      associated_elems
	class_ref 866434 // GlyphVector
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author Charlton Innovations, Inc.
"
    end

    artifact 639746 "GraphicAttribute"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Graphics2D;
import java.awt.Font;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
${definition}"
      associated_elems
	class_ref 887682 // GraphicAttribute
      end
      comment "Copyright (c) 1998, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - 1997, All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998, All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by Taligent, Inc., a wholly-owned subsidiary
of IBM. These materials are provided under terms of a License
Agreement between Taligent and Sun. This technology is protected
by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 639874 "ImageGraphicAttribute"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Image;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
${definition}"
      associated_elems
	class_ref 887810 // ImageGraphicAttribute
      end
      comment "Copyright (c) 1998, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - 1997, All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998, All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by Taligent, Inc., a wholly-owned subsidiary
of IBM. These materials are provided under terms of a License
Agreement between Taligent and Sun. This technology is protected
by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 640002 "LayoutPath"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.geom.Point2D;
${definition}"
      associated_elems
	class_ref 887938 // LayoutPath
      end
      comment "Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright IBM Corp. 2005, All Rights Reserved.
"
    end

    artifact 640130 "LineBreakMeasurer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.text.BreakIterator;
import java.text.CharacterIterator;
import java.text.AttributedCharacterIterator;
import java.awt.font.FontRenderContext;
${definition}"
      associated_elems
	class_ref 888066 // LineBreakMeasurer
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - 1997, All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998, All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by Taligent, Inc., a wholly-owned subsidiary
of IBM. These materials are provided under terms of a License
Agreement between Taligent and Sun. This technology is protected
by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 640258 "LineMetrics"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 866306 // LineMetrics
      end
      comment "Copyright (c) 1998, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 640386 "MultipleMaster"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Font;
${definition}"
      associated_elems
	class_ref 888450 // MultipleMaster
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 640514 "NumericShaper"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Arrays;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 888578 // NumericShaper
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 640642 "OpenType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 888834 // OpenType
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 640770 "ShapeGraphicAttribute"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Shape;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
${definition}"
      associated_elems
	class_ref 888962 // ShapeGraphicAttribute
      end
      comment "Copyright (c) 1998, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - 1997, All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998, All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by Taligent, Inc., a wholly-owned subsidiary
of IBM. These materials are provided under terms of a License
Agreement between Taligent and Sun. This technology is protected
by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 640898 "StyledParagraph"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.im.InputMethodHighlight;
import java.text.Annotation;
import java.text.AttributedCharacterIterator;
import java.text.AttributedCharacterIterator.Attribute;
import java.util.Vector;
import java.util.HashMap;
import java.util.Map;
import sun.font.Decoration;
import sun.font.FontResolver;
import sun.text.CodePointIterator;
${definition}"
      associated_elems
	class_ref 889090 // StyledParagraph
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.























(C) Copyright IBM Corp. 1999,  All rights reserved.
"
    end

    artifact 641154 "TextAttribute"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.text.AttributedCharacterIterator.Attribute;
import java.util.Map;
import java.util.HashMap;
${definition}"
      associated_elems
	class_ref 865922 // TextAttribute
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - 1997, All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998, All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by Taligent, Inc., a wholly-owned subsidiary
of IBM. These materials are provided under terms of a License
Agreement between Taligent and Sun. This technology is protected
by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 641282 "TextHitInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.String;
${definition}"
      associated_elems
	class_ref 886914 // TextHitInfo
      end
      comment "Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - 1997, All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998, All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by Taligent, Inc., a wholly-owned subsidiary
of IBM. These materials are provided under terms of a License
Agreement between Taligent and Sun. This technology is protected
by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 641410 "TextJustifier"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 889346 // TextJustifier
      end
      comment "Copyright (c) 1997, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - 1997, All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998, All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by Taligent, Inc., a wholly-owned subsidiary
of IBM. These materials are provided under terms of a License
Agreement between Taligent and Sun. This technology is protected
by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 641538 "TextLayout"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.font.NumericShaper;
import java.awt.font.TextLine.TextLineMetrics;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.text.AttributedString;
import java.text.AttributedCharacterIterator;
import java.text.AttributedCharacterIterator.Attribute;
import java.text.CharacterIterator;
import java.util.Map;
import java.util.HashMap;
import java.util.Hashtable;
import sun.font.AttributeValues;
import sun.font.CoreMetrics;
import sun.font.Decoration;
import sun.font.FontLineMetrics;
import sun.font.FontResolver;
import sun.font.GraphicComponent;
import sun.font.LayoutPathImpl;
import sun.text.CodePointIterator;
${definition}"
      associated_elems
	class_ref 888322 // TextLayout
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - 1997, All Rights Reserved
(C) Copyright IBM Corp. 1996-2003, All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by Taligent, Inc., a wholly-owned subsidiary
of IBM. These materials are provided under terms of a License
Agreement between Taligent and Sun. This technology is protected
by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 641666 "TextLine"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.im.InputMethodHighlight;
import java.awt.image.BufferedImage;
import java.text.Annotation;
import java.text.AttributedCharacterIterator;
import java.text.AttributedCharacterIterator.Attribute;
import java.text.Bidi;
import java.text.CharacterIterator;
import java.util.Hashtable;
import java.util.Map;
import sun.font.AttributeValues;
import sun.font.BidiUtils;
import sun.font.CoreMetrics;
import sun.font.Decoration;
import sun.font.FontLineMetrics;
import sun.font.FontResolver;
import sun.font.GraphicComponent;
import sun.font.LayoutPathImpl;
import sun.font.LayoutPathImpl.EmptyPath;
import sun.font.LayoutPathImpl.SegmentPathBuilder;
import sun.font.TextLabelFactory;
import sun.font.TextLineComponent;
import sun.text.CodePointIterator;
import java.awt.geom.Line2D;
${definition}"
      associated_elems
	class_ref 889474 // TextLine
      end
      comment "Copyright (c) 1998, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright IBM Corp. 1998-2003, All Rights Reserved

"
    end

    artifact 641794 "TextMeasurer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Font;
import java.text.AttributedCharacterIterator;
import java.text.AttributedCharacterIterator.Attribute;
import java.text.AttributedString;
import java.text.Bidi;
import java.text.BreakIterator;
import java.text.CharacterIterator;
import java.awt.font.FontRenderContext;
import java.util.Hashtable;
import java.util.Map;
import sun.font.AttributeValues;
import sun.font.BidiUtils;
import sun.font.TextLineComponent;
import sun.font.TextLabelFactory;
import sun.font.FontResolver;
${definition}"
      associated_elems
	class_ref 888194 // TextMeasurer
      end
      comment "Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - 1997, All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998, All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by Taligent, Inc., a wholly-owned subsidiary
of IBM. These materials are provided under terms of a License
Agreement between Taligent and Sun. This technology is protected
by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 641922 "TransformAttribute"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.geom.AffineTransform;
import java.io.Serializable;
import java.io.ObjectStreamException;
${definition}"
      associated_elems
	class_ref 890242 // TransformAttribute
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - 1997, All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998, All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by Taligent, Inc., a wholly-owned subsidiary
of IBM. These materials are provided under terms of a License
Agreement between Taligent and Sun. This technology is protected
by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end
  end
end
