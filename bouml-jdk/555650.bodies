class InstructionList
!!!3542658.java!!!	InstructionList(inout i : Instruction)
    append(i);
!!!3542786.java!!!	InstructionList(inout i : BranchInstruction)
    append(i);
!!!3542914.java!!!	InstructionList(inout c : CompoundInstruction)
    append(c.getInstructionList());
!!!3543042.java!!!	isEmpty() : boolean
 return start == null;
!!!3543170.java!!!	findHandle(inout ihs : InstructionHandle [[]], inout pos : int [[]], in count : int, in target : int) : InstructionHandle
    int l=0, r = count - 1;

    /* Do a binary search since the pos array is orderd.
     */
    do {
      int i = (l + r) / 2;
      int j = pos[i];

      if(j == target) // target found
        return ihs[i];
      else if(target < j) // else constrain search area
        r = i - 1;
      else // target > j
        l = i + 1;
    } while(l <= r);

    return null;
!!!3543298.java!!!	findHandle(in pos : int) : InstructionHandle
    InstructionHandle[] ihs = getInstructionHandles();
    return findHandle(ihs, byte_positions, length, pos);
!!!3543426.java!!!	InstructionList(inout code : byte [[]])
    ByteSequence        bytes = new ByteSequence(code);
    InstructionHandle[] ihs   = new InstructionHandle[code.length];
    int[]               pos   = new int[code.length]; // Can't be more than that
    int                 count = 0; // Contains actual length

    /* Pass 1: Create an object for each byte code and append them
     * to the list.
     */
    try {
      while(bytes.available() > 0) {
        // Remember byte offset and associate it with the instruction
        int off =  bytes.getIndex();
        pos[count] = off;

        /* Read one instruction from the byte stream, the byte position is set
         * accordingly.
         */
        Instruction       i = Instruction.readInstruction(bytes);
        InstructionHandle ih;
        if(i instanceof BranchInstruction) // Use proper append() method
          ih = append((BranchInstruction)i);
        else
          ih = append(i);

        ih.setPosition(off);
        ihs[count] = ih;

        count++;
      }
    } catch(IOException e) { throw new ClassGenException(e.toString()); }

    byte_positions = new int[count]; // Trim to proper size
    System.arraycopy(pos, 0, byte_positions, 0, count);

    /* Pass 2: Look for BranchInstruction and update their targets, i.e.,
     * convert offsets to instruction handles.
     */
    for(int i=0; i < count; i++) {
      if(ihs[i] instanceof BranchHandle) {
        BranchInstruction bi = (BranchInstruction)ihs[i].instruction;
        int target = bi.position + bi.getIndex(); /* Byte code position:
                                                   * relative -> absolute. */
        // Search for target position
        InstructionHandle ih = findHandle(ihs, pos, count, target);

        if(ih == null) // Search failed
          throw new ClassGenException("Couldn't find target for branch: " + bi);

        bi.setTarget(ih); // Update target

        // If it is a Select instruction, update all branch targets
        if(bi instanceof Select) { // Either LOOKUPSWITCH or TABLESWITCH
          Select s       = (Select)bi;
          int[]  indices = s.getIndices();

          for(int j=0; j < indices.length; j++) {
            target = bi.position + indices[j];
            ih     = findHandle(ihs, pos, count, target);

            if(ih == null) // Search failed
              throw new ClassGenException("Couldn't find target for switch: " + bi);

            s.setTarget(j, ih); // Update target
          }
        }
      }
    }
!!!3543554.java!!!	append(inout ih : InstructionHandle, inout il : InstructionList) : InstructionHandle
    if(il == null)
      throw new ClassGenException("Appending null InstructionList");

    if(il.isEmpty()) // Nothing to do
      return ih;

    InstructionHandle next = ih.next, ret = il.start;

    ih.next = il.start;
    il.start.prev = ih;

    il.end.next = next;

    if(next != null) // i == end ?
      next.prev = il.end;
    else
      end = il.end; // Update end ...

    length += il.length; // Update length

    il.clear();

    return ret;
!!!3543682.java!!!	append(inout i : Instruction, inout il : InstructionList) : InstructionHandle
    InstructionHandle ih;

    if((ih = findInstruction2(i)) == null) // Also applies for empty list
      throw new ClassGenException("Instruction " + i +
                                  " is not contained in this list.");

    return append(ih, il);
!!!3543810.java!!!	append(inout il : InstructionList) : InstructionHandle
    if(il == null)
      throw new ClassGenException("Appending null InstructionList");

    if(il.isEmpty()) // Nothing to do
      return null;

    if(isEmpty()) {
      start  = il.start;
      end    = il.end;
      length = il.length;

      il.clear();

      return start;
    } else
      return append(end, il);  // was end.instruction
!!!3543938.java!!!	append(inout ih : InstructionHandle) : void
    if(isEmpty()) {
      start = end = ih;
      ih.next = ih.prev = null;
    }
    else {
      end.next = ih;
      ih.prev  = end;
      ih.next  = null;
      end      = ih;
    }

    length++; // Update length
!!!3544066.java!!!	append(inout i : Instruction) : InstructionHandle
    InstructionHandle ih = InstructionHandle.getInstructionHandle(i);
    append(ih);

    return ih;
!!!3544194.java!!!	append(inout i : BranchInstruction) : BranchHandle
    BranchHandle ih = BranchHandle.getBranchHandle(i);
    append(ih);

    return ih;
!!!3544322.java!!!	append(inout i : Instruction, inout j : Instruction) : InstructionHandle
    return append(i, new InstructionList(j));
!!!3544450.java!!!	append(inout i : Instruction, inout c : CompoundInstruction) : InstructionHandle
    return append(i, c.getInstructionList());
!!!3544578.java!!!	append(inout c : CompoundInstruction) : InstructionHandle
    return append(c.getInstructionList());
!!!3544706.java!!!	append(inout ih : InstructionHandle, inout c : CompoundInstruction) : InstructionHandle
    return append(ih, c.getInstructionList());
!!!3544834.java!!!	append(inout ih : InstructionHandle, inout i : Instruction) : InstructionHandle
    return append(ih, new InstructionList(i));
!!!3544962.java!!!	append(inout ih : InstructionHandle, inout i : BranchInstruction) : BranchHandle
    BranchHandle    bh = BranchHandle.getBranchHandle(i);
    InstructionList il = new InstructionList();
    il.append(bh);

    append(ih, il);

    return bh;
!!!3545090.java!!!	insert(inout ih : InstructionHandle, inout il : InstructionList) : InstructionHandle
    if(il == null)
      throw new ClassGenException("Inserting null InstructionList");

    if(il.isEmpty()) // Nothing to do
      return ih;

    InstructionHandle prev = ih.prev, ret = il.start;

    ih.prev = il.end;
    il.end.next = ih;

    il.start.prev = prev;

    if(prev != null) // ih == start ?
      prev.next = il.start;
    else
      start = il.start; // Update start ...

    length += il.length; // Update length

    il.clear();

    return ret;
!!!3545218.java!!!	insert(inout il : InstructionList) : InstructionHandle
    if(isEmpty()) {
      append(il); // Code is identical for this case
      return start;
    }
    else
      return insert(start, il);
!!!3545346.java!!!	insert(inout ih : InstructionHandle) : void
    if(isEmpty()) {
      start = end = ih;
      ih.next = ih.prev = null;
    } else {
      start.prev = ih;
      ih.next    = start;
      ih.prev    = null;
      start      = ih;
    }

    length++;
!!!3545474.java!!!	insert(inout i : Instruction, inout il : InstructionList) : InstructionHandle
    InstructionHandle ih;

    if((ih = findInstruction1(i)) == null)
      throw new ClassGenException("Instruction " + i +
                                  " is not contained in this list.");

    return insert(ih, il);
!!!3545602.java!!!	insert(inout i : Instruction) : InstructionHandle
    InstructionHandle ih = InstructionHandle.getInstructionHandle(i);
    insert(ih);

    return ih;
!!!3545730.java!!!	insert(inout i : BranchInstruction) : BranchHandle
    BranchHandle ih = BranchHandle.getBranchHandle(i);
    insert(ih);
    return ih;
!!!3545858.java!!!	insert(inout i : Instruction, inout j : Instruction) : InstructionHandle
    return insert(i, new InstructionList(j));
!!!3545986.java!!!	insert(inout i : Instruction, inout c : CompoundInstruction) : InstructionHandle
    return insert(i, c.getInstructionList());
!!!3546114.java!!!	insert(inout c : CompoundInstruction) : InstructionHandle
    return insert(c.getInstructionList());
!!!3546242.java!!!	insert(inout ih : InstructionHandle, inout i : Instruction) : InstructionHandle
    return insert(ih, new InstructionList(i));
!!!3546370.java!!!	insert(inout ih : InstructionHandle, inout c : CompoundInstruction) : InstructionHandle
    return insert(ih, c.getInstructionList());
!!!3546498.java!!!	insert(inout ih : InstructionHandle, inout i : BranchInstruction) : BranchHandle
    BranchHandle    bh = BranchHandle.getBranchHandle(i);
    InstructionList il = new InstructionList();
    il.append(bh);

    insert(ih, il);

    return bh;
!!!3546626.java!!!	move(inout start : InstructionHandle, inout end : InstructionHandle, inout target : InstructionHandle) : void
    // Step 1: Check constraints

    if((start == null) || (end == null))
      throw new ClassGenException("Invalid null handle: From " + start + " to " + end);

    if((target == start) || (target == end))
      throw new ClassGenException("Invalid range: From " + start + " to " + end +
                                  " contains target " + target);

    for(InstructionHandle ih = start; ih != end.next; ih = ih.next) {
      if(ih == null) // At end of list, end not found yet
        throw new ClassGenException("Invalid range: From " + start + " to " + end);
      else if(ih == target) // target may be null
        throw new ClassGenException("Invalid range: From " + start + " to " + end +
                                    " contains target " + target);
    }

    // Step 2: Temporarily remove the given instructions from the list

    InstructionHandle prev = start.prev, next = end.next;

    if(prev != null)
      prev.next = next;
    else // start == this.start!
      this.start = next;

    if(next != null)
      next.prev = prev;
    else // end == this.end!
      this.end = prev;

    start.prev = end.next = null;

    // Step 3: append after target

    if(target == null) { // append to start of list
      end.next = this.start;
      this.start = start;
    } else {
      next = target.next;

      target.next = start;
      start.prev  = target;
      end.next    = next;

      if(next != null)
        next.prev = end;
    }
!!!3546754.java!!!	move(inout ih : InstructionHandle, inout target : InstructionHandle) : void
    move(ih, ih, target);
!!!3546882.java!!!	remove(inout prev : InstructionHandle, inout next : InstructionHandle) : void
    InstructionHandle first, last; // First and last deleted instruction

    if((prev == null) && (next == null)) { // singleton list
      first = last = start;
      start = end = null;
    } else {
      if(prev == null) { // At start of list
        first = start;
        start = next;
      } else {
        first     = prev.next;
        prev.next = next;
      }

      if(next == null) { // At end of list
        last = end;
        end  = prev;
      } else {
        last      = next.prev;
        next.prev = prev;
      }
    }

    first.prev = null; // Completely separated from rest of list
    last.next  = null;

    ArrayList target_vec = new ArrayList();

    for(InstructionHandle ih=first; ih != null; ih = ih.next)
      ih.getInstruction().dispose(); // e.g. BranchInstructions release their targets

    StringBuffer buf = new StringBuffer("{ ");
    for(InstructionHandle ih=first; ih != null; ih = next) {
      next = ih.next;
      length--;

      if(ih.hasTargeters()) { // Still got targeters?
        target_vec.add(ih);
        buf.append(ih.toString(true) + " ");
        ih.next = ih.prev = null;
      } else
        ih.dispose();
    }

    buf.append("}");

    if(!target_vec.isEmpty()) {
      InstructionHandle[] targeted = new InstructionHandle[target_vec.size()];
      target_vec.toArray(targeted);
      throw new TargetLostException(targeted, buf.toString());
    }
!!!3547010.java!!!	delete(inout ih : InstructionHandle) : void
    remove(ih.prev, ih.next);
!!!3547138.java!!!	delete(inout i : Instruction) : void
    InstructionHandle ih;

    if((ih = findInstruction1(i)) == null)
      throw new ClassGenException("Instruction " + i +
                                  " is not contained in this list.");
    delete(ih);
!!!3547266.java!!!	delete(inout from : InstructionHandle, inout to : InstructionHandle) : void
    remove(from.prev, to.next);
!!!3547394.java!!!	delete(inout from : Instruction, inout to : Instruction) : void
    InstructionHandle from_ih, to_ih;

    if((from_ih = findInstruction1(from)) == null)
      throw new ClassGenException("Instruction " + from +
                                  " is not contained in this list.");

    if((to_ih = findInstruction2(to)) == null)
      throw new ClassGenException("Instruction " + to +
                                  " is not contained in this list.");
    delete(from_ih, to_ih);
!!!3547522.java!!!	findInstruction1(inout i : Instruction) : InstructionHandle
    for(InstructionHandle ih=start; ih != null; ih = ih.next)
      if(ih.instruction == i)
        return ih;

    return null;
!!!3547650.java!!!	findInstruction2(inout i : Instruction) : InstructionHandle
    for(InstructionHandle ih=end; ih != null; ih = ih.prev)
      if(ih.instruction == i)
        return ih;

    return null;
!!!3547778.java!!!	contains(inout i : InstructionHandle) : boolean
    if(i == null)
      return false;

    for(InstructionHandle ih=start; ih != null; ih = ih.next)
      if(ih == i)
        return true;

    return false;
!!!3547906.java!!!	contains(inout i : Instruction) : boolean
    return findInstruction1(i) != null;
!!!3548034.java!!!	setPositions() : void
    setPositions(false);
!!!3548162.java!!!	setPositions(inout check : boolean) : void
    int max_additional_bytes = 0, additional_bytes = 0;
    int index = 0, count = 0;
    int[] pos = new int[length];

    /* Pass 0: Sanity checks
     */
    if(check) {
      for(InstructionHandle ih=start; ih != null; ih = ih.next) {
        Instruction i = ih.instruction;

        if(i instanceof BranchInstruction) { // target instruction within list?
          Instruction inst = ((BranchInstruction)i).getTarget().instruction;
          if(!contains(inst))
            throw new ClassGenException("Branch target of " +
                                        Constants.OPCODE_NAMES[i.opcode] + ":" +
                                        inst + " not in instruction list");

          if(i instanceof Select) {
            InstructionHandle[] targets = ((Select)i).getTargets();

            for(int j=0; j < targets.length; j++) {
              inst = targets[j].instruction;
              if(!contains(inst))
                throw new ClassGenException("Branch target of " +
                                            Constants.OPCODE_NAMES[i.opcode] + ":" +
                                            inst + " not in instruction list");
            }
          }

          if(!(ih instanceof BranchHandle))
            throw new ClassGenException("Branch instruction " +
                                        Constants.OPCODE_NAMES[i.opcode] + ":" +
                                        inst + " not contained in BranchHandle.");

        }
      }
    }

    /* Pass 1: Set position numbers and sum up the maximum number of bytes an
     * instruction may be shifted.
     */
    for(InstructionHandle ih=start; ih != null; ih = ih.next) {
      Instruction i = ih.instruction;

      ih.setPosition(index);
      pos[count++] = index;

      /* Get an estimate about how many additional bytes may be added, because
       * BranchInstructions may have variable length depending on the target
       * offset (short vs. int) or alignment issues (TABLESWITCH and
       * LOOKUPSWITCH).
       */
      switch(i.getOpcode()) {
      case Constants.JSR: case Constants.GOTO:
        max_additional_bytes += 2;
        break;

      case Constants.TABLESWITCH: case Constants.LOOKUPSWITCH:
        max_additional_bytes += 3;
        break;
      }

      index += i.getLength();
    }

    /* Pass 2: Expand the variable-length (Branch)Instructions depending on
     * the target offset (short or int) and ensure that branch targets are
     * within this list.
     */
    for(InstructionHandle ih=start; ih != null; ih = ih.next)
      additional_bytes += ih.updatePosition(additional_bytes, max_additional_bytes);

    /* Pass 3: Update position numbers (which may have changed due to the
     * preceding expansions), like pass 1.
     */
    index=count=0;
    for(InstructionHandle ih=start; ih != null; ih = ih.next) {
      Instruction i = ih.instruction;

      ih.setPosition(index);
      pos[count++] = index;
      index += i.getLength();
    }

    byte_positions = new int[count]; // Trim to proper size
    System.arraycopy(pos, 0, byte_positions, 0, count);
!!!3548290.java!!!	getByteCode() : byte
    // Update position indices of instructions
    setPositions();

    ByteArrayOutputStream b   = new ByteArrayOutputStream();
    DataOutputStream      out = new DataOutputStream(b);

    try {
      for(InstructionHandle ih=start; ih != null; ih = ih.next) {
        Instruction i = ih.instruction;
        i.dump(out); // Traverse list
      }
    } catch(IOException e) {
      System.err.println(e);
      return null;
    }

    return b.toByteArray();
!!!3548418.java!!!	getInstructions() : Instruction
    ByteSequence  bytes        = new ByteSequence(getByteCode());
    ArrayList     instructions = new ArrayList();

    try {
      while(bytes.available() > 0) {
        instructions.add(Instruction.readInstruction(bytes));
      }
    } catch(IOException e) { throw new ClassGenException(e.toString()); }

    Instruction[] result = new Instruction[instructions.size()];
    instructions.toArray(result);
    return result;
!!!3548546.java!!!	toString() : String
    return toString(true);
!!!3548674.java!!!	toString(inout verbose : boolean) : String
    StringBuffer buf = new StringBuffer();

    for(InstructionHandle ih=start; ih != null; ih = ih.next) {
      buf.append(ih.toString(verbose) + "\n");
    }

    return buf.toString();
!!!3548802.java!!!	iterator() : Iterator
    return new Iterator() {
      private InstructionHandle ih = start;

      public Object next() {
        InstructionHandle i = ih;
        ih = ih.next;
        return i;
      }

      public void remove() {
        throw new UnsupportedOperationException();
      }

      public boolean hasNext() { return ih != null; }
    };
!!!3548930.java!!!	getInstructionHandles() : InstructionHandle
    InstructionHandle[] ihs = new InstructionHandle[length];
    InstructionHandle   ih  = start;

    for(int i=0; i < length; i++) {
      ihs[i] = ih;
      ih = ih.next;
    }

    return ihs;
!!!3549058.java!!!	getInstructionPositions() : int
 return byte_positions;
!!!3549186.java!!!	copy() : InstructionList
    HashMap         map = new HashMap();
    InstructionList il  = new InstructionList();

    /* Pass 1: Make copies of all instructions, append them to the new list
     * and associate old instruction references with the new ones, i.e.,
     * a 1:1 mapping.
     */
    for(InstructionHandle ih=start; ih != null; ih = ih.next) {
      Instruction i = ih.instruction;
      Instruction c = i.copy(); // Use clone for shallow copy

      if(c instanceof BranchInstruction)
        map.put(ih, il.append((BranchInstruction)c));
      else
        map.put(ih, il.append(c));
    }

    /* Pass 2: Update branch targets.
     */
    InstructionHandle ih=start;
    InstructionHandle ch=il.start;

    while(ih != null) {
      Instruction i = ih.instruction;
      Instruction c = ch.instruction;

      if(i instanceof BranchInstruction) {
        BranchInstruction bi      = (BranchInstruction)i;
        BranchInstruction bc      = (BranchInstruction)c;
        InstructionHandle itarget = bi.getTarget(); // old target

        // New target is in hash map
        bc.setTarget((InstructionHandle)map.get(itarget));

        if(bi instanceof Select) { // Either LOOKUPSWITCH or TABLESWITCH
          InstructionHandle[] itargets = ((Select)bi).getTargets();
          InstructionHandle[] ctargets = ((Select)bc).getTargets();

          for(int j=0; j < itargets.length; j++) { // Update all targets
            ctargets[j] = (InstructionHandle)map.get(itargets[j]);
          }
        }
      }

      ih = ih.next;
      ch = ch.next;
    }

    return il;
!!!3549314.java!!!	replaceConstantPool(inout old_cp : ConstantPoolGen, inout new_cp : ConstantPoolGen) : void
    for(InstructionHandle ih=start; ih != null; ih = ih.next) {
      Instruction i = ih.instruction;

      if(i instanceof CPInstruction) {
        CPInstruction ci = (CPInstruction)i;
        Constant      c  = old_cp.getConstant(ci.getIndex());
        ci.setIndex(new_cp.addConstant(c, old_cp));
      }
    }
!!!3549442.java!!!	clear() : void
    start = end = null;
    length = 0;
!!!3549570.java!!!	dispose() : void
    // Traverse in reverse order, because ih.next is overwritten
    for(InstructionHandle ih=end; ih != null; ih = ih.prev)
      /* Causes BranchInstructions to release target and targeters, because it
       * calls dispose() on the contained instruction.
       */
      ih.dispose();

    clear();
!!!3549698.java!!!	getStart() : InstructionHandle
 return start;
!!!3549826.java!!!	getEnd() : InstructionHandle
 return end;
!!!3549954.java!!!	getLength() : int
 return length;
!!!3550082.java!!!	size() : int
 return length;
!!!3550210.java!!!	redirectBranches(inout old_target : InstructionHandle, inout new_target : InstructionHandle) : void
    for(InstructionHandle ih = start; ih != null; ih = ih.next) {
      Instruction i  = ih.getInstruction();

      if(i instanceof BranchInstruction) {
        BranchInstruction b      = (BranchInstruction)i;
        InstructionHandle target = b.getTarget();

        if(target == old_target)
          b.setTarget(new_target);

        if(b instanceof Select) { // Either LOOKUPSWITCH or TABLESWITCH
          InstructionHandle[] targets = ((Select)b).getTargets();

          for(int j=0; j < targets.length; j++) // Update targets
            if(targets[j] == old_target)
              ((Select)b).setTarget(j, new_target);
        }
      }
    }
!!!3550338.java!!!	redirectLocalVariables(inout lg : LocalVariableGen [[]], inout old_target : InstructionHandle, inout new_target : InstructionHandle) : void
    for(int i=0; i < lg.length; i++) {
      InstructionHandle start = lg[i].getStart();
      InstructionHandle end   = lg[i].getEnd();

      if(start == old_target)
        lg[i].setStart(new_target);

      if(end == old_target)
        lg[i].setEnd(new_target);
    }
!!!3550466.java!!!	redirectExceptionHandlers(inout exceptions : CodeExceptionGen [[]], inout old_target : InstructionHandle, inout new_target : InstructionHandle) : void
    for(int i=0; i < exceptions.length; i++) {
      if(exceptions[i].getStartPC() == old_target)
        exceptions[i].setStartPC(new_target);

      if(exceptions[i].getEndPC() == old_target)
        exceptions[i].setEndPC(new_target);

      if(exceptions[i].getHandlerPC() == old_target)
        exceptions[i].setHandlerPC(new_target);
    }
!!!3550594.java!!!	addObserver(inout o : InstructionListObserver) : void
    if(observers == null)
      observers = new ArrayList();

    observers.add(o);
!!!3550722.java!!!	removeObserver(inout o : InstructionListObserver) : void
    if(observers != null)
      observers.remove(o);
!!!3550850.java!!!	update() : void
    if(observers != null)
      for(Iterator e = observers.iterator(); e.hasNext(); )
        ((InstructionListObserver)e.next()).notify(this);
