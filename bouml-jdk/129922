format 222
"concurrent" // jdk1.8::java::util::concurrent
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/util/concurrent/"
  java_package "java.util.concurrent"
  classview 128770 "concurrent"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 130690 "ConcurrentMap"
      visibility public stereotype "interface"
      nformals 2
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 130178 // Map
        rank 0 explicit_value ""
      actual class class_ref 130178 // Map
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link java.util.Map} providing thread safety and atomicity
guarantees.

<p>Memory consistency effects: As with other concurrent
collections, actions in a thread prior to placing an object into a
{@code ConcurrentMap} as a key or value
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions subsequent to the access or removal of that object from
the {@code ConcurrentMap} in another thread.

<p>This interface is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <K> the type of keys maintained by this map
@param <V> the type of mapped values
"
      classrelation 3573378 // <realization>
	relation 3573378 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3573378 // <realization>
	  b parent class_ref 130178 // Map
      end

      operation 9032962 "getOrDefault"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "defaultValue" explicit_type "V"
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

@implNote This implementation assumes that the ConcurrentMap cannot
contain null values and {@code get()} returning null unambiguously means
the key is absent. Implementations which support null values
<strong>must</strong> override this default implementation.

@throws ClassCastException {@inheritDoc}
@throws NullPointerException {@inheritDoc}
@since 1.8
"
      end

      operation 9033090 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super K, ? super V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

@implSpec The default implementation is equivalent to, for this
{@code map}:
<pre> {@code
for ((Map.Entry<K, V> entry : map.entrySet())
    action.accept(entry.getKey(), entry.getValue());
}</pre>

@implNote The default implementation assumes that
{@code IllegalStateException} thrown by {@code getKey()} or
{@code getValue()} indicates that the entry has been removed and cannot
be processed. Operation continues for subsequent entries.

@throws NullPointerException {@inheritDoc}
@since 1.8
"
      end

      operation 9033218 "putIfAbsent"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the specified key is not already associated
with a value, associate it with the given value.
This is equivalent to
 <pre> {@code
if (!map.containsKey(key))
  return map.put(key, value);
else
  return map.get(key);
}</pre>

except that the action is performed atomically.

@implNote This implementation intentionally re-abstracts the
inappropriate default provided in {@code Map}.

@param key key with which the specified value is to be associated
@param value value to be associated with the specified key
@return the previous value associated with the specified key, or
        {@code null} if there was no mapping for the key.
        (A {@code null} return can also indicate that the map
        previously associated {@code null} with the key,
        if the implementation supports null values.)
@throws UnsupportedOperationException if the {@code put} operation
        is not supported by this map
@throws ClassCastException if the class of the specified key or value
        prevents it from being stored in this map
@throws NullPointerException if the specified key or value is null,
        and this map does not permit null keys or values
@throws IllegalArgumentException if some property of the specified key
        or value prevents it from being stored in this map
"
      end

      operation 9033346 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the entry for a key only if currently mapped to a given value.
This is equivalent to
 <pre> {@code
if (map.containsKey(key) && Objects.equals(map.get(key), value)) {
  map.remove(key);
  return true;
} else
  return false;
}</pre>

except that the action is performed atomically.

@implNote This implementation intentionally re-abstracts the
inappropriate default provided in {@code Map}.

@param key key with which the specified value is associated
@param value value expected to be associated with the specified key
@return {@code true} if the value was removed
@throws UnsupportedOperationException if the {@code remove} operation
        is not supported by this map
@throws ClassCastException if the key or value is of an inappropriate
        type for this map
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified key or value is null,
        and this map does not permit null keys or values
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
"
      end

      operation 9033474 "replace"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "oldValue" explicit_type "V"
	  param inout name "newValue" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the entry for a key only if currently mapped to a given value.
This is equivalent to
 <pre> {@code
if (map.containsKey(key) && Objects.equals(map.get(key), oldValue)) {
  map.put(key, newValue);
  return true;
} else
  return false;
}</pre>

except that the action is performed atomically.

@implNote This implementation intentionally re-abstracts the
inappropriate default provided in {@code Map}.

@param key key with which the specified value is associated
@param oldValue value expected to be associated with the specified key
@param newValue value to be associated with the specified key
@return {@code true} if the value was replaced
@throws UnsupportedOperationException if the {@code put} operation
        is not supported by this map
@throws ClassCastException if the class of a specified key or value
        prevents it from being stored in this map
@throws NullPointerException if a specified key or value is null,
        and this map does not permit null keys or values
@throws IllegalArgumentException if some property of a specified key
        or value prevents it from being stored in this map
"
      end

      operation 9033602 "replace"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the entry for a key only if currently mapped to some value.
This is equivalent to
 <pre> {@code
if (map.containsKey(key)) {
  return map.put(key, value);
} else
  return null;
}</pre>

except that the action is performed atomically.

@implNote This implementation intentionally re-abstracts the
inappropriate default provided in {@code Map}.

@param key key with which the specified value is associated
@param value value to be associated with the specified key
@return the previous value associated with the specified key, or
        {@code null} if there was no mapping for the key.
        (A {@code null} return can also indicate that the map
        previously associated {@code null} with the key,
        if the implementation supports null values.)
@throws UnsupportedOperationException if the {@code put} operation
        is not supported by this map
@throws ClassCastException if the class of the specified key or value
        prevents it from being stored in this map
@throws NullPointerException if the specified key or value is null,
        and this map does not permit null keys or values
@throws IllegalArgumentException if some property of the specified key
        or value prevents it from being stored in this map
"
      end

      operation 9033730 "replaceAll"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "function" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super K, ? super V, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

@implSpec
<p>The default implementation is equivalent to, for this {@code map}:
<pre> {@code
for ((Map.Entry<K, V> entry : map.entrySet())
    do {
       K k = entry.getKey();
       V v = entry.getValue();
    } while(!replace(k, v, function.apply(k, v)));
}</pre>

The default implementation may retry these steps when multiple
threads attempt updates including potentially calling the function
repeatedly for a given key.

<p>This implementation assumes that the ConcurrentMap cannot contain null
values and {@code get()} returning null unambiguously means the key is
absent. Implementations which support null values <strong>must</strong>
override this default implementation.

@throws UnsupportedOperationException {@inheritDoc}
@throws NullPointerException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}
@since 1.8
"
      end

      operation 9033858 "computeIfAbsent"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "mappingFunction" type class_ref 192770 // Function
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

@implSpec
The default implementation is equivalent to the following steps for this
{@code map}, then returning the current value or {@code null} if now
absent:

<pre> {@code
if (map.get(key) == null) {
    V newValue = mappingFunction.apply(key);
    if (newValue != null)
        return map.putIfAbsent(key, newValue);
}
}</pre>

The default implementation may retry these steps when multiple
threads attempt updates including potentially calling the mapping
function multiple times.

<p>This implementation assumes that the ConcurrentMap cannot contain null
values and {@code get()} returning null unambiguously means the key is
absent. Implementations which support null values <strong>must</strong>
override this default implementation.

@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws NullPointerException {@inheritDoc}
@since 1.8
"
      end

      operation 9033986 "computeIfPresent"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? super V, ? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

@implSpec
The default implementation is equivalent to performing the following
steps for this {@code map}, then returning the current value or
{@code null} if now absent. :

<pre> {@code
if (map.get(key) != null) {
    V oldValue = map.get(key);
    V newValue = remappingFunction.apply(key, oldValue);
    if (newValue != null)
        map.replace(key, oldValue, newValue);
    else
        map.remove(key, oldValue);
}
}</pre>

The default implementation may retry these steps when multiple threads
attempt updates including potentially calling the remapping function
multiple times.

<p>This implementation assumes that the ConcurrentMap cannot contain null
values and {@code get()} returning null unambiguously means the key is
absent. Implementations which support null values <strong>must</strong>
override this default implementation.

@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws NullPointerException {@inheritDoc}
@since 1.8
"
      end

      operation 9034114 "compute"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? super V, ? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

@implSpec
The default implementation is equivalent to performing the following
steps for this {@code map}, then returning the current value or
{@code null} if absent:

<pre> {@code
V oldValue = map.get(key);
V newValue = remappingFunction.apply(key, oldValue);
if (oldValue != null ) {
   if (newValue != null)
      map.replace(key, oldValue, newValue);
   else
      map.remove(key, oldValue);
} else {
   if (newValue != null)
      map.putIfAbsent(key, newValue);
   else
      return null;
}
}</pre>

The default implementation may retry these steps when multiple
threads attempt updates including potentially calling the remapping
function multiple times.

<p>This implementation assumes that the ConcurrentMap cannot contain null
values and {@code get()} returning null unambiguously means the key is
absent. Implementations which support null values <strong>must</strong>
override this default implementation.

@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws NullPointerException {@inheritDoc}
@since 1.8
"
      end

      operation 9034242 "merge"
	cpp_inline public explicit_return_type "V"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? super V, ? super V, ? extends V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

@implSpec
The default implementation is equivalent to performing the following
steps for this {@code map}, then returning the current value or
{@code null} if absent:

<pre> {@code
V oldValue = map.get(key);
V newValue = (oldValue == null) ? value :
             remappingFunction.apply(oldValue, value);
if (newValue == null)
    map.remove(key);
else
    map.put(key, newValue);
}</pre>

<p>The default implementation may retry these steps when multiple
threads attempt updates including potentially calling the remapping
function multiple times.

<p>This implementation assumes that the ConcurrentMap cannot contain null
values and {@code get()} returning null unambiguously means the key is
absent. Implementations which support null values <strong>must</strong>
override this default implementation.

@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws NullPointerException {@inheritDoc}
@since 1.8
"
      end
    end

    class 319362 "ConcurrentHashMap"
      visibility public 
      nformals 2
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 192130 // AbstractMap
        rank 0 explicit_value ""
      actual class class_ref 192130 // AbstractMap
        rank 1 explicit_value ""
      actual class class_ref 130690 // ConcurrentMap
        rank 0 explicit_value ""
      actual class class_ref 130690 // ConcurrentMap
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A hash table supporting full concurrency of retrievals and
high expected concurrency for updates. This class obeys the
same functional specification as {@link java.util.Hashtable}, and
includes versions of methods corresponding to each method of
{@code Hashtable}. However, even though all operations are
thread-safe, retrieval operations do <em>not</em> entail locking,
and there is <em>not</em> any support for locking the entire table
in a way that prevents all access.  This class is fully
interoperable with {@code Hashtable} in programs that rely on its
thread safety but not on its synchronization details.

<p>Retrieval operations (including {@code get}) generally do not
block, so may overlap with update operations (including {@code put}
and {@code remove}). Retrievals reflect the results of the most
recently <em>completed</em> update operations holding upon their
onset. (More formally, an update operation for a given key bears a
<em>happens-before</em> relation with any (non-null) retrieval for
that key reporting the updated value.)  For aggregate operations
such as {@code putAll} and {@code clear}, concurrent retrievals may
reflect insertion or removal of only some entries.  Similarly,
Iterators, Spliterators and Enumerations return elements reflecting the
state of the hash table at some point at or since the creation of the
iterator/enumeration.  They do <em>not</em> throw {@link
java.util.ConcurrentModificationException ConcurrentModificationException}.
However, iterators are designed to be used by only one thread at a time.
Bear in mind that the results of aggregate status methods including
{@code size}, {@code isEmpty}, and {@code containsValue} are typically
useful only when a map is not undergoing concurrent updates in other threads.
Otherwise the results of these methods reflect transient states
that may be adequate for monitoring or estimation purposes, but not
for program control.

<p>The table is dynamically expanded when there are too many
collisions (i.e., keys that have distinct hash codes but fall into
the same slot modulo the table size), with the expected average
effect of maintaining roughly two bins per mapping (corresponding
to a 0.75 load factor threshold for resizing). There may be much
variance around this average as mappings are added and removed, but
overall, this maintains a commonly accepted time/space tradeoff for
hash tables.  However, resizing this or any other kind of hash
table may be a relatively slow operation. When possible, it is a
good idea to provide a size estimate as an optional {@code
initialCapacity} constructor argument. An additional optional
{@code loadFactor} constructor argument provides a further means of
customizing initial table capacity by specifying the table density
to be used in calculating the amount of space to allocate for the
given number of elements.  Also, for compatibility with previous
versions of this class, constructors may optionally specify an
expected {@code concurrencyLevel} as an additional hint for
internal sizing.  Note that using many keys with exactly the same
{@code hashCode()} is a sure way to slow down performance of any
hash table. To ameliorate impact, when keys are {@link Comparable},
this class may use comparison order among keys to help break ties.

<p>A {@link Set} projection of a ConcurrentHashMap may be created
(using {@link #newKeySet()} or {@link #newKeySet(int)}), or viewed
(using {@link #keySet(Object)} when only keys are of interest, and the
mapped values are (perhaps transiently) not used or all take the
same mapping value.

<p>A ConcurrentHashMap can be used as scalable frequency map (a
form of histogram or multiset) by using {@link
java.util.concurrent.atomic.LongAdder} values and initializing via
{@link #computeIfAbsent computeIfAbsent}. For example, to add a count
to a {@code ConcurrentHashMap<String,LongAdder> freqs}, you can use
{@code freqs.computeIfAbsent(k -> new LongAdder()).increment();}

<p>This class and its views and iterators implement all of the
<em>optional</em> methods of the {@link Map} and {@link Iterator}
interfaces.

<p>Like {@link Hashtable} but unlike {@link HashMap}, this class
does <em>not</em> allow {@code null} to be used as a key or value.

<p>ConcurrentHashMaps support a set of sequential and parallel bulk
operations that, unlike most {@link Stream} methods, are designed
to be safely, and often sensibly, applied even with maps that are
being concurrently updated by other threads; for example, when
computing a snapshot summary of the values in a shared registry.
There are three kinds of operation, each with four forms, accepting
functions with Keys, Values, Entries, and (Key, Value) arguments
and/or return values. Because the elements of a ConcurrentHashMap
are not ordered in any particular way, and may be processed in
different orders in different parallel executions, the correctness
of supplied functions should not depend on any ordering, or on any
other objects or values that may transiently change while
computation is in progress; and except for forEach actions, should
ideally be side-effect-free. Bulk operations on {@link java.util.Map.Entry}
objects do not support method {@code setValue}.

<ul>
<li> forEach: Perform a given action on each element.
A variant form applies a given transformation on each element
before performing the action.</li>

<li> search: Return the first available non-null result of
applying a given function on each element; skipping further
search when a result is found.</li>

<li> reduce: Accumulate each element.  The supplied reduction
function cannot rely on ordering (more formally, it should be
both associative and commutative).  There are five variants:

<ul>

<li> Plain reductions. (There is not a form of this method for
(key, value) function arguments since there is no corresponding
return type.)</li>

<li> Mapped reductions that accumulate the results of a given
function applied to each element.</li>

<li> Reductions to scalar doubles, longs, and ints, using a
given basis value.</li>

</ul>
</li>
</ul>

<p>These bulk operations accept a {@code parallelismThreshold}
argument. Methods proceed sequentially if the current map size is
estimated to be less than the given threshold. Using a value of
{@code Long.MAX_VALUE} suppresses all parallelism.  Using a value
of {@code 1} results in maximal parallelism by partitioning into
enough subtasks to fully utilize the {@link
ForkJoinPool#commonPool()} that is used for all parallel
computations. Normally, you would initially choose one of these
extreme values, and then measure performance of using in-between
values that trade off overhead versus throughput.

<p>The concurrency properties of bulk operations follow
from those of ConcurrentHashMap: Any non-null result returned
from {@code get(key)} and related access methods bears a
happens-before relation with the associated insertion or
update.  The result of any bulk operation reflects the
composition of these per-element relations (but is not
necessarily atomic with respect to the map as a whole unless it
is somehow known to be quiescent).  Conversely, because keys
and values in the map are never null, null serves as a reliable
atomic indicator of the current lack of any result.  To
maintain this property, null serves as an implicit basis for
all non-scalar reduction operations. For the double, long, and
int versions, the basis should be one that, when combined with
any other value, returns that other value (more formally, it
should be the identity element for the reduction). Most common
reductions have these properties; for example, computing a sum
with basis 0 or a minimum with basis MAX_VALUE.

<p>Search and transformation functions provided as arguments
should similarly return null to indicate the lack of any result
(in which case it is not used). In the case of mapped
reductions, this also enables transformations to serve as
filters, returning null (or, in the case of primitive
specializations, the identity basis) if the element should not
be combined. You can create compound transformations and
filterings by composing them yourself under this \"null means
there is nothing there now\" rule before using them in search or
reduce operations.

<p>Methods accepting and/or returning Entry arguments maintain
key-value associations. They may be useful for example when
finding the key for the greatest value. Note that \"plain\" Entry
arguments can be supplied using {@code new
AbstractMap.SimpleEntry(k,v)}.

<p>Bulk operations may complete abruptly, throwing an
exception encountered in the application of a supplied
function. Bear in mind when handling such exceptions that other
concurrently executing functions could also have thrown
exceptions, or would have done so if the first exception had
not occurred.

<p>Speedups for parallel compared to sequential forms are common
but not guaranteed.  Parallel operations involving brief functions
on small maps may execute more slowly than sequential forms if the
underlying work to parallelize the computation is more expensive
than the computation itself.  Similarly, parallelization may not
lead to much actual parallelism if all processors are busy
performing unrelated tasks.

<p>All arguments to all task methods must be non-null.

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <K> the type of keys maintained by this map
@param <V> the type of mapped values
"
      classrelation 3573250 // <realization>
	relation 3573250 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3573250 // <realization>
	  b parent class_ref 192130 // AbstractMap
      end

      classrelation 3573506 // <realization>
	relation 3573506 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3573506 // <realization>
	  b parent class_ref 130690 // ConcurrentMap
      end

      classrelation 3573634 // <realization>
	relation 3573634 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3573634 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2105090 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7249069246763182397L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2105218 "MAXIMUM_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 30"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Overview:

The primary design goal of this hash table is to maintain
concurrent readability (typically method get(), but also
iterators and related methods) while minimizing update
contention. Secondary goals are to keep space consumption about
the same or better than java.util.HashMap, and to support high
initial insertion rates on an empty table by many threads.

This map usually acts as a binned (bucketed) hash table.  Each
key-value mapping is held in a Node.  Most nodes are instances
of the basic Node class with hash, key, value, and next
fields. However, various subclasses exist: TreeNodes are
arranged in balanced trees, not lists.  TreeBins hold the roots
of sets of TreeNodes. ForwardingNodes are placed at the heads
of bins during resizing. ReservationNodes are used as
placeholders while establishing values in computeIfAbsent and
related methods.  The types TreeBin, ForwardingNode, and
ReservationNode do not hold normal user keys, values, or
hashes, and are readily distinguishable during search etc
because they have negative hash fields and null key and value
fields. (These special nodes are either uncommon or transient,
so the impact of carrying around some unused fields is
insignificant.)

The table is lazily initialized to a power-of-two size upon the
first insertion.  Each bin in the table normally contains a
list of Nodes (most often, the list has only zero or one Node).
Table accesses require volatile/atomic reads, writes, and
CASes.  Because there is no other way to arrange this without
adding further indirections, we use intrinsics
(sun.misc.Unsafe) operations.

We use the top (sign) bit of Node hash fields for control
purposes -- it is available anyway because of addressing
constraints.  Nodes with negative hash fields are specially
handled or ignored in map methods.

Insertion (via put or its variants) of the first node in an
empty bin is performed by just CASing it to the bin.  This is
by far the most common case for put operations under most
key/hash distributions.  Other update operations (insert,
delete, and replace) require locks.  We do not want to waste
the space required to associate a distinct lock object with
each bin, so instead use the first node of a bin list itself as
a lock. Locking support for these locks relies on builtin
\"synchronized\" monitors.

Using the first node of a list as a lock does not by itself
suffice though: When a node is locked, any update must first
validate that it is still the first node after locking it, and
retry if not. Because new nodes are always appended to lists,
once a node is first in a bin, it remains first until deleted
or the bin becomes invalidated (upon resizing).

The main disadvantage of per-bin locks is that other update
operations on other nodes in a bin list protected by the same
lock can stall, for example when user equals() or mapping
functions take a long time.  However, statistically, under
random hash codes, this is not a common problem.  Ideally, the
frequency of nodes in bins follows a Poisson distribution
(http://en.wikipedia.org/wiki/Poisson_distribution) with a
parameter of about 0.5 on average, given the resizing threshold
of 0.75, although with a large variance because of resizing
granularity. Ignoring variance, the expected occurrences of
list size k are (exp(-0.5) * pow(0.5, k) / factorial(k)). The
first values are:

0:    0.60653066
1:    0.30326533
2:    0.07581633
3:    0.01263606
4:    0.00157952
5:    0.00015795
6:    0.00001316
7:    0.00000094
8:    0.00000006
more: less than 1 in ten million

Lock contention probability for two threads accessing distinct
elements is roughly 1 / (8 * #elements) under random hashes.

Actual hash code distributions encountered in practice
sometimes deviate significantly from uniform randomness.  This
includes the case when N > (1<<30), so some keys MUST collide.
Similarly for dumb or hostile usages in which multiple keys are
designed to have identical hash codes or ones that differs only
in masked-out high bits. So we use a secondary strategy that
applies when the number of nodes in a bin exceeds a
threshold. These TreeBins use a balanced tree to hold nodes (a
specialized form of red-black trees), bounding search time to
O(log N).  Each search step in a TreeBin is at least twice as
slow as in a regular list, but given that N cannot exceed
(1<<64) (before running out of addresses) this bounds search
steps, lock hold times, etc, to reasonable constants (roughly
100 nodes inspected per operation worst case) so long as keys
are Comparable (which is very common -- String, Long, etc).
TreeBin nodes (TreeNodes) also maintain the same \"next\"
traversal pointers as regular nodes, so can be traversed in
iterators in the same way.

The table is resized when occupancy exceeds a percentage
threshold (nominally, 0.75, but see below).  Any thread
noticing an overfull bin may assist in resizing after the
initiating thread allocates and sets up the replacement array.
However, rather than stalling, these other threads may proceed
with insertions etc.  The use of TreeBins shields us from the
worst case effects of overfilling while resizes are in
progress.  Resizing proceeds by transferring bins, one by one,
from the table to the next table. However, threads claim small
blocks of indices to transfer (via field transferIndex) before
doing so, reducing contention.  A generation stamp in field
sizeCtl ensures that resizings do not overlap. Because we are
using power-of-two expansion, the elements from each bin must
either stay at same index, or move with a power of two
offset. We eliminate unnecessary node creation by catching
cases where old nodes can be reused because their next fields
won't change.  On average, only about one-sixth of them need
cloning when a table doubles. The nodes they replace will be
garbage collectable as soon as they are no longer referenced by
any reader thread that may be in the midst of concurrently
traversing table.  Upon transfer, the old table bin contains
only a special forwarding node (with hash field \"MOVED\") that
contains the next table as its key. On encountering a
forwarding node, access and update operations restart, using
the new table.

Each bin transfer requires its bin lock, which can stall
waiting for locks while resizing. However, because other
threads can join in and help resize rather than contend for
locks, average aggregate waits become shorter as resizing
progresses.  The transfer operation must also ensure that all
accessible bins in both the old and new table are usable by any
traversal.  This is arranged in part by proceeding from the
last bin (table.length - 1) up towards the first.  Upon seeing
a forwarding node, traversals (see class Traverser) arrange to
move to the new table without revisiting nodes.  To ensure that
no intervening nodes are skipped even when moved out of order,
a stack (see class TableStack) is created on first encounter of
a forwarding node during a traversal, to maintain its place if
later processing the current table. The need for these
save/restore mechanics is relatively rare, but when one
forwarding node is encountered, typically many more will be.
So Traversers use a simple caching scheme to avoid creating so
many new TableStack nodes. (Thanks to Peter Levart for
suggesting use of a stack here.)

The traversal scheme also applies to partial traversals of
ranges of bins (via an alternate Traverser constructor)
to support partitioned aggregate operations.  Also, read-only
operations give up if ever forwarded to a null table, which
provides support for shutdown-style clearing, which is also not
currently implemented.

Lazy table initialization minimizes footprint until first use,
and also avoids resizings when the first operation is from a
putAll, constructor with map argument, or deserialization.
These cases attempt to override the initial capacity settings,
but harmlessly fail to take effect in cases of races.

The element count is maintained using a specialization of
LongAdder. We need to incorporate a specialization rather than
just use a LongAdder in order to access implicit
contention-sensing that leads to creation of multiple
CounterCells.  The counter mechanics avoid contention on
updates but can encounter cache thrashing if read too
frequently during concurrent access. To avoid reading so often,
resizing under contention is attempted only upon adding to a
bin already holding two or more nodes. Under uniform hash
distributions, the probability of this occurring at threshold
is around 13%, meaning that only about 1 in 8 puts check
threshold (and after resizing, many fewer do so).

TreeBins use a special form of comparison for search and
related operations (which is the main reason we cannot use
existing collections such as TreeMaps). TreeBins contain
Comparable elements, but may contain others, as well as
elements that are Comparable but not necessarily Comparable for
the same T, so we cannot invoke compareTo among them. To handle
this, the tree is ordered primarily by hash value, then by
Comparable.compareTo order if applicable.  On lookup at a node,
if elements are not comparable or compare as 0 then both left
and right children may need to be searched in the case of tied
hash values. (This corresponds to the full list search that
would be necessary if all elements were non-Comparable and had
tied hashes.) On insertion, to keep a total ordering (or as
close as is required here) across rebalancings, we compare
classes and identityHashCodes as tie-breakers. The red-black
balancing code is updated from pre-jdk-collections
(http://gee.cs.oswego.edu/dl/classes/collections/RBCell.java)
based in turn on Cormen, Leiserson, and Rivest \"Introduction to
Algorithms\" (CLR).

TreeBins also require an additional locking mechanism.  While
list traversal is always possible by readers even during
updates, tree traversal is not, mainly because of tree-rotations
that may change the root node and/or its linkages.  TreeBins
include a simple read-write lock mechanism parasitic on the
main bin-synchronization strategy: Structural adjustments
associated with an insertion or removal are already bin-locked
(and so cannot conflict with other writers) but must wait for
ongoing readers to finish. Since there can be only one such
waiter, we use a simple scheme using a single \"waiter\" field to
block writers.  However, readers need never block.  If the root
lock is held, they proceed along the slow traversal path (via
next-pointers) until the lock becomes available or the list is
exhausted, whichever comes first. These cases are not fast, but
maximize aggregate expected throughput.

Maintaining API and serialization compatibility with previous
versions of this class introduces several oddities. Mainly: We
leave untouched but unused constructor arguments refering to
concurrencyLevel. We accept a loadFactor constructor argument,
but apply it only to initial table capacity (which is the only
time that we can guarantee to honor it.) We also declare an
unused \"Segment\" class that is instantiated in minimal form
only when serializing.

Also, solely for compatibility with previous versions of this
class, it extends AbstractMap, even though all of its methods
are overridden, so it is just useless baggage.

This file is organized to make things a little easier to follow
while reading than they might otherwise: First the main static
declarations and utilities, then fields, then main public
methods (with a few factorings of multiple public methods into
internal ones), then sizing methods, trees, traversers, and
bulk operations.

 ---------------- Constants -------------- 

The largest possible table capacity.  This value must be
exactly 1<<30 to stay within Java array allocation and indexing
bounds for power of two table sizes, and is further required
because the top two bits of 32bit hash fields are used for
control purposes.

"
      end

      attribute 2105346 "DEFAULT_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The default initial table capacity.  Must be a power of 2
(i.e., at least 1) and at most MAXIMUM_CAPACITY.

"
      end

      attribute 2105474 "MAX_ARRAY_SIZE"
	class_attribute const_attribute package explicit_type "int"
	init_value " Integer.MAX_VALUE - 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The largest possible (non-power of two) array size.
Needed by toArray and related methods.

"
      end

      attribute 2105602 "DEFAULT_CONCURRENCY_LEVEL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The default concurrency level for this table. Unused but
defined for compatibility with previous versions of this class.

"
      end

      attribute 2105730 "LOAD_FACTOR"
	class_attribute const_attribute private explicit_type "float"
	init_value " 0.75f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The load factor for this table. Overrides of this value in
constructors affect only the initial table capacity.  The
actual floating point value isn't normally used -- it is
simpler to use expressions such as {@code n - (n >>> 2)} for
the associated resizing threshold.

"
      end

      attribute 2105858 "TREEIFY_THRESHOLD"
	class_attribute const_attribute package explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bin count threshold for using a tree rather than list for a
bin.  Bins are converted to trees when adding an element to a
bin with at least this many nodes. The value must be greater
than 2, and should be at least 8 to mesh with assumptions in
tree removal about conversion back to plain bins upon
shrinkage.

"
      end

      attribute 2105986 "UNTREEIFY_THRESHOLD"
	class_attribute const_attribute package explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bin count threshold for untreeifying a (split) bin during a
resize operation. Should be less than TREEIFY_THRESHOLD, and at
most 6 to mesh with shrinkage detection under removal.

"
      end

      attribute 2106114 "MIN_TREEIFY_CAPACITY"
	class_attribute const_attribute package explicit_type "int"
	init_value " 64"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The smallest table capacity for which bins may be treeified.
(Otherwise the table is resized if too many nodes in a bin.)
The value should be at least 4 * TREEIFY_THRESHOLD to avoid
conflicts between resizing and treeification thresholds.

"
      end

      attribute 2106242 "MIN_TRANSFER_STRIDE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Minimum number of rebinnings per transfer step. Ranges are
subdivided to allow multiple resizer threads.  This value
serves as a lower bound to avoid resizers encountering
excessive memory contention.  The value should be at least
DEFAULT_CAPACITY.

"
      end

      attribute 2106370 "RESIZE_STAMP_BITS"
	class_attribute private explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of bits used for generation stamp in sizeCtl.
Must be at least 6 for 32bit arrays.

"
      end

      attribute 2106498 "MAX_RESIZERS"
	class_attribute const_attribute private explicit_type "int"
	init_value " (1 << (32 - RESIZE_STAMP_BITS)) - 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum number of threads that can help resize.
Must fit in 32 - RESIZE_STAMP_BITS bits.

"
      end

      attribute 2106626 "RESIZE_STAMP_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 32 - RESIZE_STAMP_BITS"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit shift for recording size stamp in sizeCtl.

"
      end

      attribute 2106754 "MOVED"
	class_attribute const_attribute package explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Encodings for Node hash fields. See above for explanation.

 hash for forwarding nodes"
      end

      attribute 2106882 "TREEBIN"
	class_attribute const_attribute package explicit_type "int"
	init_value " -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " hash for roots of trees"
      end

      attribute 2107010 "RESERVED"
	class_attribute const_attribute package explicit_type "int"
	init_value " -3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " hash for transient reservations"
      end

      attribute 2107138 "HASH_BITS"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x7fffffff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " usable bits of normal node hash"
      end

      attribute 2107266 "NCPU"
	class_attribute const_attribute package explicit_type "int"
	init_value " Runtime.getRuntime().availableProcessors()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of CPUS, to place bounds on some sizings 
"
      end

      classrelation 3573762 // serialPersistentFields (<unidirectional association>)
	relation 3573762 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"segments\", Segment[].class),
        new ObjectStreamField(\"segmentMask\", Integer.TYPE),
        new ObjectStreamField(\"segmentShift\", Integer.TYPE)
    }" class_relation const_relation private
	    comment " For serialization compatibility. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3573762 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      class 1105154 "Node"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 130178 // Map
	  rank 0 explicit_value ""
	actual class class_ref 130178 // Map
	  rank 1 explicit_value ""
	actual class class_ref 192386 // Entry
	  rank 0 explicit_value ""
	actual class class_ref 192386 // Entry
	  rank 1 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3573890 // <realization>
	  relation 3573890 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3573890 // <realization>
	    b parent class_ref 192386 // Entry
	end

	attribute 2107394 "hash"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2107522 "key"
	  const_attribute package explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2107650 "val"
	  volatile package explicit_type "V"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3574018 // next (<unidirectional association>)
	  relation 3574018 --->
	    a role_name "next" volatile package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3574018 // next (<unidirectional association>)
	    b parent class_ref 1105154 // Node
	end

	operation 9034370 "Node"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param in name "hash" explicit_type "int"
	    param inout name "key" explicit_type "K"
	    param inout name "val" explicit_type "V"
	    param inout name "next" type class_ref 1105154 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<K,V> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9034498 "getKey"
	  cpp_inline public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9034626 "getValue"
	  cpp_inline public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9034754 "hashCode"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9034882 "toString"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9035010 "setValue"
	  cpp_inline public explicit_return_type "V"
	  nparams 1
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9035138 "equals"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9035266 "find"
	  cpp_inline package return_type class_ref 1105154 // Node
	  nparams 2
	    param in name "h" explicit_type "int"
	    param inout name "k" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Virtualized support for map.get(); overridden in subclasses.
"
	end
      end

      operation 9035394 "spread"
	class_operation cpp_inline package explicit_return_type "int"
	nparams 1
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Static utilities -------------- 

Spreads (XORs) higher bits of hash to lower and also forces top
bit to 0. Because the table uses power-of-two masking, sets of
hashes that vary only in bits above the current mask will
always collide. (Among known examples are sets of Float keys
holding consecutive whole numbers in small tables.)  So we
apply a transform that spreads the impact of higher bits
downward. There is a tradeoff between speed, utility, and
quality of bit-spreading. Because many common sets of hashes
are already reasonably distributed (so don't benefit from
spreading), and because we use trees to handle large sets of
collisions in bins, we just XOR some shifted bits in the
cheapest possible way to reduce systematic lossage, as well as
to incorporate impact of the highest bits that would otherwise
never be used in index calculations because of table bounds.
"
      end

      operation 9035522 "tableSizeFor"
	class_operation cpp_inline private explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a power of two table size for the given desired capacity.
See Hackers Delight, sec 3.2
"
      end

      operation 9035650 "comparableClassFor"
	class_operation cpp_inline package return_type class_ref 130818 // Class
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns x's Class if it is of the form \"class C implements
Comparable<C>\", else null.
"
      end

      operation 9035778 "compareComparables"
	class_operation cpp_inline package explicit_return_type "int"
	nparams 3
	  param inout name "kc" type class_ref 130818 // Class
	  param inout name "k" type class_ref 129538 // Object
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings({\"rawtypes\",\"unchecked\"})
"
	
	
	
	comment "Returns k.compareTo(x) if x matches kc (k's screened comparable
class), else 0.
"
      end

      operation 9035906 "tabAt"
	class_operation cpp_inline package return_type class_ref 1105154 // Node
	nparams 2
	  param inout name "tab" type class_ref 1105154 // Node
	multiplicity "[]"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " ---------------- Table element access -------------- 

Volatile access methods are used for table elements as well as
elements of in-progress next table while resizing.  All uses of
the tab arguments must be null checked by callers.  All callers
also paranoically precheck that tab's length is not zero (or an
equivalent check), thus ensuring that any index argument taking
the form of a hash value anded with (length - 1) is a valid
index.  Note that, to be correct wrt arbitrary concurrency
errors by users, these checks must operate on local variables,
which accounts for some odd-looking inline assignments below.
Note that calls to setTabAt always occur within locked regions,
and so in principle require only release ordering, not
full volatile semantics, but are currently coded as volatile
writes to be conservative.
"
      end

      operation 9036034 "casTabAt"
	class_operation cpp_inline package explicit_return_type "boolean"
	nparams 4
	  param inout name "tab" type class_ref 1105154 // Node
	multiplicity "[]"
	  param in name "i" explicit_type "int"
	  param inout name "c" type class_ref 1105154 // Node
	  param inout name "v" type class_ref 1105154 // Node
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type} ${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}, ${t2}<K,V> ${p2}, ${t3}<K,V> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9036162 "setTabAt"
	class_operation cpp_inline package explicit_return_type "void"
	nparams 3
	  param inout name "tab" type class_ref 1105154 // Node
	multiplicity "[]"
	  param in name "i" explicit_type "int"
	  param inout name "v" type class_ref 1105154 // Node
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type} ${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}, ${t2}<K,V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3574146 // table (<unidirectional association>)
	relation 3574146 --->
	  a role_name "table" multiplicity "[]" volatile package
	    comment " ---------------- Fields -------------- 

The array of bins. Lazily initialized upon first insertion.
Size is always a power of two. Accessed directly by iterators.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V>${multiplicity} ${name}${value};
"
	    classrelation_ref 3574146 // table (<unidirectional association>)
	  b parent class_ref 1105154 // Node
      end

      classrelation 3574274 // nextTable (<unidirectional association>)
	relation 3574274 --->
	  a role_name "nextTable" multiplicity "[]" volatile private
	    comment "
The next table to use; non-null only while resizing.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V>${multiplicity} ${name}${value};
"
	    classrelation_ref 3574274 // nextTable (<unidirectional association>)
	  b parent class_ref 1105154 // Node
      end

      attribute 2107778 "baseCount"
	volatile private explicit_type "long"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Base counter value, used mainly when there is no contention,
but also as a fallback during table initialization
races. Updated via CAS.

"
      end

      attribute 2107906 "sizeCtl"
	volatile private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Table initialization and resizing control.  When negative, the
table is being initialized or resized: -1 for initialization,
else -(1 + the number of active resizing threads).  Otherwise,
when table is null, holds the initial table size to use upon
creation, or 0 for default. After initialization, holds the
next element count value upon which to resize the table.

"
      end

      attribute 2108034 "transferIndex"
	volatile private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The next table index (plus one) to split while resizing.

"
      end

      attribute 2108162 "cellsBusy"
	volatile private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Spinlock (locked via CAS) used when resizing and/or creating CounterCells.

"
      end

      class 1105282 "CounterCell"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@sun.misc.Contended
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2111362 "value"
	  volatile package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9059842 "CounterCell"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param in name "x" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3574402 // counterCells (<unidirectional association>)
	relation 3574402 --->
	  a role_name "counterCells" multiplicity "[]" volatile private
	    comment "
Table of counter cells. When non-null, size is a power of 2.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3574402 // counterCells (<unidirectional association>)
	  b parent class_ref 1105282 // CounterCell
      end

      class 1105410 "KeySetView"
	visibility public 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 6
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1108994 // CollectionView
	  rank 0 explicit_value ""
	actual class class_ref 1108994 // CollectionView
	  rank 1 explicit_value ""
	actual class class_ref 1108994 // CollectionView
	  rank 2 explicit_value ""
	actual class class_ref 192258 // Set
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3583362 // <realization>
	  relation 3583362 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3583362 // <realization>
	    b parent class_ref 1108994 // CollectionView
	end

	classrelation 3583490 // <realization>
	  relation 3583490 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3583490 // <realization>
	    b parent class_ref 192258 // Set
	end

	classrelation 3583618 // <realization>
	  relation 3583618 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3583618 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 2113922 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 7249069246763182397L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2114050 "value"
	  const_attribute private explicit_type "V"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9073666 "KeySetView"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "map" type class_ref 319362 // ConcurrentHashMap
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9073794 "getMappedValue"
	  cpp_inline public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the default mapped value for additions,
or {@code null} if additions are not supported.

@return the default mapped value for additions, or {@code null}
if not supported
"
	end

	operation 9073922 "contains"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@throws NullPointerException if the specified key is null
"
	end

	operation 9074050 "remove"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes the key from this map view, by removing the key (and its
corresponding value) from the backing map.  This method does
nothing if the key is not in the map.

@param  o the key to be removed from the backing map
@return {@code true} if the backing map contained the specified key
@throws NullPointerException if the specified key is null
"
	end

	operation 9074178 "iterator"
	  cpp_inline public return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return an iterator over the keys of the backing map
"
	end

	operation 9074306 "add"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "e" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds the specified key to this set view by mapping the key to
the default mapped value in the backing map, if defined.

@param e key to be added
@return {@code true} if this set changed as a result of the call
@throws NullPointerException if the specified key is null
@throws UnsupportedOperationException if no default mapped value
for additions was provided
"
	end

	operation 9074434 "addAll"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "c" type class_ref 184194 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds all of the elements in the specified collection to this set,
as if by calling {@link #add} on each one.

@param c the elements to be inserted into this set
@return {@code true} if this set changed as a result of the call
@throws NullPointerException if the collection or any of its
elements are {@code null}
@throws UnsupportedOperationException if no default mapped value
for additions was provided
"
	end

	operation 9074562 "hashCode"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9074690 "equals"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9074818 "spliterator"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9074946 "forEach"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3574530 // keySet (<unidirectional association>)
	relation 3574530 --->
	  a role_name "keySet" private
	    comment " views
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	    classrelation_ref 3574530 // keySet (<unidirectional association>)
	  b parent class_ref 1105410 // KeySetView
      end

      class 1105538 "ValuesView"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 6
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1108994 // CollectionView
	  rank 0 explicit_value ""
	actual class class_ref 1108994 // CollectionView
	  rank 1 explicit_value ""
	actual class class_ref 1108994 // CollectionView
	  rank 2 explicit_value ""
	actual class class_ref 184194 // Collection
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3583746 // <realization>
	  relation 3583746 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3583746 // <realization>
	    b parent class_ref 1108994 // CollectionView
	end

	classrelation 3583874 // <realization>
	  relation 3583874 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3583874 // <realization>
	    b parent class_ref 184194 // Collection
	end

	classrelation 3584002 // <realization>
	  relation 3584002 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3584002 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 2114178 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 2249069246763182397L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9075074 "ValuesView"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "map" type class_ref 319362 // ConcurrentHashMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9075202 "contains"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9075330 "remove"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9075458 "iterator"
	  cpp_inline public return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9075586 "add"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "e" explicit_type "V"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9075714 "addAll"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "c" type class_ref 184194 // Collection
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9075842 "spliterator"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9075970 "forEach"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3574658 // values (<unidirectional association>)
	relation 3574658 --->
	  a role_name "values" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	    classrelation_ref 3574658 // values (<unidirectional association>)
	  b parent class_ref 1105538 // ValuesView
      end

      class 1105666 "EntrySetView"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 6
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1108994 // CollectionView
	  rank 0 explicit_value ""
	actual class class_ref 1108994 // CollectionView
	  rank 1 explicit_value ""
	actual class class_ref 1108994 // CollectionView
	  rank 2 explicit_value ""
	actual class class_ref 192258 // Set
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3584130 // <realization>
	  relation 3584130 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3584130 // <realization>
	    b parent class_ref 1108994 // CollectionView
	end

	classrelation 3584258 // <realization>
	  relation 3584258 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3584258 // <realization>
	    b parent class_ref 192258 // Set
	end

	classrelation 3584386 // <realization>
	  relation 3584386 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3584386 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 2114306 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 2249069246763182397L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9076098 "EntrySetView"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "map" type class_ref 319362 // ConcurrentHashMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9076226 "contains"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9076354 "remove"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9076482 "iterator"
	  cpp_inline public return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return an iterator over the entries of the backing map
"
	end

	operation 9076610 "add"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "e" type class_ref 192386 // Entry
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9076738 "addAll"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "c" type class_ref 184194 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Entry<K,V>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9076866 "hashCode"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9076994 "equals"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9077122 "spliterator"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9077250 "forEach"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Map.Entry<K,V>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3574786 // entrySet (<unidirectional association>)
	relation 3574786 --->
	  a role_name "entrySet" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	    classrelation_ref 3574786 // entrySet (<unidirectional association>)
	  b parent class_ref 1105666 // EntrySetView
      end

      operation 9036290 "ConcurrentHashMap"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Public operations -------------- 

Creates a new, empty map with the default initial table size (16).
"
      end

      operation 9036418 "ConcurrentHashMap"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new, empty map with an initial table size
accommodating the specified number of elements without the need
to dynamically resize.

@param initialCapacity The implementation performs internal
sizing to accommodate this many elements.
@throws IllegalArgumentException if the initial capacity of
elements is negative
"
      end

      operation 9036546 "ConcurrentHashMap"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new map with the same mappings as the given map.

@param m the map
"
      end

      operation 9036674 "ConcurrentHashMap"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new, empty map with an initial table size based on
the given number of elements ({@code initialCapacity}) and
initial table density ({@code loadFactor}).

@param initialCapacity the initial capacity. The implementation
performs internal sizing to accommodate this many elements,
given the specified load factor.
@param loadFactor the load factor (table density) for
establishing the initial table size
@throws IllegalArgumentException if the initial capacity of
elements is negative or the load factor is nonpositive

@since 1.6
"
      end

      operation 9036802 "ConcurrentHashMap"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	  param in name "concurrencyLevel" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new, empty map with an initial table size based on
the given number of elements ({@code initialCapacity}), table
density ({@code loadFactor}), and number of concurrently
updating threads ({@code concurrencyLevel}).

@param initialCapacity the initial capacity. The implementation
performs internal sizing to accommodate this many elements,
given the specified load factor.
@param loadFactor the load factor (table density) for
establishing the initial table size
@param concurrencyLevel the estimated number of concurrently
updating threads. The implementation may use this value as
a sizing hint.
@throws IllegalArgumentException if the initial capacity is
negative or the load factor or concurrencyLevel are
nonpositive
"
      end

      operation 9036930 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Original (since JDK1.2) Map methods

{@inheritDoc}
"
      end

      operation 9037058 "isEmpty"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 9037186 "get"
	cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which the specified key is mapped,
or {@code null} if this map contains no mapping for the key.

<p>More formally, if this map contains a mapping from a key
{@code k} to a value {@code v} such that {@code key.equals(k)},
then this method returns {@code v}; otherwise it returns
{@code null}.  (There can be at most one such mapping.)

@throws NullPointerException if the specified key is null
"
      end

      operation 9037314 "containsKey"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified object is a key in this table.

@param  key possible key
@return {@code true} if and only if the specified object
        is a key in this table, as determined by the
        {@code equals} method; {@code false} otherwise
@throws NullPointerException if the specified key is null
"
      end

      operation 9037442 "containsValue"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this map maps one or more keys to the
specified value. Note: This method may require a full traversal
of the map, and is much slower than method {@code containsKey}.

@param value value whose presence in this map is to be tested
@return {@code true} if this map maps one or more keys to the
        specified value
@throws NullPointerException if the specified value is null
"
      end

      operation 9037570 "put"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps the specified key to the specified value in this table.
Neither the key nor the value can be null.

<p>The value can be retrieved by calling the {@code get} method
with a key that is equal to the original key.

@param key key with which the specified value is to be associated
@param value value to be associated with the specified key
@return the previous value associated with {@code key}, or
        {@code null} if there was no mapping for {@code key}
@throws NullPointerException if the specified key or value is null
"
      end

      operation 9037698 "putVal"
	cpp_inline package explicit_return_type "V"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	  param inout name "onlyIfAbsent" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Implementation for put and putIfAbsent "
      end

      operation 9037826 "putAll"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "m" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies all of the mappings from the specified map to this one.
These mappings replace any mappings that this map had for any of the
keys currently in the specified map.

@param m mappings to be stored in this map
"
      end

      operation 9037954 "remove"
	cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the key (and its corresponding value) from this map.
This method does nothing if the key is not in the map.

@param  key the key that needs to be removed
@return the previous value associated with {@code key}, or
        {@code null} if there was no mapping for {@code key}
@throws NullPointerException if the specified key is null
"
      end

      operation 9038082 "replaceNode"
	cpp_inline package explicit_return_type "V"
	nparams 3
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" explicit_type "V"
	  param inout name "cv" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implementation for the four public remove/replace methods:
Replaces node value with v, conditional upon match of cv if
non-null.  If resulting value is null, delete.
"
      end

      operation 9038210 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the mappings from this map.
"
      end

      operation 9038338 "keySet"
	cpp_inline public return_type class_ref 1105410 // KeySetView
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Set} view of the keys contained in this map.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa. The set supports element
removal, which removes the corresponding mapping from this map,
via the {@code Iterator.remove}, {@code Set.remove},
{@code removeAll}, {@code retainAll}, and {@code clear}
operations.  It does not support the {@code add} or
{@code addAll} operations.

<p>The view's iterators and spliterators are
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>The view's {@code spliterator} reports {@link Spliterator#CONCURRENT},
{@link Spliterator#DISTINCT}, and {@link Spliterator#NONNULL}.

@return the set view
"
      end

      operation 9038466 "values"
	cpp_inline public return_type class_ref 184194 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Collection} view of the values contained in this map.
The collection is backed by the map, so changes to the map are
reflected in the collection, and vice-versa.  The collection
supports element removal, which removes the corresponding
mapping from this map, via the {@code Iterator.remove},
{@code Collection.remove}, {@code removeAll},
{@code retainAll}, and {@code clear} operations.  It does not
support the {@code add} or {@code addAll} operations.

<p>The view's iterators and spliterators are
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>The view's {@code spliterator} reports {@link Spliterator#CONCURRENT}
and {@link Spliterator#NONNULL}.

@return the collection view
"
      end

      operation 9038594 "entrySet"
	cpp_inline public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Set} view of the mappings contained in this map.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  The set supports element
removal, which removes the corresponding mapping from the map,
via the {@code Iterator.remove}, {@code Set.remove},
{@code removeAll}, {@code retainAll}, and {@code clear}
operations.

<p>The view's iterators and spliterators are
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>The view's {@code spliterator} reports {@link Spliterator#CONCURRENT},
{@link Spliterator#DISTINCT}, and {@link Spliterator#NONNULL}.

@return the set view
"
      end

      operation 9038722 "hashCode"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this {@link Map}, i.e.,
the sum of, for each key-value pair in the map,
{@code key.hashCode() ^ value.hashCode()}.

@return the hash code value for this map
"
      end

      operation 9038850 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this map.  The string
representation consists of a list of key-value mappings (in no
particular order) enclosed in braces (\"{@code {}}\").  Adjacent
mappings are separated by the characters {@code \", \"} (comma
and space).  Each key-value mapping is rendered as the key
followed by an equals sign (\"{@code =}\") followed by the
associated value.

@return a string representation of this map
"
      end

      operation 9038978 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified object with this map for equality.
Returns {@code true} if the given object is a map with the same
mappings as this map.  This operation may return misleading
results if either map is concurrently modified during execution
of this method.

@param o object to be compared for equality with this map
@return {@code true} if the specified object is equal to this map
"
      end

      class 1105794 "Segment"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3577730 // <generalisation>
	  relation 3577730 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3577730 // <generalisation>
	    b parent class_ref 968706 // ReentrantLock
	end

	classrelation 3577858 // <realization>
	  relation 3577858 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3577858 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 2111106 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 2249069246763182397L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2111234 "loadFactor"
	  const_attribute package explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9055874 "Segment"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param in name "lf" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9056002 "writeObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves the state of the {@code ConcurrentHashMap} instance to a
stream (i.e., serializes it).
@param s the stream
@throws java.io.IOException if an I/O error occurs
@serialData
the key (Object) and value (Object)
for each key-value mapping, followed by a null pair.
The key-value mappings are emitted in no particular order.
"
      end

      operation 9056130 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes the instance from a stream (that is, deserializes it).
@param s the stream
@throws ClassNotFoundException if the class of a serialized object
        could not be found
@throws java.io.IOException if an I/O error occurs
"
      end

      operation 9056258 "putIfAbsent"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ConcurrentMap methods

{@inheritDoc}

@return the previous value associated with the specified key,
        or {@code null} if there was no mapping for the key
@throws NullPointerException if the specified key or value is null
"
      end

      operation 9056386 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@throws NullPointerException if the specified key is null
"
      end

      operation 9056514 "replace"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "oldValue" explicit_type "V"
	  param inout name "newValue" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@throws NullPointerException if any of the arguments are null
"
      end

      operation 9056642 "replace"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@return the previous value associated with the specified key,
        or {@code null} if there was no mapping for the key
@throws NullPointerException if the specified key or value is null
"
      end

      operation 9056770 "getOrDefault"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "defaultValue" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Overrides of JDK8+ Map extension method defaults

Returns the value to which the specified key is mapped, or the
given default value if this map contains no mapping for the
key.

@param key the key whose associated value is to be returned
@param defaultValue the value to return if this map contains
no mapping for the given key
@return the mapping for the key, if present; else the default value
@throws NullPointerException if the specified key is null
"
      end

      operation 9056898 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super K, ? super V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9057026 "replaceAll"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "function" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super K, ? super V, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9057154 "computeIfAbsent"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "mappingFunction" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the specified key is not already associated with a value,
attempts to compute its value using the given mapping function
and enters it into this map unless {@code null}.  The entire
method invocation is performed atomically, so the function is
applied at most once per key.  Some attempted update operations
on this map by other threads may be blocked while computation
is in progress, so the computation should be short and simple,
and must not attempt to update any other mappings of this map.

@param key key with which the specified value is to be associated
@param mappingFunction the function to compute a value
@return the current (existing or computed) value associated with
        the specified key, or null if the computed value is null
@throws NullPointerException if the specified key or mappingFunction
        is null
@throws IllegalStateException if the computation detectably
        attempts a recursive update to this map that would
        otherwise never complete
@throws RuntimeException or Error if the mappingFunction does so,
        in which case the mapping is left unestablished
"
      end

      operation 9057282 "computeIfPresent"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? super V, ? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the value for the specified key is present, attempts to
compute a new mapping given the key and its current mapped
value.  The entire method invocation is performed atomically.
Some attempted update operations on this map by other threads
may be blocked while computation is in progress, so the
computation should be short and simple, and must not attempt to
update any other mappings of this map.

@param key key with which a value may be associated
@param remappingFunction the function to compute a value
@return the new value associated with the specified key, or null if none
@throws NullPointerException if the specified key or remappingFunction
        is null
@throws IllegalStateException if the computation detectably
        attempts a recursive update to this map that would
        otherwise never complete
@throws RuntimeException or Error if the remappingFunction does so,
        in which case the mapping is unchanged
"
      end

      operation 9057410 "compute"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? super V, ? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to compute a mapping for the specified key and its
current mapped value (or {@code null} if there is no current
mapping). The entire method invocation is performed atomically.
Some attempted update operations on this map by other threads
may be blocked while computation is in progress, so the
computation should be short and simple, and must not attempt to
update any other mappings of this Map.

@param key key with which the specified value is to be associated
@param remappingFunction the function to compute a value
@return the new value associated with the specified key, or null if none
@throws NullPointerException if the specified key or remappingFunction
        is null
@throws IllegalStateException if the computation detectably
        attempts a recursive update to this map that would
        otherwise never complete
@throws RuntimeException or Error if the remappingFunction does so,
        in which case the mapping is unchanged
"
      end

      operation 9057538 "merge"
	cpp_inline public explicit_return_type "V"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? super V, ? super V, ? extends V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the specified key is not already associated with a
(non-null) value, associates it with the given value.
Otherwise, replaces the value with the results of the given
remapping function, or removes if {@code null}. The entire
method invocation is performed atomically.  Some attempted
update operations on this map by other threads may be blocked
while computation is in progress, so the computation should be
short and simple, and must not attempt to update any other
mappings of this Map.

@param key key with which the specified value is to be associated
@param value the value to use if absent
@param remappingFunction the function to recompute a value if present
@return the new value associated with the specified key, or null if none
@throws NullPointerException if the specified key or the
        remappingFunction is null
@throws RuntimeException or Error if the remappingFunction does so,
        in which case the mapping is unchanged
"
      end

      operation 9057666 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Hashtable legacy methods

Legacy method testing if some key maps into the specified value
in this table.  This method is identical in functionality to
{@link #containsValue(Object)}, and exists solely to ensure
full compatibility with class {@link java.util.Hashtable},
which supported this method prior to introduction of the
Java Collections framework.

@param  value a value to search for
@return {@code true} if and only if some key maps to the
        {@code value} argument in this table as
        determined by the {@code equals} method;
        {@code false} otherwise
@throws NullPointerException if the specified value is null
"
      end

      operation 9057794 "keys"
	cpp_inline public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the keys in this table.

@return an enumeration of the keys in this table
@see #keySet()
"
      end

      operation 9057922 "elements"
	cpp_inline public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the values in this table.

@return an enumeration of the values in this table
@see #values()
"
      end

      operation 9058050 "mappingCount"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ConcurrentHashMap-only methods

Returns the number of mappings. This method should be used
instead of {@link #size} because a ConcurrentHashMap may
contain more mappings than can be represented as an int. The
value returned is an estimate; the actual count may differ if
there are concurrent insertions or removals.

@return the number of mappings
@since 1.8
"
      end

      operation 9058178 "newKeySet"
	class_operation cpp_inline public return_type class_ref 1105410 // KeySetView
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K> ${type}<K,Boolean> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@link Set} backed by a ConcurrentHashMap
from the given type to {@code Boolean.TRUE}.

@param <K> the element type of the returned set
@return the new set
@since 1.8
"
      end

      operation 9058306 "newKeySet"
	class_operation cpp_inline public return_type class_ref 1105410 // KeySetView
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K> ${type}<K,Boolean> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@link Set} backed by a ConcurrentHashMap
from the given type to {@code Boolean.TRUE}.

@param initialCapacity The implementation performs internal
sizing to accommodate this many elements.
@param <K> the element type of the returned set
@return the new set
@throws IllegalArgumentException if the initial capacity of
elements is negative
@since 1.8
"
      end

      operation 9058434 "keySet"
	cpp_inline public return_type class_ref 1105410 // KeySetView
	nparams 1
	  param inout name "mappedValue" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Set} view of the keys in this map, using the
given common mapped value for any additions (i.e., {@link
Collection#add} and {@link Collection#addAll(Collection)}).
This is of course only appropriate if it is acceptable to use
the same value for all additions from this view.

@param mappedValue the mapped value to use for any additions
@return the set view
@throws NullPointerException if the mappedValue is null
"
      end

      class 1106818 "ForwardingNode"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1105154 // Node
	  rank 0 explicit_value ""
	actual class class_ref 1105154 // Node
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3577986 // <realization>
	  relation 3577986 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3577986 // <realization>
	    b parent class_ref 1105154 // Node
	end

	classrelation 3578114 // nextTable (<unidirectional association>)
	  relation 3578114 --->
	    a role_name "nextTable" multiplicity "[]" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V>${multiplicity} ${name}${value};
"
	      classrelation_ref 3578114 // nextTable (<unidirectional association>)
	    b parent class_ref 1105154 // Node
	end

	operation 9058562 "ForwardingNode"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "tab" type class_ref 1105154 // Node
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V>[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9058690 "find"
	  cpp_inline package return_type class_ref 1105154 // Node
	  nparams 2
	    param in name "h" explicit_type "int"
	    param inout name "k" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1106946 "ReservationNode"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1105154 // Node
	  rank 0 explicit_value ""
	actual class class_ref 1105154 // Node
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3578242 // <realization>
	  relation 3578242 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3578242 // <realization>
	    b parent class_ref 1105154 // Node
	end

	operation 9058818 "ReservationNode"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9058946 "find"
	  cpp_inline package return_type class_ref 1105154 // Node
	  nparams 2
	    param in name "h" explicit_type "int"
	    param inout name "k" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9059074 "resizeStamp"
	class_operation cpp_inline package explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Table Initialization and Resizing -------------- 

Returns the stamp bits for resizing a table of size n.
Must be negative when shifted left by RESIZE_STAMP_SHIFT.
"
      end

      operation 9059202 "initTable"
	cpp_inline private return_type class_ref 1105154 // Node
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes table, using the size recorded in sizeCtl.
"
      end

      operation 9059330 "addCount"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param in name "x" explicit_type "long"
	  param in name "check" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds to count, and if table is too small and not already
resizing, initiates transfer. If already resizing, helps
perform transfer if work is available.  Rechecks occupancy
after a transfer to see if another resize is already needed
because resizings are lagging additions.

@param x the count to add
@param check if <0, don't check resize, if <= 1 only check if uncontended
"
      end

      operation 9059458 "helpTransfer"
	cpp_inline package return_type class_ref 1105154 // Node
	nparams 2
	  param inout name "tab" type class_ref 1105154 // Node
	multiplicity "[]"
	  param inout name "f" type class_ref 1105154 // Node
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V>[] ${name}${(}${t0}<K,V>[] ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Helps transfer if a resize is in progress.
"
      end

      operation 9059586 "tryPresize"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to presize table to accommodate the given number of elements.

@param size number of elements (doesn't need to be perfectly accurate)
"
      end

      operation 9059714 "transfer"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "tab" type class_ref 1105154 // Node
	multiplicity "[]"
	  param inout name "nextTab" type class_ref 1105154 // Node
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V>[] ${p0}, ${t1}<K,V>[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves and/or copies the nodes in each bin to new table. See
above for explanation.
"
      end

      operation 9059970 "sumCount"
	cpp_inline package explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9060098 "fullAddCount"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param in name "x" explicit_type "long"
	  param inout name "wasUncontended" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See LongAdder version for explanation"
      end

      operation 9060226 "treeifyBin"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "tab" type class_ref 1105154 // Node
	multiplicity "[]"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Conversion from/to TreeBins -------------- 

Replaces all linked nodes in bin at given index unless table is
too small, in which case resizes instead.
"
      end

      operation 9060354 "untreeify"
	class_operation cpp_inline package return_type class_ref 1105154 // Node
	nparams 1
	  param inout name "b" type class_ref 1105154 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list on non-TreeNodes replacing those in given list.
"
      end

      class 1107074 "TreeNode"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1105154 // Node
	  rank 0 explicit_value ""
	actual class class_ref 1105154 // Node
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3578370 // <realization>
	  relation 3578370 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3578370 // <realization>
	    b parent class_ref 1105154 // Node
	end

	classrelation 3578498 // parent (<unidirectional association>)
	  relation 3578498 --->
	    a role_name "parent" package
	      comment " red-black tree links"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3578498 // parent (<unidirectional association>)
	    b parent class_ref 1107074 // TreeNode
	end

	classrelation 3578626 // left (<unidirectional association>)
	  relation 3578626 --->
	    a role_name "left" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3578626 // left (<unidirectional association>)
	    b parent class_ref 1107074 // TreeNode
	end

	classrelation 3578754 // right (<unidirectional association>)
	  relation 3578754 --->
	    a role_name "right" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3578754 // right (<unidirectional association>)
	    b parent class_ref 1107074 // TreeNode
	end

	classrelation 3578882 // prev (<unidirectional association>)
	  relation 3578882 --->
	    a role_name "prev" package
	      comment " needed to unlink next upon deletion"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3578882 // prev (<unidirectional association>)
	    b parent class_ref 1107074 // TreeNode
	end

	attribute 2111490 "red"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9060482 "TreeNode"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param in name "hash" explicit_type "int"
	    param inout name "key" explicit_type "K"
	    param inout name "val" explicit_type "V"
	    param inout name "next" type class_ref 1105154 // Node
	    param inout name "parent" type class_ref 1107074 // TreeNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<K,V> ${p3}, ${t4}<K,V> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9060610 "find"
	  cpp_inline package return_type class_ref 1105154 // Node
	  nparams 2
	    param in name "h" explicit_type "int"
	    param inout name "k" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9060738 "findTreeNode"
	  cpp_inline package return_type class_ref 1107074 // TreeNode
	  nparams 3
	    param in name "h" explicit_type "int"
	    param inout name "k" type class_ref 129538 // Object
	    param inout name "kc" type class_ref 130818 // Class
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the TreeNode (or null if not found) for the given key
starting at given root.
"
	end
      end

      class 1107202 "TreeBin"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1105154 // Node
	  rank 0 explicit_value ""
	actual class class_ref 1105154 // Node
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3579010 // <realization>
	  relation 3579010 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3579010 // <realization>
	    b parent class_ref 1105154 // Node
	end

	classrelation 3579138 // root (<unidirectional association>)
	  relation 3579138 --->
	    a role_name "root" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3579138 // root (<unidirectional association>)
	    b parent class_ref 1107074 // TreeNode
	end

	classrelation 3579266 // first (<unidirectional association>)
	  relation 3579266 --->
	    a role_name "first" volatile package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3579266 // first (<unidirectional association>)
	    b parent class_ref 1107074 // TreeNode
	end

	classrelation 3579394 // waiter (<unidirectional association>)
	  relation 3579394 --->
	    a role_name "waiter" volatile package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3579394 // waiter (<unidirectional association>)
	    b parent class_ref 128642 // Thread
	end

	attribute 2111618 "lockState"
	  volatile package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2111746 "WRITER"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " values for lockState
 set while holding write lock"
	end

	attribute 2111874 "WAITER"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " set when waiting for write lock"
	end

	attribute 2112002 "READER"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 4"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " increment value for setting read lock"
	end

	operation 9060866 "tieBreakOrder"
	  class_operation cpp_inline package explicit_return_type "int"
	  nparams 2
	    param inout name "a" type class_ref 129538 // Object
	    param inout name "b" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tie-breaking utility for ordering insertions when equal
hashCodes and non-comparable. We don't require a total
order, just a consistent insertion rule to maintain
equivalence across rebalancings. Tie-breaking further than
necessary simplifies testing a bit.
"
	end

	operation 9060994 "TreeBin"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "b" type class_ref 1107074 // TreeNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates bin with initial set of nodes headed by b.
"
	end

	operation 9061122 "lockRoot"
	  cpp_inline private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Acquires write lock for tree restructuring.
"
	end

	operation 9061250 "unlockRoot"
	  cpp_inline private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Releases write lock for tree restructuring.
"
	end

	operation 9061378 "contendedLock"
	  cpp_inline private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Possibly blocks awaiting root lock.
"
	end

	operation 9061506 "find"
	  cpp_inline package return_type class_ref 1105154 // Node
	  nparams 2
	    param in name "h" explicit_type "int"
	    param inout name "k" type class_ref 129538 // Object
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns matching node or null if none. Tries to search
using tree comparisons from root, but continues linear
search when lock not available.
"
	end

	operation 9061634 "putTreeVal"
	  cpp_inline package return_type class_ref 1107074 // TreeNode
	  nparams 3
	    param in name "h" explicit_type "int"
	    param inout name "k" explicit_type "K"
	    param inout name "v" explicit_type "V"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Finds or adds a node.
@return null if added
"
	end

	operation 9061762 "removeTreeNode"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 1
	    param inout name "p" type class_ref 1107074 // TreeNode
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes the given node, that must be present before this
call.  This is messier than typical red-black deletion code
because we cannot swap the contents of an interior node
with a leaf successor that is pinned by \"next\" pointers
that are accessible independently of lock. So instead we
swap the tree linkages.

@return true if now too small, so should be untreeified
"
	end

	operation 9061890 "rotateLeft"
	  class_operation cpp_inline package return_type class_ref 1107074 // TreeNode
	  nparams 2
	    param inout name "root" type class_ref 1107074 // TreeNode
	    param inout name "p" type class_ref 1107074 // TreeNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ------------------------------------------------------------ 
 Red-black tree methods, all adapted from CLR"
	end

	operation 9062018 "rotateRight"
	  class_operation cpp_inline package return_type class_ref 1107074 // TreeNode
	  nparams 2
	    param inout name "root" type class_ref 1107074 // TreeNode
	    param inout name "p" type class_ref 1107074 // TreeNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9062146 "balanceInsertion"
	  class_operation cpp_inline package return_type class_ref 1107074 // TreeNode
	  nparams 2
	    param inout name "root" type class_ref 1107074 // TreeNode
	    param inout name "x" type class_ref 1107074 // TreeNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9062274 "balanceDeletion"
	  class_operation cpp_inline package return_type class_ref 1107074 // TreeNode
	  nparams 2
	    param inout name "root" type class_ref 1107074 // TreeNode
	    param inout name "x" type class_ref 1107074 // TreeNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9062402 "checkInvariants"
	  class_operation cpp_inline package explicit_return_type "boolean"
	  nparams 1
	    param inout name "t" type class_ref 1107074 // TreeNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type} ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Recursive invariant check
"
	end

	attribute 2112130 "U"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2112258 "LOCKSTATE"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 173186 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                U = sun.misc.Unsafe.getUnsafe();
                Class<?> k = TreeBin.class;
                LOCKSTATE = U.objectFieldOffset
                    (k.getDeclaredField(\"lockState\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      class 1107330 "TableStack"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2112386 "length"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2112514 "index"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3579522 // tab (<unidirectional association>)
	  relation 3579522 --->
	    a role_name "tab" multiplicity "[]" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V>${multiplicity} ${name}${value};
"
	      classrelation_ref 3579522 // tab (<unidirectional association>)
	    b parent class_ref 1105154 // Node
	end

	classrelation 3579650 // next (<unidirectional association>)
	  relation 3579650 --->
	    a role_name "next" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3579650 // next (<unidirectional association>)
	    b parent class_ref 1107330 // TableStack
	end
      end

      class 1107458 "Traverser"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3579778 // tab (<unidirectional association>)
	  relation 3579778 --->
	    a role_name "tab" multiplicity "[]" package
	      comment " current table; updated if resized"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V>${multiplicity} ${name}${value};
"
	      classrelation_ref 3579778 // tab (<unidirectional association>)
	    b parent class_ref 1105154 // Node
	end

	classrelation 3579906 // next (<unidirectional association>)
	  relation 3579906 --->
	    a role_name "next" package
	      comment " the next entry to use"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3579906 // next (<unidirectional association>)
	    b parent class_ref 1105154 // Node
	end

	classrelation 3580034 // stack (<unidirectional association>)
	  relation 3580034 --->
	    a role_name "stack" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3580034 // stack (<unidirectional association>)
	    b parent class_ref 1107330 // TableStack
	end

	classrelation 3580162 // spare (<unidirectional association>)
	  relation 3580162 --->
	    a role_name "spare" package
	      comment " to save/restore on ForwardingNodes"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3580162 // spare (<unidirectional association>)
	    b parent class_ref 1107330 // TableStack
	end

	attribute 2112642 "index"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " index of bin to use next"
	end

	attribute 2112770 "baseIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " current index of initial table"
	end

	attribute 2112898 "baseLimit"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " index bound for initial table"
	end

	attribute 2113026 "baseSize"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " initial table size"
	end

	operation 9062530 "Traverser"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "tab" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param in name "size" explicit_type "int"
	    param in name "index" explicit_type "int"
	    param in name "limit" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9062658 "advance"
	  cpp_inline package return_type class_ref 1105154 // Node
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Advances if possible, returning next valid node, or null if none.
"
	end

	operation 9062786 "pushState"
	  cpp_inline private explicit_return_type "void"
	  nparams 3
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	    param in name "n" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Saves traversal state upon encountering a forwarding node.
"
	end

	operation 9062914 "recoverState"
	  cpp_inline private explicit_return_type "void"
	  nparams 1
	    param in name "n" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Possibly pops traversal state.

@param n length of current table
"
	end
      end

      class 1107586 "BaseIterator"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1107458 // Traverser
	  rank 0 explicit_value ""
	actual class class_ref 1107458 // Traverser
	  rank 1 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3580290 // <realization>
	  relation 3580290 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3580290 // <realization>
	    b parent class_ref 1107458 // Traverser
	end

	classrelation 3580418 // map (<unidirectional association>)
	  relation 3580418 --->
	    a role_name "map" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3580418 // map (<unidirectional association>)
	    b parent class_ref 319362 // ConcurrentHashMap
	end

	classrelation 3580546 // lastReturned (<unidirectional association>)
	  relation 3580546 --->
	    a role_name "lastReturned" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3580546 // lastReturned (<unidirectional association>)
	    b parent class_ref 1105154 // Node
	end

	operation 9063042 "BaseIterator"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "tab" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param in name "size" explicit_type "int"
	    param in name "index" explicit_type "int"
	    param in name "limit" explicit_type "int"
	    param inout name "map" type class_ref 319362 // ConcurrentHashMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9063170 "hasNext"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9063298 "hasMoreElements"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9063426 "remove"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1107714 "KeyIterator"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 6
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1107586 // BaseIterator
	  rank 0 explicit_value ""
	actual class class_ref 1107586 // BaseIterator
	  rank 1 explicit_value ""
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	actual class class_ref 185986 // Enumeration
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3580674 // <realization>
	  relation 3580674 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3580674 // <realization>
	    b parent class_ref 1107586 // BaseIterator
	end

	classrelation 3580802 // <realization>
	  relation 3580802 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3580802 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	classrelation 3580930 // <realization>
	  relation 3580930 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3580930 // <realization>
	    b parent class_ref 185986 // Enumeration
	end

	operation 9063554 "KeyIterator"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "tab" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param in name "index" explicit_type "int"
	    param in name "size" explicit_type "int"
	    param in name "limit" explicit_type "int"
	    param inout name "map" type class_ref 319362 // ConcurrentHashMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9063682 "next"
	  cpp_inline public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9063810 "nextElement"
	  cpp_inline public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1107842 "ValueIterator"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 6
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1107586 // BaseIterator
	  rank 0 explicit_value ""
	actual class class_ref 1107586 // BaseIterator
	  rank 1 explicit_value ""
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	actual class class_ref 185986 // Enumeration
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3581058 // <realization>
	  relation 3581058 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3581058 // <realization>
	    b parent class_ref 1107586 // BaseIterator
	end

	classrelation 3581186 // <realization>
	  relation 3581186 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3581186 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	classrelation 3581314 // <realization>
	  relation 3581314 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3581314 // <realization>
	    b parent class_ref 185986 // Enumeration
	end

	operation 9063938 "ValueIterator"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "tab" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param in name "index" explicit_type "int"
	    param in name "size" explicit_type "int"
	    param in name "limit" explicit_type "int"
	    param inout name "map" type class_ref 319362 // ConcurrentHashMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9064066 "next"
	  cpp_inline public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9064194 "nextElement"
	  cpp_inline public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1107970 "EntryIterator"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1107586 // BaseIterator
	  rank 0 explicit_value ""
	actual class class_ref 1107586 // BaseIterator
	  rank 1 explicit_value ""
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3581442 // <realization>
	  relation 3581442 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3581442 // <realization>
	    b parent class_ref 1107586 // BaseIterator
	end

	classrelation 3581570 // <realization>
	  relation 3581570 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3581570 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	operation 9064322 "EntryIterator"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "tab" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param in name "index" explicit_type "int"
	    param in name "size" explicit_type "int"
	    param in name "limit" explicit_type "int"
	    param inout name "map" type class_ref 319362 // ConcurrentHashMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9064450 "next"
	  cpp_inline public return_type class_ref 192386 // Entry
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1108098 "MapEntry"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 130178 // Map
	  rank 0 explicit_value ""
	actual class class_ref 130178 // Map
	  rank 1 explicit_value ""
	actual class class_ref 192386 // Entry
	  rank 0 explicit_value ""
	actual class class_ref 192386 // Entry
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3581698 // <realization>
	  relation 3581698 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3581698 // <realization>
	    b parent class_ref 192386 // Entry
	end

	attribute 2113154 "key"
	  const_attribute package explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " non-null"
	end

	attribute 2113282 "val"
	  package explicit_type "V"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " non-null"
	end

	classrelation 3581826 // map (<unidirectional association>)
	  relation 3581826 --->
	    a role_name "map" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3581826 // map (<unidirectional association>)
	    b parent class_ref 319362 // ConcurrentHashMap
	end

	operation 9064578 "MapEntry"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "key" explicit_type "K"
	    param inout name "val" explicit_type "V"
	    param inout name "map" type class_ref 319362 // ConcurrentHashMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<K,V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9064706 "getKey"
	  cpp_inline public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9064834 "getValue"
	  cpp_inline public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9064962 "hashCode"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9065090 "toString"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9065218 "equals"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9065346 "setValue"
	  cpp_inline public explicit_return_type "V"
	  nparams 1
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets our entry's value and writes through to the map. The
value to return is somewhat arbitrary here. Since we do not
necessarily track asynchronous changes, the most recent
\"previous\" value could be different from what we return (or
could even have been removed, in which case the put will
re-establish). We do not and cannot guarantee more.
"
	end
      end

      class 1108226 "KeySpliterator"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1107458 // Traverser
	  rank 0 explicit_value ""
	actual class class_ref 1107458 // Traverser
	  rank 1 explicit_value ""
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3581954 // <realization>
	  relation 3581954 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3581954 // <realization>
	    b parent class_ref 1107458 // Traverser
	end

	classrelation 3582082 // <realization>
	  relation 3582082 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3582082 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	attribute 2113410 "est"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " size estimate"
	end

	operation 9065474 "KeySpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "tab" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param in name "size" explicit_type "int"
	    param in name "index" explicit_type "int"
	    param in name "limit" explicit_type "int"
	    param in name "est" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9065602 "trySplit"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9065730 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9065858 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9065986 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9066114 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1108354 "ValueSpliterator"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1107458 // Traverser
	  rank 0 explicit_value ""
	actual class class_ref 1107458 // Traverser
	  rank 1 explicit_value ""
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3582210 // <realization>
	  relation 3582210 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3582210 // <realization>
	    b parent class_ref 1107458 // Traverser
	end

	classrelation 3582338 // <realization>
	  relation 3582338 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3582338 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	attribute 2113538 "est"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " size estimate"
	end

	operation 9066242 "ValueSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "tab" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param in name "size" explicit_type "int"
	    param in name "index" explicit_type "int"
	    param in name "limit" explicit_type "int"
	    param in name "est" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9066370 "trySplit"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9066498 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9066626 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9066754 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9066882 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1108482 "EntrySpliterator"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1107458 // Traverser
	  rank 0 explicit_value ""
	actual class class_ref 1107458 // Traverser
	  rank 1 explicit_value ""
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3582466 // <realization>
	  relation 3582466 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3582466 // <realization>
	    b parent class_ref 1107458 // Traverser
	end

	classrelation 3582594 // <realization>
	  relation 3582594 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3582594 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	classrelation 3582722 // map (<unidirectional association>)
	  relation 3582722 --->
	    a role_name "map" const_relation package
	      comment " To export MapEntry"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3582722 // map (<unidirectional association>)
	    b parent class_ref 319362 // ConcurrentHashMap
	end

	attribute 2113666 "est"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " size estimate"
	end

	operation 9067010 "EntrySpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 6
	    param inout name "tab" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param in name "size" explicit_type "int"
	    param in name "index" explicit_type "int"
	    param in name "limit" explicit_type "int"
	    param in name "est" explicit_type "long"
	    param inout name "map" type class_ref 319362 // ConcurrentHashMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}<K,V> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9067138 "trySplit"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9067266 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Map.Entry<K,V>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9067394 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Map.Entry<K,V>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9067522 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9067650 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9067778 "batchFor"
	cpp_inline package explicit_return_type "int"
	nparams 1
	  param in name "b" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Parallel bulk operations

Computes initial batch value for bulk tasks. The returned value
is approximately exp2 of the number of times (minus one) to
split task by two before executing leaf action. This value is
faster to compute and more convenient to use as a guide to
splitting than is the depth, since it is used while dividing by
two anyway.
"
      end

      operation 9067906 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "action" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K,? super V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the given action for each (key, value).

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param action the action
@since 1.8
"
      end

      operation 9068034 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 192642 // BiFunction
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? super V, ? extends U> ${p1}, ${t2}<? super U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the given action for each non-null transformation
of each (key, value).

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element, or null if there is no transformation (in
which case the action is not applied)
@param action the action
@param <U> the return type of the transformer
@since 1.8
"
      end

      operation 9068162 "search"
	cpp_inline public explicit_return_type "U"
	nparams 2
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "searchFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? super V, ? extends U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a non-null result from applying the given search
function on each (key, value), or null if none.  Upon
success, further element processing is suppressed and the
results of any other parallel invocations of the search
function are ignored.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param searchFunction a function returning a non-null
result on success, else null
@param <U> the return type of the search function
@return a non-null result from applying the given search
function on each (key, value), or null if none
@since 1.8
"
      end

      operation 9068290 "reduce"
	cpp_inline public explicit_return_type "U"
	nparams 3
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 192642 // BiFunction
	  param inout name "reducer" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? super V, ? extends U> ${p1}, ${t2}<? super U, ? super U, ? extends U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all (key, value) pairs using the given reducer to
combine values, or null if none.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element, or null if there is no transformation (in
which case it is not combined)
@param reducer a commutative associative combining function
@param <U> the return type of the transformer
@return the result of accumulating the given transformation
of all (key, value) pairs
@since 1.8
"
      end

      operation 9068418 "reduceToDouble"
	cpp_inline public explicit_return_type "double"
	nparams 4
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 1108610 // ToDoubleBiFunction
	  param in name "basis" explicit_type "double"
	  param inout name "reducer" type class_ref 1067138 // DoubleBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? super V> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all (key, value) pairs using the given reducer to
combine values, and the given basis as an identity value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element
@param basis the identity (initial default value) for the reduction
@param reducer a commutative associative combining function
@return the result of accumulating the given transformation
of all (key, value) pairs
@since 1.8
"
      end

      operation 9068546 "reduceToLong"
	cpp_inline public explicit_return_type "long"
	nparams 4
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 1108738 // ToLongBiFunction
	  param in name "basis" explicit_type "long"
	  param inout name "reducer" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? super V> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all (key, value) pairs using the given reducer to
combine values, and the given basis as an identity value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element
@param basis the identity (initial default value) for the reduction
@param reducer a commutative associative combining function
@return the result of accumulating the given transformation
of all (key, value) pairs
@since 1.8
"
      end

      operation 9068674 "reduceToInt"
	cpp_inline public explicit_return_type "int"
	nparams 4
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 1108866 // ToIntBiFunction
	  param in name "basis" explicit_type "int"
	  param inout name "reducer" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? super V> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all (key, value) pairs using the given reducer to
combine values, and the given basis as an identity value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element
@param basis the identity (initial default value) for the reduction
@param reducer a commutative associative combining function
@return the result of accumulating the given transformation
of all (key, value) pairs
@since 1.8
"
      end

      operation 9068802 "forEachKey"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the given action for each key.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param action the action
@since 1.8
"
      end

      operation 9068930 "forEachKey"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 192770 // Function
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? extends U> ${p1}, ${t2}<? super U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the given action for each non-null transformation
of each key.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element, or null if there is no transformation (in
which case the action is not applied)
@param action the action
@param <U> the return type of the transformer
@since 1.8
"
      end

      operation 9069058 "searchKeys"
	cpp_inline public explicit_return_type "U"
	nparams 2
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "searchFunction" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? extends U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a non-null result from applying the given search
function on each key, or null if none. Upon success,
further element processing is suppressed and the results of
any other parallel invocations of the search function are
ignored.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param searchFunction a function returning a non-null
result on success, else null
@param <U> the return type of the search function
@return a non-null result from applying the given search
function on each key, or null if none
@since 1.8
"
      end

      operation 9069186 "reduceKeys"
	cpp_inline public explicit_return_type "K"
	nparams 2
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "reducer" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? super K, ? extends K> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating all keys using the given
reducer to combine values, or null if none.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param reducer a commutative associative combining function
@return the result of accumulating all keys using the given
reducer to combine values, or null if none
@since 1.8
"
      end

      operation 9069314 "reduceKeys"
	cpp_inline public explicit_return_type "U"
	nparams 3
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 192770 // Function
	  param inout name "reducer" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? extends U> ${p1}, ${t2}<? super U, ? super U, ? extends U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all keys using the given reducer to combine values, or
null if none.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element, or null if there is no transformation (in
which case it is not combined)
@param reducer a commutative associative combining function
@param <U> the return type of the transformer
@return the result of accumulating the given transformation
of all keys
@since 1.8
"
      end

      operation 9069442 "reduceKeysToDouble"
	cpp_inline public explicit_return_type "double"
	nparams 4
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 194178 // ToDoubleFunction
	  param in name "basis" explicit_type "double"
	  param inout name "reducer" type class_ref 1067138 // DoubleBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all keys using the given reducer to combine values, and
the given basis as an identity value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element
@param basis the identity (initial default value) for the reduction
@param reducer a commutative associative combining function
@return the result of accumulating the given transformation
of all keys
@since 1.8
"
      end

      operation 9069570 "reduceKeysToLong"
	cpp_inline public explicit_return_type "long"
	nparams 4
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 194050 // ToLongFunction
	  param in name "basis" explicit_type "long"
	  param inout name "reducer" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all keys using the given reducer to combine values, and
the given basis as an identity value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element
@param basis the identity (initial default value) for the reduction
@param reducer a commutative associative combining function
@return the result of accumulating the given transformation
of all keys
@since 1.8
"
      end

      operation 9069698 "reduceKeysToInt"
	cpp_inline public explicit_return_type "int"
	nparams 4
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 193922 // ToIntFunction
	  param in name "basis" explicit_type "int"
	  param inout name "reducer" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all keys using the given reducer to combine values, and
the given basis as an identity value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element
@param basis the identity (initial default value) for the reduction
@param reducer a commutative associative combining function
@return the result of accumulating the given transformation
of all keys
@since 1.8
"
      end

      operation 9069826 "forEachValue"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the given action for each value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param action the action
@since 1.8
"
      end

      operation 9069954 "forEachValue"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 192770 // Function
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type} ${name}${(}${t0} ${p0}, ${t1}<? super V, ? extends U> ${p1}, ${t2}<? super U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the given action for each non-null transformation
of each value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element, or null if there is no transformation (in
which case the action is not applied)
@param action the action
@param <U> the return type of the transformer
@since 1.8
"
      end

      operation 9070082 "searchValues"
	cpp_inline public explicit_return_type "U"
	nparams 2
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "searchFunction" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type} ${name}${(}${t0} ${p0}, ${t1}<? super V, ? extends U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a non-null result from applying the given search
function on each value, or null if none.  Upon success,
further element processing is suppressed and the results of
any other parallel invocations of the search function are
ignored.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param searchFunction a function returning a non-null
result on success, else null
@param <U> the return type of the search function
@return a non-null result from applying the given search
function on each value, or null if none
@since 1.8
"
      end

      operation 9070210 "reduceValues"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "reducer" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super V, ? super V, ? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating all values using the
given reducer to combine values, or null if none.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param reducer a commutative associative combining function
@return the result of accumulating all values
@since 1.8
"
      end

      operation 9070338 "reduceValues"
	cpp_inline public explicit_return_type "U"
	nparams 3
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 192770 // Function
	  param inout name "reducer" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type} ${name}${(}${t0} ${p0}, ${t1}<? super V, ? extends U> ${p1}, ${t2}<? super U, ? super U, ? extends U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all values using the given reducer to combine values, or
null if none.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element, or null if there is no transformation (in
which case it is not combined)
@param reducer a commutative associative combining function
@param <U> the return type of the transformer
@return the result of accumulating the given transformation
of all values
@since 1.8
"
      end

      operation 9070466 "reduceValuesToDouble"
	cpp_inline public explicit_return_type "double"
	nparams 4
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 194178 // ToDoubleFunction
	  param in name "basis" explicit_type "double"
	  param inout name "reducer" type class_ref 1067138 // DoubleBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super V> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all values using the given reducer to combine values,
and the given basis as an identity value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element
@param basis the identity (initial default value) for the reduction
@param reducer a commutative associative combining function
@return the result of accumulating the given transformation
of all values
@since 1.8
"
      end

      operation 9070594 "reduceValuesToLong"
	cpp_inline public explicit_return_type "long"
	nparams 4
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 194050 // ToLongFunction
	  param in name "basis" explicit_type "long"
	  param inout name "reducer" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super V> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all values using the given reducer to combine values,
and the given basis as an identity value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element
@param basis the identity (initial default value) for the reduction
@param reducer a commutative associative combining function
@return the result of accumulating the given transformation
of all values
@since 1.8
"
      end

      operation 9070722 "reduceValuesToInt"
	cpp_inline public explicit_return_type "int"
	nparams 4
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 193922 // ToIntFunction
	  param in name "basis" explicit_type "int"
	  param inout name "reducer" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super V> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all values using the given reducer to combine values,
and the given basis as an identity value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element
@param basis the identity (initial default value) for the reduction
@param reducer a commutative associative combining function
@return the result of accumulating the given transformation
of all values
@since 1.8
"
      end

      operation 9070850 "forEachEntry"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super Map.Entry<K,V>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the given action for each entry.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param action the action
@since 1.8
"
      end

      operation 9070978 "forEachEntry"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 192770 // Function
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type} ${name}${(}${t0} ${p0}, ${t1}<Map.Entry<K,V>, ? extends U> ${p1}, ${t2}<? super U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the given action for each non-null transformation
of each entry.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element, or null if there is no transformation (in
which case the action is not applied)
@param action the action
@param <U> the return type of the transformer
@since 1.8
"
      end

      operation 9071106 "searchEntries"
	cpp_inline public explicit_return_type "U"
	nparams 2
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "searchFunction" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type} ${name}${(}${t0} ${p0}, ${t1}<Map.Entry<K,V>, ? extends U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a non-null result from applying the given search
function on each entry, or null if none.  Upon success,
further element processing is suppressed and the results of
any other parallel invocations of the search function are
ignored.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param searchFunction a function returning a non-null
result on success, else null
@param <U> the return type of the search function
@return a non-null result from applying the given search
function on each entry, or null if none
@since 1.8
"
      end

      operation 9071234 "reduceEntries"
	cpp_inline public return_type class_ref 192386 // Entry
	nparams 2
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "reducer" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1}<Map.Entry<K,V>, Map.Entry<K,V>, ? extends Map.Entry<K,V>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating all entries using the
given reducer to combine values, or null if none.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param reducer a commutative associative combining function
@return the result of accumulating all entries
@since 1.8
"
      end

      operation 9071362 "reduceEntries"
	cpp_inline public explicit_return_type "U"
	nparams 3
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 192770 // Function
	  param inout name "reducer" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type} ${name}${(}${t0} ${p0}, ${t1}<Map.Entry<K,V>, ? extends U> ${p1}, ${t2}<? super U, ? super U, ? extends U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all entries using the given reducer to combine values,
or null if none.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element, or null if there is no transformation (in
which case it is not combined)
@param reducer a commutative associative combining function
@param <U> the return type of the transformer
@return the result of accumulating the given transformation
of all entries
@since 1.8
"
      end

      operation 9071490 "reduceEntriesToDouble"
	cpp_inline public explicit_return_type "double"
	nparams 4
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 194178 // ToDoubleFunction
	  param in name "basis" explicit_type "double"
	  param inout name "reducer" type class_ref 1067138 // DoubleBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<Map.Entry<K,V>> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all entries using the given reducer to combine values,
and the given basis as an identity value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element
@param basis the identity (initial default value) for the reduction
@param reducer a commutative associative combining function
@return the result of accumulating the given transformation
of all entries
@since 1.8
"
      end

      operation 9071618 "reduceEntriesToLong"
	cpp_inline public explicit_return_type "long"
	nparams 4
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 194050 // ToLongFunction
	  param in name "basis" explicit_type "long"
	  param inout name "reducer" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<Map.Entry<K,V>> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all entries using the given reducer to combine values,
and the given basis as an identity value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element
@param basis the identity (initial default value) for the reduction
@param reducer a commutative associative combining function
@return the result of accumulating the given transformation
of all entries
@since 1.8
"
      end

      operation 9071746 "reduceEntriesToInt"
	cpp_inline public explicit_return_type "int"
	nparams 4
	  param in name "parallelismThreshold" explicit_type "long"
	  param inout name "transformer" type class_ref 193922 // ToIntFunction
	  param in name "basis" explicit_type "int"
	  param inout name "reducer" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<Map.Entry<K,V>> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of accumulating the given transformation
of all entries using the given reducer to combine values,
and the given basis as an identity value.

@param parallelismThreshold the (estimated) number of elements
needed for this operation to be executed in parallel
@param transformer a function returning the transformation
for an element
@param basis the identity (initial default value) for the reduction
@param reducer a commutative associative combining function
@return the result of accumulating the given transformation
of all entries
@since 1.8
"
      end

      class 1108994 "CollectionView"
	abstract visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 184194 // Collection
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3582850 // <realization>
	  relation 3582850 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3582850 // <realization>
	    b parent class_ref 184194 // Collection
	end

	classrelation 3582978 // <realization>
	  relation 3582978 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3582978 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 2113794 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 7249069246763182397L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3583106 // map (<unidirectional association>)
	  relation 3583106 --->
	    a role_name "map" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3583106 // map (<unidirectional association>)
	    b parent class_ref 319362 // ConcurrentHashMap
	end

	operation 9071874 "CollectionView"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "map" type class_ref 319362 // ConcurrentHashMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9072002 "getMap"
	  cpp_inline public return_type class_ref 319362 // ConcurrentHashMap
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the map backing this view.

@return the map backing this view
"
	end

	operation 9072130 "clear"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes all of the elements from this view, by removing all
the mappings from the map backing this view.
"
	end

	operation 9072258 "size"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9072386 "isEmpty"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9072514 "iterator"
	  abstract cpp_inline public return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " implementations below rely on concrete classes supplying these
 abstract methods

Returns an iterator over the elements in this collection.

<p>The returned iterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

@return an iterator over the elements in this collection
"
	end

	operation 9072642 "contains"
	  abstract cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9072770 "remove"
	  abstract cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3583234 // oomeMsg (<unidirectional association>)
	  relation 3583234 --->
	    a role_name "oomeMsg" init_value " \"Required array size too large\"" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3583234 // oomeMsg (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 9072898 "toArray"
	  cpp_inline public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9073026 "toArray"
	  cpp_inline public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  multiplicity "[]"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9073154 "toString"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a string representation of this collection.
The string representation consists of the string representations
of the collection's elements in the order they are returned by
its iterator, enclosed in square brackets ({@code \"[]\"}).
Adjacent elements are separated by the characters {@code \", \"}
(comma and space).  Elements are converted to strings as by
{@link String#valueOf(Object)}.

@return a string representation of this collection
"
	end

	operation 9073282 "containsAll"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "c" type class_ref 184194 // Collection
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9073410 "removeAll"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "c" type class_ref 184194 // Collection
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9073538 "retainAll"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "c" type class_ref 184194 // Collection
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1109122 "BulkTask"
	abstract visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "R" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1065218 // CountedCompleter
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3584514 // <realization>
	  relation 3584514 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3584514 // <realization>
	    b parent class_ref 1065218 // CountedCompleter
	end

	classrelation 3584642 // tab (<unidirectional association>)
	  relation 3584642 --->
	    a role_name "tab" multiplicity "[]" package
	      comment " same as Traverser"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V>${multiplicity} ${name}${value};
"
	      classrelation_ref 3584642 // tab (<unidirectional association>)
	    b parent class_ref 1105154 // Node
	end

	classrelation 3584770 // next (<unidirectional association>)
	  relation 3584770 --->
	    a role_name "next" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3584770 // next (<unidirectional association>)
	    b parent class_ref 1105154 // Node
	end

	classrelation 3584898 // stack (<unidirectional association>)
	  relation 3584898 --->
	    a role_name "stack" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3584898 // stack (<unidirectional association>)
	    b parent class_ref 1107330 // TableStack
	end

	classrelation 3585026 // spare (<unidirectional association>)
	  relation 3585026 --->
	    a role_name "spare" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3585026 // spare (<unidirectional association>)
	    b parent class_ref 1107330 // TableStack
	end

	attribute 2114434 "index"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2114562 "baseIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2114690 "baseLimit"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2114818 "baseSize"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2114946 "batch"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " split control"
	end

	operation 9077378 "BulkTask"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "par" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9077506 "advance"
	  cpp_inline package return_type class_ref 1105154 // Node
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Same as Traverser version
"
	end

	operation 9077634 "pushState"
	  cpp_inline private explicit_return_type "void"
	  nparams 3
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	    param in name "n" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9077762 "recoverState"
	  cpp_inline private explicit_return_type "void"
	  nparams 1
	    param in name "n" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1109250 "ForEachKeyTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3585154 // <realization>
	  relation 3585154 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3585154 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3585282 // action (<unidirectional association>)
	  relation 3585282 --->
	    a role_name "action" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K> ${name}${value};
"
	      classrelation_ref 3585282 // action (<unidirectional association>)
	    b parent class_ref 163458 // Consumer
	end

	operation 9077890 "ForEachKeyTask"
	  cpp_inline package explicit_return_type ""
	  nparams 6
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<? super K> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9078018 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1109378 "ForEachValueTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3585410 // <realization>
	  relation 3585410 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3585410 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3585538 // action (<unidirectional association>)
	  relation 3585538 --->
	    a role_name "action" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super V> ${name}${value};
"
	      classrelation_ref 3585538 // action (<unidirectional association>)
	    b parent class_ref 163458 // Consumer
	end

	operation 9078146 "ForEachValueTask"
	  cpp_inline package explicit_return_type ""
	  nparams 6
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<? super V> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9078274 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1109506 "ForEachEntryTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3585666 // <realization>
	  relation 3585666 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3585666 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3585794 // action (<unidirectional association>)
	  relation 3585794 --->
	    a role_name "action" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super Entry<K,V>> ${name}${value};
"
	      classrelation_ref 3585794 // action (<unidirectional association>)
	    b parent class_ref 163458 // Consumer
	end

	operation 9078402 "ForEachEntryTask"
	  cpp_inline package explicit_return_type ""
	  nparams 6
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<? super Entry<K,V>> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9078530 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1109634 "ForEachMappingTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3585922 // <realization>
	  relation 3585922 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3585922 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3586050 // action (<unidirectional association>)
	  relation 3586050 --->
	    a role_name "action" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K, ? super V> ${name}${value};
"
	      classrelation_ref 3586050 // action (<unidirectional association>)
	    b parent class_ref 192514 // BiConsumer
	end

	operation 9078658 "ForEachMappingTask"
	  cpp_inline package explicit_return_type ""
	  nparams 6
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "action" type class_ref 192514 // BiConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<? super K,? super V> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9078786 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1109762 "ForEachTransformedKeyTask"
	visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3586178 // <realization>
	  relation 3586178 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3586178 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3586306 // transformer (<unidirectional association>)
	  relation 3586306 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K, ? extends U> ${name}${value};
"
	      classrelation_ref 3586306 // transformer (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	classrelation 3586434 // action (<unidirectional association>)
	  relation 3586434 --->
	    a role_name "action" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super U> ${name}${value};
"
	      classrelation_ref 3586434 // action (<unidirectional association>)
	    b parent class_ref 163458 // Consumer
	end

	operation 9078914 "ForEachTransformedKeyTask"
	  cpp_inline package explicit_return_type ""
	  nparams 7
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "transformer" type class_ref 192770 // Function
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<? super K, ? extends U> ${p5}, ${t6}<? super U> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9079042 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1109890 "ForEachTransformedValueTask"
	visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3586562 // <realization>
	  relation 3586562 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3586562 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3586690 // transformer (<unidirectional association>)
	  relation 3586690 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super V, ? extends U> ${name}${value};
"
	      classrelation_ref 3586690 // transformer (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	classrelation 3586818 // action (<unidirectional association>)
	  relation 3586818 --->
	    a role_name "action" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super U> ${name}${value};
"
	      classrelation_ref 3586818 // action (<unidirectional association>)
	    b parent class_ref 163458 // Consumer
	end

	operation 9079170 "ForEachTransformedValueTask"
	  cpp_inline package explicit_return_type ""
	  nparams 7
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "transformer" type class_ref 192770 // Function
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<? super V, ? extends U> ${p5}, ${t6}<? super U> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9079298 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1110018 "ForEachTransformedEntryTask"
	visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3586946 // <realization>
	  relation 3586946 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3586946 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3587074 // transformer (<unidirectional association>)
	  relation 3587074 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>, ? extends U> ${name}${value};
"
	      classrelation_ref 3587074 // transformer (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	classrelation 3587202 // action (<unidirectional association>)
	  relation 3587202 --->
	    a role_name "action" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super U> ${name}${value};
"
	      classrelation_ref 3587202 // action (<unidirectional association>)
	    b parent class_ref 163458 // Consumer
	end

	operation 9079426 "ForEachTransformedEntryTask"
	  cpp_inline package explicit_return_type ""
	  nparams 7
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "transformer" type class_ref 192770 // Function
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<Map.Entry<K,V>, ? extends U> ${p5}, ${t6}<? super U> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9079554 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1110146 "ForEachTransformedMappingTask"
	visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3587330 // <realization>
	  relation 3587330 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3587330 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3587458 // transformer (<unidirectional association>)
	  relation 3587458 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K, ? super V, ? extends U> ${name}${value};
"
	      classrelation_ref 3587458 // transformer (<unidirectional association>)
	    b parent class_ref 192642 // BiFunction
	end

	classrelation 3587586 // action (<unidirectional association>)
	  relation 3587586 --->
	    a role_name "action" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super U> ${name}${value};
"
	      classrelation_ref 3587586 // action (<unidirectional association>)
	    b parent class_ref 163458 // Consumer
	end

	operation 9079682 "ForEachTransformedMappingTask"
	  cpp_inline package explicit_return_type ""
	  nparams 7
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "transformer" type class_ref 192642 // BiFunction
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<? super K, ? super V, ? extends U> ${p5}, ${t6}<? super U> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9079810 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1110274 "SearchKeysTask"
	visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3587714 // <realization>
	  relation 3587714 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3587714 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3587842 // searchFunction (<unidirectional association>)
	  relation 3587842 --->
	    a role_name "searchFunction" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K, ? extends U> ${name}${value};
"
	      classrelation_ref 3587842 // searchFunction (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	classrelation 3587970 // result (<unidirectional association>)
	  relation 3587970 --->
	    a role_name "result" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<U> ${name}${value};
"
	      classrelation_ref 3587970 // result (<unidirectional association>)
	    b parent class_ref 1021954 // AtomicReference
	end

	operation 9079938 "SearchKeysTask"
	  cpp_inline package explicit_return_type ""
	  nparams 7
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "searchFunction" type class_ref 192770 // Function
	    param inout name "result" type class_ref 1021954 // AtomicReference
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<? super K, ? extends U> ${p5}, ${t6}<U> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9080066 "getRawResult"
	  cpp_inline public explicit_return_type "U"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9080194 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1110402 "SearchValuesTask"
	visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3588098 // <realization>
	  relation 3588098 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3588098 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3588226 // searchFunction (<unidirectional association>)
	  relation 3588226 --->
	    a role_name "searchFunction" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super V, ? extends U> ${name}${value};
"
	      classrelation_ref 3588226 // searchFunction (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	classrelation 3588354 // result (<unidirectional association>)
	  relation 3588354 --->
	    a role_name "result" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<U> ${name}${value};
"
	      classrelation_ref 3588354 // result (<unidirectional association>)
	    b parent class_ref 1021954 // AtomicReference
	end

	operation 9080322 "SearchValuesTask"
	  cpp_inline package explicit_return_type ""
	  nparams 7
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "searchFunction" type class_ref 192770 // Function
	    param inout name "result" type class_ref 1021954 // AtomicReference
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<? super V, ? extends U> ${p5}, ${t6}<U> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9080450 "getRawResult"
	  cpp_inline public explicit_return_type "U"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9080578 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1110530 "SearchEntriesTask"
	visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3588482 // <realization>
	  relation 3588482 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3588482 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3588610 // searchFunction (<unidirectional association>)
	  relation 3588610 --->
	    a role_name "searchFunction" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Entry<K,V>, ? extends U> ${name}${value};
"
	      classrelation_ref 3588610 // searchFunction (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	classrelation 3588738 // result (<unidirectional association>)
	  relation 3588738 --->
	    a role_name "result" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<U> ${name}${value};
"
	      classrelation_ref 3588738 // result (<unidirectional association>)
	    b parent class_ref 1021954 // AtomicReference
	end

	operation 9080706 "SearchEntriesTask"
	  cpp_inline package explicit_return_type ""
	  nparams 7
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "searchFunction" type class_ref 192770 // Function
	    param inout name "result" type class_ref 1021954 // AtomicReference
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<Entry<K,V>, ? extends U> ${p5}, ${t6}<U> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9080834 "getRawResult"
	  cpp_inline public explicit_return_type "U"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9080962 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1110658 "SearchMappingsTask"
	visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3588866 // <realization>
	  relation 3588866 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3588866 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3588994 // searchFunction (<unidirectional association>)
	  relation 3588994 --->
	    a role_name "searchFunction" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K, ? super V, ? extends U> ${name}${value};
"
	      classrelation_ref 3588994 // searchFunction (<unidirectional association>)
	    b parent class_ref 192642 // BiFunction
	end

	classrelation 3589122 // result (<unidirectional association>)
	  relation 3589122 --->
	    a role_name "result" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<U> ${name}${value};
"
	      classrelation_ref 3589122 // result (<unidirectional association>)
	    b parent class_ref 1021954 // AtomicReference
	end

	operation 9081090 "SearchMappingsTask"
	  cpp_inline package explicit_return_type ""
	  nparams 7
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "searchFunction" type class_ref 192642 // BiFunction
	    param inout name "result" type class_ref 1021954 // AtomicReference
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<? super K, ? super V, ? extends U> ${p5}, ${t6}<U> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9081218 "getRawResult"
	  cpp_inline public explicit_return_type "U"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9081346 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1110786 "ReduceKeysTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3589250 // <realization>
	  relation 3589250 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3589250 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3589378 // reducer (<unidirectional association>)
	  relation 3589378 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K, ? super K, ? extends K> ${name}${value};
"
	      classrelation_ref 3589378 // reducer (<unidirectional association>)
	    b parent class_ref 192642 // BiFunction
	end

	attribute 2115074 "result"
	  package explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3589506 // rights (<unidirectional association>)
	  relation 3589506 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3589506 // rights (<unidirectional association>)
	    b parent class_ref 1110786 // ReduceKeysTask
	end

	classrelation 3589634 // nextRight (<unidirectional association>)
	  relation 3589634 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3589634 // nextRight (<unidirectional association>)
	    b parent class_ref 1110786 // ReduceKeysTask
	end

	operation 9081474 "ReduceKeysTask"
	  cpp_inline package explicit_return_type ""
	  nparams 7
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1110786 // ReduceKeysTask
	    param inout name "reducer" type class_ref 192642 // BiFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<? super K, ? super K, ? extends K> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9081602 "getRawResult"
	  cpp_inline public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9081730 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1110914 "ReduceValuesTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3589762 // <realization>
	  relation 3589762 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3589762 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3589890 // reducer (<unidirectional association>)
	  relation 3589890 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super V, ? super V, ? extends V> ${name}${value};
"
	      classrelation_ref 3589890 // reducer (<unidirectional association>)
	    b parent class_ref 192642 // BiFunction
	end

	attribute 2115202 "result"
	  package explicit_type "V"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3590018 // rights (<unidirectional association>)
	  relation 3590018 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3590018 // rights (<unidirectional association>)
	    b parent class_ref 1110914 // ReduceValuesTask
	end

	classrelation 3590146 // nextRight (<unidirectional association>)
	  relation 3590146 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3590146 // nextRight (<unidirectional association>)
	    b parent class_ref 1110914 // ReduceValuesTask
	end

	operation 9081858 "ReduceValuesTask"
	  cpp_inline package explicit_return_type ""
	  nparams 7
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1110914 // ReduceValuesTask
	    param inout name "reducer" type class_ref 192642 // BiFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<? super V, ? super V, ? extends V> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9081986 "getRawResult"
	  cpp_inline public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9082114 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1111042 "ReduceEntriesTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3590274 // <realization>
	  relation 3590274 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3590274 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3590402 // reducer (<unidirectional association>)
	  relation 3590402 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>, Map.Entry<K,V>, ? extends Map.Entry<K,V>> ${name}${value};
"
	      classrelation_ref 3590402 // reducer (<unidirectional association>)
	    b parent class_ref 192642 // BiFunction
	end

	classrelation 3590530 // result (<unidirectional association>)
	  relation 3590530 --->
	    a role_name "result" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3590530 // result (<unidirectional association>)
	    b parent class_ref 192386 // Entry
	end

	classrelation 3590658 // rights (<unidirectional association>)
	  relation 3590658 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3590658 // rights (<unidirectional association>)
	    b parent class_ref 1111042 // ReduceEntriesTask
	end

	classrelation 3590786 // nextRight (<unidirectional association>)
	  relation 3590786 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3590786 // nextRight (<unidirectional association>)
	    b parent class_ref 1111042 // ReduceEntriesTask
	end

	operation 9082242 "ReduceEntriesTask"
	  cpp_inline package explicit_return_type ""
	  nparams 7
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1111042 // ReduceEntriesTask
	    param inout name "reducer" type class_ref 192642 // BiFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<Entry<K,V>, Map.Entry<K,V>, ? extends Map.Entry<K,V>> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9082370 "getRawResult"
	  cpp_inline public return_type class_ref 192386 // Entry
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9082498 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1111170 "MapReduceKeysTask"
	visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3590914 // <realization>
	  relation 3590914 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3590914 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3591042 // transformer (<unidirectional association>)
	  relation 3591042 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K, ? extends U> ${name}${value};
"
	      classrelation_ref 3591042 // transformer (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	classrelation 3591170 // reducer (<unidirectional association>)
	  relation 3591170 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super U, ? super U, ? extends U> ${name}${value};
"
	      classrelation_ref 3591170 // reducer (<unidirectional association>)
	    b parent class_ref 192642 // BiFunction
	end

	attribute 2115330 "result"
	  package explicit_type "U"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3591298 // rights (<unidirectional association>)
	  relation 3591298 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V,U> ${name}${value};
"
	      classrelation_ref 3591298 // rights (<unidirectional association>)
	    b parent class_ref 1111170 // MapReduceKeysTask
	end

	classrelation 3591426 // nextRight (<unidirectional association>)
	  relation 3591426 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V,U> ${name}${value};
"
	      classrelation_ref 3591426 // nextRight (<unidirectional association>)
	    b parent class_ref 1111170 // MapReduceKeysTask
	end

	operation 9082626 "MapReduceKeysTask"
	  cpp_inline package explicit_return_type ""
	  nparams 8
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1111170 // MapReduceKeysTask
	    param inout name "transformer" type class_ref 192770 // Function
	    param inout name "reducer" type class_ref 192642 // BiFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V,U> ${p5}, ${t6}<? super K, ? extends U> ${p6}, ${t7}<? super U, ? super U, ? extends U> ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9082754 "getRawResult"
	  cpp_inline public explicit_return_type "U"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9082882 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1111298 "MapReduceValuesTask"
	visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3591554 // <realization>
	  relation 3591554 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3591554 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3591682 // transformer (<unidirectional association>)
	  relation 3591682 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super V, ? extends U> ${name}${value};
"
	      classrelation_ref 3591682 // transformer (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	classrelation 3591810 // reducer (<unidirectional association>)
	  relation 3591810 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super U, ? super U, ? extends U> ${name}${value};
"
	      classrelation_ref 3591810 // reducer (<unidirectional association>)
	    b parent class_ref 192642 // BiFunction
	end

	attribute 2115458 "result"
	  package explicit_type "U"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3591938 // rights (<unidirectional association>)
	  relation 3591938 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V,U> ${name}${value};
"
	      classrelation_ref 3591938 // rights (<unidirectional association>)
	    b parent class_ref 1111298 // MapReduceValuesTask
	end

	classrelation 3592066 // nextRight (<unidirectional association>)
	  relation 3592066 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V,U> ${name}${value};
"
	      classrelation_ref 3592066 // nextRight (<unidirectional association>)
	    b parent class_ref 1111298 // MapReduceValuesTask
	end

	operation 9083010 "MapReduceValuesTask"
	  cpp_inline package explicit_return_type ""
	  nparams 8
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1111298 // MapReduceValuesTask
	    param inout name "transformer" type class_ref 192770 // Function
	    param inout name "reducer" type class_ref 192642 // BiFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V,U> ${p5}, ${t6}<? super V, ? extends U> ${p6}, ${t7}<? super U, ? super U, ? extends U> ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9083138 "getRawResult"
	  cpp_inline public explicit_return_type "U"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9083266 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1111426 "MapReduceEntriesTask"
	visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3592194 // <realization>
	  relation 3592194 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3592194 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3592322 // transformer (<unidirectional association>)
	  relation 3592322 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>, ? extends U> ${name}${value};
"
	      classrelation_ref 3592322 // transformer (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	classrelation 3592450 // reducer (<unidirectional association>)
	  relation 3592450 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super U, ? super U, ? extends U> ${name}${value};
"
	      classrelation_ref 3592450 // reducer (<unidirectional association>)
	    b parent class_ref 192642 // BiFunction
	end

	attribute 2115586 "result"
	  package explicit_type "U"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3592578 // rights (<unidirectional association>)
	  relation 3592578 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V,U> ${name}${value};
"
	      classrelation_ref 3592578 // rights (<unidirectional association>)
	    b parent class_ref 1111426 // MapReduceEntriesTask
	end

	classrelation 3592706 // nextRight (<unidirectional association>)
	  relation 3592706 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V,U> ${name}${value};
"
	      classrelation_ref 3592706 // nextRight (<unidirectional association>)
	    b parent class_ref 1111426 // MapReduceEntriesTask
	end

	operation 9083394 "MapReduceEntriesTask"
	  cpp_inline package explicit_return_type ""
	  nparams 8
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1111426 // MapReduceEntriesTask
	    param inout name "transformer" type class_ref 192770 // Function
	    param inout name "reducer" type class_ref 192642 // BiFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V,U> ${p5}, ${t6}<Map.Entry<K,V>, ? extends U> ${p6}, ${t7}<? super U, ? super U, ? extends U> ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9083522 "getRawResult"
	  cpp_inline public explicit_return_type "U"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9083650 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1111554 "MapReduceMappingsTask"
	visibility package 
	nformals 3
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3592834 // <realization>
	  relation 3592834 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3592834 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3592962 // transformer (<unidirectional association>)
	  relation 3592962 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K, ? super V, ? extends U> ${name}${value};
"
	      classrelation_ref 3592962 // transformer (<unidirectional association>)
	    b parent class_ref 192642 // BiFunction
	end

	classrelation 3593090 // reducer (<unidirectional association>)
	  relation 3593090 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super U, ? super U, ? extends U> ${name}${value};
"
	      classrelation_ref 3593090 // reducer (<unidirectional association>)
	    b parent class_ref 192642 // BiFunction
	end

	attribute 2115714 "result"
	  package explicit_type "U"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3593218 // rights (<unidirectional association>)
	  relation 3593218 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V,U> ${name}${value};
"
	      classrelation_ref 3593218 // rights (<unidirectional association>)
	    b parent class_ref 1111554 // MapReduceMappingsTask
	end

	classrelation 3593346 // nextRight (<unidirectional association>)
	  relation 3593346 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V,U> ${name}${value};
"
	      classrelation_ref 3593346 // nextRight (<unidirectional association>)
	    b parent class_ref 1111554 // MapReduceMappingsTask
	end

	operation 9083778 "MapReduceMappingsTask"
	  cpp_inline package explicit_return_type ""
	  nparams 8
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1111554 // MapReduceMappingsTask
	    param inout name "transformer" type class_ref 192642 // BiFunction
	    param inout name "reducer" type class_ref 192642 // BiFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V,U> ${p5}, ${t6}<? super K, ? super V, ? extends U> ${p6}, ${t7}<? super U, ? super U, ? extends U> ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9083906 "getRawResult"
	  cpp_inline public explicit_return_type "U"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9084034 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1111682 "MapReduceKeysToDoubleTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3593474 // <realization>
	  relation 3593474 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3593474 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3593602 // transformer (<unidirectional association>)
	  relation 3593602 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K> ${name}${value};
"
	      classrelation_ref 3593602 // transformer (<unidirectional association>)
	    b parent class_ref 194178 // ToDoubleFunction
	end

	classrelation 3593730 // reducer (<unidirectional association>)
	  relation 3593730 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3593730 // reducer (<unidirectional association>)
	    b parent class_ref 1067138 // DoubleBinaryOperator
	end

	attribute 2115842 "basis"
	  const_attribute package explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2115970 "result"
	  package explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3593858 // rights (<unidirectional association>)
	  relation 3593858 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3593858 // rights (<unidirectional association>)
	    b parent class_ref 1111682 // MapReduceKeysToDoubleTask
	end

	classrelation 3593986 // nextRight (<unidirectional association>)
	  relation 3593986 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3593986 // nextRight (<unidirectional association>)
	    b parent class_ref 1111682 // MapReduceKeysToDoubleTask
	end

	operation 9084162 "MapReduceKeysToDoubleTask"
	  cpp_inline package explicit_return_type ""
	  nparams 9
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1111682 // MapReduceKeysToDoubleTask
	    param inout name "transformer" type class_ref 194178 // ToDoubleFunction
	    param in name "basis" explicit_type "double"
	    param inout name "reducer" type class_ref 1067138 // DoubleBinaryOperator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<? super K> ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9084290 "getRawResult"
	  cpp_inline public return_type class_ref 377218 // Double
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9084418 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1111810 "MapReduceValuesToDoubleTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3594114 // <realization>
	  relation 3594114 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3594114 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3594242 // transformer (<unidirectional association>)
	  relation 3594242 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super V> ${name}${value};
"
	      classrelation_ref 3594242 // transformer (<unidirectional association>)
	    b parent class_ref 194178 // ToDoubleFunction
	end

	classrelation 3594370 // reducer (<unidirectional association>)
	  relation 3594370 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3594370 // reducer (<unidirectional association>)
	    b parent class_ref 1067138 // DoubleBinaryOperator
	end

	attribute 2116098 "basis"
	  const_attribute package explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2116226 "result"
	  package explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3594498 // rights (<unidirectional association>)
	  relation 3594498 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3594498 // rights (<unidirectional association>)
	    b parent class_ref 1111810 // MapReduceValuesToDoubleTask
	end

	classrelation 3594626 // nextRight (<unidirectional association>)
	  relation 3594626 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3594626 // nextRight (<unidirectional association>)
	    b parent class_ref 1111810 // MapReduceValuesToDoubleTask
	end

	operation 9084546 "MapReduceValuesToDoubleTask"
	  cpp_inline package explicit_return_type ""
	  nparams 9
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1111810 // MapReduceValuesToDoubleTask
	    param inout name "transformer" type class_ref 194178 // ToDoubleFunction
	    param in name "basis" explicit_type "double"
	    param inout name "reducer" type class_ref 1067138 // DoubleBinaryOperator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<? super V> ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9084674 "getRawResult"
	  cpp_inline public return_type class_ref 377218 // Double
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9084802 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1111938 "MapReduceEntriesToDoubleTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3594754 // <realization>
	  relation 3594754 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3594754 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3594882 // transformer (<unidirectional association>)
	  relation 3594882 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	      classrelation_ref 3594882 // transformer (<unidirectional association>)
	    b parent class_ref 194178 // ToDoubleFunction
	end

	classrelation 3595010 // reducer (<unidirectional association>)
	  relation 3595010 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3595010 // reducer (<unidirectional association>)
	    b parent class_ref 1067138 // DoubleBinaryOperator
	end

	attribute 2116354 "basis"
	  const_attribute package explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2116482 "result"
	  package explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3595138 // rights (<unidirectional association>)
	  relation 3595138 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3595138 // rights (<unidirectional association>)
	    b parent class_ref 1111938 // MapReduceEntriesToDoubleTask
	end

	classrelation 3595266 // nextRight (<unidirectional association>)
	  relation 3595266 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3595266 // nextRight (<unidirectional association>)
	    b parent class_ref 1111938 // MapReduceEntriesToDoubleTask
	end

	operation 9084930 "MapReduceEntriesToDoubleTask"
	  cpp_inline package explicit_return_type ""
	  nparams 9
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1111938 // MapReduceEntriesToDoubleTask
	    param inout name "transformer" type class_ref 194178 // ToDoubleFunction
	    param in name "basis" explicit_type "double"
	    param inout name "reducer" type class_ref 1067138 // DoubleBinaryOperator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<Map.Entry<K,V>> ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9085058 "getRawResult"
	  cpp_inline public return_type class_ref 377218 // Double
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9085186 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1112066 "MapReduceMappingsToDoubleTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3595394 // <realization>
	  relation 3595394 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3595394 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3595522 // transformer (<unidirectional association>)
	  relation 3595522 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K, ? super V> ${name}${value};
"
	      classrelation_ref 3595522 // transformer (<unidirectional association>)
	    b parent class_ref 1108610 // ToDoubleBiFunction
	end

	classrelation 3595650 // reducer (<unidirectional association>)
	  relation 3595650 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3595650 // reducer (<unidirectional association>)
	    b parent class_ref 1067138 // DoubleBinaryOperator
	end

	attribute 2116610 "basis"
	  const_attribute package explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2116738 "result"
	  package explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3595778 // rights (<unidirectional association>)
	  relation 3595778 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3595778 // rights (<unidirectional association>)
	    b parent class_ref 1112066 // MapReduceMappingsToDoubleTask
	end

	classrelation 3595906 // nextRight (<unidirectional association>)
	  relation 3595906 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3595906 // nextRight (<unidirectional association>)
	    b parent class_ref 1112066 // MapReduceMappingsToDoubleTask
	end

	operation 9085314 "MapReduceMappingsToDoubleTask"
	  cpp_inline package explicit_return_type ""
	  nparams 9
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1112066 // MapReduceMappingsToDoubleTask
	    param inout name "transformer" type class_ref 1108610 // ToDoubleBiFunction
	    param in name "basis" explicit_type "double"
	    param inout name "reducer" type class_ref 1067138 // DoubleBinaryOperator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<? super K, ? super V> ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9085442 "getRawResult"
	  cpp_inline public return_type class_ref 377218 // Double
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9085570 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1112194 "MapReduceKeysToLongTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3596034 // <realization>
	  relation 3596034 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3596034 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3596162 // transformer (<unidirectional association>)
	  relation 3596162 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K> ${name}${value};
"
	      classrelation_ref 3596162 // transformer (<unidirectional association>)
	    b parent class_ref 194050 // ToLongFunction
	end

	classrelation 3596290 // reducer (<unidirectional association>)
	  relation 3596290 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3596290 // reducer (<unidirectional association>)
	    b parent class_ref 1066882 // LongBinaryOperator
	end

	attribute 2116866 "basis"
	  const_attribute package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2116994 "result"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3596418 // rights (<unidirectional association>)
	  relation 3596418 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3596418 // rights (<unidirectional association>)
	    b parent class_ref 1112194 // MapReduceKeysToLongTask
	end

	classrelation 3596546 // nextRight (<unidirectional association>)
	  relation 3596546 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3596546 // nextRight (<unidirectional association>)
	    b parent class_ref 1112194 // MapReduceKeysToLongTask
	end

	operation 9085698 "MapReduceKeysToLongTask"
	  cpp_inline package explicit_return_type ""
	  nparams 9
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1112194 // MapReduceKeysToLongTask
	    param inout name "transformer" type class_ref 194050 // ToLongFunction
	    param in name "basis" explicit_type "long"
	    param inout name "reducer" type class_ref 1066882 // LongBinaryOperator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<? super K> ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9085826 "getRawResult"
	  cpp_inline public return_type class_ref 251778 // Long
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9085954 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1112322 "MapReduceValuesToLongTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3596674 // <realization>
	  relation 3596674 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3596674 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3596802 // transformer (<unidirectional association>)
	  relation 3596802 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super V> ${name}${value};
"
	      classrelation_ref 3596802 // transformer (<unidirectional association>)
	    b parent class_ref 194050 // ToLongFunction
	end

	classrelation 3596930 // reducer (<unidirectional association>)
	  relation 3596930 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3596930 // reducer (<unidirectional association>)
	    b parent class_ref 1066882 // LongBinaryOperator
	end

	attribute 2117122 "basis"
	  const_attribute package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2117250 "result"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3597058 // rights (<unidirectional association>)
	  relation 3597058 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3597058 // rights (<unidirectional association>)
	    b parent class_ref 1112322 // MapReduceValuesToLongTask
	end

	classrelation 3597186 // nextRight (<unidirectional association>)
	  relation 3597186 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3597186 // nextRight (<unidirectional association>)
	    b parent class_ref 1112322 // MapReduceValuesToLongTask
	end

	operation 9086082 "MapReduceValuesToLongTask"
	  cpp_inline package explicit_return_type ""
	  nparams 9
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1112322 // MapReduceValuesToLongTask
	    param inout name "transformer" type class_ref 194050 // ToLongFunction
	    param in name "basis" explicit_type "long"
	    param inout name "reducer" type class_ref 1066882 // LongBinaryOperator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<? super V> ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9086210 "getRawResult"
	  cpp_inline public return_type class_ref 251778 // Long
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9086338 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1112450 "MapReduceEntriesToLongTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3597314 // <realization>
	  relation 3597314 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3597314 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3597442 // transformer (<unidirectional association>)
	  relation 3597442 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	      classrelation_ref 3597442 // transformer (<unidirectional association>)
	    b parent class_ref 194050 // ToLongFunction
	end

	classrelation 3597570 // reducer (<unidirectional association>)
	  relation 3597570 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3597570 // reducer (<unidirectional association>)
	    b parent class_ref 1066882 // LongBinaryOperator
	end

	attribute 2117378 "basis"
	  const_attribute package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2117506 "result"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3597698 // rights (<unidirectional association>)
	  relation 3597698 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3597698 // rights (<unidirectional association>)
	    b parent class_ref 1112450 // MapReduceEntriesToLongTask
	end

	classrelation 3597826 // nextRight (<unidirectional association>)
	  relation 3597826 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3597826 // nextRight (<unidirectional association>)
	    b parent class_ref 1112450 // MapReduceEntriesToLongTask
	end

	operation 9086466 "MapReduceEntriesToLongTask"
	  cpp_inline package explicit_return_type ""
	  nparams 9
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1112450 // MapReduceEntriesToLongTask
	    param inout name "transformer" type class_ref 194050 // ToLongFunction
	    param in name "basis" explicit_type "long"
	    param inout name "reducer" type class_ref 1066882 // LongBinaryOperator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<Map.Entry<K,V>> ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9086594 "getRawResult"
	  cpp_inline public return_type class_ref 251778 // Long
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9086722 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1112578 "MapReduceMappingsToLongTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3597954 // <realization>
	  relation 3597954 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3597954 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3598082 // transformer (<unidirectional association>)
	  relation 3598082 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K, ? super V> ${name}${value};
"
	      classrelation_ref 3598082 // transformer (<unidirectional association>)
	    b parent class_ref 1108738 // ToLongBiFunction
	end

	classrelation 3598210 // reducer (<unidirectional association>)
	  relation 3598210 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3598210 // reducer (<unidirectional association>)
	    b parent class_ref 1066882 // LongBinaryOperator
	end

	attribute 2117634 "basis"
	  const_attribute package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2117762 "result"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3598338 // rights (<unidirectional association>)
	  relation 3598338 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3598338 // rights (<unidirectional association>)
	    b parent class_ref 1112578 // MapReduceMappingsToLongTask
	end

	classrelation 3598466 // nextRight (<unidirectional association>)
	  relation 3598466 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3598466 // nextRight (<unidirectional association>)
	    b parent class_ref 1112578 // MapReduceMappingsToLongTask
	end

	operation 9086850 "MapReduceMappingsToLongTask"
	  cpp_inline package explicit_return_type ""
	  nparams 9
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1112578 // MapReduceMappingsToLongTask
	    param inout name "transformer" type class_ref 1108738 // ToLongBiFunction
	    param in name "basis" explicit_type "long"
	    param inout name "reducer" type class_ref 1066882 // LongBinaryOperator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<? super K, ? super V> ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9086978 "getRawResult"
	  cpp_inline public return_type class_ref 251778 // Long
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9087106 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1112706 "MapReduceKeysToIntTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3598594 // <realization>
	  relation 3598594 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3598594 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3598722 // transformer (<unidirectional association>)
	  relation 3598722 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K> ${name}${value};
"
	      classrelation_ref 3598722 // transformer (<unidirectional association>)
	    b parent class_ref 193922 // ToIntFunction
	end

	classrelation 3598850 // reducer (<unidirectional association>)
	  relation 3598850 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3598850 // reducer (<unidirectional association>)
	    b parent class_ref 1067394 // IntBinaryOperator
	end

	attribute 2117890 "basis"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2118018 "result"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3598978 // rights (<unidirectional association>)
	  relation 3598978 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3598978 // rights (<unidirectional association>)
	    b parent class_ref 1112706 // MapReduceKeysToIntTask
	end

	classrelation 3599106 // nextRight (<unidirectional association>)
	  relation 3599106 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3599106 // nextRight (<unidirectional association>)
	    b parent class_ref 1112706 // MapReduceKeysToIntTask
	end

	operation 9087234 "MapReduceKeysToIntTask"
	  cpp_inline package explicit_return_type ""
	  nparams 9
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1112706 // MapReduceKeysToIntTask
	    param inout name "transformer" type class_ref 193922 // ToIntFunction
	    param in name "basis" explicit_type "int"
	    param inout name "reducer" type class_ref 1067394 // IntBinaryOperator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<? super K> ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9087362 "getRawResult"
	  cpp_inline public return_type class_ref 137602 // Integer
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9087490 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1112834 "MapReduceValuesToIntTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3599234 // <realization>
	  relation 3599234 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3599234 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3599362 // transformer (<unidirectional association>)
	  relation 3599362 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super V> ${name}${value};
"
	      classrelation_ref 3599362 // transformer (<unidirectional association>)
	    b parent class_ref 193922 // ToIntFunction
	end

	classrelation 3599490 // reducer (<unidirectional association>)
	  relation 3599490 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3599490 // reducer (<unidirectional association>)
	    b parent class_ref 1067394 // IntBinaryOperator
	end

	attribute 2118146 "basis"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2118274 "result"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3599618 // rights (<unidirectional association>)
	  relation 3599618 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3599618 // rights (<unidirectional association>)
	    b parent class_ref 1112834 // MapReduceValuesToIntTask
	end

	classrelation 3599746 // nextRight (<unidirectional association>)
	  relation 3599746 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3599746 // nextRight (<unidirectional association>)
	    b parent class_ref 1112834 // MapReduceValuesToIntTask
	end

	operation 9087618 "MapReduceValuesToIntTask"
	  cpp_inline package explicit_return_type ""
	  nparams 9
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1112834 // MapReduceValuesToIntTask
	    param inout name "transformer" type class_ref 193922 // ToIntFunction
	    param in name "basis" explicit_type "int"
	    param inout name "reducer" type class_ref 1067394 // IntBinaryOperator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<? super V> ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9087746 "getRawResult"
	  cpp_inline public return_type class_ref 137602 // Integer
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9087874 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1112962 "MapReduceEntriesToIntTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3599874 // <realization>
	  relation 3599874 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3599874 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3600002 // transformer (<unidirectional association>)
	  relation 3600002 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	      classrelation_ref 3600002 // transformer (<unidirectional association>)
	    b parent class_ref 193922 // ToIntFunction
	end

	classrelation 3600130 // reducer (<unidirectional association>)
	  relation 3600130 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3600130 // reducer (<unidirectional association>)
	    b parent class_ref 1067394 // IntBinaryOperator
	end

	attribute 2118402 "basis"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2118530 "result"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3600258 // rights (<unidirectional association>)
	  relation 3600258 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3600258 // rights (<unidirectional association>)
	    b parent class_ref 1112962 // MapReduceEntriesToIntTask
	end

	classrelation 3600386 // nextRight (<unidirectional association>)
	  relation 3600386 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3600386 // nextRight (<unidirectional association>)
	    b parent class_ref 1112962 // MapReduceEntriesToIntTask
	end

	operation 9088002 "MapReduceEntriesToIntTask"
	  cpp_inline package explicit_return_type ""
	  nparams 9
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1112962 // MapReduceEntriesToIntTask
	    param inout name "transformer" type class_ref 193922 // ToIntFunction
	    param in name "basis" explicit_type "int"
	    param inout name "reducer" type class_ref 1067394 // IntBinaryOperator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<Map.Entry<K,V>> ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9088130 "getRawResult"
	  cpp_inline public return_type class_ref 137602 // Integer
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9088258 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1113090 "MapReduceMappingsToIntTask"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 319362 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 0 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 1 explicit_value ""
	actual class class_ref 1109122 // BulkTask
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3600514 // <realization>
	  relation 3600514 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3600514 // <realization>
	    b parent class_ref 1109122 // BulkTask
	end

	classrelation 3600642 // transformer (<unidirectional association>)
	  relation 3600642 --->
	    a role_name "transformer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K, ? super V> ${name}${value};
"
	      classrelation_ref 3600642 // transformer (<unidirectional association>)
	    b parent class_ref 1108866 // ToIntBiFunction
	end

	classrelation 3600770 // reducer (<unidirectional association>)
	  relation 3600770 --->
	    a role_name "reducer" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3600770 // reducer (<unidirectional association>)
	    b parent class_ref 1067394 // IntBinaryOperator
	end

	attribute 2118658 "basis"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2118786 "result"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3600898 // rights (<unidirectional association>)
	  relation 3600898 --->
	    a role_name "rights" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3600898 // rights (<unidirectional association>)
	    b parent class_ref 1113090 // MapReduceMappingsToIntTask
	end

	classrelation 3601026 // nextRight (<unidirectional association>)
	  relation 3601026 --->
	    a role_name "nextRight" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3601026 // nextRight (<unidirectional association>)
	    b parent class_ref 1113090 // MapReduceMappingsToIntTask
	end

	operation 9088386 "MapReduceMappingsToIntTask"
	  cpp_inline package explicit_return_type ""
	  nparams 9
	    param inout name "p" type class_ref 1109122 // BulkTask
	    param in name "b" explicit_type "int"
	    param in name "i" explicit_type "int"
	    param in name "f" explicit_type "int"
	    param inout name "t" type class_ref 1105154 // Node
	  multiplicity "[]"
	    param inout name "nextRight" type class_ref 1113090 // MapReduceMappingsToIntTask
	    param inout name "transformer" type class_ref 1108866 // ToIntBiFunction
	    param in name "basis" explicit_type "int"
	    param inout name "reducer" type class_ref 1067394 // IntBinaryOperator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V,?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<K,V>[] ${p4}, ${t5}<K,V> ${p5}, ${t6}<? super K, ? super V> ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9088514 "getRawResult"
	  cpp_inline public return_type class_ref 137602 // Integer
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9088642 "compute"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 2118914 "U"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2119042 "SIZECTL"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2119170 "TRANSFERINDEX"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2119298 "BASECOUNT"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2119426 "CELLSBUSY"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2119554 "CELLVALUE"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2119682 "ABASE"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2119810 "ASHIFT"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 173314 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            U = sun.misc.Unsafe.getUnsafe();
            Class<?> k = ConcurrentHashMap.class;
            SIZECTL = U.objectFieldOffset
                (k.getDeclaredField(\"sizeCtl\"));
            TRANSFERINDEX = U.objectFieldOffset
                (k.getDeclaredField(\"transferIndex\"));
            BASECOUNT = U.objectFieldOffset
                (k.getDeclaredField(\"baseCount\"));
            CELLSBUSY = U.objectFieldOffset
                (k.getDeclaredField(\"cellsBusy\"));
            Class<?> ck = CounterCell.class;
            CELLVALUE = U.objectFieldOffset
                (ck.getDeclaredField(\"value\"));
            Class<?> ak = Node[].class;
            ABASE = U.arrayBaseOffset(ak);
            int scale = U.arrayIndexScale(ak);
            if ((scale & (scale - 1)) != 0)
                throw new Error(\"data type scale not a power of two\");
            ASHIFT = 31 - Integer.numberOfLeadingZeros(scale);
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 339330 "Callable"
      visibility public stereotype "interface"
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A task that returns a result and may throw an exception.
Implementors define a single method with no arguments called
{@code call}.

<p>The {@code Callable} interface is similar to {@link
java.lang.Runnable}, in that both are designed for classes whose
instances are potentially executed by another thread.  A
{@code Runnable}, however, does not return a result and cannot
throw a checked exception.

<p>The {@link Executors} class contains utility methods to
convert from other common forms to {@code Callable} classes.

@see Executor
@since 1.5
@author Doug Lea
@param <V> the result type of method {@code call}
"
      operation 6039938 "call"
	cpp_inline public explicit_return_type "V"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes a result, or throws an exception if unable to do so.

@return computed result
@throws Exception if unable to compute a result
"
      end
    end

    class 503426 "Executor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that executes submitted {@link Runnable} tasks. This
interface provides a way of decoupling task submission from the
mechanics of how each task will be run, including details of thread
use, scheduling, etc.  An {@code Executor} is normally used
instead of explicitly creating threads. For example, rather than
invoking {@code new Thread(new(RunnableTask())).start()} for each
of a set of tasks, you might use:

<pre>
Executor executor = <em>anExecutor</em>;
executor.execute(new RunnableTask1());
executor.execute(new RunnableTask2());
...
</pre>

However, the {@code Executor} interface does not strictly
require that execution be asynchronous. In the simplest case, an
executor can run the submitted task immediately in the caller's
thread:

 <pre> {@code
class DirectExecutor implements Executor {
  public void execute(Runnable r) {
    r.run();
  }
}}</pre>

More typically, tasks are executed in some thread other
than the caller's thread.  The executor below spawns a new thread
for each task.

 <pre> {@code
class ThreadPerTaskExecutor implements Executor {
  public void execute(Runnable r) {
    new Thread(r).start();
  }
}}</pre>

Many {@code Executor} implementations impose some sort of
limitation on how and when tasks are scheduled.  The executor below
serializes the submission of tasks to a second executor,
illustrating a composite executor.

 <pre> {@code
class SerialExecutor implements Executor {
  final Queue<Runnable> tasks = new ArrayDeque<Runnable>();
  final Executor executor;
  Runnable active;

  SerialExecutor(Executor executor) {
    this.executor = executor;
  }

  public synchronized void execute(final Runnable r) {
    tasks.offer(new Runnable() {
      public void run() {
        try {
          r.run();
        } finally {
          scheduleNext();
        }
      }
    });
    if (active == null) {
      scheduleNext();
    }
  }

  protected synchronized void scheduleNext() {
    if ((active = tasks.poll()) != null) {
      executor.execute(active);
    }
  }
}}</pre>

The {@code Executor} implementations provided in this package
implement {@link ExecutorService}, which is a more extensive
interface.  The {@link ThreadPoolExecutor} class provides an
extensible thread pool implementation. The {@link Executors} class
provides convenient factory methods for these Executors.

<p>Memory consistency effects: Actions in a thread prior to
submitting a {@code Runnable} object to an {@code Executor}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
its execution begins, perhaps in another thread.

@since 1.5
@author Doug Lea
"
      operation 3009794 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "command" type class_ref 128770 // Runnable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given command at some time in the future.  The command
may execute in a new thread, in a pooled thread, or in the calling
thread, at the discretion of the {@code Executor} implementation.

@param command the runnable task
@throws RejectedExecutionException if this task cannot be
accepted for execution
@throws NullPointerException if command is null
"
      end
    end

    class 589058 "CopyOnWriteArrayList"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 175362 // List
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A thread-safe variant of {@link java.util.ArrayList} in which all mutative
operations ({@code add}, {@code set}, and so on) are implemented by
making a fresh copy of the underlying array.

<p>This is ordinarily too costly, but may be <em>more</em> efficient
than alternatives when traversal operations vastly outnumber
mutations, and is useful when you cannot or don't want to
synchronize traversals, yet need to preclude interference among
concurrent threads.  The \"snapshot\" style iterator method uses a
reference to the state of the array at the point that the iterator
was created. This array never changes during the lifetime of the
iterator, so interference is impossible and the iterator is
guaranteed not to throw {@code ConcurrentModificationException}.
The iterator will not reflect additions, removals, or changes to
the list since the iterator was created.  Element-changing
operations on iterators themselves ({@code remove}, {@code set}, and
{@code add}) are not supported. These methods throw
{@code UnsupportedOperationException}.

<p>All elements are permitted, including {@code null}.

<p>Memory consistency effects: As with other concurrent
collections, actions in a thread prior to placing an object into a
{@code CopyOnWriteArrayList}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions subsequent to the access or removal of that element from
the {@code CopyOnWriteArrayList} in another thread.

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 3612674 // <realization>
	relation 3612674 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3612674 // <realization>
	  b parent class_ref 175362 // List
      end

      classrelation 3612802 // <realization>
	relation 3612802 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3612802 // <realization>
	  b parent class_ref 185730 // RandomAccess
      end

      classrelation 3612930 // <realization>
	relation 3612930 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3612930 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3613058 // <realization>
	relation 3613058 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3613058 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2126722 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8673264195747942595L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3613186 // lock (<unidirectional association>)
	relation 3613186 --->
	  a role_name "lock" init_value " new ReentrantLock()" const_relation package
	    comment " The lock protecting all mutators 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3613186 // lock (<unidirectional association>)
	  b parent class_ref 968706 // ReentrantLock
      end

      classrelation 3613314 // array (<unidirectional association>)
	relation 3613314 --->
	  a role_name "array" multiplicity "[]" volatile private
	    comment " The array, accessed only via getArray/setArray. 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3613314 // array (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 9141122 "getArray"
	cpp_inline package return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the array.  Non-private so as to also be accessible
from CopyOnWriteArraySet class.
"
      end

      operation 9141250 "setArray"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "a" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the array.
"
      end

      operation 9141378 "CopyOnWriteArrayList"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty list.
"
      end

      operation 9141506 "CopyOnWriteArrayList"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a list containing the elements of the specified
collection, in the order they are returned by the collection's
iterator.

@param c the collection of initially held elements
@throws NullPointerException if the specified collection is null
"
      end

      operation 9141634 "CopyOnWriteArrayList"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "toCopyIn" explicit_type "E"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a list holding a copy of the given array.

@param toCopyIn the array (a copy of this array is used as the
       internal array)
@throws NullPointerException if the specified array is null
"
      end

      operation 9141762 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this list.

@return the number of elements in this list
"
      end

      operation 9141890 "isEmpty"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this list contains no elements.

@return {@code true} if this list contains no elements
"
      end

      operation 9142018 "eq"
	class_operation cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "o1" type class_ref 129538 // Object
	  param inout name "o2" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests for equality, coping with nulls.
"
      end

      operation 9142146 "indexOf"
	class_operation cpp_inline private explicit_return_type "int"
	nparams 4
	  param inout name "o" type class_ref 129538 // Object
	  param inout name "elements" type class_ref 129538 // Object
	multiplicity "[]"
	  param in name "index" explicit_type "int"
	  param in name "fence" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "static version of indexOf, to allow repeated calls without
needing to re-acquire array each time.
@param o element to search for
@param elements the array
@param index first index to search
@param fence one past last index to search
@return index of element, or -1 if absent
"
      end

      operation 9142274 "lastIndexOf"
	class_operation cpp_inline private explicit_return_type "int"
	nparams 3
	  param inout name "o" type class_ref 129538 // Object
	  param inout name "elements" type class_ref 129538 // Object
	multiplicity "[]"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "static version of lastIndexOf.
@param o element to search for
@param elements the array
@param index first index to search
@return index of element, or -1 if absent
"
      end

      operation 9142402 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this list contains the specified element.
More formally, returns {@code true} if and only if this list contains
at least one element {@code e} such that
<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.

@param o element whose presence in this list is to be tested
@return {@code true} if this list contains the specified element
"
      end

      operation 9142530 "indexOf"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 9142658 "indexOf"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "e" explicit_type "E"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first occurrence of the specified element in
this list, searching forwards from {@code index}, or returns -1 if
the element is not found.
More formally, returns the lowest index {@code i} such that
<tt>(i&nbsp;&gt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(e==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;e.equals(get(i))))</tt>,
or -1 if there is no such index.

@param e element to search for
@param index index to start searching from
@return the index of the first occurrence of the element in
        this list at position {@code index} or later in the list;
        {@code -1} if the element is not found.
@throws IndexOutOfBoundsException if the specified index is negative
"
      end

      operation 9142786 "lastIndexOf"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 9142914 "lastIndexOf"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "e" explicit_type "E"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the last occurrence of the specified element in
this list, searching backwards from {@code index}, or returns -1 if
the element is not found.
More formally, returns the highest index {@code i} such that
<tt>(i&nbsp;&lt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(e==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;e.equals(get(i))))</tt>,
or -1 if there is no such index.

@param e element to search for
@param index index to start searching backwards from
@return the index of the last occurrence of the element at position
        less than or equal to {@code index} in this list;
        -1 if the element is not found.
@throws IndexOutOfBoundsException if the specified index is greater
        than or equal to the current size of this list
"
      end

      operation 9143042 "clone"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this list.  (The elements themselves
are not copied.)

@return a clone of this list
"
      end

      operation 9143170 "toArray"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this list
in proper sequence (from first to last element).

<p>The returned array will be \"safe\" in that no references to it are
maintained by this list.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all the elements in this list
"
      end

      operation 9143298 "toArray"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns an array containing all of the elements in this list in
proper sequence (from first to last element); the runtime type of
the returned array is that of the specified array.  If the list fits
in the specified array, it is returned therein.  Otherwise, a new
array is allocated with the runtime type of the specified array and
the size of this list.

<p>If this list fits in the specified array with room to spare
(i.e., the array has more elements than this list), the element in
the array immediately following the end of the list is set to
{@code null}.  (This is useful in determining the length of this
list <i>only</i> if the caller knows that this list does not contain
any null elements.)

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose {@code x} is a list known to contain only strings.
The following code can be used to dump the list into a newly
allocated array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the list are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose.
@return an array containing all the elements in this list
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this list
@throws NullPointerException if the specified array is null
"
      end

      operation 9143426 "get"
	cpp_inline private explicit_return_type "E"
	nparams 2
	  param inout name "a" type class_ref 129538 // Object
	multiplicity "[]"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " Positional Access Operations"
      end

      operation 9143554 "get"
	cpp_inline public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@throws IndexOutOfBoundsException {@inheritDoc}
"
      end

      operation 9143682 "set"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the element at the specified position in this list with the
specified element.

@throws IndexOutOfBoundsException {@inheritDoc}
"
      end

      operation 9143810 "add"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified element to the end of this list.

@param e element to be appended to this list
@return {@code true} (as specified by {@link Collection#add})
"
      end

      operation 9143938 "add"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the specified position in this
list. Shifts the element currently at that position (if any) and
any subsequent elements to the right (adds one to their indices).

@throws IndexOutOfBoundsException {@inheritDoc}
"
      end

      operation 9144066 "remove"
	cpp_inline public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the element at the specified position in this list.
Shifts any subsequent elements to the left (subtracts one from their
indices).  Returns the element that was removed from the list.

@throws IndexOutOfBoundsException {@inheritDoc}
"
      end

      operation 9144194 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first occurrence of the specified element from this list,
if it is present.  If this list does not contain the element, it is
unchanged.  More formally, removes the element with the lowest index
{@code i} such that
<tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>
(if such an element exists).  Returns {@code true} if this list
contained the specified element (or equivalently, if this list
changed as a result of the call).

@param o element to be removed from this list, if present
@return {@code true} if this list contained the specified element
"
      end

      operation 9144322 "remove"
	cpp_inline private explicit_return_type "boolean"
	nparams 3
	  param inout name "o" type class_ref 129538 // Object
	  param inout name "snapshot" type class_ref 129538 // Object
	multiplicity "[]"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A version of remove(Object) using the strong hint that given
recent snapshot contains o at the given index.
"
      end

      operation 9144450 "removeRange"
	cpp_inline package explicit_return_type "void"
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this list all of the elements whose index is between
{@code fromIndex}, inclusive, and {@code toIndex}, exclusive.
Shifts any succeeding elements to the left (reduces their index).
This call shortens the list by {@code (toIndex - fromIndex)} elements.
(If {@code toIndex==fromIndex}, this operation has no effect.)

@param fromIndex index of first element to be removed
@param toIndex index after last element to be removed
@throws IndexOutOfBoundsException if fromIndex or toIndex out of range
        ({@code fromIndex < 0 || toIndex > size() || toIndex < fromIndex})
"
      end

      operation 9144578 "addIfAbsent"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the element, if not present.

@param e element to be added to this list, if absent
@return {@code true} if the element was added
"
      end

      operation 9144706 "addIfAbsent"
	cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "e" explicit_type "E"
	  param inout name "snapshot" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A version of addIfAbsent using the strong hint that given
recent snapshot does not contain e.
"
      end

      operation 9144834 "containsAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this list contains all of the elements of the
specified collection.

@param c collection to be checked for containment in this list
@return {@code true} if this list contains all of the elements of the
        specified collection
@throws NullPointerException if the specified collection is null
@see #contains(Object)
"
      end

      operation 9144962 "removeAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this list all of its elements that are contained in
the specified collection. This is a particularly expensive operation
in this class because of the need for an internal temporary array.

@param c collection containing elements to be removed from this list
@return {@code true} if this list changed as a result of the call
@throws ClassCastException if the class of an element of this list
        is incompatible with the specified collection
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if this list contains a null element and the
        specified collection does not permit null elements
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>),
        or if the specified collection is null
@see #remove(Object)
"
      end

      operation 9145090 "retainAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this list that are contained in the
specified collection.  In other words, removes from this list all of
its elements that are not contained in the specified collection.

@param c collection containing elements to be retained in this list
@return {@code true} if this list changed as a result of the call
@throws ClassCastException if the class of an element of this list
        is incompatible with the specified collection
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if this list contains a null element and the
        specified collection does not permit null elements
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>),
        or if the specified collection is null
@see #remove(Object)
"
      end

      operation 9145218 "addAllAbsent"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified collection that
are not already contained in this list, to the end of
this list, in the order that they are returned by the
specified collection's iterator.

@param c collection containing elements to be added to this list
@return the number of elements added
@throws NullPointerException if the specified collection is null
@see #addIfAbsent(Object)
"
      end

      operation 9145346 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this list.
The list will be empty after this call returns.
"
      end

      operation 9145474 "addAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified collection to the end
of this list, in the order that they are returned by the specified
collection's iterator.

@param c collection containing elements to be added to this list
@return {@code true} if this list changed as a result of the call
@throws NullPointerException if the specified collection is null
@see #add(Object)
"
      end

      operation 9145602 "addAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the specified collection into this
list, starting at the specified position.  Shifts the element
currently at that position (if any) and any subsequent elements to
the right (increases their indices).  The new elements will appear
in this list in the order that they are returned by the
specified collection's iterator.

@param index index at which to insert the first element
       from the specified collection
@param c collection containing elements to be added to this list
@return {@code true} if this list changed as a result of the call
@throws IndexOutOfBoundsException {@inheritDoc}
@throws NullPointerException if the specified collection is null
@see #add(int,Object)
"
      end

      operation 9145730 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9145858 "removeIf"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "filter" type class_ref 184578 // Predicate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9145986 "replaceAll"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "operator" type class_ref 184834 // UnaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9146114 "sort"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 184962 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9146242 "writeObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves this list to a stream (that is, serializes it).

@param s the stream
@throws java.io.IOException if an I/O error occurs
@serialData The length of the array backing the list is emitted
              (int), followed by all of its elements (each an Object)
              in the proper order.
"
      end

      operation 9146370 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes this list from a stream (that is, deserializes it).
@param s the stream
@throws ClassNotFoundException if the class of a serialized object
        could not be found
@throws java.io.IOException if an I/O error occurs
"
      end

      operation 9146498 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this list.  The string
representation consists of the string representations of the list's
elements in the order they are returned by its iterator, enclosed in
square brackets ({@code \"[]\"}).  Adjacent elements are separated by
the characters {@code \", \"} (comma and space).  Elements are
converted to strings as by {@link String#valueOf(Object)}.

@return a string representation of this list
"
      end

      operation 9146626 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified object with this list for equality.
Returns {@code true} if the specified object is the same object
as this object, or if it is also a {@link List} and the sequence
of elements returned by an {@linkplain List#iterator() iterator}
over the specified list is the same as the sequence returned by
an iterator over this list.  The two sequences are considered to
be the same if they have the same length and corresponding
elements at the same position in the sequence are <em>equal</em>.
Two elements {@code e1} and {@code e2} are considered
<em>equal</em> if {@code (e1==null ? e2==null : e1.equals(e2))}.

@param o the object to be compared for equality with this list
@return {@code true} if the specified object is equal to this list
"
      end

      operation 9146754 "hashCode"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this list.

<p>This implementation uses the definition in {@link List#hashCode}.

@return the hash code value for this list
"
      end

      operation 9146882 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this list in proper sequence.

<p>The returned iterator provides a snapshot of the state of the list
when the iterator was constructed. No synchronization is needed while
traversing the iterator. The iterator does <em>NOT</em> support the
{@code remove} method.

@return an iterator over the elements in this list in proper sequence
"
      end

      operation 9147010 "listIterator"
	cpp_inline public return_type class_ref 185090 // ListIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

<p>The returned iterator provides a snapshot of the state of the list
when the iterator was constructed. No synchronization is needed while
traversing the iterator. The iterator does <em>NOT</em> support the
{@code remove}, {@code set} or {@code add} methods.
"
      end

      operation 9147138 "listIterator"
	cpp_inline public return_type class_ref 185090 // ListIterator
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

<p>The returned iterator provides a snapshot of the state of the list
when the iterator was constructed. No synchronization is needed while
traversing the iterator. The iterator does <em>NOT</em> support the
{@code remove}, {@code set} or {@code add} methods.

@throws IndexOutOfBoundsException {@inheritDoc}
"
      end

      operation 9147266 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Spliterator} over the elements in this list.

<p>The {@code Spliterator} reports {@link Spliterator#IMMUTABLE},
{@link Spliterator#ORDERED}, {@link Spliterator#SIZED}, and
{@link Spliterator#SUBSIZED}.

<p>The spliterator provides a snapshot of the state of the list
when the spliterator was constructed. No synchronization is needed while
operating on the spliterator.

@return a {@code Spliterator} over the elements in this list
@since 1.8
"
      end

      class 1117314 "COWIterator"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 185090 // ListIterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3613442 // <realization>
	  relation 3613442 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3613442 // <realization>
	    b parent class_ref 185090 // ListIterator
	end

	classrelation 3613570 // snapshot (<unidirectional association>)
	  relation 3613570 --->
	    a role_name "snapshot" multiplicity "[]" const_relation private
	      comment " Snapshot of the array 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3613570 // snapshot (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	attribute 2126850 "cursor"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Index of element to be returned by subsequent call to next.  
"
	end

	operation 9147394 "COWIterator"
	  cpp_inline private explicit_return_type ""
	  nparams 2
	    param inout name "elements" type class_ref 129538 // Object
	  multiplicity "[]"
	    param in name "initialCursor" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9147522 "hasNext"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9147650 "hasPrevious"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9147778 "next"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9147906 "previous"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9148034 "nextIndex"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9148162 "previousIndex"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9148290 "remove"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Not supported. Always throws UnsupportedOperationException.
@throws UnsupportedOperationException always; {@code remove}
        is not supported by this iterator.
"
	end

	operation 9148418 "set"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Not supported. Always throws UnsupportedOperationException.
@throws UnsupportedOperationException always; {@code set}
        is not supported by this iterator.
"
	end

	operation 9148546 "add"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Not supported. Always throws UnsupportedOperationException.
@throws UnsupportedOperationException always; {@code add}
        is not supported by this iterator.
"
	end

	operation 9148674 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 9148802 "subList"
	cpp_inline public return_type class_ref 175362 // List
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this list between
{@code fromIndex}, inclusive, and {@code toIndex}, exclusive.
The returned list is backed by this list, so changes in the
returned list are reflected in this list.

<p>The semantics of the list returned by this method become
undefined if the backing list (i.e., this list) is modified in
any way other than via the returned list.

@param fromIndex low endpoint (inclusive) of the subList
@param toIndex high endpoint (exclusive) of the subList
@return a view of the specified range within this list
@throws IndexOutOfBoundsException {@inheritDoc}
"
      end

      class 1117442 "COWSubList"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 183938 // AbstractList
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3613698 // <realization>
	  relation 3613698 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3613698 // <realization>
	    b parent class_ref 183938 // AbstractList
	end

	classrelation 3613826 // <realization>
	  relation 3613826 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3613826 // <realization>
	    b parent class_ref 185730 // RandomAccess
	end

	classrelation 3613954 // l (<unidirectional association>)
	  relation 3613954 --->
	    a role_name "l" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3613954 // l (<unidirectional association>)
	    b parent class_ref 589058 // CopyOnWriteArrayList
	end

	attribute 2126978 "offset"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2127106 "size"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3614082 // expectedArray (<unidirectional association>)
	  relation 3614082 --->
	    a role_name "expectedArray" multiplicity "[]" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3614082 // expectedArray (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	operation 9148930 "COWSubList"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "list" type class_ref 589058 // CopyOnWriteArrayList
	    param in name "fromIndex" explicit_type "int"
	    param in name "toIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " only call this holding l's lock"
	end

	operation 9149058 "checkForComodification"
	  cpp_inline private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " only call this holding l's lock"
	end

	operation 9149186 "rangeCheck"
	  cpp_inline private explicit_return_type "void"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " only call this holding l's lock"
	end

	operation 9149314 "set"
	  cpp_inline public explicit_return_type "E"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "element" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9149442 "get"
	  cpp_inline public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9149570 "size"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9149698 "add"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "element" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9149826 "clear"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9149954 "remove"
	  cpp_inline public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9150082 "remove"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9150210 "iterator"
	  cpp_inline public return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9150338 "listIterator"
	  cpp_inline public return_type class_ref 185090 // ListIterator
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9150466 "subList"
	  cpp_inline public return_type class_ref 175362 // List
	  nparams 2
	    param in name "fromIndex" explicit_type "int"
	    param in name "toIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9150594 "forEach"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9150722 "replaceAll"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "operator" type class_ref 184834 // UnaryOperator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9150850 "sort"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "c" type class_ref 184962 // Comparator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9150978 "removeAll"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "c" type class_ref 184194 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9151106 "retainAll"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "c" type class_ref 184194 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9151234 "removeIf"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "filter" type class_ref 184578 // Predicate
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9151362 "spliterator"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1117570 "COWSubListIterator"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 185090 // ListIterator
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3614210 // <realization>
	  relation 3614210 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3614210 // <realization>
	    b parent class_ref 185090 // ListIterator
	end

	classrelation 3614338 // it (<unidirectional association>)
	  relation 3614338 --->
	    a role_name "it" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3614338 // it (<unidirectional association>)
	    b parent class_ref 185090 // ListIterator
	end

	attribute 2127234 "offset"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2127362 "size"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9151490 "COWSubListIterator"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "l" type class_ref 175362 // List
	    param in name "index" explicit_type "int"
	    param in name "offset" explicit_type "int"
	    param in name "size" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9151618 "hasNext"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9151746 "next"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9151874 "hasPrevious"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9152002 "previous"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9152130 "nextIndex"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9152258 "previousIndex"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9152386 "remove"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9152514 "set"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9152642 "add"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9152770 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 9152898 "resetLock"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Support for resetting lock while deserializing"
      end

      attribute 2127490 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2127618 "lockOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 174466 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = CopyOnWriteArrayList.class;
            lockOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"lock\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 935938 "TimeUnit"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code TimeUnit} represents time durations at a given unit of
granularity and provides utility methods to convert across units,
and to perform timing and delay operations in these units.  A
{@code TimeUnit} does not maintain time information, but only
helps organize and use time representations that may be maintained
separately across various contexts.  A nanosecond is defined as one
thousandth of a microsecond, a microsecond as one thousandth of a
millisecond, a millisecond as one thousandth of a second, a minute
as sixty seconds, an hour as sixty minutes, and a day as twenty four
hours.

<p>A {@code TimeUnit} is mainly used to inform time-based methods
how a given timing parameter should be interpreted. For example,
the following code will timeout in 50 milliseconds if the {@link
java.util.concurrent.locks.Lock lock} is not available:

 <pre> {@code
Lock lock = ...;
if (lock.tryLock(50L, TimeUnit.MILLISECONDS)) ...}</pre>

while this code will timeout in 50 seconds:
 <pre> {@code
Lock lock = ...;
if (lock.tryLock(50L, TimeUnit.SECONDS)) ...}</pre>

Note however, that there is no guarantee that a particular timeout
implementation will be able to notice the passage of time at the
same granularity as the given {@code TimeUnit}.

@since 1.5
@author Doug Lea
"
      attribute 2151170 "NANOSECONDS"
	public type class_ref 935938 // TimeUnit
	cpp_decl ""
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return d; }
        public long toMicros(long d)  { return d/(C1/C0); }
        public long toMillis(long d)  { return d/(C2/C0); }
        public long toSeconds(long d) { return d/(C3/C0); }
        public long toMinutes(long d) { return d/(C4/C0); }
        public long toHours(long d)   { return d/(C5/C0); }
        public long toDays(long d)    { return d/(C6/C0); }
        public long convert(long d, TimeUnit u) { return u.toNanos(d); }
        int excessNanos(long d, long m) { return (int)(d - (m*C2)); }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Time unit representing one thousandth of a microsecond
"
      end

      attribute 2151298 "MICROSECONDS"
	public type class_ref 935938 // TimeUnit
	cpp_decl ""
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return x(d, C1/C0, MAX/(C1/C0)); }
        public long toMicros(long d)  { return d; }
        public long toMillis(long d)  { return d/(C2/C1); }
        public long toSeconds(long d) { return d/(C3/C1); }
        public long toMinutes(long d) { return d/(C4/C1); }
        public long toHours(long d)   { return d/(C5/C1); }
        public long toDays(long d)    { return d/(C6/C1); }
        public long convert(long d, TimeUnit u) { return u.toMicros(d); }
        int excessNanos(long d, long m) { return (int)((d*C1) - (m*C2)); }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Time unit representing one thousandth of a millisecond
"
      end

      attribute 2151426 "MILLISECONDS"
	public type class_ref 935938 // TimeUnit
	cpp_decl ""
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return x(d, C2/C0, MAX/(C2/C0)); }
        public long toMicros(long d)  { return x(d, C2/C1, MAX/(C2/C1)); }
        public long toMillis(long d)  { return d; }
        public long toSeconds(long d) { return d/(C3/C2); }
        public long toMinutes(long d) { return d/(C4/C2); }
        public long toHours(long d)   { return d/(C5/C2); }
        public long toDays(long d)    { return d/(C6/C2); }
        public long convert(long d, TimeUnit u) { return u.toMillis(d); }
        int excessNanos(long d, long m) { return 0; }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Time unit representing one thousandth of a second
"
      end

      attribute 2151554 "SECONDS"
	public type class_ref 935938 // TimeUnit
	cpp_decl ""
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return x(d, C3/C0, MAX/(C3/C0)); }
        public long toMicros(long d)  { return x(d, C3/C1, MAX/(C3/C1)); }
        public long toMillis(long d)  { return x(d, C3/C2, MAX/(C3/C2)); }
        public long toSeconds(long d) { return d; }
        public long toMinutes(long d) { return d/(C4/C3); }
        public long toHours(long d)   { return d/(C5/C3); }
        public long toDays(long d)    { return d/(C6/C3); }
        public long convert(long d, TimeUnit u) { return u.toSeconds(d); }
        int excessNanos(long d, long m) { return 0; }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Time unit representing one second
"
      end

      attribute 2151682 "MINUTES"
	public type class_ref 935938 // TimeUnit
	cpp_decl ""
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return x(d, C4/C0, MAX/(C4/C0)); }
        public long toMicros(long d)  { return x(d, C4/C1, MAX/(C4/C1)); }
        public long toMillis(long d)  { return x(d, C4/C2, MAX/(C4/C2)); }
        public long toSeconds(long d) { return x(d, C4/C3, MAX/(C4/C3)); }
        public long toMinutes(long d) { return d; }
        public long toHours(long d)   { return d/(C5/C4); }
        public long toDays(long d)    { return d/(C6/C4); }
        public long convert(long d, TimeUnit u) { return u.toMinutes(d); }
        int excessNanos(long d, long m) { return 0; }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Time unit representing sixty seconds
"
      end

      attribute 2151810 "HOURS"
	public type class_ref 935938 // TimeUnit
	cpp_decl ""
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return x(d, C5/C0, MAX/(C5/C0)); }
        public long toMicros(long d)  { return x(d, C5/C1, MAX/(C5/C1)); }
        public long toMillis(long d)  { return x(d, C5/C2, MAX/(C5/C2)); }
        public long toSeconds(long d) { return x(d, C5/C3, MAX/(C5/C3)); }
        public long toMinutes(long d) { return x(d, C5/C4, MAX/(C5/C4)); }
        public long toHours(long d)   { return d; }
        public long toDays(long d)    { return d/(C6/C5); }
        public long convert(long d, TimeUnit u) { return u.toHours(d); }
        int excessNanos(long d, long m) { return 0; }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Time unit representing sixty minutes
"
      end

      attribute 2151938 "DAYS"
	public type class_ref 935938 // TimeUnit
	cpp_decl ""
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return x(d, C6/C0, MAX/(C6/C0)); }
        public long toMicros(long d)  { return x(d, C6/C1, MAX/(C6/C1)); }
        public long toMillis(long d)  { return x(d, C6/C2, MAX/(C6/C2)); }
        public long toSeconds(long d) { return x(d, C6/C3, MAX/(C6/C3)); }
        public long toMinutes(long d) { return x(d, C6/C4, MAX/(C6/C4)); }
        public long toHours(long d)   { return x(d, C6/C5, MAX/(C6/C5)); }
        public long toDays(long d)    { return d; }
        public long convert(long d, TimeUnit u) { return u.toDays(d); }
        int excessNanos(long d, long m) { return 0; }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Time unit representing twenty four hours
"
      end

      attribute 2152066 "C0"
	class_attribute const_attribute package explicit_type "long"
	init_value " 1L"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Handy constants for conversion methods
"
      end

      attribute 2152194 "C1"
	class_attribute const_attribute package explicit_type "long"
	init_value " C0 * 1000L"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2152322 "C2"
	class_attribute const_attribute package explicit_type "long"
	init_value " C1 * 1000L"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2152450 "C3"
	class_attribute const_attribute package explicit_type "long"
	init_value " C2 * 1000L"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2152578 "C4"
	class_attribute const_attribute package explicit_type "long"
	init_value " C3 * 60L"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2152706 "C5"
	class_attribute const_attribute package explicit_type "long"
	init_value " C4 * 60L"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2152834 "C6"
	class_attribute const_attribute package explicit_type "long"
	init_value " C5 * 24L"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2152962 "MAX"
	class_attribute const_attribute package explicit_type "long"
	init_value " Long.MAX_VALUE"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9247618 "x"
	class_operation package explicit_return_type "long"
	nparams 3
	  param in name "d" explicit_type "long"
	  param in name "m" explicit_type "long"
	  param in name "over" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scale d by m, checking for overflow.
This has a short name to make above code more readable.
"
      end

      operation 9247746 "convert"
	public explicit_return_type "long"
	nparams 2
	  param in name "sourceDuration" explicit_type "long"
	  param inout name "sourceUnit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " To maintain full signature compatibility with 1.5, and to improve the
 clarity of the generated javadoc (see 6287639: Abstract methods in
 enum classes should not be listed as abstract), method convert
 etc. are not declared abstract but otherwise act as abstract methods.

Converts the given time duration in the given unit to this unit.
Conversions from finer to coarser granularities truncate, so
lose precision. For example, converting {@code 999} milliseconds
to seconds results in {@code 0}. Conversions from coarser to
finer granularities with arguments that would numerically
overflow saturate to {@code Long.MIN_VALUE} if negative or
{@code Long.MAX_VALUE} if positive.

<p>For example, to convert 10 minutes to milliseconds, use:
{@code TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)}

@param sourceDuration the time duration in the given {@code sourceUnit}
@param sourceUnit the unit of the {@code sourceDuration} argument
@return the converted duration in this unit,
or {@code Long.MIN_VALUE} if conversion would negatively
overflow, or {@code Long.MAX_VALUE} if it would positively overflow.
"
      end

      operation 9247874 "toNanos"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to
{@link #convert(long, TimeUnit) NANOSECONDS.convert(duration, this)}.
@param duration the duration
@return the converted duration,
or {@code Long.MIN_VALUE} if conversion would negatively
overflow, or {@code Long.MAX_VALUE} if it would positively overflow.
"
      end

      operation 9248002 "toMicros"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to
{@link #convert(long, TimeUnit) MICROSECONDS.convert(duration, this)}.
@param duration the duration
@return the converted duration,
or {@code Long.MIN_VALUE} if conversion would negatively
overflow, or {@code Long.MAX_VALUE} if it would positively overflow.
"
      end

      operation 9248130 "toMillis"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to
{@link #convert(long, TimeUnit) MILLISECONDS.convert(duration, this)}.
@param duration the duration
@return the converted duration,
or {@code Long.MIN_VALUE} if conversion would negatively
overflow, or {@code Long.MAX_VALUE} if it would positively overflow.
"
      end

      operation 9248258 "toSeconds"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to
{@link #convert(long, TimeUnit) SECONDS.convert(duration, this)}.
@param duration the duration
@return the converted duration,
or {@code Long.MIN_VALUE} if conversion would negatively
overflow, or {@code Long.MAX_VALUE} if it would positively overflow.
"
      end

      operation 9248386 "toMinutes"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to
{@link #convert(long, TimeUnit) MINUTES.convert(duration, this)}.
@param duration the duration
@return the converted duration,
or {@code Long.MIN_VALUE} if conversion would negatively
overflow, or {@code Long.MAX_VALUE} if it would positively overflow.
@since 1.6
"
      end

      operation 9248514 "toHours"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to
{@link #convert(long, TimeUnit) HOURS.convert(duration, this)}.
@param duration the duration
@return the converted duration,
or {@code Long.MIN_VALUE} if conversion would negatively
overflow, or {@code Long.MAX_VALUE} if it would positively overflow.
@since 1.6
"
      end

      operation 9248642 "toDays"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to
{@link #convert(long, TimeUnit) DAYS.convert(duration, this)}.
@param duration the duration
@return the converted duration
@since 1.6
"
      end

      operation 9248770 "excessNanos"
	abstract package explicit_return_type "int"
	nparams 2
	  param in name "d" explicit_type "long"
	  param in name "m" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility to compute the excess-nanosecond argument to wait,
sleep, join.
@param d the duration
@param m the number of milliseconds
@return the number of nanoseconds
"
      end

      operation 9248898 "timedWait"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param in name "timeout" explicit_type "long"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a timed {@link Object#wait(long, int) Object.wait}
using this time unit.
This is a convenience method that converts timeout arguments
into the form required by the {@code Object.wait} method.

<p>For example, you could implement a blocking {@code poll}
method (see {@link BlockingQueue#poll BlockingQueue.poll})
using:

 <pre> {@code
public synchronized Object poll(long timeout, TimeUnit unit)
    throws InterruptedException {
  while (empty) {
    unit.timedWait(this, timeout);
    ...
  }
}}</pre>

@param obj the object to wait on
@param timeout the maximum time to wait. If less than
or equal to zero, do not wait at all.
@throws InterruptedException if interrupted while waiting
"
      end

      operation 9249026 "timedJoin"
	public explicit_return_type "void"
	nparams 2
	  param inout name "thread" type class_ref 128642 // Thread
	  param in name "timeout" explicit_type "long"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a timed {@link Thread#join(long, int) Thread.join}
using this time unit.
This is a convenience method that converts time arguments into the
form required by the {@code Thread.join} method.

@param thread the thread to wait for
@param timeout the maximum time to wait. If less than
or equal to zero, do not wait at all.
@throws InterruptedException if interrupted while waiting
"
      end

      operation 9249154 "sleep"
	public explicit_return_type "void"
	nparams 1
	  param in name "timeout" explicit_type "long"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a {@link Thread#sleep(long, int) Thread.sleep} using
this time unit.
This is a convenience method that converts time arguments into the
form required by the {@code Thread.sleep} method.

@param timeout the minimum time to sleep. If less than
or equal to zero, do not sleep at all.
@throws InterruptedException if interrupted while sleeping
"
      end
    end

    class 984706 "Future"
      visibility public stereotype "interface"
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code Future} represents the result of an asynchronous
computation.  Methods are provided to check if the computation is
complete, to wait for its completion, and to retrieve the result of
the computation.  The result can only be retrieved using method
{@code get} when the computation has completed, blocking if
necessary until it is ready.  Cancellation is performed by the
{@code cancel} method.  Additional methods are provided to
determine if the task completed normally or was cancelled. Once a
computation has completed, the computation cannot be cancelled.
If you would like to use a {@code Future} for the sake
of cancellability but not provide a usable result, you can
declare types of the form {@code Future<?>} and
return {@code null} as a result of the underlying task.

<p>
<b>Sample Usage</b> (Note that the following classes are all
made-up.)
<pre> {@code
interface ArchiveSearcher { String search(String target); }
class App {
  ExecutorService executor = ...
  ArchiveSearcher searcher = ...
  void showSearch(final String target)
      throws InterruptedException {
    Future<String> future
      = executor.submit(new Callable<String>() {
        public String call() {
            return searcher.search(target);
        }});
    displayOtherThings(); // do other things while searching
    try {
      displayText(future.get()); // use future
    } catch (ExecutionException ex) { cleanup(); return; }
  }
}}</pre>

The {@link FutureTask} class is an implementation of {@code Future} that
implements {@code Runnable}, and so may be executed by an {@code Executor}.
For example, the above construction with {@code submit} could be replaced by:
 <pre> {@code
FutureTask<String> future =
  new FutureTask<String>(new Callable<String>() {
    public String call() {
      return searcher.search(target);
  }});
executor.execute(future);}</pre>

<p>Memory consistency effects: Actions taken by the asynchronous computation
<a href=\"package-summary.html#MemoryVisibility\"> <i>happen-before</i></a>
actions following the corresponding {@code Future.get()} in another thread.

@see FutureTask
@see Executor
@since 1.5
@author Doug Lea
@param <V> The result type returned by this Future's {@code get} method
"
      operation 8602498 "cancel"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "mayInterruptIfRunning" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to cancel execution of this task.  This attempt will
fail if the task has already completed, has already been cancelled,
or could not be cancelled for some other reason. If successful,
and this task has not started when {@code cancel} is called,
this task should never run.  If the task has already started,
then the {@code mayInterruptIfRunning} parameter determines
whether the thread executing this task should be interrupted in
an attempt to stop the task.

<p>After this method returns, subsequent calls to {@link #isDone} will
always return {@code true}.  Subsequent calls to {@link #isCancelled}
will always return {@code true} if this method returned {@code true}.

@param mayInterruptIfRunning {@code true} if the thread executing this
task should be interrupted; otherwise, in-progress tasks are allowed
to complete
@return {@code false} if the task could not be cancelled,
typically because it has already completed normally;
{@code true} otherwise
"
      end

      operation 8602626 "isCancelled"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this task was cancelled before it completed
normally.

@return {@code true} if this task was cancelled before it completed
"
      end

      operation 8602754 "isDone"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this task completed.

Completion may be due to normal termination, an exception, or
cancellation -- in all of these cases, this method will return
{@code true}.

@return {@code true} if this task completed
"
      end

      operation 8602882 "get"
	cpp_inline public explicit_return_type "V"
	nparams 0
	nexceptions 2
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits if necessary for the computation to complete, and then
retrieves its result.

@return the computed result
@throws CancellationException if the computation was cancelled
@throws ExecutionException if the computation threw an
exception
@throws InterruptedException if the current thread was interrupted
while waiting
"
      end

      operation 8603010 "get"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 3
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	  exception class_ref 1065602 // TimeoutException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits if necessary for at most the given time for the computation
to complete, and then retrieves its result, if available.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return the computed result
@throws CancellationException if the computation was cancelled
@throws ExecutionException if the computation threw an
exception
@throws InterruptedException if the current thread was interrupted
while waiting
@throws TimeoutException if the wait timed out
"
      end
    end

    class 985090 "ThreadFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that creates new threads on demand.  Using thread factories
removes hardwiring of calls to {@link Thread#Thread(Runnable) new Thread},
enabling applications to use special thread subclasses, priorities, etc.

<p>
The simplest implementation of this interface is just:
 <pre> {@code
class SimpleThreadFactory implements ThreadFactory {
  public Thread newThread(Runnable r) {
    return new Thread(r);
  }
}}</pre>

The {@link Executors#defaultThreadFactory} method provides a more
useful simple implementation, that sets the created thread context
to known values before returning it.
@since 1.5
@author Doug Lea
"
      operation 9170178 "newThread"
	public return_type class_ref 128642 // Thread
	nparams 1
	  param inout name "r" type class_ref 128770 // Runnable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code Thread}.  Implementations may also initialize
priority, name, daemon status, {@code ThreadGroup}, etc.

@param r a runnable to be executed by new thread instance
@return constructed thread, or {@code null} if the request to
        create a thread is rejected
"
      end
    end

    class 985218 "ExecutorService"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An {@link Executor} that provides methods to manage termination and
methods that can produce a {@link Future} for tracking progress of
one or more asynchronous tasks.

<p>An {@code ExecutorService} can be shut down, which will cause
it to reject new tasks.  Two different methods are provided for
shutting down an {@code ExecutorService}. The {@link #shutdown}
method will allow previously submitted tasks to execute before
terminating, while the {@link #shutdownNow} method prevents waiting
tasks from starting and attempts to stop currently executing tasks.
Upon termination, an executor has no tasks actively executing, no
tasks awaiting execution, and no new tasks can be submitted.  An
unused {@code ExecutorService} should be shut down to allow
reclamation of its resources.

<p>Method {@code submit} extends base method {@link
Executor#execute(Runnable)} by creating and returning a {@link Future}
that can be used to cancel execution and/or wait for completion.
Methods {@code invokeAny} and {@code invokeAll} perform the most
commonly useful forms of bulk execution, executing a collection of
tasks and then waiting for at least one, or all, to
complete. (Class {@link ExecutorCompletionService} can be used to
write customized variants of these methods.)

<p>The {@link Executors} class provides factory methods for the
executor services provided in this package.

<h3>Usage Examples</h3>

Here is a sketch of a network service in which threads in a thread
pool service incoming requests. It uses the preconfigured {@link
Executors#newFixedThreadPool} factory method:

 <pre> {@code
class NetworkService implements Runnable {
  private final ServerSocket serverSocket;
  private final ExecutorService pool;

  public NetworkService(int port, int poolSize)
      throws IOException {
    serverSocket = new ServerSocket(port);
    pool = Executors.newFixedThreadPool(poolSize);
  }

  public void run() { // run the service
    try {
      for (;;) {
        pool.execute(new Handler(serverSocket.accept()));
      }
    } catch (IOException ex) {
      pool.shutdown();
    }
  }
}

class Handler implements Runnable {
  private final Socket socket;
  Handler(Socket socket) { this.socket = socket; }
  public void run() {
    // read and service request on socket
  }
}}</pre>

The following method shuts down an {@code ExecutorService} in two phases,
first by calling {@code shutdown} to reject incoming tasks, and then
calling {@code shutdownNow}, if necessary, to cancel any lingering tasks:

 <pre> {@code
void shutdownAndAwaitTermination(ExecutorService pool) {
  pool.shutdown(); // Disable new tasks from being submitted
  try {
    // Wait a while for existing tasks to terminate
    if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {
      pool.shutdownNow(); // Cancel currently executing tasks
      // Wait a while for tasks to respond to being cancelled
      if (!pool.awaitTermination(60, TimeUnit.SECONDS))
          System.err.println(\"Pool did not terminate\");
    }
  } catch (InterruptedException ie) {
    // (Re-)Cancel if current thread also interrupted
    pool.shutdownNow();
    // Preserve interrupt status
    Thread.currentThread().interrupt();
  }
}}</pre>

<p>Memory consistency effects: Actions in a thread prior to the
submission of a {@code Runnable} or {@code Callable} task to an
{@code ExecutorService}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
any actions taken by that task, which in turn <i>happen-before</i> the
result is retrieved via {@code Future.get()}.

@since 1.5
@author Doug Lea
"
      classrelation 3560194 // <generalisation>
	relation 3560194 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3560194 // <generalisation>
	  b parent class_ref 503426 // Executor
      end

      operation 8975618 "shutdown"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initiates an orderly shutdown in which previously submitted
tasks are executed, but no new tasks will be accepted.
Invocation has no additional effect if already shut down.

<p>This method does not wait for previously submitted tasks to
complete execution.  Use {@link #awaitTermination awaitTermination}
to do that.

@throws SecurityException if a security manager exists and
        shutting down this ExecutorService may manipulate
        threads that the caller is not permitted to modify
        because it does not hold {@link
        java.lang.RuntimePermission}{@code (\"modifyThread\")},
        or the security manager's {@code checkAccess} method
        denies access.
"
      end

      operation 8975746 "shutdownNow"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to stop all actively executing tasks, halts the
processing of waiting tasks, and returns a list of the tasks
that were awaiting execution.

<p>This method does not wait for actively executing tasks to
terminate.  Use {@link #awaitTermination awaitTermination} to
do that.

<p>There are no guarantees beyond best-effort attempts to stop
processing actively executing tasks.  For example, typical
implementations will cancel via {@link Thread#interrupt}, so any
task that fails to respond to interrupts may never terminate.

@return list of tasks that never commenced execution
@throws SecurityException if a security manager exists and
        shutting down this ExecutorService may manipulate
        threads that the caller is not permitted to modify
        because it does not hold {@link
        java.lang.RuntimePermission}{@code (\"modifyThread\")},
        or the security manager's {@code checkAccess} method
        denies access.
"
      end

      operation 8975874 "isShutdown"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this executor has been shut down.

@return {@code true} if this executor has been shut down
"
      end

      operation 8976002 "isTerminated"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if all tasks have completed following shut down.
Note that {@code isTerminated} is never {@code true} unless
either {@code shutdown} or {@code shutdownNow} was called first.

@return {@code true} if all tasks have completed following shut down
"
      end

      operation 8976130 "awaitTermination"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Blocks until all tasks have completed execution after a shutdown
request, or the timeout occurs, or the current thread is
interrupted, whichever happens first.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return {@code true} if this executor terminated and
        {@code false} if the timeout elapsed before termination
@throws InterruptedException if interrupted while waiting
"
      end

      operation 8976258 "submit"
	public return_type class_ref 984706 // Future
	nparams 1
	  param inout name "task" type class_ref 339330 // Callable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a value-returning task for execution and returns a
Future representing the pending results of the task. The
Future's {@code get} method will return the task's result upon
successful completion.

<p>
If you would like to immediately block waiting
for a task, you can use constructions of the form
{@code result = exec.submit(aCallable).get();}

<p>Note: The {@link Executors} class includes a set of methods
that can convert some other common closure-like objects,
for example, {@link java.security.PrivilegedAction} to
{@link Callable} form so they can be submitted.

@param task the task to submit
@param <T> the type of the task's result
@return a Future representing pending completion of the task
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if the task is null
"
      end

      operation 8976386 "submit"
	public return_type class_ref 984706 // Future
	nparams 2
	  param inout name "task" type class_ref 128770 // Runnable
	  param inout name "result" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a Runnable task for execution and returns a Future
representing that task. The Future's {@code get} method will
return the given result upon successful completion.

@param task the task to submit
@param result the result to return
@param <T> the type of the result
@return a Future representing pending completion of the task
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if the task is null
"
      end

      operation 8976514 "submit"
	public return_type class_ref 984706 // Future
	nparams 1
	  param inout name "task" type class_ref 128770 // Runnable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a Runnable task for execution and returns a Future
representing that task. The Future's {@code get} method will
return {@code null} upon <em>successful</em> completion.

@param task the task to submit
@return a Future representing pending completion of the task
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if the task is null
"
      end

      operation 8976642 "invokeAll"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "tasks" type class_ref 184194 // Collection
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given tasks, returning a list of Futures holding
their status and results when all complete.
{@link Future#isDone} is {@code true} for each
element of the returned list.
Note that a <em>completed</em> task could have
terminated either normally or by throwing an exception.
The results of this method are undefined if the given
collection is modified while this operation is in progress.

@param tasks the collection of tasks
@param <T> the type of the values returned from the tasks
@return a list of Futures representing the tasks, in the same
        sequential order as produced by the iterator for the
        given task list, each of which has completed
@throws InterruptedException if interrupted while waiting, in
        which case unfinished tasks are cancelled
@throws NullPointerException if tasks or any of its elements are {@code null}
@throws RejectedExecutionException if any task cannot be
        scheduled for execution
"
      end

      operation 8976770 "invokeAll"
	public return_type class_ref 175362 // List
	nparams 3
	  param inout name "tasks" type class_ref 184194 // Collection
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given tasks, returning a list of Futures holding
their status and results
when all complete or the timeout expires, whichever happens first.
{@link Future#isDone} is {@code true} for each
element of the returned list.
Upon return, tasks that have not completed are cancelled.
Note that a <em>completed</em> task could have
terminated either normally or by throwing an exception.
The results of this method are undefined if the given
collection is modified while this operation is in progress.

@param tasks the collection of tasks
@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@param <T> the type of the values returned from the tasks
@return a list of Futures representing the tasks, in the same
        sequential order as produced by the iterator for the
        given task list. If the operation did not time out,
        each task will have completed. If it did time out, some
        of these tasks will not have completed.
@throws InterruptedException if interrupted while waiting, in
        which case unfinished tasks are cancelled
@throws NullPointerException if tasks, any of its elements, or
        unit are {@code null}
@throws RejectedExecutionException if any task cannot be scheduled
        for execution
"
      end

      operation 8976898 "invokeAny"
	public explicit_return_type "T"
	nparams 1
	  param inout name "tasks" type class_ref 184194 // Collection
	nexceptions 2
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given tasks, returning the result
of one that has completed successfully (i.e., without throwing
an exception), if any do. Upon normal or exceptional return,
tasks that have not completed are cancelled.
The results of this method are undefined if the given
collection is modified while this operation is in progress.

@param tasks the collection of tasks
@param <T> the type of the values returned from the tasks
@return the result returned by one of the tasks
@throws InterruptedException if interrupted while waiting
@throws NullPointerException if tasks or any element task
        subject to execution is {@code null}
@throws IllegalArgumentException if tasks is empty
@throws ExecutionException if no task successfully completes
@throws RejectedExecutionException if tasks cannot be scheduled
        for execution
"
      end

      operation 8977026 "invokeAny"
	public explicit_return_type "T"
	nparams 3
	  param inout name "tasks" type class_ref 184194 // Collection
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 3
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	  exception class_ref 1065602 // TimeoutException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given tasks, returning the result
of one that has completed successfully (i.e., without throwing
an exception), if any do before the given timeout elapses.
Upon normal or exceptional return, tasks that have not
completed are cancelled.
The results of this method are undefined if the given
collection is modified while this operation is in progress.

@param tasks the collection of tasks
@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@param <T> the type of the values returned from the tasks
@return the result returned by one of the tasks
@throws InterruptedException if interrupted while waiting
@throws NullPointerException if tasks, or unit, or any element
        task subject to execution is {@code null}
@throws TimeoutException if the given timeout elapses before
        any task successfully completes
@throws ExecutionException if no task successfully completes
@throws RejectedExecutionException if tasks cannot be scheduled
        for execution
"
      end
    end

    class 1065218 "CountedCompleter"
      abstract visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 1065346 // ForkJoinTask
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link ForkJoinTask} with a completion action performed when
triggered and there are no remaining pending actions.
CountedCompleters are in general more robust in the
presence of subtask stalls and blockage than are other forms of
ForkJoinTasks, but are less intuitive to program.  Uses of
CountedCompleter are similar to those of other completion based
components (such as {@link java.nio.channels.CompletionHandler})
except that multiple <em>pending</em> completions may be necessary
to trigger the completion action {@link #onCompletion(CountedCompleter)},
not just one.
Unless initialized otherwise, the {@linkplain #getPendingCount pending
count} starts at zero, but may be (atomically) changed using
methods {@link #setPendingCount}, {@link #addToPendingCount}, and
{@link #compareAndSetPendingCount}. Upon invocation of {@link
#tryComplete}, if the pending action count is nonzero, it is
decremented; otherwise, the completion action is performed, and if
this completer itself has a completer, the process is continued
with its completer.  As is the case with related synchronization
components such as {@link java.util.concurrent.Phaser Phaser} and
{@link java.util.concurrent.Semaphore Semaphore}, these methods
affect only internal counts; they do not establish any further
internal bookkeeping. In particular, the identities of pending
tasks are not maintained. As illustrated below, you can create
subclasses that do record some or all pending tasks or their
results when needed.  As illustrated below, utility methods
supporting customization of completion traversals are also
provided. However, because CountedCompleters provide only basic
synchronization mechanisms, it may be useful to create further
abstract subclasses that maintain linkages, fields, and additional
support methods appropriate for a set of related usages.

<p>A concrete CountedCompleter class must define method {@link
#compute}, that should in most cases (as illustrated below), invoke
{@code tryComplete()} once before returning. The class may also
optionally override method {@link #onCompletion(CountedCompleter)}
to perform an action upon normal completion, and method
{@link #onExceptionalCompletion(Throwable, CountedCompleter)} to
perform an action upon any exception.

<p>CountedCompleters most often do not bear results, in which case
they are normally declared as {@code CountedCompleter<Void>}, and
will always return {@code null} as a result value.  In other cases,
you should override method {@link #getRawResult} to provide a
result from {@code join(), invoke()}, and related methods.  In
general, this method should return the value of a field (or a
function of one or more fields) of the CountedCompleter object that
holds the result upon completion. Method {@link #setRawResult} by
default plays no role in CountedCompleters.  It is possible, but
rarely applicable, to override this method to maintain other
objects or fields holding result data.

<p>A CountedCompleter that does not itself have a completer (i.e.,
one for which {@link #getCompleter} returns {@code null}) can be
used as a regular ForkJoinTask with this added functionality.
However, any completer that in turn has another completer serves
only as an internal helper for other computations, so its own task
status (as reported in methods such as {@link ForkJoinTask#isDone})
is arbitrary; this status changes only upon explicit invocations of
{@link #complete}, {@link ForkJoinTask#cancel},
{@link ForkJoinTask#completeExceptionally(Throwable)} or upon
exceptional completion of method {@code compute}. Upon any
exceptional completion, the exception may be relayed to a task's
completer (and its completer, and so on), if one exists and it has
not otherwise already completed. Similarly, cancelling an internal
CountedCompleter has only a local effect on that completer, so is
not often useful.

<p><b>Sample Usages.</b>

<p><b>Parallel recursive decomposition.</b> CountedCompleters may
be arranged in trees similar to those often used with {@link
RecursiveAction}s, although the constructions involved in setting
them up typically vary. Here, the completer of each task is its
parent in the computation tree. Even though they entail a bit more
bookkeeping, CountedCompleters may be better choices when applying
a possibly time-consuming operation (that cannot be further
subdivided) to each element of an array or collection; especially
when the operation takes a significantly different amount of time
to complete for some elements than others, either because of
intrinsic variation (for example I/O) or auxiliary effects such as
garbage collection.  Because CountedCompleters provide their own
continuations, other threads need not block waiting to perform
them.

<p>For example, here is an initial version of a class that uses
divide-by-two recursive decomposition to divide work into single
pieces (leaf tasks). Even when work is split into individual calls,
tree-based techniques are usually preferable to directly forking
leaf tasks, because they reduce inter-thread communication and
improve load balancing. In the recursive case, the second of each
pair of subtasks to finish triggers completion of its parent
(because no result combination is performed, the default no-op
implementation of method {@code onCompletion} is not overridden).
A static utility method sets up the base task and invokes it
(here, implicitly using the {@link ForkJoinPool#commonPool()}).

<pre> {@code
class MyOperation<E> { void apply(E e) { ... }  }

class ForEach<E> extends CountedCompleter<Void> {

  public static <E> void forEach(E[] array, MyOperation<E> op) {
    new ForEach<E>(null, array, op, 0, array.length).invoke();
  }

  final E[] array; final MyOperation<E> op; final int lo, hi;
  ForEach(CountedCompleter<?> p, E[] array, MyOperation<E> op, int lo, int hi) {
    super(p);
    this.array = array; this.op = op; this.lo = lo; this.hi = hi;
  }

  public void compute() { // version 1
    if (hi - lo >= 2) {
      int mid = (lo + hi) >>> 1;
      setPendingCount(2); // must set pending count before fork
      new ForEach(this, array, op, mid, hi).fork(); // right child
      new ForEach(this, array, op, lo, mid).fork(); // left child
    }
    else if (hi > lo)
      op.apply(array[lo]);
    tryComplete();
  }
}}</pre>

This design can be improved by noticing that in the recursive case,
the task has nothing to do after forking its right task, so can
directly invoke its left task before returning. (This is an analog
of tail recursion removal.)  Also, because the task returns upon
executing its left task (rather than falling through to invoke
{@code tryComplete}) the pending count is set to one:

<pre> {@code
class ForEach<E> ...
  public void compute() { // version 2
    if (hi - lo >= 2) {
      int mid = (lo + hi) >>> 1;
      setPendingCount(1); // only one pending
      new ForEach(this, array, op, mid, hi).fork(); // right child
      new ForEach(this, array, op, lo, mid).compute(); // direct invoke
    }
    else {
      if (hi > lo)
        op.apply(array[lo]);
      tryComplete();
    }
  }
}</pre>

As a further improvement, notice that the left task need not even exist.
Instead of creating a new one, we can iterate using the original task,
and add a pending count for each fork.  Additionally, because no task
in this tree implements an {@link #onCompletion(CountedCompleter)} method,
{@code tryComplete()} can be replaced with {@link #propagateCompletion}.

<pre> {@code
class ForEach<E> ...
  public void compute() { // version 3
    int l = lo,  h = hi;
    while (h - l >= 2) {
      int mid = (l + h) >>> 1;
      addToPendingCount(1);
      new ForEach(this, array, op, mid, h).fork(); // right child
      h = mid;
    }
    if (h > l)
      op.apply(array[l]);
    propagateCompletion();
  }
}</pre>

Additional improvements of such classes might entail precomputing
pending counts so that they can be established in constructors,
specializing classes for leaf steps, subdividing by say, four,
instead of two per iteration, and using an adaptive threshold
instead of always subdividing down to single elements.

<p><b>Searching.</b> A tree of CountedCompleters can search for a
value or property in different parts of a data structure, and
report a result in an {@link
java.util.concurrent.atomic.AtomicReference AtomicReference} as
soon as one is found. The others can poll the result to avoid
unnecessary work. (You could additionally {@linkplain #cancel
cancel} other tasks, but it is usually simpler and more efficient
to just let them notice that the result is set and if so skip
further processing.)  Illustrating again with an array using full
partitioning (again, in practice, leaf tasks will almost always
process more than one element):

<pre> {@code
class Searcher<E> extends CountedCompleter<E> {
  final E[] array; final AtomicReference<E> result; final int lo, hi;
  Searcher(CountedCompleter<?> p, E[] array, AtomicReference<E> result, int lo, int hi) {
    super(p);
    this.array = array; this.result = result; this.lo = lo; this.hi = hi;
  }
  public E getRawResult() { return result.get(); }
  public void compute() { // similar to ForEach version 3
    int l = lo,  h = hi;
    while (result.get() == null && h >= l) {
      if (h - l >= 2) {
        int mid = (l + h) >>> 1;
        addToPendingCount(1);
        new Searcher(this, array, result, mid, h).fork();
        h = mid;
      }
      else {
        E x = array[l];
        if (matches(x) && result.compareAndSet(null, x))
          quietlyCompleteRoot(); // root task is now joinable
        break;
      }
    }
    tryComplete(); // normally complete whether or not found
  }
  boolean matches(E e) { ... } // return true if found

  public static <E> E search(E[] array) {
      return new Searcher<E>(null, array, new AtomicReference<E>(), 0, array.length).invoke();
  }
}}</pre>

In this example, as well as others in which tasks have no other
effects except to compareAndSet a common result, the trailing
unconditional invocation of {@code tryComplete} could be made
conditional ({@code if (result.get() == null) tryComplete();})
because no further bookkeeping is required to manage completions
once the root task completes.

<p><b>Recording subtasks.</b> CountedCompleter tasks that combine
results of multiple subtasks usually need to access these results
in method {@link #onCompletion(CountedCompleter)}. As illustrated in the following
class (that performs a simplified form of map-reduce where mappings
and reductions are all of type {@code E}), one way to do this in
divide and conquer designs is to have each subtask record its
sibling, so that it can be accessed in method {@code onCompletion}.
This technique applies to reductions in which the order of
combining left and right results does not matter; ordered
reductions require explicit left/right designations.  Variants of
other streamlinings seen in the above examples may also apply.

<pre> {@code
class MyMapper<E> { E apply(E v) {  ...  } }
class MyReducer<E> { E apply(E x, E y) {  ...  } }
class MapReducer<E> extends CountedCompleter<E> {
  final E[] array; final MyMapper<E> mapper;
  final MyReducer<E> reducer; final int lo, hi;
  MapReducer<E> sibling;
  E result;
  MapReducer(CountedCompleter<?> p, E[] array, MyMapper<E> mapper,
             MyReducer<E> reducer, int lo, int hi) {
    super(p);
    this.array = array; this.mapper = mapper;
    this.reducer = reducer; this.lo = lo; this.hi = hi;
  }
  public void compute() {
    if (hi - lo >= 2) {
      int mid = (lo + hi) >>> 1;
      MapReducer<E> left = new MapReducer(this, array, mapper, reducer, lo, mid);
      MapReducer<E> right = new MapReducer(this, array, mapper, reducer, mid, hi);
      left.sibling = right;
      right.sibling = left;
      setPendingCount(1); // only right is pending
      right.fork();
      left.compute();     // directly execute left
    }
    else {
      if (hi > lo)
          result = mapper.apply(array[lo]);
      tryComplete();
    }
  }
  public void onCompletion(CountedCompleter<?> caller) {
    if (caller != this) {
      MapReducer<E> child = (MapReducer<E>)caller;
      MapReducer<E> sib = child.sibling;
      if (sib == null || sib.result == null)
        result = child.result;
      else
        result = reducer.apply(child.result, sib.result);
    }
  }
  public E getRawResult() { return result; }

  public static <E> E mapReduce(E[] array, MyMapper<E> mapper, MyReducer<E> reducer) {
    return new MapReducer<E>(null, array, mapper, reducer,
                             0, array.length).invoke();
  }
}}</pre>

Here, method {@code onCompletion} takes a form common to many
completion designs that combine results. This callback-style method
is triggered once per task, in either of the two different contexts
in which the pending count is, or becomes, zero: (1) by a task
itself, if its pending count is zero upon invocation of {@code
tryComplete}, or (2) by any of its subtasks when they complete and
decrement the pending count to zero. The {@code caller} argument
distinguishes cases.  Most often, when the caller is {@code this},
no action is necessary. Otherwise the caller argument can be used
(usually via a cast) to supply a value (and/or links to other
values) to be combined.  Assuming proper use of pending counts, the
actions inside {@code onCompletion} occur (once) upon completion of
a task and its subtasks. No additional synchronization is required
within this method to ensure thread safety of accesses to fields of
this task or other completed tasks.

<p><b>Completion Traversals</b>. If using {@code onCompletion} to
process completions is inapplicable or inconvenient, you can use
methods {@link #firstComplete} and {@link #nextComplete} to create
custom traversals.  For example, to define a MapReducer that only
splits out right-hand tasks in the form of the third ForEach
example, the completions must cooperatively reduce along
unexhausted subtask links, which can be done as follows:

<pre> {@code
class MapReducer<E> extends CountedCompleter<E> { // version 2
  final E[] array; final MyMapper<E> mapper;
  final MyReducer<E> reducer; final int lo, hi;
  MapReducer<E> forks, next; // record subtask forks in list
  E result;
  MapReducer(CountedCompleter<?> p, E[] array, MyMapper<E> mapper,
             MyReducer<E> reducer, int lo, int hi, MapReducer<E> next) {
    super(p);
    this.array = array; this.mapper = mapper;
    this.reducer = reducer; this.lo = lo; this.hi = hi;
    this.next = next;
  }
  public void compute() {
    int l = lo,  h = hi;
    while (h - l >= 2) {
      int mid = (l + h) >>> 1;
      addToPendingCount(1);
      (forks = new MapReducer(this, array, mapper, reducer, mid, h, forks)).fork();
      h = mid;
    }
    if (h > l)
      result = mapper.apply(array[l]);
    // process completions by reducing along and advancing subtask links
    for (CountedCompleter<?> c = firstComplete(); c != null; c = c.nextComplete()) {
      for (MapReducer t = (MapReducer)c, s = t.forks;  s != null; s = t.forks = s.next)
        t.result = reducer.apply(t.result, s.result);
    }
  }
  public E getRawResult() { return result; }

  public static <E> E mapReduce(E[] array, MyMapper<E> mapper, MyReducer<E> reducer) {
    return new MapReducer<E>(null, array, mapper, reducer,
                             0, array.length, null).invoke();
  }
}}</pre>

<p><b>Triggers.</b> Some CountedCompleters are themselves never
forked, but instead serve as bits of plumbing in other designs;
including those in which the completion of one or more async tasks
triggers another async task. For example:

<pre> {@code
class HeaderBuilder extends CountedCompleter<...> { ... }
class BodyBuilder extends CountedCompleter<...> { ... }
class PacketSender extends CountedCompleter<...> {
  PacketSender(...) { super(null, 1); ... } // trigger on second completion
  public void compute() { } // never called
  public void onCompletion(CountedCompleter<?> caller) { sendPacket(); }
}
// sample use:
PacketSender p = new PacketSender();
new HeaderBuilder(p, ...).fork();
new BodyBuilder(p, ...).fork();
}</pre>

@since 1.8
@author Doug Lea
"
      classrelation 3480706 // <realization>
	relation 3480706 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3480706 // <realization>
	  b parent class_ref 1065346 // ForkJoinTask
      end

      attribute 1984130 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5232453752276485070L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3480834 // completer (<unidirectional association>)
	relation 3480834 --->
	  a role_name "completer" const_relation package
	    comment " This task's completer, or null if none 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3480834 // completer (<unidirectional association>)
	  b parent class_ref 1065218 // CountedCompleter
      end

      attribute 1984258 "pending"
	volatile package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of pending tasks until completion 
"
      end

      operation 8613378 "CountedCompleter"
	cpp_inline protected explicit_return_type ""
	nparams 2
	  param inout name "completer" type class_ref 1065218 // CountedCompleter
	  param in name "initialPendingCount" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new CountedCompleter with the given completer
and initial pending count.

@param completer this task's completer, or {@code null} if none
@param initialPendingCount the initial pending count
"
      end

      operation 8613506 "CountedCompleter"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "completer" type class_ref 1065218 // CountedCompleter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new CountedCompleter with the given completer
and an initial pending count of zero.

@param completer this task's completer, or {@code null} if none
"
      end

      operation 8613634 "CountedCompleter"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new CountedCompleter with no completer
and an initial pending count of zero.
"
      end

      operation 8613762 "compute"
	abstract cpp_inline public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The main computation performed by this task.
"
      end

      operation 8613890 "onCompletion"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "caller" type class_ref 1065218 // CountedCompleter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs an action when method {@link #tryComplete} is invoked
and the pending count is zero, or when the unconditional
method {@link #complete} is invoked.  By default, this method
does nothing. You can distinguish cases by checking the
identity of the given caller argument. If not equal to {@code
this}, then it is typically a subtask that may contain results
(and/or links to other results) to combine.

@param caller the task invoking this method (which may
be this task itself)
"
      end

      operation 8614018 "onExceptionalCompletion"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param inout name "ex" type class_ref 129922 // Throwable
	  param inout name "caller" type class_ref 1065218 // CountedCompleter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs an action when method {@link
#completeExceptionally(Throwable)} is invoked or method {@link
#compute} throws an exception, and this task has not already
otherwise completed normally. On entry to this method, this task
{@link ForkJoinTask#isCompletedAbnormally}.  The return value
of this method controls further propagation: If {@code true}
and this task has a completer that has not completed, then that
completer is also completed exceptionally, with the same
exception as this completer.  The default implementation of
this method does nothing except return {@code true}.

@param ex the exception
@param caller the task invoking this method (which may
be this task itself)
@return {@code true} if this exception should be propagated to this
task's completer, if one exists
"
      end

      operation 8614146 "getCompleter"
	cpp_inline public return_type class_ref 1065218 // CountedCompleter
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the completer established in this task's constructor,
or {@code null} if none.

@return the completer
"
      end

      operation 8614274 "getPendingCount"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current pending count.

@return the current pending count
"
      end

      operation 8614402 "setPendingCount"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the pending count to the given value.

@param count the count
"
      end

      operation 8614530 "addToPendingCount"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds (atomically) the given value to the pending count.

@param delta the value to add
"
      end

      operation 8614658 "compareAndSetPendingCount"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param in name "expected" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets (atomically) the pending count to the given count only if
it currently holds the given expected value.

@param expected the expected value
@param count the new value
@return {@code true} if successful
"
      end

      operation 8614786 "decrementPendingCountUnlessZero"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the pending count is nonzero, (atomically) decrements it.

@return the initial (undecremented) pending count holding on entry
to this method
"
      end

      operation 8614914 "getRoot"
	cpp_inline public return_type class_ref 1065218 // CountedCompleter
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root of the current computation; i.e., this
task if it has no completer, else its completer's root.

@return the root of the current computation
"
      end

      operation 8615042 "tryComplete"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the pending count is nonzero, decrements the count;
otherwise invokes {@link #onCompletion(CountedCompleter)}
and then similarly tries to complete this task's completer,
if one exists, else marks this task as complete.
"
      end

      operation 8615170 "propagateCompletion"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@link #tryComplete} but does not invoke {@link
#onCompletion(CountedCompleter)} along the completion path:
If the pending count is nonzero, decrements the count;
otherwise, similarly tries to complete this task's completer, if
one exists, else marks this task as complete. This method may be
useful in cases where {@code onCompletion} should not, or need
not, be invoked for each completer in a computation.
"
      end

      operation 8615298 "complete"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "rawResult" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Regardless of pending count, invokes
{@link #onCompletion(CountedCompleter)}, marks this task as
complete and further triggers {@link #tryComplete} on this
task's completer, if one exists.  The given rawResult is
used as an argument to {@link #setRawResult} before invoking
{@link #onCompletion(CountedCompleter)} or marking this task
as complete; its value is meaningful only for classes
overriding {@code setRawResult}.  This method does not modify
the pending count.

<p>This method may be useful when forcing completion as soon as
any one (versus all) of several subtask results are obtained.
However, in the common (and recommended) case in which {@code
setRawResult} is not overridden, this effect can be obtained
more simply using {@code quietlyCompleteRoot();}.

@param rawResult the raw result
"
      end

      operation 8615426 "firstComplete"
	cpp_inline public return_type class_ref 1065218 // CountedCompleter
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this task's pending count is zero, returns this task;
otherwise decrements its pending count and returns {@code
null}. This method is designed to be used with {@link
#nextComplete} in completion traversal loops.

@return this task, if pending count was zero, else {@code null}
"
      end

      operation 8615554 "nextComplete"
	cpp_inline public return_type class_ref 1065218 // CountedCompleter
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this task does not have a completer, invokes {@link
ForkJoinTask#quietlyComplete} and returns {@code null}.  Or, if
the completer's pending count is non-zero, decrements that
pending count and returns {@code null}.  Otherwise, returns the
completer.  This method can be used as part of a completion
traversal loop for homogeneous task hierarchies:

<pre> {@code
for (CountedCompleter<?> c = firstComplete();
     c != null;
     c = c.nextComplete()) {
  // ... process c ...
}}</pre>

@return the completer, or {@code null} if none
"
      end

      operation 8615682 "quietlyCompleteRoot"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@code getRoot().quietlyComplete()}.
"
      end

      operation 8615810 "helpComplete"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "maxTasks" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this task has not completed, attempts to process at most the
given number of other unprocessed tasks for which this task is
on the completion path, if any are known to exist.

@param maxTasks the maximum number of tasks to process.  If
                less than or equal to zero, then no tasks are
                processed.
"
      end

      operation 8615938 "internalPropagateException"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "ex" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Supports ForkJoinTask exception propagation.
"
      end

      operation 8616066 "exec"
	cpp_inline protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements execution conventions for CountedCompleters.
"
      end

      operation 8616194 "getRawResult"
	cpp_inline public explicit_return_type "T"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of the computation. By default
returns {@code null}, which is appropriate for {@code Void}
actions, but in other cases should be overridden, almost
always to return a field or function of a field that
holds the result upon completion.

@return the result of the computation
"
      end

      operation 8616322 "setRawResult"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "t" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A method that result-bearing CountedCompleters may optionally
use to help maintain result data.  By default, does nothing.
Overrides are not recommended. However, if this method is
overridden to update existing objects or fields, then it must
in general be defined to be thread-safe.
"
      end

      attribute 1984386 "U"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 1984514 "PENDING"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 171650 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            U = sun.misc.Unsafe.getUnsafe();
            PENDING = U.objectFieldOffset
                (CountedCompleter.class.getDeclaredField(\"pending\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 1065346 "ForkJoinTask"
      abstract visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 984706 // Future
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract base class for tasks that run within a {@link ForkJoinPool}.
A {@code ForkJoinTask} is a thread-like entity that is much
lighter weight than a normal thread.  Huge numbers of tasks and
subtasks may be hosted by a small number of actual threads in a
ForkJoinPool, at the price of some usage limitations.

<p>A \"main\" {@code ForkJoinTask} begins execution when it is
explicitly submitted to a {@link ForkJoinPool}, or, if not already
engaged in a ForkJoin computation, commenced in the {@link
ForkJoinPool#commonPool()} via {@link #fork}, {@link #invoke}, or
related methods.  Once started, it will usually in turn start other
subtasks.  As indicated by the name of this class, many programs
using {@code ForkJoinTask} employ only methods {@link #fork} and
{@link #join}, or derivatives such as {@link
#invokeAll(ForkJoinTask...) invokeAll}.  However, this class also
provides a number of other methods that can come into play in
advanced usages, as well as extension mechanics that allow support
of new forms of fork/join processing.

<p>A {@code ForkJoinTask} is a lightweight form of {@link Future}.
The efficiency of {@code ForkJoinTask}s stems from a set of
restrictions (that are only partially statically enforceable)
reflecting their main use as computational tasks calculating pure
functions or operating on purely isolated objects.  The primary
coordination mechanisms are {@link #fork}, that arranges
asynchronous execution, and {@link #join}, that doesn't proceed
until the task's result has been computed.  Computations should
ideally avoid {@code synchronized} methods or blocks, and should
minimize other blocking synchronization apart from joining other
tasks or using synchronizers such as Phasers that are advertised to
cooperate with fork/join scheduling. Subdividable tasks should also
not perform blocking I/O, and should ideally access variables that
are completely independent of those accessed by other running
tasks. These guidelines are loosely enforced by not permitting
checked exceptions such as {@code IOExceptions} to be
thrown. However, computations may still encounter unchecked
exceptions, that are rethrown to callers attempting to join
them. These exceptions may additionally include {@link
RejectedExecutionException} stemming from internal resource
exhaustion, such as failure to allocate internal task
queues. Rethrown exceptions behave in the same way as regular
exceptions, but, when possible, contain stack traces (as displayed
for example using {@code ex.printStackTrace()}) of both the thread
that initiated the computation as well as the thread actually
encountering the exception; minimally only the latter.

<p>It is possible to define and use ForkJoinTasks that may block,
but doing do requires three further considerations: (1) Completion
of few if any <em>other</em> tasks should be dependent on a task
that blocks on external synchronization or I/O. Event-style async
tasks that are never joined (for example, those subclassing {@link
CountedCompleter}) often fall into this category.  (2) To minimize
resource impact, tasks should be small; ideally performing only the
(possibly) blocking action. (3) Unless the {@link
ForkJoinPool.ManagedBlocker} API is used, or the number of possibly
blocked tasks is known to be less than the pool's {@link
ForkJoinPool#getParallelism} level, the pool cannot guarantee that
enough threads will be available to ensure progress or good
performance.

<p>The primary method for awaiting completion and extracting
results of a task is {@link #join}, but there are several variants:
The {@link Future#get} methods support interruptible and/or timed
waits for completion and report results using {@code Future}
conventions. Method {@link #invoke} is semantically
equivalent to {@code fork(); join()} but always attempts to begin
execution in the current thread. The \"<em>quiet</em>\" forms of
these methods do not extract results or report exceptions. These
may be useful when a set of tasks are being executed, and you need
to delay processing of results or exceptions until all complete.
Method {@code invokeAll} (available in multiple versions)
performs the most common form of parallel invocation: forking a set
of tasks and joining them all.

<p>In the most typical usages, a fork-join pair act like a call
(fork) and return (join) from a parallel recursive function. As is
the case with other forms of recursive calls, returns (joins)
should be performed innermost-first. For example, {@code a.fork();
b.fork(); b.join(); a.join();} is likely to be substantially more
efficient than joining {@code a} before {@code b}.

<p>The execution status of tasks may be queried at several levels
of detail: {@link #isDone} is true if a task completed in any way
(including the case where a task was cancelled without executing);
{@link #isCompletedNormally} is true if a task completed without
cancellation or encountering an exception; {@link #isCancelled} is
true if the task was cancelled (in which case {@link #getException}
returns a {@link java.util.concurrent.CancellationException}); and
{@link #isCompletedAbnormally} is true if a task was either
cancelled or encountered an exception, in which case {@link
#getException} will return either the encountered exception or
{@link java.util.concurrent.CancellationException}.

<p>The ForkJoinTask class is not usually directly subclassed.
Instead, you subclass one of the abstract classes that support a
particular style of fork/join processing, typically {@link
RecursiveAction} for most computations that do not return results,
{@link RecursiveTask} for those that do, and {@link
CountedCompleter} for those in which completed actions trigger
other actions.  Normally, a concrete ForkJoinTask subclass declares
fields comprising its parameters, established in a constructor, and
then defines a {@code compute} method that somehow uses the control
methods supplied by this base class.

<p>Method {@link #join} and its variants are appropriate for use
only when completion dependencies are acyclic; that is, the
parallel computation can be described as a directed acyclic graph
(DAG). Otherwise, executions may encounter a form of deadlock as
tasks cyclically wait for each other.  However, this framework
supports other methods and techniques (for example the use of
{@link Phaser}, {@link #helpQuiesce}, and {@link #complete}) that
may be of use in constructing custom subclasses for problems that
are not statically structured as DAGs. To support such usages, a
ForkJoinTask may be atomically <em>tagged</em> with a {@code short}
value using {@link #setForkJoinTaskTag} or {@link
#compareAndSetForkJoinTaskTag} and checked using {@link
#getForkJoinTaskTag}. The ForkJoinTask implementation does not use
these {@code protected} methods or tags for any purpose, but they
may be of use in the construction of specialized subclasses.  For
example, parallel graph traversals can use the supplied methods to
avoid revisiting nodes/tasks that have already been processed.
(Method names for tagging are bulky in part to encourage definition
of methods that reflect their usage patterns.)

<p>Most base support methods are {@code final}, to prevent
overriding of implementations that are intrinsically tied to the
underlying lightweight task scheduling framework.  Developers
creating new basic styles of fork/join processing should minimally
implement {@code protected} methods {@link #exec}, {@link
#setRawResult}, and {@link #getRawResult}, while also introducing
an abstract computational method that can be implemented in its
subclasses, possibly relying on other {@code protected} methods
provided by this class.

<p>ForkJoinTasks should perform relatively small amounts of
computation. Large tasks should be split into smaller subtasks,
usually via recursive decomposition. As a very rough rule of thumb,
a task should perform more than 100 and less than 10000 basic
computational steps, and should avoid indefinite looping. If tasks
are too big, then parallelism cannot improve throughput. If too
small, then memory and internal task maintenance overhead may
overwhelm processing.

<p>This class provides {@code adapt} methods for {@link Runnable}
and {@link Callable}, that may be of use when mixing execution of
{@code ForkJoinTasks} with other kinds of tasks. When all tasks are
of this form, consider using a pool constructed in <em>asyncMode</em>.

<p>ForkJoinTasks are {@code Serializable}, which enables them to be
used in extensions such as remote execution frameworks. It is
sensible to serialize tasks only before or after, but not during,
execution. Serialization is not relied on during execution itself.

@since 1.7
@author Doug Lea
"
      classrelation 3478018 // <realization>
	relation 3478018 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3478018 // <realization>
	  b parent class_ref 984706 // Future
      end

      classrelation 3478146 // <realization>
	relation 3478146 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3478146 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1981698 "status"
	volatile package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "See the internal documentation of class ForkJoinPool for a
general implementation overview.  ForkJoinTasks are mainly
responsible for maintaining their \"status\" field amidst relays
to methods in ForkJoinWorkerThread and ForkJoinPool.

The methods of this class are more-or-less layered into
(1) basic status maintenance
(2) execution and awaiting completion
(3) user-level methods that additionally report results.
This is sometimes hard to see because this file orders exported
methods in a way that flows well in javadocs.


The status field holds run control status bits packed into a
single int to minimize footprint and to ensure atomicity (via
CAS).  Status is initially zero, and takes on nonnegative
values until completed, upon which status (anded with
DONE_MASK) holds value NORMAL, CANCELLED, or EXCEPTIONAL. Tasks
undergoing blocking waits by other threads have the SIGNAL bit
set.  Completion of a stolen task with SIGNAL set awakens any
waiters via notifyAll. Even though suboptimal for some
purposes, we use basic builtin wait/notify to take advantage of
\"monitor inflation\" in JVMs that we would otherwise need to
emulate to avoid adding further per-task bookkeeping overhead.
We want these monitors to be \"fat\", i.e., not use biasing or
thin-lock techniques, so use some odd coding idioms that tend
to avoid them, mainly by arranging that every synchronized
block performs a wait, notifyAll or both.

These control bits occupy only (some of) the upper half (16
bits) of status field. The lower bits are used for user-defined
tags.

 The run status of this task 
 accessed directly by pool and workers"
      end

      attribute 1981826 "DONE_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xf0000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " mask out non-completion bits"
      end

      attribute 1981954 "NORMAL"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xf0000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " must be negative"
      end

      attribute 1982082 "CANCELLED"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xc0000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " must be < NORMAL"
      end

      attribute 1982210 "EXCEPTIONAL"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x80000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " must be < CANCELLED"
      end

      attribute 1982338 "SIGNAL"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x00010000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " must be >= 1 << 16"
      end

      attribute 1982466 "SMASK"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x0000ffff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " short bits for tags"
      end

      operation 8603138 "setCompletion"
	cpp_inline private explicit_return_type "int"
	nparams 1
	  param in name "completion" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks completion and wakes up threads waiting to join this
task.

@param completion one of NORMAL, CANCELLED, EXCEPTIONAL
@return completion status on exit
"
      end

      operation 8603266 "doExec"
	cpp_inline package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Primary execution method for stolen tasks. Unless done, calls
exec and records status if completed, but doesn't wait for
completion otherwise.

@return status on exit from this method
"
      end

      operation 8603394 "internalWait"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param in name "timeout" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If not done, sets SIGNAL status and performs Object.wait(timeout).
This task may or may not be done on exit. Ignores interrupts.

@param timeout using Object.wait conventions.
"
      end

      operation 8603522 "externalAwaitDone"
	cpp_inline private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Blocks a non-worker-thread until completion.
@return status upon completion
"
      end

      operation 8603650 "externalInterruptibleAwaitDone"
	cpp_inline private explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Blocks a non-worker-thread until completion or interruption.
"
      end

      operation 8603778 "doJoin"
	cpp_inline private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implementation for join, get, quietlyJoin. Directly handles
only cases of already-completed, external wait, and
unfork+exec.  Others are relayed to ForkJoinPool.awaitJoin.

@return status upon completion
"
      end

      operation 8603906 "doInvoke"
	cpp_inline private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implementation for invoke, quietlyInvoke.

@return status upon completion
"
      end

      class 1065730 "ExceptionNode"
	visibility package 
	nactuals 1
	actual class class_ref 131330 // WeakReference
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3478658 // <realization>
	  relation 3478658 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3478658 // <realization>
	    b parent class_ref 131330 // WeakReference
	end

	classrelation 3478786 // ex (<unidirectional association>)
	  relation 3478786 --->
	    a role_name "ex" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3478786 // ex (<unidirectional association>)
	    b parent class_ref 129922 // Throwable
	end

	classrelation 3478914 // next (<unidirectional association>)
	  relation 3478914 --->
	    a role_name "next" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3478914 // next (<unidirectional association>)
	    b parent class_ref 1065730 // ExceptionNode
	end

	attribute 1982722 "thrower"
	  const_attribute package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " use id not ref to avoid weak cycles"
	end

	attribute 1982850 "hashCode"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " store task hashCode before weak ref disappears"
	end

	operation 8604034 "ExceptionNode"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "task" type class_ref 1065346 // ForkJoinTask
	    param inout name "ex" type class_ref 129922 // Throwable
	    param inout name "next" type class_ref 1065730 // ExceptionNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3478274 // exceptionTable (<unidirectional association>)
	relation 3478274 --->
	  a role_name "exceptionTable" multiplicity "[]" class_relation const_relation private
	    comment " Exception table support

Table of exceptions thrown by tasks, to enable reporting by
callers. Because exceptions are rare, we don't directly keep
them with task objects, but instead use a weak ref table.  Note
that cancellation exceptions don't appear in the table, but are
instead recorded as status values.

Note: These statics are initialized below in static block.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3478274 // exceptionTable (<unidirectional association>)
	  b parent class_ref 1065730 // ExceptionNode
      end

      classrelation 3478402 // exceptionTableLock (<unidirectional association>)
	relation 3478402 --->
	  a role_name "exceptionTableLock" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3478402 // exceptionTableLock (<unidirectional association>)
	  b parent class_ref 968706 // ReentrantLock
      end

      classrelation 3478530 // exceptionTableRefQueue (<unidirectional association>)
	relation 3478530 --->
	  a role_name "exceptionTableRefQueue" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 3478530 // exceptionTableRefQueue (<unidirectional association>)
	  b parent class_ref 130946 // ReferenceQueue
      end

      attribute 1982594 "EXCEPTION_MAP_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Fixed capacity for exceptionTable.

"
      end

      operation 8604162 "recordExceptionalCompletion"
	cpp_inline package explicit_return_type "int"
	nparams 1
	  param inout name "ex" type class_ref 129922 // Throwable
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Records exception and sets status.

@return status on exit
"
      end

      operation 8604290 "setExceptionalCompletion"
	cpp_inline private explicit_return_type "int"
	nparams 1
	  param inout name "ex" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Records exception and possibly propagates.

@return status on exit
"
      end

      operation 8604418 "internalPropagateException"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "ex" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Hook for exception propagation support for tasks with completers.
"
      end

      operation 8604546 "cancelIgnoringExceptions"
	class_operation cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 1065346 // ForkJoinTask
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels, ignoring any exceptions thrown by cancel. Used during
worker and pool shutdown. Cancel is spec'ed not to throw any
exceptions, but if it does anyway, we have no recourse during
shutdown, so guard against this case.
"
      end

      operation 8604674 "clearExceptionalCompletion"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes exception node and clears status.
"
      end

      operation 8604802 "getThrowableException"
	cpp_inline private return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a rethrowable exception for the given task, if
available. To provide accurate stack traces, if the exception
was not thrown by the current thread, we try to create a new
exception of the same type as the one thrown, but with the
recorded exception as its cause. If there is no such
constructor, we instead try to use a no-arg constructor,
followed by initCause, to the same effect. If none of these
apply, or any fail due to other exceptions, we return the
recorded exception, which is still correct, although it may
contain a misleading stack trace.

@return the exception, or null if none
"
      end

      operation 8604930 "expungeStaleExceptions"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Poll stale refs and remove them. Call only while holding lock.
"
      end

      operation 8605058 "helpExpungeStaleExceptions"
	class_operation cpp_inline package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If lock is available, poll stale refs and remove them.
Called from ForkJoinPool when pools become quiescent.
"
      end

      operation 8605186 "rethrow"
	class_operation cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "ex" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A version of \"sneaky throw\" to relay exceptions
"
      end

      operation 8605314 "uncheckedThrow"
	class_operation cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 129922 // Throwable
	nexceptions 1
	  explicit_exception "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Throwable> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "The sneaky part of sneaky throw, relying on generics
limitations to evade compiler complaints about rethrowing
unchecked exceptions
"
      end

      operation 8605442 "reportException"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws exception, if any, associated with the given status.
"
      end

      operation 8605570 "fork"
	cpp_inline public return_type class_ref 1065346 // ForkJoinTask
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " public methods

Arranges to asynchronously execute this task in the pool the
current task is running in, if applicable, or using the {@link
ForkJoinPool#commonPool()} if not {@link #inForkJoinPool}.  While
it is not necessarily enforced, it is a usage error to fork a
task more than once unless it has completed and been
reinitialized.  Subsequent modifications to the state of this
task or any data it operates on are not necessarily
consistently observable by any thread other than the one
executing it unless preceded by a call to {@link #join} or
related methods, or a call to {@link #isDone} returning {@code
true}.

@return {@code this}, to simplify usage
"
      end

      operation 8605698 "join"
	cpp_inline public explicit_return_type "V"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of the computation when it {@link #isDone is
done}.  This method differs from {@link #get()} in that
abnormal completion results in {@code RuntimeException} or
{@code Error}, not {@code ExecutionException}, and that
interrupts of the calling thread do <em>not</em> cause the
method to abruptly return by throwing {@code
InterruptedException}.

@return the computed result
"
      end

      operation 8605826 "invoke"
	cpp_inline public explicit_return_type "V"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Commences performing this task, awaits its completion if
necessary, and returns its result, or throws an (unchecked)
{@code RuntimeException} or {@code Error} if the underlying
computation did so.

@return the computed result
"
      end

      operation 8605954 "invokeAll"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "t1" type class_ref 1065346 // ForkJoinTask
	  param inout name "t2" type class_ref 1065346 // ForkJoinTask
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forks the given tasks, returning when {@code isDone} holds for
each task or an (unchecked) exception is encountered, in which
case the exception is rethrown. If more than one task
encounters an exception, then this method throws any one of
these exceptions. If any task encounters an exception, the
other may be cancelled. However, the execution status of
individual tasks is not guaranteed upon exceptional return. The
status of each task may be obtained using {@link
#getException()} and related methods to check if they have been
cancelled, completed normally or exceptionally, or left
unprocessed.

@param t1 the first task
@param t2 the second task
@throws NullPointerException if any task is null
"
      end

      operation 8606082 "invokeAll"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "tasks" explicit_type "ForkJoinTask<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forks the given tasks, returning when {@code isDone} holds for
each task or an (unchecked) exception is encountered, in which
case the exception is rethrown. If more than one task
encounters an exception, then this method throws any one of
these exceptions. If any task encounters an exception, others
may be cancelled. However, the execution status of individual
tasks is not guaranteed upon exceptional return. The status of
each task may be obtained using {@link #getException()} and
related methods to check if they have been cancelled, completed
normally or exceptionally, or left unprocessed.

@param tasks the tasks
@throws NullPointerException if any task is null
"
      end

      operation 8606210 "invokeAll"
	class_operation cpp_inline public return_type class_ref 184194 // Collection
	nparams 1
	  param inout name "tasks" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends ForkJoinTask<?>> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forks all tasks in the specified collection, returning when
{@code isDone} holds for each task or an (unchecked) exception
is encountered, in which case the exception is rethrown. If
more than one task encounters an exception, then this method
throws any one of these exceptions. If any task encounters an
exception, others may be cancelled. However, the execution
status of individual tasks is not guaranteed upon exceptional
return. The status of each task may be obtained using {@link
#getException()} and related methods to check if they have been
cancelled, completed normally or exceptionally, or left
unprocessed.

@param tasks the collection of tasks
@param <T> the type of the values returned from the tasks
@return the tasks argument, to simplify usage
@throws NullPointerException if tasks or any element are null
"
      end

      operation 8606338 "cancel"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "mayInterruptIfRunning" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to cancel execution of this task. This attempt will
fail if the task has already completed or could not be
cancelled for some other reason. If successful, and this task
has not started when {@code cancel} is called, execution of
this task is suppressed. After this method returns
successfully, unless there is an intervening call to {@link
#reinitialize}, subsequent calls to {@link #isCancelled},
{@link #isDone}, and {@code cancel} will return {@code true}
and calls to {@link #join} and related methods will result in
{@code CancellationException}.

<p>This method may be overridden in subclasses, but if so, must
still ensure that these properties hold. In particular, the
{@code cancel} method itself must not throw exceptions.

<p>This method is designed to be invoked by <em>other</em>
tasks. To terminate the current task, you can just return or
throw an unchecked exception from its computation method, or
invoke {@link #completeExceptionally(Throwable)}.

@param mayInterruptIfRunning this value has no effect in the
default implementation because interrupts are not used to
control cancellation.

@return {@code true} if this task is now cancelled
"
      end

      operation 8606466 "isDone"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8606594 "isCancelled"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8606722 "isCompletedAbnormally"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this task threw an exception or was cancelled.

@return {@code true} if this task threw an exception or was cancelled
"
      end

      operation 8606850 "isCompletedNormally"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this task completed without throwing an
exception and was not cancelled.

@return {@code true} if this task completed without throwing an
exception and was not cancelled
"
      end

      operation 8606978 "getException"
	cpp_inline public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exception thrown by the base computation, or a
{@code CancellationException} if cancelled, or {@code null} if
none or if the method has not yet completed.

@return the exception, or {@code null} if none
"
      end

      operation 8607106 "completeExceptionally"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "ex" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes this task abnormally, and if not already aborted or
cancelled, causes it to throw the given exception upon
{@code join} and related operations. This method may be used
to induce exceptions in asynchronous tasks, or to force
completion of tasks that would not otherwise complete.  Its use
in other situations is discouraged.  This method is
overridable, but overridden versions must invoke {@code super}
implementation to maintain guarantees.

@param ex the exception to throw. If this exception is not a
{@code RuntimeException} or {@code Error}, the actual exception
thrown will be a {@code RuntimeException} with cause {@code ex}.
"
      end

      operation 8607234 "complete"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes this task, and if not already aborted or cancelled,
returning the given value as the result of subsequent
invocations of {@code join} and related operations. This method
may be used to provide results for asynchronous tasks, or to
provide alternative handling for tasks that would not otherwise
complete normally. Its use in other situations is
discouraged. This method is overridable, but overridden
versions must invoke {@code super} implementation to maintain
guarantees.

@param value the result value for this task
"
      end

      operation 8607362 "quietlyComplete"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes this task normally without setting a value. The most
recent value established by {@link #setRawResult} (or {@code
null} by default) will be returned as the result of subsequent
invocations of {@code join} and related operations.

@since 1.8
"
      end

      operation 8607490 "get"
	cpp_inline public explicit_return_type "V"
	nparams 0
	nexceptions 2
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits if necessary for the computation to complete, and then
retrieves its result.

@return the computed result
@throws CancellationException if the computation was cancelled
@throws ExecutionException if the computation threw an
exception
@throws InterruptedException if the current thread is not a
member of a ForkJoinPool and was interrupted while waiting
"
      end

      operation 8607618 "get"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 3
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	  exception class_ref 1065602 // TimeoutException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits if necessary for at most the given time for the computation
to complete, and then retrieves its result, if available.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return the computed result
@throws CancellationException if the computation was cancelled
@throws ExecutionException if the computation threw an
exception
@throws InterruptedException if the current thread is not a
member of a ForkJoinPool and was interrupted while waiting
@throws TimeoutException if the wait timed out
"
      end

      operation 8607746 "quietlyJoin"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Joins this task, without returning its result or throwing its
exception. This method may be useful when processing
collections of tasks when some have been cancelled or otherwise
known to have aborted.
"
      end

      operation 8607874 "quietlyInvoke"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Commences performing this task and awaits its completion if
necessary, without returning its result or throwing its
exception.
"
      end

      operation 8608002 "helpQuiesce"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Possibly executes tasks until the pool hosting the current task
{@link ForkJoinPool#isQuiescent is quiescent}. This method may
be of use in designs in which many tasks are forked, but none
are explicitly joined, instead executing them until all are
processed.
"
      end

      operation 8608130 "reinitialize"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the internal bookkeeping state of this task, allowing a
subsequent {@code fork}. This method allows repeated reuse of
this task, but only if reuse occurs when this task has either
never been forked, or has been forked, then completed and all
outstanding joins of this task have also completed. Effects
under any other usage conditions are not guaranteed.
This method may be useful when executing
pre-constructed trees of subtasks in loops.

<p>Upon completion of this method, {@code isDone()} reports
{@code false}, and {@code getException()} reports {@code
null}. However, the value returned by {@code getRawResult} is
unaffected. To clear this value, you can invoke {@code
setRawResult(null)}.
"
      end

      operation 8608258 "getPool"
	class_operation cpp_inline public return_type class_ref 1065858 // ForkJoinPool
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pool hosting the current task execution, or null
if this task is executing outside of any ForkJoinPool.

@see #inForkJoinPool
@return the pool, or {@code null} if none
"
      end

      operation 8608386 "inForkJoinPool"
	class_operation cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if the current thread is a {@link
ForkJoinWorkerThread} executing as a ForkJoinPool computation.

@return {@code true} if the current thread is a {@link
ForkJoinWorkerThread} executing as a ForkJoinPool computation,
or {@code false} otherwise
"
      end

      operation 8608514 "tryUnfork"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to unschedule this task for execution. This method will
typically (but is not guaranteed to) succeed if this task is
the most recently forked task by the current thread, and has
not commenced executing in another thread.  This method may be
useful when arranging alternative local processing of tasks
that could have been, but were not, stolen.

@return {@code true} if unforked
"
      end

      operation 8608642 "getQueuedTaskCount"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of tasks that have been
forked by the current worker thread but not yet executed. This
value may be useful for heuristic decisions about whether to
fork other tasks.

@return the number of tasks
"
      end

      operation 8608770 "getSurplusQueuedTaskCount"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of how many more locally queued tasks are
held by the current worker thread than there are other worker
threads that might steal them, or zero if this thread is not
operating in a ForkJoinPool. This value may be useful for
heuristic decisions about whether to fork other tasks. In many
usages of ForkJoinTasks, at steady state, each worker should
aim to maintain a small constant surplus (for example, 3) of
tasks, and to process computations locally if this threshold is
exceeded.

@return the surplus number of tasks, which may be negative
"
      end

      operation 8608898 "getRawResult"
	abstract cpp_inline public explicit_return_type "V"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Extension methods

Returns the result that would be returned by {@link #join}, even
if this task completed abnormally, or {@code null} if this task
is not known to have been completed.  This method is designed
to aid debugging, as well as to support extensions. Its use in
any other context is discouraged.

@return the result, or {@code null} if not completed
"
      end

      operation 8609026 "setRawResult"
	abstract cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forces the given value to be returned as a result.  This method
is designed to support extensions, and should not in general be
called otherwise.

@param value the value
"
      end

      operation 8609154 "exec"
	abstract cpp_inline protected explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Immediately performs the base action of this task and returns
true if, upon return from this method, this task is guaranteed
to have completed normally. This method may return false
otherwise, to indicate that this task is not necessarily
complete (or is not known to be complete), for example in
asynchronous actions that require explicit invocations of
completion methods. This method may also throw an (unchecked)
exception to indicate abnormal exit. This method is designed to
support extensions, and should not in general be called
otherwise.

@return {@code true} if this task is known to have completed normally
"
      end

      operation 8609282 "peekNextLocalTask"
	class_operation cpp_inline protected return_type class_ref 1065346 // ForkJoinTask
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns, but does not unschedule or execute, a task queued by
the current thread but not yet executed, if one is immediately
available. There is no guarantee that this task will actually
be polled or executed next. Conversely, this method may return
null even if a task exists but cannot be accessed without
contention with other threads.  This method is designed
primarily to support extensions, and is unlikely to be useful
otherwise.

@return the next task, or {@code null} if none are available
"
      end

      operation 8609410 "pollNextLocalTask"
	class_operation cpp_inline protected return_type class_ref 1065346 // ForkJoinTask
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unschedules and returns, without executing, the next task
queued by the current thread but not yet executed, if the
current thread is operating in a ForkJoinPool.  This method is
designed primarily to support extensions, and is unlikely to be
useful otherwise.

@return the next task, or {@code null} if none are available
"
      end

      operation 8609538 "pollTask"
	class_operation cpp_inline protected return_type class_ref 1065346 // ForkJoinTask
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the current thread is operating in a ForkJoinPool,
unschedules and returns, without executing, the next task
queued by the current thread but not yet executed, if one is
available, or if not available, a task that was forked by some
other thread, if available. Availability may be transient, so a
{@code null} result does not necessarily imply quiescence of
the pool this task is operating in.  This method is designed
primarily to support extensions, and is unlikely to be useful
otherwise.

@return a task, or {@code null} if none are available
"
      end

      operation 8609666 "getForkJoinTaskTag"
	cpp_inline public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " tag operations

Returns the tag for this task.

@return the tag for this task
@since 1.8
"
      end

      operation 8609794 "setForkJoinTaskTag"
	cpp_inline public explicit_return_type "short"
	nparams 1
	  param in name "tag" explicit_type "short"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the tag value for this task.

@param tag the tag value
@return the previous value of the tag
@since 1.8
"
      end

      operation 8609922 "compareAndSetForkJoinTaskTag"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param in name "e" explicit_type "short"
	  param in name "tag" explicit_type "short"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically conditionally sets the tag value for this task.
Among other applications, tags can be used as visit markers
in tasks operating on graphs, as in methods that check: {@code
if (task.compareAndSetForkJoinTaskTag((short)0, (short)1))}
before processing, otherwise exiting because the node has
already been visited.

@param e the expected tag value
@param tag the new tag value
@return {@code true} if successful; i.e., the current value was
equal to e and is now tag.
@since 1.8
"
      end

      class 1065986 "AdaptedRunnable"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1065346 // ForkJoinTask
	  rank 0 explicit_value ""
	actual class class_ref 1066114 // RunnableFuture
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3479042 // <realization>
	  relation 3479042 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3479042 // <realization>
	    b parent class_ref 1065346 // ForkJoinTask
	end

	classrelation 3479426 // <realization>
	  relation 3479426 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3479426 // <realization>
	    b parent class_ref 1066114 // RunnableFuture
	end

	classrelation 3479554 // runnable (<unidirectional association>)
	  relation 3479554 --->
	    a role_name "runnable" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3479554 // runnable (<unidirectional association>)
	    b parent class_ref 128770 // Runnable
	end

	attribute 1982978 "result"
	  package explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8610178 "AdaptedRunnable"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "runnable" type class_ref 128770 // Runnable
	    param inout name "result" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8610306 "getRawResult"
	  cpp_inline public explicit_return_type "T"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8610434 "setRawResult"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "v" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8610562 "exec"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8610690 "run"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1983106 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 5232453952276885070L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 1066242 "AdaptedRunnableAction"
	visibility package 
	nactuals 2
	actual class class_ref 1065346 // ForkJoinTask
	  rank 0 explicit_value ""
	actual class class_ref 1066114 // RunnableFuture
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3479682 // <realization>
	  relation 3479682 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3479682 // <realization>
	    b parent class_ref 1065346 // ForkJoinTask
	end

	classrelation 3479810 // <realization>
	  relation 3479810 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3479810 // <realization>
	    b parent class_ref 1066114 // RunnableFuture
	end

	classrelation 3479938 // runnable (<unidirectional association>)
	  relation 3479938 --->
	    a role_name "runnable" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3479938 // runnable (<unidirectional association>)
	    b parent class_ref 128770 // Runnable
	end

	operation 8610818 "AdaptedRunnableAction"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "runnable" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8610946 "getRawResult"
	  cpp_inline public return_type class_ref 146946 // Void
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8611074 "setRawResult"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "v" type class_ref 146946 // Void
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8611202 "exec"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8611330 "run"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1983234 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 5232453952276885070L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 1066370 "RunnableExecuteAction"
	visibility package 
	nactuals 1
	actual class class_ref 1065346 // ForkJoinTask
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3480066 // <realization>
	  relation 3480066 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3480066 // <realization>
	    b parent class_ref 1065346 // ForkJoinTask
	end

	classrelation 3480194 // runnable (<unidirectional association>)
	  relation 3480194 --->
	    a role_name "runnable" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3480194 // runnable (<unidirectional association>)
	    b parent class_ref 128770 // Runnable
	end

	operation 8611458 "RunnableExecuteAction"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "runnable" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8611586 "getRawResult"
	  cpp_inline public return_type class_ref 146946 // Void
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8611714 "setRawResult"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "v" type class_ref 146946 // Void
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8611842 "exec"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8611970 "internalPropagateException"
	  cpp_inline package explicit_return_type "void"
	  nparams 1
	    param inout name "ex" type class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1983362 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 5232453952276885070L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 1066498 "AdaptedCallable"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1065346 // ForkJoinTask
	  rank 0 explicit_value ""
	actual class class_ref 1066114 // RunnableFuture
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3480322 // <realization>
	  relation 3480322 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3480322 // <realization>
	    b parent class_ref 1065346 // ForkJoinTask
	end

	classrelation 3480450 // <realization>
	  relation 3480450 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3480450 // <realization>
	    b parent class_ref 1066114 // RunnableFuture
	end

	classrelation 3480578 // callable (<unidirectional association>)
	  relation 3480578 --->
	    a role_name "callable" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends T> ${name}${value};
"
	      classrelation_ref 3480578 // callable (<unidirectional association>)
	    b parent class_ref 339330 // Callable
	end

	attribute 1983490 "result"
	  package explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8612098 "AdaptedCallable"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "callable" type class_ref 339330 // Callable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8612226 "getRawResult"
	  cpp_inline public explicit_return_type "T"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8612354 "setRawResult"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "v" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8612482 "exec"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8612610 "run"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1983618 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 2838392045355241008L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 8612738 "adapt"
	class_operation cpp_inline public return_type class_ref 1065346 // ForkJoinTask
	nparams 1
	  param inout name "runnable" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code ForkJoinTask} that performs the {@code run}
method of the given {@code Runnable} as its action, and returns
a null result upon {@link #join}.

@param runnable the runnable action
@return the task
"
      end

      operation 8612866 "adapt"
	class_operation cpp_inline public return_type class_ref 1065346 // ForkJoinTask
	nparams 2
	  param inout name "runnable" type class_ref 128770 // Runnable
	  param inout name "result" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code ForkJoinTask} that performs the {@code run}
method of the given {@code Runnable} as its action, and returns
the given result upon {@link #join}.

@param runnable the runnable action
@param result the result upon completion
@param <T> the type of the result
@return the task
"
      end

      operation 8612994 "adapt"
	class_operation cpp_inline public return_type class_ref 1065346 // ForkJoinTask
	nparams 1
	  param inout name "callable" type class_ref 339330 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code ForkJoinTask} that performs the {@code call}
method of the given {@code Callable} as its action, and returns
its result upon {@link #join}, translating any checked exceptions
encountered into {@code RuntimeException}.

@param callable the callable action
@param <T> the type of the callable's result
@return the task
"
      end

      attribute 1983746 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7721805057305804111L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization support
"
      end

      operation 8613122 "writeObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves this task to a stream (that is, serializes it).

@param s the stream
@throws java.io.IOException if an I/O error occurs
@serialData the current run status and the exception thrown
during execution, or {@code null} if none
"
      end

      operation 8613250 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes this task from a stream (that is, deserializes it).
@param s the stream
@throws ClassNotFoundException if the class of a serialized object
        could not be found
@throws java.io.IOException if an I/O error occurs
"
      end

      attribute 1983874 "U"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 1984002 "STATUS"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 171522 "initialization"
	
	cpp "" ""
	java "  static {
        exceptionTableLock = new ReentrantLock();
        exceptionTableRefQueue = new ReferenceQueue<Object>();
        exceptionTable = new ExceptionNode[EXCEPTION_MAP_CAPACITY];
        try {
            U = sun.misc.Unsafe.getUnsafe();
            Class<?> k = ForkJoinTask.class;
            STATUS = U.objectFieldOffset
                (k.getDeclaredField(\"status\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 1065474 "ExecutionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception thrown when attempting to retrieve the result of a task
that aborted by throwing an exception. This exception can be
inspected using the {@link #getCause()} method.

@see Future
@since 1.5
@author Doug Lea
"
      classrelation 3617922 // <generalisation>
	relation 3617922 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3617922 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 2130818 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7830266012832686185L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9162370 "ExecutionException"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code ExecutionException} with no detail message.
The cause is not initialized, and may subsequently be
initialized by a call to {@link #initCause(Throwable) initCause}.
"
      end

      operation 9162498 "ExecutionException"
	protected explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code ExecutionException} with the specified detail
message. The cause is not initialized, and may subsequently be
initialized by a call to {@link #initCause(Throwable) initCause}.

@param message the detail message
"
      end

      operation 9162626 "ExecutionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code ExecutionException} with the specified detail
message and cause.

@param  message the detail message
@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)
"
      end

      operation 9162754 "ExecutionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code ExecutionException} with the specified cause.
The detail message is set to {@code (cause == null ? null :
cause.toString())} (which typically contains the class and
detail message of {@code cause}).

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)
"
      end
    end

    class 1065602 "TimeoutException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception thrown when a blocking operation times out.  Blocking
operations for which a timeout is specified need a means to
indicate that the timeout has occurred. For many such operations it
is possible to return a value that indicates timeout; when that is
not possible or desirable then {@code TimeoutException} should be
declared and thrown.

@since 1.5
@author Doug Lea
"
      classrelation 3642498 // <generalisation>
	relation 3642498 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3642498 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 2151042 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1900926677490660714L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9247362 "TimeoutException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TimeoutException} with no specified detail
message.
"
      end

      operation 9247490 "TimeoutException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TimeoutException} with the specified detail
message.

@param message the detail message
"
      end
    end

    class 1065858 "ForkJoinPool"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@sun.misc.Contended
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An {@link ExecutorService} for running {@link ForkJoinTask}s.
A {@code ForkJoinPool} provides the entry point for submissions
from non-{@code ForkJoinTask} clients, as well as management and
monitoring operations.

<p>A {@code ForkJoinPool} differs from other kinds of {@link
ExecutorService} mainly by virtue of employing
<em>work-stealing</em>: all threads in the pool attempt to find and
execute tasks submitted to the pool and/or created by other active
tasks (eventually blocking waiting for work if none exist). This
enables efficient processing when most tasks spawn other subtasks
(as do most {@code ForkJoinTask}s), as well as when many small
tasks are submitted to the pool from external clients.  Especially
when setting <em>asyncMode</em> to true in constructors, {@code
ForkJoinPool}s may also be appropriate for use with event-style
tasks that are never joined.

<p>A static {@link #commonPool()} is available and appropriate for
most applications. The common pool is used by any ForkJoinTask that
is not explicitly submitted to a specified pool. Using the common
pool normally reduces resource usage (its threads are slowly
reclaimed during periods of non-use, and reinstated upon subsequent
use).

<p>For applications that require separate or custom pools, a {@code
ForkJoinPool} may be constructed with a given target parallelism
level; by default, equal to the number of available processors.
The pool attempts to maintain enough active (or available) threads
by dynamically adding, suspending, or resuming internal worker
threads, even if some tasks are stalled waiting to join others.
However, no such adjustments are guaranteed in the face of blocked
I/O or other unmanaged synchronization. The nested {@link
ManagedBlocker} interface enables extension of the kinds of
synchronization accommodated.

<p>In addition to execution and lifecycle control methods, this
class provides status check methods (for example
{@link #getStealCount}) that are intended to aid in developing,
tuning, and monitoring fork/join applications. Also, method
{@link #toString} returns indications of pool state in a
convenient form for informal monitoring.

<p>As is the case with other ExecutorServices, there are three
main task execution methods summarized in the following table.
These are designed to be used primarily by clients not already
engaged in fork/join computations in the current pool.  The main
forms of these methods accept instances of {@code ForkJoinTask},
but overloaded forms also allow mixed execution of plain {@code
Runnable}- or {@code Callable}- based activities as well.  However,
tasks that are already executing in a pool should normally instead
use the within-computation forms listed in the table unless using
async event-style tasks that are not usually joined, in which case
there is little difference among choice of methods.

<table BORDER CELLPADDING=3 CELLSPACING=1>
<caption>Summary of task execution methods</caption>
 <tr>
   <td></td>
   <td ALIGN=CENTER> <b>Call from non-fork/join clients</b></td>
   <td ALIGN=CENTER> <b>Call from within fork/join computations</b></td>
 </tr>
 <tr>
   <td> <b>Arrange async execution</b></td>
   <td> {@link #execute(ForkJoinTask)}</td>
   <td> {@link ForkJoinTask#fork}</td>
 </tr>
 <tr>
   <td> <b>Await and obtain result</b></td>
   <td> {@link #invoke(ForkJoinTask)}</td>
   <td> {@link ForkJoinTask#invoke}</td>
 </tr>
 <tr>
   <td> <b>Arrange exec and obtain Future</b></td>
   <td> {@link #submit(ForkJoinTask)}</td>
   <td> {@link ForkJoinTask#fork} (ForkJoinTasks <em>are</em> Futures)</td>
 </tr>
</table>

<p>The common pool is by default constructed with default
parameters, but these may be controlled by setting three
{@linkplain System#getProperty system properties}:
<ul>
<li>{@code java.util.concurrent.ForkJoinPool.common.parallelism}
- the parallelism level, a non-negative integer
<li>{@code java.util.concurrent.ForkJoinPool.common.threadFactory}
- the class name of a {@link ForkJoinWorkerThreadFactory}
<li>{@code java.util.concurrent.ForkJoinPool.common.exceptionHandler}
- the class name of a {@link UncaughtExceptionHandler}
</ul>
If a {@link SecurityManager} is present and no factory is
specified, then the default pool uses a factory supplying
threads that have no {@link Permissions} enabled.
The system class loader is used to load these classes.
Upon any error in establishing these settings, default parameters
are used. It is possible to disable or limit the use of threads in
the common pool by setting the parallelism property to zero, and/or
using a factory that may return {@code null}. However doing so may
cause unjoined tasks to never be executed.

<p><b>Implementation notes</b>: This implementation restricts the
maximum number of running threads to 32767. Attempts to create
pools with greater than the maximum number result in
{@code IllegalArgumentException}.

<p>This implementation rejects submitted tasks (that is, by throwing
{@link RejectedExecutionException}) only when the pool is shut down
or internal resources have been exhausted.

@since 1.7
@author Doug Lea
"
      class 1104002 "ManagedBlocker"
	visibility public stereotype "interface"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 9022210 "block"
	  public explicit_return_type "boolean"
	  nparams 0
	  nexceptions 1
	    exception class_ref 129666 // InterruptedException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Possibly blocks the current thread, for example waiting for
a lock or condition.

@return {@code true} if no additional blocking is necessary
(i.e., if isReleasable would return true)
@throws InterruptedException if interrupted while waiting
(the method is not required to do so, but is allowed to)
"
	end

	operation 9022338 "isReleasable"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns {@code true} if blocking is unnecessary.
@return {@code true} if blocking is unnecessary
"
	end
      end

      classrelation 3570434 // <generalisation>
	relation 3570434 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3570434 // <generalisation>
	  b parent class_ref 1099266 // AbstractExecutorService
      end

      operation 9010178 "checkPermission"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implementation Overview

This class and its nested classes provide the main
functionality and control for a set of worker threads:
Submissions from non-FJ threads enter into submission queues.
Workers take these tasks and typically split them into subtasks
that may be stolen by other workers.  Preference rules give
first priority to processing tasks from their own queues (LIFO
or FIFO, depending on mode), then to randomized FIFO steals of
tasks in other queues.  This framework began as vehicle for
supporting tree-structured parallelism using work-stealing.
Over time, its scalability advantages led to extensions and
changes to better support more diverse usage contexts.  Because
most internal methods and nested classes are interrelated,
their main rationale and descriptions are presented here;
individual methods and nested classes contain only brief
comments about details.

WorkQueues
==========

Most operations occur within work-stealing queues (in nested
class WorkQueue).  These are special forms of Deques that
support only three of the four possible end-operations -- push,
pop, and poll (aka steal), under the further constraints that
push and pop are called only from the owning thread (or, as
extended here, under a lock), while poll may be called from
other threads.  (If you are unfamiliar with them, you probably
want to read Herlihy and Shavit's book \"The Art of
Multiprocessor programming\", chapter 16 describing these in
more detail before proceeding.)  The main work-stealing queue
design is roughly similar to those in the papers \"Dynamic
Circular Work-Stealing Deque\" by Chase and Lev, SPAA 2005
(http://research.sun.com/scalable/pubs/index.html) and
\"Idempotent work stealing\" by Michael, Saraswat, and Vechev,
PPoPP 2009 (http://portal.acm.org/citation.cfm?id=1504186).
The main differences ultimately stem from GC requirements that
we null out taken slots as soon as we can, to maintain as small
a footprint as possible even in programs generating huge
numbers of tasks. To accomplish this, we shift the CAS
arbitrating pop vs poll (steal) from being on the indices
(\"base\" and \"top\") to the slots themselves.

Adding tasks then takes the form of a classic array push(task):
   q.array[q.top] = task; ++q.top;

(The actual code needs to null-check and size-check the array,
properly fence the accesses, and possibly signal waiting
workers to start scanning -- see below.)  Both a successful pop
and poll mainly entail a CAS of a slot from non-null to null.

The pop operation (always performed by owner) is:
  if ((base != top) and
       (the task at top slot is not null) and
       (CAS slot to null))
          decrement top and return task;

And the poll operation (usually by a stealer) is
   if ((base != top) and
       (the task at base slot is not null) and
       (base has not changed) and
       (CAS slot to null))
          increment base and return task;

Because we rely on CASes of references, we do not need tag bits
on base or top.  They are simple ints as used in any circular
array-based queue (see for example ArrayDeque).  Updates to the
indices guarantee that top == base means the queue is empty,
but otherwise may err on the side of possibly making the queue
appear nonempty when a push, pop, or poll have not fully
committed. (Method isEmpty() checks the case of a partially
completed removal of the last element.)  Because of this, the
poll operation, considered individually, is not wait-free. One
thief cannot successfully continue until another in-progress
one (or, if previously empty, a push) completes.  However, in
the aggregate, we ensure at least probabilistic
non-blockingness.  If an attempted steal fails, a thief always
chooses a different random victim target to try next. So, in
order for one thief to progress, it suffices for any
in-progress poll or new push on any empty queue to
complete. (This is why we normally use method pollAt and its
variants that try once at the apparent base index, else
consider alternative actions, rather than method poll, which
retries.)

This approach also enables support of a user mode in which
local task processing is in FIFO, not LIFO order, simply by
using poll rather than pop.  This can be useful in
message-passing frameworks in which tasks are never joined.
However neither mode considers affinities, loads, cache
localities, etc, so rarely provide the best possible
performance on a given machine, but portably provide good
throughput by averaging over these factors.  Further, even if
we did try to use such information, we do not usually have a
basis for exploiting it.  For example, some sets of tasks
profit from cache affinities, but others are harmed by cache
pollution effects. Additionally, even though it requires
scanning, long-term throughput is often best using random
selection rather than directed selection policies, so cheap
randomization of sufficient quality is used whenever
applicable.  Various Marsaglia XorShifts (some with different
shift constants) are inlined at use points.

WorkQueues are also used in a similar way for tasks submitted
to the pool. We cannot mix these tasks in the same queues used
by workers. Instead, we randomly associate submission queues
with submitting threads, using a form of hashing.  The
ThreadLocalRandom probe value serves as a hash code for
choosing existing queues, and may be randomly repositioned upon
contention with other submitters.  In essence, submitters act
like workers except that they are restricted to executing local
tasks that they submitted (or in the case of CountedCompleters,
others with the same root task).  Insertion of tasks in shared
mode requires a lock (mainly to protect in the case of
resizing) but we use only a simple spinlock (using field
qlock), because submitters encountering a busy queue move on to
try or create other queues -- they block only when creating and
registering new queues. Additionally, \"qlock\" saturates to an
unlockable value (-1) at shutdown. Unlocking still can be and
is performed by cheaper ordered writes of \"qlock\" in successful
cases, but uses CAS in unsuccessful cases.

Management
==========

The main throughput advantages of work-stealing stem from
decentralized control -- workers mostly take tasks from
themselves or each other, at rates that can exceed a billion
per second.  The pool itself creates, activates (enables
scanning for and running tasks), deactivates, blocks, and
terminates threads, all with minimal central information.
There are only a few properties that we can globally track or
maintain, so we pack them into a small number of variables,
often maintaining atomicity without blocking or locking.
Nearly all essentially atomic control state is held in two
volatile variables that are by far most often read (not
written) as status and consistency checks. (Also, field
\"config\" holds unchanging configuration state.)

Field \"ctl\" contains 64 bits holding information needed to
atomically decide to add, inactivate, enqueue (on an event
queue), dequeue, and/or re-activate workers.  To enable this
packing, we restrict maximum parallelism to (1<<15)-1 (which is
far in excess of normal operating range) to allow ids, counts,
and their negations (used for thresholding) to fit into 16bit
subfields.

Field \"runState\" holds lockable state bits (STARTED, STOP, etc)
also protecting updates to the workQueues array.  When used as
a lock, it is normally held only for a few instructions (the
only exceptions are one-time array initialization and uncommon
resizing), so is nearly always available after at most a brief
spin. But to be extra-cautious, after spinning, method
awaitRunStateLock (called only if an initial CAS fails), uses a
wait/notify mechanics on a builtin monitor to block when
(rarely) needed. This would be a terrible idea for a highly
contended lock, but most pools run without the lock ever
contending after the spin limit, so this works fine as a more
conservative alternative. Because we don't otherwise have an
internal Object to use as a monitor, the \"stealCounter\" (an
AtomicLong) is used when available (it too must be lazily
initialized; see externalSubmit).

Usages of \"runState\" vs \"ctl\" interact in only one case:
deciding to add a worker thread (see tryAddWorker), in which
case the ctl CAS is performed while the lock is held.

Recording WorkQueues.  WorkQueues are recorded in the
\"workQueues\" array. The array is created upon first use (see
externalSubmit) and expanded if necessary.  Updates to the
array while recording new workers and unrecording terminated
ones are protected from each other by the runState lock, but
the array is otherwise concurrently readable, and accessed
directly. We also ensure that reads of the array reference
itself never become too stale. To simplify index-based
operations, the array size is always a power of two, and all
readers must tolerate null slots. Worker queues are at odd
indices. Shared (submission) queues are at even indices, up to
a maximum of 64 slots, to limit growth even if array needs to
expand to add more workers. Grouping them together in this way
simplifies and speeds up task scanning.

All worker thread creation is on-demand, triggered by task
submissions, replacement of terminated workers, and/or
compensation for blocked workers. However, all other support
code is set up to work with other policies.  To ensure that we
do not hold on to worker references that would prevent GC, All
accesses to workQueues are via indices into the workQueues
array (which is one source of some of the messy code
constructions here). In essence, the workQueues array serves as
a weak reference mechanism. Thus for example the stack top
subfield of ctl stores indices, not references.

Queuing Idle Workers. Unlike HPC work-stealing frameworks, we
cannot let workers spin indefinitely scanning for tasks when
none can be found immediately, and we cannot start/resume
workers unless there appear to be tasks available.  On the
other hand, we must quickly prod them into action when new
tasks are submitted or generated. In many usages, ramp-up time
to activate workers is the main limiting factor in overall
performance, which is compounded at program start-up by JIT
compilation and allocation. So we streamline this as much as
possible.

The \"ctl\" field atomically maintains active and total worker
counts as well as a queue to place waiting threads so they can
be located for signalling. Active counts also play the role of
quiescence indicators, so are decremented when workers believe
that there are no more tasks to execute. The \"queue\" is
actually a form of Treiber stack.  A stack is ideal for
activating threads in most-recently used order. This improves
performance and locality, outweighing the disadvantages of
being prone to contention and inability to release a worker
unless it is topmost on stack.  We park/unpark workers after
pushing on the idle worker stack (represented by the lower
32bit subfield of ctl) when they cannot find work.  The top
stack state holds the value of the \"scanState\" field of the
worker: its index and status, plus a version counter that, in
addition to the count subfields (also serving as version
stamps) provide protection against Treiber stack ABA effects.

Field scanState is used by both workers and the pool to manage
and track whether a worker is INACTIVE (possibly blocked
waiting for a signal), or SCANNING for tasks (when neither hold
it is busy running tasks).  When a worker is inactivated, its
scanState field is set, and is prevented from executing tasks,
even though it must scan once for them to avoid queuing
races. Note that scanState updates lag queue CAS releases so
usage requires care. When queued, the lower 16 bits of
scanState must hold its pool index. So we place the index there
upon initialization (see registerWorker) and otherwise keep it
there or restore it when necessary.

Memory ordering.  See \"Correct and Efficient Work-Stealing for
Weak Memory Models\" by Le, Pop, Cohen, and Nardelli, PPoPP 2013
(http://www.di.ens.fr/~zappa/readings/ppopp13.pdf) for an
analysis of memory ordering requirements in work-stealing
algorithms similar to the one used here.  We usually need
stronger than minimal ordering because we must sometimes signal
workers, requiring Dekker-like full-fences to avoid lost
signals.  Arranging for enough ordering without expensive
over-fencing requires tradeoffs among the supported means of
expressing access constraints. The most central operations,
taking from queues and updating ctl state, require full-fence
CAS.  Array slots are read using the emulation of volatiles
provided by Unsafe.  Access from other threads to WorkQueue
base, top, and array requires a volatile load of the first of
any of these read.  We use the convention of declaring the
\"base\" index volatile, and always read it before other fields.
The owner thread must ensure ordered updates, so writes use
ordered intrinsics unless they can piggyback on those for other
writes.  Similar conventions and rationales hold for other
WorkQueue fields (such as \"currentSteal\") that are only written
by owners but observed by others.

Creating workers. To create a worker, we pre-increment total
count (serving as a reservation), and attempt to construct a
ForkJoinWorkerThread via its factory. Upon construction, the
new thread invokes registerWorker, where it constructs a
WorkQueue and is assigned an index in the workQueues array
(expanding the array if necessary). The thread is then
started. Upon any exception across these steps, or null return
from factory, deregisterWorker adjusts counts and records
accordingly.  If a null return, the pool continues running with
fewer than the target number workers. If exceptional, the
exception is propagated, generally to some external caller.
Worker index assignment avoids the bias in scanning that would
occur if entries were sequentially packed starting at the front
of the workQueues array. We treat the array as a simple
power-of-two hash table, expanding as needed. The seedIndex
increment ensures no collisions until a resize is needed or a
worker is deregistered and replaced, and thereafter keeps
probability of collision low. We cannot use
ThreadLocalRandom.getProbe() for similar purposes here because
the thread has not started yet, but do so for creating
submission queues for existing external threads.

Deactivation and waiting. Queuing encounters several intrinsic
races; most notably that a task-producing thread can miss
seeing (and signalling) another thread that gave up looking for
work but has not yet entered the wait queue.  When a worker
cannot find a task to steal, it deactivates and enqueues. Very
often, the lack of tasks is transient due to GC or OS
scheduling. To reduce false-alarm deactivation, scanners
compute checksums of queue states during sweeps.  (The
stability checks used here and elsewhere are probabilistic
variants of snapshot techniques -- see Herlihy & Shavit.)
Workers give up and try to deactivate only after the sum is
stable across scans. Further, to avoid missed signals, they
repeat this scanning process after successful enqueuing until
again stable.  In this state, the worker cannot take/run a task
it sees until it is released from the queue, so the worker
itself eventually tries to release itself or any successor (see
tryRelease).  Otherwise, upon an empty scan, a deactivated
worker uses an adaptive local spin construction (see awaitWork)
before blocking (via park). Note the unusual conventions about
Thread.interrupts surrounding parking and other blocking:
Because interrupts are used solely to alert threads to check
termination, which is checked anyway upon blocking, we clear
status (using Thread.interrupted) before any call to park, so
that park does not immediately return due to status being set
via some other unrelated call to interrupt in user code.

Signalling and activation.  Workers are created or activated
only when there appears to be at least one task they might be
able to find and execute.  Upon push (either by a worker or an
external submission) to a previously (possibly) empty queue,
workers are signalled if idle, or created if fewer exist than
the given parallelism level.  These primary signals are
buttressed by others whenever other threads remove a task from
a queue and notice that there are other tasks there as well.
On most platforms, signalling (unpark) overhead time is
noticeably long, and the time between signalling a thread and
it actually making progress can be very noticeably long, so it
is worth offloading these delays from critical paths as much as
possible. Also, because inactive workers are often rescanning
or spinning rather than blocking, we set and clear the \"parker\"
field of WorkQueues to reduce unnecessary calls to unpark.
(This requires a secondary recheck to avoid missed signals.)

Trimming workers. To release resources after periods of lack of
use, a worker starting to wait when the pool is quiescent will
time out and terminate (see awaitWork) if the pool has remained
quiescent for period IDLE_TIMEOUT, increasing the period as the
number of threads decreases, eventually removing all workers.
Also, when more than two spare threads exist, excess threads
are immediately terminated at the next quiescent point.
(Padding by two avoids hysteresis.)

Shutdown and Termination. A call to shutdownNow invokes
tryTerminate to atomically set a runState bit. The calling
thread, as well as every other worker thereafter terminating,
helps terminate others by setting their (qlock) status,
cancelling their unprocessed tasks, and waking them up, doing
so repeatedly until stable (but with a loop bounded by the
number of workers).  Calls to non-abrupt shutdown() preface
this by checking whether termination should commence. This
relies primarily on the active count bits of \"ctl\" maintaining
consensus -- tryTerminate is called from awaitWork whenever
quiescent. However, external submitters do not take part in
this consensus.  So, tryTerminate sweeps through queues (until
stable) to ensure lack of in-flight submissions and workers
about to process them before triggering the \"STOP\" phase of
termination. (Note: there is an intrinsic conflict if
helpQuiescePool is called when shutdown is enabled. Both wait
for quiescence, but tryTerminate is biased to not trigger until
helpQuiescePool completes.)


Joining Tasks
=============

Any of several actions may be taken when one worker is waiting
to join a task stolen (or always held) by another.  Because we
are multiplexing many tasks on to a pool of workers, we can't
just let them block (as in Thread.join).  We also cannot just
reassign the joiner's run-time stack with another and replace
it later, which would be a form of \"continuation\", that even if
possible is not necessarily a good idea since we may need both
an unblocked task and its continuation to progress.  Instead we
combine two tactics:

  Helping: Arranging for the joiner to execute some task that it
     would be running if the steal had not occurred.

  Compensating: Unless there are already enough live threads,
     method tryCompensate() may create or re-activate a spare
     thread to compensate for blocked joiners until they unblock.

A third form (implemented in tryRemoveAndExec) amounts to
helping a hypothetical compensator: If we can readily tell that
a possible action of a compensator is to steal and execute the
task being joined, the joining thread can do so directly,
without the need for a compensation thread (although at the
expense of larger run-time stacks, but the tradeoff is
typically worthwhile).

The ManagedBlocker extension API can't use helping so relies
only on compensation in method awaitBlocker.

The algorithm in helpStealer entails a form of \"linear
helping\".  Each worker records (in field currentSteal) the most
recent task it stole from some other worker (or a submission).
It also records (in field currentJoin) the task it is currently
actively joining. Method helpStealer uses these markers to try
to find a worker to help (i.e., steal back a task from and
execute it) that could hasten completion of the actively joined
task.  Thus, the joiner executes a task that would be on its
own local deque had the to-be-joined task not been stolen. This
is a conservative variant of the approach described in Wagner &
Calder \"Leapfrogging: a portable technique for implementing
efficient futures\" SIGPLAN Notices, 1993
(http://portal.acm.org/citation.cfm?id=155354). It differs in
that: (1) We only maintain dependency links across workers upon
steals, rather than use per-task bookkeeping.  This sometimes
requires a linear scan of workQueues array to locate stealers,
but often doesn't because stealers leave hints (that may become
stale/wrong) of where to locate them.  It is only a hint
because a worker might have had multiple steals and the hint
records only one of them (usually the most current).  Hinting
isolates cost to when it is needed, rather than adding to
per-task overhead.  (2) It is \"shallow\", ignoring nesting and
potentially cyclic mutual steals.  (3) It is intentionally
racy: field currentJoin is updated only while actively joining,
which means that we miss links in the chain during long-lived
tasks, GC stalls etc (which is OK since blocking in such cases
is usually a good idea).  (4) We bound the number of attempts
to find work using checksums and fall back to suspending the
worker and if necessary replacing it with another.

Helping actions for CountedCompleters do not require tracking
currentJoins: Method helpComplete takes and executes any task
with the same root as the task being waited on (preferring
local pops to non-local polls). However, this still entails
some traversal of completer chains, so is less efficient than
using CountedCompleters without explicit joins.

Compensation does not aim to keep exactly the target
parallelism number of unblocked threads running at any given
time. Some previous versions of this class employed immediate
compensations for any blocked join. However, in practice, the
vast majority of blockages are transient byproducts of GC and
other JVM or OS activities that are made worse by replacement.
Currently, compensation is attempted only after validating that
all purportedly active threads are processing tasks by checking
field WorkQueue.scanState, which eliminates most false
positives.  Also, compensation is bypassed (tolerating fewer
threads) in the most common case in which it is rarely
beneficial: when a worker with an empty queue (thus no
continuation tasks) blocks on a join and there still remain
enough threads to ensure liveness.

The compensation mechanism may be bounded.  Bounds for the
commonPool (see commonMaxSpares) better enable JVMs to cope
with programming errors and abuse before running out of
resources to do so. In other cases, users may supply factories
that limit thread construction. The effects of bounding in this
pool (like all others) is imprecise.  Total worker counts are
decremented when threads deregister, not when they exit and
resources are reclaimed by the JVM and OS. So the number of
simultaneously live threads may transiently exceed bounds.

Common Pool
===========

The static common pool always exists after static
initialization.  Since it (or any other created pool) need
never be used, we minimize initial construction overhead and
footprint to the setup of about a dozen fields, with no nested
allocation. Most bootstrapping occurs within method
externalSubmit during the first submission to the pool.

When external threads submit to the common pool, they can
perform subtask processing (see externalHelpComplete and
related methods) upon joins.  This caller-helps policy makes it
sensible to set common pool parallelism level to one (or more)
less than the total number of available cores, or even zero for
pure caller-runs.  We do not need to record whether external
submissions are to the common pool -- if not, external help
methods return quickly. These submitters would otherwise be
blocked waiting for completion, so the extra effort (with
liberally sprinkled task status checks) in inapplicable cases
amounts to an odd form of limited spin-wait before blocking in
ForkJoinTask.join.

As a more appropriate default in managed environments, unless
overridden by system properties, we use workers of subclass
InnocuousForkJoinWorkerThread when there is a SecurityManager
present. These workers have no permissions set, do not belong
to any user-defined ThreadGroup, and erase all ThreadLocals
after executing any top-level task (see WorkQueue.runTask).
The associated mechanics (mainly in ForkJoinWorkerThread) may
be JVM-dependent and must access particular Thread class fields
to achieve this effect.

Style notes
===========

Memory ordering relies mainly on Unsafe intrinsics that carry
the further responsibility of explicitly performing null- and
bounds- checks otherwise carried out implicitly by JVMs.  This
can be awkward and ugly, but also reflects the need to control
outcomes across the unusual cases that arise in very racy code
with very few invariants. So these explicit checks would exist
in some form anyway.  All fields are read into locals before
use, and null-checked if they are references.  This is usually
done in a \"C\"-like style of listing declarations at the heads
of methods or blocks, and using inline assignments on first
encounter.  Array bounds-checks are usually performed by
masking with array.length-1, which relies on the invariant that
these arrays are created with positive lengths, which is itself
paranoically checked. Nearly all explicit checks lead to
bypass/return, not exception throws, because they may
legitimately arise due to cancellation/revocation during
shutdown.

There is a lot of representation-level coupling among classes
ForkJoinPool, ForkJoinWorkerThread, and ForkJoinTask.  The
fields of WorkQueue maintain data structures managed by
ForkJoinPool, so are directly accessed.  There is little point
trying to reduce this, since any associated future changes in
representations will need to be accompanied by algorithmic
changes anyway. Several methods intrinsically sprawl because
they must accumulate sets of consistent reads of fields held in
local variables.  There are also other coding oddities
(including several unnecessary-looking hoisted null checks)
that help some methods perform reasonably even when interpreted
(not compiled).

The order of declarations in this file is (with a few exceptions):
(1) Static utility functions
(2) Nested (static) classes
(3) Static fields
(4) Fields, along with constants used when unpacking some of them
(5) Internal control methods
(6) Callbacks and other support for ForkJoinTask methods
(7) Exported methods
(8) Static block initializing statics in minimally dependent order

 Static utilities

If there is a security manager, makes sure caller has
permission to modify threads.
"
      end

      class 1104130 "ForkJoinWorkerThreadFactory"
	visibility public stereotype "interface"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 9010306 "newThread"
	  public return_type class_ref 1104258 // ForkJoinWorkerThread
	  nparams 1
	    param inout name "pool" type class_ref 1065858 // ForkJoinPool
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a new worker thread operating in the given pool.

@param pool the pool this thread works in
@return the new worker thread
@throws NullPointerException if the pool is null
"
	end
      end

      class 1104386 "DefaultForkJoinWorkerThreadFactory"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3570562 // <realization>
	  relation 3570562 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3570562 // <realization>
	    b parent class_ref 1104130 // ForkJoinWorkerThreadFactory
	end

	operation 9010434 "newThread"
	  public return_type class_ref 1104258 // ForkJoinWorkerThread
	  nparams 1
	    param inout name "pool" type class_ref 1065858 // ForkJoinPool
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1104514 "EmptyTask"
	visibility package 
	nactuals 1
	actual class class_ref 1065346 // ForkJoinTask
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3570690 // <realization>
	  relation 3570690 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3570690 // <realization>
	    b parent class_ref 1065346 // ForkJoinTask
	end

	attribute 2095362 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -7721805057305804111L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9010562 "EmptyTask"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9010690 "getRawResult"
	  public return_type class_ref 146946 // Void
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " force done"
	end

	operation 9010818 "setRawResult"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "x" type class_ref 146946 // Void
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9010946 "exec"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 2095490 "SMASK"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xffff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constants shared across ForkJoinPool and WorkQueue
 Bounds
 short bits == max index"
      end

      attribute 2095618 "MAX_CAP"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x7fff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " max #workers - 1"
      end

      attribute 2095746 "EVENMASK"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xfffe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " even short bits"
      end

      attribute 2095874 "SQMASK"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x007e"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " max 64 (even) slots"
      end

      attribute 2096002 "SCANNING"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Masks and units for WorkQueue.scanState and ctl sp subfield
 false when running tasks"
      end

      attribute 2096130 "INACTIVE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1 << 31"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " must be negative"
      end

      attribute 2096258 "SS_SEQ"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1 << 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " version count"
      end

      attribute 2096386 "MODE_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xffff << 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Mode bits for ForkJoinPool.config and WorkQueue.config
 top half of int"
      end

      attribute 2096514 "LIFO_QUEUE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2096642 "FIFO_QUEUE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1 << 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2096770 "SHARED_QUEUE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1 << 31"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " must be negative"
      end

      class 1104642 "WorkQueue"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@sun.misc.Contended
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2096898 "INITIAL_QUEUE_CAPACITY"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 13"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Capacity of work-stealing queue array upon initialization.
Must be a power of two; at least 4, but should be larger to
reduce or eliminate cacheline sharing among queues.
Currently, it is much larger, as a partial workaround for
the fact that JVMs often place arrays in locations that
share GC bookkeeping (especially cardmarks) such that
per-write accesses encounter serious memory contention.

"
	end

	attribute 2097026 "MAXIMUM_QUEUE_CAPACITY"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 26"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Maximum size for queue arrays. Must be a power of two less
than or equal to 1 << (31 - width of array entry) to ensure
lack of wraparound of index calculations, but defined to a
value a bit less than this to help users trap runaway
programs before saturating systems.

 64M"
	end

	attribute 2097154 "scanState"
	  volatile package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Instance fields
 versioned, <0: inactive; odd:scanning"
	end

	attribute 2097282 "stackPred"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " pool stack (ctl) predecessor"
	end

	attribute 2097410 "nsteals"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " number of steals"
	end

	attribute 2097538 "hint"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " randomization and stealer index hint"
	end

	attribute 2097666 "config"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " pool index and mode"
	end

	attribute 2097794 "qlock"
	  volatile package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " 1: locked, < 0: terminate; else 0"
	end

	attribute 2097922 "base"
	  volatile package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " index of next slot for poll"
	end

	attribute 2098050 "top"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " index of next slot for push"
	end

	classrelation 3570818 // array (<unidirectional association>)
	  relation 3570818 --->
	    a role_name "array" multiplicity "[]" package
	      comment " the elements (initially unallocated)"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	      classrelation_ref 3570818 // array (<unidirectional association>)
	    b parent class_ref 1065346 // ForkJoinTask
	end

	classrelation 3570946 // pool (<unidirectional association>)
	  relation 3570946 --->
	    a role_name "pool" const_relation package
	      comment " the containing pool (may be null)"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3570946 // pool (<unidirectional association>)
	    b parent class_ref 1065858 // ForkJoinPool
	end

	classrelation 3571074 // owner (<unidirectional association>)
	  relation 3571074 --->
	    a role_name "owner" const_relation package
	      comment " owning thread or null if shared"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3571074 // owner (<unidirectional association>)
	    b parent class_ref 1104258 // ForkJoinWorkerThread
	end

	classrelation 3571202 // parker (<unidirectional association>)
	  relation 3571202 --->
	    a role_name "parker" volatile package
	      comment " == owner during call to park; else null"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3571202 // parker (<unidirectional association>)
	    b parent class_ref 128642 // Thread
	end

	classrelation 3571330 // currentJoin (<unidirectional association>)
	  relation 3571330 --->
	    a role_name "currentJoin" volatile package
	      comment " task being joined in awaitJoin"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3571330 // currentJoin (<unidirectional association>)
	    b parent class_ref 1065346 // ForkJoinTask
	end

	classrelation 3571458 // currentSteal (<unidirectional association>)
	  relation 3571458 --->
	    a role_name "currentSteal" volatile package
	      comment " mainly used by helpStealer"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3571458 // currentSteal (<unidirectional association>)
	    b parent class_ref 1065346 // ForkJoinTask
	end

	operation 9011074 "WorkQueue"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "pool" type class_ref 1065858 // ForkJoinPool
	    param inout name "owner" type class_ref 1104258 // ForkJoinWorkerThread
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9011202 "getPoolIndex"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns an exportable index (used by ForkJoinWorkerThread).
"
	end

	operation 9011330 "queueSize"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the approximate number of tasks in the queue.
"
	end

	operation 9011458 "isEmpty"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Provides a more accurate estimate of whether this queue has
any tasks than does queueSize, by checking whether a
near-empty queue has at least one unclaimed task.
"
	end

	operation 9011586 "push"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "task" type class_ref 1065346 // ForkJoinTask
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Pushes a task. Call only by owner in unshared queues.  (The
shared-queue version is embedded in method externalPush.)

@param task the task. Caller must ensure non-null.
@throws RejectedExecutionException if array cannot be resized
"
	end

	operation 9011714 "growArray"
	  package return_type class_ref 1065346 // ForkJoinTask
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Initializes or doubles the capacity of array. Call either
by owner or with lock held -- it is OK for base, but not
top, to move while resizings are in progress.
"
	end

	operation 9011842 "pop"
	  package return_type class_ref 1065346 // ForkJoinTask
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Takes next task, if one exists, in LIFO order.  Call only
by owner in unshared queues.
"
	end

	operation 9011970 "pollAt"
	  package return_type class_ref 1065346 // ForkJoinTask
	  nparams 1
	    param in name "b" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Takes a task in FIFO order if b is base of queue and a task
can be claimed without contention. Specialized versions
appear in ForkJoinPool methods scan and helpStealer.
"
	end

	operation 9012098 "poll"
	  package return_type class_ref 1065346 // ForkJoinTask
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Takes next task, if one exists, in FIFO order.
"
	end

	operation 9012226 "nextLocalTask"
	  package return_type class_ref 1065346 // ForkJoinTask
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Takes next task, if one exists, in order specified by mode.
"
	end

	operation 9012354 "peek"
	  package return_type class_ref 1065346 // ForkJoinTask
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns next task, if one exists, in order specified by mode.
"
	end

	operation 9012482 "tryUnpush"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "t" type class_ref 1065346 // ForkJoinTask
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Pops the given task only if it is at the current top.
(A shared version is available only via FJP.tryExternalUnpush)
"
	end

	operation 9012610 "cancelAll"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes and cancels all known tasks, ignoring any exceptions.
"
	end

	operation 9012738 "pollAndExecAll"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Specialized execution methods

Polls and runs tasks until empty.
"
	end

	operation 9012866 "execLocalTasks"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes and executes all local tasks. If LIFO, invokes
pollAndExecAll. Otherwise implements a specialized pop loop
to exec until empty.
"
	end

	operation 9012994 "runTask"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "task" type class_ref 1065346 // ForkJoinTask
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Executes the given task and any remaining local tasks.
"
	end

	operation 9013122 "transferStealCount"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "p" type class_ref 1065858 // ForkJoinPool
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds steal count to pool stealCounter if it exists, and resets.
"
	end

	operation 9013250 "tryRemoveAndExec"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "task" type class_ref 1065346 // ForkJoinTask
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "If present, removes from queue and executes the given task,
or any other cancelled task. Used only by awaitJoin.

@return true if queue empty and task not known to be done
"
	end

	operation 9013378 "popCC"
	  package return_type class_ref 1065218 // CountedCompleter
	  nparams 2
	    param inout name "task" type class_ref 1065218 // CountedCompleter
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Pops task if in the same CC computation as the given task,
in either shared or owned mode. Used only by helpComplete.
"
	end

	operation 9013506 "pollAndExecCC"
	  package explicit_return_type "int"
	  nparams 1
	    param inout name "task" type class_ref 1065218 // CountedCompleter
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Steals and runs a task in the same CC computation as the
given task if one exists and can be taken without
contention. Otherwise returns a checksum/control value for
use by method helpComplete.

@return 1 if successful, 2 if retryable (lost to another
stealer), -1 if non-empty but no matching task found, else
the base index, forced negative.
"
	end

	operation 9013634 "isApparentlyUnblocked"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if owned and not known to be blocked.
"
	end

	attribute 2098178 "U"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Unsafe mechanics. Note that some are (and must be) the same as in FJP
"
	end

	attribute 2098306 "ABASE"
	  class_attribute const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2098434 "ASHIFT"
	  class_attribute const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2098562 "QTOP"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2098690 "QLOCK"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2098818 "QCURRENTSTEAL"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 172546 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                U = sun.misc.Unsafe.getUnsafe();
                Class<?> wk = WorkQueue.class;
                Class<?> ak = ForkJoinTask[].class;
                QTOP = U.objectFieldOffset
                    (wk.getDeclaredField(\"top\"));
                QLOCK = U.objectFieldOffset
                    (wk.getDeclaredField(\"qlock\"));
                QCURRENTSTEAL = U.objectFieldOffset
                    (wk.getDeclaredField(\"currentSteal\"));
                ABASE = U.arrayBaseOffset(ak);
                int scale = U.arrayIndexScale(ak);
                if ((scale & (scale - 1)) != 0)
                    throw new Error(\"data type scale not a power of two\");
                ASHIFT = 31 - Integer.numberOfLeadingZeros(scale);
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      classrelation 3571586 // defaultForkJoinWorkerThreadFactory (<unidirectional association>)
	relation 3571586 --->
	  a role_name "defaultForkJoinWorkerThreadFactory" class_relation const_relation public
	    comment " static fields (initialized in static initializer below)

Creates a new ForkJoinWorkerThread. This factory is used unless
overridden in ForkJoinPool constructors.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3571586 // defaultForkJoinWorkerThreadFactory (<unidirectional association>)
	  b parent class_ref 1104130 // ForkJoinWorkerThreadFactory
      end

      classrelation 3571714 // modifyThreadPermission (<unidirectional association>)
	relation 3571714 --->
	  a role_name "modifyThreadPermission" class_relation const_relation private
	    comment "
Permission required for callers of methods that may start or
kill threads.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3571714 // modifyThreadPermission (<unidirectional association>)
	  b parent class_ref 130306 // RuntimePermission
      end

      classrelation 3571842 // common (<unidirectional association>)
	relation 3571842 --->
	  a role_name "common" class_relation const_relation package
	    comment "
Common (static) pool. Non-null for public use unless a static
construction exception, but internal usages null-check on use
to paranoically avoid potential initialization circularities
as well as to simplify generated code.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3571842 // common (<unidirectional association>)
	  b parent class_ref 1065858 // ForkJoinPool
      end

      attribute 2098946 "commonParallelism"
	class_attribute const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Common pool parallelism. To allow simpler use and management
when common pool threads are disabled, we allow the underlying
common.parallelism field to be zero, but in that case still report
parallelism as 1 to reflect resulting caller-runs mechanics.

"
      end

      attribute 2099074 "commonMaxSpares"
	class_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Limit on spare thread construction in tryCompensate.

"
      end

      attribute 2099202 "poolNumberSequence"
	class_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sequence number for creating workerNamePrefix.

"
      end

      operation 9013762 "nextPoolId"
	class_operation private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next sequence number. We don't expect this to
ever contend, so use simple builtin sync.
"
      end

      attribute 2099330 "IDLE_TIMEOUT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2000L * 1000L * 1000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " static configuration constants

Initial timeout value (in nanoseconds) for the thread
triggering quiescence to park waiting for new work. On timeout,
the thread will instead try to shrink the number of
workers. The value should be large enough to avoid overly
aggressive shrinkage during most transient stalls (long GCs
etc).

 2sec"
      end

      attribute 2099458 "TIMEOUT_SLOP"
	class_attribute const_attribute private explicit_type "long"
	init_value " 20L * 1000L * 1000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tolerance for idle timeouts, to cope with timer undershoots

 20ms"
      end

      attribute 2099586 "DEFAULT_COMMON_MAX_SPARES"
	class_attribute const_attribute private explicit_type "int"
	init_value " 256"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The initial value for commonMaxSpares during static
initialization. The value is far in excess of normal
requirements, but also far short of MAX_CAP and typical
OS thread limits, so allows JVMs to catch misuse/abuse
before running out of resources needed to do so.

"
      end

      attribute 2099714 "SPINS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Number of times to spin-wait before blocking. The spins (in
awaitRunStateLock and awaitWork) currently use randomized
spins. Currently set to zero to reduce CPU usage.

If greater than zero the value of SPINS must be a power
of two, at least 4.  A value of 2048 causes spinning for a
small fraction of typical context-switch times.

If/when MWAIT-like intrinsics becomes available, they
may allow quieter spinning.

"
      end

      attribute 2099842 "SEED_INCREMENT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x9e3779b9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Increment for seed generators. See class ThreadLocal for
explanation.

"
      end

      attribute 2099970 "SP_MASK"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0xffffffffL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Bits and masks for field ctl, packed with 4 16 bit subfields:
AC: Number of active running workers minus target parallelism
TC: Number of total workers minus target parallelism
SS: version count and status of top waiting thread
ID: poolIndex of top of Treiber stack of waiters

When convenient, we can extract the lower 32 stack top bits
(including version bits) as sp=(int)ctl.  The offsets of counts
by the target parallelism and the positionings of fields makes
it possible to perform the most common checks via sign tests of
fields: When ac is negative, there are not enough active
workers, when tc is negative, there are not enough total
workers.  When sp is non-zero, there are waiting workers.  To
deal with possibly negative fields, we use casts in and out of
\"short\" and/or signed shifts to maintain signedness.

Because it occupies uppermost bits, we can add one active count
using getAndAddLong of AC_UNIT, rather than CAS, when returning
from a blocked join.  Other updates entail multiple subfields
and masking, requiring CAS.

 Lower and upper word masks
"
      end

      attribute 2100098 "UC_MASK"
	class_attribute const_attribute private explicit_type "long"
	init_value " ~SP_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2100226 "AC_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 48"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Active counts
"
      end

      attribute 2100354 "AC_UNIT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0x0001L << AC_SHIFT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2100482 "AC_MASK"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0xffffL << AC_SHIFT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2100610 "TC_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Total counts
"
      end

      attribute 2100738 "TC_UNIT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0x0001L << TC_SHIFT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2100866 "TC_MASK"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0xffffL << TC_SHIFT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2100994 "ADD_WORKER"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0x0001L << (TC_SHIFT + 15)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " sign"
      end

      attribute 2101122 "RSLOCK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " runState bits: SHUTDOWN must be negative, others arbitrary powers of two
"
      end

      attribute 2101250 "RSIGNAL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2101378 "STARTED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2101506 "STOP"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 29"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2101634 "TERMINATED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 30"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2101762 "SHUTDOWN"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 31"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2101890 "ctl"
	volatile package explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Instance fields
 main pool control"
      end

      attribute 2102018 "runState"
	volatile package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " lockable status"
      end

      attribute 2102146 "config"
	const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " parallelism, mode"
      end

      attribute 2102274 "indexSeed"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " to generate worker index"
      end

      classrelation 3571970 // workQueues (<unidirectional association>)
	relation 3571970 --->
	  a role_name "workQueues" multiplicity "[]" volatile package
	    comment " main registry"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3571970 // workQueues (<unidirectional association>)
	  b parent class_ref 1104642 // WorkQueue
      end

      classrelation 3572098 // factory (<unidirectional association>)
	relation 3572098 --->
	  a role_name "factory" const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3572098 // factory (<unidirectional association>)
	  b parent class_ref 1104130 // ForkJoinWorkerThreadFactory
      end

      classrelation 3572226 // ueh (<unidirectional association>)
	relation 3572226 --->
	  a role_name "ueh" const_relation package
	    comment " per-worker UEH"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3572226 // ueh (<unidirectional association>)
	  b parent class_ref 131202 // UncaughtExceptionHandler
      end

      classrelation 3572354 // workerNamePrefix (<unidirectional association>)
	relation 3572354 --->
	  a role_name "workerNamePrefix" const_relation package
	    comment " to create worker name string"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3572354 // workerNamePrefix (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3572482 // stealCounter (<unidirectional association>)
	relation 3572482 --->
	  a role_name "stealCounter" volatile package
	    comment " also used as sync monitor"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3572482 // stealCounter (<unidirectional association>)
	  b parent class_ref 256386 // AtomicLong
      end

      operation 9013890 "lockRunState"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires the runState lock; returns current (locked) runState.
"
      end

      operation 9014018 "awaitRunStateLock"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Spins and/or blocks until runstate lock is available.  See
above for explanation.
"
      end

      operation 9014146 "unlockRunState"
	private explicit_return_type "void"
	nparams 2
	  param in name "oldRunState" explicit_type "int"
	  param in name "newRunState" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlocks and sets runState to newRunState.

@param oldRunState a value returned from lockRunState
@param newRunState the next value (must have lock bit clear).
"
      end

      operation 9014274 "createWorker"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creating, registering and deregistering workers

Tries to construct and start one worker. Assumes that total
count has already been incremented as a reservation.  Invokes
deregisterWorker on any failure.

@return true if successful
"
      end

      operation 9014402 "tryAddWorker"
	private explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to add one worker, incrementing ctl counts before doing
so, relying on createWorker to back out on failure.

@param c incoming ctl value, with total count negative and no
idle workers.  On CAS failure, c is refreshed and retried if
this holds (otherwise, a new worker is not needed).
"
      end

      operation 9014530 "registerWorker"
	package return_type class_ref 1104642 // WorkQueue
	nparams 1
	  param inout name "wt" type class_ref 1104258 // ForkJoinWorkerThread
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Callback from ForkJoinWorkerThread constructor to establish and
record its WorkQueue.

@param wt the worker thread
@return the worker's queue
"
      end

      operation 9014658 "deregisterWorker"
	package explicit_return_type "void"
	nparams 2
	  param inout name "wt" type class_ref 1104258 // ForkJoinWorkerThread
	  param inout name "ex" type class_ref 129922 // Throwable
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Final callback from terminating worker, as well as upon failure
to construct or start a worker.  Removes record of worker from
array, and adjusts counts. If pool is shutting down, tries to
complete termination.

@param wt the worker thread, or null if construction failed
@param ex the exception causing failure, or null if none
"
      end

      operation 9014786 "signalWork"
	package explicit_return_type "void"
	nparams 2
	  param inout name "ws" type class_ref 1104642 // WorkQueue
	multiplicity "[]"
	  param inout name "q" type class_ref 1104642 // WorkQueue
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Signalling

Tries to create or activate a worker if too few are active.

@param ws the worker array to use to find signallees
@param q a WorkQueue --if non-null, don't retry if now empty
"
      end

      operation 9014914 "tryRelease"
	private explicit_return_type "boolean"
	nparams 3
	  param in name "c" explicit_type "long"
	  param inout name "v" type class_ref 1104642 // WorkQueue
	  param in name "inc" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signals and releases worker v if it is top of idle worker
stack.  This performs a one-shot version of signalWork only if
there is (apparently) at least one idle worker.

@param c incoming ctl value
@param v if non-null, a worker
@param inc the increment to active count (zero when compensating)
@return true if successful
"
      end

      operation 9015042 "runWorker"
	package explicit_return_type "void"
	nparams 1
	  param inout name "w" type class_ref 1104642 // WorkQueue
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Scanning for tasks

Top-level runloop for workers, called by ForkJoinWorkerThread.run.
"
      end

      operation 9015170 "scan"
	private return_type class_ref 1065346 // ForkJoinTask
	nparams 2
	  param inout name "w" type class_ref 1104642 // WorkQueue
	  param in name "r" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans for and tries to steal a top-level task. Scans start at a
random location, randomly moving on apparent contention,
otherwise continuing linearly until reaching two consecutive
empty passes over all queues with the same checksum (summing
each base index of each queue, that moves on each steal), at
which point the worker tries to inactivate and then re-scans,
attempting to re-activate (itself or some other worker) if
finding a task; otherwise returning null to await work.  Scans
otherwise touch as little memory as possible, to reduce
disruption on other scanning threads.

@param w the worker (via its WorkQueue)
@param r a random seed
@return a task, or null if none found
"
      end

      operation 9015298 "awaitWork"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "w" type class_ref 1104642 // WorkQueue
	  param in name "r" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Possibly blocks worker w waiting for a task to steal, or
returns false if the worker should terminate.  If inactivating
w has caused the pool to become quiescent, checks for pool
termination, and, so long as this is not the only worker, waits
for up to a given duration.  On timeout, if ctl has not
changed, terminates the worker, which will in turn wake up
another worker to possibly repeat this process.

@param w the calling worker
@param r a random seed (for spins)
@return false if the worker should terminate
"
      end

      operation 9015426 "helpComplete"
	package explicit_return_type "int"
	nparams 3
	  param inout name "w" type class_ref 1104642 // WorkQueue
	  param inout name "task" type class_ref 1065218 // CountedCompleter
	  param in name "maxTasks" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Joining tasks

Tries to steal and run tasks within the target's computation.
Uses a variant of the top-level algorithm, restricted to tasks
with the given task as ancestor: It prefers taking and running
eligible tasks popped from the worker's own queue (via
popCC). Otherwise it scans others, randomly moving on
contention or execution, deciding to give up based on a
checksum (via return codes frob pollAndExecCC). The maxTasks
argument supports external usages; internal calls use zero,
allowing unbounded steps (external calls trap non-positive
values).

@param w caller
@param maxTasks if non-zero, the maximum number of other tasks to run
@return task status on exit
"
      end

      operation 9015554 "helpStealer"
	private explicit_return_type "void"
	nparams 2
	  param inout name "w" type class_ref 1104642 // WorkQueue
	  param inout name "task" type class_ref 1065346 // ForkJoinTask
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to locate and execute tasks for a stealer of the given
task, or in turn one of its stealers, Traces currentSteal ->
currentJoin links looking for a thread working on a descendant
of the given task and with a non-empty queue to steal back and
execute tasks from. The first call to this method upon a
waiting join will often entail scanning/search, (which is OK
because the joiner has nothing better to do), but this method
leaves hints in workers to speed up subsequent calls.

@param w caller
@param task the task to join
"
      end

      operation 9015682 "tryCompensate"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "w" type class_ref 1104642 // WorkQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to decrement active count (sometimes implicitly) and
possibly release or create a compensating worker in preparation
for blocking. Returns false (retryable by caller), on
contention, detected staleness, instability, or termination.

@param w caller
"
      end

      operation 9015810 "awaitJoin"
	package explicit_return_type "int"
	nparams 3
	  param inout name "w" type class_ref 1104642 // WorkQueue
	  param inout name "task" type class_ref 1065346 // ForkJoinTask
	  param in name "deadline" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Helps and/or blocks until the given task is done or timeout.

@param w caller
@param task the task
@param deadline for timed waits, if nonzero
@return task status on exit
"
      end

      operation 9015938 "findNonEmptyStealQueue"
	private return_type class_ref 1104642 // WorkQueue
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Specialized scanning

Returns a (probably) non-empty steal queue, if one is found
during a scan, else null.  This method must be retried by
caller if, by the time it tries to use the queue, it is empty.
"
      end

      operation 9016066 "helpQuiescePool"
	package explicit_return_type "void"
	nparams 1
	  param inout name "w" type class_ref 1104642 // WorkQueue
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs tasks until {@code isQuiescent()}. We piggyback on
active count ctl maintenance, but rather than blocking
when tasks cannot be found, we rescan until all others cannot
find tasks either.
"
      end

      operation 9016194 "nextTaskFor"
	package return_type class_ref 1065346 // ForkJoinTask
	nparams 1
	  param inout name "w" type class_ref 1104642 // WorkQueue
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets and removes a local or stolen task for the given worker.

@return a task, if available
"
      end

      operation 9016322 "getSurplusQueuedTaskCount"
	class_operation package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a cheap heuristic guide for task partitioning when
programmers, frameworks, tools, or languages have little or no
idea about task granularity.  In essence, by offering this
method, we ask users only about tradeoffs in overhead vs
expected throughput and its variance, rather than how finely to
partition tasks.

In a steady state strict (tree-structured) computation, each
thread makes available for stealing enough tasks for other
threads to remain active. Inductively, if all threads play by
the same rules, each thread should make available only a
constant number of tasks.

The minimum useful constant is just 1. But using a value of 1
would require immediate replenishment upon each steal to
maintain enough tasks, which is infeasible.  Further,
partitionings/granularities of offered tasks should minimize
steal rates, which in general means that threads nearer the top
of computation tree should generate more than those nearer the
bottom. In perfect steady state, each thread is at
approximately the same level of computation tree. However,
producing extra tasks amortizes the uncertainty of progress and
diffusion assumptions.

So, users will want to use values larger (but not much larger)
than 1 to both smooth over transient shortages and hedge
against uneven progress; as traded off against the cost of
extra task overhead. We leave the user to pick a threshold
value to compare with the results of this call to guide
decisions, but recommend values such as 3.

When all threads are active, it is on average OK to estimate
surplus strictly locally. In steady-state, if one thread is
maintaining say 2 surplus tasks, then so are others. So we can
just use estimated queue length.  However, this strategy alone
leads to serious mis-estimates in some non-steady-state
conditions (ramp-up, ramp-down, other stalls). We can detect
many of these by further considering the number of \"idle\"
threads, that are known to have zero queued tasks, so
compensate by a factor of (#idle/#active) threads.
"
      end

      operation 9016450 "tryTerminate"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "now" explicit_type "boolean"
	  param inout name "enable" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Termination

Possibly initiates and/or completes termination.

@param now if true, unconditionally terminate, else only
if no work and no active workers
@param enable if true, enable shutdown when next possible
@return true if now terminating or terminated
"
      end

      operation 9016578 "externalSubmit"
	private explicit_return_type "void"
	nparams 1
	  param inout name "task" type class_ref 1065346 // ForkJoinTask
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " External operations

Full version of externalPush, handling uncommon cases, as well
as performing secondary initialization upon the first
submission of the first task to the pool.  It also detects
first submission by an external thread and creates a new shared
queue if the one at index if empty or contended.

@param task the task. Caller must ensure non-null.
"
      end

      operation 9016706 "externalPush"
	package explicit_return_type "void"
	nparams 1
	  param inout name "task" type class_ref 1065346 // ForkJoinTask
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to add the given task to a submission queue at
submitter's current queue. Only the (vastly) most common path
is directly handled in this method, while screening for need
for externalSubmit.

@param task the task. Caller must ensure non-null.
"
      end

      operation 9016834 "commonSubmitterQueue"
	class_operation package return_type class_ref 1104642 // WorkQueue
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns common pool queue for an external thread.
"
      end

      operation 9016962 "tryExternalUnpush"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "task" type class_ref 1065346 // ForkJoinTask
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs tryUnpush for an external submitter: Finds queue,
locks if apparently non-empty, validates upon locking, and
adjusts top. Each check can fail but rarely does.
"
      end

      operation 9017090 "externalHelpComplete"
	package explicit_return_type "int"
	nparams 2
	  param inout name "task" type class_ref 1065218 // CountedCompleter
	  param in name "maxTasks" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs helpComplete for an external submitter.
"
      end

      operation 9017218 "ForkJoinPool"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Exported methods
 Constructors

Creates a {@code ForkJoinPool} with parallelism equal to {@link
java.lang.Runtime#availableProcessors}, using the {@linkplain
#defaultForkJoinWorkerThreadFactory default thread factory},
no UncaughtExceptionHandler, and non-async LIFO processing mode.

@throws SecurityException if a security manager exists and
        the caller is not permitted to modify threads
        because it does not hold {@link
        java.lang.RuntimePermission}{@code (\"modifyThread\")}
"
      end

      operation 9017346 "ForkJoinPool"
	public explicit_return_type ""
	nparams 1
	  param in name "parallelism" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code ForkJoinPool} with the indicated parallelism
level, the {@linkplain
#defaultForkJoinWorkerThreadFactory default thread factory},
no UncaughtExceptionHandler, and non-async LIFO processing mode.

@param parallelism the parallelism level
@throws IllegalArgumentException if parallelism less than or
        equal to zero, or greater than implementation limit
@throws SecurityException if a security manager exists and
        the caller is not permitted to modify threads
        because it does not hold {@link
        java.lang.RuntimePermission}{@code (\"modifyThread\")}
"
      end

      operation 9017474 "ForkJoinPool"
	public explicit_return_type ""
	nparams 4
	  param in name "parallelism" explicit_type "int"
	  param inout name "factory" type class_ref 1104130 // ForkJoinWorkerThreadFactory
	  param inout name "handler" type class_ref 131202 // UncaughtExceptionHandler
	  param inout name "asyncMode" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code ForkJoinPool} with the given parameters.

@param parallelism the parallelism level. For default value,
use {@link java.lang.Runtime#availableProcessors}.
@param factory the factory for creating new threads. For default value,
use {@link #defaultForkJoinWorkerThreadFactory}.
@param handler the handler for internal worker threads that
terminate due to unrecoverable errors encountered while executing
tasks. For default value, use {@code null}.
@param asyncMode if true,
establishes local first-in-first-out scheduling mode for forked
tasks that are never joined. This mode may be more appropriate
than default locally stack-based mode in applications in which
worker threads only process event-style asynchronous tasks.
For default value, use {@code false}.
@throws IllegalArgumentException if parallelism less than or
        equal to zero, or greater than implementation limit
@throws NullPointerException if the factory is null
@throws SecurityException if a security manager exists and
        the caller is not permitted to modify threads
        because it does not hold {@link
        java.lang.RuntimePermission}{@code (\"modifyThread\")}
"
      end

      operation 9017602 "checkParallelism"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "parallelism" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9017730 "checkFactory"
	class_operation private return_type class_ref 1104130 // ForkJoinWorkerThreadFactory
	nparams 1
	  param inout name "factory" type class_ref 1104130 // ForkJoinWorkerThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9017858 "ForkJoinPool"
	private explicit_return_type ""
	nparams 5
	  param in name "parallelism" explicit_type "int"
	  param inout name "factory" type class_ref 1104130 // ForkJoinWorkerThreadFactory
	  param inout name "handler" type class_ref 131202 // UncaughtExceptionHandler
	  param in name "mode" explicit_type "int"
	  param inout name "workerNamePrefix" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code ForkJoinPool} with the given parameters, without
any security checks or parameter validation.  Invoked directly by
makeCommonPool.
"
      end

      operation 9017986 "commonPool"
	class_operation public return_type class_ref 1065858 // ForkJoinPool
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the common pool instance. This pool is statically
constructed; its run state is unaffected by attempts to {@link
#shutdown} or {@link #shutdownNow}. However this pool and any
ongoing processing are automatically terminated upon program
{@link System#exit}.  Any program that relies on asynchronous
task processing to complete before program termination should
invoke {@code commonPool().}{@link #awaitQuiescence awaitQuiescence},
before exit.

@return the common pool instance
@since 1.8
"
      end

      operation 9018114 "invoke"
	public explicit_return_type "T"
	nparams 1
	  param inout name "task" type class_ref 1065346 // ForkJoinTask
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Execution methods

Performs the given task, returning its result upon completion.
If the computation encounters an unchecked Exception or Error,
it is rethrown as the outcome of this invocation.  Rethrown
exceptions behave in the same way as regular exceptions, but,
when possible, contain stack traces (as displayed for example
using {@code ex.printStackTrace()}) of both the current thread
as well as the thread actually encountering the exception;
minimally only the latter.

@param task the task
@param <T> the type of the task's result
@return the task's result
@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
"
      end

      operation 9018242 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "task" type class_ref 1065346 // ForkJoinTask
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Arranges for (asynchronous) execution of the given task.

@param task the task
@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
"
      end

      operation 9018370 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "task" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " AbstractExecutorService methods

@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
"
      end

      operation 9018498 "submit"
	public return_type class_ref 1065346 // ForkJoinTask
	nparams 1
	  param inout name "task" type class_ref 1065346 // ForkJoinTask
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a ForkJoinTask for execution.

@param task the task to submit
@param <T> the type of the task's result
@return the task
@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
"
      end

      operation 9018626 "submit"
	public return_type class_ref 1065346 // ForkJoinTask
	nparams 1
	  param inout name "task" type class_ref 339330 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
"
      end

      operation 9018754 "submit"
	public return_type class_ref 1065346 // ForkJoinTask
	nparams 2
	  param inout name "task" type class_ref 128770 // Runnable
	  param inout name "result" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
"
      end

      operation 9018882 "submit"
	public return_type class_ref 1065346 // ForkJoinTask
	nparams 1
	  param inout name "task" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
"
      end

      operation 9019010 "invokeAll"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "tasks" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException       {@inheritDoc}
@throws RejectedExecutionException {@inheritDoc}
"
      end

      operation 9019138 "getFactory"
	public return_type class_ref 1104130 // ForkJoinWorkerThreadFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the factory used for constructing new workers.

@return the factory used for constructing new workers
"
      end

      operation 9019266 "getUncaughtExceptionHandler"
	public return_type class_ref 131202 // UncaughtExceptionHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the handler for internal worker threads that terminate
due to unrecoverable errors encountered while executing tasks.

@return the handler, or {@code null} if none
"
      end

      operation 9019394 "getParallelism"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the targeted parallelism level of this pool.

@return the targeted parallelism level of this pool
"
      end

      operation 9019522 "getCommonPoolParallelism"
	class_operation public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the targeted parallelism level of the common pool.

@return the targeted parallelism level of the common pool
@since 1.8
"
      end

      operation 9019650 "getPoolSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of worker threads that have started but not
yet terminated.  The result returned by this method may differ
from {@link #getParallelism} when threads are created to
maintain parallelism when others are cooperatively blocked.

@return the number of worker threads
"
      end

      operation 9019778 "getAsyncMode"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this pool uses local first-in-first-out
scheduling mode for forked tasks that are never joined.

@return {@code true} if this pool uses async mode
"
      end

      operation 9019906 "getRunningThreadCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of worker threads that are
not blocked waiting to join tasks or for other managed
synchronization. This method may overestimate the
number of running threads.

@return the number of worker threads
"
      end

      operation 9020034 "getActiveThreadCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of threads that are currently
stealing or executing tasks. This method may overestimate the
number of active threads.

@return the number of active threads
"
      end

      operation 9020162 "isQuiescent"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if all worker threads are currently idle.
An idle worker is one that cannot obtain a task to execute
because none are available to steal from other threads, and
there are no pending submissions to the pool. This method is
conservative; it might not return {@code true} immediately upon
idleness of all threads, but will eventually become true if
threads remain inactive.

@return {@code true} if all threads are currently idle
"
      end

      operation 9020290 "getStealCount"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the total number of tasks stolen from
one thread's work queue by another. The reported value
underestimates the actual total number of steals when the pool
is not quiescent. This value may be useful for monitoring and
tuning fork/join programs: in general, steal counts should be
high enough to keep threads busy, but low enough to avoid
overhead and contention across threads.

@return the number of steals
"
      end

      operation 9020418 "getQueuedTaskCount"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the total number of tasks currently held
in queues by worker threads (but not including tasks submitted
to the pool that have not begun executing). This value is only
an approximation, obtained by iterating across all threads in
the pool. This method may be useful for tuning task
granularities.

@return the number of queued tasks
"
      end

      operation 9020546 "getQueuedSubmissionCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of tasks submitted to this
pool that have not yet begun executing.  This method may take
time proportional to the number of submissions.

@return the number of queued submissions
"
      end

      operation 9020674 "hasQueuedSubmissions"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if there are any tasks submitted to this
pool that have not yet begun executing.

@return {@code true} if there are any queued submissions
"
      end

      operation 9020802 "pollSubmission"
	protected return_type class_ref 1065346 // ForkJoinTask
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns the next unexecuted submission if one is
available.  This method may be useful in extensions to this
class that re-assign work in systems with multiple pools.

@return the next submission, or {@code null} if none
"
      end

      operation 9020930 "drainTasksTo"
	protected explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super ForkJoinTask<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all available unexecuted submitted and forked tasks
from scheduling queues and adds them to the given collection,
without altering their execution status. These may include
artificially generated or wrapped tasks. This method is
designed to be invoked only when the pool is known to be
quiescent. Invocations at other times may not remove all
tasks. A failure encountered while attempting to add elements
to collection {@code c} may result in elements being in
neither, either or both collections when the associated
exception is thrown.  The behavior of this operation is
undefined if the specified collection is modified while the
operation is in progress.

@param c the collection to transfer elements into
@return the number of elements transferred
"
      end

      operation 9021058 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string identifying this pool, as well as its state,
including indications of run state, parallelism level, and
worker and task counts.

@return a string identifying this pool, as well as its state
"
      end

      operation 9021186 "shutdown"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Possibly initiates an orderly shutdown in which previously
submitted tasks are executed, but no new tasks will be
accepted. Invocation has no effect on execution state if this
is the {@link #commonPool()}, and no additional effect if
already shut down.  Tasks that are in the process of being
submitted concurrently during the course of this method may or
may not be rejected.

@throws SecurityException if a security manager exists and
        the caller is not permitted to modify threads
        because it does not hold {@link
        java.lang.RuntimePermission}{@code (\"modifyThread\")}
"
      end

      operation 9021314 "shutdownNow"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Possibly attempts to cancel and/or stop all tasks, and reject
all subsequently submitted tasks.  Invocation has no effect on
execution state if this is the {@link #commonPool()}, and no
additional effect if already shut down. Otherwise, tasks that
are in the process of being submitted or executed concurrently
during the course of this method may or may not be
rejected. This method cancels both existing and unexecuted
tasks, in order to permit termination in the presence of task
dependencies. So the method always returns an empty list
(unlike the case for some other Executors).

@return an empty list
@throws SecurityException if a security manager exists and
        the caller is not permitted to modify threads
        because it does not hold {@link
        java.lang.RuntimePermission}{@code (\"modifyThread\")}
"
      end

      operation 9021442 "isTerminated"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if all tasks have completed following shut down.

@return {@code true} if all tasks have completed following shut down
"
      end

      operation 9021570 "isTerminating"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if the process of termination has
commenced but not yet completed.  This method may be useful for
debugging. A return of {@code true} reported a sufficient
period after shutdown may indicate that submitted tasks have
ignored or suppressed interruption, or are waiting for I/O,
causing this executor not to properly terminate. (See the
advisory notes for class {@link ForkJoinTask} stating that
tasks should not normally entail blocking operations.  But if
they do, they must abort them on interrupt.)

@return {@code true} if terminating but not yet terminated
"
      end

      operation 9021698 "isShutdown"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this pool has been shut down.

@return {@code true} if this pool has been shut down
"
      end

      operation 9021826 "awaitTermination"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Blocks until all tasks have completed execution after a
shutdown request, or the timeout occurs, or the current thread
is interrupted, whichever happens first. Because the {@link
#commonPool()} never terminates until program shutdown, when
applied to the common pool, this method is equivalent to {@link
#awaitQuiescence(long, TimeUnit)} but always returns {@code false}.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return {@code true} if this executor terminated and
        {@code false} if the timeout elapsed before termination
@throws InterruptedException if interrupted while waiting
"
      end

      operation 9021954 "awaitQuiescence"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If called by a ForkJoinTask operating in this pool, equivalent
in effect to {@link ForkJoinTask#helpQuiesce}. Otherwise,
waits and/or attempts to assist performing tasks until this
pool {@link #isQuiescent} or the indicated timeout elapses.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return {@code true} if quiescent; {@code false} if the
timeout elapsed.
"
      end

      operation 9022082 "quiesceCommonPool"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits and/or attempts to assist performing tasks indefinitely
until the {@link #commonPool()} {@link #isQuiescent}.
"
      end

      operation 9022466 "managedBlock"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "blocker" type class_ref 1104002 // ManagedBlocker
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs the given possibly blocking task.  When {@linkplain
ForkJoinTask#inForkJoinPool() running in a ForkJoinPool}, this
method possibly arranges for a spare thread to be activated if
necessary to ensure sufficient parallelism while the current
thread is blocked in {@link ManagedBlocker#block blocker.block()}.

<p>This method repeatedly calls {@code blocker.isReleasable()} and
{@code blocker.block()} until either method returns {@code true}.
Every call to {@code blocker.block()} is preceded by a call to
{@code blocker.isReleasable()} that returned {@code false}.

<p>If not running in a ForkJoinPool, this method is
behaviorally equivalent to
 <pre> {@code
while (!blocker.isReleasable())
  if (blocker.block())
    break;}</pre>

If running in a ForkJoinPool, the pool may first be expanded to
ensure sufficient parallelism available during the call to
{@code blocker.block()}.

@param blocker the blocker task
@throws InterruptedException if {@code blocker.block()} did so
"
      end

      operation 9022594 "newTaskFor"
	protected return_type class_ref 1066114 // RunnableFuture
	nparams 2
	  param inout name "runnable" type class_ref 128770 // Runnable
	  param inout name "value" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " AbstractExecutorService overrides.  These rely on undocumented
 fact that ForkJoinTask.adapt returns ForkJoinTasks that also
 implement RunnableFuture."
      end

      operation 9022722 "newTaskFor"
	protected return_type class_ref 1066114 // RunnableFuture
	nparams 1
	  param inout name "callable" type class_ref 339330 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2102402 "U"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2102530 "ABASE"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2102658 "ASHIFT"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2102786 "CTL"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2102914 "RUNSTATE"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2103042 "STEALCOUNTER"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2103170 "PARKBLOCKER"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2103298 "QTOP"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2103426 "QLOCK"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2103554 "QSCANSTATE"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2103682 "QPARKER"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2103810 "QCURRENTSTEAL"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2103938 "QCURRENTJOIN"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 172674 "initialization"
	
	cpp "" ""
	java "  static {
        // initialize field offsets for CAS etc
        try {
            U = sun.misc.Unsafe.getUnsafe();
            Class<?> k = ForkJoinPool.class;
            CTL = U.objectFieldOffset
                (k.getDeclaredField(\"ctl\"));
            RUNSTATE = U.objectFieldOffset
                (k.getDeclaredField(\"runState\"));
            STEALCOUNTER = U.objectFieldOffset
                (k.getDeclaredField(\"stealCounter\"));
            Class<?> tk = Thread.class;
            PARKBLOCKER = U.objectFieldOffset
                (tk.getDeclaredField(\"parkBlocker\"));
            Class<?> wk = WorkQueue.class;
            QTOP = U.objectFieldOffset
                (wk.getDeclaredField(\"top\"));
            QLOCK = U.objectFieldOffset
                (wk.getDeclaredField(\"qlock\"));
            QSCANSTATE = U.objectFieldOffset
                (wk.getDeclaredField(\"scanState\"));
            QPARKER = U.objectFieldOffset
                (wk.getDeclaredField(\"parker\"));
            QCURRENTSTEAL = U.objectFieldOffset
                (wk.getDeclaredField(\"currentSteal\"));
            QCURRENTJOIN = U.objectFieldOffset
                (wk.getDeclaredField(\"currentJoin\"));
            Class<?> ak = ForkJoinTask[].class;
            ABASE = U.arrayBaseOffset(ak);
            int scale = U.arrayIndexScale(ak);
            if ((scale & (scale - 1)) != 0)
                throw new Error(\"data type scale not a power of two\");
            ASHIFT = 31 - Integer.numberOfLeadingZeros(scale);
        } catch (Exception e) {
            throw new Error(e);
        }

        commonMaxSpares = DEFAULT_COMMON_MAX_SPARES;
        defaultForkJoinWorkerThreadFactory =
            new DefaultForkJoinWorkerThreadFactory();
        modifyThreadPermission = new RuntimePermission(\"modifyThread\");

        common = java.security.AccessController.doPrivileged
            (new java.security.PrivilegedAction<ForkJoinPool>() {
                public ForkJoinPool run() { return makeCommonPool(); }});
        int par = common.config & SMASK; // report 1 even if threads disabled
        commonParallelism = par > 0 ? par : 1;
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 9022850 "makeCommonPool"
	class_operation private return_type class_ref 1065858 // ForkJoinPool
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns the common pool, respecting user settings
specified via system properties.
"
      end

      class 1104770 "InnocuousForkJoinWorkerThreadFactory"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3572610 // <realization>
	  relation 3572610 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3572610 // <realization>
	    b parent class_ref 1104130 // ForkJoinWorkerThreadFactory
	end

	classrelation 3572738 // innocuousAcc (<unidirectional association>)
	  relation 3572738 --->
	    a role_name "innocuousAcc" class_relation const_relation private
	      comment "
An ACC to restrict permissions for the factory itself.
The constructed workers have no permissions set.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3572738 // innocuousAcc (<unidirectional association>)
	    b parent class_ref 129154 // AccessControlContext
	end

	extra_member 172802 "initialization"
	  
	  cpp "" ""
	  java "  static {
            Permissions innocuousPerms = new Permissions();
            innocuousPerms.add(modifyThreadPermission);
            innocuousPerms.add(new RuntimePermission(
                                   \"enableContextClassLoaderOverride\"));
            innocuousPerms.add(new RuntimePermission(
                                   \"modifyThreadGroup\"));
            innocuousAcc = new AccessControlContext(new ProtectionDomain[] {
                    new ProtectionDomain(null, innocuousPerms)
                });
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end

	operation 9022978 "newThread"
	  public return_type class_ref 1104258 // ForkJoinWorkerThread
	  nparams 1
	    param inout name "pool" type class_ref 1065858 // ForkJoinPool
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 1066114 "RunnableFuture"
      visibility public stereotype "interface"
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 984706 // Future
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link Future} that is {@link Runnable}. Successful execution of
the {@code run} method causes completion of the {@code Future}
and allows access to its results.
@see FutureTask
@see Executor
@since 1.6
@author Doug Lea
@param <V> The result type returned by this Future's {@code get} method
"
      classrelation 3479170 // <generalisation>
	relation 3479170 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3479170 // <generalisation>
	  b parent class_ref 128770 // Runnable
      end

      classrelation 3479298 // <realization>
	relation 3479298 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3479298 // <realization>
	  b parent class_ref 984706 // Future
      end

      operation 8610050 "run"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this Future to the result of its computation
unless it has been cancelled.
"
      end
    end

    class 1099266 "AbstractExecutorService"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides default implementations of {@link ExecutorService}
execution methods. This class implements the {@code submit},
{@code invokeAny} and {@code invokeAll} methods using a
{@link RunnableFuture} returned by {@code newTaskFor}, which defaults
to the {@link FutureTask} class provided in this package.  For example,
the implementation of {@code submit(Runnable)} creates an
associated {@code RunnableFuture} that is executed and
returned. Subclasses may override the {@code newTaskFor} methods
to return {@code RunnableFuture} implementations other than
{@code FutureTask}.

<p><b>Extension example</b>. Here is a sketch of a class
that customizes {@link ThreadPoolExecutor} to use
a {@code CustomTask} class instead of the default {@code FutureTask}:
 <pre> {@code
public class CustomThreadPoolExecutor extends ThreadPoolExecutor {

  static class CustomTask<V> implements RunnableFuture<V> {...}

  protected <V> RunnableFuture<V> newTaskFor(Callable<V> c) {
      return new CustomTask<V>(c);
  }
  protected <V> RunnableFuture<V> newTaskFor(Runnable r, V v) {
      return new CustomTask<V>(r, v);
  }
  // ... add constructors, etc.
}}</pre>

@since 1.5
@author Doug Lea
"
      classrelation 3560322 // <realization>
	relation 3560322 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3560322 // <realization>
	  b parent class_ref 985218 // ExecutorService
      end

      operation 8977154 "newTaskFor"
	protected return_type class_ref 1066114 // RunnableFuture
	nparams 2
	  param inout name "runnable" type class_ref 128770 // Runnable
	  param inout name "value" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code RunnableFuture} for the given runnable and default
value.

@param runnable the runnable task being wrapped
@param value the default value for the returned future
@param <T> the type of the given value
@return a {@code RunnableFuture} which, when run, will run the
underlying runnable and which, as a {@code Future}, will yield
the given value as its result and provide for cancellation of
the underlying task
@since 1.6
"
      end

      operation 8977282 "newTaskFor"
	protected return_type class_ref 1066114 // RunnableFuture
	nparams 1
	  param inout name "callable" type class_ref 339330 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code RunnableFuture} for the given callable task.

@param callable the callable task being wrapped
@param <T> the type of the callable's result
@return a {@code RunnableFuture} which, when run, will call the
underlying callable and which, as a {@code Future}, will yield
the callable's result as its result and provide for
cancellation of the underlying task
@since 1.6
"
      end

      operation 8977410 "submit"
	public return_type class_ref 984706 // Future
	nparams 1
	  param inout name "task" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}
"
      end

      operation 8977538 "submit"
	public return_type class_ref 984706 // Future
	nparams 2
	  param inout name "task" type class_ref 128770 // Runnable
	  param inout name "result" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}
"
      end

      operation 8977666 "submit"
	public return_type class_ref 984706 // Future
	nparams 1
	  param inout name "task" type class_ref 339330 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}
"
      end

      operation 8977794 "doInvokeAny"
	private explicit_return_type "T"
	nparams 3
	  param inout name "tasks" type class_ref 184194 // Collection
	  param inout name "timed" explicit_type "boolean"
	  param in name "nanos" explicit_type "long"
	nexceptions 3
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	  exception class_ref 1065602 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "the main mechanics of invokeAny.
"
      end

      operation 8977922 "invokeAny"
	public explicit_return_type "T"
	nparams 1
	  param inout name "tasks" type class_ref 184194 // Collection
	nexceptions 2
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8978050 "invokeAny"
	public explicit_return_type "T"
	nparams 3
	  param inout name "tasks" type class_ref 184194 // Collection
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 3
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	  exception class_ref 1065602 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8978178 "invokeAll"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "tasks" type class_ref 184194 // Collection
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8978306 "invokeAll"
	public return_type class_ref 175362 // List
	nparams 3
	  param inout name "tasks" type class_ref 184194 // Collection
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1099394 "ArrayBlockingQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1064066 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 1099522 // BlockingQueue
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A bounded {@linkplain BlockingQueue blocking queue} backed by an
array.  This queue orders elements FIFO (first-in-first-out).  The
<em>head</em> of the queue is that element that has been on the
queue the longest time.  The <em>tail</em> of the queue is that
element that has been on the queue the shortest time. New elements
are inserted at the tail of the queue, and the queue retrieval
operations obtain elements at the head of the queue.

<p>This is a classic &quot;bounded buffer&quot;, in which a
fixed-sized array holds elements inserted by producers and
extracted by consumers.  Once created, the capacity cannot be
changed.  Attempts to {@code put} an element into a full queue
will result in the operation blocking; attempts to {@code take} an
element from an empty queue will similarly block.

<p>This class supports an optional fairness policy for ordering
waiting producer and consumer threads.  By default, this ordering
is not guaranteed. However, a queue constructed with fairness set
to {@code true} grants threads access in FIFO order. Fairness
generally decreases throughput but reduces variability and avoids
starvation.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 3560450 // <realization>
	relation 3560450 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3560450 // <realization>
	  b parent class_ref 1064066 // AbstractQueue
      end

      classrelation 3560706 // <realization>
	relation 3560706 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3560706 // <realization>
	  b parent class_ref 1099522 // BlockingQueue
      end

      classrelation 3560834 // <realization>
	relation 3560834 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3560834 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2092418 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -817911632652898426L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization ID. This class relies on default serialization
even for the items array, which is default-serialized, even if
it is empty. Otherwise it could not be declared final, which is
necessary here.

"
      end

      classrelation 3560962 // items (<unidirectional association>)
	relation 3560962 --->
	  a role_name "items" multiplicity "[]" const_relation package
	    comment " The queued items 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3560962 // items (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 2092546 "takeIndex"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " items index for next take, poll, peek or remove 
"
      end

      attribute 2092674 "putIndex"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " items index for next put, offer, or add 
"
      end

      attribute 2092802 "count"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of elements in the queue 
"
      end

      classrelation 3561090 // lock (<unidirectional association>)
	relation 3561090 --->
	  a role_name "lock" const_relation package
	    comment "
Concurrency control uses the classic two-condition algorithm
found in any textbook.

 Main lock guarding all access 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3561090 // lock (<unidirectional association>)
	  b parent class_ref 968706 // ReentrantLock
      end

      classrelation 3561218 // notEmpty (<unidirectional association>)
	relation 3561218 --->
	  a role_name "notEmpty" const_relation private
	    comment " Condition for waiting takes 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3561218 // notEmpty (<unidirectional association>)
	  b parent class_ref 864770 // Condition
      end

      classrelation 3561346 // notFull (<unidirectional association>)
	relation 3561346 --->
	  a role_name "notFull" const_relation private
	    comment " Condition for waiting puts 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3561346 // notFull (<unidirectional association>)
	  b parent class_ref 864770 // Condition
      end

      class 1099650 "Itrs"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	class 1099778 "Node"
	  visibility private 
	  nactuals 1
	  actual class class_ref 131330 // WeakReference
	    rank 0 explicit_value ""
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3561602 // <realization>
	    relation 3561602 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 3561602 // <realization>
	      b parent class_ref 131330 // WeakReference
	  end

	  classrelation 3561730 // next (<unidirectional association>)
	    relation 3561730 --->
	      a role_name "next" package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3561730 // next (<unidirectional association>)
	      b parent class_ref 1099778 // Node
	  end

	  operation 8983426 "Node"
	    cpp_inline package explicit_return_type ""
	    nparams 2
	      param inout name "iterator" type class_ref 1099906 // Itr
	      param inout name "next" type class_ref 1099778 // Node
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	attribute 2092930 "cycles"
	  package explicit_type "int"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Incremented whenever takeIndex wraps around to 0 
"
	end

	classrelation 3561858 // head (<unidirectional association>)
	  relation 3561858 --->
	    a role_name "head" private
	      comment " Linked list of weak iterator references 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3561858 // head (<unidirectional association>)
	    b parent class_ref 1099778 // Node
	end

	classrelation 3561986 // sweeper (<unidirectional association>)
	  relation 3561986 --->
	    a role_name "sweeper" init_value " null" private
	      comment " Used to expunge stale iterators 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3561986 // sweeper (<unidirectional association>)
	    b parent class_ref 1099778 // Node
	end

	attribute 2093058 "SHORT_SWEEP_PROBES"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 4"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2093186 "LONG_SWEEP_PROBES"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 16"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8983554 "Itrs"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "initial" type class_ref 1099906 // Itr
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8983682 "doSomeSweeping"
	  cpp_inline package explicit_return_type "void"
	  nparams 1
	    param inout name "tryHarder" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sweeps itrs, looking for and expunging stale iterators.
If at least one was found, tries harder to find more.
Called only from iterating thread.

@param tryHarder whether to start in try-harder mode, because
there is known to be at least one iterator to collect
"
	end

	operation 8983810 "register"
	  cpp_inline package explicit_return_type "void"
	  nparams 1
	    param inout name "itr" type class_ref 1099906 // Itr
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds a new iterator to the linked list of tracked iterators.
"
	end

	operation 8983938 "takeIndexWrapped"
	  cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called whenever takeIndex wraps around to 0.

Notifies all iterators, and expunges any that are now stale.
"
	end

	operation 8984066 "removedAt"
	  cpp_inline package explicit_return_type "void"
	  nparams 1
	    param in name "removedIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called whenever an interior remove (not at takeIndex) occurred.

Notifies all iterators, and expunges any that are now stale.
"
	end

	operation 8984194 "queueIsEmpty"
	  cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called whenever the queue becomes empty.

Notifies all active iterators that the queue is empty,
clears all weak refs, and unlinks the itrs datastructure.
"
	end

	operation 8984322 "elementDequeued"
	  cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called whenever an element has been dequeued (at takeIndex).
"
	end
      end

      classrelation 3561474 // itrs (<unidirectional association>)
	relation 3561474 --->
	  a role_name "itrs" init_value " null" package
	    comment "
Shared state for currently active iterators, or null if there
are known not to be any.  Allows queue operations to update
iterator state.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3561474 // itrs (<unidirectional association>)
	  b parent class_ref 1099650 // Itrs
      end

      operation 8979842 "dec"
	cpp_inline package explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Internal helper methods

Circularly decrement i.
"
      end

      operation 8979970 "itemAt"
	cpp_inline package explicit_return_type "E"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns item at index i.
"
      end

      operation 8980098 "checkNotNull"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws NullPointerException if argument is null.

@param v the element
"
      end

      operation 8980226 "enqueue"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts element at current put position, advances, and signals.
Call only when holding lock.
"
      end

      operation 8980354 "dequeue"
	cpp_inline private explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Extracts element at current take position, advances, and signals.
Call only when holding lock.
"
      end

      operation 8980482 "removeAt"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param in name "removeIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes item at array index removeIndex.
Utility for remove(Object) and iterator.remove.
Call only when holding lock.
"
      end

      operation 8980610 "ArrayBlockingQueue"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code ArrayBlockingQueue} with the given (fixed)
capacity and default access policy.

@param capacity the capacity of this queue
@throws IllegalArgumentException if {@code capacity < 1}
"
      end

      operation 8980738 "ArrayBlockingQueue"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "capacity" explicit_type "int"
	  param inout name "fair" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code ArrayBlockingQueue} with the given (fixed)
capacity and the specified access policy.

@param capacity the capacity of this queue
@param fair if {@code true} then queue accesses for threads blocked
       on insertion or removal, are processed in FIFO order;
       if {@code false} the access order is unspecified.
@throws IllegalArgumentException if {@code capacity < 1}
"
      end

      operation 8980866 "ArrayBlockingQueue"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "capacity" explicit_type "int"
	  param inout name "fair" explicit_type "boolean"
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? extends E> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code ArrayBlockingQueue} with the given (fixed)
capacity, the specified access policy and initially containing the
elements of the given collection,
added in traversal order of the collection's iterator.

@param capacity the capacity of this queue
@param fair if {@code true} then queue accesses for threads blocked
       on insertion or removal, are processed in FIFO order;
       if {@code false} the access order is unspecified.
@param c the collection of elements to initially contain
@throws IllegalArgumentException if {@code capacity} is less than
        {@code c.size()}, or less than 1.
@throws NullPointerException if the specified collection or any
        of its elements are null
"
      end

      operation 8980994 "add"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue if it is
possible to do so immediately without exceeding the queue's capacity,
returning {@code true} upon success and throwing an
{@code IllegalStateException} if this queue is full.

@param e the element to add
@return {@code true} (as specified by {@link Collection#add})
@throws IllegalStateException if this queue is full
@throws NullPointerException if the specified element is null
"
      end

      operation 8981122 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue if it is
possible to do so immediately without exceeding the queue's capacity,
returning {@code true} upon success and {@code false} if this queue
is full.  This method is generally preferable to method {@link #add},
which can fail to insert an element only by throwing an exception.

@throws NullPointerException if the specified element is null
"
      end

      operation 8981250 "put"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue, waiting
for space to become available if the queue is full.

@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}
"
      end

      operation 8981378 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue, waiting
up to the specified wait time for space to become available if
the queue is full.

@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}
"
      end

      operation 8981506 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8981634 "take"
	cpp_inline public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8981762 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8981890 "peek"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8982018 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this doc comment is overridden to remove the reference to collections
 greater in size than Integer.MAX_VALUE

Returns the number of elements in this queue.

@return the number of elements in this queue
"
      end

      operation 8982146 "remainingCapacity"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this doc comment is a modified copy of the inherited doc comment,
 without the reference to unlimited queues.

Returns the number of additional elements that this queue can ideally
(in the absence of memory or resource constraints) accept without
blocking. This is always equal to the initial capacity of this queue
less the current {@code size} of this queue.

<p>Note that you <em>cannot</em> always tell if an attempt to insert
an element will succeed by inspecting {@code remainingCapacity}
because it may be the case that another thread is about to
insert or remove an element.
"
      end

      operation 8982274 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this queue,
if it is present.  More formally, removes an element {@code e} such
that {@code o.equals(e)}, if this queue contains one or more such
elements.
Returns {@code true} if this queue contained the specified element
(or equivalently, if this queue changed as a result of the call).

<p>Removal of interior elements in circular array based queues
is an intrinsically slow and disruptive operation, so should
be undertaken only in exceptional circumstances, ideally
only when the queue is known not to be accessible by other
threads.

@param o element to be removed from this queue, if present
@return {@code true} if this queue changed as a result of the call
"
      end

      operation 8982402 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains the specified element.
More formally, returns {@code true} if and only if this queue contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this queue
@return {@code true} if this queue contains the specified element
"
      end

      operation 8982530 "toArray"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue, in
proper sequence.

<p>The returned array will be \"safe\" in that no references to it are
maintained by this queue.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this queue
"
      end

      operation 8982658 "toArray"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns an array containing all of the elements in this queue, in
proper sequence; the runtime type of the returned array is that of
the specified array.  If the queue fits in the specified array, it
is returned therein.  Otherwise, a new array is allocated with the
runtime type of the specified array and the size of this queue.

<p>If this queue fits in the specified array with room to spare
(i.e., the array has more elements than this queue), the element in
the array immediately following the end of the queue is set to
{@code null}.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose {@code x} is a queue known to contain only strings.
The following code can be used to dump the queue into a newly
allocated array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the queue are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this queue
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this queue
@throws NullPointerException if the specified array is null
"
      end

      operation 8982786 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8982914 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this queue.
The queue will be empty after this call returns.
"
      end

      operation 8983042 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}
"
      end

      operation 8983170 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 184194 // Collection
	  param in name "maxElements" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}
"
      end

      operation 8983298 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue in proper sequence.
The elements will be returned in order from first (head) to last (tail).

<p>The returned iterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

@return an iterator over the elements in this queue in proper sequence
"
      end

      class 1099906 "Itr"
	visibility private 
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3562114 // <realization>
	  relation 3562114 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3562114 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	attribute 2093314 "cursor"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Index to look for new nextItem; NONE at end 
"
	end

	attribute 2093442 "nextItem"
	  private explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Element to be returned by next call to next(); null if none 
"
	end

	attribute 2093570 "nextIndex"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Index of nextItem; NONE if none, REMOVED if removed elsewhere 
"
	end

	attribute 2093698 "lastItem"
	  private explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Last element returned; null if none or not detached. 
"
	end

	attribute 2093826 "lastRet"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Index of lastItem, NONE if none, REMOVED if removed elsewhere 
"
	end

	attribute 2093954 "prevTakeIndex"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Previous value of takeIndex, or DETACHED when detached 
"
	end

	attribute 2094082 "prevCycles"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Previous value of iters.cycles 
"
	end

	attribute 2094210 "NONE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Special index value indicating \"not available\" or \"undefined\" 
"
	end

	attribute 2094338 "REMOVED"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " -2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Special index value indicating \"removed elsewhere\", that is,
removed by some operation other than a call to this.remove().

"
	end

	attribute 2094466 "DETACHED"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " -3"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Special value for prevTakeIndex indicating \"detached mode\" 
"
	end

	operation 8984450 "Itr"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8984578 "isDetached"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8984706 "incCursor"
	  cpp_inline private explicit_return_type "int"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8984834 "invalidated"
	  cpp_inline private explicit_return_type "boolean"
	  nparams 4
	    param in name "index" explicit_type "int"
	    param in name "prevTakeIndex" explicit_type "int"
	    param in name "dequeues" explicit_type "long"
	    param in name "length" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if index is invalidated by the given number of
dequeues, starting from prevTakeIndex.
"
	end

	operation 8984962 "incorporateDequeues"
	  cpp_inline private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adjusts indices to incorporate all dequeues since the last
operation on this iterator.  Call only from iterating thread.
"
	end

	operation 8985090 "detach"
	  cpp_inline private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when itrs should stop tracking this iterator, either
because there are no more indices to update (cursor < 0 &&
nextIndex < 0 && lastRet < 0) or as a special exception, when
lastRet >= 0, because hasNext() is about to return false for the
first time.  Call only from iterating thread.
"
	end

	operation 8985218 "hasNext"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "For performance reasons, we would like not to acquire a lock in
hasNext in the common case.  To allow for this, we only access
fields (i.e. nextItem) that are not modified by update operations
triggered by queue modifications.
"
	end

	operation 8985346 "noNext"
	  cpp_inline private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8985474 "next"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8985602 "remove"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8985730 "shutdown"
	  cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called to notify the iterator that the queue is empty, or that it
has fallen hopelessly behind, so that it should abandon any
further iteration, except possibly to return one more element
from next(), as promised by returning true from hasNext().
"
	end

	operation 8985858 "distance"
	  cpp_inline private explicit_return_type "int"
	  nparams 3
	    param in name "index" explicit_type "int"
	    param in name "prevTakeIndex" explicit_type "int"
	    param in name "length" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8985986 "removedAt"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 1
	    param in name "removedIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called whenever an interior remove (not at takeIndex) occurred.

@return true if this iterator should be unlinked from itrs
"
	end

	operation 8986114 "takeIndexWrapped"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called whenever takeIndex wraps around to zero.

@return true if this iterator should be unlinked from itrs
"
	end
      end

      operation 8986242 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "         /** Uncomment for debugging. */
         public String toString() {
             return (\"cursor=\" + cursor + \" \" +
                     \"nextIndex=\" + nextIndex + \" \" +
                     \"lastRet=\" + lastRet + \" \" +
                     \"nextItem=\" + nextItem + \" \" +
                     \"lastItem=\" + lastItem + \" \" +
                     \"prevCycles=\" + prevCycles + \" \" +
                     \"prevTakeIndex=\" + prevTakeIndex + \" \" +
                     \"size()=\" + size() + \" \" +
                     \"remainingCapacity()=\" + remainingCapacity());
         }

Returns a {@link Spliterator} over the elements in this queue.

<p>The returned spliterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},
{@link Spliterator#ORDERED}, and {@link Spliterator#NONNULL}.

@implNote
The {@code Spliterator} implements {@code trySplit} to permit limited
parallelism.

@return a {@code Spliterator} over the elements in this queue
@since 1.8
"
      end
    end

    class 1099522 "BlockingQueue"
      visibility public stereotype "interface"
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 1064194 // Queue
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link java.util.Queue} that additionally supports operations
that wait for the queue to become non-empty when retrieving an
element, and wait for space to become available in the queue when
storing an element.

<p>{@code BlockingQueue} methods come in four forms, with different ways
of handling operations that cannot be satisfied immediately, but may be
satisfied at some point in the future:
one throws an exception, the second returns a special value (either
{@code null} or {@code false}, depending on the operation), the third
blocks the current thread indefinitely until the operation can succeed,
and the fourth blocks for only a given maximum time limit before giving
up.  These methods are summarized in the following table:

<table BORDER CELLPADDING=3 CELLSPACING=1>
<caption>Summary of BlockingQueue methods</caption>
 <tr>
   <td></td>
   <td ALIGN=CENTER><em>Throws exception</em></td>
   <td ALIGN=CENTER><em>Special value</em></td>
   <td ALIGN=CENTER><em>Blocks</em></td>
   <td ALIGN=CENTER><em>Times out</em></td>
 </tr>
 <tr>
   <td><b>Insert</b></td>
   <td>{@link #add add(e)}</td>
   <td>{@link #offer offer(e)}</td>
   <td>{@link #put put(e)}</td>
   <td>{@link #offer(Object, long, TimeUnit) offer(e, time, unit)}</td>
 </tr>
 <tr>
   <td><b>Remove</b></td>
   <td>{@link #remove remove()}</td>
   <td>{@link #poll poll()}</td>
   <td>{@link #take take()}</td>
   <td>{@link #poll(long, TimeUnit) poll(time, unit)}</td>
 </tr>
 <tr>
   <td><b>Examine</b></td>
   <td>{@link #element element()}</td>
   <td>{@link #peek peek()}</td>
   <td><em>not applicable</em></td>
   <td><em>not applicable</em></td>
 </tr>
</table>

<p>A {@code BlockingQueue} does not accept {@code null} elements.
Implementations throw {@code NullPointerException} on attempts
to {@code add}, {@code put} or {@code offer} a {@code null}.  A
{@code null} is used as a sentinel value to indicate failure of
{@code poll} operations.

<p>A {@code BlockingQueue} may be capacity bounded. At any given
time it may have a {@code remainingCapacity} beyond which no
additional elements can be {@code put} without blocking.
A {@code BlockingQueue} without any intrinsic capacity constraints always
reports a remaining capacity of {@code Integer.MAX_VALUE}.

<p>{@code BlockingQueue} implementations are designed to be used
primarily for producer-consumer queues, but additionally support
the {@link java.util.Collection} interface.  So, for example, it is
possible to remove an arbitrary element from a queue using
{@code remove(x)}. However, such operations are in general
<em>not</em> performed very efficiently, and are intended for only
occasional use, such as when a queued message is cancelled.

<p>{@code BlockingQueue} implementations are thread-safe.  All
queuing methods achieve their effects atomically using internal
locks or other forms of concurrency control. However, the
<em>bulk</em> Collection operations {@code addAll},
{@code containsAll}, {@code retainAll} and {@code removeAll} are
<em>not</em> necessarily performed atomically unless specified
otherwise in an implementation. So it is possible, for example, for
{@code addAll(c)} to fail (throwing an exception) after adding
only some of the elements in {@code c}.

<p>A {@code BlockingQueue} does <em>not</em> intrinsically support
any kind of &quot;close&quot; or &quot;shutdown&quot; operation to
indicate that no more items will be added.  The needs and usage of
such features tend to be implementation-dependent. For example, a
common tactic is for producers to insert special
<em>end-of-stream</em> or <em>poison</em> objects, that are
interpreted accordingly when taken by consumers.

<p>
Usage example, based on a typical producer-consumer scenario.
Note that a {@code BlockingQueue} can safely be used with multiple
producers and multiple consumers.
 <pre> {@code
class Producer implements Runnable {
  private final BlockingQueue queue;
  Producer(BlockingQueue q) { queue = q; }
  public void run() {
    try {
      while (true) { queue.put(produce()); }
    } catch (InterruptedException ex) { ... handle ...}
  }
  Object produce() { ... }
}

class Consumer implements Runnable {
  private final BlockingQueue queue;
  Consumer(BlockingQueue q) { queue = q; }
  public void run() {
    try {
      while (true) { consume(queue.take()); }
    } catch (InterruptedException ex) { ... handle ...}
  }
  void consume(Object x) { ... }
}

class Setup {
  void main() {
    BlockingQueue q = new SomeQueueImplementation();
    Producer p = new Producer(q);
    Consumer c1 = new Consumer(q);
    Consumer c2 = new Consumer(q);
    new Thread(p).start();
    new Thread(c1).start();
    new Thread(c2).start();
  }
}}</pre>

<p>Memory consistency effects: As with other concurrent
collections, actions in a thread prior to placing an object into a
{@code BlockingQueue}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions subsequent to the access or removal of that element from
the {@code BlockingQueue} in another thread.

<p>This interface is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 3560578 // <realization>
	relation 3560578 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3560578 // <realization>
	  b parent class_ref 1064194 // Queue
      end

      operation 8978434 "add"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue if it is possible to do
so immediately without violating capacity restrictions, returning
{@code true} upon success and throwing an
{@code IllegalStateException} if no space is currently available.
When using a capacity-restricted queue, it is generally preferable to
use {@link #offer(Object) offer}.

@param e the element to add
@return {@code true} (as specified by {@link Collection#add})
@throws IllegalStateException if the element cannot be added at this
        time due to capacity restrictions
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue
"
      end

      operation 8978562 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue if it is possible to do
so immediately without violating capacity restrictions, returning
{@code true} upon success and {@code false} if no space is currently
available.  When using a capacity-restricted queue, this method is
generally preferable to {@link #add}, which can fail to insert an
element only by throwing an exception.

@param e the element to add
@return {@code true} if the element was added to this queue, else
        {@code false}
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue
"
      end

      operation 8978690 "put"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue, waiting if necessary
for space to become available.

@param e the element to add
@throws InterruptedException if interrupted while waiting
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue
"
      end

      operation 8978818 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue, waiting up to the
specified wait time if necessary for space to become available.

@param e the element to add
@param timeout how long to wait before giving up, in units of
       {@code unit}
@param unit a {@code TimeUnit} determining how to interpret the
       {@code timeout} parameter
@return {@code true} if successful, or {@code false} if
        the specified waiting time elapses before space is available
@throws InterruptedException if interrupted while waiting
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue
"
      end

      operation 8978946 "take"
	cpp_inline public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting if necessary
until an element becomes available.

@return the head of this queue
@throws InterruptedException if interrupted while waiting
"
      end

      operation 8979074 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting up to the
specified wait time if necessary for an element to become available.

@param timeout how long to wait before giving up, in units of
       {@code unit}
@param unit a {@code TimeUnit} determining how to interpret the
       {@code timeout} parameter
@return the head of this queue, or {@code null} if the
        specified waiting time elapses before an element is available
@throws InterruptedException if interrupted while waiting
"
      end

      operation 8979202 "remainingCapacity"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of additional elements that this queue can ideally
(in the absence of memory or resource constraints) accept without
blocking, or {@code Integer.MAX_VALUE} if there is no intrinsic
limit.

<p>Note that you <em>cannot</em> always tell if an attempt to insert
an element will succeed by inspecting {@code remainingCapacity}
because it may be the case that another thread is about to
insert or remove an element.

@return the remaining capacity
"
      end

      operation 8979330 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this queue,
if it is present.  More formally, removes an element {@code e} such
that {@code o.equals(e)}, if this queue contains one or more such
elements.
Returns {@code true} if this queue contained the specified element
(or equivalently, if this queue changed as a result of the call).

@param o element to be removed from this queue, if present
@return {@code true} if this queue changed as a result of the call
@throws ClassCastException if the class of the specified element
        is incompatible with this queue
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified element is null
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
"
      end

      operation 8979458 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains the specified element.
More formally, returns {@code true} if and only if this queue contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this queue
@return {@code true} if this queue contains the specified element
@throws ClassCastException if the class of the specified element
        is incompatible with this queue
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified element is null
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
"
      end

      operation 8979586 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all available elements from this queue and adds them
to the given collection.  This operation may be more
efficient than repeatedly polling this queue.  A failure
encountered while attempting to add elements to
collection {@code c} may result in elements being in neither,
either or both collections when the associated exception is
thrown.  Attempts to drain a queue to itself result in
{@code IllegalArgumentException}. Further, the behavior of
this operation is undefined if the specified collection is
modified while the operation is in progress.

@param c the collection to transfer elements into
@return the number of elements transferred
@throws UnsupportedOperationException if addition of elements
        is not supported by the specified collection
@throws ClassCastException if the class of an element of this queue
        prevents it from being added to the specified collection
@throws NullPointerException if the specified collection is null
@throws IllegalArgumentException if the specified collection is this
        queue, or some property of an element of this queue prevents
        it from being added to the specified collection
"
      end

      operation 8979714 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 184194 // Collection
	  param in name "maxElements" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes at most the given number of available elements from
this queue and adds them to the given collection.  A failure
encountered while attempting to add elements to
collection {@code c} may result in elements being in neither,
either or both collections when the associated exception is
thrown.  Attempts to drain a queue to itself result in
{@code IllegalArgumentException}. Further, the behavior of
this operation is undefined if the specified collection is
modified while the operation is in progress.

@param c the collection to transfer elements into
@param maxElements the maximum number of elements to transfer
@return the number of elements transferred
@throws UnsupportedOperationException if addition of elements
        is not supported by the specified collection
@throws ClassCastException if the class of an element of this queue
        prevents it from being added to the specified collection
@throws NullPointerException if the specified collection is null
@throws IllegalArgumentException if the specified collection is this
        queue, or some property of an element of this queue prevents
        it from being added to the specified collection
"
      end
    end

    class 1100034 "BlockingDeque"
      visibility public stereotype "interface"
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1099522 // BlockingQueue
        rank 0 explicit_value ""
      actual class class_ref 1064450 // Deque
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link Deque} that additionally supports blocking operations that wait
for the deque to become non-empty when retrieving an element, and wait for
space to become available in the deque when storing an element.

<p>{@code BlockingDeque} methods come in four forms, with different ways
of handling operations that cannot be satisfied immediately, but may be
satisfied at some point in the future:
one throws an exception, the second returns a special value (either
{@code null} or {@code false}, depending on the operation), the third
blocks the current thread indefinitely until the operation can succeed,
and the fourth blocks for only a given maximum time limit before giving
up.  These methods are summarized in the following table:

<table BORDER CELLPADDING=3 CELLSPACING=1>
<caption>Summary of BlockingDeque methods</caption>
 <tr>
   <td ALIGN=CENTER COLSPAN = 5> <b>First Element (Head)</b></td>
 </tr>
 <tr>
   <td></td>
   <td ALIGN=CENTER><em>Throws exception</em></td>
   <td ALIGN=CENTER><em>Special value</em></td>
   <td ALIGN=CENTER><em>Blocks</em></td>
   <td ALIGN=CENTER><em>Times out</em></td>
 </tr>
 <tr>
   <td><b>Insert</b></td>
   <td>{@link #addFirst addFirst(e)}</td>
   <td>{@link #offerFirst(Object) offerFirst(e)}</td>
   <td>{@link #putFirst putFirst(e)}</td>
   <td>{@link #offerFirst(Object, long, TimeUnit) offerFirst(e, time, unit)}</td>
 </tr>
 <tr>
   <td><b>Remove</b></td>
   <td>{@link #removeFirst removeFirst()}</td>
   <td>{@link #pollFirst pollFirst()}</td>
   <td>{@link #takeFirst takeFirst()}</td>
   <td>{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>
 </tr>
 <tr>
   <td><b>Examine</b></td>
   <td>{@link #getFirst getFirst()}</td>
   <td>{@link #peekFirst peekFirst()}</td>
   <td><em>not applicable</em></td>
   <td><em>not applicable</em></td>
 </tr>
 <tr>
   <td ALIGN=CENTER COLSPAN = 5> <b>Last Element (Tail)</b></td>
 </tr>
 <tr>
   <td></td>
   <td ALIGN=CENTER><em>Throws exception</em></td>
   <td ALIGN=CENTER><em>Special value</em></td>
   <td ALIGN=CENTER><em>Blocks</em></td>
   <td ALIGN=CENTER><em>Times out</em></td>
 </tr>
 <tr>
   <td><b>Insert</b></td>
   <td>{@link #addLast addLast(e)}</td>
   <td>{@link #offerLast(Object) offerLast(e)}</td>
   <td>{@link #putLast putLast(e)}</td>
   <td>{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>
 </tr>
 <tr>
   <td><b>Remove</b></td>
   <td>{@link #removeLast() removeLast()}</td>
   <td>{@link #pollLast() pollLast()}</td>
   <td>{@link #takeLast takeLast()}</td>
   <td>{@link #pollLast(long, TimeUnit) pollLast(time, unit)}</td>
 </tr>
 <tr>
   <td><b>Examine</b></td>
   <td>{@link #getLast getLast()}</td>
   <td>{@link #peekLast peekLast()}</td>
   <td><em>not applicable</em></td>
   <td><em>not applicable</em></td>
 </tr>
</table>

<p>Like any {@link BlockingQueue}, a {@code BlockingDeque} is thread safe,
does not permit null elements, and may (or may not) be
capacity-constrained.

<p>A {@code BlockingDeque} implementation may be used directly as a FIFO
{@code BlockingQueue}. The methods inherited from the
{@code BlockingQueue} interface are precisely equivalent to
{@code BlockingDeque} methods as indicated in the following table:

<table BORDER CELLPADDING=3 CELLSPACING=1>
<caption>Comparison of BlockingQueue and BlockingDeque methods</caption>
 <tr>
   <td ALIGN=CENTER> <b>{@code BlockingQueue} Method</b></td>
   <td ALIGN=CENTER> <b>Equivalent {@code BlockingDeque} Method</b></td>
 </tr>
 <tr>
   <td ALIGN=CENTER COLSPAN = 2> <b>Insert</b></td>
 </tr>
 <tr>
   <td>{@link #add(Object) add(e)}</td>
   <td>{@link #addLast(Object) addLast(e)}</td>
 </tr>
 <tr>
   <td>{@link #offer(Object) offer(e)}</td>
   <td>{@link #offerLast(Object) offerLast(e)}</td>
 </tr>
 <tr>
   <td>{@link #put(Object) put(e)}</td>
   <td>{@link #putLast(Object) putLast(e)}</td>
 </tr>
 <tr>
   <td>{@link #offer(Object, long, TimeUnit) offer(e, time, unit)}</td>
   <td>{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>
 </tr>
 <tr>
   <td ALIGN=CENTER COLSPAN = 2> <b>Remove</b></td>
 </tr>
 <tr>
   <td>{@link #remove() remove()}</td>
   <td>{@link #removeFirst() removeFirst()}</td>
 </tr>
 <tr>
   <td>{@link #poll() poll()}</td>
   <td>{@link #pollFirst() pollFirst()}</td>
 </tr>
 <tr>
   <td>{@link #take() take()}</td>
   <td>{@link #takeFirst() takeFirst()}</td>
 </tr>
 <tr>
   <td>{@link #poll(long, TimeUnit) poll(time, unit)}</td>
   <td>{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>
 </tr>
 <tr>
   <td ALIGN=CENTER COLSPAN = 2> <b>Examine</b></td>
 </tr>
 <tr>
   <td>{@link #element() element()}</td>
   <td>{@link #getFirst() getFirst()}</td>
 </tr>
 <tr>
   <td>{@link #peek() peek()}</td>
   <td>{@link #peekFirst() peekFirst()}</td>
 </tr>
</table>

<p>Memory consistency effects: As with other concurrent
collections, actions in a thread prior to placing an object into a
{@code BlockingDeque}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions subsequent to the access or removal of that element from
the {@code BlockingDeque} in another thread.

<p>This interface is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.6
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 3562242 // <realization>
	relation 3562242 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3562242 // <realization>
	  b parent class_ref 1099522 // BlockingQueue
      end

      classrelation 3562370 // <realization>
	relation 3562370 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3562370 // <realization>
	  b parent class_ref 1064450 // Deque
      end

      operation 8986370 "addFirst"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "We have \"diamond\" multiple interface inheritance here, and that
introduces ambiguities.  Methods might end up with different
specs depending on the branch chosen by javadoc.  Thus a lot of
methods specs here are copied from superinterfaces.


Inserts the specified element at the front of this deque if it is
possible to do so immediately without violating capacity restrictions,
throwing an {@code IllegalStateException} if no space is currently
available.  When using a capacity-restricted deque, it is generally
preferable to use {@link #offerFirst(Object) offerFirst}.

@param e the element to add
@throws IllegalStateException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 8986498 "addLast"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the end of this deque if it is
possible to do so immediately without violating capacity restrictions,
throwing an {@code IllegalStateException} if no space is currently
available.  When using a capacity-restricted deque, it is generally
preferable to use {@link #offerLast(Object) offerLast}.

@param e the element to add
@throws IllegalStateException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 8986626 "offerFirst"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the front of this deque if it is
possible to do so immediately without violating capacity restrictions,
returning {@code true} upon success and {@code false} if no space is
currently available.
When using a capacity-restricted deque, this method is generally
preferable to the {@link #addFirst(Object) addFirst} method, which can
fail to insert an element only by throwing an exception.

@param e the element to add
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 8986754 "offerLast"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the end of this deque if it is
possible to do so immediately without violating capacity restrictions,
returning {@code true} upon success and {@code false} if no space is
currently available.
When using a capacity-restricted deque, this method is generally
preferable to the {@link #addLast(Object) addLast} method, which can
fail to insert an element only by throwing an exception.

@param e the element to add
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 8986882 "putFirst"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the front of this deque,
waiting if necessary for space to become available.

@param e the element to add
@throws InterruptedException if interrupted while waiting
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque
"
      end

      operation 8987010 "putLast"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the end of this deque,
waiting if necessary for space to become available.

@param e the element to add
@throws InterruptedException if interrupted while waiting
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque
"
      end

      operation 8987138 "offerFirst"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the front of this deque,
waiting up to the specified wait time if necessary for space to
become available.

@param e the element to add
@param timeout how long to wait before giving up, in units of
       {@code unit}
@param unit a {@code TimeUnit} determining how to interpret the
       {@code timeout} parameter
@return {@code true} if successful, or {@code false} if
        the specified waiting time elapses before space is available
@throws InterruptedException if interrupted while waiting
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque
"
      end

      operation 8987266 "offerLast"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the end of this deque,
waiting up to the specified wait time if necessary for space to
become available.

@param e the element to add
@param timeout how long to wait before giving up, in units of
       {@code unit}
@param unit a {@code TimeUnit} determining how to interpret the
       {@code timeout} parameter
@return {@code true} if successful, or {@code false} if
        the specified waiting time elapses before space is available
@throws InterruptedException if interrupted while waiting
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque
"
      end

      operation 8987394 "takeFirst"
	cpp_inline public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the first element of this deque, waiting
if necessary until an element becomes available.

@return the head of this deque
@throws InterruptedException if interrupted while waiting
"
      end

      operation 8987522 "takeLast"
	cpp_inline public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the last element of this deque, waiting
if necessary until an element becomes available.

@return the tail of this deque
@throws InterruptedException if interrupted while waiting
"
      end

      operation 8987650 "pollFirst"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the first element of this deque, waiting
up to the specified wait time if necessary for an element to
become available.

@param timeout how long to wait before giving up, in units of
       {@code unit}
@param unit a {@code TimeUnit} determining how to interpret the
       {@code timeout} parameter
@return the head of this deque, or {@code null} if the specified
        waiting time elapses before an element is available
@throws InterruptedException if interrupted while waiting
"
      end

      operation 8987778 "pollLast"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the last element of this deque, waiting
up to the specified wait time if necessary for an element to
become available.

@param timeout how long to wait before giving up, in units of
       {@code unit}
@param unit a {@code TimeUnit} determining how to interpret the
       {@code timeout} parameter
@return the tail of this deque, or {@code null} if the specified
        waiting time elapses before an element is available
@throws InterruptedException if interrupted while waiting
"
      end

      operation 8987906 "removeFirstOccurrence"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first occurrence of the specified element from this deque.
If the deque does not contain the element, it is unchanged.
More formally, removes the first element {@code e} such that
{@code o.equals(e)} (if such an element exists).
Returns {@code true} if this deque contained the specified element
(or equivalently, if this deque changed as a result of the call).

@param o element to be removed from this deque, if present
@return {@code true} if an element was removed as a result of this call
@throws ClassCastException if the class of the specified element
        is incompatible with this deque
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified element is null
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
"
      end

      operation 8988034 "removeLastOccurrence"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the last occurrence of the specified element from this deque.
If the deque does not contain the element, it is unchanged.
More formally, removes the last element {@code e} such that
{@code o.equals(e)} (if such an element exists).
Returns {@code true} if this deque contained the specified element
(or equivalently, if this deque changed as a result of the call).

@param o element to be removed from this deque, if present
@return {@code true} if an element was removed as a result of this call
@throws ClassCastException if the class of the specified element
        is incompatible with this deque
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified element is null
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
"
      end

      operation 8988162 "add"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** BlockingQueue methods ***

Inserts the specified element into the queue represented by this deque
(in other words, at the tail of this deque) if it is possible to do so
immediately without violating capacity restrictions, returning
{@code true} upon success and throwing an
{@code IllegalStateException} if no space is currently available.
When using a capacity-restricted deque, it is generally preferable to
use {@link #offer(Object) offer}.

<p>This method is equivalent to {@link #addLast(Object) addLast}.

@param e the element to add
@throws IllegalStateException {@inheritDoc}
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque
"
      end

      operation 8988290 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into the queue represented by this deque
(in other words, at the tail of this deque) if it is possible to do so
immediately without violating capacity restrictions, returning
{@code true} upon success and {@code false} if no space is currently
available.  When using a capacity-restricted deque, this method is
generally preferable to the {@link #add} method, which can fail to
insert an element only by throwing an exception.

<p>This method is equivalent to {@link #offerLast(Object) offerLast}.

@param e the element to add
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque
"
      end

      operation 8988418 "put"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into the queue represented by this deque
(in other words, at the tail of this deque), waiting if necessary for
space to become available.

<p>This method is equivalent to {@link #putLast(Object) putLast}.

@param e the element to add
@throws InterruptedException {@inheritDoc}
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque
"
      end

      operation 8988546 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into the queue represented by this deque
(in other words, at the tail of this deque), waiting up to the
specified wait time if necessary for space to become available.

<p>This method is equivalent to
{@link #offerLast(Object,long,TimeUnit) offerLast}.

@param e the element to add
@return {@code true} if the element was added to this deque, else
        {@code false}
@throws InterruptedException {@inheritDoc}
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque
"
      end

      operation 8988674 "remove"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of the queue represented by this deque
(in other words, the first element of this deque).
This method differs from {@link #poll poll} only in that it
throws an exception if this deque is empty.

<p>This method is equivalent to {@link #removeFirst() removeFirst}.

@return the head of the queue represented by this deque
@throws NoSuchElementException if this deque is empty
"
      end

      operation 8988802 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of the queue represented by this deque
(in other words, the first element of this deque), or returns
{@code null} if this deque is empty.

<p>This method is equivalent to {@link #pollFirst()}.

@return the head of this deque, or {@code null} if this deque is empty
"
      end

      operation 8988930 "take"
	cpp_inline public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of the queue represented by this deque
(in other words, the first element of this deque), waiting if
necessary until an element becomes available.

<p>This method is equivalent to {@link #takeFirst() takeFirst}.

@return the head of this deque
@throws InterruptedException if interrupted while waiting
"
      end

      operation 8989058 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of the queue represented by this deque
(in other words, the first element of this deque), waiting up to the
specified wait time if necessary for an element to become available.

<p>This method is equivalent to
{@link #pollFirst(long,TimeUnit) pollFirst}.

@return the head of this deque, or {@code null} if the
        specified waiting time elapses before an element is available
@throws InterruptedException if interrupted while waiting
"
      end

      operation 8989186 "element"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves, but does not remove, the head of the queue represented by
this deque (in other words, the first element of this deque).
This method differs from {@link #peek peek} only in that it throws an
exception if this deque is empty.

<p>This method is equivalent to {@link #getFirst() getFirst}.

@return the head of this deque
@throws NoSuchElementException if this deque is empty
"
      end

      operation 8989314 "peek"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves, but does not remove, the head of the queue represented by
this deque (in other words, the first element of this deque), or
returns {@code null} if this deque is empty.

<p>This method is equivalent to {@link #peekFirst() peekFirst}.

@return the head of this deque, or {@code null} if this deque is empty
"
      end

      operation 8989442 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first occurrence of the specified element from this deque.
If the deque does not contain the element, it is unchanged.
More formally, removes the first element {@code e} such that
{@code o.equals(e)} (if such an element exists).
Returns {@code true} if this deque contained the specified element
(or equivalently, if this deque changed as a result of the call).

<p>This method is equivalent to
{@link #removeFirstOccurrence(Object) removeFirstOccurrence}.

@param o element to be removed from this deque, if present
@return {@code true} if this deque changed as a result of the call
@throws ClassCastException if the class of the specified element
        is incompatible with this deque
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified element is null
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
"
      end

      operation 8989570 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this deque contains the specified element.
More formally, returns {@code true} if and only if this deque contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this deque
@return {@code true} if this deque contains the specified element
@throws ClassCastException if the class of the specified element
        is incompatible with this deque
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified element is null
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
"
      end

      operation 8989698 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this deque.

@return the number of elements in this deque
"
      end

      operation 8989826 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this deque in proper sequence.
The elements will be returned in order from first (head) to last (tail).

@return an iterator over the elements in this deque in proper sequence
"
      end

      operation 8989954 "push"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Stack methods ***

Pushes an element onto the stack represented by this deque (in other
words, at the head of this deque) if it is possible to do so
immediately without violating capacity restrictions, throwing an
{@code IllegalStateException} if no space is currently available.

<p>This method is equivalent to {@link #addFirst(Object) addFirst}.

@throws IllegalStateException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException {@inheritDoc}
"
      end
    end

    class 1100162 "BrokenBarrierException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception thrown when a thread tries to wait upon a barrier that is
in a broken state, or which enters the broken state while the thread
is waiting.

@see CyclicBarrier

@since 1.5
@author Doug Lea
"
      classrelation 3562498 // <generalisation>
	relation 3562498 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3562498 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 2094594 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7117394618823254244L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8990082 "BrokenBarrierException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code BrokenBarrierException} with no specified detail
message.
"
      end

      operation 8990210 "BrokenBarrierException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code BrokenBarrierException} with the specified
detail message.

@param message the detail message
"
      end
    end

    class 1100290 "CancellationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception indicating that the result of a value-producing task,
such as a {@link FutureTask}, cannot be retrieved because the task
was cancelled.

@since 1.5
@author Doug Lea
"
      classrelation 3562626 // <generalisation>
	relation 3562626 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3562626 // <generalisation>
	  b parent class_ref 254850 // IllegalStateException
      end

      attribute 2094722 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -9202173006928992231L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8990338 "CancellationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code CancellationException} with no detail message.
"
      end

      operation 8990466 "CancellationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code CancellationException} with the specified detail
message.

@param message the detail message
"
      end
    end

    class 1100418 "CompletableFuture"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 984706 // Future
        rank 0 explicit_value ""
      actual class class_ref 1100546 // CompletionStage
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link Future} that may be explicitly completed (setting its
value and status), and may be used as a {@link CompletionStage},
supporting dependent functions and actions that trigger upon its
completion.

<p>When two or more threads attempt to
{@link #complete complete},
{@link #completeExceptionally completeExceptionally}, or
{@link #cancel cancel}
a CompletableFuture, only one of them succeeds.

<p>In addition to these and related methods for directly
manipulating status and results, CompletableFuture implements
interface {@link CompletionStage} with the following policies: <ul>

<li>Actions supplied for dependent completions of
<em>non-async</em> methods may be performed by the thread that
completes the current CompletableFuture, or by any other caller of
a completion method.</li>

<li>All <em>async</em> methods without an explicit Executor
argument are performed using the {@link ForkJoinPool#commonPool()}
(unless it does not support a parallelism level of at least two, in
which case, a new Thread is created to run each task).  To simplify
monitoring, debugging, and tracking, all generated asynchronous
tasks are instances of the marker interface {@link
AsynchronousCompletionTask}. </li>

<li>All CompletionStage methods are implemented independently of
other public methods, so the behavior of one method is not impacted
by overrides of others in subclasses.  </li> </ul>

<p>CompletableFuture also implements {@link Future} with the following
policies: <ul>

<li>Since (unlike {@link FutureTask}) this class has no direct
control over the computation that causes it to be completed,
cancellation is treated as just another form of exceptional
completion.  Method {@link #cancel cancel} has the same effect as
{@code completeExceptionally(new CancellationException())}. Method
{@link #isCompletedExceptionally} can be used to determine if a
CompletableFuture completed in any exceptional fashion.</li>

<li>In case of exceptional completion with a CompletionException,
methods {@link #get()} and {@link #get(long, TimeUnit)} throw an
{@link ExecutionException} with the same cause as held in the
corresponding CompletionException.  To simplify usage in most
contexts, this class also defines methods {@link #join()} and
{@link #getNow} that instead throw the CompletionException directly
in these cases.</li> </ul>

@author Doug Lea
@since 1.8
"
      classrelation 3562754 // <realization>
	relation 3562754 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3562754 // <realization>
	  b parent class_ref 984706 // Future
      end

      classrelation 3562882 // <realization>
	relation 3562882 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3562882 // <realization>
	  b parent class_ref 1100546 // CompletionStage
      end

      classrelation 3563010 // result (<unidirectional association>)
	relation 3563010 --->
	  a role_name "result" volatile package
	    comment "
Overview:

A CompletableFuture may have dependent completion actions,
collected in a linked stack. It atomically completes by CASing
a result field, and then pops off and runs those actions. This
applies across normal vs exceptional outcomes, sync vs async
actions, binary triggers, and various forms of completions.

Non-nullness of field result (set via CAS) indicates done.  An
AltResult is used to box null as a result, as well as to hold
exceptions.  Using a single field makes completion simple to
detect and trigger.  Encoding and decoding is straightforward
but adds to the sprawl of trapping and associating exceptions
with targets.  Minor simplifications rely on (static) NIL (to
box null results) being the only AltResult with a null
exception field, so we don't usually need explicit comparisons.
Even though some of the generics casts are unchecked (see
SuppressWarnings annotations), they are placed to be
appropriate even if checked.

Dependent actions are represented by Completion objects linked
as Treiber stacks headed by field \"stack\". There are Completion
classes for each kind of action, grouped into single-input
(UniCompletion), two-input (BiCompletion), projected
(BiCompletions using either (not both) of two inputs), shared
(CoCompletion, used by the second of two sources), zero-input
source actions, and Signallers that unblock waiters. Class
Completion extends ForkJoinTask to enable async execution
(adding no space overhead because we exploit its \"tag\" methods
to maintain claims). It is also declared as Runnable to allow
usage with arbitrary executors.

Support for each kind of CompletionStage relies on a separate
class, along with two CompletableFuture methods:

* A Completion class with name X corresponding to function,
  prefaced with \"Uni\", \"Bi\", or \"Or\". Each class contains
  fields for source(s), actions, and dependent. They are
  boringly similar, differing from others only with respect to
  underlying functional forms. We do this so that users don't
  encounter layers of adaptors in common usages. We also
  include \"Relay\" classes/methods that don't correspond to user
  methods; they copy results from one stage to another.

* Boolean CompletableFuture method x(...) (for example
  uniApply) takes all of the arguments needed to check that an
  action is triggerable, and then either runs the action or
  arranges its async execution by executing its Completion
  argument, if present. The method returns true if known to be
  complete.

* Completion method tryFire(int mode) invokes the associated x
  method with its held arguments, and on success cleans up.
  The mode argument allows tryFire to be called twice (SYNC,
  then ASYNC); the first to screen and trap exceptions while
  arranging to execute, and the second when called from a
  task. (A few classes are not used async so take slightly
  different forms.)  The claim() callback suppresses function
  invocation if already claimed by another thread.

* CompletableFuture method xStage(...) is called from a public
  stage method of CompletableFuture x. It screens user
  arguments and invokes and/or creates the stage object.  If
  not async and x is already complete, the action is run
  immediately.  Otherwise a Completion c is created, pushed to
  x's stack (unless done), and started or triggered via
  c.tryFire.  This also covers races possible if x completes
  while pushing.  Classes with two inputs (for example BiApply)
  deal with races across both while pushing actions.  The
  second completion is a CoCompletion pointing to the first,
  shared so that at most one performs the action.  The
  multiple-arity methods allOf and anyOf do this pairwise to
  form trees of completions.

Note that the generic type parameters of methods vary according
to whether \"this\" is a source, dependent, or completion.

Method postComplete is called upon completion unless the target
is guaranteed not to be observable (i.e., not yet returned or
linked). Multiple threads can call postComplete, which
atomically pops each dependent action, and tries to trigger it
via method tryFire, in NESTED mode.  Triggering can propagate
recursively, so NESTED mode returns its completed dependent (if
one exists) for further processing by its caller (see method
postFire).

Blocking methods get() and join() rely on Signaller Completions
that wake up waiting threads.  The mechanics are similar to
Treiber stack wait-nodes used in FutureTask, Phaser, and
SynchronousQueue. See their internal documentation for
algorithmic details.

Without precautions, CompletableFutures would be prone to
garbage accumulation as chains of Completions build up, each
pointing back to its sources. So we null out fields as soon as
possible (see especially method Completion.detach). The
screening checks needed anyway harmlessly ignore null arguments
that may have been obtained during races with threads nulling
out fields.  We also try to unlink fired Completions from
stacks that might never be popped (see method postFire).
Completion fields need not be declared as final or volatile
because they are only visible to other threads upon safe
publication.

 Either the result or boxed AltResult"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3563010 // result (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      class 1100674 "Completion"
	abstract visibility package 
	nactuals 2
	actual class class_ref 1065346 // ForkJoinTask
	  rank 0 explicit_value ""
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3563778 // <realization>
	  relation 3563778 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3563778 // <realization>
	    b parent class_ref 1065346 // ForkJoinTask
	end

	classrelation 3563906 // <realization>
	  relation 3563906 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3563906 // <realization>
	    b parent class_ref 128770 // Runnable
	end

	classrelation 3564034 // <realization>
	  relation 3564034 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3564034 // <realization>
	    b parent class_ref 1100930 // AsynchronousCompletionTask
	end

	classrelation 3564162 // next (<unidirectional association>)
	  relation 3564162 --->
	    a role_name "next" volatile package
	      comment " Treiber stack link"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3564162 // next (<unidirectional association>)
	    b parent class_ref 1100674 // Completion
	end

	operation 8997890 "tryFire"
	  abstract cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Performs completion action if triggered, returning a
dependent that may need propagation, if one exists.

@param mode SYNC, ASYNC, or NESTED
"
	end

	operation 8998018 "isLive"
	  abstract cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns true if possibly still triggerable. Used by cleanStack. "
	end

	operation 8998146 "run"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8998274 "exec"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8998402 "getRawResult"
	  cpp_inline public return_type class_ref 146946 // Void
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8998530 "setRawResult"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "v" type class_ref 146946 // Void
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3563138 // stack (<unidirectional association>)
	relation 3563138 --->
	  a role_name "stack" volatile package
	    comment " Top of Treiber stack of dependent actions"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3563138 // stack (<unidirectional association>)
	  b parent class_ref 1100674 // Completion
      end

      operation 8995458 "internalComplete"
	cpp_inline package explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8995586 "casStack"
	cpp_inline package explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 1100674 // Completion
	  param inout name "val" type class_ref 1100674 // Completion
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8995714 "tryPushStack"
	cpp_inline package explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 1100674 // Completion
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns true if successfully pushed c onto stack. "
      end

      operation 8995842 "pushStack"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 1100674 // Completion
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Unconditionally pushes c onto stack, retrying if necessary. "
      end

      class 1100802 "AltResult"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3563266 // ex (<unidirectional association>)
	  relation 3563266 --->
	    a role_name "ex" const_relation package
	      comment " See above
 null only for NIL"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3563266 // ex (<unidirectional association>)
	    b parent class_ref 129922 // Throwable
	end

	operation 8995970 "AltResult"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "x" type class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3563394 // NIL (<unidirectional association>)
	relation 3563394 --->
	  a role_name "NIL" init_value " new AltResult(null)" class_relation const_relation package
	    comment " The encoding of the null value. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3563394 // NIL (<unidirectional association>)
	  b parent class_ref 1100802 // AltResult
      end

      operation 8996098 "completeNull"
	cpp_inline package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Completes with the null value, unless already completed. "
      end

      operation 8996226 "encodeValue"
	cpp_inline package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "t" explicit_type "T"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the encoding of the given non-exceptional value. "
      end

      operation 8996354 "completeValue"
	cpp_inline package explicit_return_type "boolean"
	nparams 1
	  param inout name "t" explicit_type "T"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Completes with a non-exceptional result, unless already completed. "
      end

      operation 8996482 "encodeThrowable"
	class_operation cpp_inline package return_type class_ref 1100802 // AltResult
	nparams 1
	  param inout name "x" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encoding of the given (non-null) exception as a
wrapped CompletionException unless it is one already.
"
      end

      operation 8996610 "completeThrowable"
	cpp_inline package explicit_return_type "boolean"
	nparams 1
	  param inout name "x" type class_ref 129922 // Throwable
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Completes with an exceptional result, unless already completed. "
      end

      operation 8996738 "encodeThrowable"
	class_operation cpp_inline package return_type class_ref 129538 // Object
	nparams 2
	  param inout name "x" type class_ref 129922 // Throwable
	  param inout name "r" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encoding of the given (non-null) exception as a
wrapped CompletionException unless it is one already.  May
return the given Object r (which must have been the result of a
source future) if it is equivalent, i.e. if this is a simple
relay of an existing CompletionException.
"
      end

      operation 8996866 "completeThrowable"
	cpp_inline package explicit_return_type "boolean"
	nparams 2
	  param inout name "x" type class_ref 129922 // Throwable
	  param inout name "r" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes with the given (non-null) exceptional result as a
wrapped CompletionException unless it is one already, unless
already completed.  May complete with the given Object r
(which must have been the result of a source future) if it is
equivalent, i.e. if this is a simple propagation of an
existing CompletionException.
"
      end

      operation 8996994 "encodeOutcome"
	cpp_inline package return_type class_ref 129538 // Object
	nparams 2
	  param inout name "t" explicit_type "T"
	  param inout name "x" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encoding of the given arguments: if the exception
is non-null, encodes as AltResult.  Otherwise uses the given
value, boxed as NIL if null.
"
      end

      operation 8997122 "encodeRelay"
	class_operation cpp_inline package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "r" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encoding of a copied outcome; if exceptional,
rewraps as a CompletionException, else returns argument.
"
      end

      operation 8997250 "completeRelay"
	cpp_inline package explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes with r or a copy of r, unless already completed.
If exceptional, r is first coerced to a CompletionException.
"
      end

      operation 8997378 "reportGet"
	class_operation cpp_inline private explicit_return_type "T"
	nparams 1
	  param inout name "r" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports result using Future.get conventions.
"
      end

      operation 8997506 "reportJoin"
	class_operation cpp_inline private explicit_return_type "T"
	nparams 1
	  param inout name "r" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes outcome to return result or throw unchecked exception.
"
      end

      class 1100930 "AsynchronousCompletionTask"
	visibility public stereotype "interface"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      attribute 2094850 "useCommonPool"
	class_attribute const_attribute private explicit_type "boolean"
	init_value "
        (ForkJoinPool.getCommonPoolParallelism() > 1)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3563522 // asyncPool (<unidirectional association>)
	relation 3563522 --->
	  a role_name "asyncPool" init_value " useCommonPool ?
        ForkJoinPool.commonPool() : new ThreadPerTaskExecutor()" class_relation const_relation private
	    comment "
Default executor -- ForkJoinPool.commonPool() unless it cannot
support parallelism.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3563522 // asyncPool (<unidirectional association>)
	  b parent class_ref 503426 // Executor
      end

      class 1101058 "ThreadPerTaskExecutor"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3563650 // <realization>
	  relation 3563650 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3563650 // <realization>
	    b parent class_ref 503426 // Executor
	end

	operation 8997634 "execute"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "r" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 8997762 "screenExecutor"
	class_operation cpp_inline package return_type class_ref 503426 // Executor
	nparams 1
	  param inout name "e" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Null-checks user executor argument, and translates uses of
commonPool to asyncPool in case parallelism disabled.
"
      end

      attribute 2094978 "SYNC"
	class_attribute const_attribute package explicit_type "int"
	init_value "  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Modes for Completion.tryFire. Signedness matters.
"
      end

      attribute 2095106 "ASYNC"
	class_attribute const_attribute package explicit_type "int"
	init_value "  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2095234 "NESTED"
	class_attribute const_attribute package explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8998658 "lazySetNext"
	class_operation cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "c" type class_ref 1100674 // Completion
	  param inout name "next" type class_ref 1100674 // Completion
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8998786 "postComplete"
	cpp_inline package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pops and tries to trigger all reachable dependents.  Call only
when known to be done.
"
      end

      operation 8998914 "cleanStack"
	cpp_inline package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Traverses stack and unlinks dead Completions. "
      end

      class 1101186 "UniCompletion"
	abstract visibility package 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3564290 // <generalisation>
	  relation 3564290 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3564290 // <generalisation>
	    b parent class_ref 1100674 // Completion
	end

	classrelation 3564418 // executor (<unidirectional association>)
	  relation 3564418 --->
	    a role_name "executor" package
	      comment " executor to use (null if none)"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3564418 // executor (<unidirectional association>)
	    b parent class_ref 503426 // Executor
	end

	classrelation 3564546 // dep (<unidirectional association>)
	  relation 3564546 --->
	    a role_name "dep" package
	      comment " the dependent to complete"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 3564546 // dep (<unidirectional association>)
	    b parent class_ref 1100418 // CompletableFuture
	end

	classrelation 3564674 // src (<unidirectional association>)
	  relation 3564674 --->
	    a role_name "src" package
	      comment " source for action"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3564674 // src (<unidirectional association>)
	    b parent class_ref 1100418 // CompletableFuture
	end

	operation 8999042 "UniCompletion"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<V> ${p1}, ${t2}<T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8999170 "claim"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if action can be run. Call only when known to
be triggerable. Uses FJ tag bit to ensure that only one
thread claims ownership.  If async, starts as task -- a
later call to tryFire will run action.
"
	end

	operation 8999298 "isLive"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 8999426 "push"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 1101186 // UniCompletion
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Pushes the given completion (if it exists) unless done. "
      end

      operation 8999554 "postFire"
	cpp_inline package return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param in name "mode" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Post-processing by dependent after successful UniCompletion
tryFire.  Tries to clean stack of source a, and then either runs
postComplete or returns this to caller, depending on mode.
"
      end

      class 1101314 "UniApply"
	visibility package 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3564802 // <realization>
	  relation 3564802 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3564802 // <realization>
	    b parent class_ref 1101186 // UniCompletion
	end

	classrelation 3564930 // fn (<unidirectional association>)
	  relation 3564930 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T,? extends V> ${name}${value};
"
	      classrelation_ref 3564930 // fn (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	operation 8999682 "UniApply"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 192770 // Function
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<V> ${p1}, ${t2}<T> ${p2}, ${t3}<? super T,? extends V> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8999810 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 8999938 "uniApply"
	cpp_inline package explicit_return_type "boolean"
	nparams 3
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "f" type class_ref 192770 // Function
	  param inout name "c" type class_ref 1101314 // UniApply
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S> ${type} ${name}${(}${t0}<S> ${p0}, ${t1}<? super S,? extends T> ${p1}, ${t2}<S,T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9000066 "uniApplyStage"
	cpp_inline private return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "f" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0} ${p0}, ${t1}<? super T,? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1101442 "UniAccept"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3565058 // <realization>
	  relation 3565058 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3565058 // <realization>
	    b parent class_ref 1101186 // UniCompletion
	end

	classrelation 3565186 // fn (<unidirectional association>)
	  relation 3565186 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T> ${name}${value};
"
	      classrelation_ref 3565186 // fn (<unidirectional association>)
	    b parent class_ref 163458 // Consumer
	end

	operation 9000194 "UniAccept"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Void> ${p1}, ${t2}<T> ${p2}, ${t3}<? super T> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9000322 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9000450 "uniAccept"
	cpp_inline package explicit_return_type "boolean"
	nparams 3
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "f" type class_ref 163458 // Consumer
	  param inout name "c" type class_ref 1101442 // UniAccept
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S> ${type} ${name}${(}${t0}<S> ${p0}, ${t1}<? super S> ${p1}, ${t2}<S> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9000578 "uniAcceptStage"
	cpp_inline private return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "f" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1101570 "UniRun"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3565314 // <realization>
	  relation 3565314 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3565314 // <realization>
	    b parent class_ref 1101186 // UniCompletion
	end

	classrelation 3565442 // fn (<unidirectional association>)
	  relation 3565442 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3565442 // fn (<unidirectional association>)
	    b parent class_ref 128770 // Runnable
	end

	operation 9000706 "UniRun"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Void> ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9000834 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9000962 "uniRun"
	cpp_inline package explicit_return_type "boolean"
	nparams 3
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "f" type class_ref 128770 // Runnable
	  param inout name "c" type class_ref 1101570 // UniRun
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9001090 "uniRunStage"
	cpp_inline private return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "f" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1101698 "UniWhenComplete"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3565570 // <realization>
	  relation 3565570 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3565570 // <realization>
	    b parent class_ref 1101186 // UniCompletion
	end

	classrelation 3565698 // fn (<unidirectional association>)
	  relation 3565698 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T, ? super Throwable> ${name}${value};
"
	      classrelation_ref 3565698 // fn (<unidirectional association>)
	    b parent class_ref 192514 // BiConsumer
	end

	operation 9001218 "UniWhenComplete"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 192514 // BiConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2}<T> ${p2}, ${t3}<? super T, ? super Throwable> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9001346 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9001474 "uniWhenComplete"
	cpp_inline package explicit_return_type "boolean"
	nparams 3
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "f" type class_ref 192514 // BiConsumer
	  param inout name "c" type class_ref 1101698 // UniWhenComplete
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<T> ${p0}, ${t1}<? super T,? super Throwable> ${p1}, ${t2}<T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9001602 "uniWhenCompleteStage"
	cpp_inline private return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "f" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}, ${t1}<? super T, ? super Throwable> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1101826 "UniHandle"
	visibility package 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3565826 // <realization>
	  relation 3565826 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3565826 // <realization>
	    b parent class_ref 1101186 // UniCompletion
	end

	classrelation 3565954 // fn (<unidirectional association>)
	  relation 3565954 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T, Throwable, ? extends V> ${name}${value};
"
	      classrelation_ref 3565954 // fn (<unidirectional association>)
	    b parent class_ref 192642 // BiFunction
	end

	operation 9001730 "UniHandle"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 192642 // BiFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<V> ${p1}, ${t2}<T> ${p2}, ${t3}<? super T, Throwable, ? extends V> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9001858 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9001986 "uniHandle"
	cpp_inline package explicit_return_type "boolean"
	nparams 3
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "f" type class_ref 192642 // BiFunction
	  param inout name "c" type class_ref 1101826 // UniHandle
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S> ${type} ${name}${(}${t0}<S> ${p0}, ${t1}<? super S, Throwable, ? extends T> ${p1}, ${t2}<S,T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9002114 "uniHandleStage"
	cpp_inline private return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "f" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0} ${p0}, ${t1}<? super T, Throwable, ? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1101954 "UniExceptionally"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3566082 // <realization>
	  relation 3566082 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3566082 // <realization>
	    b parent class_ref 1101186 // UniCompletion
	end

	classrelation 3566210 // fn (<unidirectional association>)
	  relation 3566210 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super Throwable, ? extends T> ${name}${value};
"
	      classrelation_ref 3566210 // fn (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	operation 9002242 "UniExceptionally"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 192770 // Function
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<T> ${p1}, ${t2}<? super Throwable, ? extends T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9002370 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9002498 "uniExceptionally"
	cpp_inline package explicit_return_type "boolean"
	nparams 3
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "f" type class_ref 192770 // Function
	  param inout name "c" type class_ref 1101954 // UniExceptionally
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<T> ${p0}, ${t1}<? super Throwable, ? extends T> ${p1}, ${t2}<T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9002626 "uniExceptionallyStage"
	cpp_inline private return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "f" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<Throwable, ? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1102082 "UniRelay"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3566338 // <realization>
	  relation 3566338 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3566338 // <realization>
	    b parent class_ref 1101186 // UniCompletion
	end

	operation 9002754 "UniRelay"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " for Compose"
	end

	operation 9002882 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9003010 "uniRelay"
	cpp_inline package explicit_return_type "boolean"
	nparams 1
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1102210 "UniCompose"
	visibility package 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3566466 // <realization>
	  relation 3566466 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3566466 // <realization>
	    b parent class_ref 1101186 // UniCompletion
	end

	classrelation 3566594 // fn (<unidirectional association>)
	  relation 3566594 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T, ? extends CompletionStage<V>> ${name}${value};
"
	      classrelation_ref 3566594 // fn (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	operation 9003138 "UniCompose"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 192770 // Function
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<V> ${p1}, ${t2}<T> ${p2}, ${t3}<? super T, ? extends CompletionStage<V>> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9003266 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9003394 "uniCompose"
	cpp_inline package explicit_return_type "boolean"
	nparams 3
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "f" type class_ref 192770 // Function
	  param inout name "c" type class_ref 1102210 // UniCompose
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S> ${type} ${name}${(}${t0}<S> ${p0}, ${t1}<? super S, ? extends CompletionStage<T>> ${p1}, ${t2}<S,T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9003522 "uniComposeStage"
	cpp_inline private return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "f" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0} ${p0}, ${t1}<? super T, ? extends CompletionStage<V>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1102338 "BiCompletion"
	abstract visibility package 
	nformals 3
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1101186 // UniCompletion
	  rank 1 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3566722 // <realization>
	  relation 3566722 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3566722 // <realization>
	    b parent class_ref 1101186 // UniCompletion
	end

	classrelation 3566850 // snd (<unidirectional association>)
	  relation 3566850 --->
	    a role_name "snd" package
	      comment " second source for action"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<U> ${name}${value};
"
	      classrelation_ref 3566850 // snd (<unidirectional association>)
	    b parent class_ref 1100418 // CompletableFuture
	end

	operation 9003650 "BiCompletion"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "snd" type class_ref 1100418 // CompletableFuture
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<V> ${p1}, ${t2}<T> ${p2}, ${t3}<U> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1102466 "CoCompletion"
	visibility package 
	nactuals 1
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3566978 // <generalisation>
	  relation 3566978 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3566978 // <generalisation>
	    b parent class_ref 1100674 // Completion
	end

	classrelation 3567106 // base (<unidirectional association>)
	  relation 3567106 --->
	    a role_name "base" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?,?,?> ${name}${value};
"
	      classrelation_ref 3567106 // base (<unidirectional association>)
	    b parent class_ref 1102338 // BiCompletion
	end

	operation 9003778 "CoCompletion"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "base" type class_ref 1102338 // BiCompletion
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?,?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9003906 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9004034 "isLive"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9004162 "bipush"
	cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "b" type class_ref 1100418 // CompletableFuture
	  param inout name "c" type class_ref 1102338 // BiCompletion
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?,?,?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Pushes completion to this and b unless both done. "
      end

      operation 9004290 "postFire"
	cpp_inline package return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "b" type class_ref 1100418 // CompletableFuture
	  param in name "mode" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Post-processing after successful BiCompletion tryFire. "
      end

      class 1102594 "BiApply"
	visibility package 
	nformals 3
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 1 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3567234 // <realization>
	  relation 3567234 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3567234 // <realization>
	    b parent class_ref 1102338 // BiCompletion
	end

	classrelation 3567362 // fn (<unidirectional association>)
	  relation 3567362 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T,? super U,? extends V> ${name}${value};
"
	      classrelation_ref 3567362 // fn (<unidirectional association>)
	    b parent class_ref 192642 // BiFunction
	end

	operation 9004418 "BiApply"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "snd" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 192642 // BiFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<V> ${p1}, ${t2}<T> ${p2}, ${t3}<U> ${p3}, ${t4}<? super T,? super U,? extends V> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9004546 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9004674 "biApply"
	cpp_inline package explicit_return_type "boolean"
	nparams 4
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "b" type class_ref 1100418 // CompletableFuture
	  param inout name "f" type class_ref 192642 // BiFunction
	  param inout name "c" type class_ref 1102594 // BiApply
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R,S> ${type} ${name}${(}${t0}<R> ${p0}, ${t1}<S> ${p1}, ${t2}<? super R,? super S,? extends T> ${p2}, ${t3}<R,S,T> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9004802 "biApplyStage"
	cpp_inline private return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "o" type class_ref 1100546 // CompletionStage
	  param inout name "f" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U,V> ${type}<V> ${name}${(}${t0} ${p0}, ${t1}<U> ${p1}, ${t2}<? super T,? super U,? extends V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1102722 "BiAccept"
	visibility package 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 1 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3567490 // <realization>
	  relation 3567490 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3567490 // <realization>
	    b parent class_ref 1102338 // BiCompletion
	end

	classrelation 3567618 // fn (<unidirectional association>)
	  relation 3567618 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T,? super U> ${name}${value};
"
	      classrelation_ref 3567618 // fn (<unidirectional association>)
	    b parent class_ref 192514 // BiConsumer
	end

	operation 9004930 "BiAccept"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "snd" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 192514 // BiConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Void> ${p1}, ${t2}<T> ${p2}, ${t3}<U> ${p3}, ${t4}<? super T,? super U> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9005058 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9005186 "biAccept"
	cpp_inline package explicit_return_type "boolean"
	nparams 4
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "b" type class_ref 1100418 // CompletableFuture
	  param inout name "f" type class_ref 192514 // BiConsumer
	  param inout name "c" type class_ref 1102722 // BiAccept
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R,S> ${type} ${name}${(}${t0}<R> ${p0}, ${t1}<S> ${p1}, ${t2}<? super R,? super S> ${p2}, ${t3}<R,S> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9005314 "biAcceptStage"
	cpp_inline private return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "o" type class_ref 1100546 // CompletionStage
	  param inout name "f" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<Void> ${name}${(}${t0} ${p0}, ${t1}<U> ${p1}, ${t2}<? super T,? super U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1102850 "BiRun"
	visibility package 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 1 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3567746 // <realization>
	  relation 3567746 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3567746 // <realization>
	    b parent class_ref 1102338 // BiCompletion
	end

	classrelation 3567874 // fn (<unidirectional association>)
	  relation 3567874 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3567874 // fn (<unidirectional association>)
	    b parent class_ref 128770 // Runnable
	end

	operation 9005442 "BiRun"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "snd" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Void> ${p1}, ${t2}<T> ${p2}, ${t3}<U> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9005570 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9005698 "biRun"
	cpp_inline package explicit_return_type "boolean"
	nparams 4
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "b" type class_ref 1100418 // CompletableFuture
	  param inout name "f" type class_ref 128770 // Runnable
	  param inout name "c" type class_ref 1102850 // BiRun
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9005826 "biRunStage"
	cpp_inline private return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "o" type class_ref 1100546 // CompletionStage
	  param inout name "f" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1102978 "BiRelay"
	visibility package 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 1 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3568002 // <realization>
	  relation 3568002 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3568002 // <realization>
	    b parent class_ref 1102338 // BiCompletion
	end

	operation 9005954 "BiRelay"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "snd" type class_ref 1100418 // CompletableFuture
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Void> ${p0}, ${t1}<T> ${p1}, ${t2}<U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " for And"
	end

	operation 9006082 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9006210 "biRelay"
	cpp_inline package explicit_return_type "boolean"
	nparams 2
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "b" type class_ref 1100418 // CompletableFuture
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9006338 "andTree"
	class_operation cpp_inline package return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "cfs" type class_ref 1100418 // CompletableFuture
	multiplicity "[]"
	  param in name "lo" explicit_type "int"
	  param in name "hi" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<?>[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Recursively constructs a tree of completions. "
      end

      operation 9006466 "orpush"
	cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "b" type class_ref 1100418 // CompletableFuture
	  param inout name "c" type class_ref 1102338 // BiCompletion
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?,?,?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------- Projected (Ored) BiCompletions -------------- 
 Pushes completion to this and b unless either done. "
      end

      class 1103106 "OrApply"
	visibility package 
	nformals 3
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends "T"
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 1 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3568130 // <realization>
	  relation 3568130 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3568130 // <realization>
	    b parent class_ref 1102338 // BiCompletion
	end

	classrelation 3568258 // fn (<unidirectional association>)
	  relation 3568258 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T,? extends V> ${name}${value};
"
	      classrelation_ref 3568258 // fn (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	operation 9006594 "OrApply"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "snd" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 192770 // Function
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<V> ${p1}, ${t2}<T> ${p2}, ${t3}<U> ${p3}, ${t4}<? super T,? extends V> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9006722 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9006850 "orApply"
	cpp_inline package explicit_return_type "boolean"
	nparams 4
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "b" type class_ref 1100418 // CompletableFuture
	  param inout name "f" type class_ref 192770 // Function
	  param inout name "c" type class_ref 1103106 // OrApply
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R,S extends R> ${type} ${name}${(}${t0}<R> ${p0}, ${t1}<S> ${p1}, ${t2}<? super R, ? extends T> ${p2}, ${t3}<R,S,T> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9006978 "orApplyStage"
	cpp_inline private return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "o" type class_ref 1100546 // CompletionStage
	  param inout name "f" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U extends T,V> ${type}<V> ${name}${(}${t0} ${p0}, ${t1}<U> ${p1}, ${t2}<? super T, ? extends V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1103234 "OrAccept"
	visibility package 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends "T"
	nactuals 4
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 1 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3568386 // <realization>
	  relation 3568386 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3568386 // <realization>
	    b parent class_ref 1102338 // BiCompletion
	end

	classrelation 3568514 // fn (<unidirectional association>)
	  relation 3568514 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T> ${name}${value};
"
	      classrelation_ref 3568514 // fn (<unidirectional association>)
	    b parent class_ref 163458 // Consumer
	end

	operation 9007106 "OrAccept"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "snd" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Void> ${p1}, ${t2}<T> ${p2}, ${t3}<U> ${p3}, ${t4}<? super T> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9007234 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9007362 "orAccept"
	cpp_inline package explicit_return_type "boolean"
	nparams 4
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "b" type class_ref 1100418 // CompletableFuture
	  param inout name "f" type class_ref 163458 // Consumer
	  param inout name "c" type class_ref 1103234 // OrAccept
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R,S extends R> ${type} ${name}${(}${t0}<R> ${p0}, ${t1}<S> ${p1}, ${t2}<? super R> ${p2}, ${t3}<R,S> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9007490 "orAcceptStage"
	cpp_inline private return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "o" type class_ref 1100546 // CompletionStage
	  param inout name "f" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U extends T> ${type}<Void> ${name}${(}${t0} ${p0}, ${t1}<U> ${p1}, ${t2}<? super T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1103362 "OrRun"
	visibility package 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 1 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3568642 // <realization>
	  relation 3568642 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3568642 // <realization>
	    b parent class_ref 1102338 // BiCompletion
	end

	classrelation 3568770 // fn (<unidirectional association>)
	  relation 3568770 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3568770 // fn (<unidirectional association>)
	    b parent class_ref 128770 // Runnable
	end

	operation 9007618 "OrRun"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "executor" type class_ref 503426 // Executor
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "snd" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Void> ${p1}, ${t2}<T> ${p2}, ${t3}<U> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9007746 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9007874 "orRun"
	cpp_inline package explicit_return_type "boolean"
	nparams 4
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "b" type class_ref 1100418 // CompletableFuture
	  param inout name "f" type class_ref 128770 // Runnable
	  param inout name "c" type class_ref 1103362 // OrRun
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9008002 "orRunStage"
	cpp_inline private return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "o" type class_ref 1100546 // CompletionStage
	  param inout name "f" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1103490 "OrRelay"
	visibility package 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 0 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 1 explicit_value ""
	actual class class_ref 1102338 // BiCompletion
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3568898 // <realization>
	  relation 3568898 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3568898 // <realization>
	    b parent class_ref 1102338 // BiCompletion
	end

	operation 9008130 "OrRelay"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "src" type class_ref 1100418 // CompletableFuture
	    param inout name "snd" type class_ref 1100418 // CompletableFuture
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Object> ${p0}, ${t1}<T> ${p1}, ${t2}<U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " for Or"
	end

	operation 9008258 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9008386 "orRelay"
	cpp_inline package explicit_return_type "boolean"
	nparams 2
	  param inout name "a" type class_ref 1100418 // CompletableFuture
	  param inout name "b" type class_ref 1100418 // CompletableFuture
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9008514 "orTree"
	class_operation cpp_inline package return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "cfs" type class_ref 1100418 // CompletableFuture
	multiplicity "[]"
	  param in name "lo" explicit_type "int"
	  param in name "hi" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0}<?>[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Recursively constructs a tree of completions. "
      end

      class 1103618 "AsyncSupply"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1065346 // ForkJoinTask
	  rank 0 explicit_value ""
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3569026 // <realization>
	  relation 3569026 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3569026 // <realization>
	    b parent class_ref 1065346 // ForkJoinTask
	end

	classrelation 3569154 // <realization>
	  relation 3569154 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3569154 // <realization>
	    b parent class_ref 128770 // Runnable
	end

	classrelation 3569282 // <realization>
	  relation 3569282 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3569282 // <realization>
	    b parent class_ref 1100930 // AsynchronousCompletionTask
	end

	classrelation 3569410 // dep (<unidirectional association>)
	  relation 3569410 --->
	    a role_name "dep" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3569410 // dep (<unidirectional association>)
	    b parent class_ref 1100418 // CompletableFuture
	end

	classrelation 3569538 // fn (<unidirectional association>)
	  relation 3569538 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3569538 // fn (<unidirectional association>)
	    b parent class_ref 933634 // Supplier
	end

	operation 9008642 "AsyncSupply"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 933634 // Supplier
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9008770 "getRawResult"
	  cpp_inline public return_type class_ref 146946 // Void
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9008898 "setRawResult"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "v" type class_ref 146946 // Void
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9009026 "exec"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9009154 "run"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9009282 "asyncSupplyStage"
	class_operation cpp_inline package return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "f" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0} ${p0}, ${t1}<U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1103746 "AsyncRun"
	visibility package 
	nactuals 2
	actual class class_ref 1065346 // ForkJoinTask
	  rank 0 explicit_value ""
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3569666 // <realization>
	  relation 3569666 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3569666 // <realization>
	    b parent class_ref 1065346 // ForkJoinTask
	end

	classrelation 3569794 // <realization>
	  relation 3569794 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3569794 // <realization>
	    b parent class_ref 128770 // Runnable
	end

	classrelation 3569922 // <realization>
	  relation 3569922 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3569922 // <realization>
	    b parent class_ref 1100930 // AsynchronousCompletionTask
	end

	classrelation 3570050 // dep (<unidirectional association>)
	  relation 3570050 --->
	    a role_name "dep" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Void> ${name}${value};
"
	      classrelation_ref 3570050 // dep (<unidirectional association>)
	    b parent class_ref 1100418 // CompletableFuture
	end

	classrelation 3570178 // fn (<unidirectional association>)
	  relation 3570178 --->
	    a role_name "fn" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3570178 // fn (<unidirectional association>)
	    b parent class_ref 128770 // Runnable
	end

	operation 9009410 "AsyncRun"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "dep" type class_ref 1100418 // CompletableFuture
	    param inout name "fn" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Void> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9009538 "getRawResult"
	  cpp_inline public return_type class_ref 146946 // Void
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9009666 "setRawResult"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "v" type class_ref 146946 // Void
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9009794 "exec"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9009922 "run"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9010050 "asyncRunStage"
	class_operation cpp_inline package return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "e" type class_ref 503426 // Executor
	  param inout name "f" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1103874 "Signaller"
	visibility package 
	nactuals 1
	actual class class_ref 1100418 // CompletableFuture
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3570306 // <generalisation>
	  relation 3570306 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3570306 // <generalisation>
	    b parent class_ref 1100674 // Completion
	end

	classrelation 3572866 // <realization>
	  relation 3572866 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3572866 // <realization>
	    b parent class_ref 1104002 // ManagedBlocker
	end

	attribute 2104066 "nanos"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " wait time if timed"
	end

	attribute 2104194 "deadline"
	  const_attribute package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " non-zero if timed"
	end

	attribute 2104322 "interruptControl"
	  volatile package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " > 0: interruptible, < 0: interrupted"
	end

	classrelation 3572994 // thread (<unidirectional association>)
	  relation 3572994 --->
	    a role_name "thread" volatile package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3572994 // thread (<unidirectional association>)
	    b parent class_ref 128642 // Thread
	end

	operation 9023106 "Signaller"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "interruptible" explicit_type "boolean"
	    param in name "nanos" explicit_type "long"
	    param in name "deadline" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9023234 "tryFire"
	  cpp_inline package return_type class_ref 1100418 // CompletableFuture
	  nparams 1
	    param in name "ignore" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9023362 "isReleasable"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9023490 "block"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9023618 "isLive"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9023746 "waitingGet"
	cpp_inline private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "interruptible" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns raw result after waiting, or null if interruptible and
interrupted.
"
      end

      operation 9023874 "timedGet"
	cpp_inline private return_type class_ref 129538 // Object
	nparams 1
	  param in name "nanos" explicit_type "long"
	nexceptions 1
	  exception class_ref 1065602 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns raw result after waiting, or null if interrupted, or
throws TimeoutException on timeout.
"
      end

      operation 9024002 "CompletableFuture"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------- public methods -------------- 

Creates a new incomplete CompletableFuture.
"
      end

      operation 9024130 "CompletableFuture"
	cpp_inline private explicit_return_type ""
	nparams 1
	  param inout name "r" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new complete CompletableFuture with given encoded result.
"
      end

      operation 9024258 "supplyAsync"
	class_operation cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "supplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletableFuture that is asynchronously completed
by a task running in the {@link ForkJoinPool#commonPool()} with
the value obtained by calling the given Supplier.

@param supplier a function returning the value to be used
to complete the returned CompletableFuture
@param <U> the function's return type
@return the new CompletableFuture
"
      end

      operation 9024386 "supplyAsync"
	class_operation cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<U> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletableFuture that is asynchronously completed
by a task running in the given executor with the value obtained
by calling the given Supplier.

@param supplier a function returning the value to be used
to complete the returned CompletableFuture
@param executor the executor to use for asynchronous execution
@param <U> the function's return type
@return the new CompletableFuture
"
      end

      operation 9024514 "runAsync"
	class_operation cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "runnable" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletableFuture that is asynchronously completed
by a task running in the {@link ForkJoinPool#commonPool()} after
it runs the given action.

@param runnable the action to run before completing the
returned CompletableFuture
@return the new CompletableFuture
"
      end

      operation 9024642 "runAsync"
	class_operation cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "runnable" type class_ref 128770 // Runnable
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletableFuture that is asynchronously completed
by a task running in the given executor after it runs the given
action.

@param runnable the action to run before completing the
returned CompletableFuture
@param executor the executor to use for asynchronous execution
@return the new CompletableFuture
"
      end

      operation 9024770 "completedFuture"
	class_operation cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "value" explicit_type "U"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletableFuture that is already completed with
the given value.

@param value the value
@param <U> the type of the value
@return the completed CompletableFuture
"
      end

      operation 9024898 "isDone"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if completed in any fashion: normally,
exceptionally, or via cancellation.

@return {@code true} if completed
"
      end

      operation 9025026 "get"
	cpp_inline public explicit_return_type "T"
	nparams 0
	nexceptions 2
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits if necessary for this future to complete, and then
returns its result.

@return the result value
@throws CancellationException if this future was cancelled
@throws ExecutionException if this future completed exceptionally
@throws InterruptedException if the current thread was interrupted
while waiting
"
      end

      operation 9025154 "get"
	cpp_inline public explicit_return_type "T"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 3
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	  exception class_ref 1065602 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits if necessary for at most the given time for this future
to complete, and then returns its result, if available.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return the result value
@throws CancellationException if this future was cancelled
@throws ExecutionException if this future completed exceptionally
@throws InterruptedException if the current thread was interrupted
while waiting
@throws TimeoutException if the wait timed out
"
      end

      operation 9025282 "join"
	cpp_inline public explicit_return_type "T"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result value when complete, or throws an
(unchecked) exception if completed exceptionally. To better
conform with the use of common functional forms, if a
computation involved in the completion of this
CompletableFuture threw an exception, this method throws an
(unchecked) {@link CompletionException} with the underlying
exception as its cause.

@return the result value
@throws CancellationException if the computation was cancelled
@throws CompletionException if this future completed
exceptionally or a completion computation threw an exception
"
      end

      operation 9025410 "getNow"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "valueIfAbsent" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result value (or throws any encountered exception)
if completed, else returns the given valueIfAbsent.

@param valueIfAbsent the value to return if not completed
@return the result value, if completed, else the given valueIfAbsent
@throws CancellationException if the computation was cancelled
@throws CompletionException if this future completed
exceptionally or a completion computation threw an exception
"
      end

      operation 9025538 "complete"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If not already completed, sets the value returned by {@link
#get()} and related methods to the given value.

@param value the result value
@return {@code true} if this invocation caused this CompletableFuture
to transition to a completed state, else {@code false}
"
      end

      operation 9025666 "completeExceptionally"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "ex" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If not already completed, causes invocations of {@link #get()}
and related methods to throw the given exception.

@param ex the exception
@return {@code true} if this invocation caused this CompletableFuture
to transition to a completed state, else {@code false}
"
      end

      operation 9025794 "thenApply"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "fn" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T,? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9025922 "thenApplyAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "fn" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T,? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9026050 "thenApplyAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "fn" type class_ref 192770 // Function
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T,? extends U> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9026178 "thenAccept"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9026306 "thenAcceptAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9026434 "thenAcceptAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "action" type class_ref 163458 // Consumer
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<? super T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9026562 "thenRun"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "action" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9026690 "thenRunAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "action" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9026818 "thenRunAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "action" type class_ref 128770 // Runnable
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9026946 "thenCombine"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "fn" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U,V> ${type}<V> ${name}${(}${t0}<? extends U> ${p0}, ${t1}<? super T,? super U,? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9027074 "thenCombineAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "fn" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U,V> ${type}<V> ${name}${(}${t0}<? extends U> ${p0}, ${t1}<? super T,? super U,? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9027202 "thenCombineAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "fn" type class_ref 192642 // BiFunction
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U,V> ${type}<V> ${name}${(}${t0}<? extends U> ${p0}, ${t1}<? super T,? super U,? extends V> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9027330 "thenAcceptBoth"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<Void> ${name}${(}${t0}<? extends U> ${p0}, ${t1}<? super T, ? super U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9027458 "thenAcceptBothAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<Void> ${name}${(}${t0}<? extends U> ${p0}, ${t1}<? super T, ? super U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9027586 "thenAcceptBothAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 192514 // BiConsumer
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<Void> ${name}${(}${t0}<? extends U> ${p0}, ${t1}<? super T, ? super U> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9027714 "runAfterBoth"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9027842 "runAfterBothAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9027970 "runAfterBothAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 128770 // Runnable
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9028098 "applyToEither"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "fn" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T, U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9028226 "applyToEitherAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "fn" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T, U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9028354 "applyToEitherAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "fn" type class_ref 192770 // Function
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T, U> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9028482 "acceptEither"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9028610 "acceptEitherAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9028738 "acceptEitherAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 163458 // Consumer
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9028866 "runAfterEither"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9028994 "runAfterEitherAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9029122 "runAfterEitherAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 3
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 128770 // Runnable
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9029250 "thenCompose"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "fn" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T, ? extends CompletionStage<U>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9029378 "thenComposeAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "fn" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T, ? extends CompletionStage<U>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9029506 "thenComposeAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "fn" type class_ref 192770 // Function
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T, ? extends CompletionStage<U>> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9029634 "whenComplete"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "action" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T, ? super Throwable> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9029762 "whenCompleteAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "action" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T, ? super Throwable> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9029890 "whenCompleteAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "action" type class_ref 192514 // BiConsumer
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T, ? super Throwable> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9030018 "handle"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "fn" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T, Throwable, ? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9030146 "handleAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "fn" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T, Throwable, ? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9030274 "handleAsync"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 2
	  param inout name "fn" type class_ref 192642 // BiFunction
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T, Throwable, ? extends U> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9030402 "toCompletableFuture"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this CompletableFuture.

@return this CompletableFuture
"
      end

      operation 9030530 "exceptionally"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "fn" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<Throwable, ? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " not in interface CompletionStage

Returns a new CompletableFuture that is completed when this
CompletableFuture completes, with the result of the given
function of the exception triggering this CompletableFuture's
completion when it completes exceptionally; otherwise, if this
CompletableFuture completes normally, then the returned
CompletableFuture also completes normally with the same value.
Note: More flexible versions of this functionality are
available using methods {@code whenComplete} and {@code handle}.

@param fn the function to use to compute the value of the
returned CompletableFuture if this CompletableFuture completed
exceptionally
@return the new CompletableFuture
"
      end

      operation 9030658 "allOf"
	class_operation cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "cfs" explicit_type "CompletableFuture<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------- Arbitrary-arity constructions -------------- 

Returns a new CompletableFuture that is completed when all of
the given CompletableFutures complete.  If any of the given
CompletableFutures complete exceptionally, then the returned
CompletableFuture also does so, with a CompletionException
holding this exception as its cause.  Otherwise, the results,
if any, of the given CompletableFutures are not reflected in
the returned CompletableFuture, but may be obtained by
inspecting them individually. If no CompletableFutures are
provided, returns a CompletableFuture completed with the value
{@code null}.

<p>Among the applications of this method is to await completion
of a set of independent CompletableFutures before continuing a
program, as in: {@code CompletableFuture.allOf(c1, c2,
c3).join();}.

@param cfs the CompletableFutures
@return a new CompletableFuture that is completed when all of the
given CompletableFutures complete
@throws NullPointerException if the array or any of its elements are
{@code null}
"
      end

      operation 9030786 "anyOf"
	class_operation cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 1
	  param inout name "cfs" explicit_type "CompletableFuture<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletableFuture that is completed when any of
the given CompletableFutures complete, with the same result.
Otherwise, if it completed exceptionally, the returned
CompletableFuture also does so, with a CompletionException
holding this exception as its cause.  If no CompletableFutures
are provided, returns an incomplete CompletableFuture.

@param cfs the CompletableFutures
@return a new CompletableFuture that is completed with the
result or exception of any of the given CompletableFutures when
one completes
@throws NullPointerException if the array or any of its elements are
{@code null}
"
      end

      operation 9030914 "cancel"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "mayInterruptIfRunning" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------- Control and status methods -------------- 

If not already completed, completes this CompletableFuture with
a {@link CancellationException}. Dependent CompletableFutures
that have not already completed will also complete
exceptionally, with a {@link CompletionException} caused by
this {@code CancellationException}.

@param mayInterruptIfRunning this value has no effect in this
implementation because interrupts are not used to control
processing.

@return {@code true} if this task is now cancelled
"
      end

      operation 9031042 "isCancelled"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this CompletableFuture was cancelled
before it completed normally.

@return {@code true} if this CompletableFuture was cancelled
before it completed normally
"
      end

      operation 9031170 "isCompletedExceptionally"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this CompletableFuture completed
exceptionally, in any way. Possible causes include
cancellation, explicit invocation of {@code
completeExceptionally}, and abrupt termination of a
CompletionStage action.

@return {@code true} if this CompletableFuture completed
exceptionally
"
      end

      operation 9031298 "obtrudeValue"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forcibly sets or resets the value subsequently returned by
method {@link #get()} and related methods, whether or not
already completed. This method is designed for use only in
error recovery actions, and even in such situations may result
in ongoing dependent completions using established versus
overwritten outcomes.

@param value the completion value
"
      end

      operation 9031426 "obtrudeException"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "ex" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forcibly causes subsequent invocations of method {@link #get()}
and related methods to throw the given exception, whether or
not already completed. This method is designed for use only in
error recovery actions, and even in such situations may result
in ongoing dependent completions using established versus
overwritten outcomes.

@param ex the exception
@throws NullPointerException if the exception is null
"
      end

      operation 9031554 "getNumberOfDependents"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the estimated number of CompletableFutures whose
completions are awaiting completion of this CompletableFuture.
This method is designed for use in monitoring system state, not
for synchronization control.

@return the number of dependent CompletableFutures
"
      end

      operation 9031682 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string identifying this CompletableFuture, as well as
its completion state.  The state, in brackets, contains the
String {@code \"Completed Normally\"} or the String {@code
\"Completed Exceptionally\"}, or the String {@code \"Not
completed\"} followed by the number of CompletableFutures
dependent upon its completion, if any.

@return a string identifying this CompletableFuture, as well as its state
"
      end

      attribute 2104450 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2104578 "RESULT"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2104706 "STACK"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2104834 "NEXT"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 172930 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            final sun.misc.Unsafe u;
            UNSAFE = u = sun.misc.Unsafe.getUnsafe();
            Class<?> k = CompletableFuture.class;
            RESULT = u.objectFieldOffset(k.getDeclaredField(\"result\"));
            STACK = u.objectFieldOffset(k.getDeclaredField(\"stack\"));
            NEXT = u.objectFieldOffset
                (Completion.class.getDeclaredField(\"next\"));
        } catch (Exception x) {
            throw new Error(x);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 1100546 "CompletionStage"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A stage of a possibly asynchronous computation, that performs an
action or computes a value when another CompletionStage completes.
A stage completes upon termination of its computation, but this may
in turn trigger other dependent stages.  The functionality defined
in this interface takes only a few basic forms, which expand out to
a larger set of methods to capture a range of usage styles: <ul>

<li>The computation performed by a stage may be expressed as a
Function, Consumer, or Runnable (using methods with names including
<em>apply</em>, <em>accept</em>, or <em>run</em>, respectively)
depending on whether it requires arguments and/or produces results.
For example, {@code stage.thenApply(x -> square(x)).thenAccept(x ->
System.out.print(x)).thenRun(() -> System.out.println())}. An
additional form (<em>compose</em>) applies functions of stages
themselves, rather than their results. </li>

<li> One stage's execution may be triggered by completion of a
single stage, or both of two stages, or either of two stages.
Dependencies on a single stage are arranged using methods with
prefix <em>then</em>. Those triggered by completion of
<em>both</em> of two stages may <em>combine</em> their results or
effects, using correspondingly named methods. Those triggered by
<em>either</em> of two stages make no guarantees about which of the
results or effects are used for the dependent stage's
computation.</li>

<li> Dependencies among stages control the triggering of
computations, but do not otherwise guarantee any particular
ordering. Additionally, execution of a new stage's computations may
be arranged in any of three ways: default execution, default
asynchronous execution (using methods with suffix <em>async</em>
that employ the stage's default asynchronous execution facility),
or custom (via a supplied {@link Executor}).  The execution
properties of default and async modes are specified by
CompletionStage implementations, not this interface. Methods with
explicit Executor arguments may have arbitrary execution
properties, and might not even support concurrent execution, but
are arranged for processing in a way that accommodates asynchrony.

<li> Two method forms support processing whether the triggering
stage completed normally or exceptionally: Method {@link
#whenComplete whenComplete} allows injection of an action
regardless of outcome, otherwise preserving the outcome in its
completion. Method {@link #handle handle} additionally allows the
stage to compute a replacement result that may enable further
processing by other dependent stages.  In all other cases, if a
stage's computation terminates abruptly with an (unchecked)
exception or error, then all dependent stages requiring its
completion complete exceptionally as well, with a {@link
CompletionException} holding the exception as its cause.  If a
stage is dependent on <em>both</em> of two stages, and both
complete exceptionally, then the CompletionException may correspond
to either one of these exceptions.  If a stage is dependent on
<em>either</em> of two others, and only one of them completes
exceptionally, no guarantees are made about whether the dependent
stage completes normally or exceptionally. In the case of method
{@code whenComplete}, when the supplied action itself encounters an
exception, then the stage exceptionally completes with this
exception if not already completed exceptionally.</li>

</ul>

<p>All methods adhere to the above triggering, execution, and
exceptional completion specifications (which are not repeated in
individual method specifications). Additionally, while arguments
used to pass a completion result (that is, for parameters of type
{@code T}) for methods accepting them may be null, passing a null
value for any other parameter will result in a {@link
NullPointerException} being thrown.

<p>This interface does not define methods for initially creating,
forcibly completing normally or exceptionally, probing completion
status or results, or awaiting completion of a stage.
Implementations of CompletionStage may provide means of achieving
such effects, as appropriate.  Method {@link #toCompletableFuture}
enables interoperability among different implementations of this
interface by providing a common conversion type.

@author Doug Lea
@since 1.8
"
      operation 8990594 "thenApply"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 1
	  param inout name "fn" type class_ref 192770 // Function
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T,? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
normally, is executed with this stage's result as the argument
to the supplied function.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param fn the function to use to compute the value of
the returned CompletionStage
@param <U> the function's return type
@return the new CompletionStage
"
      end

      operation 8990722 "thenApplyAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 1
	  param inout name "fn" type class_ref 192770 // Function
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T,? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
normally, is executed using this stage's default asynchronous
execution facility, with this stage's result as the argument to
the supplied function.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param fn the function to use to compute the value of
the returned CompletionStage
@param <U> the function's return type
@return the new CompletionStage
"
      end

      operation 8990850 "thenApplyAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "fn" type class_ref 192770 // Function
	  param inout name "executor" type class_ref 503426 // Executor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T,? extends U> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
normally, is executed using the supplied Executor, with this
stage's result as the argument to the supplied function.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param fn the function to use to compute the value of
the returned CompletionStage
@param executor the executor to use for asynchronous execution
@param <U> the function's return type
@return the new CompletionStage
"
      end

      operation 8990978 "thenAccept"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 1
	  param inout name "action" type class_ref 163458 // Consumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
normally, is executed with this stage's result as the argument
to the supplied action.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param action the action to perform before completing the
returned CompletionStage
@return the new CompletionStage
"
      end

      operation 8991106 "thenAcceptAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 1
	  param inout name "action" type class_ref 163458 // Consumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
normally, is executed using this stage's default asynchronous
execution facility, with this stage's result as the argument to
the supplied action.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param action the action to perform before completing the
returned CompletionStage
@return the new CompletionStage
"
      end

      operation 8991234 "thenAcceptAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "action" type class_ref 163458 // Consumer
	  param inout name "executor" type class_ref 503426 // Executor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<? super T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
normally, is executed using the supplied Executor, with this
stage's result as the argument to the supplied action.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param action the action to perform before completing the
returned CompletionStage
@param executor the executor to use for asynchronous execution
@return the new CompletionStage
"
      end

      operation 8991362 "thenRun"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 1
	  param inout name "action" type class_ref 128770 // Runnable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
normally, executes the given action.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param action the action to perform before completing the
returned CompletionStage
@return the new CompletionStage
"
      end

      operation 8991490 "thenRunAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 1
	  param inout name "action" type class_ref 128770 // Runnable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
normally, executes the given action using this stage's default
asynchronous execution facility.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param action the action to perform before completing the
returned CompletionStage
@return the new CompletionStage
"
      end

      operation 8991618 "thenRunAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "action" type class_ref 128770 // Runnable
	  param inout name "executor" type class_ref 503426 // Executor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
normally, executes the given action using the supplied Executor.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param action the action to perform before completing the
returned CompletionStage
@param executor the executor to use for asynchronous execution
@return the new CompletionStage
"
      end

      operation 8991746 "thenCombine"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "fn" type class_ref 192642 // BiFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U,V> ${type}<V> ${name}${(}${t0}<? extends U> ${p0}, ${t1}<? super T,? super U,? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this and the other
given stage both complete normally, is executed with the two
results as arguments to the supplied function.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param fn the function to use to compute the value of
the returned CompletionStage
@param <U> the type of the other CompletionStage's result
@param <V> the function's return type
@return the new CompletionStage
"
      end

      operation 8991874 "thenCombineAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "fn" type class_ref 192642 // BiFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U,V> ${type}<V> ${name}${(}${t0}<? extends U> ${p0}, ${t1}<? super T,? super U,? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this and the other
given stage complete normally, is executed using this stage's
default asynchronous execution facility, with the two results
as arguments to the supplied function.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param fn the function to use to compute the value of
the returned CompletionStage
@param <U> the type of the other CompletionStage's result
@param <V> the function's return type
@return the new CompletionStage
"
      end

      operation 8992002 "thenCombineAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 3
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "fn" type class_ref 192642 // BiFunction
	  param inout name "executor" type class_ref 503426 // Executor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U,V> ${type}<V> ${name}${(}${t0}<? extends U> ${p0}, ${t1}<? super T,? super U,? extends V> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this and the other
given stage complete normally, is executed using the supplied
executor, with the two results as arguments to the supplied
function.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param fn the function to use to compute the value of
the returned CompletionStage
@param executor the executor to use for asynchronous execution
@param <U> the type of the other CompletionStage's result
@param <V> the function's return type
@return the new CompletionStage
"
      end

      operation 8992130 "thenAcceptBoth"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 192514 // BiConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<Void> ${name}${(}${t0}<? extends U> ${p0}, ${t1}<? super T, ? super U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this and the other
given stage both complete normally, is executed with the two
results as arguments to the supplied action.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param action the action to perform before completing the
returned CompletionStage
@param <U> the type of the other CompletionStage's result
@return the new CompletionStage
"
      end

      operation 8992258 "thenAcceptBothAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 192514 // BiConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<Void> ${name}${(}${t0}<? extends U> ${p0}, ${t1}<? super T, ? super U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this and the other
given stage complete normally, is executed using this stage's
default asynchronous execution facility, with the two results
as arguments to the supplied action.

@param other the other CompletionStage
@param action the action to perform before completing the
returned CompletionStage
@param <U> the type of the other CompletionStage's result
@return the new CompletionStage
"
      end

      operation 8992386 "thenAcceptBothAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 3
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 192514 // BiConsumer
	  param inout name "executor" type class_ref 503426 // Executor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<Void> ${name}${(}${t0}<? extends U> ${p0}, ${t1}<? super T, ? super U> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this and the other
given stage complete normally, is executed using the supplied
executor, with the two results as arguments to the supplied
function.

@param other the other CompletionStage
@param action the action to perform before completing the
returned CompletionStage
@param executor the executor to use for asynchronous execution
@param <U> the type of the other CompletionStage's result
@return the new CompletionStage
"
      end

      operation 8992514 "runAfterBoth"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 128770 // Runnable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this and the other
given stage both complete normally, executes the given action.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param action the action to perform before completing the
returned CompletionStage
@return the new CompletionStage
"
      end

      operation 8992642 "runAfterBothAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 128770 // Runnable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this and the other
given stage complete normally, executes the given action using
this stage's default asynchronous execution facility.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param action the action to perform before completing the
returned CompletionStage
@return the new CompletionStage
"
      end

      operation 8992770 "runAfterBothAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 3
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 128770 // Runnable
	  param inout name "executor" type class_ref 503426 // Executor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this and the other
given stage complete normally, executes the given action using
the supplied executor.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param action the action to perform before completing the
returned CompletionStage
@param executor the executor to use for asynchronous execution
@return the new CompletionStage
"
      end

      operation 8992898 "applyToEither"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "fn" type class_ref 192770 // Function
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T, U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when either this or the
other given stage complete normally, is executed with the
corresponding result as argument to the supplied function.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param fn the function to use to compute the value of
the returned CompletionStage
@param <U> the function's return type
@return the new CompletionStage
"
      end

      operation 8993026 "applyToEitherAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "fn" type class_ref 192770 // Function
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T, U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when either this or the
other given stage complete normally, is executed using this
stage's default asynchronous execution facility, with the
corresponding result as argument to the supplied function.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param fn the function to use to compute the value of
the returned CompletionStage
@param <U> the function's return type
@return the new CompletionStage
"
      end

      operation 8993154 "applyToEitherAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 3
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "fn" type class_ref 192770 // Function
	  param inout name "executor" type class_ref 503426 // Executor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T, U> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when either this or the
other given stage complete normally, is executed using the
supplied executor, with the corresponding result as argument to
the supplied function.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param fn the function to use to compute the value of
the returned CompletionStage
@param executor the executor to use for asynchronous execution
@param <U> the function's return type
@return the new CompletionStage
"
      end

      operation 8993282 "acceptEither"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 163458 // Consumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when either this or the
other given stage complete normally, is executed with the
corresponding result as argument to the supplied action.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param action the action to perform before completing the
returned CompletionStage
@return the new CompletionStage
"
      end

      operation 8993410 "acceptEitherAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 163458 // Consumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when either this or the
other given stage complete normally, is executed using this
stage's default asynchronous execution facility, with the
corresponding result as argument to the supplied action.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param action the action to perform before completing the
returned CompletionStage
@return the new CompletionStage
"
      end

      operation 8993538 "acceptEitherAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 3
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 163458 // Consumer
	  param inout name "executor" type class_ref 503426 // Executor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when either this or the
other given stage complete normally, is executed using the
supplied executor, with the corresponding result as argument to
the supplied function.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param action the action to perform before completing the
returned CompletionStage
@param executor the executor to use for asynchronous execution
@return the new CompletionStage
"
      end

      operation 8993666 "runAfterEither"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 128770 // Runnable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when either this or the
other given stage complete normally, executes the given action.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param action the action to perform before completing the
returned CompletionStage
@return the new CompletionStage
"
      end

      operation 8993794 "runAfterEitherAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 128770 // Runnable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when either this or the
other given stage complete normally, executes the given action
using this stage's default asynchronous execution facility.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param action the action to perform before completing the
returned CompletionStage
@return the new CompletionStage
"
      end

      operation 8993922 "runAfterEitherAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 3
	  param inout name "other" type class_ref 1100546 // CompletionStage
	  param inout name "action" type class_ref 128770 // Runnable
	  param inout name "executor" type class_ref 503426 // Executor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Void> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when either this or the
other given stage complete normally, executes the given action
using the supplied executor.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param other the other CompletionStage
@param action the action to perform before completing the
returned CompletionStage
@param executor the executor to use for asynchronous execution
@return the new CompletionStage
"
      end

      operation 8994050 "thenCompose"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 1
	  param inout name "fn" type class_ref 192770 // Function
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T, ? extends CompletionStage<U>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
normally, is executed with this stage as the argument
to the supplied function.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param fn the function returning a new CompletionStage
@param <U> the type of the returned CompletionStage's result
@return the CompletionStage
"
      end

      operation 8994178 "thenComposeAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 1
	  param inout name "fn" type class_ref 192770 // Function
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T, ? extends CompletionStage<U>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
normally, is executed using this stage's default asynchronous
execution facility, with this stage as the argument to the
supplied function.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param fn the function returning a new CompletionStage
@param <U> the type of the returned CompletionStage's result
@return the CompletionStage
"
      end

      operation 8994306 "thenComposeAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "fn" type class_ref 192770 // Function
	  param inout name "executor" type class_ref 503426 // Executor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T, ? extends CompletionStage<U>> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
normally, is executed using the supplied Executor, with this
stage's result as the argument to the supplied function.

See the {@link CompletionStage} documentation for rules
covering exceptional completion.

@param fn the function returning a new CompletionStage
@param executor the executor to use for asynchronous execution
@param <U> the type of the returned CompletionStage's result
@return the CompletionStage
"
      end

      operation 8994434 "exceptionally"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 1
	  param inout name "fn" type class_ref 192770 // Function
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<Throwable, ? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
exceptionally, is executed with this stage's exception as the
argument to the supplied function.  Otherwise, if this stage
completes normally, then the returned stage also completes
normally with the same value.

@param fn the function to use to compute the value of the
returned CompletionStage if this CompletionStage completed
exceptionally
@return the new CompletionStage
"
      end

      operation 8994562 "whenComplete"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 1
	  param inout name "action" type class_ref 192514 // BiConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T, ? super Throwable> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage with the same result or exception as
this stage, that executes the given action when this stage completes.

<p>When this stage is complete, the given action is invoked with the
result (or {@code null} if none) and the exception (or {@code null}
if none) of this stage as arguments.  The returned stage is completed
when the action returns.  If the supplied action itself encounters an
exception, then the returned stage exceptionally completes with this
exception unless this stage also completed exceptionally.

@param action the action to perform
@return the new CompletionStage
"
      end

      operation 8994690 "whenCompleteAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 1
	  param inout name "action" type class_ref 192514 // BiConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T, ? super Throwable> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage with the same result or exception as
this stage, that executes the given action using this stage's
default asynchronous execution facility when this stage completes.

<p>When this stage is complete, the given action is invoked with the
result (or {@code null} if none) and the exception (or {@code null}
if none) of this stage as arguments.  The returned stage is completed
when the action returns.  If the supplied action itself encounters an
exception, then the returned stage exceptionally completes with this
exception unless this stage also completed exceptionally.

@param action the action to perform
@return the new CompletionStage
"
      end

      operation 8994818 "whenCompleteAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "action" type class_ref 192514 // BiConsumer
	  param inout name "executor" type class_ref 503426 // Executor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T, ? super Throwable> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage with the same result or exception as
this stage, that executes the given action using the supplied
Executor when this stage completes.

<p>When this stage is complete, the given action is invoked with the
result (or {@code null} if none) and the exception (or {@code null}
if none) of this stage as arguments.  The returned stage is completed
when the action returns.  If the supplied action itself encounters an
exception, then the returned stage exceptionally completes with this
exception unless this stage also completed exceptionally.

@param action the action to perform
@param executor the executor to use for asynchronous execution
@return the new CompletionStage
"
      end

      operation 8994946 "handle"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 1
	  param inout name "fn" type class_ref 192642 // BiFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T, Throwable, ? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
either normally or exceptionally, is executed with this stage's
result and exception as arguments to the supplied function.

<p>When this stage is complete, the given function is invoked
with the result (or {@code null} if none) and the exception (or
{@code null} if none) of this stage as arguments, and the
function's result is used to complete the returned stage.

@param fn the function to use to compute the value of the
returned CompletionStage
@param <U> the function's return type
@return the new CompletionStage
"
      end

      operation 8995074 "handleAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 1
	  param inout name "fn" type class_ref 192642 // BiFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T, Throwable, ? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
either normally or exceptionally, is executed using this stage's
default asynchronous execution facility, with this stage's
result and exception as arguments to the supplied function.

<p>When this stage is complete, the given function is invoked
with the result (or {@code null} if none) and the exception (or
{@code null} if none) of this stage as arguments, and the
function's result is used to complete the returned stage.

@param fn the function to use to compute the value of the
returned CompletionStage
@param <U> the function's return type
@return the new CompletionStage
"
      end

      operation 8995202 "handleAsync"
	cpp_inline public return_type class_ref 1100546 // CompletionStage
	nparams 2
	  param inout name "fn" type class_ref 192642 // BiFunction
	  param inout name "executor" type class_ref 503426 // Executor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? super T, Throwable, ? extends U> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new CompletionStage that, when this stage completes
either normally or exceptionally, is executed using the
supplied executor, with this stage's result and exception as
arguments to the supplied function.

<p>When this stage is complete, the given function is invoked
with the result (or {@code null} if none) and the exception (or
{@code null} if none) of this stage as arguments, and the
function's result is used to complete the returned stage.

@param fn the function to use to compute the value of the
returned CompletionStage
@param executor the executor to use for asynchronous execution
@param <U> the function's return type
@return the new CompletionStage
"
      end

      operation 8995330 "toCompletableFuture"
	cpp_inline public return_type class_ref 1100418 // CompletableFuture
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link CompletableFuture} maintaining the same
completion properties as this stage. If this stage is already a
CompletableFuture, this method may return this stage itself.
Otherwise, invocation of this method may be equivalent in
effect to {@code thenApply(x -> x)}, but returning an instance
of type {@code CompletableFuture}. A CompletionStage
implementation that does not choose to interoperate with others
may throw {@code UnsupportedOperationException}.

@return the CompletableFuture
@throws UnsupportedOperationException if this implementation
does not interoperate with CompletableFuture
"
      end
    end

    class 1104258 "ForkJoinWorkerThread"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A thread managed by a {@link ForkJoinPool}, which executes
{@link ForkJoinTask}s.
This class is subclassable solely for the sake of adding
functionality -- there are no overridable methods dealing with
scheduling or execution.  However, you can override initialization
and termination methods surrounding the main task processing loop.
If you do create such a subclass, you will also need to supply a
custom {@link ForkJoinPool.ForkJoinWorkerThreadFactory} to
{@linkplain ForkJoinPool#ForkJoinPool use it} in a {@code ForkJoinPool}.

@since 1.7
@author Doug Lea
"
      classrelation 3622786 // <generalisation>
	relation 3622786 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3622786 // <generalisation>
	  b parent class_ref 128642 // Thread
      end

      classrelation 3622914 // pool (<unidirectional association>)
	relation 3622914 --->
	  a role_name "pool" const_relation package
	    comment "
ForkJoinWorkerThreads are managed by ForkJoinPools and perform
ForkJoinTasks. For explanation, see the internal documentation
of class ForkJoinPool.

This class just maintains links to its pool and WorkQueue.  The
pool field is set immediately upon construction, but the
workQueue field is not set until a call to registerWorker
completes. This leads to a visibility race, that is tolerated
by requiring that the workQueue field is only accessed by the
owning thread.

Support for (non-public) subclass InnocuousForkJoinWorkerThread
requires that we break quite a lot of encapsulation (via Unsafe)
both here and in the subclass to access and set Thread fields.

 the pool this thread works in"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3622914 // pool (<unidirectional association>)
	  b parent class_ref 1065858 // ForkJoinPool
      end

      classrelation 3623042 // workQueue (<unidirectional association>)
	relation 3623042 --->
	  a role_name "workQueue" const_relation package
	    comment " work-stealing mechanics"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3623042 // workQueue (<unidirectional association>)
	  b parent class_ref 1104642 // WorkQueue
      end

      operation 9174146 "ForkJoinWorkerThread"
	protected explicit_return_type ""
	nparams 1
	  param inout name "pool" type class_ref 1065858 // ForkJoinPool
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a ForkJoinWorkerThread operating in the given pool.

@param pool the pool this thread works in
@throws NullPointerException if pool is null
"
      end

      operation 9174274 "ForkJoinWorkerThread"
	package explicit_return_type ""
	nparams 3
	  param inout name "pool" type class_ref 1065858 // ForkJoinPool
	  param inout name "threadGroup" type class_ref 128898 // ThreadGroup
	  param inout name "acc" type class_ref 129154 // AccessControlContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Version for InnocuousForkJoinWorkerThread
"
      end

      operation 9174402 "getPool"
	public return_type class_ref 1065858 // ForkJoinPool
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pool hosting this thread.

@return the pool
"
      end

      operation 9174530 "getPoolIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unique index number of this thread in its pool.
The returned value ranges from zero to the maximum number of
threads (minus one) that may exist in the pool, and does not
change during the lifetime of the thread.  This method may be
useful for applications that track status or collect results
per-worker-thread rather than per-task.

@return the index number
"
      end

      operation 9174658 "onStart"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes internal state after construction but before
processing any tasks. If you override this method, you must
invoke {@code super.onStart()} at the beginning of the method.
Initialization requires care: Most fields must have legal
default values, to ensure that attempted accesses from other
threads work correctly even before this thread starts
processing tasks.
"
      end

      operation 9174786 "onTermination"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs cleanup associated with termination of this worker
thread.  If you override this method, you must invoke
{@code super.onTermination} at the end of the overridden method.

@param exception the exception causing this thread to abort due
to an unrecoverable error, or {@code null} if completed normally
"
      end

      operation 9174914 "run"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is required to be public, but should never be
called explicitly. It performs the main run loop to execute
{@link ForkJoinTask}s.
"
      end

      operation 9175042 "eraseThreadLocals"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Erases ThreadLocals by nulling out Thread maps.
"
      end

      operation 9175170 "afterTopLevelExec"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Non-public hook method for InnocuousForkJoinWorkerThread
"
      end

      attribute 2132610 "U"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set up to allow setting thread fields in constructor
"
      end

      attribute 2132738 "THREADLOCALS"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2132866 "INHERITABLETHREADLOCALS"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2132994 "INHERITEDACCESSCONTROLCONTEXT"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 174850 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            U = sun.misc.Unsafe.getUnsafe();
            Class<?> tk = Thread.class;
            THREADLOCALS = U.objectFieldOffset
                (tk.getDeclaredField(\"threadLocals\"));
            INHERITABLETHREADLOCALS = U.objectFieldOffset
                (tk.getDeclaredField(\"inheritableThreadLocals\"));
            INHERITEDACCESSCONTROLCONTEXT = U.objectFieldOffset
                (tk.getDeclaredField(\"inheritedAccessControlContext\"));

        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      class 1121026 "InnocuousForkJoinWorkerThread"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3623170 // <generalisation>
	  relation 3623170 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3623170 // <generalisation>
	    b parent class_ref 1104258 // ForkJoinWorkerThread
	end

	classrelation 3623298 // innocuousThreadGroup (<unidirectional association>)
	  relation 3623298 --->
	    a role_name "innocuousThreadGroup" init_value "
            createThreadGroup()" class_relation const_relation private
	      comment " The ThreadGroup for all InnocuousForkJoinWorkerThreads 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3623298 // innocuousThreadGroup (<unidirectional association>)
	    b parent class_ref 128898 // ThreadGroup
	end

	classrelation 3623426 // INNOCUOUS_ACC (<unidirectional association>)
	  relation 3623426 --->
	    a role_name "INNOCUOUS_ACC" init_value "
            new AccessControlContext(
                new ProtectionDomain[] {
                    new ProtectionDomain(null, null)
                })" class_relation const_relation private
	      comment " An AccessControlContext supporting no privileges 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3623426 // INNOCUOUS_ACC (<unidirectional association>)
	    b parent class_ref 129154 // AccessControlContext
	end

	operation 9175298 "InnocuousForkJoinWorkerThread"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "pool" type class_ref 1065858 // ForkJoinPool
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9175426 "afterTopLevelExec"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " to erase ThreadLocals"
	end

	operation 9175554 "getContextClassLoader"
	  public return_type class_ref 129026 // ClassLoader
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " to always report system loader"
	end

	operation 9175682 "setUncaughtExceptionHandler"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "x" type class_ref 131202 // UncaughtExceptionHandler
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " to silently fail"
	end

	operation 9175810 "setContextClassLoader"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "cl" type class_ref 129026 // ClassLoader
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " paranoically"
	end

	operation 9175938 "createThreadGroup"
	  class_operation private return_type class_ref 128898 // ThreadGroup
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a new group with the system ThreadGroup (the
topmost, parent-less group) as parent.  Uses Unsafe to
traverse Thread.group and ThreadGroup.parent fields.
"
	end
      end
    end

    class 1104898 "CompletionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception thrown when an error or other exception is encountered
in the course of completing a result or task.

@since 1.8
@author Doug Lea
"
      classrelation 3573122 // <generalisation>
	relation 3573122 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3573122 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 2104962 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7830266012832686185L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9031810 "CompletionException"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code CompletionException} with no detail message.
The cause is not initialized, and may subsequently be
initialized by a call to {@link #initCause(Throwable) initCause}.
"
      end

      operation 9031938 "CompletionException"
	protected explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code CompletionException} with the specified detail
message. The cause is not initialized, and may subsequently be
initialized by a call to {@link #initCause(Throwable) initCause}.

@param message the detail message
"
      end

      operation 9032066 "CompletionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code CompletionException} with the specified detail
message and cause.

@param  message the detail message
@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)
"
      end

      operation 9032194 "CompletionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code CompletionException} with the specified cause.
The detail message is set to {@code (cause == null ? null :
cause.toString())} (which typically contains the class and
detail message of {@code cause}).

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)
"
      end
    end

    class 1105026 "CompletionService"
      visibility public stereotype "interface"
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A service that decouples the production of new asynchronous tasks
from the consumption of the results of completed tasks.  Producers
{@code submit} tasks for execution. Consumers {@code take}
completed tasks and process their results in the order they
complete.  A {@code CompletionService} can for example be used to
manage asynchronous I/O, in which tasks that perform reads are
submitted in one part of a program or system, and then acted upon
in a different part of the program when the reads complete,
possibly in a different order than they were requested.

<p>Typically, a {@code CompletionService} relies on a separate
{@link Executor} to actually execute the tasks, in which case the
{@code CompletionService} only manages an internal completion
queue. The {@link ExecutorCompletionService} class provides an
implementation of this approach.

<p>Memory consistency effects: Actions in a thread prior to
submitting a task to a {@code CompletionService}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions taken by that task, which in turn <i>happen-before</i>
actions following a successful return from the corresponding {@code take()}.
"
      operation 9032322 "submit"
	cpp_inline public return_type class_ref 984706 // Future
	nparams 1
	  param inout name "task" type class_ref 339330 // Callable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a value-returning task for execution and returns a Future
representing the pending results of the task.  Upon completion,
this task may be taken or polled.

@param task the task to submit
@return a Future representing pending completion of the task
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if the task is null
"
      end

      operation 9032450 "submit"
	cpp_inline public return_type class_ref 984706 // Future
	nparams 2
	  param inout name "task" type class_ref 128770 // Runnable
	  param inout name "result" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a Runnable task for execution and returns a Future
representing that task.  Upon completion, this task may be
taken or polled.

@param task the task to submit
@param result the result to return upon successful completion
@return a Future representing pending completion of the task,
        and whose {@code get()} method will return the given
        result value upon completion
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if the task is null
"
      end

      operation 9032578 "take"
	cpp_inline public return_type class_ref 984706 // Future
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the Future representing the next
completed task, waiting if none are yet present.

@return the Future representing the next completed task
@throws InterruptedException if interrupted while waiting
"
      end

      operation 9032706 "poll"
	cpp_inline public return_type class_ref 984706 // Future
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the Future representing the next
completed task, or {@code null} if none are present.

@return the Future representing the next completed task, or
        {@code null} if none are present
"
      end

      operation 9032834 "poll"
	cpp_inline public return_type class_ref 984706 // Future
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the Future representing the next
completed task, waiting if necessary up to the specified wait
time if none are yet present.

@param timeout how long to wait before giving up, in units of
       {@code unit}
@param unit a {@code TimeUnit} determining how to interpret the
       {@code timeout} parameter
@return the Future representing the next completed task or
        {@code null} if the specified waiting time elapses
        before one is present
@throws InterruptedException if interrupted while waiting
"
      end
    end

    class 1113218 "ConcurrentLinkedDeque"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 184066 // AbstractCollection
        rank 0 explicit_value ""
      actual class class_ref 1064450 // Deque
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An unbounded concurrent {@linkplain Deque deque} based on linked nodes.
Concurrent insertion, removal, and access operations execute safely
across multiple threads.
A {@code ConcurrentLinkedDeque} is an appropriate choice when
many threads will share access to a common collection.
Like most other concurrent collection implementations, this class
does not permit the use of {@code null} elements.

<p>Iterators and spliterators are
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>Beware that, unlike in most collections, the {@code size} method
is <em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these deques, determining the current number
of elements requires a traversal of the elements, and so may report
inaccurate results if this collection is modified during traversal.
Additionally, the bulk operations {@code addAll},
{@code removeAll}, {@code retainAll}, {@code containsAll},
{@code equals}, and {@code toArray} are <em>not</em> guaranteed
to be performed atomically. For example, an iterator operating
concurrently with an {@code addAll} operation might view only some
of the added elements.

<p>This class and its iterator implement all of the <em>optional</em>
methods of the {@link Deque} and {@link Iterator} interfaces.

<p>Memory consistency effects: As with other concurrent collections,
actions in a thread prior to placing an object into a
{@code ConcurrentLinkedDeque}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions subsequent to the access or removal of that element from
the {@code ConcurrentLinkedDeque} in another thread.

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.7
@author Doug Lea
@author Martin Buchholz
@param <E> the type of elements held in this collection
"
      classrelation 3601154 // <realization>
	relation 3601154 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3601154 // <realization>
	  b parent class_ref 184066 // AbstractCollection
      end

      classrelation 3601282 // <realization>
	relation 3601282 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3601282 // <realization>
	  b parent class_ref 1064450 // Deque
      end

      classrelation 3601410 // <realization>
	relation 3601410 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3601410 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2119938 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 876323262645176354L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This is an implementation of a concurrent lock-free deque
supporting interior removes but not interior insertions, as
required to support the entire Deque interface.

We extend the techniques developed for ConcurrentLinkedQueue and
LinkedTransferQueue (see the internal docs for those classes).
Understanding the ConcurrentLinkedQueue implementation is a
prerequisite for understanding the implementation of this class.

The data structure is a symmetrical doubly-linked \"GC-robust\"
linked list of nodes.  We minimize the number of volatile writes
using two techniques: advancing multiple hops with a single CAS
and mixing volatile and non-volatile writes of the same memory
locations.

A node contains the expected E (\"item\") and links to predecessor
(\"prev\") and successor (\"next\") nodes:

class Node<E> { volatile Node<E> prev, next; volatile E item; }

A node p is considered \"live\" if it contains a non-null item
(p.item != null).  When an item is CASed to null, the item is
atomically logically deleted from the collection.

At any time, there is precisely one \"first\" node with a null
prev reference that terminates any chain of prev references
starting at a live node.  Similarly there is precisely one
\"last\" node terminating any chain of next references starting at
a live node.  The \"first\" and \"last\" nodes may or may not be live.
The \"first\" and \"last\" nodes are always mutually reachable.

A new element is added atomically by CASing the null prev or
next reference in the first or last node to a fresh node
containing the element.  The element's node atomically becomes
\"live\" at that point.

A node is considered \"active\" if it is a live node, or the
first or last node.  Active nodes cannot be unlinked.

A \"self-link\" is a next or prev reference that is the same node:
  p.prev == p  or  p.next == p
Self-links are used in the node unlinking process.  Active nodes
never have self-links.

A node p is active if and only if:

p.item != null ||
(p.prev == null && p.next != p) ||
(p.next == null && p.prev != p)

The deque object has two node references, \"head\" and \"tail\".
The head and tail are only approximations to the first and last
nodes of the deque.  The first node can always be found by
following prev pointers from head; likewise for tail.  However,
it is permissible for head and tail to be referring to deleted
nodes that have been unlinked and so may not be reachable from
any live node.

There are 3 stages of node deletion;
\"logical deletion\", \"unlinking\", and \"gc-unlinking\".

1. \"logical deletion\" by CASing item to null atomically removes
the element from the collection, and makes the containing node
eligible for unlinking.

2. \"unlinking\" makes a deleted node unreachable from active
nodes, and thus eventually reclaimable by GC.  Unlinked nodes
may remain reachable indefinitely from an iterator.

Physical node unlinking is merely an optimization (albeit a
critical one), and so can be performed at our convenience.  At
any time, the set of live nodes maintained by prev and next
links are identical, that is, the live nodes found via next
links from the first node is equal to the elements found via
prev links from the last node.  However, this is not true for
nodes that have already been logically deleted - such nodes may
be reachable in one direction only.

3. \"gc-unlinking\" takes unlinking further by making active
nodes unreachable from deleted nodes, making it easier for the
GC to reclaim future deleted nodes.  This step makes the data
structure \"gc-robust\", as first described in detail by Boehm
(http://portal.acm.org/citation.cfm?doid=503272.503282).

GC-unlinked nodes may remain reachable indefinitely from an
iterator, but unlike unlinked nodes, are never reachable from
head or tail.

Making the data structure GC-robust will eliminate the risk of
unbounded memory retention with conservative GCs and is likely
to improve performance with generational GCs.

When a node is dequeued at either end, e.g. via poll(), we would
like to break any references from the node to active nodes.  We
develop further the use of self-links that was very effective in
other concurrent collection classes.  The idea is to replace
prev and next pointers with special values that are interpreted
to mean off-the-list-at-one-end.  These are approximations, but
good enough to preserve the properties we want in our
traversals, e.g. we guarantee that a traversal will never visit
the same element twice, but we don't guarantee whether a
traversal that runs out of elements will be able to see more
elements later after enqueues at that end.  Doing gc-unlinking
safely is particularly tricky, since any node can be in use
indefinitely (for example by an iterator).  We must ensure that
the nodes pointed at by head/tail never get gc-unlinked, since
head/tail are needed to get \"back on track\" by other nodes that
are gc-unlinked.  gc-unlinking accounts for much of the
implementation complexity.

Since neither unlinking nor gc-unlinking are necessary for
correctness, there are many implementation choices regarding
frequency (eagerness) of these operations.  Since volatile
reads are likely to be much cheaper than CASes, saving CASes by
unlinking multiple adjacent nodes at a time may be a win.
gc-unlinking can be performed rarely and still be effective,
since it is most important that long chains of deleted nodes
are occasionally broken.

The actual representation we use is that p.next == p means to
goto the first node (which in turn is reached by following prev
pointers from head), and p.next == null && p.prev == p means
that the iteration is at an end and that p is a (static final)
dummy node, NEXT_TERMINATOR, and not the last active node.
Finishing the iteration when encountering such a TERMINATOR is
good enough for read-only traversals, so such traversals can use
p.next == null as the termination condition.  When we need to
find the last (active) node, for enqueueing a new node, we need
to check whether we have reached a TERMINATOR node; if so,
restart traversal from tail.

The implementation is completely directionally symmetrical,
except that most public methods that iterate through the list
follow next pointers (\"forward\" direction).

We believe (without full proof) that all single-element deque
operations (e.g., addFirst, peekLast, pollLast) are linearizable
(see Herlihy and Shavit's book).  However, some combinations of
operations are known not to be linearizable.  In particular,
when an addFirst(A) is racing with pollFirst() removing B, it is
possible for an observer iterating over the elements to observe
A B C and subsequently observe A C, even though no interior
removes are ever performed.  Nevertheless, iterators behave
reasonably, providing the \"weakly consistent\" guarantees.

Empirically, microbenchmarks suggest that this class adds about
40% overhead relative to ConcurrentLinkedQueue, which feels as
good as we can hope for.

"
      end

      class 1113346 "Node"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3602050 // prev (<unidirectional association>)
	  relation 3602050 --->
	    a role_name "prev" volatile package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3602050 // prev (<unidirectional association>)
	    b parent class_ref 1113346 // Node
	end

	attribute 2120066 "item"
	  volatile package explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3602178 // next (<unidirectional association>)
	  relation 3602178 --->
	    a role_name "next" volatile package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3602178 // next (<unidirectional association>)
	    b parent class_ref 1113346 // Node
	end

	operation 9089026 "Node"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9089154 "Node"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "item" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new node.  Uses relaxed write because item can
only be seen after publication via casNext or casPrev.
"
	end

	operation 9089282 "casItem"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" explicit_type "E"
	    param inout name "val" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9089410 "lazySetNext"
	  cpp_inline package explicit_return_type "void"
	  nparams 1
	    param inout name "val" type class_ref 1113346 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9089538 "casNext"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 1113346 // Node
	    param inout name "val" type class_ref 1113346 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9089666 "lazySetPrev"
	  cpp_inline package explicit_return_type "void"
	  nparams 1
	    param inout name "val" type class_ref 1113346 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9089794 "casPrev"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 1113346 // Node
	    param inout name "val" type class_ref 1113346 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 2120194 "UNSAFE"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Unsafe mechanics
"
	end

	attribute 2120322 "prevOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2120450 "itemOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2120578 "nextOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 173442 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = Node.class;
                prevOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"prev\"));
                itemOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"item\"));
                nextOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"next\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      classrelation 3601538 // head (<unidirectional association>)
	relation 3601538 --->
	  a role_name "head" volatile private
	    comment "
A node from which the first node on list (that is, the unique node p
with p.prev == null && p.next != p) can be reached in O(1) time.
Invariants:
- the first node is always O(1) reachable from head via prev links
- all live nodes are reachable from the first node via succ()
- head != null
- (tmp = head).next != tmp || tmp != head
- head is never gc-unlinked (but may be unlinked)
Non-invariants:
- head.item may or may not be null
- head may not be reachable from the first or last node, or from tail

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 3601538 // head (<unidirectional association>)
	  b parent class_ref 1113346 // Node
      end

      classrelation 3601666 // tail (<unidirectional association>)
	relation 3601666 --->
	  a role_name "tail" volatile private
	    comment "
A node from which the last node on list (that is, the unique node p
with p.next == null && p.prev != p) can be reached in O(1) time.
Invariants:
- the last node is always O(1) reachable from tail via next links
- all live nodes are reachable from the last node via pred()
- tail != null
- tail is never gc-unlinked (but may be unlinked)
Non-invariants:
- tail.item may or may not be null
- tail may not be reachable from the first or last node, or from head

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 3601666 // tail (<unidirectional association>)
	  b parent class_ref 1113346 // Node
      end

      classrelation 3601794 // PREV_TERMINATOR (<unidirectional association>)
	relation 3601794 --->
	  a role_name "PREV_TERMINATOR" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 3601794 // PREV_TERMINATOR (<unidirectional association>)
	  b parent class_ref 1113346 // Node
      end

      classrelation 3601922 // NEXT_TERMINATOR (<unidirectional association>)
	relation 3601922 --->
	  a role_name "NEXT_TERMINATOR" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 3601922 // NEXT_TERMINATOR (<unidirectional association>)
	  b parent class_ref 1113346 // Node
      end

      operation 9088770 "prevTerminator"
	cpp_inline package return_type class_ref 1113346 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9088898 "nextTerminator"
	cpp_inline package return_type class_ref 1113346 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9089922 "linkFirst"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Links e as first element.
"
      end

      operation 9090050 "linkLast"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Links e as last element.
"
      end

      attribute 2120706 "HOPS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9090178 "unlink"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1113346 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlinks non-null node x.
"
      end

      operation 9090306 "unlinkFirst"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "first" type class_ref 1113346 // Node
	  param inout name "next" type class_ref 1113346 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlinks non-null first node.
"
      end

      operation 9090434 "unlinkLast"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "last" type class_ref 1113346 // Node
	  param inout name "prev" type class_ref 1113346 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlinks non-null last node.
"
      end

      operation 9090562 "updateHead"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Guarantees that any node which was unlinked before a call to
this method will be unreachable from head after it returns.
Does not guarantee to eliminate slack, only that head will
point to a node that was active while this method was running.
"
      end

      operation 9090690 "updateTail"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Guarantees that any node which was unlinked before a call to
this method will be unreachable from tail after it returns.
Does not guarantee to eliminate slack, only that tail will
point to a node that was active while this method was running.
"
      end

      operation 9090818 "skipDeletedPredecessors"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1113346 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9090946 "skipDeletedSuccessors"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1113346 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9091074 "succ"
	cpp_inline package return_type class_ref 1113346 // Node
	nparams 1
	  param inout name "p" type class_ref 1113346 // Node
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the successor of p, or the first node if p.next has been
linked to self, which will only be true if traversing with a
stale pointer that is now off the list.
"
      end

      operation 9091202 "pred"
	cpp_inline package return_type class_ref 1113346 // Node
	nparams 1
	  param inout name "p" type class_ref 1113346 // Node
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the predecessor of p, or the last node if p.prev has been
linked to self, which will only be true if traversing with a
stale pointer that is now off the list.
"
      end

      operation 9091330 "first"
	cpp_inline package return_type class_ref 1113346 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first node, the unique node p for which:
    p.prev == null && p.next != p
The returned node may or may not be logically deleted.
Guarantees that head is set to the returned node.
"
      end

      operation 9091458 "last"
	cpp_inline package return_type class_ref 1113346 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last node, the unique node p for which:
    p.next == null && p.prev != p
The returned node may or may not be logically deleted.
Guarantees that tail is set to the returned node.
"
      end

      operation 9091586 "checkNotNull"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Minor convenience utilities

Throws NullPointerException if argument is null.

@param v the element
"
      end

      operation 9091714 "screenNullResult"
	cpp_inline private explicit_return_type "E"
	nparams 1
	  param inout name "v" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns element unless it is null, in which case throws
NoSuchElementException.

@param v the element
@return the element
"
      end

      operation 9091842 "toArrayList"
	cpp_inline private return_type class_ref 186498 // ArrayList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an array list and fills it with elements of this list.
Used by toArray.

@return the array list
"
      end

      operation 9091970 "ConcurrentLinkedDeque"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty deque.
"
      end

      operation 9092098 "ConcurrentLinkedDeque"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a deque initially containing the elements of
the given collection, added in traversal order of the
collection's iterator.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection or any
        of its elements are null
"
      end

      operation 9092226 "initHeadTail"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "h" type class_ref 1113346 // Node
	  param inout name "t" type class_ref 1113346 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes head and tail, ensuring invariants hold.
"
      end

      operation 9092354 "addFirst"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the front of this deque.
As the deque is unbounded, this method will never throw
{@link IllegalStateException}.

@throws NullPointerException if the specified element is null
"
      end

      operation 9092482 "addLast"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the end of this deque.
As the deque is unbounded, this method will never throw
{@link IllegalStateException}.

<p>This method is equivalent to {@link #add}.

@throws NullPointerException if the specified element is null
"
      end

      operation 9092610 "offerFirst"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the front of this deque.
As the deque is unbounded, this method will never return {@code false}.

@return {@code true} (as specified by {@link Deque#offerFirst})
@throws NullPointerException if the specified element is null
"
      end

      operation 9092738 "offerLast"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the end of this deque.
As the deque is unbounded, this method will never return {@code false}.

<p>This method is equivalent to {@link #add}.

@return {@code true} (as specified by {@link Deque#offerLast})
@throws NullPointerException if the specified element is null
"
      end

      operation 9092866 "peekFirst"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9092994 "peekLast"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9093122 "getFirst"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9093250 "getLast"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9093378 "pollFirst"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9093506 "pollLast"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9093634 "removeFirst"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9093762 "removeLast"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9093890 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Queue and stack methods ***

Inserts the specified element at the tail of this deque.
As the deque is unbounded, this method will never return {@code false}.

@return {@code true} (as specified by {@link Queue#offer})
@throws NullPointerException if the specified element is null
"
      end

      operation 9094018 "add"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this deque.
As the deque is unbounded, this method will never throw
{@link IllegalStateException} or return {@code false}.

@return {@code true} (as specified by {@link Collection#add})
@throws NullPointerException if the specified element is null
"
      end

      operation 9094146 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9094274 "peek"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9094402 "remove"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9094530 "pop"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9094658 "element"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9094786 "push"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
"
      end

      operation 9094914 "removeFirstOccurrence"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first element {@code e} such that
{@code o.equals(e)}, if such an element exists in this deque.
If the deque does not contain the element, it is unchanged.

@param o element to be removed from this deque, if present
@return {@code true} if the deque contained the specified element
@throws NullPointerException if the specified element is null
"
      end

      operation 9095042 "removeLastOccurrence"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the last element {@code e} such that
{@code o.equals(e)}, if such an element exists in this deque.
If the deque does not contain the element, it is unchanged.

@param o element to be removed from this deque, if present
@return {@code true} if the deque contained the specified element
@throws NullPointerException if the specified element is null
"
      end

      operation 9095170 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this deque contains at least one
element {@code e} such that {@code o.equals(e)}.

@param o element whose presence in this deque is to be tested
@return {@code true} if this deque contains the specified element
"
      end

      operation 9095298 "isEmpty"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this collection contains no elements.

@return {@code true} if this collection contains no elements
"
      end

      operation 9095426 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this deque.  If this deque
contains more than {@code Integer.MAX_VALUE} elements, it
returns {@code Integer.MAX_VALUE}.

<p>Beware that, unlike in most collections, this method is
<em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these deques, determining the current
number of elements requires traversing them all to count them.
Additionally, it is possible for the size to change during
execution of this method, in which case the returned result
will be inaccurate. Thus, this method is typically not very
useful in concurrent applications.

@return the number of elements in this deque
"
      end

      operation 9095554 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first element {@code e} such that
{@code o.equals(e)}, if such an element exists in this deque.
If the deque does not contain the element, it is unchanged.

@param o element to be removed from this deque, if present
@return {@code true} if the deque contained the specified element
@throws NullPointerException if the specified element is null
"
      end

      operation 9095682 "addAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified collection to the end of
this deque, in the order that they are returned by the specified
collection's iterator.  Attempts to {@code addAll} of a deque to
itself result in {@code IllegalArgumentException}.

@param c the elements to be inserted into this deque
@return {@code true} if this deque changed as a result of the call
@throws NullPointerException if the specified collection or any
        of its elements are null
@throws IllegalArgumentException if the collection is this deque
"
      end

      operation 9095810 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this deque.
"
      end

      operation 9095938 "toArray"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this deque, in
proper sequence (from first to last element).

<p>The returned array will be \"safe\" in that no references to it are
maintained by this deque.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this deque
"
      end

      operation 9096066 "toArray"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this deque,
in proper sequence (from first to last element); the runtime
type of the returned array is that of the specified array.  If
the deque fits in the specified array, it is returned therein.
Otherwise, a new array is allocated with the runtime type of
the specified array and the size of this deque.

<p>If this deque fits in the specified array with room to spare
(i.e., the array has more elements than this deque), the element in
the array immediately following the end of the deque is set to
{@code null}.

<p>Like the {@link #toArray()} method, this method acts as
bridge between array-based and collection-based APIs.  Further,
this method allows precise control over the runtime type of the
output array, and may, under certain circumstances, be used to
save allocation costs.

<p>Suppose {@code x} is a deque known to contain only strings.
The following code can be used to dump the deque into a newly
allocated array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the deque are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this deque
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this deque
@throws NullPointerException if the specified array is null
"
      end

      operation 9096194 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this deque in proper sequence.
The elements will be returned in order from first (head) to last (tail).

<p>The returned iterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

@return an iterator over the elements in this deque in proper sequence
"
      end

      operation 9096322 "descendingIterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this deque in reverse
sequential order.  The elements will be returned in order from
last (tail) to first (head).

<p>The returned iterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

@return an iterator over the elements in this deque in reverse order
"
      end

      class 1113474 "AbstractItr"
	abstract visibility private 
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3602306 // <realization>
	  relation 3602306 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3602306 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	classrelation 3602434 // nextNode (<unidirectional association>)
	  relation 3602434 --->
	    a role_name "nextNode" private
	      comment "
Next node to return item for.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3602434 // nextNode (<unidirectional association>)
	    b parent class_ref 1113346 // Node
	end

	attribute 2120834 "nextItem"
	  private explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "nextItem holds on to item fields because once we claim
that an element exists in hasNext(), we must return it in
the following next() call even if it was in the process of
being removed when hasNext() was called.

"
	end

	classrelation 3602562 // lastRet (<unidirectional association>)
	  relation 3602562 --->
	    a role_name "lastRet" private
	      comment "
Node returned by most recent call to next. Needed by remove.
Reset to null if this element is deleted by a call to remove.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3602562 // lastRet (<unidirectional association>)
	    b parent class_ref 1113346 // Node
	end

	operation 9096450 "startNode"
	  abstract cpp_inline package return_type class_ref 1113346 // Node
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9096578 "nextNode"
	  abstract cpp_inline package return_type class_ref 1113346 // Node
	  nparams 1
	    param inout name "p" type class_ref 1113346 // Node
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9096706 "AbstractItr"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9096834 "advance"
	  cpp_inline private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets nextNode and nextItem to next valid node, or to null
if no such.
"
	end

	operation 9096962 "hasNext"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9097090 "next"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9097218 "remove"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1113602 "Itr"
	visibility private 
	nactuals 1
	actual class class_ref 1113218 // ConcurrentLinkedDeque
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3602690 // <generalisation>
	  relation 3602690 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3602690 // <generalisation>
	    b parent class_ref 1113474 // AbstractItr
	end

	operation 9097346 "startNode"
	  cpp_inline package return_type class_ref 1113346 // Node
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9097474 "nextNode"
	  cpp_inline package return_type class_ref 1113346 // Node
	  nparams 1
	    param inout name "p" type class_ref 1113346 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1113730 "DescendingItr"
	visibility private 
	nactuals 1
	actual class class_ref 1113218 // ConcurrentLinkedDeque
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3602818 // <generalisation>
	  relation 3602818 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3602818 // <generalisation>
	    b parent class_ref 1113474 // AbstractItr
	end

	operation 9097602 "startNode"
	  cpp_inline package return_type class_ref 1113346 // Node
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9097730 "nextNode"
	  cpp_inline package return_type class_ref 1113346 // Node
	  nparams 1
	    param inout name "p" type class_ref 1113346 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1113858 "CLDSpliterator"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3602946 // <realization>
	  relation 3602946 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3602946 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	attribute 2120962 "MAX_BATCH"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 25"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " max batch array size;"
	end

	classrelation 3603074 // queue (<unidirectional association>)
	  relation 3603074 --->
	    a role_name "queue" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3603074 // queue (<unidirectional association>)
	    b parent class_ref 1113218 // ConcurrentLinkedDeque
	end

	classrelation 3603202 // current (<unidirectional association>)
	  relation 3603202 --->
	    a role_name "current" package
	      comment " current node; null until initialized"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3603202 // current (<unidirectional association>)
	    b parent class_ref 1113346 // Node
	end

	attribute 2121090 "batch"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " batch size for splits"
	end

	attribute 2121218 "exhausted"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " true when no more nodes"
	end

	operation 9097858 "CLDSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "queue" type class_ref 1113218 // ConcurrentLinkedDeque
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9097986 "trySplit"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9098114 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9098242 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9098370 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9098498 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9098626 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Spliterator} over the elements in this deque.

<p>The returned spliterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},
{@link Spliterator#ORDERED}, and {@link Spliterator#NONNULL}.

@implNote
The {@code Spliterator} implements {@code trySplit} to permit limited
parallelism.

@return a {@code Spliterator} over the elements in this deque
@since 1.8
"
      end

      operation 9098754 "writeObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves this deque to a stream (that is, serializes it).

@param s the stream
@throws java.io.IOException if an I/O error occurs
@serialData All of the elements (each an {@code E}) in
the proper order, followed by a null
"
      end

      operation 9098882 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes this deque from a stream (that is, deserializes it).
@param s the stream
@throws ClassNotFoundException if the class of a serialized object
        could not be found
@throws java.io.IOException if an I/O error occurs
"
      end

      operation 9099010 "casHead"
	cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 1113346 // Node
	  param inout name "val" type class_ref 1113346 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9099138 "casTail"
	cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 1113346 // Node
	  param inout name "val" type class_ref 1113346 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2121346 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2121474 "headOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2121602 "tailOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 173570 "initialization"
	
	cpp "" ""
	java "  static {
        PREV_TERMINATOR = new Node<Object>();
        PREV_TERMINATOR.next = PREV_TERMINATOR;
        NEXT_TERMINATOR = new Node<Object>();
        NEXT_TERMINATOR.prev = NEXT_TERMINATOR;
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = ConcurrentLinkedDeque.class;
            headOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"head\"));
            tailOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"tail\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 1113986 "ConcurrentLinkedQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1064066 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 1064194 // Queue
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An unbounded thread-safe {@linkplain Queue queue} based on linked nodes.
This queue orders elements FIFO (first-in-first-out).
The <em>head</em> of the queue is that element that has been on the
queue the longest time.
The <em>tail</em> of the queue is that element that has been on the
queue the shortest time. New elements
are inserted at the tail of the queue, and the queue retrieval
operations obtain elements at the head of the queue.
A {@code ConcurrentLinkedQueue} is an appropriate choice when
many threads will share access to a common collection.
Like most other concurrent collection implementations, this class
does not permit the use of {@code null} elements.

<p>This implementation employs an efficient <em>non-blocking</em>
algorithm based on one described in <a
href=\"http://www.cs.rochester.edu/u/michael/PODC96.html\"> Simple,
Fast, and Practical Non-Blocking and Blocking Concurrent Queue
Algorithms</a> by Maged M. Michael and Michael L. Scott.

<p>Iterators are <i>weakly consistent</i>, returning elements
reflecting the state of the queue at some point at or since the
creation of the iterator.  They do <em>not</em> throw {@link
java.util.ConcurrentModificationException}, and may proceed concurrently
with other operations.  Elements contained in the queue since the creation
of the iterator will be returned exactly once.

<p>Beware that, unlike in most collections, the {@code size} method
is <em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these queues, determining the current number
of elements requires a traversal of the elements, and so may report
inaccurate results if this collection is modified during traversal.
Additionally, the bulk operations {@code addAll},
{@code removeAll}, {@code retainAll}, {@code containsAll},
{@code equals}, and {@code toArray} are <em>not</em> guaranteed
to be performed atomically. For example, an iterator operating
concurrently with an {@code addAll} operation might view only some
of the added elements.

<p>This class and its iterator implement all of the <em>optional</em>
methods of the {@link Queue} and {@link Iterator} interfaces.

<p>Memory consistency effects: As with other concurrent
collections, actions in a thread prior to placing an object into a
{@code ConcurrentLinkedQueue}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions subsequent to the access or removal of that element from
the {@code ConcurrentLinkedQueue} in another thread.

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 3603330 // <realization>
	relation 3603330 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3603330 // <realization>
	  b parent class_ref 1064066 // AbstractQueue
      end

      classrelation 3603458 // <realization>
	relation 3603458 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3603458 // <realization>
	  b parent class_ref 1064194 // Queue
      end

      classrelation 3603586 // <realization>
	relation 3603586 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3603586 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2121730 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 196745693267521676L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 1114114 "Node"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2121858 "item"
	  volatile package explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3603714 // next (<unidirectional association>)
	  relation 3603714 --->
	    a role_name "next" volatile package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3603714 // next (<unidirectional association>)
	    b parent class_ref 1114114 // Node
	end

	operation 9099266 "Node"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "item" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new node.  Uses relaxed write because item can
only be seen after publication via casNext.
"
	end

	operation 9099394 "casItem"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" explicit_type "E"
	    param inout name "val" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9099522 "lazySetNext"
	  cpp_inline package explicit_return_type "void"
	  nparams 1
	    param inout name "val" type class_ref 1114114 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9099650 "casNext"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 1114114 // Node
	    param inout name "val" type class_ref 1114114 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 2121986 "UNSAFE"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Unsafe mechanics
"
	end

	attribute 2122114 "itemOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2122242 "nextOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 173698 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = Node.class;
                itemOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"item\"));
                nextOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"next\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      classrelation 3603842 // head (<unidirectional association>)
	relation 3603842 --->
	  a role_name "head" volatile private
	    comment "
A node from which the first live (non-deleted) node (if any)
can be reached in O(1) time.
Invariants:
- all live nodes are reachable from head via succ()
- head != null
- (tmp = head).next != tmp || tmp != head
Non-invariants:
- head.item may or may not be null.
- it is permitted for tail to lag behind head, that is, for tail
  to not be reachable from head!

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 3603842 // head (<unidirectional association>)
	  b parent class_ref 1114114 // Node
      end

      classrelation 3603970 // tail (<unidirectional association>)
	relation 3603970 --->
	  a role_name "tail" volatile private
	    comment "
A node from which the last node on list (that is, the unique
node with node.next == null) can be reached in O(1) time.
Invariants:
- the last node is always reachable from tail via succ()
- tail != null
Non-invariants:
- tail.item may or may not be null.
- it is permitted for tail to lag behind head, that is, for tail
  to not be reachable from head!
- tail.next may or may not be self-pointing to tail.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 3603970 // tail (<unidirectional association>)
	  b parent class_ref 1114114 // Node
      end

      operation 9099778 "ConcurrentLinkedQueue"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code ConcurrentLinkedQueue} that is initially empty.
"
      end

      operation 9099906 "ConcurrentLinkedQueue"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code ConcurrentLinkedQueue}
initially containing the elements of the given collection,
added in traversal order of the collection's iterator.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection or any
        of its elements are null
"
      end

      operation 9100034 "add"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Have to override just to update the javadoc

Inserts the specified element at the tail of this queue.
As the queue is unbounded, this method will never throw
{@link IllegalStateException} or return {@code false}.

@return {@code true} (as specified by {@link Collection#add})
@throws NullPointerException if the specified element is null
"
      end

      operation 9100162 "updateHead"
	cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "h" type class_ref 1114114 // Node
	  param inout name "p" type class_ref 1114114 // Node
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to CAS head to p. If successful, repoint old head to itself
as sentinel for succ(), below.
"
      end

      operation 9100290 "succ"
	cpp_inline package return_type class_ref 1114114 // Node
	nparams 1
	  param inout name "p" type class_ref 1114114 // Node
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the successor of p, or the head node if p.next has been
linked to self, which will only be true if traversing with a
stale pointer that is now off the list.
"
      end

      operation 9100418 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue.
As the queue is unbounded, this method will never return {@code false}.

@return {@code true} (as specified by {@link Queue#offer})
@throws NullPointerException if the specified element is null
"
      end

      operation 9100546 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9100674 "peek"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9100802 "first"
	cpp_inline package return_type class_ref 1114114 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first live (non-deleted) node on list, or null if none.
This is yet another variant of poll/peek; here returning the
first node, not element.  We could make peek() a wrapper around
first(), but that would cost an extra volatile read of item,
and the need to add a retry loop to deal with the possibility
of losing a race to a concurrent poll().
"
      end

      operation 9100930 "isEmpty"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains no elements.

@return {@code true} if this queue contains no elements
"
      end

      operation 9101058 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this queue.  If this queue
contains more than {@code Integer.MAX_VALUE} elements, returns
{@code Integer.MAX_VALUE}.

<p>Beware that, unlike in most collections, this method is
<em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these queues, determining the current
number of elements requires an O(n) traversal.
Additionally, if elements are added or removed during execution
of this method, the returned result may be inaccurate.  Thus,
this method is typically not very useful in concurrent
applications.

@return the number of elements in this queue
"
      end

      operation 9101186 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains the specified element.
More formally, returns {@code true} if and only if this queue contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this queue
@return {@code true} if this queue contains the specified element
"
      end

      operation 9101314 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this queue,
if it is present.  More formally, removes an element {@code e} such
that {@code o.equals(e)}, if this queue contains one or more such
elements.
Returns {@code true} if this queue contained the specified element
(or equivalently, if this queue changed as a result of the call).

@param o element to be removed from this queue, if present
@return {@code true} if this queue changed as a result of the call
"
      end

      operation 9101442 "addAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified collection to the end of
this queue, in the order that they are returned by the specified
collection's iterator.  Attempts to {@code addAll} of a queue to
itself result in {@code IllegalArgumentException}.

@param c the elements to be inserted into this queue
@return {@code true} if this queue changed as a result of the call
@throws NullPointerException if the specified collection or any
        of its elements are null
@throws IllegalArgumentException if the collection is this queue
"
      end

      operation 9101570 "toArray"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue, in
proper sequence.

<p>The returned array will be \"safe\" in that no references to it are
maintained by this queue.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this queue
"
      end

      operation 9101698 "toArray"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns an array containing all of the elements in this queue, in
proper sequence; the runtime type of the returned array is that of
the specified array.  If the queue fits in the specified array, it
is returned therein.  Otherwise, a new array is allocated with the
runtime type of the specified array and the size of this queue.

<p>If this queue fits in the specified array with room to spare
(i.e., the array has more elements than this queue), the element in
the array immediately following the end of the queue is set to
{@code null}.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose {@code x} is a queue known to contain only strings.
The following code can be used to dump the queue into a newly
allocated array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the queue are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this queue
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this queue
@throws NullPointerException if the specified array is null
"
      end

      operation 9101826 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue in proper sequence.
The elements will be returned in order from first (head) to last (tail).

<p>The returned iterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

@return an iterator over the elements in this queue in proper sequence
"
      end

      class 1114242 "Itr"
	visibility private 
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3604098 // <realization>
	  relation 3604098 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3604098 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	classrelation 3604226 // nextNode (<unidirectional association>)
	  relation 3604226 --->
	    a role_name "nextNode" private
	      comment "
Next node to return item for.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3604226 // nextNode (<unidirectional association>)
	    b parent class_ref 1114114 // Node
	end

	attribute 2122370 "nextItem"
	  private explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "nextItem holds on to item fields because once we claim
that an element exists in hasNext(), we must return it in
the following next() call even if it was in the process of
being removed when hasNext() was called.

"
	end

	classrelation 3604354 // lastRet (<unidirectional association>)
	  relation 3604354 --->
	    a role_name "lastRet" private
	      comment "
Node of the last returned item, to support remove.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3604354 // lastRet (<unidirectional association>)
	    b parent class_ref 1114114 // Node
	end

	operation 9101954 "Itr"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9102082 "advance"
	  cpp_inline private explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Moves to next valid node and returns item to return for
next(), or null if no such.
"
	end

	operation 9102210 "hasNext"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9102338 "next"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9102466 "remove"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9102594 "writeObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves this queue to a stream (that is, serializes it).

@param s the stream
@throws java.io.IOException if an I/O error occurs
@serialData All of the elements (each an {@code E}) in
the proper order, followed by a null
"
      end

      operation 9102722 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes this queue from a stream (that is, deserializes it).
@param s the stream
@throws ClassNotFoundException if the class of a serialized object
        could not be found
@throws java.io.IOException if an I/O error occurs
"
      end

      class 1114370 "CLQSpliterator"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3604482 // <realization>
	  relation 3604482 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3604482 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	attribute 2122498 "MAX_BATCH"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 25"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " max batch array size;"
	end

	classrelation 3604610 // queue (<unidirectional association>)
	  relation 3604610 --->
	    a role_name "queue" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3604610 // queue (<unidirectional association>)
	    b parent class_ref 1113986 // ConcurrentLinkedQueue
	end

	classrelation 3604738 // current (<unidirectional association>)
	  relation 3604738 --->
	    a role_name "current" package
	      comment " current node; null until initialized"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3604738 // current (<unidirectional association>)
	    b parent class_ref 1114114 // Node
	end

	attribute 2122626 "batch"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " batch size for splits"
	end

	attribute 2122754 "exhausted"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " true when no more nodes"
	end

	operation 9102850 "CLQSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "queue" type class_ref 1113986 // ConcurrentLinkedQueue
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9102978 "trySplit"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9103106 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9103234 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9103362 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9103490 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9103618 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a {@link Spliterator} over the elements in this queue.

<p>The returned spliterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},
{@link Spliterator#ORDERED}, and {@link Spliterator#NONNULL}.

@implNote
The {@code Spliterator} implements {@code trySplit} to permit limited
parallelism.

@return a {@code Spliterator} over the elements in this queue
@since 1.8
"
      end

      operation 9103746 "checkNotNull"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws NullPointerException if argument is null.

@param v the element
"
      end

      operation 9103874 "casTail"
	cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 1114114 // Node
	  param inout name "val" type class_ref 1114114 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9104002 "casHead"
	cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 1114114 // Node
	  param inout name "val" type class_ref 1114114 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2122882 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2123010 "headOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2123138 "tailOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 173826 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = ConcurrentLinkedQueue.class;
            headOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"head\"));
            tailOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"tail\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 1114498 "ConcurrentNavigableMap"
      visibility public stereotype "interface"
      nformals 2
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 130690 // ConcurrentMap
        rank 0 explicit_value ""
      actual class class_ref 130690 // ConcurrentMap
        rank 1 explicit_value ""
      actual class class_ref 1063426 // NavigableMap
        rank 0 explicit_value ""
      actual class class_ref 1063426 // NavigableMap
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link ConcurrentMap} supporting {@link NavigableMap} operations,
and recursively so for its navigable sub-maps.

<p>This interface is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@author Doug Lea
@param <K> the type of keys maintained by this map
@param <V> the type of mapped values
@since 1.6
"
      classrelation 3604866 // <realization>
	relation 3604866 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3604866 // <realization>
	  b parent class_ref 130690 // ConcurrentMap
      end

      classrelation 3604994 // <realization>
	relation 3604994 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3604994 // <realization>
	  b parent class_ref 1063426 // NavigableMap
      end

      operation 9104130 "subMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 4
	  param inout name "fromKey" explicit_type "K"
	  param inout name "fromInclusive" explicit_type "boolean"
	  param inout name "toKey" explicit_type "K"
	  param inout name "toInclusive" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9104258 "headMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 2
	  param inout name "toKey" explicit_type "K"
	  param inout name "inclusive" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9104386 "tailMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 2
	  param inout name "fromKey" explicit_type "K"
	  param inout name "inclusive" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9104514 "subMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 2
	  param inout name "fromKey" explicit_type "K"
	  param inout name "toKey" explicit_type "K"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9104642 "headMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 1
	  param inout name "toKey" explicit_type "K"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9104770 "tailMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 1
	  param inout name "fromKey" explicit_type "K"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9104898 "descendingMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reverse order view of the mappings contained in this map.
The descending map is backed by this map, so changes to the map are
reflected in the descending map, and vice-versa.

<p>The returned map has an ordering equivalent to
{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}{@code (comparator())}.
The expression {@code m.descendingMap().descendingMap()} returns a
view of {@code m} essentially equivalent to {@code m}.

@return a reverse order view of this map
"
      end

      operation 9105026 "navigableKeySet"
	cpp_inline public return_type class_ref 1073538 // NavigableSet
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link NavigableSet} view of the keys contained in this map.
The set's iterator returns the keys in ascending order.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  The set supports element
removal, which removes the corresponding mapping from the map,
via the {@code Iterator.remove}, {@code Set.remove},
{@code removeAll}, {@code retainAll}, and {@code clear}
operations.  It does not support the {@code add} or {@code addAll}
operations.

<p>The view's iterators and spliterators are
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

@return a navigable set view of the keys in this map
"
      end

      operation 9105154 "keySet"
	cpp_inline public return_type class_ref 1073538 // NavigableSet
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link NavigableSet} view of the keys contained in this map.
The set's iterator returns the keys in ascending order.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  The set supports element
removal, which removes the corresponding mapping from the map,
via the {@code Iterator.remove}, {@code Set.remove},
{@code removeAll}, {@code retainAll}, and {@code clear}
operations.  It does not support the {@code add} or {@code addAll}
operations.

<p>The view's iterators and spliterators are
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>This method is equivalent to method {@code navigableKeySet}.

@return a navigable set view of the keys in this map
"
      end

      operation 9105282 "descendingKeySet"
	cpp_inline public return_type class_ref 1073538 // NavigableSet
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reverse order {@link NavigableSet} view of the keys contained in this map.
The set's iterator returns the keys in descending order.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  The set supports element
removal, which removes the corresponding mapping from the map,
via the {@code Iterator.remove}, {@code Set.remove},
{@code removeAll}, {@code retainAll}, and {@code clear}
operations.  It does not support the {@code add} or {@code addAll}
operations.

<p>The view's iterators and spliterators are
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

@return a reverse order navigable set view of the keys in this map
"
      end
    end

    class 1114626 "ConcurrentSkipListMap"
      visibility public 
      nformals 2
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 192130 // AbstractMap
        rank 0 explicit_value ""
      actual class class_ref 192130 // AbstractMap
        rank 1 explicit_value ""
      actual class class_ref 1114498 // ConcurrentNavigableMap
        rank 0 explicit_value ""
      actual class class_ref 1114498 // ConcurrentNavigableMap
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A scalable concurrent {@link ConcurrentNavigableMap} implementation.
The map is sorted according to the {@linkplain Comparable natural
ordering} of its keys, or by a {@link Comparator} provided at map
creation time, depending on which constructor is used.

<p>This class implements a concurrent variant of <a
href=\"http://en.wikipedia.org/wiki/Skip_list\" target=\"_top\">SkipLists</a>
providing expected average <i>log(n)</i> time cost for the
{@code containsKey}, {@code get}, {@code put} and
{@code remove} operations and their variants.  Insertion, removal,
update, and access operations safely execute concurrently by
multiple threads.

<p>Iterators and spliterators are
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>Ascending key ordered views and their iterators are faster than
descending ones.

<p>All {@code Map.Entry} pairs returned by methods in this class
and its views represent snapshots of mappings at the time they were
produced. They do <em>not</em> support the {@code Entry.setValue}
method. (Note however that it is possible to change mappings in the
associated map using {@code put}, {@code putIfAbsent}, or
{@code replace}, depending on exactly which effect you need.)

<p>Beware that, unlike in most collections, the {@code size}
method is <em>not</em> a constant-time operation. Because of the
asynchronous nature of these maps, determining the current number
of elements requires a traversal of the elements, and so may report
inaccurate results if this collection is modified during traversal.
Additionally, the bulk operations {@code putAll}, {@code equals},
{@code toArray}, {@code containsValue}, and {@code clear} are
<em>not</em> guaranteed to be performed atomically. For example, an
iterator operating concurrently with a {@code putAll} operation
might view only some of the added elements.

<p>This class and its views and iterators implement all of the
<em>optional</em> methods of the {@link Map} and {@link Iterator}
interfaces. Like most other concurrent collections, this class does
<em>not</em> permit the use of {@code null} keys or values because some
null return values cannot be reliably distinguished from the absence of
elements.

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@author Doug Lea
@param <K> the type of keys maintained by this map
@param <V> the type of mapped values
@since 1.6
"
      classrelation 3605122 // <realization>
	relation 3605122 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3605122 // <realization>
	  b parent class_ref 192130 // AbstractMap
      end

      classrelation 3605250 // <realization>
	relation 3605250 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3605250 // <realization>
	  b parent class_ref 1114498 // ConcurrentNavigableMap
      end

      classrelation 3605378 // <realization>
	relation 3605378 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3605378 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3605506 // <realization>
	relation 3605506 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3605506 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2123266 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8627078645895051609L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This class implements a tree-like two-dimensionally linked skip
list in which the index levels are represented in separate
nodes from the base nodes holding data.  There are two reasons
for taking this approach instead of the usual array-based
structure: 1) Array based implementations seem to encounter
more complexity and overhead 2) We can use cheaper algorithms
for the heavily-traversed index lists than can be used for the
base lists.  Here's a picture of some of the basics for a
possible list with 2 levels of index:

Head nodes          Index nodes
+-+    right        +-+                      +-+
|2|---------------->| |--------------------->| |->null
+-+                 +-+                      +-+
 | down              |                        |
 v                   v                        v
+-+            +-+  +-+       +-+            +-+       +-+
|1|----------->| |->| |------>| |----------->| |------>| |->null
+-+            +-+  +-+       +-+            +-+       +-+
 v              |    |         |              |         |
Nodes  next     v    v         v              v         v
+-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+
| |->|A|->|B|->|C|->|D|->|E|->|F|->|G|->|H|->|I|->|J|->|K|->null
+-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+

The base lists use a variant of the HM linked ordered set
algorithm. See Tim Harris, \"A pragmatic implementation of
non-blocking linked lists\"
http://www.cl.cam.ac.uk/~tlh20/publications.html and Maged
Michael \"High Performance Dynamic Lock-Free Hash Tables and
List-Based Sets\"
http://www.research.ibm.com/people/m/michael/pubs.htm.  The
basic idea in these lists is to mark the \"next\" pointers of
deleted nodes when deleting to avoid conflicts with concurrent
insertions, and when traversing to keep track of triples
(predecessor, node, successor) in order to detect when and how
to unlink these deleted nodes.

Rather than using mark-bits to mark list deletions (which can
be slow and space-intensive using AtomicMarkedReference), nodes
use direct CAS'able next pointers.  On deletion, instead of
marking a pointer, they splice in another node that can be
thought of as standing for a marked pointer (indicating this by
using otherwise impossible field values).  Using plain nodes
acts roughly like \"boxed\" implementations of marked pointers,
but uses new nodes only when nodes are deleted, not for every
link.  This requires less space and supports faster
traversal. Even if marked references were better supported by
JVMs, traversal using this technique might still be faster
because any search need only read ahead one more node than
otherwise required (to check for trailing marker) rather than
unmasking mark bits or whatever on each read.

This approach maintains the essential property needed in the HM
algorithm of changing the next-pointer of a deleted node so
that any other CAS of it will fail, but implements the idea by
changing the pointer to point to a different node, not by
marking it.  While it would be possible to further squeeze
space by defining marker nodes not to have key/value fields, it
isn't worth the extra type-testing overhead.  The deletion
markers are rarely encountered during traversal and are
normally quickly garbage collected. (Note that this technique
would not work well in systems without garbage collection.)

In addition to using deletion markers, the lists also use
nullness of value fields to indicate deletion, in a style
similar to typical lazy-deletion schemes.  If a node's value is
null, then it is considered logically deleted and ignored even
though it is still reachable. This maintains proper control of
concurrent replace vs delete operations -- an attempted replace
must fail if a delete beat it by nulling field, and a delete
must return the last non-null value held in the field. (Note:
Null, rather than some special marker, is used for value fields
here because it just so happens to mesh with the Map API
requirement that method get returns null if there is no
mapping, which allows nodes to remain concurrently readable
even when deleted. Using any other marker value here would be
messy at best.)

Here's the sequence of events for a deletion of node n with
predecessor b and successor f, initially:

       +------+       +------+      +------+
  ...  |   b  |------>|   n  |----->|   f  | ...
       +------+       +------+      +------+

1. CAS n's value field from non-null to null.
   From this point on, no public operations encountering
   the node consider this mapping to exist. However, other
   ongoing insertions and deletions might still modify
   n's next pointer.

2. CAS n's next pointer to point to a new marker node.
   From this point on, no other nodes can be appended to n.
   which avoids deletion errors in CAS-based linked lists.

       +------+       +------+      +------+       +------+
  ...  |   b  |------>|   n  |----->|marker|------>|   f  | ...
       +------+       +------+      +------+       +------+

3. CAS b's next pointer over both n and its marker.
   From this point on, no new traversals will encounter n,
   and it can eventually be GCed.
       +------+                                    +------+
  ...  |   b  |----------------------------------->|   f  | ...
       +------+                                    +------+

A failure at step 1 leads to simple retry due to a lost race
with another operation. Steps 2-3 can fail because some other
thread noticed during a traversal a node with null value and
helped out by marking and/or unlinking.  This helping-out
ensures that no thread can become stuck waiting for progress of
the deleting thread.  The use of marker nodes slightly
complicates helping-out code because traversals must track
consistent reads of up to four nodes (b, n, marker, f), not
just (b, n, f), although the next field of a marker is
immutable, and once a next field is CAS'ed to point to a
marker, it never again changes, so this requires less care.

Skip lists add indexing to this scheme, so that the base-level
traversals start close to the locations being found, inserted
or deleted -- usually base level traversals only traverse a few
nodes. This doesn't change the basic algorithm except for the
need to make sure base traversals start at predecessors (here,
b) that are not (structurally) deleted, otherwise retrying
after processing the deletion.

Index levels are maintained as lists with volatile next fields,
using CAS to link and unlink.  Races are allowed in index-list
operations that can (rarely) fail to link in a new index node
or delete one. (We can't do this of course for data nodes.)
However, even when this happens, the index lists remain sorted,
so correctly serve as indices.  This can impact performance,
but since skip lists are probabilistic anyway, the net result
is that under contention, the effective \"p\" value may be lower
than its nominal value. And race windows are kept small enough
that in practice these failures are rare, even under a lot of
contention.

The fact that retries (for both base and index lists) are
relatively cheap due to indexing allows some minor
simplifications of retry logic. Traversal restarts are
performed after most \"helping-out\" CASes. This isn't always
strictly necessary, but the implicit backoffs tend to help
reduce other downstream failed CAS's enough to outweigh restart
cost.  This worsens the worst case, but seems to improve even
highly contended cases.

Unlike most skip-list implementations, index insertion and
deletion here require a separate traversal pass occurring after
the base-level action, to add or remove index nodes.  This adds
to single-threaded overhead, but improves contended
multithreaded performance by narrowing interference windows,
and allows deletion to ensure that all index nodes will be made
unreachable upon return from a public remove operation, thus
avoiding unwanted garbage retention. This is more important
here than in some other data structures because we cannot null
out node fields referencing user keys since they might still be
read by other ongoing traversals.

Indexing uses skip list parameters that maintain good search
performance while using sparser-than-usual indices: The
hardwired parameters k=1, p=0.5 (see method doPut) mean
that about one-quarter of the nodes have indices. Of those that
do, half have one level, a quarter have two, and so on (see
Pugh's Skip List Cookbook, sec 3.4).  The expected total space
requirement for a map is slightly less than for the current
implementation of java.util.TreeMap.

Changing the level of the index (i.e, the height of the
tree-like structure) also uses CAS. The head index has initial
level/height of one. Creation of an index with height greater
than the current level adds a level to the head index by
CAS'ing on a new top-most head. To maintain good performance
after a lot of removals, deletion methods heuristically try to
reduce the height if the topmost levels appear to be empty.
This may encounter races in which it possible (but rare) to
reduce and \"lose\" a level just as it is about to contain an
index (that will then never be encountered). This does no
structural harm, and in practice appears to be a better option
than allowing unrestrained growth of levels.

The code for all this is more verbose than you'd like. Most
operations entail locating an element (or position to insert an
element). The code to do this can't be nicely factored out
because subsequent uses require a snapshot of predecessor
and/or successor and/or value fields which can't be returned
all at once, at least not without creating yet another object
to hold them -- creating such little objects is an especially
bad idea for basic internal search operations because it adds
to GC overhead.  (This is one of the few times I've wished Java
had macros.) Instead, some traversal code is interleaved within
insertion and removal operations.  The control logic to handle
all the retry conditions is sometimes twisty. Most search is
broken into 2 parts. findPredecessor() searches index nodes
only, returning a base-level predecessor of the key. findNode()
finishes out the base-level search. Even with this factoring,
there is a fair amount of near-duplication of code to handle
variants.

To produce random values without interference across threads,
we use within-JDK thread local random support (via the
\"secondary seed\", to avoid interference with user-level
ThreadLocalRandom.)

A previous version of this class wrapped non-comparable keys
with their comparators to emulate Comparables when using
comparators vs Comparables.  However, JVMs now appear to better
handle infusing comparator-vs-comparable choice into search
loops. Static method cpr(comparator, x, y) is used for all
comparisons, which works well as long as the comparator
argument is set up outside of loops (thus sometimes passed as
an argument to internal methods) to avoid field re-reads.

For explanation of algorithms sharing at least a couple of
features with this one, see Mikhail Fomitchev's thesis
(http://www.cs.yorku.ca/~mikhail/), Keir Fraser's thesis
(http://www.cl.cam.ac.uk/users/kaf24/), and Hakan Sundell's
thesis (http://www.cs.chalmers.se/~phs/).

Given the use of tree-like index nodes, you might wonder why
this doesn't use some kind of search tree instead, which would
support somewhat faster search operations. The reason is that
there are no known efficient lock-free insertion and deletion
algorithms for search trees. The immutability of the \"down\"
links of index nodes (as opposed to mutable \"left\" fields in
true trees) makes this tractable using only CAS operations.

Notation guide for local variables
Node:         b, n, f    for  predecessor, node, successor
Index:        q, r, d    for index node, right, down.
              t          for another index node
Head:         h
Levels:       j
Keys:         k, key
Values:       v, value
Comparisons:  c

"
      end

      classrelation 3605634 // BASE_HEADER (<unidirectional association>)
	relation 3605634 --->
	  a role_name "BASE_HEADER" init_value " new Object()" class_relation const_relation private
	    comment "
Special value used to identify base-level header

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3605634 // BASE_HEADER (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      class 1114754 "HeadIndex"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 0 explicit_value ""
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 1 explicit_value ""
	actual class class_ref 1115394 // Index
	  rank 0 explicit_value ""
	actual class class_ref 1115394 // Index
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3607170 // <realization>
	  relation 3607170 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3607170 // <realization>
	    b parent class_ref 1115394 // Index
	end

	attribute 2124162 "level"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9107586 "HeadIndex"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "node" type class_ref 1115266 // Node
	    param inout name "down" type class_ref 1115394 // Index
	    param inout name "right" type class_ref 1115394 // Index
	    param in name "level" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}, ${t2}<K,V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3605762 // head (<unidirectional association>)
	relation 3605762 --->
	  a role_name "head" volatile private
	    comment "
The topmost head index of the skiplist.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	    classrelation_ref 3605762 // head (<unidirectional association>)
	  b parent class_ref 1114754 // HeadIndex
      end

      classrelation 3605890 // comparator (<unidirectional association>)
	relation 3605890 --->
	  a role_name "comparator" const_relation package
	    comment "
The comparator used to maintain order in this map, or null if
using natural ordering.  (Non-private to simplify access in
nested classes.)
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K> ${name}${value};
"
	    classrelation_ref 3605890 // comparator (<unidirectional association>)
	  b parent class_ref 184962 // Comparator
      end

      class 1114882 "KeySet"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 255618 // AbstractSet
	  rank 0 explicit_value ""
	actual class class_ref 1073538 // NavigableSet
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3608066 // <realization>
	  relation 3608066 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3608066 // <realization>
	    b parent class_ref 255618 // AbstractSet
	end

	classrelation 3608194 // <realization>
	  relation 3608194 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3608194 // <realization>
	    b parent class_ref 1073538 // NavigableSet
	end

	classrelation 3608322 // m (<unidirectional association>)
	  relation 3608322 --->
	    a role_name "m" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E,?> ${name}${value};
"
	      classrelation_ref 3608322 // m (<unidirectional association>)
	    b parent class_ref 1114498 // ConcurrentNavigableMap
	end

	operation 9117826 "KeySet"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "map" type class_ref 1114498 // ConcurrentNavigableMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9117954 "size"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9118082 "isEmpty"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9118210 "contains"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9118338 "remove"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9118466 "clear"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9118594 "lower"
	  cpp_inline public explicit_return_type "E"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9118722 "floor"
	  cpp_inline public explicit_return_type "E"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9118850 "ceiling"
	  cpp_inline public explicit_return_type "E"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9118978 "higher"
	  cpp_inline public explicit_return_type "E"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9119106 "comparator"
	  cpp_inline public return_type class_ref 184962 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9119234 "first"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9119362 "last"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9119490 "pollFirst"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9119618 "pollLast"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9119746 "iterator"
	  cpp_inline public return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9119874 "equals"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9120002 "toArray"
	  cpp_inline public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9120130 "toArray"
	  cpp_inline public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9120258 "descendingIterator"
	  cpp_inline public return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9120386 "subSet"
	  cpp_inline public return_type class_ref 1073538 // NavigableSet
	  nparams 4
	    param inout name "fromElement" explicit_type "E"
	    param inout name "fromInclusive" explicit_type "boolean"
	    param inout name "toElement" explicit_type "E"
	    param inout name "toInclusive" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9120514 "headSet"
	  cpp_inline public return_type class_ref 1073538 // NavigableSet
	  nparams 2
	    param inout name "toElement" explicit_type "E"
	    param inout name "inclusive" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9120642 "tailSet"
	  cpp_inline public return_type class_ref 1073538 // NavigableSet
	  nparams 2
	    param inout name "fromElement" explicit_type "E"
	    param inout name "inclusive" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9120770 "subSet"
	  cpp_inline public return_type class_ref 1073538 // NavigableSet
	  nparams 2
	    param inout name "fromElement" explicit_type "E"
	    param inout name "toElement" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9120898 "headSet"
	  cpp_inline public return_type class_ref 1073538 // NavigableSet
	  nparams 1
	    param inout name "toElement" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9121026 "tailSet"
	  cpp_inline public return_type class_ref 1073538 // NavigableSet
	  nparams 1
	    param inout name "fromElement" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9121154 "descendingSet"
	  cpp_inline public return_type class_ref 1073538 // NavigableSet
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9121282 "spliterator"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end
      end

      classrelation 3606018 // keySet (<unidirectional association>)
	relation 3606018 --->
	  a role_name "keySet" private
	    comment " Lazily initialized key set 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K> ${name}${value};
"
	    classrelation_ref 3606018 // keySet (<unidirectional association>)
	  b parent class_ref 1114882 // KeySet
      end

      class 1115010 "EntrySet"
	visibility package 
	nformals 2
	formal name "K1" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V1" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 255618 // AbstractSet
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3608706 // <realization>
	  relation 3608706 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3608706 // <realization>
	    b parent class_ref 255618 // AbstractSet
	end

	classrelation 3608834 // m (<unidirectional association>)
	  relation 3608834 --->
	    a role_name "m" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K1, V1> ${name}${value};
"
	      classrelation_ref 3608834 // m (<unidirectional association>)
	    b parent class_ref 1114498 // ConcurrentNavigableMap
	end

	operation 9122562 "EntrySet"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "map" type class_ref 1114498 // ConcurrentNavigableMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K1, V1> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9122690 "iterator"
	  cpp_inline public return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K1,V1>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9122818 "contains"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9122946 "remove"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9123074 "isEmpty"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9123202 "size"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9123330 "clear"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9123458 "equals"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9123586 "toArray"
	  cpp_inline public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9123714 "toArray"
	  cpp_inline public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9123842 "spliterator"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K1,V1>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end
      end

      classrelation 3606146 // entrySet (<unidirectional association>)
	relation 3606146 --->
	  a role_name "entrySet" private
	    comment " Lazily initialized entry set 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	    classrelation_ref 3606146 // entrySet (<unidirectional association>)
	  b parent class_ref 1115010 // EntrySet
      end

      class 1115138 "Values"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 184066 // AbstractCollection
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3608450 // <realization>
	  relation 3608450 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3608450 // <realization>
	    b parent class_ref 184066 // AbstractCollection
	end

	classrelation 3608578 // m (<unidirectional association>)
	  relation 3608578 --->
	    a role_name "m" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?, E> ${name}${value};
"
	      classrelation_ref 3608578 // m (<unidirectional association>)
	    b parent class_ref 1114498 // ConcurrentNavigableMap
	end

	operation 9121410 "Values"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "map" type class_ref 1114498 // ConcurrentNavigableMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9121538 "iterator"
	  cpp_inline public return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9121666 "isEmpty"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9121794 "size"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9121922 "contains"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9122050 "clear"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9122178 "toArray"
	  cpp_inline public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9122306 "toArray"
	  cpp_inline public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9122434 "spliterator"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end
      end

      classrelation 3606274 // values (<unidirectional association>)
	relation 3606274 --->
	  a role_name "values" private
	    comment " Lazily initialized values collection 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	    classrelation_ref 3606274 // values (<unidirectional association>)
	  b parent class_ref 1115138 // Values
      end

      classrelation 3606402 // descendingMap (<unidirectional association>)
	relation 3606402 --->
	  a role_name "descendingMap" private
	    comment " Lazily initialized descending key set 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	    classrelation_ref 3606402 // descendingMap (<unidirectional association>)
	  b parent class_ref 1114498 // ConcurrentNavigableMap
      end

      operation 9105410 "initialize"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes or resets state. Needed by constructors, clone,
clear, readObject. and ConcurrentSkipListSet.clone.
(Note that comparator must be separately initialized.)
"
      end

      operation 9105538 "casHead"
	cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 1114754 // HeadIndex
	  param inout name "val" type class_ref 1114754 // HeadIndex
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "compareAndSet head node
"
      end

      class 1115266 "Node"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2123394 "key"
	  const_attribute package explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3606530 // value (<unidirectional association>)
	  relation 3606530 --->
	    a role_name "value" volatile package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3606530 // value (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	classrelation 3606658 // next (<unidirectional association>)
	  relation 3606658 --->
	    a role_name "next" volatile package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3606658 // next (<unidirectional association>)
	    b parent class_ref 1115266 // Node
	end

	operation 9105666 "Node"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "key" explicit_type "K"
	    param inout name "value" type class_ref 129538 // Object
	    param inout name "next" type class_ref 1115266 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<K,V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a new regular node.
"
	end

	operation 9105794 "Node"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "next" type class_ref 1115266 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a new marker node. A marker is distinguished by
having its value field point to itself.  Marker nodes also
have null keys, a fact that is exploited in a few places,
but this doesn't distinguish markers from the base-level
header node (head.node), which also has a null key.
"
	end

	operation 9105922 "casValue"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 129538 // Object
	    param inout name "val" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "compareAndSet value field
"
	end

	operation 9106050 "casNext"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 1115266 // Node
	    param inout name "val" type class_ref 1115266 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "compareAndSet next field
"
	end

	operation 9106178 "isMarker"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this node is a marker. This method isn't
actually called in any current code checking for markers
because callers will have already read value field and need
to use that read (not another done here) and so directly
test if value points to node.

@return true if this node is a marker node
"
	end

	operation 9106306 "isBaseHeader"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this node is the header of base-level list.
@return true if this node is header node
"
	end

	operation 9106434 "appendMarker"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 1
	    param inout name "f" type class_ref 1115266 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to append a deletion marker to this node.
@param f the assumed current successor of this node
@return true if successful
"
	end

	operation 9106562 "helpDelete"
	  cpp_inline package explicit_return_type "void"
	  nparams 2
	    param inout name "b" type class_ref 1115266 // Node
	    param inout name "f" type class_ref 1115266 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Helps out a deletion by appending marker or unlinking from
predecessor. This is called during traversals when value
field seen to be null.
@param b predecessor
@param f successor
"
	end

	operation 9106690 "getValidValue"
	  cpp_inline package explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns value if this node contains a valid key-value pair,
else null.
@return this node's value if it isn't a marker or header or
is deleted, else null
"
	end

	operation 9106818 "createSnapshot"
	  cpp_inline package return_type class_ref 193026 // SimpleImmutableEntry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates and returns a new SimpleImmutableEntry holding current
mapping if this node holds a valid value, else null.
@return new entry or null
"
	end

	attribute 2123522 "UNSAFE"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " UNSAFE mechanics
"
	end

	attribute 2123650 "valueOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2123778 "nextOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 173954 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = Node.class;
                valueOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"value\"));
                nextOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"next\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      class 1115394 "Index"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3606786 // node (<unidirectional association>)
	  relation 3606786 --->
	    a role_name "node" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3606786 // node (<unidirectional association>)
	    b parent class_ref 1115266 // Node
	end

	classrelation 3606914 // down (<unidirectional association>)
	  relation 3606914 --->
	    a role_name "down" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3606914 // down (<unidirectional association>)
	    b parent class_ref 1115394 // Index
	end

	classrelation 3607042 // right (<unidirectional association>)
	  relation 3607042 --->
	    a role_name "right" volatile package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3607042 // right (<unidirectional association>)
	    b parent class_ref 1115394 // Index
	end

	operation 9106946 "Index"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "node" type class_ref 1115266 // Node
	    param inout name "down" type class_ref 1115394 // Index
	    param inout name "right" type class_ref 1115394 // Index
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}, ${t2}<K,V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates index node with given values.
"
	end

	operation 9107074 "casRight"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 1115394 // Index
	    param inout name "val" type class_ref 1115394 // Index
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "compareAndSet right field
"
	end

	operation 9107202 "indexesDeletedNode"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the node this indexes has been deleted.
@return true if indexed node is known to be deleted
"
	end

	operation 9107330 "link"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "succ" type class_ref 1115394 // Index
	    param inout name "newSucc" type class_ref 1115394 // Index
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to CAS newSucc as successor.  To minimize races with
unlink that may lose this index node, if the node being
indexed is known to be deleted, it doesn't try to link in.
@param succ the expected current successor
@param newSucc the new successor
@return true if successful
"
	end

	operation 9107458 "unlink"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 1
	    param inout name "succ" type class_ref 1115394 // Index
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to CAS right field to skip over apparent successor
succ.  Fails (forcing a retraversal by caller) if this node
is known to be deleted.
@param succ the expected current successor
@return true if successful
"
	end

	attribute 2123906 "UNSAFE"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Unsafe mechanics
"
	end

	attribute 2124034 "rightOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 174082 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = Index.class;
                rightOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"right\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      operation 9107714 "cpr"
	class_operation cpp_inline package explicit_return_type "int"
	nparams 3
	  param inout name "c" type class_ref 184962 // Comparator
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "y" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings({\"unchecked\", \"rawtypes\"})
"
	
	
	
	comment " ---------------- Comparison utilities -------------- 

Compares using comparator or natural ordering if null.
Called only by methods that have performed required type checks.
"
      end

      operation 9107842 "findPredecessor"
	cpp_inline private return_type class_ref 1115266 // Node
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "cmp" type class_ref 184962 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1}<? super K> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Traversal -------------- 

Returns a base-level node with key strictly less than given key,
or the base-level header if there is no such node.  Also
unlinks indexes to deleted nodes found along the way.  Callers
rely on this side-effect of clearing indices to deleted nodes.
@param key the key
@return a predecessor of key
"
      end

      operation 9107970 "findNode"
	cpp_inline private return_type class_ref 1115266 // Node
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns node holding key or null if no such, clearing out any
deleted nodes seen along the way.  Repeatedly traverses at
base-level looking for key starting at predecessor returned
from findPredecessor, processing base-level deletions as
encountered. Some callers rely on this side-effect of clearing
deleted nodes.

Restarts occur, at traversal step centered on node n, if:

  (1) After reading n's next field, n is no longer assumed
      predecessor b's current successor, which means that
      we don't have a consistent 3-node snapshot and so cannot
      unlink any subsequent deleted nodes encountered.

  (2) n's value field is null, indicating n is deleted, in
      which case we help out an ongoing structural deletion
      before retrying.  Even though there are cases where such
      unlinking doesn't require restart, they aren't sorted out
      here because doing so would not usually outweigh cost of
      restarting.

  (3) n is a marker or n's predecessor's value field is null,
      indicating (among other possibilities) that
      findPredecessor returned a deleted node. We can't unlink
      the node because we don't know its predecessor, so rely
      on another call to findPredecessor to notice and return
      some earlier predecessor, which it will do. This check is
      only strictly needed at beginning of loop, (and the
      b.value check isn't strictly needed at all) but is done
      each iteration to help avoid contention with other
      threads by callers that will fail to be able to change
      links, and so will retry anyway.

The traversal loops in doPut, doRemove, and findNear all
include the same three kinds of checks. And specialized
versions appear in findFirst, and findLast and their
variants. They can't easily share code because each uses the
reads of fields held in locals occurring in the orders they
were performed.

@param key the key
@return node holding key, or null if no such
"
      end

      operation 9108098 "doGet"
	cpp_inline private explicit_return_type "V"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets value for key. Almost the same as findNode, but returns
the found value (to avoid retries during re-reads)

@param key the key
@return the value, or null if absent
"
      end

      operation 9108226 "doPut"
	cpp_inline private explicit_return_type "V"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	  param inout name "onlyIfAbsent" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Insertion -------------- 

Main insertion method.  Adds element if not present, or
replaces value if present and onlyIfAbsent is false.
@param key the key
@param value the value that must be associated with key
@param onlyIfAbsent if should not insert if already present
@return the old value, or null if newly inserted
"
      end

      operation 9108354 "doRemove"
	cpp_inline package explicit_return_type "V"
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Deletion -------------- 

Main deletion method. Locates node, nulls value, appends a
deletion marker, unlinks predecessor, removes associated index
nodes, and possibly reduces head index level.

Index nodes are cleared out simply by calling findPredecessor.
which unlinks indexes to deleted nodes found along path to key,
which will include the indexes to this node.  This is done
unconditionally. We can't check beforehand whether there are
index nodes because it might be the case that some or all
indexes hadn't been inserted yet for this node during initial
search for it, and we'd like to ensure lack of garbage
retention, so must call to be sure.

@param key the key
@param value if non-null, the value that must be
associated with key
@return the node, or null if not found
"
      end

      operation 9108482 "tryReduceLevel"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Possibly reduce head level if it has no nodes.  This method can
(rarely) make mistakes, in which case levels can disappear even
though they are about to contain index nodes. This impacts
performance, not correctness.  To minimize mistakes as well as
to reduce hysteresis, the level is reduced by one only if the
topmost three levels look empty. Also, if the removed level
looks non-empty after CAS, we try to change it back quick
before anyone notices our mistake! (This trick works pretty
well because this method will practically never make mistakes
unless current thread stalls immediately before first CAS, in
which case it is very unlikely to stall again immediately
afterwards, so will recover.)

We put up with all this rather than just let levels grow
because otherwise, even a small map that has undergone a large
number of insertions and removals will have a lot of levels,
slowing down access more than would an occasional unwanted
reduction.
"
      end

      operation 9108610 "findFirst"
	cpp_inline package return_type class_ref 1115266 // Node
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Finding and removing first element -------------- 

Specialized variant of findNode to get first valid node.
@return first node or null if empty
"
      end

      operation 9108738 "doRemoveFirstEntry"
	cpp_inline private return_type class_ref 192386 // Entry
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes first entry; returns its snapshot.
@return null if empty, else snapshot of first entry
"
      end

      operation 9108866 "clearIndexToFirst"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears out index nodes associated with deleted first entry.
"
      end

      operation 9108994 "doRemoveLastEntry"
	cpp_inline private return_type class_ref 192386 // Entry
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes last entry; returns its snapshot.
Specialized variant of doRemove.
@return null if empty, else snapshot of last entry
"
      end

      operation 9109122 "findLast"
	cpp_inline package return_type class_ref 1115266 // Node
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Finding and removing last element -------------- 

Specialized version of find to get last valid node.
@return last node or null if empty
"
      end

      operation 9109250 "findPredecessorOfLast"
	cpp_inline private return_type class_ref 1115266 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specialized variant of findPredecessor to get predecessor of last
valid node.  Needed when removing the last entry.  It is possible
that all successors of returned node will have been deleted upon
return, in which case this method can be retried.
@return likely predecessor of last node
"
      end

      attribute 2124290 "EQ"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ---------------- Relational operations -------------- 
 Control values OR'ed as arguments to findNear
"
      end

      attribute 2124418 "LT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2124546 "GT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actually checked as !LT"
      end

      operation 9109378 "findNear"
	cpp_inline package return_type class_ref 1115266 // Node
	nparams 3
	  param inout name "key" explicit_type "K"
	  param in name "rel" explicit_type "int"
	  param inout name "cmp" type class_ref 184962 // Comparator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? super K> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility for ceiling, floor, lower, higher methods.
@param key the key
@param rel the relation -- OR'ed combination of EQ, LT, GT
@return nearest node fitting relation, or null if no such
"
      end

      operation 9109506 "getNear"
	cpp_inline package return_type class_ref 193026 // SimpleImmutableEntry
	nparams 2
	  param inout name "key" explicit_type "K"
	  param in name "rel" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns SimpleImmutableEntry for results of findNear.
@param key the key
@param rel the relation -- OR'ed combination of EQ, LT, GT
@return Entry fitting relation, or null if no such
"
      end

      operation 9109634 "ConcurrentSkipListMap"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Constructors -------------- 

Constructs a new, empty map, sorted according to the
{@linkplain Comparable natural ordering} of the keys.
"
      end

      operation 9109762 "ConcurrentSkipListMap"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty map, sorted according to the specified
comparator.

@param comparator the comparator that will be used to order this map.
       If {@code null}, the {@linkplain Comparable natural
       ordering} of the keys will be used.
"
      end

      operation 9109890 "ConcurrentSkipListMap"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new map containing the same mappings as the given map,
sorted according to the {@linkplain Comparable natural ordering} of
the keys.

@param  m the map whose mappings are to be placed in this map
@throws ClassCastException if the keys in {@code m} are not
        {@link Comparable}, or are not mutually comparable
@throws NullPointerException if the specified map or any of its keys
        or values are null
"
      end

      operation 9110018 "ConcurrentSkipListMap"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 500354 // SortedMap
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new map containing the same mappings and using the
same ordering as the specified sorted map.

@param m the sorted map whose mappings are to be placed in this
       map, and whose comparator is to be used to sort this map
@throws NullPointerException if the specified sorted map or any of
        its keys or values are null
"
      end

      operation 9110146 "clone"
	cpp_inline public return_type class_ref 1114626 // ConcurrentSkipListMap
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this {@code ConcurrentSkipListMap}
instance. (The keys and values themselves are not cloned.)

@return a shallow copy of this map
"
      end

      operation 9110274 "buildFromSorted"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "map" type class_ref 500354 // SortedMap
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Streamlined bulk insertion to initialize from elements of
given sorted map.  Call only from constructor or clone
method.
"
      end

      operation 9110402 "writeObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Serialization -------------- 

Saves this map to a stream (that is, serializes it).

@param s the stream
@throws java.io.IOException if an I/O error occurs
@serialData The key (Object) and value (Object) for each
key-value mapping represented by the map, followed by
{@code null}. The key-value mappings are emitted in key-order
(as determined by the Comparator, or by the keys' natural
ordering if no Comparator).
"
      end

      operation 9110530 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Reconstitutes this map from a stream (that is, deserializes it).
@param s the stream
@throws ClassNotFoundException if the class of a serialized object
        could not be found
@throws java.io.IOException if an I/O error occurs
"
      end

      operation 9110658 "containsKey"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------ Map API methods ------ 

Returns {@code true} if this map contains a mapping for the specified
key.

@param key key whose presence in this map is to be tested
@return {@code true} if this map contains a mapping for the specified key
@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key is null
"
      end

      operation 9110786 "get"
	cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which the specified key is mapped,
or {@code null} if this map contains no mapping for the key.

<p>More formally, if this map contains a mapping from a key
{@code k} to a value {@code v} such that {@code key} compares
equal to {@code k} according to the map's ordering, then this
method returns {@code v}; otherwise it returns {@code null}.
(There can be at most one such mapping.)

@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key is null
"
      end

      operation 9110914 "getOrDefault"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "defaultValue" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which the specified key is mapped,
or the given defaultValue if this map contains no mapping for the key.

@param key the key
@param defaultValue the value to return if this map contains
no mapping for the given key
@return the mapping for the key, if present; else the defaultValue
@throws NullPointerException if the specified key is null
@since 1.8
"
      end

      operation 9111042 "put"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the specified value with the specified key in this map.
If the map previously contained a mapping for the key, the old
value is replaced.

@param key key with which the specified value is to be associated
@param value value to be associated with the specified key
@return the previous value associated with the specified key, or
        {@code null} if there was no mapping for the key
@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key or value is null
"
      end

      operation 9111170 "remove"
	cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for the specified key from this map if present.

@param  key key for which mapping should be removed
@return the previous value associated with the specified key, or
        {@code null} if there was no mapping for the key
@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key is null
"
      end

      operation 9111298 "containsValue"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this map maps one or more keys to the
specified value.  This operation requires time linear in the
map size. Additionally, it is possible for the map to change
during execution of this method, in which case the returned
result may be inaccurate.

@param value value whose presence in this map is to be tested
@return {@code true} if a mapping to {@code value} exists;
        {@code false} otherwise
@throws NullPointerException if the specified value is null
"
      end

      operation 9111426 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of key-value mappings in this map.  If this map
contains more than {@code Integer.MAX_VALUE} elements, it
returns {@code Integer.MAX_VALUE}.

<p>Beware that, unlike in most collections, this method is
<em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these maps, determining the current
number of elements requires traversing them all to count them.
Additionally, it is possible for the size to change during
execution of this method, in which case the returned result
will be inaccurate. Thus, this method is typically not very
useful in concurrent applications.

@return the number of elements in this map
"
      end

      operation 9111554 "isEmpty"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this map contains no key-value mappings.
@return {@code true} if this map contains no key-value mappings
"
      end

      operation 9111682 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the mappings from this map.
"
      end

      operation 9111810 "computeIfAbsent"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "mappingFunction" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the specified key is not already associated with a value,
attempts to compute its value using the given mapping function
and enters it into this map unless {@code null}.  The function
is <em>NOT</em> guaranteed to be applied once atomically only
if the value is not present.

@param key key with which the specified value is to be associated
@param mappingFunction the function to compute a value
@return the current (existing or computed) value associated with
        the specified key, or null if the computed value is null
@throws NullPointerException if the specified key is null
        or the mappingFunction is null
@since 1.8
"
      end

      operation 9111938 "computeIfPresent"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? super V, ? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the value for the specified key is present, attempts to
compute a new mapping given the key and its current mapped
value. The function is <em>NOT</em> guaranteed to be applied
once atomically.

@param key key with which a value may be associated
@param remappingFunction the function to compute a value
@return the new value associated with the specified key, or null if none
@throws NullPointerException if the specified key is null
        or the remappingFunction is null
@since 1.8
"
      end

      operation 9112066 "compute"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K, ? super V, ? extends V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to compute a mapping for the specified key and its
current mapped value (or {@code null} if there is no current
mapping). The function is <em>NOT</em> guaranteed to be applied
once atomically.

@param key key with which the specified value is to be associated
@param remappingFunction the function to compute a value
@return the new value associated with the specified key, or null if none
@throws NullPointerException if the specified key is null
        or the remappingFunction is null
@since 1.8
"
      end

      operation 9112194 "merge"
	cpp_inline public explicit_return_type "V"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? super V, ? super V, ? extends V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the specified key is not already associated with a value,
associates it with the given value.  Otherwise, replaces the
value with the results of the given remapping function, or
removes if {@code null}. The function is <em>NOT</em>
guaranteed to be applied once atomically.

@param key key with which the specified value is to be associated
@param value the value to use if absent
@param remappingFunction the function to recompute a value if present
@return the new value associated with the specified key, or null if none
@throws NullPointerException if the specified key or value is null
        or the remappingFunction is null
@since 1.8
"
      end

      operation 9112322 "keySet"
	cpp_inline public return_type class_ref 1073538 // NavigableSet
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- View methods -------------- 

Note: Lazy initialization works for views because view classes
are stateless/immutable so it doesn't matter wrt correctness if
more than one is created (which will only rarely happen).  Even
so, the following idiom conservatively ensures that the method
returns the one it created if it does so, not one created by
another racing thread.


Returns a {@link NavigableSet} view of the keys contained in this map.

<p>The set's iterator returns the keys in ascending order.
The set's spliterator additionally reports {@link Spliterator#CONCURRENT},
{@link Spliterator#NONNULL}, {@link Spliterator#SORTED} and
{@link Spliterator#ORDERED}, with an encounter order that is ascending
key order.  The spliterator's comparator (see
{@link java.util.Spliterator#getComparator()}) is {@code null} if
the map's comparator (see {@link #comparator()}) is {@code null}.
Otherwise, the spliterator's comparator is the same as or imposes the
same total ordering as the map's comparator.

<p>The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  The set supports element
removal, which removes the corresponding mapping from the map,
via the {@code Iterator.remove}, {@code Set.remove},
{@code removeAll}, {@code retainAll}, and {@code clear}
operations.  It does not support the {@code add} or {@code addAll}
operations.

<p>The view's iterators and spliterators are
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>This method is equivalent to method {@code navigableKeySet}.

@return a navigable set view of the keys in this map
"
      end

      operation 9112450 "navigableKeySet"
	cpp_inline public return_type class_ref 1073538 // NavigableSet
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9112578 "values"
	cpp_inline public return_type class_ref 184194 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Collection} view of the values contained in this map.
<p>The collection's iterator returns the values in ascending order
of the corresponding keys. The collections's spliterator additionally
reports {@link Spliterator#CONCURRENT}, {@link Spliterator#NONNULL} and
{@link Spliterator#ORDERED}, with an encounter order that is ascending
order of the corresponding keys.

<p>The collection is backed by the map, so changes to the map are
reflected in the collection, and vice-versa.  The collection
supports element removal, which removes the corresponding
mapping from the map, via the {@code Iterator.remove},
{@code Collection.remove}, {@code removeAll},
{@code retainAll} and {@code clear} operations.  It does not
support the {@code add} or {@code addAll} operations.

<p>The view's iterators and spliterators are
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.
"
      end

      operation 9112706 "entrySet"
	cpp_inline public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Set} view of the mappings contained in this map.

<p>The set's iterator returns the entries in ascending key order.  The
set's spliterator additionally reports {@link Spliterator#CONCURRENT},
{@link Spliterator#NONNULL}, {@link Spliterator#SORTED} and
{@link Spliterator#ORDERED}, with an encounter order that is ascending
key order.

<p>The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  The set supports element
removal, which removes the corresponding mapping from the map,
via the {@code Iterator.remove}, {@code Set.remove},
{@code removeAll}, {@code retainAll} and {@code clear}
operations.  It does not support the {@code add} or
{@code addAll} operations.

<p>The view's iterators and spliterators are
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>The {@code Map.Entry} elements traversed by the {@code iterator}
or {@code spliterator} do <em>not</em> support the {@code setValue}
operation.

@return a set view of the mappings contained in this map,
        sorted in ascending key order
"
      end

      operation 9112834 "descendingMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9112962 "descendingKeySet"
	cpp_inline public return_type class_ref 1073538 // NavigableSet
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9113090 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- AbstractMap Overrides -------------- 

Compares the specified object with this map for equality.
Returns {@code true} if the given object is also a map and the
two maps represent the same mappings.  More formally, two maps
{@code m1} and {@code m2} represent the same mappings if
{@code m1.entrySet().equals(m2.entrySet())}.  This
operation may return misleading results if either map is
concurrently modified during execution of this method.

@param o object to be compared for equality with this map
@return {@code true} if the specified object is equal to this map
"
      end

      operation 9113218 "putIfAbsent"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------ ConcurrentMap API methods ------ 

{@inheritDoc}

@return the previous value associated with the specified key,
        or {@code null} if there was no mapping for the key
@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key or value is null
"
      end

      operation 9113346 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key is null
"
      end

      operation 9113474 "replace"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "oldValue" explicit_type "V"
	  param inout name "newValue" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if any of the arguments are null
"
      end

      operation 9113602 "replace"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@return the previous value associated with the specified key,
        or {@code null} if there was no mapping for the key
@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key or value is null
"
      end

      operation 9113730 "comparator"
	cpp_inline public return_type class_ref 184962 // Comparator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------ SortedMap API methods ------ "
      end

      operation 9113858 "firstKey"
	cpp_inline public explicit_return_type "K"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9113986 "lastKey"
	cpp_inline public explicit_return_type "K"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9114114 "subMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 4
	  param inout name "fromKey" explicit_type "K"
	  param inout name "fromInclusive" explicit_type "boolean"
	  param inout name "toKey" explicit_type "K"
	  param inout name "toInclusive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromKey} or {@code toKey} is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9114242 "headMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 2
	  param inout name "toKey" explicit_type "K"
	  param inout name "inclusive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code toKey} is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9114370 "tailMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 2
	  param inout name "fromKey" explicit_type "K"
	  param inout name "inclusive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromKey} is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9114498 "subMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 2
	  param inout name "fromKey" explicit_type "K"
	  param inout name "toKey" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromKey} or {@code toKey} is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9114626 "headMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 1
	  param inout name "toKey" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code toKey} is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9114754 "tailMap"
	cpp_inline public return_type class_ref 1114498 // ConcurrentNavigableMap
	nparams 1
	  param inout name "fromKey" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromKey} is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9114882 "lowerEntry"
	cpp_inline public return_type class_ref 192386 // Entry
	nparams 1
	  param inout name "key" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Relational operations -------------- 

Returns a key-value mapping associated with the greatest key
strictly less than the given key, or {@code null} if there is
no such key. The returned entry does <em>not</em> support the
{@code Entry.setValue} method.

@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null
"
      end

      operation 9115010 "lowerKey"
	cpp_inline public explicit_return_type "K"
	nparams 1
	  param inout name "key" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null
"
      end

      operation 9115138 "floorEntry"
	cpp_inline public return_type class_ref 192386 // Entry
	nparams 1
	  param inout name "key" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a key-value mapping associated with the greatest key
less than or equal to the given key, or {@code null} if there
is no such key. The returned entry does <em>not</em> support
the {@code Entry.setValue} method.

@param key the key
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null
"
      end

      operation 9115266 "floorKey"
	cpp_inline public explicit_return_type "K"
	nparams 1
	  param inout name "key" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param key the key
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null
"
      end

      operation 9115394 "ceilingEntry"
	cpp_inline public return_type class_ref 192386 // Entry
	nparams 1
	  param inout name "key" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a key-value mapping associated with the least key
greater than or equal to the given key, or {@code null} if
there is no such entry. The returned entry does <em>not</em>
support the {@code Entry.setValue} method.

@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null
"
      end

      operation 9115522 "ceilingKey"
	cpp_inline public explicit_return_type "K"
	nparams 1
	  param inout name "key" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null
"
      end

      operation 9115650 "higherEntry"
	cpp_inline public return_type class_ref 192386 // Entry
	nparams 1
	  param inout name "key" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a key-value mapping associated with the least key
strictly greater than the given key, or {@code null} if there
is no such key. The returned entry does <em>not</em> support
the {@code Entry.setValue} method.

@param key the key
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null
"
      end

      operation 9115778 "higherKey"
	cpp_inline public explicit_return_type "K"
	nparams 1
	  param inout name "key" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param key the key
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null
"
      end

      operation 9115906 "firstEntry"
	cpp_inline public return_type class_ref 192386 // Entry
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a key-value mapping associated with the least
key in this map, or {@code null} if the map is empty.
The returned entry does <em>not</em> support
the {@code Entry.setValue} method.
"
      end

      operation 9116034 "lastEntry"
	cpp_inline public return_type class_ref 192386 // Entry
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a key-value mapping associated with the greatest
key in this map, or {@code null} if the map is empty.
The returned entry does <em>not</em> support
the {@code Entry.setValue} method.
"
      end

      operation 9116162 "pollFirstEntry"
	cpp_inline public return_type class_ref 192386 // Entry
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns a key-value mapping associated with
the least key in this map, or {@code null} if the map is empty.
The returned entry does <em>not</em> support
the {@code Entry.setValue} method.
"
      end

      operation 9116290 "pollLastEntry"
	cpp_inline public return_type class_ref 192386 // Entry
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns a key-value mapping associated with
the greatest key in this map, or {@code null} if the map is empty.
The returned entry does <em>not</em> support
the {@code Entry.setValue} method.
"
      end

      class 1115522 "Iter"
	abstract visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3607298 // <realization>
	  relation 3607298 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3607298 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	classrelation 3607426 // lastReturned (<unidirectional association>)
	  relation 3607426 --->
	    a role_name "lastReturned" package
	      comment " the last node returned by next() 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3607426 // lastReturned (<unidirectional association>)
	    b parent class_ref 1115266 // Node
	end

	classrelation 3607554 // next (<unidirectional association>)
	  relation 3607554 --->
	    a role_name "next" package
	      comment " the next node to return from next(); 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3607554 // next (<unidirectional association>)
	    b parent class_ref 1115266 // Node
	end

	attribute 2124674 "nextValue"
	  package explicit_type "V"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Cache of next value field to maintain weak consistency 
"
	end

	operation 9116418 "Iter"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Initializes ascending iterator for entire range. "
	end

	operation 9116546 "hasNext"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9116674 "advance"
	  cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Advances next to higher entry. "
	end

	operation 9116802 "remove"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1115650 "ValueIterator"
	visibility package 
	nactuals 3
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 0 explicit_value ""
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 1 explicit_value ""
	actual class class_ref 1115522 // Iter
	  rank 0 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3607682 // <realization>
	  relation 3607682 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3607682 // <realization>
	    b parent class_ref 1115522 // Iter
	end

	operation 9116930 "next"
	  cpp_inline public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1115778 "KeyIterator"
	visibility package 
	nactuals 3
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 0 explicit_value ""
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 1 explicit_value ""
	actual class class_ref 1115522 // Iter
	  rank 0 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3607810 // <realization>
	  relation 3607810 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3607810 // <realization>
	    b parent class_ref 1115522 // Iter
	end

	operation 9117058 "next"
	  cpp_inline public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1115906 "EntryIterator"
	visibility package 
	nactuals 3
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 0 explicit_value ""
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 1 explicit_value ""
	actual class class_ref 1115522 // Iter
	  rank 0 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3607938 // <realization>
	  relation 3607938 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3607938 // <realization>
	    b parent class_ref 1115522 // Iter
	end

	operation 9117186 "next"
	  cpp_inline public return_type class_ref 192386 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9117314 "keyIterator"
	cpp_inline package return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Factory methods for iterators needed by ConcurrentSkipListSet etc"
      end

      operation 9117442 "valueIterator"
	cpp_inline package return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9117570 "entryIterator"
	cpp_inline package return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9117698 "toList"
	class_operation cpp_inline package return_type class_ref 175362 // List
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- View Classes -------------- 

View classes are static, delegating to a ConcurrentNavigableMap
to allow use by SubMaps, which outweighs the ugliness of
needing type-tests for Iterator methods.
"
      end

      class 1116034 "SubMap"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 192130 // AbstractMap
	  rank 0 explicit_value ""
	actual class class_ref 192130 // AbstractMap
	  rank 1 explicit_value ""
	actual class class_ref 1114498 // ConcurrentNavigableMap
	  rank 0 explicit_value ""
	actual class class_ref 1114498 // ConcurrentNavigableMap
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3608962 // <realization>
	  relation 3608962 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3608962 // <realization>
	    b parent class_ref 192130 // AbstractMap
	end

	classrelation 3609090 // <realization>
	  relation 3609090 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3609090 // <realization>
	    b parent class_ref 1114498 // ConcurrentNavigableMap
	end

	classrelation 3609218 // <realization>
	  relation 3609218 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3609218 // <realization>
	    b parent class_ref 185858 // Cloneable
	end

	classrelation 3609346 // <realization>
	  relation 3609346 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3609346 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 2124802 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -7647078645895051609L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3609474 // m (<unidirectional association>)
	  relation 3609474 --->
	    a role_name "m" const_relation private
	      comment " Underlying map 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3609474 // m (<unidirectional association>)
	    b parent class_ref 1114626 // ConcurrentSkipListMap
	end

	attribute 2124930 "lo"
	  const_attribute private explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " lower bound key, or null if from start 
"
	end

	attribute 2125058 "hi"
	  const_attribute private explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " upper bound key, or null if to end 
"
	end

	attribute 2125186 "loInclusive"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " inclusion flag for lo 
"
	end

	attribute 2125314 "hiInclusive"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " inclusion flag for hi 
"
	end

	attribute 2125442 "isDescending"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " direction 
"
	end

	classrelation 3609602 // keySetView (<unidirectional association>)
	  relation 3609602 --->
	    a role_name "keySetView" private
	      comment " Lazily initialized view holders
"
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K> ${name}${value};
"
	      classrelation_ref 3609602 // keySetView (<unidirectional association>)
	    b parent class_ref 1114882 // KeySet
	end

	classrelation 3609730 // entrySetView (<unidirectional association>)
	  relation 3609730 --->
	    a role_name "entrySetView" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	      classrelation_ref 3609730 // entrySetView (<unidirectional association>)
	    b parent class_ref 192258 // Set
	end

	classrelation 3609858 // valuesView (<unidirectional association>)
	  relation 3609858 --->
	    a role_name "valuesView" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 3609858 // valuesView (<unidirectional association>)
	    b parent class_ref 184194 // Collection
	end

	operation 9123970 "SubMap"
	  cpp_inline package explicit_return_type ""
	  nparams 6
	    param inout name "map" type class_ref 1114626 // ConcurrentSkipListMap
	    param inout name "fromKey" explicit_type "K"
	    param inout name "fromInclusive" explicit_type "boolean"
	    param inout name "toKey" explicit_type "K"
	    param inout name "toInclusive" explicit_type "boolean"
	    param inout name "isDescending" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a new submap, initializing all fields.
"
	end

	operation 9124098 "tooLow"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "key" type class_ref 129538 // Object
	    param inout name "cmp" type class_ref 184962 // Comparator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------  Utilities -------------- "
	end

	operation 9124226 "tooHigh"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "key" type class_ref 129538 // Object
	    param inout name "cmp" type class_ref 184962 // Comparator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9124354 "inBounds"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "key" type class_ref 129538 // Object
	    param inout name "cmp" type class_ref 184962 // Comparator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9124482 "checkKeyBounds"
	  cpp_inline package explicit_return_type "void"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "cmp" type class_ref 184962 // Comparator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super K> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9124610 "isBeforeEnd"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "n" type class_ref 1115266 // Node
	    param inout name "cmp" type class_ref 184962 // Comparator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}, ${t1}<? super K> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if node key is less than upper bound of range.
"
	end

	operation 9124738 "loNode"
	  cpp_inline package return_type class_ref 1115266 // Node
	  nparams 1
	    param inout name "cmp" type class_ref 184962 // Comparator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0}<? super K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns lowest node. This node might not be in range, so
most usages need to check bounds.
"
	end

	operation 9124866 "hiNode"
	  cpp_inline package return_type class_ref 1115266 // Node
	  nparams 1
	    param inout name "cmp" type class_ref 184962 // Comparator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0}<? super K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns highest node. This node might not be in range, so
most usages need to check bounds.
"
	end

	operation 9124994 "lowestKey"
	  cpp_inline package explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns lowest absolute key (ignoring directonality).
"
	end

	operation 9125122 "highestKey"
	  cpp_inline package explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns highest absolute key (ignoring directonality).
"
	end

	operation 9125250 "lowestEntry"
	  cpp_inline package return_type class_ref 192386 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9125378 "highestEntry"
	  cpp_inline package return_type class_ref 192386 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9125506 "removeLowest"
	  cpp_inline package return_type class_ref 192386 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9125634 "removeHighest"
	  cpp_inline package return_type class_ref 192386 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9125762 "getNearEntry"
	  cpp_inline package return_type class_ref 192386 // Entry
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param in name "rel" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Submap version of ConcurrentSkipListMap.getNearEntry
"
	end

	operation 9125890 "getNearKey"
	  cpp_inline package explicit_return_type "K"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param in name "rel" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Almost the same as getNearEntry, except for keys"
	end

	operation 9126018 "containsKey"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------  Map API methods -------------- "
	end

	operation 9126146 "get"
	  cpp_inline public explicit_return_type "V"
	  nparams 1
	    param inout name "key" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9126274 "put"
	  cpp_inline public explicit_return_type "V"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9126402 "remove"
	  cpp_inline public explicit_return_type "V"
	  nparams 1
	    param inout name "key" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9126530 "size"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9126658 "isEmpty"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9126786 "containsValue"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "value" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9126914 "clear"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9127042 "putIfAbsent"
	  cpp_inline public explicit_return_type "V"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------  ConcurrentMap API methods -------------- "
	end

	operation 9127170 "remove"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 2
	    param inout name "key" type class_ref 129538 // Object
	    param inout name "value" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9127298 "replace"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 3
	    param inout name "key" explicit_type "K"
	    param inout name "oldValue" explicit_type "V"
	    param inout name "newValue" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9127426 "replace"
	  cpp_inline public explicit_return_type "V"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9127554 "comparator"
	  cpp_inline public return_type class_ref 184962 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------  SortedMap API methods -------------- "
	end

	operation 9127682 "newSubMap"
	  cpp_inline package return_type class_ref 1116034 // SubMap
	  nparams 4
	    param inout name "fromKey" explicit_type "K"
	    param inout name "fromInclusive" explicit_type "boolean"
	    param inout name "toKey" explicit_type "K"
	    param inout name "toInclusive" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Utility to create submaps, where given bounds override
unbounded(null) ones and/or are checked against bounded ones.
"
	end

	operation 9127810 "subMap"
	  cpp_inline public return_type class_ref 1116034 // SubMap
	  nparams 4
	    param inout name "fromKey" explicit_type "K"
	    param inout name "fromInclusive" explicit_type "boolean"
	    param inout name "toKey" explicit_type "K"
	    param inout name "toInclusive" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9127938 "headMap"
	  cpp_inline public return_type class_ref 1116034 // SubMap
	  nparams 2
	    param inout name "toKey" explicit_type "K"
	    param inout name "inclusive" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9128066 "tailMap"
	  cpp_inline public return_type class_ref 1116034 // SubMap
	  nparams 2
	    param inout name "fromKey" explicit_type "K"
	    param inout name "inclusive" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9128194 "subMap"
	  cpp_inline public return_type class_ref 1116034 // SubMap
	  nparams 2
	    param inout name "fromKey" explicit_type "K"
	    param inout name "toKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9128322 "headMap"
	  cpp_inline public return_type class_ref 1116034 // SubMap
	  nparams 1
	    param inout name "toKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9128450 "tailMap"
	  cpp_inline public return_type class_ref 1116034 // SubMap
	  nparams 1
	    param inout name "fromKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9128578 "descendingMap"
	  cpp_inline public return_type class_ref 1116034 // SubMap
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9128706 "ceilingEntry"
	  cpp_inline public return_type class_ref 192386 // Entry
	  nparams 1
	    param inout name "key" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------  Relational methods -------------- "
	end

	operation 9128834 "ceilingKey"
	  cpp_inline public explicit_return_type "K"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9128962 "lowerEntry"
	  cpp_inline public return_type class_ref 192386 // Entry
	  nparams 1
	    param inout name "key" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9129090 "lowerKey"
	  cpp_inline public explicit_return_type "K"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9129218 "floorEntry"
	  cpp_inline public return_type class_ref 192386 // Entry
	  nparams 1
	    param inout name "key" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9129346 "floorKey"
	  cpp_inline public explicit_return_type "K"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9129474 "higherEntry"
	  cpp_inline public return_type class_ref 192386 // Entry
	  nparams 1
	    param inout name "key" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9129602 "higherKey"
	  cpp_inline public explicit_return_type "K"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9129730 "firstKey"
	  cpp_inline public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9129858 "lastKey"
	  cpp_inline public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9129986 "firstEntry"
	  cpp_inline public return_type class_ref 192386 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9130114 "lastEntry"
	  cpp_inline public return_type class_ref 192386 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9130242 "pollFirstEntry"
	  cpp_inline public return_type class_ref 192386 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9130370 "pollLastEntry"
	  cpp_inline public return_type class_ref 192386 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9130498 "keySet"
	  cpp_inline public return_type class_ref 1073538 // NavigableSet
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ---------------- Submap Views -------------- "
	end

	operation 9130626 "navigableKeySet"
	  cpp_inline public return_type class_ref 1073538 // NavigableSet
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9130754 "values"
	  cpp_inline public return_type class_ref 184194 // Collection
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9130882 "entrySet"
	  cpp_inline public return_type class_ref 192258 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9131010 "descendingKeySet"
	  cpp_inline public return_type class_ref 1073538 // NavigableSet
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9131138 "keyIterator"
	  cpp_inline package return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9131266 "valueIterator"
	  cpp_inline package return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9131394 "entryIterator"
	  cpp_inline package return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	class 1116162 "SubMapIter"
	  abstract visibility package 
	  nformals 1
	  formal name "T" type "" explicit_default_value ""
	    explicit_extends ""
	  nactuals 2
	  actual class class_ref 132994 // Iterator
	    rank 0 explicit_value ""
	  actual class class_ref 184450 // Spliterator
	    rank 0 explicit_value ""
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3609986 // <realization>
	    relation 3609986 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 3609986 // <realization>
	      b parent class_ref 132994 // Iterator
	  end

	  classrelation 3610114 // <realization>
	    relation 3610114 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 3610114 // <realization>
	      b parent class_ref 184450 // Spliterator
	  end

	  classrelation 3610242 // lastReturned (<unidirectional association>)
	    relation 3610242 --->
	      a role_name "lastReturned" package
		comment " the last node returned by next() 
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
		classrelation_ref 3610242 // lastReturned (<unidirectional association>)
	      b parent class_ref 1115266 // Node
	  end

	  classrelation 3610370 // next (<unidirectional association>)
	    relation 3610370 --->
	      a role_name "next" package
		comment " the next node to return from next(); 
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
		classrelation_ref 3610370 // next (<unidirectional association>)
	      b parent class_ref 1115266 // Node
	  end

	  attribute 2125570 "nextValue"
	    package explicit_type "V"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	    comment " Cache of next value field to maintain weak consistency 
"
	  end

	  operation 9131522 "SubMapIter"
	    cpp_inline package explicit_return_type ""
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9131650 "hasNext"
	    cpp_inline public explicit_return_type "boolean"
	    nparams 0
	    
	    preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9131778 "advance"
	    cpp_inline package explicit_return_type "void"
	    nparams 0
	    
	    preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9131906 "ascend"
	    cpp_inline private explicit_return_type "void"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9132034 "descend"
	    cpp_inline private explicit_return_type "void"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9132162 "remove"
	    cpp_inline public explicit_return_type "void"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9132290 "trySplit"
	    cpp_inline public return_type class_ref 184450 // Spliterator
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9132418 "tryAdvance"
	    cpp_inline public explicit_return_type "boolean"
	    nparams 1
	      param inout name "action" type class_ref 163458 // Consumer
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9132546 "forEachRemaining"
	    cpp_inline public explicit_return_type "void"
	    nparams 1
	      param inout name "action" type class_ref 163458 // Consumer
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9132674 "estimateSize"
	    cpp_inline public explicit_return_type "long"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	class 1116290 "SubMapValueIterator"
	  visibility package 
	  nactuals 5
	  actual class class_ref 1114626 // ConcurrentSkipListMap
	    rank 0 explicit_value ""
	  actual class class_ref 1114626 // ConcurrentSkipListMap
	    rank 1 explicit_value ""
	  actual class class_ref 1116034 // SubMap
	    rank 0 explicit_value ""
	  actual class class_ref 1116034 // SubMap
	    rank 1 explicit_value ""
	  actual class class_ref 1116162 // SubMapIter
	    rank 0 explicit_value ""
	  cpp_decl ""
	  final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3610498 // <realization>
	    relation 3610498 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 3610498 // <realization>
	      b parent class_ref 1116162 // SubMapIter
	  end

	  operation 9132802 "next"
	    cpp_inline public explicit_return_type "V"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9132930 "characteristics"
	    cpp_inline public explicit_return_type "int"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	class 1116418 "SubMapKeyIterator"
	  visibility package 
	  nactuals 5
	  actual class class_ref 1114626 // ConcurrentSkipListMap
	    rank 0 explicit_value ""
	  actual class class_ref 1114626 // ConcurrentSkipListMap
	    rank 1 explicit_value ""
	  actual class class_ref 1116034 // SubMap
	    rank 0 explicit_value ""
	  actual class class_ref 1116034 // SubMap
	    rank 1 explicit_value ""
	  actual class class_ref 1116162 // SubMapIter
	    rank 0 explicit_value ""
	  cpp_decl ""
	  final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3610626 // <realization>
	    relation 3610626 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 3610626 // <realization>
	      b parent class_ref 1116162 // SubMapIter
	  end

	  operation 9133058 "next"
	    cpp_inline public explicit_return_type "K"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9133186 "characteristics"
	    cpp_inline public explicit_return_type "int"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9133314 "getComparator"
	    cpp_inline public return_type class_ref 184962 // Comparator
	    nparams 0
	    
	    preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	class 1116546 "SubMapEntryIterator"
	  visibility package 
	  nactuals 5
	  actual class class_ref 1114626 // ConcurrentSkipListMap
	    rank 0 explicit_value ""
	  actual class class_ref 1114626 // ConcurrentSkipListMap
	    rank 1 explicit_value ""
	  actual class class_ref 1116034 // SubMap
	    rank 0 explicit_value ""
	  actual class class_ref 1116034 // SubMap
	    rank 1 explicit_value ""
	  actual class class_ref 1116162 // SubMapIter
	    rank 0 explicit_value ""
	  cpp_decl ""
	  final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3610754 // <realization>
	    relation 3610754 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 3610754 // <realization>
	      b parent class_ref 1116162 // SubMapIter
	  end

	  operation 9133442 "next"
	    cpp_inline public return_type class_ref 192386 // Entry
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9133570 "characteristics"
	    cpp_inline public explicit_return_type "int"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end
      end

      operation 9133698 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super K, ? super V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " default Map method overrides"
      end

      operation 9133826 "replaceAll"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "function" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super K, ? super V, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1116674 "CSLMSpliterator"
	abstract visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3610882 // comparator (<unidirectional association>)
	  relation 3610882 --->
	    a role_name "comparator" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K> ${name}${value};
"
	      classrelation_ref 3610882 // comparator (<unidirectional association>)
	    b parent class_ref 184962 // Comparator
	end

	attribute 2125698 "fence"
	  const_attribute package explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " exclusive upper bound for keys, or null if to end"
	end

	classrelation 3611010 // row (<unidirectional association>)
	  relation 3611010 --->
	    a role_name "row" package
	      comment " the level to split out"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3611010 // row (<unidirectional association>)
	    b parent class_ref 1115394 // Index
	end

	classrelation 3611138 // current (<unidirectional association>)
	  relation 3611138 --->
	    a role_name "current" package
	      comment " current traversal node; initialize at origin"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 3611138 // current (<unidirectional association>)
	    b parent class_ref 1115266 // Node
	end

	attribute 2125826 "est"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " pseudo-size estimate"
	end

	operation 9133954 "CSLMSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "comparator" type class_ref 184962 // Comparator
	    param inout name "row" type class_ref 1115394 // Index
	    param inout name "origin" type class_ref 1115266 // Node
	    param inout name "fence" explicit_type "K"
	    param in name "est" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super K> ${p0}, ${t1}<K,V> ${p1}, ${t2}<K,V> ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9134082 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1116802 "KeySpliterator"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 0 explicit_value ""
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 1 explicit_value ""
	actual class class_ref 1116674 // CSLMSpliterator
	  rank 0 explicit_value ""
	actual class class_ref 1116674 // CSLMSpliterator
	  rank 1 explicit_value ""
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3611266 // <realization>
	  relation 3611266 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3611266 // <realization>
	    b parent class_ref 1116674 // CSLMSpliterator
	end

	classrelation 3611394 // <realization>
	  relation 3611394 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3611394 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	operation 9134210 "KeySpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "comparator" type class_ref 184962 // Comparator
	    param inout name "row" type class_ref 1115394 // Index
	    param inout name "origin" type class_ref 1115266 // Node
	    param inout name "fence" explicit_type "K"
	    param in name "est" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super K> ${p0}, ${t1}<K,V> ${p1}, ${t2}<K,V> ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9134338 "trySplit"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9134466 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9134594 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9134722 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9134850 "getComparator"
	  cpp_inline public return_type class_ref 184962 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9134978 "keySpliterator"
	cpp_inline package return_type class_ref 1116802 // KeySpliterator
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " factory method for KeySpliterator"
      end

      class 1116930 "ValueSpliterator"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 0 explicit_value ""
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 1 explicit_value ""
	actual class class_ref 1116674 // CSLMSpliterator
	  rank 0 explicit_value ""
	actual class class_ref 1116674 // CSLMSpliterator
	  rank 1 explicit_value ""
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3611522 // <realization>
	  relation 3611522 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3611522 // <realization>
	    b parent class_ref 1116674 // CSLMSpliterator
	end

	classrelation 3611650 // <realization>
	  relation 3611650 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3611650 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	operation 9135106 "ValueSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "comparator" type class_ref 184962 // Comparator
	    param inout name "row" type class_ref 1115394 // Index
	    param inout name "origin" type class_ref 1115266 // Node
	    param inout name "fence" explicit_type "K"
	    param in name "est" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super K> ${p0}, ${t1}<K,V> ${p1}, ${t2}<K,V> ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9135234 "trySplit"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9135362 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9135490 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9135618 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9135746 "valueSpliterator"
	cpp_inline package return_type class_ref 1116930 // ValueSpliterator
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Almost the same as keySpliterator()"
      end

      class 1117058 "EntrySpliterator"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 0 explicit_value ""
	actual class class_ref 1114626 // ConcurrentSkipListMap
	  rank 1 explicit_value ""
	actual class class_ref 1116674 // CSLMSpliterator
	  rank 0 explicit_value ""
	actual class class_ref 1116674 // CSLMSpliterator
	  rank 1 explicit_value ""
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3611778 // <realization>
	  relation 3611778 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3611778 // <realization>
	    b parent class_ref 1116674 // CSLMSpliterator
	end

	classrelation 3611906 // <realization>
	  relation 3611906 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3611906 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	operation 9135874 "EntrySpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "comparator" type class_ref 184962 // Comparator
	    param inout name "row" type class_ref 1115394 // Index
	    param inout name "origin" type class_ref 1115266 // Node
	    param inout name "fence" explicit_type "K"
	    param in name "est" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super K> ${p0}, ${t1}<K,V> ${p1}, ${t2}<K,V> ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9136002 "trySplit"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9136130 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Map.Entry<K,V>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9136258 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Map.Entry<K,V>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9136386 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9136514 "getComparator"
	  cpp_inline public return_type class_ref 184962 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9136642 "entrySpliterator"
	cpp_inline package return_type class_ref 1117058 // EntrySpliterator
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Almost the same as keySpliterator()"
      end

      attribute 2125954 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2126082 "headOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2126210 "SECONDARY"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 174210 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = ConcurrentSkipListMap.class;
            headOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"head\"));
            Class<?> tk = Thread.class;
            SECONDARY = UNSAFE.objectFieldOffset
                (tk.getDeclaredField(\"threadLocalRandomSecondarySeed\"));

        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 1117186 "ConcurrentSkipListSet"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 255618 // AbstractSet
        rank 0 explicit_value ""
      actual class class_ref 1073538 // NavigableSet
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A scalable concurrent {@link NavigableSet} implementation based on
a {@link ConcurrentSkipListMap}.  The elements of the set are kept
sorted according to their {@linkplain Comparable natural ordering},
or by a {@link Comparator} provided at set creation time, depending
on which constructor is used.

<p>This implementation provides expected average <i>log(n)</i> time
cost for the {@code contains}, {@code add}, and {@code remove}
operations and their variants.  Insertion, removal, and access
operations safely execute concurrently by multiple threads.

<p>Iterators and spliterators are
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>Ascending ordered views and their iterators are faster than
descending ones.

<p>Beware that, unlike in most collections, the {@code size}
method is <em>not</em> a constant-time operation. Because of the
asynchronous nature of these sets, determining the current number
of elements requires a traversal of the elements, and so may report
inaccurate results if this collection is modified during traversal.
Additionally, the bulk operations {@code addAll},
{@code removeAll}, {@code retainAll}, {@code containsAll},
{@code equals}, and {@code toArray} are <em>not</em> guaranteed
to be performed atomically. For example, an iterator operating
concurrently with an {@code addAll} operation might view only some
of the added elements.

<p>This class and its iterators implement all of the
<em>optional</em> methods of the {@link Set} and {@link Iterator}
interfaces. Like most other concurrent collection implementations,
this class does not permit the use of {@code null} elements,
because {@code null} arguments and return values cannot be reliably
distinguished from the absence of elements.

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@author Doug Lea
@param <E> the type of elements maintained by this set
@since 1.6
"
      classrelation 3612034 // <realization>
	relation 3612034 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3612034 // <realization>
	  b parent class_ref 255618 // AbstractSet
      end

      classrelation 3612162 // <realization>
	relation 3612162 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3612162 // <realization>
	  b parent class_ref 1073538 // NavigableSet
      end

      classrelation 3612290 // <realization>
	relation 3612290 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3612290 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3612418 // <realization>
	relation 3612418 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3612418 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2126338 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2479143111061671589L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3612546 // m (<unidirectional association>)
	relation 3612546 --->
	  a role_name "m" const_relation private
	    comment "
The underlying map. Uses Boolean.TRUE as value for each
element.  This field is declared final for the sake of thread
safety, which entails some ugliness in clone().

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E,Object> ${name}${value};
"
	    classrelation_ref 3612546 // m (<unidirectional association>)
	  b parent class_ref 1114498 // ConcurrentNavigableMap
      end

      operation 9136770 "ConcurrentSkipListSet"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty set that orders its elements according to
their {@linkplain Comparable natural ordering}.
"
      end

      operation 9136898 "ConcurrentSkipListSet"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty set that orders its elements according to
the specified comparator.

@param comparator the comparator that will be used to order this set.
       If {@code null}, the {@linkplain Comparable natural
       ordering} of the elements will be used.
"
      end

      operation 9137026 "ConcurrentSkipListSet"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new set containing the elements in the specified
collection, that orders its elements according to their
{@linkplain Comparable natural ordering}.

@param c The elements that will comprise the new set
@throws ClassCastException if the elements in {@code c} are
        not {@link Comparable}, or are not mutually comparable
@throws NullPointerException if the specified collection or any
        of its elements are null
"
      end

      operation 9137154 "ConcurrentSkipListSet"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 511874 // SortedSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new set containing the same elements and using the
same ordering as the specified sorted set.

@param s sorted set whose elements will comprise the new set
@throws NullPointerException if the specified sorted set or any
        of its elements are null
"
      end

      operation 9137282 "ConcurrentSkipListSet"
	cpp_inline package explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 1114498 // ConcurrentNavigableMap
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E,Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For use by submaps
"
      end

      operation 9137410 "clone"
	cpp_inline public return_type class_ref 1117186 // ConcurrentSkipListSet
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this {@code ConcurrentSkipListSet}
instance. (The elements themselves are not cloned.)

@return a shallow copy of this set
"
      end

      operation 9137538 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Set operations -------------- 

Returns the number of elements in this set.  If this set
contains more than {@code Integer.MAX_VALUE} elements, it
returns {@code Integer.MAX_VALUE}.

<p>Beware that, unlike in most collections, this method is
<em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these sets, determining the current
number of elements requires traversing them all to count them.
Additionally, it is possible for the size to change during
execution of this method, in which case the returned result
will be inaccurate. Thus, this method is typically not very
useful in concurrent applications.

@return the number of elements in this set
"
      end

      operation 9137666 "isEmpty"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this set contains no elements.
@return {@code true} if this set contains no elements
"
      end

      operation 9137794 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this set contains the specified element.
More formally, returns {@code true} if and only if this set
contains an element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this set
@return {@code true} if this set contains the specified element
@throws ClassCastException if the specified element cannot be
        compared with the elements currently in this set
@throws NullPointerException if the specified element is null
"
      end

      operation 9137922 "add"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this set if it is not already present.
More formally, adds the specified element {@code e} to this set if
the set contains no element {@code e2} such that {@code e.equals(e2)}.
If this set already contains the element, the call leaves the set
unchanged and returns {@code false}.

@param e element to be added to this set
@return {@code true} if this set did not already contain the
        specified element
@throws ClassCastException if {@code e} cannot be compared
        with the elements currently in this set
@throws NullPointerException if the specified element is null
"
      end

      operation 9138050 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified element from this set if it is present.
More formally, removes an element {@code e} such that
{@code o.equals(e)}, if this set contains such an element.
Returns {@code true} if this set contained the element (or
equivalently, if this set changed as a result of the call).
(This set will not contain the element once the call returns.)

@param o object to be removed from this set, if present
@return {@code true} if this set contained the specified element
@throws ClassCastException if {@code o} cannot be compared
        with the elements currently in this set
@throws NullPointerException if the specified element is null
"
      end

      operation 9138178 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this set.
"
      end

      operation 9138306 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this set in ascending order.

@return an iterator over the elements in this set in ascending order
"
      end

      operation 9138434 "descendingIterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this set in descending order.

@return an iterator over the elements in this set in descending order
"
      end

      operation 9138562 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- AbstractSet Overrides -------------- 

Compares the specified object with this set for equality.  Returns
{@code true} if the specified object is also a set, the two sets
have the same size, and every member of the specified set is
contained in this set (or equivalently, every member of this set is
contained in the specified set).  This definition ensures that the
equals method works properly across different implementations of the
set interface.

@param o the object to be compared for equality with this set
@return {@code true} if the specified object is equal to this set
"
      end

      operation 9138690 "removeAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this set all of its elements that are contained in
the specified collection.  If the specified collection is also
a set, this operation effectively modifies this set so that its
value is the <i>asymmetric set difference</i> of the two sets.

@param  c collection containing elements to be removed from this set
@return {@code true} if this set changed as a result of the call
@throws ClassCastException if the types of one or more elements in this
        set are incompatible with the specified collection
@throws NullPointerException if the specified collection or any
        of its elements are null
"
      end

      operation 9138818 "lower"
	cpp_inline public explicit_return_type "E"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Relational operations -------------- 

@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
"
      end

      operation 9138946 "floor"
	cpp_inline public explicit_return_type "E"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
"
      end

      operation 9139074 "ceiling"
	cpp_inline public explicit_return_type "E"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
"
      end

      operation 9139202 "higher"
	cpp_inline public explicit_return_type "E"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
"
      end

      operation 9139330 "pollFirst"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9139458 "pollLast"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9139586 "comparator"
	cpp_inline public return_type class_ref 184962 // Comparator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- SortedSet operations -------------- "
      end

      operation 9139714 "first"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws java.util.NoSuchElementException {@inheritDoc}
"
      end

      operation 9139842 "last"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws java.util.NoSuchElementException {@inheritDoc}
"
      end

      operation 9139970 "subSet"
	cpp_inline public return_type class_ref 1073538 // NavigableSet
	nparams 4
	  param inout name "fromElement" explicit_type "E"
	  param inout name "fromInclusive" explicit_type "boolean"
	  param inout name "toElement" explicit_type "E"
	  param inout name "toInclusive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromElement} or
        {@code toElement} is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9140098 "headSet"
	cpp_inline public return_type class_ref 1073538 // NavigableSet
	nparams 2
	  param inout name "toElement" explicit_type "E"
	  param inout name "inclusive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code toElement} is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9140226 "tailSet"
	cpp_inline public return_type class_ref 1073538 // NavigableSet
	nparams 2
	  param inout name "fromElement" explicit_type "E"
	  param inout name "inclusive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromElement} is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9140354 "subSet"
	cpp_inline public return_type class_ref 1073538 // NavigableSet
	nparams 2
	  param inout name "fromElement" explicit_type "E"
	  param inout name "toElement" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromElement} or
        {@code toElement} is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9140482 "headSet"
	cpp_inline public return_type class_ref 1073538 // NavigableSet
	nparams 1
	  param inout name "toElement" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code toElement} is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9140610 "tailSet"
	cpp_inline public return_type class_ref 1073538 // NavigableSet
	nparams 1
	  param inout name "fromElement" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromElement} is null
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9140738 "descendingSet"
	cpp_inline public return_type class_ref 1073538 // NavigableSet
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reverse order view of the elements contained in this set.
The descending set is backed by this set, so changes to the set are
reflected in the descending set, and vice-versa.

<p>The returned set has an ordering equivalent to
{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}{@code (comparator())}.
The expression {@code s.descendingSet().descendingSet()} returns a
view of {@code s} essentially equivalent to {@code s}.

@return a reverse order view of this set
"
      end

      operation 9140866 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns a {@link Spliterator} over the elements in this set.

<p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},
{@link Spliterator#NONNULL}, {@link Spliterator#DISTINCT},
{@link Spliterator#SORTED} and {@link Spliterator#ORDERED}, with an
encounter order that is ascending order.  Overriding implementations
should document the reporting of additional characteristic values.

<p>The spliterator's comparator (see
{@link java.util.Spliterator#getComparator()}) is {@code null} if
the set's comparator (see {@link #comparator()}) is {@code null}.
Otherwise, the spliterator's comparator is the same as or imposes the
same total ordering as the set's comparator.

@return a {@code Spliterator} over the elements in this set
@since 1.8
"
      end

      operation 9140994 "setMap"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "map" type class_ref 1114498 // ConcurrentNavigableMap
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E,Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Support for resetting map in clone"
      end

      attribute 2126466 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2126594 "mapOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 174338 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = ConcurrentSkipListSet.class;
            mapOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"m\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 1117698 "CopyOnWriteArraySet"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 255618 // AbstractSet
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link java.util.Set} that uses an internal {@link CopyOnWriteArrayList}
for all of its operations.  Thus, it shares the same basic properties:
<ul>
 <li>It is best suited for applications in which set sizes generally
      stay small, read-only operations
      vastly outnumber mutative operations, and you need
      to prevent interference among threads during traversal.
 <li>It is thread-safe.
 <li>Mutative operations ({@code add}, {@code set}, {@code remove}, etc.)
     are expensive since they usually entail copying the entire underlying
     array.
 <li>Iterators do not support the mutative {@code remove} operation.
 <li>Traversal via iterators is fast and cannot encounter
     interference from other threads. Iterators rely on
     unchanging snapshots of the array at the time the iterators were
     constructed.
</ul>

<p><b>Sample Usage.</b> The following code sketch uses a
copy-on-write set to maintain a set of Handler objects that
perform some action upon state updates.

 <pre> {@code
class Handler { void handle(); ... }

class X {
  private final CopyOnWriteArraySet<Handler> handlers
    = new CopyOnWriteArraySet<Handler>();
  public void addHandler(Handler h) { handlers.add(h); }

  private long internalState;
  private synchronized void changeState() { internalState = ...; }

  public void update() {
    changeState();
    for (Handler handler : handlers)
      handler.handle();
  }
}}</pre>

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@see CopyOnWriteArrayList
@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 3614466 // <realization>
	relation 3614466 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3614466 // <realization>
	  b parent class_ref 255618 // AbstractSet
      end

      classrelation 3614594 // <realization>
	relation 3614594 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3614594 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2127746 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5457747651344034263L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3614722 // al (<unidirectional association>)
	relation 3614722 --->
	  a role_name "al" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 3614722 // al (<unidirectional association>)
	  b parent class_ref 589058 // CopyOnWriteArrayList
      end

      operation 9153026 "CopyOnWriteArraySet"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty set.
"
      end

      operation 9153154 "CopyOnWriteArraySet"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a set containing all of the elements of the specified
collection.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection is null
"
      end

      operation 9153282 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this set.

@return the number of elements in this set
"
      end

      operation 9153410 "isEmpty"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this set contains no elements.

@return {@code true} if this set contains no elements
"
      end

      operation 9153538 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this set contains the specified element.
More formally, returns {@code true} if and only if this set
contains an element {@code e} such that
<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.

@param o element whose presence in this set is to be tested
@return {@code true} if this set contains the specified element
"
      end

      operation 9153666 "toArray"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this set.
If this set makes any guarantees as to what order its elements
are returned by its iterator, this method must return the
elements in the same order.

<p>The returned array will be \"safe\" in that no references to it
are maintained by this set.  (In other words, this method must
allocate a new array even if this set is backed by an array).
The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all the elements in this set
"
      end

      operation 9153794 "toArray"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this set; the
runtime type of the returned array is that of the specified array.
If the set fits in the specified array, it is returned therein.
Otherwise, a new array is allocated with the runtime type of the
specified array and the size of this set.

<p>If this set fits in the specified array with room to spare
(i.e., the array has more elements than this set), the element in
the array immediately following the end of the set is set to
{@code null}.  (This is useful in determining the length of this
set <i>only</i> if the caller knows that this set does not contain
any null elements.)

<p>If this set makes any guarantees as to what order its elements
are returned by its iterator, this method must return the elements
in the same order.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose {@code x} is a set known to contain only strings.
The following code can be used to dump the set into a newly allocated
array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of this set are to be
       stored, if it is big enough; otherwise, a new array of the same
       runtime type is allocated for this purpose.
@return an array containing all the elements in this set
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in this
        set
@throws NullPointerException if the specified array is null
"
      end

      operation 9153922 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this set.
The set will be empty after this call returns.
"
      end

      operation 9154050 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified element from this set if it is present.
More formally, removes an element {@code e} such that
<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>,
if this set contains such an element.  Returns {@code true} if
this set contained the element (or equivalently, if this set
changed as a result of the call).  (This set will not contain the
element once the call returns.)

@param o object to be removed from this set, if present
@return {@code true} if this set contained the specified element
"
      end

      operation 9154178 "add"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this set if it is not already present.
More formally, adds the specified element {@code e} to this set if
the set contains no element {@code e2} such that
<tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>.
If this set already contains the element, the call leaves the set
unchanged and returns {@code false}.

@param e element to be added to this set
@return {@code true} if this set did not already contain the specified
        element
"
      end

      operation 9154306 "containsAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this set contains all of the elements of the
specified collection.  If the specified collection is also a set, this
method returns {@code true} if it is a <i>subset</i> of this set.

@param  c collection to be checked for containment in this set
@return {@code true} if this set contains all of the elements of the
        specified collection
@throws NullPointerException if the specified collection is null
@see #contains(Object)
"
      end

      operation 9154434 "addAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all of the elements in the specified collection to this set if
they're not already present.  If the specified collection is also a
set, the {@code addAll} operation effectively modifies this set so
that its value is the <i>union</i> of the two sets.  The behavior of
this operation is undefined if the specified collection is modified
while the operation is in progress.

@param  c collection containing elements to be added to this set
@return {@code true} if this set changed as a result of the call
@throws NullPointerException if the specified collection is null
@see #add(Object)
"
      end

      operation 9154562 "removeAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this set all of its elements that are contained in the
specified collection.  If the specified collection is also a set,
this operation effectively modifies this set so that its value is the
<i>asymmetric set difference</i> of the two sets.

@param  c collection containing elements to be removed from this set
@return {@code true} if this set changed as a result of the call
@throws ClassCastException if the class of an element of this set
        is incompatible with the specified collection (optional)
@throws NullPointerException if this set contains a null element and the
        specified collection does not permit null elements (optional),
        or if the specified collection is null
@see #remove(Object)
"
      end

      operation 9154690 "retainAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this set that are contained in the
specified collection.  In other words, removes from this set all of
its elements that are not contained in the specified collection.  If
the specified collection is also a set, this operation effectively
modifies this set so that its value is the <i>intersection</i> of the
two sets.

@param  c collection containing elements to be retained in this set
@return {@code true} if this set changed as a result of the call
@throws ClassCastException if the class of an element of this set
        is incompatible with the specified collection (optional)
@throws NullPointerException if this set contains a null element and the
        specified collection does not permit null elements (optional),
        or if the specified collection is null
@see #remove(Object)
"
      end

      operation 9154818 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements contained in this set
in the order in which these elements were added.

<p>The returned iterator provides a snapshot of the state of the set
when the iterator was constructed. No synchronization is needed while
traversing the iterator. The iterator does <em>NOT</em> support the
{@code remove} method.

@return an iterator over the elements in this set
"
      end

      operation 9154946 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified object with this set for equality.
Returns {@code true} if the specified object is the same object
as this object, or if it is also a {@link Set} and the elements
returned by an {@linkplain Set#iterator() iterator} over the
specified set are the same as the elements returned by an
iterator over this set.  More formally, the two iterators are
considered to return the same elements if they return the same
number of elements and for every element {@code e1} returned by
the iterator over the specified set, there is an element
{@code e2} returned by the iterator over this set such that
{@code (e1==null ? e2==null : e1.equals(e2))}.

@param o object to be compared for equality with this set
@return {@code true} if the specified object is equal to this set
"
      end

      operation 9155074 "removeIf"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "filter" type class_ref 184578 // Predicate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9155202 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9155330 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Spliterator} over the elements in this set in the order
in which these elements were added.

<p>The {@code Spliterator} reports {@link Spliterator#IMMUTABLE},
{@link Spliterator#DISTINCT}, {@link Spliterator#SIZED}, and
{@link Spliterator#SUBSIZED}.

<p>The spliterator provides a snapshot of the state of the set
when the spliterator was constructed. No synchronization is needed while
operating on the spliterator.

@return a {@code Spliterator} over the elements in this set
@since 1.8
"
      end

      operation 9155458 "eq"
	class_operation cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "o1" type class_ref 129538 // Object
	  param inout name "o2" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests for equality, coping with nulls.
"
      end
    end

    class 1117826 "CountDownLatch"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A synchronization aid that allows one or more threads to wait until
a set of operations being performed in other threads completes.

<p>A {@code CountDownLatch} is initialized with a given <em>count</em>.
The {@link #await await} methods block until the current count reaches
zero due to invocations of the {@link #countDown} method, after which
all waiting threads are released and any subsequent invocations of
{@link #await await} return immediately.  This is a one-shot phenomenon
-- the count cannot be reset.  If you need a version that resets the
count, consider using a {@link CyclicBarrier}.

<p>A {@code CountDownLatch} is a versatile synchronization tool
and can be used for a number of purposes.  A
{@code CountDownLatch} initialized with a count of one serves as a
simple on/off latch, or gate: all threads invoking {@link #await await}
wait at the gate until it is opened by a thread invoking {@link
#countDown}.  A {@code CountDownLatch} initialized to <em>N</em>
can be used to make one thread wait until <em>N</em> threads have
completed some action, or some action has been completed N times.

<p>A useful property of a {@code CountDownLatch} is that it
doesn't require that threads calling {@code countDown} wait for
the count to reach zero before proceeding, it simply prevents any
thread from proceeding past an {@link #await await} until all
threads could pass.

<p><b>Sample usage:</b> Here is a pair of classes in which a group
of worker threads use two countdown latches:
<ul>
<li>The first is a start signal that prevents any worker from proceeding
until the driver is ready for them to proceed;
<li>The second is a completion signal that allows the driver to wait
until all workers have completed.
</ul>

 <pre> {@code
class Driver { // ...
  void main() throws InterruptedException {
    CountDownLatch startSignal = new CountDownLatch(1);
    CountDownLatch doneSignal = new CountDownLatch(N);

    for (int i = 0; i < N; ++i) // create and start threads
      new Thread(new Worker(startSignal, doneSignal)).start();

    doSomethingElse();            // don't let run yet
    startSignal.countDown();      // let all threads proceed
    doSomethingElse();
    doneSignal.await();           // wait for all to finish
  }
}

class Worker implements Runnable {
  private final CountDownLatch startSignal;
  private final CountDownLatch doneSignal;
  Worker(CountDownLatch startSignal, CountDownLatch doneSignal) {
    this.startSignal = startSignal;
    this.doneSignal = doneSignal;
  }
  public void run() {
    try {
      startSignal.await();
      doWork();
      doneSignal.countDown();
    } catch (InterruptedException ex) {} // return;
  }

  void doWork() { ... }
}}</pre>

<p>Another typical usage would be to divide a problem into N parts,
describe each part with a Runnable that executes that portion and
counts down on the latch, and queue all the Runnables to an
Executor.  When all sub-parts are complete, the coordinating thread
will be able to pass through await. (When threads must repeatedly
count down in this way, instead use a {@link CyclicBarrier}.)

 <pre> {@code
class Driver2 { // ...
  void main() throws InterruptedException {
    CountDownLatch doneSignal = new CountDownLatch(N);
    Executor e = ...

    for (int i = 0; i < N; ++i) // create and start threads
      e.execute(new WorkerRunnable(doneSignal, i));

    doneSignal.await();           // wait for all to finish
  }
}

class WorkerRunnable implements Runnable {
  private final CountDownLatch doneSignal;
  private final int i;
  WorkerRunnable(CountDownLatch doneSignal, int i) {
    this.doneSignal = doneSignal;
    this.i = i;
  }
  public void run() {
    try {
      doWork(i);
      doneSignal.countDown();
    } catch (InterruptedException ex) {} // return;
  }

  void doWork() { ... }
}}</pre>

<p>Memory consistency effects: Until the count reaches
zero, actions in a thread prior to calling
{@code countDown()}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions following a successful return from a corresponding
{@code await()} in another thread.

@since 1.5
@author Doug Lea
"
      class 1117954 "Sync"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3614850 // <generalisation>
	  relation 3614850 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3614850 // <generalisation>
	    b parent class_ref 1106050 // AbstractQueuedSynchronizer
	end

	attribute 2127874 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 4982264981922014374L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9155586 "Sync"
	  package explicit_return_type ""
	  nparams 1
	    param in name "count" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9155714 "getCount"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9155842 "tryAcquireShared"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "acquires" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9155970 "tryReleaseShared"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "releases" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3614978 // sync (<unidirectional association>)
	relation 3614978 --->
	  a role_name "sync" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3614978 // sync (<unidirectional association>)
	  b parent class_ref 1117954 // Sync
      end

      operation 9156098 "CountDownLatch"
	public explicit_return_type ""
	nparams 1
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code CountDownLatch} initialized with the given count.

@param count the number of times {@link #countDown} must be invoked
       before threads can pass through {@link #await}
@throws IllegalArgumentException if {@code count} is negative
"
      end

      operation 9156226 "await"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the current thread to wait until the latch has counted down to
zero, unless the thread is {@linkplain Thread#interrupt interrupted}.

<p>If the current count is zero then this method returns immediately.

<p>If the current count is greater than zero then the current
thread becomes disabled for thread scheduling purposes and lies
dormant until one of two things happen:
<ul>
<li>The count reaches zero due to invocations of the
{@link #countDown} method; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread.
</ul>

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

@throws InterruptedException if the current thread is interrupted
        while waiting
"
      end

      operation 9156354 "await"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the current thread to wait until the latch has counted down to
zero, unless the thread is {@linkplain Thread#interrupt interrupted},
or the specified waiting time elapses.

<p>If the current count is zero then this method returns immediately
with the value {@code true}.

<p>If the current count is greater than zero then the current
thread becomes disabled for thread scheduling purposes and lies
dormant until one of three things happen:
<ul>
<li>The count reaches zero due to invocations of the
{@link #countDown} method; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread; or
<li>The specified waiting time elapses.
</ul>

<p>If the count reaches zero then the method returns with the
value {@code true}.

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

<p>If the specified waiting time elapses then the value {@code false}
is returned.  If the time is less than or equal to zero, the method
will not wait at all.

@param timeout the maximum time to wait
@param unit the time unit of the {@code timeout} argument
@return {@code true} if the count reached zero and {@code false}
        if the waiting time elapsed before the count reached zero
@throws InterruptedException if the current thread is interrupted
        while waiting
"
      end

      operation 9156482 "countDown"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrements the count of the latch, releasing all waiting threads if
the count reaches zero.

<p>If the current count is greater than zero then it is decremented.
If the new count is zero then all waiting threads are re-enabled for
thread scheduling purposes.

<p>If the current count equals zero then nothing happens.
"
      end

      operation 9156610 "getCount"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current count.

<p>This method is typically used for debugging and testing purposes.

@return the current count
"
      end

      operation 9156738 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string identifying this latch, as well as its state.
The state, in brackets, includes the String {@code \"Count =\"}
followed by the current count.

@return a string identifying this latch, as well as its state
"
      end
    end

    class 1118082 "CyclicBarrier"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A synchronization aid that allows a set of threads to all wait for
each other to reach a common barrier point.  CyclicBarriers are
useful in programs involving a fixed sized party of threads that
must occasionally wait for each other. The barrier is called
<em>cyclic</em> because it can be re-used after the waiting threads
are released.

<p>A {@code CyclicBarrier} supports an optional {@link Runnable} command
that is run once per barrier point, after the last thread in the party
arrives, but before any threads are released.
This <em>barrier action</em> is useful
for updating shared-state before any of the parties continue.

<p><b>Sample usage:</b> Here is an example of using a barrier in a
parallel decomposition design:

 <pre> {@code
class Solver {
  final int N;
  final float[][] data;
  final CyclicBarrier barrier;

  class Worker implements Runnable {
    int myRow;
    Worker(int row) { myRow = row; }
    public void run() {
      while (!done()) {
        processRow(myRow);

        try {
          barrier.await();
        } catch (InterruptedException ex) {
          return;
        } catch (BrokenBarrierException ex) {
          return;
        }
      }
    }
  }

  public Solver(float[][] matrix) {
    data = matrix;
    N = matrix.length;
    Runnable barrierAction =
      new Runnable() { public void run() { mergeRows(...); }};
    barrier = new CyclicBarrier(N, barrierAction);

    List<Thread> threads = new ArrayList<Thread>(N);
    for (int i = 0; i < N; i++) {
      Thread thread = new Thread(new Worker(i));
      threads.add(thread);
      thread.start();
    }

    // wait until done
    for (Thread thread : threads)
      thread.join();
  }
}}</pre>

Here, each worker thread processes a row of the matrix then waits at the
barrier until all rows have been processed. When all rows are processed
the supplied {@link Runnable} barrier action is executed and merges the
rows. If the merger
determines that a solution has been found then {@code done()} will return
{@code true} and each worker will terminate.

<p>If the barrier action does not rely on the parties being suspended when
it is executed, then any of the threads in the party could execute that
action when it is released. To facilitate this, each invocation of
{@link #await} returns the arrival index of that thread at the barrier.
You can then choose which thread should execute the barrier action, for
example:
 <pre> {@code
if (barrier.await() == 0) {
  // log the completion of this iteration
}}</pre>

<p>The {@code CyclicBarrier} uses an all-or-none breakage model
for failed synchronization attempts: If a thread leaves a barrier
point prematurely because of interruption, failure, or timeout, all
other threads waiting at that barrier point will also leave
abnormally via {@link BrokenBarrierException} (or
{@link InterruptedException} if they too were interrupted at about
the same time).

<p>Memory consistency effects: Actions in a thread prior to calling
{@code await()}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions that are part of the barrier action, which in turn
<i>happen-before</i> actions following a successful return from the
corresponding {@code await()} in other threads.

@since 1.5
@see CountDownLatch

@author Doug Lea
"
      class 1118210 "Generation"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2128002 "broken"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 3615106 // lock (<unidirectional association>)
	relation 3615106 --->
	  a role_name "lock" init_value " new ReentrantLock()" const_relation private
	    comment " The lock for guarding barrier entry 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3615106 // lock (<unidirectional association>)
	  b parent class_ref 968706 // ReentrantLock
      end

      classrelation 3615234 // trip (<unidirectional association>)
	relation 3615234 --->
	  a role_name "trip" init_value " lock.newCondition()" const_relation private
	    comment " Condition to wait on until tripped 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3615234 // trip (<unidirectional association>)
	  b parent class_ref 864770 // Condition
      end

      attribute 2128130 "parties"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of parties 
"
      end

      classrelation 3615362 // barrierCommand (<unidirectional association>)
	relation 3615362 --->
	  a role_name "barrierCommand" const_relation private
	    comment " The command to run when tripped 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3615362 // barrierCommand (<unidirectional association>)
	  b parent class_ref 128770 // Runnable
      end

      classrelation 3615490 // generation (<unidirectional association>)
	relation 3615490 --->
	  a role_name "generation" init_value " new Generation()" private
	    comment " The current generation 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3615490 // generation (<unidirectional association>)
	  b parent class_ref 1118210 // Generation
      end

      attribute 2128258 "count"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Number of parties still waiting. Counts down from parties to 0
on each generation.  It is reset to parties on each new
generation or when broken.

"
      end

      operation 9156866 "nextGeneration"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates state on barrier trip and wakes up everyone.
Called only while holding lock.
"
      end

      operation 9156994 "breakBarrier"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets current barrier generation as broken and wakes up everyone.
Called only while holding lock.
"
      end

      operation 9157122 "dowait"
	private explicit_return_type "int"
	nparams 2
	  param inout name "timed" explicit_type "boolean"
	  param in name "nanos" explicit_type "long"
	nexceptions 3
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1100162 // BrokenBarrierException
	  exception class_ref 1065602 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main barrier code, covering the various policies.
"
      end

      operation 9157250 "CyclicBarrier"
	public explicit_return_type ""
	nparams 2
	  param in name "parties" explicit_type "int"
	  param inout name "barrierAction" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code CyclicBarrier} that will trip when the
given number of parties (threads) are waiting upon it, and which
will execute the given barrier action when the barrier is tripped,
performed by the last thread entering the barrier.

@param parties the number of threads that must invoke {@link #await}
       before the barrier is tripped
@param barrierAction the command to execute when the barrier is
       tripped, or {@code null} if there is no action
@throws IllegalArgumentException if {@code parties} is less than 1
"
      end

      operation 9157378 "CyclicBarrier"
	public explicit_return_type ""
	nparams 1
	  param in name "parties" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code CyclicBarrier} that will trip when the
given number of parties (threads) are waiting upon it, and
does not perform a predefined action when the barrier is tripped.

@param parties the number of threads that must invoke {@link #await}
       before the barrier is tripped
@throws IllegalArgumentException if {@code parties} is less than 1
"
      end

      operation 9157506 "getParties"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of parties required to trip this barrier.

@return the number of parties required to trip this barrier
"
      end

      operation 9157634 "await"
	public explicit_return_type "int"
	nparams 0
	nexceptions 2
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1100162 // BrokenBarrierException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits until all {@linkplain #getParties parties} have invoked
{@code await} on this barrier.

<p>If the current thread is not the last to arrive then it is
disabled for thread scheduling purposes and lies dormant until
one of the following things happens:
<ul>
<li>The last thread arrives; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
one of the other waiting threads; or
<li>Some other thread times out while waiting for barrier; or
<li>Some other thread invokes {@link #reset} on this barrier.
</ul>

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

<p>If the barrier is {@link #reset} while any thread is waiting,
or if the barrier {@linkplain #isBroken is broken} when
{@code await} is invoked, or while any thread is waiting, then
{@link BrokenBarrierException} is thrown.

<p>If any thread is {@linkplain Thread#interrupt interrupted} while waiting,
then all other waiting threads will throw
{@link BrokenBarrierException} and the barrier is placed in the broken
state.

<p>If the current thread is the last thread to arrive, and a
non-null barrier action was supplied in the constructor, then the
current thread runs the action before allowing the other threads to
continue.
If an exception occurs during the barrier action then that exception
will be propagated in the current thread and the barrier is placed in
the broken state.

@return the arrival index of the current thread, where index
        {@code getParties() - 1} indicates the first
        to arrive and zero indicates the last to arrive
@throws InterruptedException if the current thread was interrupted
        while waiting
@throws BrokenBarrierException if <em>another</em> thread was
        interrupted or timed out while the current thread was
        waiting, or the barrier was reset, or the barrier was
        broken when {@code await} was called, or the barrier
        action (if present) failed due to an exception
"
      end

      operation 9157762 "await"
	public explicit_return_type "int"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 3
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1100162 // BrokenBarrierException
	  exception class_ref 1065602 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits until all {@linkplain #getParties parties} have invoked
{@code await} on this barrier, or the specified waiting time elapses.

<p>If the current thread is not the last to arrive then it is
disabled for thread scheduling purposes and lies dormant until
one of the following things happens:
<ul>
<li>The last thread arrives; or
<li>The specified timeout elapses; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
one of the other waiting threads; or
<li>Some other thread times out while waiting for barrier; or
<li>Some other thread invokes {@link #reset} on this barrier.
</ul>

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

<p>If the specified waiting time elapses then {@link TimeoutException}
is thrown. If the time is less than or equal to zero, the
method will not wait at all.

<p>If the barrier is {@link #reset} while any thread is waiting,
or if the barrier {@linkplain #isBroken is broken} when
{@code await} is invoked, or while any thread is waiting, then
{@link BrokenBarrierException} is thrown.

<p>If any thread is {@linkplain Thread#interrupt interrupted} while
waiting, then all other waiting threads will throw {@link
BrokenBarrierException} and the barrier is placed in the broken
state.

<p>If the current thread is the last thread to arrive, and a
non-null barrier action was supplied in the constructor, then the
current thread runs the action before allowing the other threads to
continue.
If an exception occurs during the barrier action then that exception
will be propagated in the current thread and the barrier is placed in
the broken state.

@param timeout the time to wait for the barrier
@param unit the time unit of the timeout parameter
@return the arrival index of the current thread, where index
        {@code getParties() - 1} indicates the first
        to arrive and zero indicates the last to arrive
@throws InterruptedException if the current thread was interrupted
        while waiting
@throws TimeoutException if the specified timeout elapses.
        In this case the barrier will be broken.
@throws BrokenBarrierException if <em>another</em> thread was
        interrupted or timed out while the current thread was
        waiting, or the barrier was reset, or the barrier was broken
        when {@code await} was called, or the barrier action (if
        present) failed due to an exception
"
      end

      operation 9157890 "isBroken"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries if this barrier is in a broken state.

@return {@code true} if one or more parties broke out of this
        barrier due to interruption or timeout since
        construction or the last reset, or a barrier action
        failed due to an exception; {@code false} otherwise.
"
      end

      operation 9158018 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the barrier to its initial state.  If any parties are
currently waiting at the barrier, they will return with a
{@link BrokenBarrierException}. Note that resets <em>after</em>
a breakage has occurred for other reasons can be complicated to
carry out; threads need to re-synchronize in some other way,
and choose one to perform the reset.  It may be preferable to
instead create a new barrier for subsequent use.
"
      end

      operation 9158146 "getNumberWaiting"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of parties currently waiting at the barrier.
This method is primarily useful for debugging and assertions.

@return the number of parties currently blocked in {@link #await}
"
      end
    end

    class 1118338 "Delayed"
      visibility public stereotype "interface"
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A mix-in style interface for marking objects that should be
acted upon after a given delay.

<p>An implementation of this interface must define a
{@code compareTo} method that provides an ordering consistent with
its {@code getDelay} method.

@since 1.5
@author Doug Lea
"
      classrelation 3615618 // <realization>
	relation 3615618 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3615618 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      operation 9158274 "getDelay"
	public explicit_return_type "long"
	nparams 1
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the remaining delay associated with this object, in the
given time unit.

@param unit the time unit
@return the remaining delay; zero or negative values indicate
that the delay has already elapsed
"
      end
    end

    class 1118466 "DelayQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        extends class_ref 1118338 // Delayed
      nactuals 2
      actual class class_ref 1064066 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 1099522 // BlockingQueue
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An unbounded {@linkplain BlockingQueue blocking queue} of
{@code Delayed} elements, in which an element can only be taken
when its delay has expired.  The <em>head</em> of the queue is that
{@code Delayed} element whose delay expired furthest in the
past.  If no delay has expired there is no head and {@code poll}
will return {@code null}. Expiration occurs when an element's
{@code getDelay(TimeUnit.NANOSECONDS)} method returns a value less
than or equal to zero.  Even though unexpired elements cannot be
removed using {@code take} or {@code poll}, they are otherwise
treated as normal elements. For example, the {@code size} method
returns the count of both expired and unexpired elements.
This queue does not permit null elements.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.  The Iterator provided in method {@link
#iterator()} is <em>not</em> guaranteed to traverse the elements of
the DelayQueue in any particular order.

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 3615746 // <realization>
	relation 3615746 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3615746 // <realization>
	  b parent class_ref 1064066 // AbstractQueue
      end

      classrelation 3615874 // <realization>
	relation 3615874 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3615874 // <realization>
	  b parent class_ref 1099522 // BlockingQueue
      end

      classrelation 3616002 // lock (<unidirectional association>)
	relation 3616002 --->
	  a role_name "lock" init_value " new ReentrantLock()" const_relation private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3616002 // lock (<unidirectional association>)
	  b parent class_ref 968706 // ReentrantLock
      end

      classrelation 3616130 // q (<unidirectional association>)
	relation 3616130 --->
	  a role_name "q" init_value " new PriorityQueue<E>()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 3616130 // q (<unidirectional association>)
	  b parent class_ref 1090178 // PriorityQueue
      end

      classrelation 3616258 // leader (<unidirectional association>)
	relation 3616258 --->
	  a role_name "leader" init_value " null" private
	    comment "
Thread designated to wait for the element at the head of
the queue.  This variant of the Leader-Follower pattern
(http://www.cs.wustl.edu/~schmidt/POSA/POSA2/) serves to
minimize unnecessary timed waiting.  When a thread becomes
the leader, it waits only for the next delay to elapse, but
other threads await indefinitely.  The leader thread must
signal some other thread before returning from take() or
poll(...), unless some other thread becomes leader in the
interim.  Whenever the head of the queue is replaced with
an element with an earlier expiration time, the leader
field is invalidated by being reset to null, and some
waiting thread, but not necessarily the current leader, is
signalled.  So waiting threads must be prepared to acquire
and lose leadership while waiting.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3616258 // leader (<unidirectional association>)
	  b parent class_ref 128642 // Thread
      end

      classrelation 3616386 // available (<unidirectional association>)
	relation 3616386 --->
	  a role_name "available" init_value " lock.newCondition()" const_relation private
	    comment "
Condition signalled when a newer element becomes available
at the head of the queue or a new thread may need to
become leader.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3616386 // available (<unidirectional association>)
	  b parent class_ref 864770 // Condition
      end

      operation 9158402 "DelayQueue"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code DelayQueue} that is initially empty.
"
      end

      operation 9158530 "DelayQueue"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code DelayQueue} initially containing the elements of the
given collection of {@link Delayed} instances.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection or any
        of its elements are null
"
      end

      operation 9158658 "add"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this delay queue.

@param e the element to add
@return {@code true} (as specified by {@link Collection#add})
@throws NullPointerException if the specified element is null
"
      end

      operation 9158786 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this delay queue.

@param e the element to add
@return {@code true}
@throws NullPointerException if the specified element is null
"
      end

      operation 9158914 "put"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this delay queue. As the queue is
unbounded this method will never block.

@param e the element to add
@throws NullPointerException {@inheritDoc}
"
      end

      operation 9159042 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this delay queue. As the queue is
unbounded this method will never block.

@param e the element to add
@param timeout This parameter is ignored as the method never blocks
@param unit This parameter is ignored as the method never blocks
@return {@code true}
@throws NullPointerException {@inheritDoc}
"
      end

      operation 9159170 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, or returns {@code null}
if this queue has no elements with an expired delay.

@return the head of this queue, or {@code null} if this
        queue has no elements with an expired delay
"
      end

      operation 9159298 "take"
	cpp_inline public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting if necessary
until an element with an expired delay is available on this queue.

@return the head of this queue
@throws InterruptedException {@inheritDoc}
"
      end

      operation 9159426 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting if necessary
until an element with an expired delay is available on this queue,
or the specified wait time expires.

@return the head of this queue, or {@code null} if the
        specified waiting time elapses before an element with
        an expired delay becomes available
@throws InterruptedException {@inheritDoc}
"
      end

      operation 9159554 "peek"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves, but does not remove, the head of this queue, or
returns {@code null} if this queue is empty.  Unlike
{@code poll}, if no expired elements are available in the queue,
this method returns the element that will expire next,
if one exists.

@return the head of this queue, or {@code null} if this
        queue is empty
"
      end

      operation 9159682 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9159810 "peekExpired"
	cpp_inline private explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns first element only if it is expired.
Used only by drainTo.  Call only when holding lock.
"
      end

      operation 9159938 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}
"
      end

      operation 9160066 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 184194 // Collection
	  param in name "maxElements" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}
"
      end

      operation 9160194 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this delay queue.
The queue will be empty after this call returns.
Elements with an unexpired delay are not waited for; they are
simply discarded from the queue.
"
      end

      operation 9160322 "remainingCapacity"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns {@code Integer.MAX_VALUE} because
a {@code DelayQueue} is not capacity constrained.

@return {@code Integer.MAX_VALUE}
"
      end

      operation 9160450 "toArray"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue.
The returned array elements are in no particular order.

<p>The returned array will be \"safe\" in that no references to it are
maintained by this queue.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this queue
"
      end

      operation 9160578 "toArray"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue; the
runtime type of the returned array is that of the specified array.
The returned array elements are in no particular order.
If the queue fits in the specified array, it is returned therein.
Otherwise, a new array is allocated with the runtime type of the
specified array and the size of this queue.

<p>If this queue fits in the specified array with room to spare
(i.e., the array has more elements than this queue), the element in
the array immediately following the end of the queue is set to
{@code null}.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>The following code can be used to dump a delay queue into a newly
allocated array of {@code Delayed}:

<pre> {@code Delayed[] a = q.toArray(new Delayed[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the queue are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this queue
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this queue
@throws NullPointerException if the specified array is null
"
      end

      operation 9160706 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this
queue, if it is present, whether or not it has expired.
"
      end

      operation 9160834 "removeEQ"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Identity-based version for use in Itr.remove
"
      end

      operation 9160962 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over all the elements (both expired and
unexpired) in this queue. The iterator does not return the
elements in any particular order.

<p>The returned iterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

@return an iterator over the elements in this queue
"
      end

      class 1118594 "Itr"
	visibility private 
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3616514 // <realization>
	  relation 3616514 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3616514 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	classrelation 3616642 // array (<unidirectional association>)
	  relation 3616642 --->
	    a role_name "array" multiplicity "[]" const_relation package
	      comment " Array of all elements"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3616642 // array (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	attribute 2128386 "cursor"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " index of next element to return"
	end

	attribute 2128514 "lastRet"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " index of last element, or -1 if no such"
	end

	operation 9161090 "Itr"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "array" type class_ref 129538 // Object
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9161218 "hasNext"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9161346 "next"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9161474 "remove"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 1118722 "Exchanger"
      visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A synchronization point at which threads can pair and swap elements
within pairs.  Each thread presents some object on entry to the
{@link #exchange exchange} method, matches with a partner thread,
and receives its partner's object on return.  An Exchanger may be
viewed as a bidirectional form of a {@link SynchronousQueue}.
Exchangers may be useful in applications such as genetic algorithms
and pipeline designs.

<p><b>Sample Usage:</b>
Here are the highlights of a class that uses an {@code Exchanger}
to swap buffers between threads so that the thread filling the
buffer gets a freshly emptied one when it needs it, handing off the
filled one to the thread emptying the buffer.
 <pre> {@code
class FillAndEmpty {
  Exchanger<DataBuffer> exchanger = new Exchanger<DataBuffer>();
  DataBuffer initialEmptyBuffer = ... a made-up type
  DataBuffer initialFullBuffer = ...

  class FillingLoop implements Runnable {
    public void run() {
      DataBuffer currentBuffer = initialEmptyBuffer;
      try {
        while (currentBuffer != null) {
          addToBuffer(currentBuffer);
          if (currentBuffer.isFull())
            currentBuffer = exchanger.exchange(currentBuffer);
        }
      } catch (InterruptedException ex) { ... handle ... }
    }
  }

  class EmptyingLoop implements Runnable {
    public void run() {
      DataBuffer currentBuffer = initialFullBuffer;
      try {
        while (currentBuffer != null) {
          takeFromBuffer(currentBuffer);
          if (currentBuffer.isEmpty())
            currentBuffer = exchanger.exchange(currentBuffer);
        }
      } catch (InterruptedException ex) { ... handle ...}
    }
  }

  void start() {
    new Thread(new FillingLoop()).start();
    new Thread(new EmptyingLoop()).start();
  }
}}</pre>

<p>Memory consistency effects: For each pair of threads that
successfully exchange objects via an {@code Exchanger}, actions
prior to the {@code exchange()} in each thread
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
those subsequent to a return from the corresponding {@code exchange()}
in the other thread.

@since 1.5
@author Doug Lea and Bill Scherer and Michael Scott
@param <V> The type of objects that may be exchanged
"
      attribute 2128642 "ASHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Overview: The core algorithm is, for an exchange \"slot\",
and a participant (caller) with an item:

for (;;) {
  if (slot is empty) {                       // offer
    place item in a Node;
    if (can CAS slot from empty to node) {
      wait for release;
      return matching item in node;
    }
  }
  else if (can CAS slot from node to empty) { // release
    get the item in node;
    set matching item in node;
    release waiting thread;
  }
  // else retry on CAS failure
}

This is among the simplest forms of a \"dual data structure\" --
see Scott and Scherer's DISC 04 paper and
http://www.cs.rochester.edu/research/synchronization/pseudocode/duals.html

This works great in principle. But in practice, like many
algorithms centered on atomic updates to a single location, it
scales horribly when there are more than a few participants
using the same Exchanger. So the implementation instead uses a
form of elimination arena, that spreads out this contention by
arranging that some threads typically use different slots,
while still ensuring that eventually, any two parties will be
able to exchange items. That is, we cannot completely partition
across threads, but instead give threads arena indices that
will on average grow under contention and shrink under lack of
contention. We approach this by defining the Nodes that we need
anyway as ThreadLocals, and include in them per-thread index
and related bookkeeping state. (We can safely reuse per-thread
nodes rather than creating them fresh each time because slots
alternate between pointing to a node vs null, so cannot
encounter ABA problems. However, we do need some care in
resetting them between uses.)

Implementing an effective arena requires allocating a bunch of
space, so we only do so upon detecting contention (except on
uniprocessors, where they wouldn't help, so aren't used).
Otherwise, exchanges use the single-slot slotExchange method.
On contention, not only must the slots be in different
locations, but the locations must not encounter memory
contention due to being on the same cache line (or more
generally, the same coherence unit).  Because, as of this
writing, there is no way to determine cacheline size, we define
a value that is enough for common platforms.  Additionally,
extra care elsewhere is taken to avoid other false/unintended
sharing and to enhance locality, including adding padding (via
sun.misc.Contended) to Nodes, embedding \"bound\" as an Exchanger
field, and reworking some park/unpark mechanics compared to
LockSupport versions.

The arena starts out with only one used slot. We expand the
effective arena size by tracking collisions; i.e., failed CASes
while trying to exchange. By nature of the above algorithm, the
only kinds of collision that reliably indicate contention are
when two attempted releases collide -- one of two attempted
offers can legitimately fail to CAS without indicating
contention by more than one other thread. (Note: it is possible
but not worthwhile to more precisely detect contention by
reading slot values after CAS failures.)  When a thread has
collided at each slot within the current arena bound, it tries
to expand the arena size by one. We track collisions within
bounds by using a version (sequence) number on the \"bound\"
field, and conservatively reset collision counts when a
participant notices that bound has been updated (in either
direction).

The effective arena size is reduced (when there is more than
one slot) by giving up on waiting after a while and trying to
decrement the arena size on expiration. The value of \"a while\"
is an empirical matter.  We implement by piggybacking on the
use of spin->yield->block that is essential for reasonable
waiting performance anyway -- in a busy exchanger, offers are
usually almost immediately released, in which case context
switching on multiprocessors is extremely slow/wasteful.  Arena
waits just omit the blocking part, and instead cancel. The spin
count is empirically chosen to be a value that avoids blocking
99% of the time under maximum sustained exchange rates on a
range of test machines. Spins and yields entail some limited
randomness (using a cheap xorshift) to avoid regular patterns
that can induce unproductive grow/shrink cycles. (Using a
pseudorandom also helps regularize spin cycle duration by
making branches unpredictable.)  Also, during an offer, a
waiter can \"know\" that it will be released when its slot has
changed, but cannot yet proceed until match is set.  In the
mean time it cannot cancel the offer, so instead spins/yields.
Note: It is possible to avoid this secondary check by changing
the linearization point to be a CAS of the match field (as done
in one case in the Scott & Scherer DISC paper), which also
increases asynchrony a bit, at the expense of poorer collision
detection and inability to always reuse per-thread nodes. So
the current scheme is typically a better tradeoff.

On collisions, indices traverse the arena cyclically in reverse
order, restarting at the maximum index (which will tend to be
sparsest) when bounds change. (On expirations, indices instead
are halved until reaching 0.) It is possible (and has been
tried) to use randomized, prime-value-stepped, or double-hash
style traversal instead of simple cyclic traversal to reduce
bunching.  But empirically, whatever benefits these may have
don't overcome their added overhead: We are managing operations
that occur very quickly unless there is sustained contention,
so simpler/faster control policies work better than more
accurate but slower ones.

Because we use expiration for arena size control, we cannot
throw TimeoutExceptions in the timed version of the public
exchange method until the arena size has shrunken to zero (or
the arena isn't enabled). This may delay response to timeout
but is still within spec.

Essentially all of the implementation is in methods
slotExchange and arenaExchange. These have similar overall
structure, but differ in too many details to combine. The
slotExchange method uses the single Exchanger field \"slot\"
rather than arena array elements. However, it still needs
minimal collision detection to trigger arena construction.
(The messiest part is making sure interrupt status and
InterruptedExceptions come out right during transitions when
both methods may be called. This is done by using null return
as a sentinel to recheck interrupt status.)

As is too common in this sort of code, methods are monolithic
because most of the logic relies on reads of fields that are
maintained as local variables so can't be nicely factored --
mainly, here, bulky spin->yield->block/cancel code), and
heavily dependent on intrinsics (Unsafe) to use inlined
embedded CAS and related memory access operations (that tend
not to be as readily inlined by dynamic compilers when they are
hidden behind other methods that would more nicely name and
encapsulate the intended effects). This includes the use of
putOrderedX to clear fields of the per-thread Nodes between
uses. Note that field Node.item is not declared as volatile
even though it is read by releasing threads, because they only
do so after CAS operations that must precede access, and all
uses by the owning thread are otherwise acceptably ordered by
other operations. (Because the actual points of atomicity are
slot CASes, it would also be legal for the write to Node.match
in a release to be weaker than a full volatile write. However,
this is not done because it could allow further postponement of
the write, delaying progress.)


The byte distance (as a shift value) between any two used slots
in the arena.  1 << ASHIFT should be at least cacheline size.

"
      end

      attribute 2128770 "MMASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0xff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum supported arena index. The maximum allocatable
arena size is MMASK + 1. Must be a power of two minus one, less
than (1<<(31-ASHIFT)). The cap of 255 (0xff) more than suffices
for the expected scaling limits of the main algorithms.

"
      end

      attribute 2128898 "SEQ"
	class_attribute const_attribute private explicit_type "int"
	init_value " MMASK + 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit for sequence/version bits of bound field. Each successful
change to the bound also adds SEQ.

"
      end

      attribute 2129026 "NCPU"
	class_attribute const_attribute private explicit_type "int"
	init_value " Runtime.getRuntime().availableProcessors()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of CPUs, for sizing and spin control 
"
      end

      attribute 2129154 "FULL"
	class_attribute const_attribute package explicit_type "int"
	init_value " (NCPU >= (MMASK << 1)) ? MMASK : NCPU >>> 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum slot index of the arena: The number of slots that
can in principle hold all threads without contention, or at
most the maximum indexable value.

"
      end

      attribute 2129282 "SPINS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bound for spins while waiting for a match. The actual
number of iterations will on average be about twice this value
due to randomization. Note: Spinning is disabled when NCPU==1.

"
      end

      classrelation 3616770 // NULL_ITEM (<unidirectional association>)
	relation 3616770 --->
	  a role_name "NULL_ITEM" init_value " new Object()" class_relation const_relation private
	    comment "
Value representing null arguments/returns from public
methods. Needed because the API originally didn't disallow null
arguments, which it should have.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3616770 // NULL_ITEM (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3616898 // TIMED_OUT (<unidirectional association>)
	relation 3616898 --->
	  a role_name "TIMED_OUT" init_value " new Object()" class_relation const_relation private
	    comment "
Sentinel value returned by internal exchange methods upon
timeout, to avoid need for separate timed versions of these
methods.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3616898 // TIMED_OUT (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      class 1118850 "Node"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@sun.misc.Contended
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2129410 "index"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Arena index"
	end

	attribute 2129538 "bound"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Last recorded value of Exchanger.bound"
	end

	attribute 2129666 "collides"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Number of CAS failures at current bound"
	end

	attribute 2129794 "hash"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Pseudo-random for spins"
	end

	classrelation 3617026 // item (<unidirectional association>)
	  relation 3617026 --->
	    a role_name "item" package
	      comment " This thread's current item"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3617026 // item (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	classrelation 3617154 // match (<unidirectional association>)
	  relation 3617154 --->
	    a role_name "match" volatile package
	      comment " Item provided by releasing thread"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3617154 // match (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	classrelation 3617282 // parked (<unidirectional association>)
	  relation 3617282 --->
	    a role_name "parked" volatile package
	      comment " Set to this thread when parked, else null"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3617282 // parked (<unidirectional association>)
	    b parent class_ref 128642 // Thread
	end
      end

      class 1118978 "Participant"
	visibility package 
	nactuals 1
	actual class class_ref 129282 // ThreadLocal
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3617410 // <realization>
	  relation 3617410 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3617410 // <realization>
	    b parent class_ref 129282 // ThreadLocal
	end

	operation 9161602 "initialValue"
	  cpp_inline public return_type class_ref 1118850 // Node
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3617538 // participant (<unidirectional association>)
	relation 3617538 --->
	  a role_name "participant" const_relation private
	    comment "
Per-thread state

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3617538 // participant (<unidirectional association>)
	  b parent class_ref 1118978 // Participant
      end

      classrelation 3617666 // arena (<unidirectional association>)
	relation 3617666 --->
	  a role_name "arena" multiplicity "[]" volatile private
	    comment "
Elimination array; null until enabled (within slotExchange).
Element accesses use emulation of volatile gets and CAS.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3617666 // arena (<unidirectional association>)
	  b parent class_ref 1118850 // Node
      end

      classrelation 3617794 // slot (<unidirectional association>)
	relation 3617794 --->
	  a role_name "slot" volatile private
	    comment "
Slot used until contention detected.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3617794 // slot (<unidirectional association>)
	  b parent class_ref 1118850 // Node
      end

      attribute 2129922 "bound"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The index of the largest valid arena position, OR'ed with SEQ
number in high bits, incremented on each update.  The initial
update from 0 to SEQ is used to ensure that the arena array is
constructed only once.

"
      end

      operation 9161730 "arenaExchange"
	cpp_inline private return_type class_ref 129538 // Object
	nparams 3
	  param inout name "item" type class_ref 129538 // Object
	  param inout name "timed" explicit_type "boolean"
	  param in name "ns" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exchange function when arenas enabled. See above for explanation.

@param item the (non-null) item to exchange
@param timed true if the wait is timed
@param ns if timed, the maximum wait time, else 0L
@return the other thread's item; or null if interrupted; or
TIMED_OUT if timed and timed out
"
      end

      operation 9161858 "slotExchange"
	cpp_inline private return_type class_ref 129538 // Object
	nparams 3
	  param inout name "item" type class_ref 129538 // Object
	  param inout name "timed" explicit_type "boolean"
	  param in name "ns" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exchange function used until arenas enabled. See above for explanation.

@param item the item to exchange
@param timed true if the wait is timed
@param ns if timed, the maximum wait time, else 0L
@return the other thread's item; or null if either the arena
was enabled or the thread was interrupted before completion; or
TIMED_OUT if timed and timed out
"
      end

      operation 9161986 "Exchanger"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new Exchanger.
"
      end

      operation 9162114 "exchange"
	cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "x" explicit_type "V"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Waits for another thread to arrive at this exchange point (unless
the current thread is {@linkplain Thread#interrupt interrupted}),
and then transfers the given object to it, receiving its object
in return.

<p>If another thread is already waiting at the exchange point then
it is resumed for thread scheduling purposes and receives the object
passed in by the current thread.  The current thread returns immediately,
receiving the object passed to the exchange by that other thread.

<p>If no other thread is already waiting at the exchange then the
current thread is disabled for thread scheduling purposes and lies
dormant until one of two things happens:
<ul>
<li>Some other thread enters the exchange; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread.
</ul>
<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
for the exchange,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

@param x the object to exchange
@return the object provided by the other thread
@throws InterruptedException if the current thread was
        interrupted while waiting
"
      end

      operation 9162242 "exchange"
	cpp_inline public explicit_return_type "V"
	nparams 3
	  param inout name "x" explicit_type "V"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 2
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065602 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Waits for another thread to arrive at this exchange point (unless
the current thread is {@linkplain Thread#interrupt interrupted} or
the specified waiting time elapses), and then transfers the given
object to it, receiving its object in return.

<p>If another thread is already waiting at the exchange point then
it is resumed for thread scheduling purposes and receives the object
passed in by the current thread.  The current thread returns immediately,
receiving the object passed to the exchange by that other thread.

<p>If no other thread is already waiting at the exchange then the
current thread is disabled for thread scheduling purposes and lies
dormant until one of three things happens:
<ul>
<li>Some other thread enters the exchange; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread; or
<li>The specified waiting time elapses.
</ul>
<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
for the exchange,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

<p>If the specified waiting time elapses then {@link
TimeoutException} is thrown.  If the time is less than or equal
to zero, the method will not wait at all.

@param x the object to exchange
@param timeout the maximum time to wait
@param unit the time unit of the {@code timeout} argument
@return the object provided by the other thread
@throws InterruptedException if the current thread was
        interrupted while waiting
@throws TimeoutException if the specified waiting time elapses
        before another thread enters the exchange
"
      end

      attribute 2130050 "U"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2130178 "BOUND"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2130306 "SLOT"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2130434 "MATCH"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2130562 "BLOCKER"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2130690 "ABASE"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 174594 "initialization"
	
	cpp "" ""
	java "  static {
        int s;
        try {
            U = sun.misc.Unsafe.getUnsafe();
            Class<?> ek = Exchanger.class;
            Class<?> nk = Node.class;
            Class<?> ak = Node[].class;
            Class<?> tk = Thread.class;
            BOUND = U.objectFieldOffset
                (ek.getDeclaredField(\"bound\"));
            SLOT = U.objectFieldOffset
                (ek.getDeclaredField(\"slot\"));
            MATCH = U.objectFieldOffset
                (nk.getDeclaredField(\"match\"));
            BLOCKER = U.objectFieldOffset
                (tk.getDeclaredField(\"parkBlocker\"));
            s = U.arrayIndexScale(ak);
            // ABASE absorbs padding in front of element 0
            ABASE = U.arrayBaseOffset(ak) + (1 << ASHIFT);

        } catch (Exception e) {
            throw new Error(e);
        }
        if ((s & (s-1)) != 0 || s > (1 << ASHIFT))
            throw new Error(\"Unsupported array scale\");
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 1119106 "ExecutorCompletionService"
      visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 1105026 // CompletionService
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link CompletionService} that uses a supplied {@link Executor}
to execute tasks.  This class arranges that submitted tasks are,
upon completion, placed on a queue accessible using {@code take}.
The class is lightweight enough to be suitable for transient use
when processing groups of tasks.

<p>

<b>Usage Examples.</b>

Suppose you have a set of solvers for a certain problem, each
returning a value of some type {@code Result}, and would like to
run them concurrently, processing the results of each of them that
return a non-null value, in some method {@code use(Result r)}. You
could write this as:

<pre> {@code
void solve(Executor e,
           Collection<Callable<Result>> solvers)
    throws InterruptedException, ExecutionException {
    CompletionService<Result> ecs
        = new ExecutorCompletionService<Result>(e);
    for (Callable<Result> s : solvers)
        ecs.submit(s);
    int n = solvers.size();
    for (int i = 0; i < n; ++i) {
        Result r = ecs.take().get();
        if (r != null)
            use(r);
    }
}}</pre>

Suppose instead that you would like to use the first non-null result
of the set of tasks, ignoring any that encounter exceptions,
and cancelling all other tasks when the first one is ready:

<pre> {@code
void solve(Executor e,
           Collection<Callable<Result>> solvers)
    throws InterruptedException {
    CompletionService<Result> ecs
        = new ExecutorCompletionService<Result>(e);
    int n = solvers.size();
    List<Future<Result>> futures
        = new ArrayList<Future<Result>>(n);
    Result result = null;
    try {
        for (Callable<Result> s : solvers)
            futures.add(ecs.submit(s));
        for (int i = 0; i < n; ++i) {
            try {
                Result r = ecs.take().get();
                if (r != null) {
                    result = r;
                    break;
                }
            } catch (ExecutionException ignore) {}
        }
    }
    finally {
        for (Future<Result> f : futures)
            f.cancel(true);
    }

    if (result != null)
        use(result);
}}</pre>
"
      classrelation 3618050 // <realization>
	relation 3618050 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3618050 // <realization>
	  b parent class_ref 1105026 // CompletionService
      end

      classrelation 3618178 // executor (<unidirectional association>)
	relation 3618178 --->
	  a role_name "executor" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3618178 // executor (<unidirectional association>)
	  b parent class_ref 503426 // Executor
      end

      classrelation 3618306 // aes (<unidirectional association>)
	relation 3618306 --->
	  a role_name "aes" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3618306 // aes (<unidirectional association>)
	  b parent class_ref 1099266 // AbstractExecutorService
      end

      classrelation 3618434 // completionQueue (<unidirectional association>)
	relation 3618434 --->
	  a role_name "completionQueue" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Future<V>> ${name}${value};
"
	    classrelation_ref 3618434 // completionQueue (<unidirectional association>)
	  b parent class_ref 1099522 // BlockingQueue
      end

      class 1119234 "QueueingFuture"
	visibility private 
	nactuals 1
	actual class class_ref 1119362 // FutureTask
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3619458 // <realization>
	  relation 3619458 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3619458 // <realization>
	    b parent class_ref 1119362 // FutureTask
	end

	operation 9165186 "QueueingFuture"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "task" type class_ref 1066114 // RunnableFuture
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9165314 "done"
	  cpp_inline protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3619586 // task (<unidirectional association>)
	  relation 3619586 --->
	    a role_name "task" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 3619586 // task (<unidirectional association>)
	    b parent class_ref 984706 // Future
	end
      end

      operation 9165442 "newTaskFor"
	cpp_inline private return_type class_ref 1066114 // RunnableFuture
	nparams 1
	  param inout name "task" type class_ref 339330 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9165570 "newTaskFor"
	cpp_inline private return_type class_ref 1066114 // RunnableFuture
	nparams 2
	  param inout name "task" type class_ref 128770 // Runnable
	  param inout name "result" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9165698 "ExecutorCompletionService"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ExecutorCompletionService using the supplied
executor for base task execution and a
{@link LinkedBlockingQueue} as a completion queue.

@param executor the executor to use
@throws NullPointerException if executor is {@code null}
"
      end

      operation 9165826 "ExecutorCompletionService"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "executor" type class_ref 503426 // Executor
	  param inout name "completionQueue" type class_ref 1099522 // BlockingQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Future<V>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ExecutorCompletionService using the supplied
executor for base task execution and the supplied queue as its
completion queue.

@param executor the executor to use
@param completionQueue the queue to use as the completion queue
       normally one dedicated for use by this service. This
       queue is treated as unbounded -- failed attempted
       {@code Queue.add} operations for completed tasks cause
       them not to be retrievable.
@throws NullPointerException if executor or completionQueue are {@code null}
"
      end

      operation 9165954 "submit"
	cpp_inline public return_type class_ref 984706 // Future
	nparams 1
	  param inout name "task" type class_ref 339330 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9166082 "submit"
	cpp_inline public return_type class_ref 984706 // Future
	nparams 2
	  param inout name "task" type class_ref 128770 // Runnable
	  param inout name "result" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9166210 "take"
	cpp_inline public return_type class_ref 984706 // Future
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9166338 "poll"
	cpp_inline public return_type class_ref 984706 // Future
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9166466 "poll"
	cpp_inline public return_type class_ref 984706 // Future
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1119362 "FutureTask"
      visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 1066114 // RunnableFuture
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A cancellable asynchronous computation.  This class provides a base
implementation of {@link Future}, with methods to start and cancel
a computation, query to see if the computation is complete, and
retrieve the result of the computation.  The result can only be
retrieved when the computation has completed; the {@code get}
methods will block if the computation has not yet completed.  Once
the computation has completed, the computation cannot be restarted
or cancelled (unless the computation is invoked using
{@link #runAndReset}).

<p>A {@code FutureTask} can be used to wrap a {@link Callable} or
{@link Runnable} object.  Because {@code FutureTask} implements
{@code Runnable}, a {@code FutureTask} can be submitted to an
{@link Executor} for execution.

<p>In addition to serving as a standalone class, this class provides
{@code protected} functionality that may be useful when creating
customized task classes.

@since 1.5
@author Doug Lea
@param <V> The result type returned by this FutureTask's {@code get} methods
"
      classrelation 3618562 // <realization>
	relation 3618562 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3618562 // <realization>
	  b parent class_ref 1066114 // RunnableFuture
      end

      attribute 2130946 "state"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Revision notes: This differs from previous versions of this
class that relied on AbstractQueuedSynchronizer, mainly to
avoid surprising users about retaining interrupt status during
cancellation races. Sync control in the current design relies
on a \"state\" field updated via CAS to track completion, along
with a simple Treiber stack to hold waiting threads.

Style note: As usual, we bypass overhead of using
AtomicXFieldUpdaters and instead directly use Unsafe intrinsics.


The run state of this task, initially NEW.  The run state
transitions to a terminal state only in methods set,
setException, and cancel.  During completion, state may take on
transient values of COMPLETING (while outcome is being set) or
INTERRUPTING (only while interrupting the runner to satisfy a
cancel(true)). Transitions from these intermediate to final
states use cheaper ordered/lazy writes because values are unique
and cannot be further modified.

Possible state transitions:
NEW -> COMPLETING -> NORMAL
NEW -> COMPLETING -> EXCEPTIONAL
NEW -> CANCELLED
NEW -> INTERRUPTING -> INTERRUPTED

"
      end

      attribute 2131074 "NEW"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2131202 "COMPLETING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2131330 "NORMAL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2131458 "EXCEPTIONAL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2131586 "CANCELLED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2131714 "INTERRUPTING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2131842 "INTERRUPTED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3618690 // callable (<unidirectional association>)
	relation 3618690 --->
	  a role_name "callable" private
	    comment " The underlying callable; nulled out after running 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	    classrelation_ref 3618690 // callable (<unidirectional association>)
	  b parent class_ref 339330 // Callable
      end

      classrelation 3618818 // outcome (<unidirectional association>)
	relation 3618818 --->
	  a role_name "outcome" private
	    comment " The result to return or exception to throw from get() 
 non-volatile, protected by state reads/writes"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3618818 // outcome (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3618946 // runner (<unidirectional association>)
	relation 3618946 --->
	  a role_name "runner" volatile private
	    comment " The thread running the callable; CASed during run() 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3618946 // runner (<unidirectional association>)
	  b parent class_ref 128642 // Thread
      end

      class 1119490 "WaitNode"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3619202 // thread (<unidirectional association>)
	  relation 3619202 --->
	    a role_name "thread" volatile package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3619202 // thread (<unidirectional association>)
	    b parent class_ref 128642 // Thread
	end

	classrelation 3619330 // next (<unidirectional association>)
	  relation 3619330 --->
	    a role_name "next" volatile package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3619330 // next (<unidirectional association>)
	    b parent class_ref 1119490 // WaitNode
	end

	operation 9164674 "WaitNode"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3619074 // waiters (<unidirectional association>)
	relation 3619074 --->
	  a role_name "waiters" volatile private
	    comment " Treiber stack of waiting threads 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3619074 // waiters (<unidirectional association>)
	  b parent class_ref 1119490 // WaitNode
      end

      operation 9162882 "report"
	cpp_inline private explicit_return_type "V"
	nparams 1
	  param in name "s" explicit_type "int"
	nexceptions 1
	  exception class_ref 1065474 // ExecutionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns result or throws exception for completed task.

@param s completed state value
"
      end

      operation 9163010 "FutureTask"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "callable" type class_ref 339330 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code FutureTask} that will, upon running, execute the
given {@code Callable}.

@param  callable the callable task
@throws NullPointerException if the callable is null
"
      end

      operation 9163138 "FutureTask"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "runnable" type class_ref 128770 // Runnable
	  param inout name "result" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code FutureTask} that will, upon running, execute the
given {@code Runnable}, and arrange that {@code get} will return the
given result on successful completion.

@param runnable the runnable task
@param result the result to return on successful completion. If
you don't need a particular result, consider using
constructions of the form:
{@code Future<?> f = new FutureTask<Void>(runnable, null)}
@throws NullPointerException if the runnable is null
"
      end

      operation 9163266 "isCancelled"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9163394 "isDone"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9163522 "cancel"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "mayInterruptIfRunning" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9163650 "get"
	cpp_inline public explicit_return_type "V"
	nparams 0
	nexceptions 2
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws CancellationException {@inheritDoc}
"
      end

      operation 9163778 "get"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 3
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065474 // ExecutionException
	  exception class_ref 1065602 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws CancellationException {@inheritDoc}
"
      end

      operation 9163906 "done"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected method invoked when this task transitions to state
{@code isDone} (whether normally or via cancellation). The
default implementation does nothing.  Subclasses may override
this method to invoke completion callbacks or perform
bookkeeping. Note that you can query status inside the
implementation of this method to determine whether this task
has been cancelled.
"
      end

      operation 9164034 "set"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "v" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the result of this future to the given value unless
this future has already been set or has been cancelled.

<p>This method is invoked internally by the {@link #run} method
upon successful completion of the computation.

@param v the value
"
      end

      operation 9164162 "setException"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes this future to report an {@link ExecutionException}
with the given throwable as its cause, unless this future has
already been set or has been cancelled.

<p>This method is invoked internally by the {@link #run} method
upon failure of the computation.

@param t the cause of failure
"
      end

      operation 9164290 "run"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9164418 "runAndReset"
	cpp_inline protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the computation without setting its result, and then
resets this future to initial state, failing to do so if the
computation encounters an exception or is cancelled.  This is
designed for use with tasks that intrinsically execute more
than once.

@return {@code true} if successfully run and reset
"
      end

      operation 9164546 "handlePossibleCancellationInterrupt"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that any interrupt from a possible cancel(true) is only
delivered to a task while in run or runAndReset.
"
      end

      operation 9164802 "finishCompletion"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and signals all waiting threads, invokes done(), and
nulls out callable.
"
      end

      operation 9164930 "awaitDone"
	cpp_inline private explicit_return_type "int"
	nparams 2
	  param inout name "timed" explicit_type "boolean"
	  param in name "nanos" explicit_type "long"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Awaits completion or aborts on interrupt or timeout.

@param timed true if use timed waits
@param nanos time to wait, if timed
@return state upon completion
"
      end

      operation 9165058 "removeWaiter"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 1119490 // WaitNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to unlink a timed-out or interrupted wait node to avoid
accumulating garbage.  Internal nodes are simply unspliced
without CAS since it is harmless if they are traversed anyway
by releasers.  To avoid effects of unsplicing from already
removed nodes, the list is retraversed in case of an apparent
race.  This is slow when there are a lot of nodes, but we don't
expect lists to be long enough to outweigh higher-overhead
schemes.
"
      end

      attribute 2131970 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2132098 "stateOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2132226 "runnerOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2132354 "waitersOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 174722 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = FutureTask.class;
            stateOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"state\"));
            runnerOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"runner\"));
            waitersOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"waiters\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 1119618 "Executors"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Factory and utility methods for {@link Executor}, {@link
ExecutorService}, {@link ScheduledExecutorService}, {@link
ThreadFactory}, and {@link Callable} classes defined in this
package. This class supports the following kinds of methods:

<ul>
  <li> Methods that create and return an {@link ExecutorService}
       set up with commonly useful configuration settings.
  <li> Methods that create and return a {@link ScheduledExecutorService}
       set up with commonly useful configuration settings.
  <li> Methods that create and return a \"wrapped\" ExecutorService, that
       disables reconfiguration by making implementation-specific methods
       inaccessible.
  <li> Methods that create and return a {@link ThreadFactory}
       that sets newly created threads to a known state.
  <li> Methods that create and return a {@link Callable}
       out of other closure-like forms, so they can be used
       in execution methods requiring {@code Callable}.
</ul>

@since 1.5
@author Doug Lea
"
      operation 9166594 "newFixedThreadPool"
	class_operation public return_type class_ref 985218 // ExecutorService
	nparams 1
	  param in name "nThreads" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that reuses a fixed number of threads
operating off a shared unbounded queue.  At any point, at most
{@code nThreads} threads will be active processing tasks.
If additional tasks are submitted when all threads are active,
they will wait in the queue until a thread is available.
If any thread terminates due to a failure during execution
prior to shutdown, a new one will take its place if needed to
execute subsequent tasks.  The threads in the pool will exist
until it is explicitly {@link ExecutorService#shutdown shutdown}.

@param nThreads the number of threads in the pool
@return the newly created thread pool
@throws IllegalArgumentException if {@code nThreads <= 0}
"
      end

      operation 9166722 "newWorkStealingPool"
	class_operation public return_type class_ref 985218 // ExecutorService
	nparams 1
	  param in name "parallelism" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that maintains enough threads to support
the given parallelism level, and may use multiple queues to
reduce contention. The parallelism level corresponds to the
maximum number of threads actively engaged in, or available to
engage in, task processing. The actual number of threads may
grow and shrink dynamically. A work-stealing pool makes no
guarantees about the order in which submitted tasks are
executed.

@param parallelism the targeted parallelism level
@return the newly created thread pool
@throws IllegalArgumentException if {@code parallelism <= 0}
@since 1.8
"
      end

      operation 9166850 "newWorkStealingPool"
	class_operation public return_type class_ref 985218 // ExecutorService
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a work-stealing thread pool using all
{@link Runtime#availableProcessors available processors}
as its target parallelism level.
@return the newly created thread pool
@see #newWorkStealingPool(int)
@since 1.8
"
      end

      operation 9166978 "newFixedThreadPool"
	class_operation public return_type class_ref 985218 // ExecutorService
	nparams 2
	  param in name "nThreads" explicit_type "int"
	  param inout name "threadFactory" type class_ref 985090 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that reuses a fixed number of threads
operating off a shared unbounded queue, using the provided
ThreadFactory to create new threads when needed.  At any point,
at most {@code nThreads} threads will be active processing
tasks.  If additional tasks are submitted when all threads are
active, they will wait in the queue until a thread is
available.  If any thread terminates due to a failure during
execution prior to shutdown, a new one will take its place if
needed to execute subsequent tasks.  The threads in the pool will
exist until it is explicitly {@link ExecutorService#shutdown
shutdown}.

@param nThreads the number of threads in the pool
@param threadFactory the factory to use when creating new threads
@return the newly created thread pool
@throws NullPointerException if threadFactory is null
@throws IllegalArgumentException if {@code nThreads <= 0}
"
      end

      operation 9167106 "newSingleThreadExecutor"
	class_operation public return_type class_ref 985218 // ExecutorService
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an Executor that uses a single worker thread operating
off an unbounded queue. (Note however that if this single
thread terminates due to a failure during execution prior to
shutdown, a new one will take its place if needed to execute
subsequent tasks.)  Tasks are guaranteed to execute
sequentially, and no more than one task will be active at any
given time. Unlike the otherwise equivalent
{@code newFixedThreadPool(1)} the returned executor is
guaranteed not to be reconfigurable to use additional threads.

@return the newly created single-threaded Executor
"
      end

      operation 9167234 "newSingleThreadExecutor"
	class_operation public return_type class_ref 985218 // ExecutorService
	nparams 1
	  param inout name "threadFactory" type class_ref 985090 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an Executor that uses a single worker thread operating
off an unbounded queue, and uses the provided ThreadFactory to
create a new thread when needed. Unlike the otherwise
equivalent {@code newFixedThreadPool(1, threadFactory)} the
returned executor is guaranteed not to be reconfigurable to use
additional threads.

@param threadFactory the factory to use when creating new
threads

@return the newly created single-threaded Executor
@throws NullPointerException if threadFactory is null
"
      end

      operation 9167362 "newCachedThreadPool"
	class_operation public return_type class_ref 985218 // ExecutorService
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that creates new threads as needed, but
will reuse previously constructed threads when they are
available.  These pools will typically improve the performance
of programs that execute many short-lived asynchronous tasks.
Calls to {@code execute} will reuse previously constructed
threads if available. If no existing thread is available, a new
thread will be created and added to the pool. Threads that have
not been used for sixty seconds are terminated and removed from
the cache. Thus, a pool that remains idle for long enough will
not consume any resources. Note that pools with similar
properties but different details (for example, timeout parameters)
may be created using {@link ThreadPoolExecutor} constructors.

@return the newly created thread pool
"
      end

      operation 9167490 "newCachedThreadPool"
	class_operation public return_type class_ref 985218 // ExecutorService
	nparams 1
	  param inout name "threadFactory" type class_ref 985090 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that creates new threads as needed, but
will reuse previously constructed threads when they are
available, and uses the provided
ThreadFactory to create new threads when needed.
@param threadFactory the factory to use when creating new threads
@return the newly created thread pool
@throws NullPointerException if threadFactory is null
"
      end

      operation 9167618 "newSingleThreadScheduledExecutor"
	class_operation public return_type class_ref 1119746 // ScheduledExecutorService
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a single-threaded executor that can schedule commands
to run after a given delay, or to execute periodically.
(Note however that if this single
thread terminates due to a failure during execution prior to
shutdown, a new one will take its place if needed to execute
subsequent tasks.)  Tasks are guaranteed to execute
sequentially, and no more than one task will be active at any
given time. Unlike the otherwise equivalent
{@code newScheduledThreadPool(1)} the returned executor is
guaranteed not to be reconfigurable to use additional threads.
@return the newly created scheduled executor
"
      end

      operation 9167746 "newSingleThreadScheduledExecutor"
	class_operation public return_type class_ref 1119746 // ScheduledExecutorService
	nparams 1
	  param inout name "threadFactory" type class_ref 985090 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a single-threaded executor that can schedule commands
to run after a given delay, or to execute periodically.  (Note
however that if this single thread terminates due to a failure
during execution prior to shutdown, a new one will take its
place if needed to execute subsequent tasks.)  Tasks are
guaranteed to execute sequentially, and no more than one task
will be active at any given time. Unlike the otherwise
equivalent {@code newScheduledThreadPool(1, threadFactory)}
the returned executor is guaranteed not to be reconfigurable to
use additional threads.
@param threadFactory the factory to use when creating new
threads
@return a newly created scheduled executor
@throws NullPointerException if threadFactory is null
"
      end

      operation 9167874 "newScheduledThreadPool"
	class_operation public return_type class_ref 1119746 // ScheduledExecutorService
	nparams 1
	  param in name "corePoolSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that can schedule commands to run after a
given delay, or to execute periodically.
@param corePoolSize the number of threads to keep in the pool,
even if they are idle
@return a newly created scheduled thread pool
@throws IllegalArgumentException if {@code corePoolSize < 0}
"
      end

      operation 9168002 "newScheduledThreadPool"
	class_operation public return_type class_ref 1119746 // ScheduledExecutorService
	nparams 2
	  param in name "corePoolSize" explicit_type "int"
	  param inout name "threadFactory" type class_ref 985090 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that can schedule commands to run after a
given delay, or to execute periodically.
@param corePoolSize the number of threads to keep in the pool,
even if they are idle
@param threadFactory the factory to use when the executor
creates a new thread
@return a newly created scheduled thread pool
@throws IllegalArgumentException if {@code corePoolSize < 0}
@throws NullPointerException if threadFactory is null
"
      end

      operation 9168130 "unconfigurableExecutorService"
	class_operation public return_type class_ref 985218 // ExecutorService
	nparams 1
	  param inout name "executor" type class_ref 985218 // ExecutorService
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object that delegates all defined {@link
ExecutorService} methods to the given executor, but not any
other methods that might otherwise be accessible using
casts. This provides a way to safely \"freeze\" configuration and
disallow tuning of a given concrete implementation.
@param executor the underlying implementation
@return an {@code ExecutorService} instance
@throws NullPointerException if executor null
"
      end

      operation 9168258 "unconfigurableScheduledExecutorService"
	class_operation public return_type class_ref 1119746 // ScheduledExecutorService
	nparams 1
	  param inout name "executor" type class_ref 1119746 // ScheduledExecutorService
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object that delegates all defined {@link
ScheduledExecutorService} methods to the given executor, but
not any other methods that might otherwise be accessible using
casts. This provides a way to safely \"freeze\" configuration and
disallow tuning of a given concrete implementation.
@param executor the underlying implementation
@return a {@code ScheduledExecutorService} instance
@throws NullPointerException if executor null
"
      end

      operation 9168386 "defaultThreadFactory"
	class_operation public return_type class_ref 985090 // ThreadFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a default thread factory used to create new threads.
This factory creates all new threads used by an Executor in the
same {@link ThreadGroup}. If there is a {@link
java.lang.SecurityManager}, it uses the group of {@link
System#getSecurityManager}, else the group of the thread
invoking this {@code defaultThreadFactory} method. Each new
thread is created as a non-daemon thread with priority set to
the smaller of {@code Thread.NORM_PRIORITY} and the maximum
priority permitted in the thread group.  New threads have names
accessible via {@link Thread#getName} of
<em>pool-N-thread-M</em>, where <em>N</em> is the sequence
number of this factory, and <em>M</em> is the sequence number
of the thread created by this factory.
@return a thread factory
"
      end

      operation 9168514 "privilegedThreadFactory"
	class_operation public return_type class_ref 985090 // ThreadFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a thread factory used to create new threads that
have the same permissions as the current thread.
This factory creates threads with the same settings as {@link
Executors#defaultThreadFactory}, additionally setting the
AccessControlContext and contextClassLoader of new threads to
be the same as the thread invoking this
{@code privilegedThreadFactory} method.  A new
{@code privilegedThreadFactory} can be created within an
{@link AccessController#doPrivileged AccessController.doPrivileged}
action setting the current thread's access control context to
create threads with the selected permission settings holding
within that action.

<p>Note that while tasks running within such threads will have
the same access control and class loader settings as the
current thread, they need not have the same {@link
java.lang.ThreadLocal} or {@link
java.lang.InheritableThreadLocal} values. If necessary,
particular values of thread locals can be set or reset before
any task runs in {@link ThreadPoolExecutor} subclasses using
{@link ThreadPoolExecutor#beforeExecute(Thread, Runnable)}.
Also, if it is necessary to initialize worker threads to have
the same InheritableThreadLocal settings as some other
designated thread, you can create a custom ThreadFactory in
which that thread waits for and services requests to create
others that will inherit its values.

@return a thread factory
@throws AccessControlException if the current access control
context does not have permission to both get and set context
class loader
"
      end

      operation 9168642 "callable"
	class_operation public return_type class_ref 339330 // Callable
	nparams 2
	  param inout name "task" type class_ref 128770 // Runnable
	  param inout name "result" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that, when
called, runs the given task and returns the given result.  This
can be useful when applying methods requiring a
{@code Callable} to an otherwise resultless action.
@param task the task to run
@param result the result to return
@param <T> the type of the result
@return a callable object
@throws NullPointerException if task null
"
      end

      operation 9168770 "callable"
	class_operation public return_type class_ref 339330 // Callable
	nparams 1
	  param inout name "task" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that, when
called, runs the given task and returns {@code null}.
@param task the task to run
@return a callable object
@throws NullPointerException if task null
"
      end

      operation 9168898 "callable"
	class_operation public return_type class_ref 339330 // Callable
	nparams 1
	  param in name "action" type class_ref 250114 // PrivilegedAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}final ${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that, when
called, runs the given privileged action and returns its result.
@param action the privileged action to run
@return a callable object
@throws NullPointerException if action null
"
      end

      operation 9169026 "callable"
	class_operation public return_type class_ref 339330 // Callable
	nparams 1
	  param in name "action" type class_ref 320514 // PrivilegedExceptionAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}final ${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that, when
called, runs the given privileged exception action and returns
its result.
@param action the privileged exception action to run
@return a callable object
@throws NullPointerException if action null
"
      end

      operation 9169154 "privilegedCallable"
	class_operation public return_type class_ref 339330 // Callable
	nparams 1
	  param inout name "callable" type class_ref 339330 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that will, when called,
execute the given {@code callable} under the current access
control context. This method should normally be invoked within
an {@link AccessController#doPrivileged AccessController.doPrivileged}
action to create callables that will, if possible, execute
under the selected permission settings holding within that
action; or if not possible, throw an associated {@link
AccessControlException}.
@param callable the underlying task
@param <T> the type of the callable's result
@return a callable object
@throws NullPointerException if callable null
"
      end

      operation 9169282 "privilegedCallableUsingCurrentClassLoader"
	class_operation public return_type class_ref 339330 // Callable
	nparams 1
	  param inout name "callable" type class_ref 339330 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that will, when called,
execute the given {@code callable} under the current access
control context, with the current context class loader as the
context class loader. This method should normally be invoked
within an
{@link AccessController#doPrivileged AccessController.doPrivileged}
action to create callables that will, if possible, execute
under the selected permission settings holding within that
action; or if not possible, throw an associated {@link
AccessControlException}.

@param callable the underlying task
@param <T> the type of the callable's result
@return a callable object
@throws NullPointerException if callable null
@throws AccessControlException if the current access control
context does not have permission to both set and get context
class loader
"
      end

      class 1119874 "RunnableAdapter"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 339330 // Callable
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3619714 // <realization>
	  relation 3619714 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3619714 // <realization>
	    b parent class_ref 339330 // Callable
	end

	classrelation 3619842 // task (<unidirectional association>)
	  relation 3619842 --->
	    a role_name "task" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3619842 // task (<unidirectional association>)
	    b parent class_ref 128770 // Runnable
	end

	attribute 2132482 "result"
	  const_attribute package explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9169410 "RunnableAdapter"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "task" type class_ref 128770 // Runnable
	    param inout name "result" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9169538 "call"
	  cpp_inline public explicit_return_type "T"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1120002 "PrivilegedCallable"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 339330 // Callable
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3619970 // <realization>
	  relation 3619970 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3619970 // <realization>
	    b parent class_ref 339330 // Callable
	end

	classrelation 3620098 // task (<unidirectional association>)
	  relation 3620098 --->
	    a role_name "task" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3620098 // task (<unidirectional association>)
	    b parent class_ref 339330 // Callable
	end

	classrelation 3620226 // acc (<unidirectional association>)
	  relation 3620226 --->
	    a role_name "acc" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3620226 // acc (<unidirectional association>)
	    b parent class_ref 129154 // AccessControlContext
	end

	operation 9169666 "PrivilegedCallable"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "task" type class_ref 339330 // Callable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9169794 "call"
	  cpp_inline public explicit_return_type "T"
	  nparams 0
	  nexceptions 1
	    exception class_ref 132226 // Exception
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1120130 "PrivilegedCallableUsingCurrentClassLoader"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 339330 // Callable
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3620354 // <realization>
	  relation 3620354 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3620354 // <realization>
	    b parent class_ref 339330 // Callable
	end

	classrelation 3620482 // task (<unidirectional association>)
	  relation 3620482 --->
	    a role_name "task" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3620482 // task (<unidirectional association>)
	    b parent class_ref 339330 // Callable
	end

	classrelation 3620610 // acc (<unidirectional association>)
	  relation 3620610 --->
	    a role_name "acc" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3620610 // acc (<unidirectional association>)
	    b parent class_ref 129154 // AccessControlContext
	end

	classrelation 3620738 // ccl (<unidirectional association>)
	  relation 3620738 --->
	    a role_name "ccl" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3620738 // ccl (<unidirectional association>)
	    b parent class_ref 129026 // ClassLoader
	end

	operation 9169922 "PrivilegedCallableUsingCurrentClassLoader"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "task" type class_ref 339330 // Callable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9170050 "call"
	  cpp_inline public explicit_return_type "T"
	  nparams 0
	  nexceptions 1
	    exception class_ref 132226 // Exception
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1120258 "DefaultThreadFactory"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3620866 // <realization>
	  relation 3620866 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3620866 // <realization>
	    b parent class_ref 985090 // ThreadFactory
	end

	classrelation 3620994 // poolNumber (<unidirectional association>)
	  relation 3620994 --->
	    a role_name "poolNumber" init_value " new AtomicInteger(1)" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3620994 // poolNumber (<unidirectional association>)
	    b parent class_ref 191490 // AtomicInteger
	end

	classrelation 3621122 // group (<unidirectional association>)
	  relation 3621122 --->
	    a role_name "group" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3621122 // group (<unidirectional association>)
	    b parent class_ref 128898 // ThreadGroup
	end

	classrelation 3621250 // threadNumber (<unidirectional association>)
	  relation 3621250 --->
	    a role_name "threadNumber" init_value " new AtomicInteger(1)" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3621250 // threadNumber (<unidirectional association>)
	    b parent class_ref 191490 // AtomicInteger
	end

	classrelation 3621378 // namePrefix (<unidirectional association>)
	  relation 3621378 --->
	    a role_name "namePrefix" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3621378 // namePrefix (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 9170306 "DefaultThreadFactory"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9170434 "newThread"
	  public return_type class_ref 128642 // Thread
	  nparams 1
	    param inout name "r" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1120386 "PrivilegedThreadFactory"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3621506 // <generalisation>
	  relation 3621506 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3621506 // <generalisation>
	    b parent class_ref 1120258 // DefaultThreadFactory
	end

	classrelation 3621634 // acc (<unidirectional association>)
	  relation 3621634 --->
	    a role_name "acc" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3621634 // acc (<unidirectional association>)
	    b parent class_ref 129154 // AccessControlContext
	end

	classrelation 3621762 // ccl (<unidirectional association>)
	  relation 3621762 --->
	    a role_name "ccl" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3621762 // ccl (<unidirectional association>)
	    b parent class_ref 129026 // ClassLoader
	end

	operation 9170562 "PrivilegedThreadFactory"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9170690 "newThread"
	  public return_type class_ref 128642 // Thread
	  nparams 1
	    param in name "r" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1120514 "DelegatedExecutorService"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3621890 // <generalisation>
	  relation 3621890 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3621890 // <generalisation>
	    b parent class_ref 1099266 // AbstractExecutorService
	end

	classrelation 3622018 // e (<unidirectional association>)
	  relation 3622018 --->
	    a role_name "e" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3622018 // e (<unidirectional association>)
	    b parent class_ref 985218 // ExecutorService
	end

	operation 9170818 "DelegatedExecutorService"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "executor" type class_ref 985218 // ExecutorService
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9170946 "execute"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "command" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9171074 "shutdown"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9171202 "shutdownNow"
	  public return_type class_ref 175362 // List
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9171330 "isShutdown"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9171458 "isTerminated"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9171586 "awaitTermination"
	  public explicit_return_type "boolean"
	  nparams 2
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 935938 // TimeUnit
	  nexceptions 1
	    exception class_ref 129666 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9171714 "submit"
	  public return_type class_ref 984706 // Future
	  nparams 1
	    param inout name "task" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9171842 "submit"
	  public return_type class_ref 984706 // Future
	  nparams 1
	    param inout name "task" type class_ref 339330 // Callable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9171970 "submit"
	  public return_type class_ref 984706 // Future
	  nparams 2
	    param inout name "task" type class_ref 128770 // Runnable
	    param inout name "result" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9172098 "invokeAll"
	  public return_type class_ref 175362 // List
	  nparams 1
	    param inout name "tasks" type class_ref 184194 // Collection
	  nexceptions 1
	    exception class_ref 129666 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9172226 "invokeAll"
	  public return_type class_ref 175362 // List
	  nparams 3
	    param inout name "tasks" type class_ref 184194 // Collection
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 935938 // TimeUnit
	  nexceptions 1
	    exception class_ref 129666 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9172354 "invokeAny"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "tasks" type class_ref 184194 // Collection
	  nexceptions 2
	    exception class_ref 129666 // InterruptedException
	    exception class_ref 1065474 // ExecutionException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9172482 "invokeAny"
	  public explicit_return_type "T"
	  nparams 3
	    param inout name "tasks" type class_ref 184194 // Collection
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 935938 // TimeUnit
	  nexceptions 3
	    exception class_ref 129666 // InterruptedException
	    exception class_ref 1065474 // ExecutionException
	    exception class_ref 1065602 // TimeoutException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1120642 "FinalizableDelegatedExecutorService"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3622146 // <generalisation>
	  relation 3622146 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3622146 // <generalisation>
	    b parent class_ref 1120514 // DelegatedExecutorService
	end

	operation 9172610 "FinalizableDelegatedExecutorService"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "executor" type class_ref 985218 // ExecutorService
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9172738 "finalize"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1120770 "DelegatedScheduledExecutorService"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3622274 // <generalisation>
	  relation 3622274 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3622274 // <generalisation>
	    b parent class_ref 1120514 // DelegatedExecutorService
	end

	classrelation 3622530 // <realization>
	  relation 3622530 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3622530 // <realization>
	    b parent class_ref 1119746 // ScheduledExecutorService
	end

	classrelation 3622658 // e (<unidirectional association>)
	  relation 3622658 --->
	    a role_name "e" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3622658 // e (<unidirectional association>)
	    b parent class_ref 1119746 // ScheduledExecutorService
	end

	operation 9173378 "DelegatedScheduledExecutorService"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "executor" type class_ref 1119746 // ScheduledExecutorService
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9173506 "schedule"
	  public return_type class_ref 1120898 // ScheduledFuture
	  nparams 3
	    param inout name "command" type class_ref 128770 // Runnable
	    param in name "delay" explicit_type "long"
	    param inout name "unit" type class_ref 935938 // TimeUnit
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9173634 "schedule"
	  public return_type class_ref 1120898 // ScheduledFuture
	  nparams 3
	    param inout name "callable" type class_ref 339330 // Callable
	    param in name "delay" explicit_type "long"
	    param inout name "unit" type class_ref 935938 // TimeUnit
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0}<V> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9173762 "scheduleAtFixedRate"
	  public return_type class_ref 1120898 // ScheduledFuture
	  nparams 4
	    param inout name "command" type class_ref 128770 // Runnable
	    param in name "initialDelay" explicit_type "long"
	    param in name "period" explicit_type "long"
	    param inout name "unit" type class_ref 935938 // TimeUnit
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9173890 "scheduleWithFixedDelay"
	  public return_type class_ref 1120898 // ScheduledFuture
	  nparams 4
	    param inout name "command" type class_ref 128770 // Runnable
	    param in name "initialDelay" explicit_type "long"
	    param in name "delay" explicit_type "long"
	    param inout name "unit" type class_ref 935938 // TimeUnit
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9174018 "Executors"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Cannot instantiate. "
      end
    end

    class 1119746 "ScheduledExecutorService"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An {@link ExecutorService} that can schedule commands to run after a given
delay, or to execute periodically.

<p>The {@code schedule} methods create tasks with various delays
and return a task object that can be used to cancel or check
execution. The {@code scheduleAtFixedRate} and
{@code scheduleWithFixedDelay} methods create and execute tasks
that run periodically until cancelled.

<p>Commands submitted using the {@link Executor#execute(Runnable)}
and {@link ExecutorService} {@code submit} methods are scheduled
with a requested delay of zero. Zero and negative delays (but not
periods) are also allowed in {@code schedule} methods, and are
treated as requests for immediate execution.

<p>All {@code schedule} methods accept <em>relative</em> delays and
periods as arguments, not absolute times or dates. It is a simple
matter to transform an absolute time represented as a {@link
java.util.Date} to the required form. For example, to schedule at
a certain future {@code date}, you can use: {@code schedule(task,
date.getTime() - System.currentTimeMillis(),
TimeUnit.MILLISECONDS)}. Beware however that expiration of a
relative delay need not coincide with the current {@code Date} at
which the task is enabled due to network time synchronization
protocols, clock drift, or other factors.

<p>The {@link Executors} class provides convenient factory methods for
the ScheduledExecutorService implementations provided in this package.

<h3>Usage Example</h3>

Here is a class with a method that sets up a ScheduledExecutorService
to beep every ten seconds for an hour:

 <pre> {@code
import static java.util.concurrent.TimeUnit.*;
class BeeperControl {
  private final ScheduledExecutorService scheduler =
    Executors.newScheduledThreadPool(1);

  public void beepForAnHour() {
    final Runnable beeper = new Runnable() {
      public void run() { System.out.println(\"beep\"); }
    };
    final ScheduledFuture<?> beeperHandle =
      scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);
    scheduler.schedule(new Runnable() {
      public void run() { beeperHandle.cancel(true); }
    }, 60 * 60, SECONDS);
  }
}}</pre>

@since 1.5
@author Doug Lea
"
      classrelation 3622402 // <generalisation>
	relation 3622402 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3622402 // <generalisation>
	  b parent class_ref 985218 // ExecutorService
      end

      operation 9172866 "schedule"
	public return_type class_ref 1120898 // ScheduledFuture
	nparams 3
	  param inout name "command" type class_ref 128770 // Runnable
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and executes a one-shot action that becomes enabled
after the given delay.

@param command the task to execute
@param delay the time from now to delay execution
@param unit the time unit of the delay parameter
@return a ScheduledFuture representing pending completion of
        the task and whose {@code get()} method will return
        {@code null} upon completion
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if command is null
"
      end

      operation 9172994 "schedule"
	public return_type class_ref 1120898 // ScheduledFuture
	nparams 3
	  param inout name "callable" type class_ref 339330 // Callable
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0}<V> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and executes a ScheduledFuture that becomes enabled after the
given delay.

@param callable the function to execute
@param delay the time from now to delay execution
@param unit the time unit of the delay parameter
@param <V> the type of the callable's result
@return a ScheduledFuture that can be used to extract result or cancel
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if callable is null
"
      end

      operation 9173122 "scheduleAtFixedRate"
	public return_type class_ref 1120898 // ScheduledFuture
	nparams 4
	  param inout name "command" type class_ref 128770 // Runnable
	  param in name "initialDelay" explicit_type "long"
	  param in name "period" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and executes a periodic action that becomes enabled first
after the given initial delay, and subsequently with the given
period; that is executions will commence after
{@code initialDelay} then {@code initialDelay+period}, then
{@code initialDelay + 2 * period}, and so on.
If any execution of the task
encounters an exception, subsequent executions are suppressed.
Otherwise, the task will only terminate via cancellation or
termination of the executor.  If any execution of this task
takes longer than its period, then subsequent executions
may start late, but will not concurrently execute.

@param command the task to execute
@param initialDelay the time to delay first execution
@param period the period between successive executions
@param unit the time unit of the initialDelay and period parameters
@return a ScheduledFuture representing pending completion of
        the task, and whose {@code get()} method will throw an
        exception upon cancellation
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if command is null
@throws IllegalArgumentException if period less than or equal to zero
"
      end

      operation 9173250 "scheduleWithFixedDelay"
	public return_type class_ref 1120898 // ScheduledFuture
	nparams 4
	  param inout name "command" type class_ref 128770 // Runnable
	  param in name "initialDelay" explicit_type "long"
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and executes a periodic action that becomes enabled first
after the given initial delay, and subsequently with the
given delay between the termination of one execution and the
commencement of the next.  If any execution of the task
encounters an exception, subsequent executions are suppressed.
Otherwise, the task will only terminate via cancellation or
termination of the executor.

@param command the task to execute
@param initialDelay the time to delay first execution
@param delay the delay between the termination of one
execution and the commencement of the next
@param unit the time unit of the initialDelay and delay parameters
@return a ScheduledFuture representing pending completion of
        the task, and whose {@code get()} method will throw an
        exception upon cancellation
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if command is null
@throws IllegalArgumentException if delay less than or equal to zero
"
      end
    end

    class 1120898 "ScheduledFuture"
      visibility public stereotype "interface"
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 984706 // Future
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A delayed result-bearing action that can be cancelled.
Usually a scheduled future is the result of scheduling
a task with a {@link ScheduledExecutorService}.

@since 1.5
@author Doug Lea
@param <V> The result type returned by this Future
"
      classrelation 3633282 // <generalisation>
	relation 3633282 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3633282 // <generalisation>
	  b parent class_ref 1118338 // Delayed
      end

      classrelation 3633410 // <realization>
	relation 3633410 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3633410 // <realization>
	  b parent class_ref 984706 // Future
      end
    end

    class 1121154 "LinkedBlockingDeque"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1064066 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 1100034 // BlockingDeque
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An optionally-bounded {@linkplain BlockingDeque blocking deque} based on
linked nodes.

<p>The optional capacity bound constructor argument serves as a
way to prevent excessive expansion. The capacity, if unspecified,
is equal to {@link Integer#MAX_VALUE}.  Linked nodes are
dynamically created upon each insertion unless this would bring the
deque above capacity.

<p>Most operations run in constant time (ignoring time spent
blocking).  Exceptions include {@link #remove(Object) remove},
{@link #removeFirstOccurrence removeFirstOccurrence}, {@link
#removeLastOccurrence removeLastOccurrence}, {@link #contains
contains}, {@link #iterator iterator.remove()}, and the bulk
operations, all of which run in linear time.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.6
@author  Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 3623554 // <realization>
	relation 3623554 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3623554 // <realization>
	  b parent class_ref 1064066 // AbstractQueue
      end

      classrelation 3623682 // <realization>
	relation 3623682 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3623682 // <realization>
	  b parent class_ref 1100034 // BlockingDeque
      end

      classrelation 3623810 // <realization>
	relation 3623810 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3623810 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2133122 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -387911632671998426L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Implemented as a simple doubly-linked list protected by a
single lock and using conditions to manage blocking.

To implement weakly consistent iterators, it appears we need to
keep all Nodes GC-reachable from a predecessor dequeued Node.
That would cause two problems:
- allow a rogue Iterator to cause unbounded memory retention
- cause cross-generational linking of old Nodes to new Nodes if
  a Node was tenured while live, which generational GCs have a
  hard time dealing with, causing repeated major collections.
However, only non-deleted Nodes need to be reachable from
dequeued Nodes, and reachability does not necessarily have to
be of the kind understood by the GC.  We use the trick of
linking a Node that has just been dequeued to itself.  Such a
self-link implicitly means to jump to \"first\" (for next links)
or \"last\" (for prev links).


We have \"diamond\" multiple interface/abstract class inheritance
here, and that introduces ambiguities. Often we want the
BlockingDeque javadoc combined with the AbstractQueue
implementation, so a lot of method specs are duplicated here.

"
      end

      class 1121282 "Node"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2133250 "item"
	  package explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The item, or null if this node has been removed.

"
	end

	classrelation 3623938 // prev (<unidirectional association>)
	  relation 3623938 --->
	    a role_name "prev" package
	      comment "
One of:
- the real predecessor Node
- this Node, meaning the predecessor is tail
- null, meaning there is no predecessor

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3623938 // prev (<unidirectional association>)
	    b parent class_ref 1121282 // Node
	end

	classrelation 3624066 // next (<unidirectional association>)
	  relation 3624066 --->
	    a role_name "next" package
	      comment "
One of:
- the real successor Node
- this Node, meaning the successor is head
- null, meaning there is no successor

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3624066 // next (<unidirectional association>)
	    b parent class_ref 1121282 // Node
	end

	operation 9176066 "Node"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "x" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3624194 // first (<unidirectional association>)
	relation 3624194 --->
	  a role_name "first" package
	    comment "
Pointer to first node.
Invariant: (first == null && last == null) ||
           (first.prev == null && first.item != null)

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 3624194 // first (<unidirectional association>)
	  b parent class_ref 1121282 // Node
      end

      classrelation 3624322 // last (<unidirectional association>)
	relation 3624322 --->
	  a role_name "last" package
	    comment "
Pointer to last node.
Invariant: (first == null && last == null) ||
           (last.next == null && last.item != null)

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 3624322 // last (<unidirectional association>)
	  b parent class_ref 1121282 // Node
      end

      attribute 2133378 "count"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of items in the deque 
"
      end

      attribute 2133506 "capacity"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Maximum number of items in the deque 
"
      end

      classrelation 3624450 // lock (<unidirectional association>)
	relation 3624450 --->
	  a role_name "lock" init_value " new ReentrantLock()" const_relation package
	    comment " Main lock guarding all access 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3624450 // lock (<unidirectional association>)
	  b parent class_ref 968706 // ReentrantLock
      end

      classrelation 3624578 // notEmpty (<unidirectional association>)
	relation 3624578 --->
	  a role_name "notEmpty" init_value " lock.newCondition()" const_relation private
	    comment " Condition for waiting takes 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3624578 // notEmpty (<unidirectional association>)
	  b parent class_ref 864770 // Condition
      end

      classrelation 3624706 // notFull (<unidirectional association>)
	relation 3624706 --->
	  a role_name "notFull" init_value " lock.newCondition()" const_relation private
	    comment " Condition for waiting puts 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3624706 // notFull (<unidirectional association>)
	  b parent class_ref 864770 // Condition
      end

      operation 9176194 "LinkedBlockingDeque"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code LinkedBlockingDeque} with a capacity of
{@link Integer#MAX_VALUE}.
"
      end

      operation 9176322 "LinkedBlockingDeque"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code LinkedBlockingDeque} with the given (fixed) capacity.

@param capacity the capacity of this deque
@throws IllegalArgumentException if {@code capacity} is less than 1
"
      end

      operation 9176450 "LinkedBlockingDeque"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code LinkedBlockingDeque} with a capacity of
{@link Integer#MAX_VALUE}, initially containing the elements of
the given collection, added in traversal order of the
collection's iterator.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection or any
        of its elements are null
"
      end

      operation 9176578 "linkFirst"
	cpp_inline private explicit_return_type "boolean"
	nparams 1
	  param inout name "node" type class_ref 1121282 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Basic linking and unlinking operations, called only while holding lock

Links node as first element, or returns false if full.
"
      end

      operation 9176706 "linkLast"
	cpp_inline private explicit_return_type "boolean"
	nparams 1
	  param inout name "node" type class_ref 1121282 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Links node as last element, or returns false if full.
"
      end

      operation 9176834 "unlinkFirst"
	cpp_inline private explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns first element, or null if empty.
"
      end

      operation 9176962 "unlinkLast"
	cpp_inline private explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns last element, or null if empty.
"
      end

      operation 9177090 "unlink"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1121282 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlinks x.
"
      end

      operation 9177218 "addFirst"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " BlockingDeque methods

@throws IllegalStateException if this deque is full
@throws NullPointerException {@inheritDoc}
"
      end

      operation 9177346 "addLast"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalStateException if this deque is full
@throws NullPointerException  {@inheritDoc}
"
      end

      operation 9177474 "offerFirst"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
"
      end

      operation 9177602 "offerLast"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
"
      end

      operation 9177730 "putFirst"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}
"
      end

      operation 9177858 "putLast"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}
"
      end

      operation 9177986 "offerFirst"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}
"
      end

      operation 9178114 "offerLast"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}
"
      end

      operation 9178242 "removeFirst"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9178370 "removeLast"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9178498 "pollFirst"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9178626 "pollLast"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9178754 "takeFirst"
	cpp_inline public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9178882 "takeLast"
	cpp_inline public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9179010 "pollFirst"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9179138 "pollLast"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9179266 "getFirst"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9179394 "getLast"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9179522 "peekFirst"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9179650 "peekLast"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9179778 "removeFirstOccurrence"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9179906 "removeLastOccurrence"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9180034 "add"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " BlockingQueue methods

Inserts the specified element at the end of this deque unless it would
violate capacity restrictions.  When using a capacity-restricted deque,
it is generally preferable to use method {@link #offer(Object) offer}.

<p>This method is equivalent to {@link #addLast}.

@throws IllegalStateException if this deque is full
@throws NullPointerException if the specified element is null
"
      end

      operation 9180162 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException if the specified element is null
"
      end

      operation 9180290 "put"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}
"
      end

      operation 9180418 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}
"
      end

      operation 9180546 "remove"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of the queue represented by this deque.
This method differs from {@link #poll poll} only in that it throws an
exception if this deque is empty.

<p>This method is equivalent to {@link #removeFirst() removeFirst}.

@return the head of the queue represented by this deque
@throws NoSuchElementException if this deque is empty
"
      end

      operation 9180674 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9180802 "take"
	cpp_inline public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9180930 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9181058 "element"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves, but does not remove, the head of the queue represented by
this deque.  This method differs from {@link #peek peek} only in that
it throws an exception if this deque is empty.

<p>This method is equivalent to {@link #getFirst() getFirst}.

@return the head of the queue represented by this deque
@throws NoSuchElementException if this deque is empty
"
      end

      operation 9181186 "peek"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9181314 "remainingCapacity"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of additional elements that this deque can ideally
(in the absence of memory or resource constraints) accept without
blocking. This is always equal to the initial capacity of this deque
less the current {@code size} of this deque.

<p>Note that you <em>cannot</em> always tell if an attempt to insert
an element will succeed by inspecting {@code remainingCapacity}
because it may be the case that another thread is about to
insert or remove an element.
"
      end

      operation 9181442 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}
"
      end

      operation 9181570 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 184194 // Collection
	  param in name "maxElements" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}
"
      end

      operation 9181698 "push"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Stack methods

@throws IllegalStateException if this deque is full
@throws NullPointerException {@inheritDoc}
"
      end

      operation 9181826 "pop"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}
"
      end

      operation 9181954 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Collection methods

Removes the first occurrence of the specified element from this deque.
If the deque does not contain the element, it is unchanged.
More formally, removes the first element {@code e} such that
{@code o.equals(e)} (if such an element exists).
Returns {@code true} if this deque contained the specified element
(or equivalently, if this deque changed as a result of the call).

<p>This method is equivalent to
{@link #removeFirstOccurrence(Object) removeFirstOccurrence}.

@param o element to be removed from this deque, if present
@return {@code true} if this deque changed as a result of the call
"
      end

      operation 9182082 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this deque.

@return the number of elements in this deque
"
      end

      operation 9182210 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this deque contains the specified element.
More formally, returns {@code true} if and only if this deque contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this deque
@return {@code true} if this deque contains the specified element
"
      end

      operation 9182338 "toArray"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "TODO: Add support for more efficient bulk operations.

We don't want to acquire the lock for every iteration, but we
also want other threads a chance to interact with the
collection, especially when count is close to capacity.

     /**
      * Adds all of the elements in the specified collection to this
      * queue.  Attempts to addAll of a queue to itself result in
      * {@code IllegalArgumentException}. Further, the behavior of
      * this operation is undefined if the specified collection is
      * modified while the operation is in progress.
      *
      * @param c collection containing elements to be added to this queue
      * @return {@code true} if this queue changed as a result of the call
      * @throws ClassCastException            {@inheritDoc}
      * @throws NullPointerException          {@inheritDoc}
      * @throws IllegalArgumentException      {@inheritDoc}
      * @throws IllegalStateException if this deque is full
      * @see #add(Object)
      */
     public boolean addAll(Collection<? extends E> c) {
         if (c == null)
             throw new NullPointerException();
         if (c == this)
             throw new IllegalArgumentException();
         final ReentrantLock lock = this.lock;
         lock.lock();
         try {
             boolean modified = false;
             for (E e : c)
                 if (linkLast(e))
                     modified = true;
             return modified;
         } finally {
             lock.unlock();
         }
     }

Returns an array containing all of the elements in this deque, in
proper sequence (from first to last element).

<p>The returned array will be \"safe\" in that no references to it are
maintained by this deque.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this deque
"
      end

      operation 9182466 "toArray"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns an array containing all of the elements in this deque, in
proper sequence; the runtime type of the returned array is that of
the specified array.  If the deque fits in the specified array, it
is returned therein.  Otherwise, a new array is allocated with the
runtime type of the specified array and the size of this deque.

<p>If this deque fits in the specified array with room to spare
(i.e., the array has more elements than this deque), the element in
the array immediately following the end of the deque is set to
{@code null}.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose {@code x} is a deque known to contain only strings.
The following code can be used to dump the deque into a newly
allocated array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the deque are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this deque
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this deque
@throws NullPointerException if the specified array is null
"
      end

      operation 9182594 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9182722 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this deque.
The deque will be empty after this call returns.
"
      end

      operation 9182850 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this deque in proper sequence.
The elements will be returned in order from first (head) to last (tail).

<p>The returned iterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

@return an iterator over the elements in this deque in proper sequence
"
      end

      operation 9182978 "descendingIterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this deque in reverse
sequential order.  The elements will be returned in order from
last (tail) to first (head).

<p>The returned iterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

@return an iterator over the elements in this deque in reverse order
"
      end

      class 1121410 "AbstractItr"
	abstract visibility private 
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3624834 // <realization>
	  relation 3624834 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3624834 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	classrelation 3624962 // next (<unidirectional association>)
	  relation 3624962 --->
	    a role_name "next" package
	      comment "
The next node to return in next()

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3624962 // next (<unidirectional association>)
	    b parent class_ref 1121282 // Node
	end

	attribute 2133634 "nextItem"
	  package explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "nextItem holds on to item fields because once we claim that
an element exists in hasNext(), we must return item read
under lock (in advance()) even if it was in the process of
being removed when hasNext() was called.

"
	end

	classrelation 3625090 // lastRet (<unidirectional association>)
	  relation 3625090 --->
	    a role_name "lastRet" private
	      comment "
Node returned by most recent call to next. Needed by remove.
Reset to null if this element is deleted by a call to remove.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3625090 // lastRet (<unidirectional association>)
	    b parent class_ref 1121282 // Node
	end

	operation 9183106 "firstNode"
	  abstract cpp_inline package return_type class_ref 1121282 // Node
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9183234 "nextNode"
	  abstract cpp_inline package return_type class_ref 1121282 // Node
	  nparams 1
	    param inout name "n" type class_ref 1121282 // Node
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9183362 "AbstractItr"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9183490 "succ"
	  cpp_inline private return_type class_ref 1121282 // Node
	  nparams 1
	    param inout name "n" type class_ref 1121282 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the successor node of the given non-null, but
possibly previously deleted, node.
"
	end

	operation 9183618 "advance"
	  cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Advances next.
"
	end

	operation 9183746 "hasNext"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9183874 "next"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9184002 "remove"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1121538 "Itr"
	visibility private 
	nactuals 1
	actual class class_ref 1121154 // LinkedBlockingDeque
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3625218 // <generalisation>
	  relation 3625218 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3625218 // <generalisation>
	    b parent class_ref 1121410 // AbstractItr
	end

	operation 9184130 "firstNode"
	  cpp_inline package return_type class_ref 1121282 // Node
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9184258 "nextNode"
	  cpp_inline package return_type class_ref 1121282 // Node
	  nparams 1
	    param inout name "n" type class_ref 1121282 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1121666 "DescendingItr"
	visibility private 
	nactuals 1
	actual class class_ref 1121154 // LinkedBlockingDeque
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3625346 // <generalisation>
	  relation 3625346 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3625346 // <generalisation>
	    b parent class_ref 1121410 // AbstractItr
	end

	operation 9184386 "firstNode"
	  cpp_inline package return_type class_ref 1121282 // Node
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9184514 "nextNode"
	  cpp_inline package return_type class_ref 1121282 // Node
	  nparams 1
	    param inout name "n" type class_ref 1121282 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1121794 "LBDSpliterator"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3625474 // <realization>
	  relation 3625474 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3625474 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	attribute 2133762 "MAX_BATCH"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 25"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " max batch array size;"
	end

	classrelation 3625602 // queue (<unidirectional association>)
	  relation 3625602 --->
	    a role_name "queue" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3625602 // queue (<unidirectional association>)
	    b parent class_ref 1121154 // LinkedBlockingDeque
	end

	classrelation 3625730 // current (<unidirectional association>)
	  relation 3625730 --->
	    a role_name "current" package
	      comment " current node; null until initialized"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3625730 // current (<unidirectional association>)
	    b parent class_ref 1121282 // Node
	end

	attribute 2133890 "batch"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " batch size for splits"
	end

	attribute 2134018 "exhausted"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " true when no more nodes"
	end

	attribute 2134146 "est"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " size estimate"
	end

	operation 9184642 "LBDSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "queue" type class_ref 1121154 // LinkedBlockingDeque
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9184770 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9184898 "trySplit"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9185026 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9185154 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9185282 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9185410 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Spliterator} over the elements in this deque.

<p>The returned spliterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},
{@link Spliterator#ORDERED}, and {@link Spliterator#NONNULL}.

@implNote
The {@code Spliterator} implements {@code trySplit} to permit limited
parallelism.

@return a {@code Spliterator} over the elements in this deque
@since 1.8
"
      end

      operation 9185538 "writeObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves this deque to a stream (that is, serializes it).

@param s the stream
@throws java.io.IOException if an I/O error occurs
@serialData The capacity (int), followed by elements (each an
{@code Object}) in the proper order, followed by a null
"
      end

      operation 9185666 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes this deque from a stream (that is, deserializes it).
@param s the stream
@throws ClassNotFoundException if the class of a serialized object
        could not be found
@throws java.io.IOException if an I/O error occurs
"
      end
    end

    class 1121922 "LinkedBlockingQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1064066 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 1099522 // BlockingQueue
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An optionally-bounded {@linkplain BlockingQueue blocking queue} based on
linked nodes.
This queue orders elements FIFO (first-in-first-out).
The <em>head</em> of the queue is that element that has been on the
queue the longest time.
The <em>tail</em> of the queue is that element that has been on the
queue the shortest time. New elements
are inserted at the tail of the queue, and the queue retrieval
operations obtain elements at the head of the queue.
Linked queues typically have higher throughput than array-based queues but
less predictable performance in most concurrent applications.

<p>The optional capacity bound constructor argument serves as a
way to prevent excessive queue expansion. The capacity, if unspecified,
is equal to {@link Integer#MAX_VALUE}.  Linked nodes are
dynamically created upon each insertion unless this would bring the
queue above capacity.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 3625858 // <realization>
	relation 3625858 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3625858 // <realization>
	  b parent class_ref 1064066 // AbstractQueue
      end

      classrelation 3625986 // <realization>
	relation 3625986 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3625986 // <realization>
	  b parent class_ref 1099522 // BlockingQueue
      end

      classrelation 3626114 // <realization>
	relation 3626114 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3626114 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2134274 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6903933977591709194L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 1122050 "Node"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2134402 "item"
	  package explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3626242 // next (<unidirectional association>)
	  relation 3626242 --->
	    a role_name "next" package
	      comment "
One of:
- the real successor Node
- this Node, meaning the successor is head.next
- null, meaning there is no successor (this is the last node)

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3626242 // next (<unidirectional association>)
	    b parent class_ref 1122050 // Node
	end

	operation 9185794 "Node"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "x" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 2134530 "capacity"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The capacity bound, or Integer.MAX_VALUE if none 
"
      end

      classrelation 3626370 // count (<unidirectional association>)
	relation 3626370 --->
	  a role_name "count" init_value " new AtomicInteger()" const_relation private
	    comment " Current number of elements 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3626370 // count (<unidirectional association>)
	  b parent class_ref 191490 // AtomicInteger
      end

      classrelation 3626498 // head (<unidirectional association>)
	relation 3626498 --->
	  a role_name "head" package
	    comment "
Head of linked list.
Invariant: head.item == null

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 3626498 // head (<unidirectional association>)
	  b parent class_ref 1122050 // Node
      end

      classrelation 3626626 // last (<unidirectional association>)
	relation 3626626 --->
	  a role_name "last" private
	    comment "
Tail of linked list.
Invariant: last.next == null

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 3626626 // last (<unidirectional association>)
	  b parent class_ref 1122050 // Node
      end

      classrelation 3626754 // takeLock (<unidirectional association>)
	relation 3626754 --->
	  a role_name "takeLock" init_value " new ReentrantLock()" const_relation private
	    comment " Lock held by take, poll, etc 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3626754 // takeLock (<unidirectional association>)
	  b parent class_ref 968706 // ReentrantLock
      end

      classrelation 3626882 // notEmpty (<unidirectional association>)
	relation 3626882 --->
	  a role_name "notEmpty" init_value " takeLock.newCondition()" const_relation private
	    comment " Wait queue for waiting takes 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3626882 // notEmpty (<unidirectional association>)
	  b parent class_ref 864770 // Condition
      end

      classrelation 3627010 // putLock (<unidirectional association>)
	relation 3627010 --->
	  a role_name "putLock" init_value " new ReentrantLock()" const_relation private
	    comment " Lock held by put, offer, etc 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3627010 // putLock (<unidirectional association>)
	  b parent class_ref 968706 // ReentrantLock
      end

      classrelation 3627138 // notFull (<unidirectional association>)
	relation 3627138 --->
	  a role_name "notFull" init_value " putLock.newCondition()" const_relation private
	    comment " Wait queue for waiting puts 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3627138 // notFull (<unidirectional association>)
	  b parent class_ref 864770 // Condition
      end

      operation 9185922 "signalNotEmpty"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signals a waiting take. Called only from put/offer (which do not
otherwise ordinarily lock takeLock.)
"
      end

      operation 9186050 "signalNotFull"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signals a waiting put. Called only from take/poll.
"
      end

      operation 9186178 "enqueue"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 1122050 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Links node at end of queue.

@param node the node
"
      end

      operation 9186306 "dequeue"
	cpp_inline private explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a node from head of queue.

@return the node
"
      end

      operation 9186434 "fullyLock"
	cpp_inline package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Locks to prevent both puts and takes.
"
      end

      operation 9186562 "fullyUnlock"
	cpp_inline package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlocks to allow both puts and takes.
"
      end

      operation 9186690 "LinkedBlockingQueue"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "     /**
      * Tells whether both locks are held by current thread.
      */
     boolean isFullyLocked() {
         return (putLock.isHeldByCurrentThread() &&
                 takeLock.isHeldByCurrentThread());
     }

Creates a {@code LinkedBlockingQueue} with a capacity of
{@link Integer#MAX_VALUE}.
"
      end

      operation 9186818 "LinkedBlockingQueue"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code LinkedBlockingQueue} with the given (fixed) capacity.

@param capacity the capacity of this queue
@throws IllegalArgumentException if {@code capacity} is not greater
        than zero
"
      end

      operation 9186946 "LinkedBlockingQueue"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code LinkedBlockingQueue} with a capacity of
{@link Integer#MAX_VALUE}, initially containing the elements of the
given collection,
added in traversal order of the collection's iterator.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection or any
        of its elements are null
"
      end

      operation 9187074 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this doc comment is overridden to remove the reference to collections
 greater in size than Integer.MAX_VALUE

Returns the number of elements in this queue.

@return the number of elements in this queue
"
      end

      operation 9187202 "remainingCapacity"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this doc comment is a modified copy of the inherited doc comment,
 without the reference to unlimited queues.

Returns the number of additional elements that this queue can ideally
(in the absence of memory or resource constraints) accept without
blocking. This is always equal to the initial capacity of this queue
less the current {@code size} of this queue.

<p>Note that you <em>cannot</em> always tell if an attempt to insert
an element will succeed by inspecting {@code remainingCapacity}
because it may be the case that another thread is about to
insert or remove an element.
"
      end

      operation 9187330 "put"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue, waiting if
necessary for space to become available.

@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}
"
      end

      operation 9187458 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue, waiting if
necessary up to the specified wait time for space to become available.

@return {@code true} if successful, or {@code false} if
        the specified waiting time elapses before space is available
@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}
"
      end

      operation 9187586 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue if it is
possible to do so immediately without exceeding the queue's capacity,
returning {@code true} upon success and {@code false} if this queue
is full.
When using a capacity-restricted queue, this method is generally
preferable to method {@link BlockingQueue#add add}, which can fail to
insert an element only by throwing an exception.

@throws NullPointerException if the specified element is null
"
      end

      operation 9187714 "take"
	cpp_inline public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9187842 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9187970 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9188098 "peek"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9188226 "unlink"
	cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "p" type class_ref 1122050 // Node
	  param inout name "trail" type class_ref 1122050 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlinks interior Node p with predecessor trail.
"
      end

      operation 9188354 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this queue,
if it is present.  More formally, removes an element {@code e} such
that {@code o.equals(e)}, if this queue contains one or more such
elements.
Returns {@code true} if this queue contained the specified element
(or equivalently, if this queue changed as a result of the call).

@param o element to be removed from this queue, if present
@return {@code true} if this queue changed as a result of the call
"
      end

      operation 9188482 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains the specified element.
More formally, returns {@code true} if and only if this queue contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this queue
@return {@code true} if this queue contains the specified element
"
      end

      operation 9188610 "toArray"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue, in
proper sequence.

<p>The returned array will be \"safe\" in that no references to it are
maintained by this queue.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this queue
"
      end

      operation 9188738 "toArray"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns an array containing all of the elements in this queue, in
proper sequence; the runtime type of the returned array is that of
the specified array.  If the queue fits in the specified array, it
is returned therein.  Otherwise, a new array is allocated with the
runtime type of the specified array and the size of this queue.

<p>If this queue fits in the specified array with room to spare
(i.e., the array has more elements than this queue), the element in
the array immediately following the end of the queue is set to
{@code null}.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose {@code x} is a queue known to contain only strings.
The following code can be used to dump the queue into a newly
allocated array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the queue are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this queue
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this queue
@throws NullPointerException if the specified array is null
"
      end

      operation 9188866 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9188994 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this queue.
The queue will be empty after this call returns.
"
      end

      operation 9189122 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}
"
      end

      operation 9189250 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 184194 // Collection
	  param in name "maxElements" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}
"
      end

      operation 9189378 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue in proper sequence.
The elements will be returned in order from first (head) to last (tail).

<p>The returned iterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

@return an iterator over the elements in this queue in proper sequence
"
      end

      class 1122178 "Itr"
	visibility private 
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3627266 // <realization>
	  relation 3627266 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3627266 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	classrelation 3627394 // current (<unidirectional association>)
	  relation 3627394 --->
	    a role_name "current" private
	      comment "
Basic weakly-consistent iterator.  At all times hold the next
item to hand out so that if hasNext() reports true, we will
still have it to return even if lost race with a take etc.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3627394 // current (<unidirectional association>)
	    b parent class_ref 1122050 // Node
	end

	classrelation 3627522 // lastRet (<unidirectional association>)
	  relation 3627522 --->
	    a role_name "lastRet" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3627522 // lastRet (<unidirectional association>)
	    b parent class_ref 1122050 // Node
	end

	attribute 2134658 "currentElement"
	  private explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9189506 "Itr"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9189634 "hasNext"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9189762 "nextNode"
	  cpp_inline private return_type class_ref 1122050 // Node
	  nparams 1
	    param inout name "p" type class_ref 1122050 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the next live successor of p, or null if no such.

Unlike other traversal methods, iterators need to handle both:
- dequeued nodes (p.next == p)
- (possibly multiple) interior removed nodes (p.item == null)
"
	end

	operation 9189890 "next"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9190018 "remove"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1122306 "LBQSpliterator"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3627650 // <realization>
	  relation 3627650 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3627650 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	attribute 2134786 "MAX_BATCH"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 25"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " max batch array size;"
	end

	classrelation 3627778 // queue (<unidirectional association>)
	  relation 3627778 --->
	    a role_name "queue" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3627778 // queue (<unidirectional association>)
	    b parent class_ref 1121922 // LinkedBlockingQueue
	end

	classrelation 3627906 // current (<unidirectional association>)
	  relation 3627906 --->
	    a role_name "current" package
	      comment " current node; null until initialized"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3627906 // current (<unidirectional association>)
	    b parent class_ref 1122050 // Node
	end

	attribute 2134914 "batch"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " batch size for splits"
	end

	attribute 2135042 "exhausted"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " true when no more nodes"
	end

	attribute 2135170 "est"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " size estimate"
	end

	operation 9190146 "LBQSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "queue" type class_ref 1121922 // LinkedBlockingQueue
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9190274 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9190402 "trySplit"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9190530 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9190658 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9190786 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9190914 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Spliterator} over the elements in this queue.

<p>The returned spliterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},
{@link Spliterator#ORDERED}, and {@link Spliterator#NONNULL}.

@implNote
The {@code Spliterator} implements {@code trySplit} to permit limited
parallelism.

@return a {@code Spliterator} over the elements in this queue
@since 1.8
"
      end

      operation 9191042 "writeObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves this queue to a stream (that is, serializes it).

@param s the stream
@throws java.io.IOException if an I/O error occurs
@serialData The capacity is emitted (int), followed by all of
its elements (each an {@code Object}) in the proper order,
followed by a null
"
      end

      operation 9191170 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes this queue from a stream (that is, deserializes it).
@param s the stream
@throws ClassNotFoundException if the class of a serialized object
        could not be found
@throws java.io.IOException if an I/O error occurs
"
      end
    end

    class 1122434 "LinkedTransferQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1064066 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 1122562 // TransferQueue
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An unbounded {@link TransferQueue} based on linked nodes.
This queue orders elements FIFO (first-in-first-out) with respect
to any given producer.  The <em>head</em> of the queue is that
element that has been on the queue the longest time for some
producer.  The <em>tail</em> of the queue is that element that has
been on the queue the shortest time for some producer.

<p>Beware that, unlike in most collections, the {@code size} method
is <em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these queues, determining the current number
of elements requires a traversal of the elements, and so may report
inaccurate results if this collection is modified during traversal.
Additionally, the bulk operations {@code addAll},
{@code removeAll}, {@code retainAll}, {@code containsAll},
{@code equals}, and {@code toArray} are <em>not</em> guaranteed
to be performed atomically. For example, an iterator operating
concurrently with an {@code addAll} operation might view only some
of the added elements.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

<p>Memory consistency effects: As with other concurrent
collections, actions in a thread prior to placing an object into a
{@code LinkedTransferQueue}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions subsequent to the access or removal of that element from
the {@code LinkedTransferQueue} in another thread.

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.7
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 3628034 // <realization>
	relation 3628034 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3628034 // <realization>
	  b parent class_ref 1064066 // AbstractQueue
      end

      classrelation 3628290 // <realization>
	relation 3628290 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3628290 // <realization>
	  b parent class_ref 1122562 // TransferQueue
      end

      classrelation 3628418 // <realization>
	relation 3628418 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3628418 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2135298 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3223113410248163686L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2135426 "MP"
	class_attribute const_attribute private explicit_type "boolean"
	init_value "
        Runtime.getRuntime().availableProcessors() > 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "*** Overview of Dual Queues with Slack ***

Dual Queues, introduced by Scherer and Scott
(http://www.cs.rice.edu/~wns1/papers/2004-DISC-DDS.pdf) are
(linked) queues in which nodes may represent either data or
requests.  When a thread tries to enqueue a data node, but
encounters a request node, it instead \"matches\" and removes it;
and vice versa for enqueuing requests. Blocking Dual Queues
arrange that threads enqueuing unmatched requests block until
other threads provide the match. Dual Synchronous Queues (see
Scherer, Lea, & Scott
http://www.cs.rochester.edu/u/scott/papers/2009_Scherer_CACM_SSQ.pdf)
additionally arrange that threads enqueuing unmatched data also
block.  Dual Transfer Queues support all of these modes, as
dictated by callers.

A FIFO dual queue may be implemented using a variation of the
Michael & Scott (M&S) lock-free queue algorithm
(http://www.cs.rochester.edu/u/scott/papers/1996_PODC_queues.pdf).
It maintains two pointer fields, \"head\", pointing to a
(matched) node that in turn points to the first actual
(unmatched) queue node (or null if empty); and \"tail\" that
points to the last node on the queue (or again null if
empty). For example, here is a possible queue with four data
elements:

 head                tail
   |                   |
   v                   v
   M -> U -> U -> U -> U

The M&S queue algorithm is known to be prone to scalability and
overhead limitations when maintaining (via CAS) these head and
tail pointers. This has led to the development of
contention-reducing variants such as elimination arrays (see
Moir et al http://portal.acm.org/citation.cfm?id=1074013) and
optimistic back pointers (see Ladan-Mozes & Shavit
http://people.csail.mit.edu/edya/publications/OptimisticFIFOQueue-journal.pdf).
However, the nature of dual queues enables a simpler tactic for
improving M&S-style implementations when dual-ness is needed.

In a dual queue, each node must atomically maintain its match
status. While there are other possible variants, we implement
this here as: for a data-mode node, matching entails CASing an
\"item\" field from a non-null data value to null upon match, and
vice-versa for request nodes, CASing from null to a data
value. (Note that the linearization properties of this style of
queue are easy to verify -- elements are made available by
linking, and unavailable by matching.) Compared to plain M&S
queues, this property of dual queues requires one additional
successful atomic operation per enq/deq pair. But it also
enables lower cost variants of queue maintenance mechanics. (A
variation of this idea applies even for non-dual queues that
support deletion of interior elements, such as
j.u.c.ConcurrentLinkedQueue.)

Once a node is matched, its match status can never again
change.  We may thus arrange that the linked list of them
contain a prefix of zero or more matched nodes, followed by a
suffix of zero or more unmatched nodes. (Note that we allow
both the prefix and suffix to be zero length, which in turn
means that we do not use a dummy header.)  If we were not
concerned with either time or space efficiency, we could
correctly perform enqueue and dequeue operations by traversing
from a pointer to the initial node; CASing the item of the
first unmatched node on match and CASing the next field of the
trailing node on appends. (Plus some special-casing when
initially empty).  While this would be a terrible idea in
itself, it does have the benefit of not requiring ANY atomic
updates on head/tail fields.

We introduce here an approach that lies between the extremes of
never versus always updating queue (head and tail) pointers.
This offers a tradeoff between sometimes requiring extra
traversal steps to locate the first and/or last unmatched
nodes, versus the reduced overhead and contention of fewer
updates to queue pointers. For example, a possible snapshot of
a queue is:

 head           tail
   |              |
   v              v
   M -> M -> U -> U -> U -> U

The best value for this \"slack\" (the targeted maximum distance
between the value of \"head\" and the first unmatched node, and
similarly for \"tail\") is an empirical matter. We have found
that using very small constants in the range of 1-3 work best
over a range of platforms. Larger values introduce increasing
costs of cache misses and risks of long traversal chains, while
smaller values increase CAS contention and overhead.

Dual queues with slack differ from plain M&S dual queues by
virtue of only sometimes updating head or tail pointers when
matching, appending, or even traversing nodes; in order to
maintain a targeted slack.  The idea of \"sometimes\" may be
operationalized in several ways. The simplest is to use a
per-operation counter incremented on each traversal step, and
to try (via CAS) to update the associated queue pointer
whenever the count exceeds a threshold. Another, that requires
more overhead, is to use random number generators to update
with a given probability per traversal step.

In any strategy along these lines, because CASes updating
fields may fail, the actual slack may exceed targeted
slack. However, they may be retried at any time to maintain
targets.  Even when using very small slack values, this
approach works well for dual queues because it allows all
operations up to the point of matching or appending an item
(hence potentially allowing progress by another thread) to be
read-only, thus not introducing any further contention. As
described below, we implement this by performing slack
maintenance retries only after these points.

As an accompaniment to such techniques, traversal overhead can
be further reduced without increasing contention of head
pointer updates: Threads may sometimes shortcut the \"next\" link
path from the current \"head\" node to be closer to the currently
known first unmatched node, and similarly for tail. Again, this
may be triggered with using thresholds or randomization.

These ideas must be further extended to avoid unbounded amounts
of costly-to-reclaim garbage caused by the sequential \"next\"
links of nodes starting at old forgotten head nodes: As first
described in detail by Boehm
(http://portal.acm.org/citation.cfm?doid=503272.503282) if a GC
delays noticing that any arbitrarily old node has become
garbage, all newer dead nodes will also be unreclaimed.
(Similar issues arise in non-GC environments.)  To cope with
this in our implementation, upon CASing to advance the head
pointer, we set the \"next\" link of the previous head to point
only to itself; thus limiting the length of connected dead lists.
(We also take similar care to wipe out possibly garbage
retaining values held in other Node fields.)  However, doing so
adds some further complexity to traversal: If any \"next\"
pointer links to itself, it indicates that the current thread
has lagged behind a head-update, and so the traversal must
continue from the \"head\".  Traversals trying to find the
current tail starting from \"tail\" may also encounter
self-links, in which case they also continue at \"head\".

It is tempting in slack-based scheme to not even use CAS for
updates (similarly to Ladan-Mozes & Shavit). However, this
cannot be done for head updates under the above link-forgetting
mechanics because an update may leave head at a detached node.
And while direct writes are possible for tail updates, they
increase the risk of long retraversals, and hence long garbage
chains, which can be much more costly than is worthwhile
considering that the cost difference of performing a CAS vs
write is smaller when they are not triggered on each operation
(especially considering that writes and CASes equally require
additional GC bookkeeping (\"write barriers\") that are sometimes
more costly than the writes themselves because of contention).

*** Overview of implementation ***

We use a threshold-based approach to updates, with a slack
threshold of two -- that is, we update head/tail when the
current pointer appears to be two or more steps away from the
first/last node. The slack value is hard-wired: a path greater
than one is naturally implemented by checking equality of
traversal pointers except when the list has only one element,
in which case we keep slack threshold at one. Avoiding tracking
explicit counts across method calls slightly simplifies an
already-messy implementation. Using randomization would
probably work better if there were a low-quality dirt-cheap
per-thread one available, but even ThreadLocalRandom is too
heavy for these purposes.

With such a small slack threshold value, it is not worthwhile
to augment this with path short-circuiting (i.e., unsplicing
interior nodes) except in the case of cancellation/removal (see
below).

We allow both the head and tail fields to be null before any
nodes are enqueued; initializing upon first append.  This
simplifies some other logic, as well as providing more
efficient explicit control paths instead of letting JVMs insert
implicit NullPointerExceptions when they are null.  While not
currently fully implemented, we also leave open the possibility
of re-nulling these fields when empty (which is complicated to
arrange, for little benefit.)

All enqueue/dequeue operations are handled by the single method
\"xfer\" with parameters indicating whether to act as some form
of offer, put, poll, take, or transfer (each possibly with
timeout). The relative complexity of using one monolithic
method outweighs the code bulk and maintenance problems of
using separate methods for each case.

Operation consists of up to three phases. The first is
implemented within method xfer, the second in tryAppend, and
the third in method awaitMatch.

1. Try to match an existing node

   Starting at head, skip already-matched nodes until finding
   an unmatched node of opposite mode, if one exists, in which
   case matching it and returning, also if necessary updating
   head to one past the matched node (or the node itself if the
   list has no other unmatched nodes). If the CAS misses, then
   a loop retries advancing head by two steps until either
   success or the slack is at most two. By requiring that each
   attempt advances head by two (if applicable), we ensure that
   the slack does not grow without bound. Traversals also check
   if the initial head is now off-list, in which case they
   start at the new head.

   If no candidates are found and the call was untimed
   poll/offer, (argument \"how\" is NOW) return.

2. Try to append a new node (method tryAppend)

   Starting at current tail pointer, find the actual last node
   and try to append a new node (or if head was null, establish
   the first node). Nodes can be appended only if their
   predecessors are either already matched or are of the same
   mode. If we detect otherwise, then a new node with opposite
   mode must have been appended during traversal, so we must
   restart at phase 1. The traversal and update steps are
   otherwise similar to phase 1: Retrying upon CAS misses and
   checking for staleness.  In particular, if a self-link is
   encountered, then we can safely jump to a node on the list
   by continuing the traversal at current head.

   On successful append, if the call was ASYNC, return.

3. Await match or cancellation (method awaitMatch)

   Wait for another thread to match node; instead cancelling if
   the current thread was interrupted or the wait timed out. On
   multiprocessors, we use front-of-queue spinning: If a node
   appears to be the first unmatched node in the queue, it
   spins a bit before blocking. In either case, before blocking
   it tries to unsplice any nodes between the current \"head\"
   and the first unmatched node.

   Front-of-queue spinning vastly improves performance of
   heavily contended queues. And so long as it is relatively
   brief and \"quiet\", spinning does not much impact performance
   of less-contended queues.  During spins threads check their
   interrupt status and generate a thread-local random number
   to decide to occasionally perform a Thread.yield. While
   yield has underdefined specs, we assume that it might help,
   and will not hurt, in limiting impact of spinning on busy
   systems.  We also use smaller (1/2) spins for nodes that are
   not known to be front but whose predecessors have not
   blocked -- these \"chained\" spins avoid artifacts of
   front-of-queue rules which otherwise lead to alternating
   nodes spinning vs blocking. Further, front threads that
   represent phase changes (from data to request node or vice
   versa) compared to their predecessors receive additional
   chained spins, reflecting longer paths typically required to
   unblock threads during phase changes.


** Unlinking removed interior nodes **

In addition to minimizing garbage retention via self-linking
described above, we also unlink removed interior nodes. These
may arise due to timed out or interrupted waits, or calls to
remove(x) or Iterator.remove.  Normally, given a node that was
at one time known to be the predecessor of some node s that is
to be removed, we can unsplice s by CASing the next field of
its predecessor if it still points to s (otherwise s must
already have been removed or is now offlist). But there are two
situations in which we cannot guarantee to make node s
unreachable in this way: (1) If s is the trailing node of list
(i.e., with null next), then it is pinned as the target node
for appends, so can only be removed later after other nodes are
appended. (2) We cannot necessarily unlink s given a
predecessor node that is matched (including the case of being
cancelled): the predecessor may already be unspliced, in which
case some previous reachable node may still point to s.
(For further explanation see Herlihy & Shavit \"The Art of
Multiprocessor Programming\" chapter 9).  Although, in both
cases, we can rule out the need for further action if either s
or its predecessor are (or can be made to be) at, or fall off
from, the head of list.

Without taking these into account, it would be possible for an
unbounded number of supposedly removed nodes to remain
reachable.  Situations leading to such buildup are uncommon but
can occur in practice; for example when a series of short timed
calls to poll repeatedly time out but never otherwise fall off
the list because of an untimed call to take at the front of the
queue.

When these cases arise, rather than always retraversing the
entire list to find an actual predecessor to unlink (which
won't help for case (1) anyway), we record a conservative
estimate of possible unsplice failures (in \"sweepVotes\").
We trigger a full sweep when the estimate exceeds a threshold
(\"SWEEP_THRESHOLD\") indicating the maximum number of estimated
removal failures to tolerate before sweeping through, unlinking
cancelled nodes that were not unlinked upon initial removal.
We perform sweeps by the thread hitting threshold (rather than
background threads or by spreading work to other threads)
because in the main contexts in which removal occurs, the
caller is already timed-out, cancelled, or performing a
potentially O(n) operation (e.g. remove(x)), none of which are
time-critical enough to warrant the overhead that alternatives
would impose on other threads.

Because the sweepVotes estimate is conservative, and because
nodes become unlinked \"naturally\" as they fall off the head of
the queue, and because we allow votes to accumulate even while
sweeps are in progress, there are typically significantly fewer
such nodes than estimated.  Choice of a threshold value
balances the likelihood of wasted effort and contention, versus
providing a worst-case bound on retention of interior nodes in
quiescent queues. The value defined below was chosen
empirically to balance these under various timeout scenarios.

Note that we cannot self-link unlinked interior nodes during
sweeps. However, the associated garbage chains terminate when
some successor ultimately falls off the head of the list and is
self-linked.

 True if on multiprocessor 
"
      end

      attribute 2135554 "FRONT_SPINS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of times to spin (with randomly interspersed calls
to Thread.yield) on multiprocessor before blocking when a node
is apparently the first waiter in the queue.  See above for
explanation. Must be a power of two. The value is empirically
derived -- it works pretty well across a variety of processors,
numbers of CPUs, and OSes.

"
      end

      attribute 2135682 "CHAINED_SPINS"
	class_attribute const_attribute private explicit_type "int"
	init_value " FRONT_SPINS >>> 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of times to spin before blocking when a node is
preceded by another node that is apparently spinning.  Also
serves as an increment to FRONT_SPINS on phase changes, and as
base average frequency for yielding during spins. Must be a
power of two.

"
      end

      attribute 2135810 "SWEEP_THRESHOLD"
	class_attribute const_attribute package explicit_type "int"
	init_value " 32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum number of estimated removal failures (sweepVotes)
to tolerate before sweeping through the queue unlinking
cancelled nodes that were not unlinked upon initial
removal. See above for explanation. The value must be at least
two to avoid useless sweeps when removing trailing nodes.

"
      end

      class 1122690 "Node"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2135938 "isData"
	  const_attribute package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " false if this is a request node"
	end

	classrelation 3628546 // item (<unidirectional association>)
	  relation 3628546 --->
	    a role_name "item" volatile package
	      comment " initially non-null if isData; CASed to match"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3628546 // item (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	classrelation 3628674 // next (<unidirectional association>)
	  relation 3628674 --->
	    a role_name "next" volatile package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3628674 // next (<unidirectional association>)
	    b parent class_ref 1122690 // Node
	end

	classrelation 3628802 // waiter (<unidirectional association>)
	  relation 3628802 --->
	    a role_name "waiter" volatile package
	      comment " null until waiting"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3628802 // waiter (<unidirectional association>)
	    b parent class_ref 128642 // Thread
	end

	operation 9191938 "casNext"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 1122690 // Node
	    param inout name "val" type class_ref 1122690 // Node
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " CAS methods for fields"
	end

	operation 9192066 "casItem"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 129538 // Object
	    param inout name "val" type class_ref 129538 // Object
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9192194 "Node"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "item" type class_ref 129538 // Object
	    param inout name "isData" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new node.  Uses relaxed write because item can
only be seen after publication via casNext.
"
	end

	operation 9192322 "forgetNext"
	  cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Links node to itself to avoid garbage retention.  Called
only after CASing head field, so uses relaxed write.
"
	end

	operation 9192450 "forgetContents"
	  cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets item to self and waiter to null, to avoid garbage
retention after matching or cancelling. Uses relaxed writes
because order is already constrained in the only calling
contexts: item is forgotten only after volatile/atomic
mechanics that extract items.  Similarly, clearing waiter
follows either CAS or return from park (if ever parked;
else we don't care).
"
	end

	operation 9192578 "isMatched"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this node has been matched, including the
case of artificial matches due to cancellation.
"
	end

	operation 9192706 "isUnmatchedRequest"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this is an unmatched request node.
"
	end

	operation 9192834 "cannotPrecede"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 1
	    param inout name "haveData" explicit_type "boolean"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if a node with the given mode cannot be
appended to this node because this node is unmatched and
has opposite data mode.
"
	end

	operation 9192962 "tryMatchData"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to artificially match a data node -- used by remove.
"
	end

	attribute 2136066 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -3375979862319811754L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2136194 "UNSAFE"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Unsafe mechanics
"
	end

	attribute 2136322 "itemOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2136450 "nextOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2136578 "waiterOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 174978 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = Node.class;
                itemOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"item\"));
                nextOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"next\"));
                waiterOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"waiter\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      classrelation 3628930 // head (<unidirectional association>)
	relation 3628930 --->
	  a role_name "head" volatile package
	    comment " head of the queue; null until first enqueue 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3628930 // head (<unidirectional association>)
	  b parent class_ref 1122690 // Node
      end

      classrelation 3629058 // tail (<unidirectional association>)
	relation 3629058 --->
	  a role_name "tail" volatile private
	    comment " tail of the queue; null until first append 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3629058 // tail (<unidirectional association>)
	  b parent class_ref 1122690 // Node
      end

      attribute 2136706 "sweepVotes"
	volatile private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of apparent failures to unsplice removed nodes 
"
      end

      operation 9193090 "casTail"
	cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 1122690 // Node
	  param inout name "val" type class_ref 1122690 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " CAS methods for fields"
      end

      operation 9193218 "casHead"
	cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 1122690 // Node
	  param inout name "val" type class_ref 1122690 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9193346 "casSweepVotes"
	cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param in name "cmp" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2136834 "NOW"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Possible values for \"how\" argument in xfer method.

 for untimed poll, tryTransfer"
      end

      attribute 2136962 "ASYNC"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " for offer, put, add"
      end

      attribute 2137090 "SYNC"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " for transfer, take"
      end

      attribute 2137218 "TIMED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " for timed poll, tryTransfer"
      end

      operation 9193474 "cast"
	class_operation cpp_inline package explicit_return_type "E"
	nparams 1
	  param inout name "item" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9193602 "xfer"
	cpp_inline private explicit_return_type "E"
	nparams 4
	  param inout name "e" explicit_type "E"
	  param inout name "haveData" explicit_type "boolean"
	  param in name "how" explicit_type "int"
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements all queuing methods. See above for explanation.

@param e the item or null for take
@param haveData true if this is a put, else a take
@param how NOW, ASYNC, SYNC, or TIMED
@param nanos timeout in nanosecs, used only if mode is TIMED
@return an item if matched, else e
@throws NullPointerException if haveData mode but e is null
"
      end

      operation 9193730 "tryAppend"
	cpp_inline private return_type class_ref 1122690 // Node
	nparams 2
	  param inout name "s" type class_ref 1122690 // Node
	  param inout name "haveData" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to append node s as tail.

@param s the node to append
@param haveData true if appending in data mode
@return null on failure due to losing race with append in
different mode, else s's predecessor, or s itself if no
predecessor
"
      end

      operation 9193858 "awaitMatch"
	cpp_inline private explicit_return_type "E"
	nparams 5
	  param inout name "s" type class_ref 1122690 // Node
	  param inout name "pred" type class_ref 1122690 // Node
	  param inout name "e" explicit_type "E"
	  param inout name "timed" explicit_type "boolean"
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Spins/yields/blocks until node s is matched or caller gives up.

@param s the waiting node
@param pred the predecessor of s, or s itself if it has no
predecessor, or null if unknown (the null case does not occur
in any current calls but may in possible future extensions)
@param e the comparison value for checking match
@param timed if true, wait only until timeout elapses
@param nanos timeout in nanosecs, used only if timed is true
@return matched item, or e if unmatched on interrupt or timeout
"
      end

      operation 9193986 "spinsFor"
	class_operation cpp_inline private explicit_return_type "int"
	nparams 2
	  param inout name "pred" type class_ref 1122690 // Node
	  param inout name "haveData" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns spin/yield value for a node with given predecessor and
data mode. See above for explanation.
"
      end

      operation 9194114 "succ"
	cpp_inline package return_type class_ref 1122690 // Node
	nparams 1
	  param inout name "p" type class_ref 1122690 // Node
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -------------- Traversal methods -------------- 

Returns the successor of p, or the head node if p.next has been
linked to self, which will only be true if traversing with a
stale pointer that is now off the list.
"
      end

      operation 9194242 "firstOfMode"
	cpp_inline private return_type class_ref 1122690 // Node
	nparams 1
	  param inout name "isData" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first unmatched node of the given mode, or null if
none.  Used by methods isEmpty, hasWaitingConsumer.
"
      end

      operation 9194370 "firstDataNode"
	cpp_inline package return_type class_ref 1122690 // Node
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Version of firstOfMode used by Spliterator. Callers must
recheck if the returned node's item field is null or
self-linked before using.
"
      end

      operation 9194498 "firstDataItem"
	cpp_inline private explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the item in the first unmatched node with isData; or
null if none.  Used by peek.
"
      end

      operation 9194626 "countOfMode"
	cpp_inline private explicit_return_type "int"
	nparams 1
	  param inout name "data" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Traverses and counts unmatched nodes of the given mode.
Used by methods size and getWaitingConsumerCount.
"
      end

      class 1122818 "Itr"
	visibility package 
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3629186 // <realization>
	  relation 3629186 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3629186 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	classrelation 3629314 // nextNode (<unidirectional association>)
	  relation 3629314 --->
	    a role_name "nextNode" private
	      comment " next node to return item for"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3629314 // nextNode (<unidirectional association>)
	    b parent class_ref 1122690 // Node
	end

	attribute 2137346 "nextItem"
	  private explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " the corresponding item"
	end

	classrelation 3629442 // lastRet (<unidirectional association>)
	  relation 3629442 --->
	    a role_name "lastRet" private
	      comment " last returned node, to support remove"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3629442 // lastRet (<unidirectional association>)
	    b parent class_ref 1122690 // Node
	end

	classrelation 3629570 // lastPred (<unidirectional association>)
	  relation 3629570 --->
	    a role_name "lastPred" private
	      comment " predecessor to unlink lastRet"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3629570 // lastPred (<unidirectional association>)
	    b parent class_ref 1122690 // Node
	end

	operation 9194754 "advance"
	  cpp_inline private explicit_return_type "void"
	  nparams 1
	    param inout name "prev" type class_ref 1122690 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Moves to next node after prev, or first node if prev null.
"
	end

	operation 9194882 "Itr"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9195010 "hasNext"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9195138 "next"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9195266 "remove"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1122946 "LTQSpliterator"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3629698 // <realization>
	  relation 3629698 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3629698 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	attribute 2137474 "MAX_BATCH"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 25"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " max batch array size;"
	end

	classrelation 3629826 // queue (<unidirectional association>)
	  relation 3629826 --->
	    a role_name "queue" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3629826 // queue (<unidirectional association>)
	    b parent class_ref 1122434 // LinkedTransferQueue
	end

	classrelation 3629954 // current (<unidirectional association>)
	  relation 3629954 --->
	    a role_name "current" package
	      comment " current node; null until initialized"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3629954 // current (<unidirectional association>)
	    b parent class_ref 1122690 // Node
	end

	attribute 2137602 "batch"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " batch size for splits"
	end

	attribute 2137730 "exhausted"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " true when no more nodes"
	end

	operation 9195394 "LTQSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "queue" type class_ref 1122434 // LinkedTransferQueue
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9195522 "trySplit"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9195650 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9195778 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9195906 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9196034 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9196162 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Spliterator} over the elements in this queue.

<p>The returned spliterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},
{@link Spliterator#ORDERED}, and {@link Spliterator#NONNULL}.

@implNote
The {@code Spliterator} implements {@code trySplit} to permit limited
parallelism.

@return a {@code Spliterator} over the elements in this queue
@since 1.8
"
      end

      operation 9196290 "unsplice"
	cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "pred" type class_ref 1122690 // Node
	  param inout name "s" type class_ref 1122690 // Node
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -------------- Removal methods -------------- 

Unsplices (now or later) the given deleted/cancelled node with
the given predecessor.

@param pred a node that was at one time known to be the
predecessor of s, or null or s itself if s is/was at head
@param s the node to be unspliced
"
      end

      operation 9196418 "sweep"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlinks matched (typically cancelled) nodes encountered in a
traversal from head.
"
      end

      operation 9196546 "findAndRemove"
	cpp_inline private explicit_return_type "boolean"
	nparams 1
	  param inout name "e" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main implementation of remove(Object)
"
      end

      operation 9196674 "LinkedTransferQueue"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an initially empty {@code LinkedTransferQueue}.
"
      end

      operation 9196802 "LinkedTransferQueue"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code LinkedTransferQueue}
initially containing the elements of the given collection,
added in traversal order of the collection's iterator.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection or any
        of its elements are null
"
      end

      operation 9196930 "put"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue.
As the queue is unbounded, this method will never block.

@throws NullPointerException if the specified element is null
"
      end

      operation 9197058 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue.
As the queue is unbounded, this method will never block or
return {@code false}.

@return {@code true} (as specified by
 {@link java.util.concurrent.BlockingQueue#offer(Object,long,TimeUnit)
 BlockingQueue.offer})
@throws NullPointerException if the specified element is null
"
      end

      operation 9197186 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue.
As the queue is unbounded, this method will never return {@code false}.

@return {@code true} (as specified by {@link Queue#offer})
@throws NullPointerException if the specified element is null
"
      end

      operation 9197314 "add"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue.
As the queue is unbounded, this method will never throw
{@link IllegalStateException} or return {@code false}.

@return {@code true} (as specified by {@link Collection#add})
@throws NullPointerException if the specified element is null
"
      end

      operation 9197442 "tryTransfer"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers the element to a waiting consumer immediately, if possible.

<p>More precisely, transfers the specified element immediately
if there exists a consumer already waiting to receive it (in
{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
otherwise returning {@code false} without enqueuing the element.

@throws NullPointerException if the specified element is null
"
      end

      operation 9197570 "transfer"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers the element to a consumer, waiting if necessary to do so.

<p>More precisely, transfers the specified element immediately
if there exists a consumer already waiting to receive it (in
{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
else inserts the specified element at the tail of this queue
and waits until the element is received by a consumer.

@throws NullPointerException if the specified element is null
"
      end

      operation 9197698 "tryTransfer"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers the element to a consumer if it is possible to do so
before the timeout elapses.

<p>More precisely, transfers the specified element immediately
if there exists a consumer already waiting to receive it (in
{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
else inserts the specified element at the tail of this queue
and waits until the element is received by a consumer,
returning {@code false} if the specified wait time elapses
before the element can be transferred.

@throws NullPointerException if the specified element is null
"
      end

      operation 9197826 "take"
	cpp_inline public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9197954 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9198082 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9198210 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9198338 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 184194 // Collection
	  param in name "maxElements" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 9198466 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue in proper sequence.
The elements will be returned in order from first (head) to last (tail).

<p>The returned iterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

@return an iterator over the elements in this queue in proper sequence
"
      end

      operation 9198594 "peek"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9198722 "isEmpty"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains no elements.

@return {@code true} if this queue contains no elements
"
      end

      operation 9198850 "hasWaitingConsumer"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9198978 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this queue.  If this queue
contains more than {@code Integer.MAX_VALUE} elements, returns
{@code Integer.MAX_VALUE}.

<p>Beware that, unlike in most collections, this method is
<em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these queues, determining the current
number of elements requires an O(n) traversal.

@return the number of elements in this queue
"
      end

      operation 9199106 "getWaitingConsumerCount"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9199234 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this queue,
if it is present.  More formally, removes an element {@code e} such
that {@code o.equals(e)}, if this queue contains one or more such
elements.
Returns {@code true} if this queue contained the specified element
(or equivalently, if this queue changed as a result of the call).

@param o element to be removed from this queue, if present
@return {@code true} if this queue changed as a result of the call
"
      end

      operation 9199362 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains the specified element.
More formally, returns {@code true} if and only if this queue contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this queue
@return {@code true} if this queue contains the specified element
"
      end

      operation 9199490 "remainingCapacity"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns {@code Integer.MAX_VALUE} because a
{@code LinkedTransferQueue} is not capacity constrained.

@return {@code Integer.MAX_VALUE} (as specified by
        {@link java.util.concurrent.BlockingQueue#remainingCapacity()
        BlockingQueue.remainingCapacity})
"
      end

      operation 9199618 "writeObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves this queue to a stream (that is, serializes it).

@param s the stream
@throws java.io.IOException if an I/O error occurs
@serialData All of the elements (each an {@code E}) in
the proper order, followed by a null
"
      end

      operation 9199746 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes this queue from a stream (that is, deserializes it).
@param s the stream
@throws ClassNotFoundException if the class of a serialized object
        could not be found
@throws java.io.IOException if an I/O error occurs
"
      end

      attribute 2137858 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2137986 "headOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2138114 "tailOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2138242 "sweepVotesOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 175106 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = LinkedTransferQueue.class;
            headOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"head\"));
            tailOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"tail\"));
            sweepVotesOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"sweepVotes\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 1122562 "TransferQueue"
      visibility public stereotype "interface"
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 1099522 // BlockingQueue
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link BlockingQueue} in which producers may wait for consumers
to receive elements.  A {@code TransferQueue} may be useful for
example in message passing applications in which producers
sometimes (using method {@link #transfer}) await receipt of
elements by consumers invoking {@code take} or {@code poll}, while
at other times enqueue elements (via method {@code put}) without
waiting for receipt.
{@linkplain #tryTransfer(Object) Non-blocking} and
{@linkplain #tryTransfer(Object,long,TimeUnit) time-out} versions of
{@code tryTransfer} are also available.
A {@code TransferQueue} may also be queried, via {@link
#hasWaitingConsumer}, whether there are any threads waiting for
items, which is a converse analogy to a {@code peek} operation.

<p>Like other blocking queues, a {@code TransferQueue} may be
capacity bounded.  If so, an attempted transfer operation may
initially block waiting for available space, and/or subsequently
block waiting for reception by a consumer.  Note that in a queue
with zero capacity, such as {@link SynchronousQueue}, {@code put}
and {@code transfer} are effectively synonymous.

<p>This interface is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.7
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 3628162 // <realization>
	relation 3628162 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3628162 // <realization>
	  b parent class_ref 1099522 // BlockingQueue
      end

      operation 9191298 "tryTransfer"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers the element to a waiting consumer immediately, if possible.

<p>More precisely, transfers the specified element immediately
if there exists a consumer already waiting to receive it (in
{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
otherwise returning {@code false} without enqueuing the element.

@param e the element to transfer
@return {@code true} if the element was transferred, else
        {@code false}
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue
"
      end

      operation 9191426 "transfer"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers the element to a consumer, waiting if necessary to do so.

<p>More precisely, transfers the specified element immediately
if there exists a consumer already waiting to receive it (in
{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
else waits until the element is received by a consumer.

@param e the element to transfer
@throws InterruptedException if interrupted while waiting,
        in which case the element is not left enqueued
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue
"
      end

      operation 9191554 "tryTransfer"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers the element to a consumer if it is possible to do so
before the timeout elapses.

<p>More precisely, transfers the specified element immediately
if there exists a consumer already waiting to receive it (in
{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
else waits until the element is received by a consumer,
returning {@code false} if the specified wait time elapses
before the element can be transferred.

@param e the element to transfer
@param timeout how long to wait before giving up, in units of
       {@code unit}
@param unit a {@code TimeUnit} determining how to interpret the
       {@code timeout} parameter
@return {@code true} if successful, or {@code false} if
        the specified waiting time elapses before completion,
        in which case the element is not left enqueued
@throws InterruptedException if interrupted while waiting,
        in which case the element is not left enqueued
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue
"
      end

      operation 9191682 "hasWaitingConsumer"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if there is at least one consumer waiting
to receive an element via {@link #take} or
timed {@link #poll(long,TimeUnit) poll}.
The return value represents a momentary state of affairs.

@return {@code true} if there is at least one waiting consumer
"
      end

      operation 9191810 "getWaitingConsumerCount"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of consumers waiting to
receive elements via {@link #take} or timed
{@link #poll(long,TimeUnit) poll}.  The return value is an
approximation of a momentary state of affairs, that may be
inaccurate if consumers have completed or given up waiting.
The value may be useful for monitoring and heuristics, but
not for synchronization control.  Implementations of this
method are likely to be noticeably slower than those for
{@link #hasWaitingConsumer}.

@return the number of consumers waiting to receive elements
"
      end
    end

    class 1123074 "Phaser"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A reusable synchronization barrier, similar in functionality to
{@link java.util.concurrent.CyclicBarrier CyclicBarrier} and
{@link java.util.concurrent.CountDownLatch CountDownLatch}
but supporting more flexible usage.

<p><b>Registration.</b> Unlike the case for other barriers, the
number of parties <em>registered</em> to synchronize on a phaser
may vary over time.  Tasks may be registered at any time (using
methods {@link #register}, {@link #bulkRegister}, or forms of
constructors establishing initial numbers of parties), and
optionally deregistered upon any arrival (using {@link
#arriveAndDeregister}).  As is the case with most basic
synchronization constructs, registration and deregistration affect
only internal counts; they do not establish any further internal
bookkeeping, so tasks cannot query whether they are registered.
(However, you can introduce such bookkeeping by subclassing this
class.)

<p><b>Synchronization.</b> Like a {@code CyclicBarrier}, a {@code
Phaser} may be repeatedly awaited.  Method {@link
#arriveAndAwaitAdvance} has effect analogous to {@link
java.util.concurrent.CyclicBarrier#await CyclicBarrier.await}. Each
generation of a phaser has an associated phase number. The phase
number starts at zero, and advances when all parties arrive at the
phaser, wrapping around to zero after reaching {@code
Integer.MAX_VALUE}. The use of phase numbers enables independent
control of actions upon arrival at a phaser and upon awaiting
others, via two kinds of methods that may be invoked by any
registered party:

<ul>

  <li> <b>Arrival.</b> Methods {@link #arrive} and
      {@link #arriveAndDeregister} record arrival.  These methods
      do not block, but return an associated <em>arrival phase
      number</em>; that is, the phase number of the phaser to which
      the arrival applied. When the final party for a given phase
      arrives, an optional action is performed and the phase
      advances.  These actions are performed by the party
      triggering a phase advance, and are arranged by overriding
      method {@link #onAdvance(int, int)}, which also controls
      termination. Overriding this method is similar to, but more
      flexible than, providing a barrier action to a {@code
      CyclicBarrier}.

  <li> <b>Waiting.</b> Method {@link #awaitAdvance} requires an
      argument indicating an arrival phase number, and returns when
      the phaser advances to (or is already at) a different phase.
      Unlike similar constructions using {@code CyclicBarrier},
      method {@code awaitAdvance} continues to wait even if the
      waiting thread is interrupted. Interruptible and timeout
      versions are also available, but exceptions encountered while
      tasks wait interruptibly or with timeout do not change the
      state of the phaser. If necessary, you can perform any
      associated recovery within handlers of those exceptions,
      often after invoking {@code forceTermination}.  Phasers may
      also be used by tasks executing in a {@link ForkJoinPool},
      which will ensure sufficient parallelism to execute tasks
      when others are blocked waiting for a phase to advance.

</ul>

<p><b>Termination.</b> A phaser may enter a <em>termination</em>
state, that may be checked using method {@link #isTerminated}. Upon
termination, all synchronization methods immediately return without
waiting for advance, as indicated by a negative return value.
Similarly, attempts to register upon termination have no effect.
Termination is triggered when an invocation of {@code onAdvance}
returns {@code true}. The default implementation returns {@code
true} if a deregistration has caused the number of registered
parties to become zero.  As illustrated below, when phasers control
actions with a fixed number of iterations, it is often convenient
to override this method to cause termination when the current phase
number reaches a threshold. Method {@link #forceTermination} is
also available to abruptly release waiting threads and allow them
to terminate.

<p><b>Tiering.</b> Phasers may be <em>tiered</em> (i.e.,
constructed in tree structures) to reduce contention. Phasers with
large numbers of parties that would otherwise experience heavy
synchronization contention costs may instead be set up so that
groups of sub-phasers share a common parent.  This may greatly
increase throughput even though it incurs greater per-operation
overhead.

<p>In a tree of tiered phasers, registration and deregistration of
child phasers with their parent are managed automatically.
Whenever the number of registered parties of a child phaser becomes
non-zero (as established in the {@link #Phaser(Phaser,int)}
constructor, {@link #register}, or {@link #bulkRegister}), the
child phaser is registered with its parent.  Whenever the number of
registered parties becomes zero as the result of an invocation of
{@link #arriveAndDeregister}, the child phaser is deregistered
from its parent.

<p><b>Monitoring.</b> While synchronization methods may be invoked
only by registered parties, the current state of a phaser may be
monitored by any caller.  At any given moment there are {@link
#getRegisteredParties} parties in total, of which {@link
#getArrivedParties} have arrived at the current phase ({@link
#getPhase}).  When the remaining ({@link #getUnarrivedParties})
parties arrive, the phase advances.  The values returned by these
methods may reflect transient states and so are not in general
useful for synchronization control.  Method {@link #toString}
returns snapshots of these state queries in a form convenient for
informal monitoring.

<p><b>Sample usages:</b>

<p>A {@code Phaser} may be used instead of a {@code CountDownLatch}
to control a one-shot action serving a variable number of parties.
The typical idiom is for the method setting this up to first
register, then start the actions, then deregister, as in:

 <pre> {@code
void runTasks(List<Runnable> tasks) {
  final Phaser phaser = new Phaser(1); // \"1\" to register self
  // create and start threads
  for (final Runnable task : tasks) {
    phaser.register();
    new Thread() {
      public void run() {
        phaser.arriveAndAwaitAdvance(); // await all creation
        task.run();
      }
    }.start();
  }

  // allow threads to start and deregister self
  phaser.arriveAndDeregister();
}}</pre>

<p>One way to cause a set of threads to repeatedly perform actions
for a given number of iterations is to override {@code onAdvance}:

 <pre> {@code
void startTasks(List<Runnable> tasks, final int iterations) {
  final Phaser phaser = new Phaser() {
    protected boolean onAdvance(int phase, int registeredParties) {
      return phase >= iterations || registeredParties == 0;
    }
  };
  phaser.register();
  for (final Runnable task : tasks) {
    phaser.register();
    new Thread() {
      public void run() {
        do {
          task.run();
          phaser.arriveAndAwaitAdvance();
        } while (!phaser.isTerminated());
      }
    }.start();
  }
  phaser.arriveAndDeregister(); // deregister self, don't wait
}}</pre>

If the main task must later await termination, it
may re-register and then execute a similar loop:
 <pre> {@code
  // ...
  phaser.register();
  while (!phaser.isTerminated())
    phaser.arriveAndAwaitAdvance();}</pre>

<p>Related constructions may be used to await particular phase numbers
in contexts where you are sure that the phase will never wrap around
{@code Integer.MAX_VALUE}. For example:

 <pre> {@code
void awaitPhase(Phaser phaser, int phase) {
  int p = phaser.register(); // assumes caller not already registered
  while (p < phase) {
    if (phaser.isTerminated())
      // ... deal with unexpected termination
    else
      p = phaser.arriveAndAwaitAdvance();
  }
  phaser.arriveAndDeregister();
}}</pre>


<p>To create a set of {@code n} tasks using a tree of phasers, you
could use code of the following form, assuming a Task class with a
constructor accepting a {@code Phaser} that it registers with upon
construction. After invocation of {@code build(new Task[n], 0, n,
new Phaser())}, these tasks could then be started, for example by
submitting to a pool:

 <pre> {@code
void build(Task[] tasks, int lo, int hi, Phaser ph) {
  if (hi - lo > TASKS_PER_PHASER) {
    for (int i = lo; i < hi; i += TASKS_PER_PHASER) {
      int j = Math.min(i + TASKS_PER_PHASER, hi);
      build(tasks, i, j, new Phaser(ph));
    }
  } else {
    for (int i = lo; i < hi; ++i)
      tasks[i] = new Task(ph);
      // assumes new Task(ph) performs ph.register()
  }
}}</pre>

The best value of {@code TASKS_PER_PHASER} depends mainly on
expected synchronization rates. A value as low as four may
be appropriate for extremely small per-phase task bodies (thus
high rates), or up to hundreds for extremely large ones.

<p><b>Implementation notes</b>: This implementation restricts the
maximum number of parties to 65535. Attempts to register additional
parties result in {@code IllegalStateException}. However, you can and
should create tiered phasers to accommodate arbitrarily large sets
of participants.

@since 1.7
@author Doug Lea
"
      attribute 2138370 "state"
	volatile private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This class implements an extension of X10 \"clocks\".  Thanks to
Vijay Saraswat for the idea, and to Vivek Sarkar for
enhancements to extend functionality.


Primary state representation, holding four bit-fields:

unarrived  -- the number of parties yet to hit barrier (bits  0-15)
parties    -- the number of parties to wait            (bits 16-31)
phase      -- the generation of the barrier            (bits 32-62)
terminated -- set if barrier is terminated             (bit  63 / sign)

Except that a phaser with no registered parties is
distinguished by the otherwise illegal state of having zero
parties and one unarrived parties (encoded as EMPTY below).

To efficiently maintain atomicity, these values are packed into
a single (atomic) long. Good performance relies on keeping
state decoding and encoding simple, and keeping race windows
short.

All state updates are performed via CAS except initial
registration of a sub-phaser (i.e., one with a non-null
parent).  In this (relatively rare) case, we use built-in
synchronization to lock while first registering with its
parent.

The phase of a subphaser is allowed to lag that of its
ancestors until it is actually accessed -- see method
reconcileState.

"
      end

      attribute 2138498 "MAX_PARTIES"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0xffff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2138626 "MAX_PHASE"
	class_attribute const_attribute private explicit_type "int"
	init_value " Integer.MAX_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2138754 "PARTIES_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2138882 "PHASE_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2139010 "UNARRIVED_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0xffff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " to mask ints"
      end

      attribute 2139138 "PARTIES_MASK"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0xffff0000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " to mask longs"
      end

      attribute 2139266 "COUNTS_MASK"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0xffffffffL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2139394 "TERMINATION_BIT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1L << 63"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2139522 "ONE_ARRIVAL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " some special values
"
      end

      attribute 2139650 "ONE_PARTY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << PARTIES_SHIFT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2139778 "ONE_DEREGISTER"
	class_attribute const_attribute private explicit_type "int"
	init_value " ONE_ARRIVAL|ONE_PARTY"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2139906 "EMPTY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9199874 "unarrivedOf"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "s" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The following unpacking methods are usually manually inlined"
      end

      operation 9200002 "partiesOf"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "s" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9200130 "phaseOf"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "s" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9200258 "arrivedOf"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "s" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3630082 // parent (<unidirectional association>)
	relation 3630082 --->
	  a role_name "parent" const_relation private
	    comment "
The parent of this phaser, or null if none

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3630082 // parent (<unidirectional association>)
	  b parent class_ref 1123074 // Phaser
      end

      classrelation 3630210 // root (<unidirectional association>)
	relation 3630210 --->
	  a role_name "root" const_relation private
	    comment "
The root of phaser tree. Equals this if not in a tree.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3630210 // root (<unidirectional association>)
	  b parent class_ref 1123074 // Phaser
      end

      class 1123202 "QNode"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3630594 // <realization>
	  relation 3630594 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3630594 // <realization>
	    b parent class_ref 1104002 // ManagedBlocker
	end

	classrelation 3630722 // phaser (<unidirectional association>)
	  relation 3630722 --->
	    a role_name "phaser" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3630722 // phaser (<unidirectional association>)
	    b parent class_ref 1123074 // Phaser
	end

	attribute 2140290 "phase"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2140418 "interruptible"
	  const_attribute package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2140546 "timed"
	  const_attribute package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2140674 "wasInterrupted"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2140802 "nanos"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2140930 "deadline"
	  const_attribute package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3630850 // thread (<unidirectional association>)
	  relation 3630850 --->
	    a role_name "thread" volatile package
	      comment " nulled to cancel wait"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3630850 // thread (<unidirectional association>)
	    b parent class_ref 128642 // Thread
	end

	classrelation 3630978 // next (<unidirectional association>)
	  relation 3630978 --->
	    a role_name "next" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3630978 // next (<unidirectional association>)
	    b parent class_ref 1123202 // QNode
	end

	operation 9204482 "QNode"
	  package explicit_return_type ""
	  nparams 5
	    param inout name "phaser" type class_ref 1123074 // Phaser
	    param in name "phase" explicit_type "int"
	    param inout name "interruptible" explicit_type "boolean"
	    param inout name "timed" explicit_type "boolean"
	    param in name "nanos" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9204610 "isReleasable"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9204738 "block"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3630338 // evenQ (<unidirectional association>)
	relation 3630338 --->
	  a role_name "evenQ" const_relation private
	    comment "
Heads of Treiber stacks for waiting threads. To eliminate
contention when releasing some threads while adding others, we
use two of them, alternating across even and odd phases.
Subphasers share queues with root to speed up releases.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<QNode> ${name}${value};
"
	    classrelation_ref 3630338 // evenQ (<unidirectional association>)
	  b parent class_ref 1021954 // AtomicReference
      end

      classrelation 3630466 // oddQ (<unidirectional association>)
	relation 3630466 --->
	  a role_name "oddQ" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<QNode> ${name}${value};
"
	    classrelation_ref 3630466 // oddQ (<unidirectional association>)
	  b parent class_ref 1021954 // AtomicReference
      end

      operation 9200386 "queueFor"
	private return_type class_ref 1021954 // AtomicReference
	nparams 1
	  param in name "phase" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<QNode> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9200514 "badArrive"
	private return_type class_ref 128130 // String
	nparams 1
	  param in name "s" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns message string for bounds exceptions on arrival.
"
      end

      operation 9200642 "badRegister"
	private return_type class_ref 128130 // String
	nparams 1
	  param in name "s" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns message string for bounds exceptions on registration.
"
      end

      operation 9200770 "doArrive"
	private explicit_return_type "int"
	nparams 1
	  param in name "adjust" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main implementation for methods arrive and arriveAndDeregister.
Manually tuned to speed up and minimize race windows for the
common case of just decrementing unarrived field.

@param adjust value to subtract from state;
              ONE_ARRIVAL for arrive,
              ONE_DEREGISTER for arriveAndDeregister
"
      end

      operation 9200898 "doRegister"
	private explicit_return_type "int"
	nparams 1
	  param in name "registrations" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implementation of register, bulkRegister

@param registrations number to add to both parties and
unarrived fields. Must be greater than zero.
"
      end

      operation 9201026 "reconcileState"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves lagged phase propagation from root if necessary.
Reconciliation normally occurs when root has advanced but
subphasers have not yet done so, in which case they must finish
their own advance by setting unarrived to parties (or if
parties is zero, resetting to unregistered EMPTY state).

@return reconciled state
"
      end

      operation 9201154 "Phaser"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new phaser with no initially registered parties, no
parent, and initial phase number 0. Any thread using this
phaser will need to first register for it.
"
      end

      operation 9201282 "Phaser"
	public explicit_return_type ""
	nparams 1
	  param in name "parties" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new phaser with the given number of registered
unarrived parties, no parent, and initial phase number 0.

@param parties the number of parties required to advance to the
next phase
@throws IllegalArgumentException if parties less than zero
or greater than the maximum number of parties supported
"
      end

      operation 9201410 "Phaser"
	public explicit_return_type ""
	nparams 1
	  param inout name "parent" type class_ref 1123074 // Phaser
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@link #Phaser(Phaser, int) Phaser(parent, 0)}.

@param parent the parent phaser
"
      end

      operation 9201538 "Phaser"
	public explicit_return_type ""
	nparams 2
	  param inout name "parent" type class_ref 1123074 // Phaser
	  param in name "parties" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new phaser with the given parent and number of
registered unarrived parties.  When the given parent is non-null
and the given number of parties is greater than zero, this
child phaser is registered with its parent.

@param parent the parent phaser
@param parties the number of parties required to advance to the
next phase
@throws IllegalArgumentException if parties less than zero
or greater than the maximum number of parties supported
"
      end

      operation 9201666 "register"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new unarrived party to this phaser.  If an ongoing
invocation of {@link #onAdvance} is in progress, this method
may await its completion before returning.  If this phaser has
a parent, and this phaser previously had no registered parties,
this child phaser is also registered with its parent. If
this phaser is terminated, the attempt to register has
no effect, and a negative value is returned.

@return the arrival phase number to which this registration
applied.  If this value is negative, then this phaser has
terminated, in which case registration has no effect.
@throws IllegalStateException if attempting to register more
than the maximum supported number of parties
"
      end

      operation 9201794 "bulkRegister"
	public explicit_return_type "int"
	nparams 1
	  param in name "parties" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the given number of new unarrived parties to this phaser.
If an ongoing invocation of {@link #onAdvance} is in progress,
this method may await its completion before returning.  If this
phaser has a parent, and the given number of parties is greater
than zero, and this phaser previously had no registered
parties, this child phaser is also registered with its parent.
If this phaser is terminated, the attempt to register has no
effect, and a negative value is returned.

@param parties the number of additional parties required to
advance to the next phase
@return the arrival phase number to which this registration
applied.  If this value is negative, then this phaser has
terminated, in which case registration has no effect.
@throws IllegalStateException if attempting to register more
than the maximum supported number of parties
@throws IllegalArgumentException if {@code parties < 0}
"
      end

      operation 9201922 "arrive"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Arrives at this phaser, without waiting for others to arrive.

<p>It is a usage error for an unregistered party to invoke this
method.  However, this error may result in an {@code
IllegalStateException} only upon some subsequent operation on
this phaser, if ever.

@return the arrival phase number, or a negative value if terminated
@throws IllegalStateException if not terminated and the number
of unarrived parties would become negative
"
      end

      operation 9202050 "arriveAndDeregister"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Arrives at this phaser and deregisters from it without waiting
for others to arrive. Deregistration reduces the number of
parties required to advance in future phases.  If this phaser
has a parent, and deregistration causes this phaser to have
zero parties, this phaser is also deregistered from its parent.

<p>It is a usage error for an unregistered party to invoke this
method.  However, this error may result in an {@code
IllegalStateException} only upon some subsequent operation on
this phaser, if ever.

@return the arrival phase number, or a negative value if terminated
@throws IllegalStateException if not terminated and the number
of registered or unarrived parties would become negative
"
      end

      operation 9202178 "arriveAndAwaitAdvance"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Arrives at this phaser and awaits others. Equivalent in effect
to {@code awaitAdvance(arrive())}.  If you need to await with
interruption or timeout, you can arrange this with an analogous
construction using one of the other forms of the {@code
awaitAdvance} method.  If instead you need to deregister upon
arrival, use {@code awaitAdvance(arriveAndDeregister())}.

<p>It is a usage error for an unregistered party to invoke this
method.  However, this error may result in an {@code
IllegalStateException} only upon some subsequent operation on
this phaser, if ever.

@return the arrival phase number, or the (negative)
{@linkplain #getPhase() current phase} if terminated
@throws IllegalStateException if not terminated and the number
of unarrived parties would become negative
"
      end

      operation 9202306 "awaitAdvance"
	public explicit_return_type "int"
	nparams 1
	  param in name "phase" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Awaits the phase of this phaser to advance from the given phase
value, returning immediately if the current phase is not equal
to the given phase value or this phaser is terminated.

@param phase an arrival phase number, or negative value if
terminated; this argument is normally the value returned by a
previous call to {@code arrive} or {@code arriveAndDeregister}.
@return the next arrival phase number, or the argument if it is
negative, or the (negative) {@linkplain #getPhase() current phase}
if terminated
"
      end

      operation 9202434 "awaitAdvanceInterruptibly"
	public explicit_return_type "int"
	nparams 1
	  param in name "phase" explicit_type "int"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Awaits the phase of this phaser to advance from the given phase
value, throwing {@code InterruptedException} if interrupted
while waiting, or returning immediately if the current phase is
not equal to the given phase value or this phaser is
terminated.

@param phase an arrival phase number, or negative value if
terminated; this argument is normally the value returned by a
previous call to {@code arrive} or {@code arriveAndDeregister}.
@return the next arrival phase number, or the argument if it is
negative, or the (negative) {@linkplain #getPhase() current phase}
if terminated
@throws InterruptedException if thread interrupted while waiting
"
      end

      operation 9202562 "awaitAdvanceInterruptibly"
	public explicit_return_type "int"
	nparams 3
	  param in name "phase" explicit_type "int"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 2
	  exception class_ref 129666 // InterruptedException
	  exception class_ref 1065602 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Awaits the phase of this phaser to advance from the given phase
value or the given timeout to elapse, throwing {@code
InterruptedException} if interrupted while waiting, or
returning immediately if the current phase is not equal to the
given phase value or this phaser is terminated.

@param phase an arrival phase number, or negative value if
terminated; this argument is normally the value returned by a
previous call to {@code arrive} or {@code arriveAndDeregister}.
@param timeout how long to wait before giving up, in units of
       {@code unit}
@param unit a {@code TimeUnit} determining how to interpret the
       {@code timeout} parameter
@return the next arrival phase number, or the argument if it is
negative, or the (negative) {@linkplain #getPhase() current phase}
if terminated
@throws InterruptedException if thread interrupted while waiting
@throws TimeoutException if timed out while waiting
"
      end

      operation 9202690 "forceTermination"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forces this phaser to enter termination state.  Counts of
registered parties are unaffected.  If this phaser is a member
of a tiered set of phasers, then all of the phasers in the set
are terminated.  If this phaser is already terminated, this
method has no effect.  This method may be useful for
coordinating recovery after one or more tasks encounter
unexpected exceptions.
"
      end

      operation 9202818 "getPhase"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current phase number. The maximum phase number is
{@code Integer.MAX_VALUE}, after which it restarts at
zero. Upon termination, the phase number is negative,
in which case the prevailing phase prior to termination
may be obtained via {@code getPhase() + Integer.MIN_VALUE}.

@return the phase number, or a negative value if terminated
"
      end

      operation 9202946 "getRegisteredParties"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of parties registered at this phaser.

@return the number of parties
"
      end

      operation 9203074 "getArrivedParties"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of registered parties that have arrived at
the current phase of this phaser. If this phaser has terminated,
the returned value is meaningless and arbitrary.

@return the number of arrived parties
"
      end

      operation 9203202 "getUnarrivedParties"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of registered parties that have not yet
arrived at the current phase of this phaser. If this phaser has
terminated, the returned value is meaningless and arbitrary.

@return the number of unarrived parties
"
      end

      operation 9203330 "getParent"
	public return_type class_ref 1123074 // Phaser
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent of this phaser, or {@code null} if none.

@return the parent of this phaser, or {@code null} if none
"
      end

      operation 9203458 "getRoot"
	public return_type class_ref 1123074 // Phaser
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root ancestor of this phaser, which is the same as
this phaser if it has no parent.

@return the root ancestor of this phaser
"
      end

      operation 9203586 "isTerminated"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this phaser has been terminated.

@return {@code true} if this phaser has been terminated
"
      end

      operation 9203714 "onAdvance"
	protected explicit_return_type "boolean"
	nparams 2
	  param in name "phase" explicit_type "int"
	  param in name "registeredParties" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridable method to perform an action upon impending phase
advance, and to control termination. This method is invoked
upon arrival of the party advancing this phaser (when all other
waiting parties are dormant).  If this method returns {@code
true}, this phaser will be set to a final termination state
upon advance, and subsequent calls to {@link #isTerminated}
will return true. Any (unchecked) Exception or Error thrown by
an invocation of this method is propagated to the party
attempting to advance this phaser, in which case no advance
occurs.

<p>The arguments to this method provide the state of the phaser
prevailing for the current transition.  The effects of invoking
arrival, registration, and waiting methods on this phaser from
within {@code onAdvance} are unspecified and should not be
relied on.

<p>If this phaser is a member of a tiered set of phasers, then
{@code onAdvance} is invoked only for its root phaser on each
advance.

<p>To support the most common use cases, the default
implementation of this method returns {@code true} when the
number of registered parties has become zero as the result of a
party invoking {@code arriveAndDeregister}.  You can disable
this behavior, thus enabling continuation upon future
registrations, by overriding this method to always return
{@code false}:

<pre> {@code
Phaser phaser = new Phaser() {
  protected boolean onAdvance(int phase, int parties) { return false; }
}}</pre>

@param phase the current phase number on entry to this method,
before this phaser is advanced
@param registeredParties the current number of registered parties
@return {@code true} if this phaser should terminate
"
      end

      operation 9203842 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string identifying this phaser, as well as its
state.  The state, in brackets, includes the String {@code
\"phase = \"} followed by the phase number, {@code \"parties = \"}
followed by the number of registered parties, and {@code
\"arrived = \"} followed by the number of arrived parties.

@return a string identifying this phaser, as well as its state
"
      end

      operation 9203970 "stateToString"
	private return_type class_ref 128130 // String
	nparams 1
	  param in name "s" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implementation of toString and string-based error messages
"
      end

      operation 9204098 "releaseWaiters"
	private explicit_return_type "void"
	nparams 1
	  param in name "phase" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Waiting mechanics

Removes and signals threads from queue for phase.
"
      end

      operation 9204226 "abortWait"
	private explicit_return_type "int"
	nparams 1
	  param in name "phase" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Variant of releaseWaiters that additionally tries to remove any
nodes no longer waiting for advance due to timeout or
interrupt. Currently, nodes are removed only if they are at
head of queue, which suffices to reduce memory footprint in
most usages.

@return current phase on exit
"
      end

      attribute 2140034 "NCPU"
	class_attribute const_attribute private explicit_type "int"
	init_value " Runtime.getRuntime().availableProcessors()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of CPUs, for spin control 
"
      end

      attribute 2140162 "SPINS_PER_ARRIVAL"
	class_attribute const_attribute package explicit_type "int"
	init_value " (NCPU < 2) ? 1 : 1 << 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of times to spin before blocking while waiting for
advance, per arrival while waiting. On multiprocessors, fully
blocking and waking up a large number of threads all at once is
usually a very slow process, so we use rechargeable spins to
avoid it when threads regularly arrive: When a thread in
internalAwaitAdvance notices another arrival before blocking,
and there appear to be enough CPUs available, it spins
SPINS_PER_ARRIVAL more times before blocking. The value trades
off good-citizenship vs big unnecessary slowdowns.

"
      end

      operation 9204354 "internalAwaitAdvance"
	private explicit_return_type "int"
	nparams 2
	  param in name "phase" explicit_type "int"
	  param inout name "node" type class_ref 1123202 // QNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Possibly blocks and waits for phase to advance unless aborted.
Call only on root phaser.

@param phase current phase
@param node if non-null, the wait node to track interrupt and timeout;
if null, denotes noninterruptible wait
@return current phase
"
      end

      attribute 2141058 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2141186 "stateOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 175234 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = Phaser.class;
            stateOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"state\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 1123330 "PriorityBlockingQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1064066 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 1099522 // BlockingQueue
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"unchecked\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An unbounded {@linkplain BlockingQueue blocking queue} that uses
the same ordering rules as class {@link PriorityQueue} and supplies
blocking retrieval operations.  While this queue is logically
unbounded, attempted additions may fail due to resource exhaustion
(causing {@code OutOfMemoryError}). This class does not permit
{@code null} elements.  A priority queue relying on {@linkplain
Comparable natural ordering} also does not permit insertion of
non-comparable objects (doing so results in
{@code ClassCastException}).

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.  The Iterator provided in method {@link
#iterator()} is <em>not</em> guaranteed to traverse the elements of
the PriorityBlockingQueue in any particular order. If you need
ordered traversal, consider using
{@code Arrays.sort(pq.toArray())}.  Also, method {@code drainTo}
can be used to <em>remove</em> some or all elements in priority
order and place them in another collection.

<p>Operations on this class make no guarantees about the ordering
of elements with equal priority. If you need to enforce an
ordering, you can define custom classes or comparators that use a
secondary key to break ties in primary priority values.  For
example, here is a class that applies first-in-first-out
tie-breaking to comparable elements. To use it, you would insert a
{@code new FIFOEntry(anEntry)} instead of a plain entry object.

 <pre> {@code
class FIFOEntry<E extends Comparable<? super E>>
    implements Comparable<FIFOEntry<E>> {
  static final AtomicLong seq = new AtomicLong(0);
  final long seqNum;
  final E entry;
  public FIFOEntry(E entry) {
    seqNum = seq.getAndIncrement();
    this.entry = entry;
  }
  public E getEntry() { return entry; }
  public int compareTo(FIFOEntry<E> other) {
    int res = entry.compareTo(other.entry);
    if (res == 0 && other.entry != this.entry)
      res = (seqNum < other.seqNum ? -1 : 1);
    return res;
  }
}}</pre>

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 3631106 // <realization>
	relation 3631106 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3631106 // <realization>
	  b parent class_ref 1064066 // AbstractQueue
      end

      classrelation 3631234 // <realization>
	relation 3631234 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3631234 // <realization>
	  b parent class_ref 1099522 // BlockingQueue
      end

      classrelation 3631362 // <realization>
	relation 3631362 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3631362 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2141314 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5595510919245408276L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2141442 "DEFAULT_INITIAL_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The implementation uses an array-based binary heap, with public
operations protected with a single lock. However, allocation
during resizing uses a simple spinlock (used only while not
holding main lock) in order to allow takes to operate
concurrently with allocation.  This avoids repeated
postponement of waiting consumers and consequent element
build-up. The need to back away from lock during allocation
makes it impossible to simply wrap delegated
java.util.PriorityQueue operations within a lock, as was done
in a previous version of this class. To maintain
interoperability, a plain PriorityQueue is still used during
serialization, which maintains compatibility at the expense of
transiently doubling overhead.


Default array capacity.

"
      end

      attribute 2141570 "MAX_ARRAY_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " Integer.MAX_VALUE - 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum size of array to allocate.
Some VMs reserve some header words in an array.
Attempts to allocate larger arrays may result in
OutOfMemoryError: Requested array size exceeds VM limit

"
      end

      classrelation 3631490 // queue (<unidirectional association>)
	relation 3631490 --->
	  a role_name "queue" multiplicity "[]" private
	    comment "
Priority queue represented as a balanced binary heap: the two
children of queue[n] are queue[2*n+1] and queue[2*(n+1)].  The
priority queue is ordered by comparator, or by the elements'
natural ordering, if comparator is null: For each node n in the
heap and each descendant d of n, n <= d.  The element with the
lowest value is in queue[0], assuming the queue is nonempty.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3631490 // queue (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 2141698 "size"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of elements in the priority queue.

"
      end

      classrelation 3631618 // comparator (<unidirectional association>)
	relation 3631618 --->
	  a role_name "comparator" private
	    comment "
The comparator, or null if priority queue uses elements'
natural ordering.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super E> ${name}${value};
"
	    classrelation_ref 3631618 // comparator (<unidirectional association>)
	  b parent class_ref 184962 // Comparator
      end

      classrelation 3631746 // lock (<unidirectional association>)
	relation 3631746 --->
	  a role_name "lock" const_relation private
	    comment "
Lock used for all public operations

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3631746 // lock (<unidirectional association>)
	  b parent class_ref 968706 // ReentrantLock
      end

      classrelation 3631874 // notEmpty (<unidirectional association>)
	relation 3631874 --->
	  a role_name "notEmpty" const_relation private
	    comment "
Condition for blocking when empty

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3631874 // notEmpty (<unidirectional association>)
	  b parent class_ref 864770 // Condition
      end

      attribute 2141826 "allocationSpinLock"
	volatile private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Spinlock for allocation, acquired via CAS.

"
      end

      classrelation 3632002 // q (<unidirectional association>)
	relation 3632002 --->
	  a role_name "q" private
	    comment "
A plain PriorityQueue used only for serialization,
to maintain compatibility with previous versions
of this class. Non-null only during serialization/deserialization.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 3632002 // q (<unidirectional association>)
	  b parent class_ref 1090178 // PriorityQueue
      end

      operation 9204866 "PriorityBlockingQueue"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code PriorityBlockingQueue} with the default
initial capacity (11) that orders its elements according to
their {@linkplain Comparable natural ordering}.
"
      end

      operation 9204994 "PriorityBlockingQueue"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code PriorityBlockingQueue} with the specified
initial capacity that orders its elements according to their
{@linkplain Comparable natural ordering}.

@param initialCapacity the initial capacity for this priority queue
@throws IllegalArgumentException if {@code initialCapacity} is less
        than 1
"
      end

      operation 9205122 "PriorityBlockingQueue"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "initialCapacity" explicit_type "int"
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code PriorityBlockingQueue} with the specified initial
capacity that orders its elements according to the specified
comparator.

@param initialCapacity the initial capacity for this priority queue
@param  comparator the comparator that will be used to order this
        priority queue.  If {@code null}, the {@linkplain Comparable
        natural ordering} of the elements will be used.
@throws IllegalArgumentException if {@code initialCapacity} is less
        than 1
"
      end

      operation 9205250 "PriorityBlockingQueue"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code PriorityBlockingQueue} containing the elements
in the specified collection.  If the specified collection is a
{@link SortedSet} or a {@link PriorityQueue}, this
priority queue will be ordered according to the same ordering.
Otherwise, this priority queue will be ordered according to the
{@linkplain Comparable natural ordering} of its elements.

@param  c the collection whose elements are to be placed
        into this priority queue
@throws ClassCastException if elements of the specified collection
        cannot be compared to one another according to the priority
        queue's ordering
@throws NullPointerException if the specified collection or any
        of its elements are null
"
      end

      operation 9205378 "tryGrow"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "array" type class_ref 129538 // Object
	multiplicity "[]"
	  param in name "oldCap" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to grow array to accommodate at least one more element
(but normally expand by about 50%), giving up (allowing retry)
on contention (which we expect to be rare). Call only while
holding lock.

@param array the heap array
@param oldCap the length of the array
"
      end

      operation 9205506 "dequeue"
	cpp_inline private explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mechanics for poll().  Call only while holding lock.
"
      end

      operation 9205634 "siftUpComparable"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 3
	  param in name "k" explicit_type "int"
	  param inout name "x" explicit_type "T"
	  param inout name "array" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts item x at position k, maintaining heap invariant by
promoting x up the tree until it is greater than or equal to
its parent, or is the root.

To simplify and speed up coercions and comparisons. the
Comparable and Comparator versions are separated into different
methods that are otherwise identical. (Similarly for siftDown.)
These methods are static, with heap state as arguments, to
simplify use in light of possible comparator exceptions.

@param k the position to fill
@param x the item to insert
@param array the heap array
"
      end

      operation 9205762 "siftUpUsingComparator"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 4
	  param in name "k" explicit_type "int"
	  param inout name "x" explicit_type "T"
	  param inout name "array" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "cmp" type class_ref 184962 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}<? super T> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9205890 "siftDownComparable"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 4
	  param in name "k" explicit_type "int"
	  param inout name "x" explicit_type "T"
	  param inout name "array" type class_ref 129538 // Object
	multiplicity "[]"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts item x at position k, maintaining heap invariant by
demoting x down the tree repeatedly until it is less than or
equal to its children or is a leaf.

@param k the position to fill
@param x the item to insert
@param array the heap array
@param n heap size
"
      end

      operation 9206018 "siftDownUsingComparator"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 5
	  param in name "k" explicit_type "int"
	  param inout name "x" explicit_type "T"
	  param inout name "array" type class_ref 129538 // Object
	multiplicity "[]"
	  param in name "n" explicit_type "int"
	  param inout name "cmp" type class_ref 184962 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4}<? super T> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9206146 "heapify"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Establishes the heap invariant (described above) in the entire tree,
assuming nothing about the order of the elements prior to the call.
"
      end

      operation 9206274 "add"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this priority queue.

@param e the element to add
@return {@code true} (as specified by {@link Collection#add})
@throws ClassCastException if the specified element cannot be compared
        with elements currently in the priority queue according to the
        priority queue's ordering
@throws NullPointerException if the specified element is null
"
      end

      operation 9206402 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this priority queue.
As the queue is unbounded, this method will never return {@code false}.

@param e the element to add
@return {@code true} (as specified by {@link Queue#offer})
@throws ClassCastException if the specified element cannot be compared
        with elements currently in the priority queue according to the
        priority queue's ordering
@throws NullPointerException if the specified element is null
"
      end

      operation 9206530 "put"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this priority queue.
As the queue is unbounded, this method will never block.

@param e the element to add
@throws ClassCastException if the specified element cannot be compared
        with elements currently in the priority queue according to the
        priority queue's ordering
@throws NullPointerException if the specified element is null
"
      end

      operation 9206658 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this priority queue.
As the queue is unbounded, this method will never block or
return {@code false}.

@param e the element to add
@param timeout This parameter is ignored as the method never blocks
@param unit This parameter is ignored as the method never blocks
@return {@code true} (as specified by
 {@link BlockingQueue#offer(Object,long,TimeUnit) BlockingQueue.offer})
@throws ClassCastException if the specified element cannot be compared
        with elements currently in the priority queue according to the
        priority queue's ordering
@throws NullPointerException if the specified element is null
"
      end

      operation 9206786 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9206914 "take"
	cpp_inline public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9207042 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9207170 "peek"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9207298 "comparator"
	cpp_inline public return_type class_ref 184962 // Comparator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the comparator used to order the elements in this queue,
or {@code null} if this queue uses the {@linkplain Comparable
natural ordering} of its elements.

@return the comparator used to order the elements in this queue,
        or {@code null} if this queue uses the natural
        ordering of its elements
"
      end

      operation 9207426 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9207554 "remainingCapacity"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns {@code Integer.MAX_VALUE} because
a {@code PriorityBlockingQueue} is not capacity constrained.
@return {@code Integer.MAX_VALUE} always
"
      end

      operation 9207682 "indexOf"
	cpp_inline private explicit_return_type "int"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9207810 "removeAt"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the ith element from queue.
"
      end

      operation 9207938 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this queue,
if it is present.  More formally, removes an element {@code e} such
that {@code o.equals(e)}, if this queue contains one or more such
elements.  Returns {@code true} if and only if this queue contained
the specified element (or equivalently, if this queue changed as a
result of the call).

@param o element to be removed from this queue, if present
@return {@code true} if this queue changed as a result of the call
"
      end

      operation 9208066 "removeEQ"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Identity-based version for use in Itr.remove
"
      end

      operation 9208194 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains the specified element.
More formally, returns {@code true} if and only if this queue contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this queue
@return {@code true} if this queue contains the specified element
"
      end

      operation 9208322 "toArray"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue.
The returned array elements are in no particular order.

<p>The returned array will be \"safe\" in that no references to it are
maintained by this queue.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this queue
"
      end

      operation 9208450 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9208578 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}
"
      end

      operation 9208706 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 184194 // Collection
	  param in name "maxElements" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}
"
      end

      operation 9208834 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this queue.
The queue will be empty after this call returns.
"
      end

      operation 9208962 "toArray"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue; the
runtime type of the returned array is that of the specified array.
The returned array elements are in no particular order.
If the queue fits in the specified array, it is returned therein.
Otherwise, a new array is allocated with the runtime type of the
specified array and the size of this queue.

<p>If this queue fits in the specified array with room to spare
(i.e., the array has more elements than this queue), the element in
the array immediately following the end of the queue is set to
{@code null}.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose {@code x} is a queue known to contain only strings.
The following code can be used to dump the queue into a newly
allocated array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the queue are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this queue
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this queue
@throws NullPointerException if the specified array is null
"
      end

      operation 9209090 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue. The
iterator does not return the elements in any particular order.

<p>The returned iterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

@return an iterator over the elements in this queue
"
      end

      class 1123458 "Itr"
	visibility package 
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3632130 // <realization>
	  relation 3632130 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3632130 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	classrelation 3632258 // array (<unidirectional association>)
	  relation 3632258 --->
	    a role_name "array" multiplicity "[]" const_relation package
	      comment " Array of all elements"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3632258 // array (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	attribute 2141954 "cursor"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " index of next element to return"
	end

	attribute 2142082 "lastRet"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " index of last element, or -1 if no such"
	end

	operation 9209218 "Itr"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "array" type class_ref 129538 // Object
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9209346 "hasNext"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9209474 "next"
	  cpp_inline public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9209602 "remove"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9209730 "writeObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves this queue to a stream (that is, serializes it).

For compatibility with previous version of this class, elements
are first copied to a java.util.PriorityQueue, which is then
serialized.

@param s the stream
@throws java.io.IOException if an I/O error occurs
"
      end

      operation 9209858 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes this queue from a stream (that is, deserializes it).
@param s the stream
@throws ClassNotFoundException if the class of a serialized object
        could not be found
@throws java.io.IOException if an I/O error occurs
"
      end

      class 1123586 "PBQSpliterator"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3632386 // <realization>
	  relation 3632386 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3632386 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	classrelation 3632514 // queue (<unidirectional association>)
	  relation 3632514 --->
	    a role_name "queue" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 3632514 // queue (<unidirectional association>)
	    b parent class_ref 1123330 // PriorityBlockingQueue
	end

	classrelation 3632642 // array (<unidirectional association>)
	  relation 3632642 --->
	    a role_name "array" multiplicity "[]" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3632642 // array (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	attribute 2142210 "index"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2142338 "fence"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9209986 "PBQSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "queue" type class_ref 1123330 // PriorityBlockingQueue
	    param inout name "array" type class_ref 129538 // Object
	  multiplicity "[]"
	    param in name "index" explicit_type "int"
	    param in name "fence" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9210114 "getFence"
	  cpp_inline package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9210242 "trySplit"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9210370 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9210498 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9210626 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9210754 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9210882 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Spliterator} over the elements in this queue.

<p>The returned spliterator is
<a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.

<p>The {@code Spliterator} reports {@link Spliterator#SIZED} and
{@link Spliterator#NONNULL}.

@implNote
The {@code Spliterator} additionally reports {@link Spliterator#SUBSIZED}.

@return a {@code Spliterator} over the elements in this queue
@since 1.8
"
      end

      attribute 2142466 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2142594 "allocationSpinLockOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 175362 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = PriorityBlockingQueue.class;
            allocationSpinLockOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"allocationSpinLock\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 1123714 "RecursiveAction"
      abstract visibility public 
      nactuals 1
      actual class class_ref 1065346 // ForkJoinTask
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A recursive resultless {@link ForkJoinTask}.  This class
establishes conventions to parameterize resultless actions as
{@code Void} {@code ForkJoinTask}s. Because {@code null} is the
only valid value of type {@code Void}, methods such as {@code join}
always return {@code null} upon completion.

<p><b>Sample Usages.</b> Here is a simple but complete ForkJoin
sort that sorts a given {@code long[]} array:

 <pre> {@code
static class SortTask extends RecursiveAction {
  final long[] array; final int lo, hi;
  SortTask(long[] array, int lo, int hi) {
    this.array = array; this.lo = lo; this.hi = hi;
  }
  SortTask(long[] array) { this(array, 0, array.length); }
  protected void compute() {
    if (hi - lo < THRESHOLD)
      sortSequentially(lo, hi);
    else {
      int mid = (lo + hi) >>> 1;
      invokeAll(new SortTask(array, lo, mid),
                new SortTask(array, mid, hi));
      merge(lo, mid, hi);
    }
  }
  // implementation details follow:
  static final int THRESHOLD = 1000;
  void sortSequentially(int lo, int hi) {
    Arrays.sort(array, lo, hi);
  }
  void merge(int lo, int mid, int hi) {
    long[] buf = Arrays.copyOfRange(array, lo, mid);
    for (int i = 0, j = lo, k = mid; i < buf.length; j++)
      array[j] = (k == hi || buf[i] < array[k]) ?
        buf[i++] : array[k++];
  }
}}</pre>

You could then sort {@code anArray} by creating {@code new
SortTask(anArray)} and invoking it in a ForkJoinPool.  As a more
concrete simple example, the following task increments each element
of an array:
 <pre> {@code
class IncrementTask extends RecursiveAction {
  final long[] array; final int lo, hi;
  IncrementTask(long[] array, int lo, int hi) {
    this.array = array; this.lo = lo; this.hi = hi;
  }
  protected void compute() {
    if (hi - lo < THRESHOLD) {
      for (int i = lo; i < hi; ++i)
        array[i]++;
    }
    else {
      int mid = (lo + hi) >>> 1;
      invokeAll(new IncrementTask(array, lo, mid),
                new IncrementTask(array, mid, hi));
    }
  }
}}</pre>

<p>The following example illustrates some refinements and idioms
that may lead to better performance: RecursiveActions need not be
fully recursive, so long as they maintain the basic
divide-and-conquer approach. Here is a class that sums the squares
of each element of a double array, by subdividing out only the
right-hand-sides of repeated divisions by two, and keeping track of
them with a chain of {@code next} references. It uses a dynamic
threshold based on method {@code getSurplusQueuedTaskCount}, but
counterbalances potential excess partitioning by directly
performing leaf actions on unstolen tasks rather than further
subdividing.

 <pre> {@code
double sumOfSquares(ForkJoinPool pool, double[] array) {
  int n = array.length;
  Applyer a = new Applyer(array, 0, n, null);
  pool.invoke(a);
  return a.result;
}

class Applyer extends RecursiveAction {
  final double[] array;
  final int lo, hi;
  double result;
  Applyer next; // keeps track of right-hand-side tasks
  Applyer(double[] array, int lo, int hi, Applyer next) {
    this.array = array; this.lo = lo; this.hi = hi;
    this.next = next;
  }

  double atLeaf(int l, int h) {
    double sum = 0;
    for (int i = l; i < h; ++i) // perform leftmost base step
      sum += array[i] * array[i];
    return sum;
  }

  protected void compute() {
    int l = lo;
    int h = hi;
    Applyer right = null;
    while (h - l > 1 && getSurplusQueuedTaskCount() <= 3) {
      int mid = (l + h) >>> 1;
      right = new Applyer(array, mid, h, right);
      right.fork();
      h = mid;
    }
    double sum = atLeaf(l, h);
    while (right != null) {
      if (right.tryUnfork()) // directly calculate if not stolen
        sum += right.atLeaf(right.lo, right.hi);
      else {
        right.join();
        sum += right.result;
      }
      right = right.next;
    }
    result = sum;
  }
}}</pre>

@since 1.7
@author Doug Lea
"
      classrelation 3632770 // <realization>
	relation 3632770 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3632770 // <realization>
	  b parent class_ref 1065346 // ForkJoinTask
      end

      attribute 2142722 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5232453952276485070L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9211010 "compute"
	abstract protected explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The main computation performed by this task.
"
      end

      operation 9211138 "getRawResult"
	public return_type class_ref 146946 // Void
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns {@code null}.

@return {@code null} always
"
      end

      operation 9211266 "setRawResult"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "mustBeNull" type class_ref 146946 // Void
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requires null completion value.
"
      end

      operation 9211394 "exec"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements execution conventions for RecursiveActions.
"
      end
    end

    class 1123842 "RecursiveTask"
      abstract visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 1065346 // ForkJoinTask
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A recursive result-bearing {@link ForkJoinTask}.

<p>For a classic example, here is a task computing Fibonacci numbers:

 <pre> {@code
class Fibonacci extends RecursiveTask<Integer> {
  final int n;
  Fibonacci(int n) { this.n = n; }
  Integer compute() {
    if (n <= 1)
      return n;
    Fibonacci f1 = new Fibonacci(n - 1);
    f1.fork();
    Fibonacci f2 = new Fibonacci(n - 2);
    return f2.compute() + f1.join();
  }
}}</pre>

However, besides being a dumb way to compute Fibonacci functions
(there is a simple fast linear algorithm that you'd use in
practice), this is likely to perform poorly because the smallest
subtasks are too small to be worthwhile splitting up. Instead, as
is the case for nearly all fork/join applications, you'd pick some
minimum granularity size (for example 10 here) for which you always
sequentially solve rather than subdividing.

@since 1.7
@author Doug Lea
"
      classrelation 3632898 // <realization>
	relation 3632898 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3632898 // <realization>
	  b parent class_ref 1065346 // ForkJoinTask
      end

      attribute 2142850 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5232453952276485270L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2142978 "result"
	package explicit_type "V"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The result of the computation.

"
      end

      operation 9211522 "compute"
	abstract cpp_inline protected explicit_return_type "V"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The main computation performed by this task.
@return the result of the computation
"
      end

      operation 9211650 "getRawResult"
	cpp_inline public explicit_return_type "V"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9211778 "setRawResult"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9211906 "exec"
	cpp_inline protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements execution conventions for RecursiveTask.
"
      end
    end

    class 1123970 "RejectedExecutionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception thrown by an {@link Executor} when a task cannot be
accepted for execution.

@since 1.5
@author Doug Lea
"
      classrelation 3633026 // <generalisation>
	relation 3633026 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3633026 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 2143106 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -375805702767069545L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9212034 "RejectedExecutionException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code RejectedExecutionException} with no detail message.
The cause is not initialized, and may subsequently be
initialized by a call to {@link #initCause(Throwable) initCause}.
"
      end

      operation 9212162 "RejectedExecutionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code RejectedExecutionException} with the
specified detail message. The cause is not initialized, and may
subsequently be initialized by a call to {@link
#initCause(Throwable) initCause}.

@param message the detail message
"
      end

      operation 9212290 "RejectedExecutionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code RejectedExecutionException} with the
specified detail message and cause.

@param  message the detail message
@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)
"
      end

      operation 9212418 "RejectedExecutionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code RejectedExecutionException} with the
specified cause.  The detail message is set to {@code (cause ==
null ? null : cause.toString())} (which typically contains
the class and detail message of {@code cause}).

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)
"
      end
    end

    class 1124098 "RejectedExecutionHandler"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A handler for tasks that cannot be executed by a {@link ThreadPoolExecutor}.

@since 1.5
@author Doug Lea
"
      operation 9212546 "rejectedExecution"
	public explicit_return_type "void"
	nparams 2
	  param inout name "r" type class_ref 128770 // Runnable
	  param inout name "executor" type class_ref 1124226 // ThreadPoolExecutor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method that may be invoked by a {@link ThreadPoolExecutor} when
{@link ThreadPoolExecutor#execute execute} cannot accept a
task.  This may occur when no more threads or queue slots are
available because their bounds would be exceeded, or upon
shutdown of the Executor.

<p>In the absence of other alternatives, the method may throw
an unchecked {@link RejectedExecutionException}, which will be
propagated to the caller of {@code execute}.

@param r the runnable task requested to be executed
@param executor the executor attempting to execute this task
@throws RejectedExecutionException if there is no remedy
"
      end
    end

    class 1124226 "ThreadPoolExecutor"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An {@link ExecutorService} that executes each submitted task using
one of possibly several pooled threads, normally configured
using {@link Executors} factory methods.

<p>Thread pools address two different problems: they usually
provide improved performance when executing large numbers of
asynchronous tasks, due to reduced per-task invocation overhead,
and they provide a means of bounding and managing the resources,
including threads, consumed when executing a collection of tasks.
Each {@code ThreadPoolExecutor} also maintains some basic
statistics, such as the number of completed tasks.

<p>To be useful across a wide range of contexts, this class
provides many adjustable parameters and extensibility
hooks. However, programmers are urged to use the more convenient
{@link Executors} factory methods {@link
Executors#newCachedThreadPool} (unbounded thread pool, with
automatic thread reclamation), {@link Executors#newFixedThreadPool}
(fixed size thread pool) and {@link
Executors#newSingleThreadExecutor} (single background thread), that
preconfigure settings for the most common usage
scenarios. Otherwise, use the following guide when manually
configuring and tuning this class:

<dl>

<dt>Core and maximum pool sizes</dt>

<dd>A {@code ThreadPoolExecutor} will automatically adjust the
pool size (see {@link #getPoolSize})
according to the bounds set by
corePoolSize (see {@link #getCorePoolSize}) and
maximumPoolSize (see {@link #getMaximumPoolSize}).

When a new task is submitted in method {@link #execute(Runnable)},
and fewer than corePoolSize threads are running, a new thread is
created to handle the request, even if other worker threads are
idle.  If there are more than corePoolSize but less than
maximumPoolSize threads running, a new thread will be created only
if the queue is full.  By setting corePoolSize and maximumPoolSize
the same, you create a fixed-size thread pool. By setting
maximumPoolSize to an essentially unbounded value such as {@code
Integer.MAX_VALUE}, you allow the pool to accommodate an arbitrary
number of concurrent tasks. Most typically, core and maximum pool
sizes are set only upon construction, but they may also be changed
dynamically using {@link #setCorePoolSize} and {@link
#setMaximumPoolSize}. </dd>

<dt>On-demand construction</dt>

<dd>By default, even core threads are initially created and
started only when new tasks arrive, but this can be overridden
dynamically using method {@link #prestartCoreThread} or {@link
#prestartAllCoreThreads}.  You probably want to prestart threads if
you construct the pool with a non-empty queue. </dd>

<dt>Creating new threads</dt>

<dd>New threads are created using a {@link ThreadFactory}.  If not
otherwise specified, a {@link Executors#defaultThreadFactory} is
used, that creates threads to all be in the same {@link
ThreadGroup} and with the same {@code NORM_PRIORITY} priority and
non-daemon status. By supplying a different ThreadFactory, you can
alter the thread's name, thread group, priority, daemon status,
etc. If a {@code ThreadFactory} fails to create a thread when asked
by returning null from {@code newThread}, the executor will
continue, but might not be able to execute any tasks. Threads
should possess the \"modifyThread\" {@code RuntimePermission}. If
worker threads or other threads using the pool do not possess this
permission, service may be degraded: configuration changes may not
take effect in a timely manner, and a shutdown pool may remain in a
state in which termination is possible but not completed.</dd>

<dt>Keep-alive times</dt>

<dd>If the pool currently has more than corePoolSize threads,
excess threads will be terminated if they have been idle for more
than the keepAliveTime (see {@link #getKeepAliveTime(TimeUnit)}).
This provides a means of reducing resource consumption when the
pool is not being actively used. If the pool becomes more active
later, new threads will be constructed. This parameter can also be
changed dynamically using method {@link #setKeepAliveTime(long,
TimeUnit)}.  Using a value of {@code Long.MAX_VALUE} {@link
TimeUnit#NANOSECONDS} effectively disables idle threads from ever
terminating prior to shut down. By default, the keep-alive policy
applies only when there are more than corePoolSize threads. But
method {@link #allowCoreThreadTimeOut(boolean)} can be used to
apply this time-out policy to core threads as well, so long as the
keepAliveTime value is non-zero. </dd>

<dt>Queuing</dt>

<dd>Any {@link BlockingQueue} may be used to transfer and hold
submitted tasks.  The use of this queue interacts with pool sizing:

<ul>

<li> If fewer than corePoolSize threads are running, the Executor
always prefers adding a new thread
rather than queuing.</li>

<li> If corePoolSize or more threads are running, the Executor
always prefers queuing a request rather than adding a new
thread.</li>

<li> If a request cannot be queued, a new thread is created unless
this would exceed maximumPoolSize, in which case, the task will be
rejected.</li>

</ul>

There are three general strategies for queuing:
<ol>

<li> <em> Direct handoffs.</em> A good default choice for a work
queue is a {@link SynchronousQueue} that hands off tasks to threads
without otherwise holding them. Here, an attempt to queue a task
will fail if no threads are immediately available to run it, so a
new thread will be constructed. This policy avoids lockups when
handling sets of requests that might have internal dependencies.
Direct handoffs generally require unbounded maximumPoolSizes to
avoid rejection of new submitted tasks. This in turn admits the
possibility of unbounded thread growth when commands continue to
arrive on average faster than they can be processed.  </li>

<li><em> Unbounded queues.</em> Using an unbounded queue (for
example a {@link LinkedBlockingQueue} without a predefined
capacity) will cause new tasks to wait in the queue when all
corePoolSize threads are busy. Thus, no more than corePoolSize
threads will ever be created. (And the value of the maximumPoolSize
therefore doesn't have any effect.)  This may be appropriate when
each task is completely independent of others, so tasks cannot
affect each others execution; for example, in a web page server.
While this style of queuing can be useful in smoothing out
transient bursts of requests, it admits the possibility of
unbounded work queue growth when commands continue to arrive on
average faster than they can be processed.  </li>

<li><em>Bounded queues.</em> A bounded queue (for example, an
{@link ArrayBlockingQueue}) helps prevent resource exhaustion when
used with finite maximumPoolSizes, but can be more difficult to
tune and control.  Queue sizes and maximum pool sizes may be traded
off for each other: Using large queues and small pools minimizes
CPU usage, OS resources, and context-switching overhead, but can
lead to artificially low throughput.  If tasks frequently block (for
example if they are I/O bound), a system may be able to schedule
time for more threads than you otherwise allow. Use of small queues
generally requires larger pool sizes, which keeps CPUs busier but
may encounter unacceptable scheduling overhead, which also
decreases throughput.  </li>

</ol>

</dd>

<dt>Rejected tasks</dt>

<dd>New tasks submitted in method {@link #execute(Runnable)} will be
<em>rejected</em> when the Executor has been shut down, and also when
the Executor uses finite bounds for both maximum threads and work queue
capacity, and is saturated.  In either case, the {@code execute} method
invokes the {@link
RejectedExecutionHandler#rejectedExecution(Runnable, ThreadPoolExecutor)}
method of its {@link RejectedExecutionHandler}.  Four predefined handler
policies are provided:

<ol>

<li> In the default {@link ThreadPoolExecutor.AbortPolicy}, the
handler throws a runtime {@link RejectedExecutionException} upon
rejection. </li>

<li> In {@link ThreadPoolExecutor.CallerRunsPolicy}, the thread
that invokes {@code execute} itself runs the task. This provides a
simple feedback control mechanism that will slow down the rate that
new tasks are submitted. </li>

<li> In {@link ThreadPoolExecutor.DiscardPolicy}, a task that
cannot be executed is simply dropped.  </li>

<li>In {@link ThreadPoolExecutor.DiscardOldestPolicy}, if the
executor is not shut down, the task at the head of the work queue
is dropped, and then execution is retried (which can fail again,
causing this to be repeated.) </li>

</ol>

It is possible to define and use other kinds of {@link
RejectedExecutionHandler} classes. Doing so requires some care
especially when policies are designed to work only under particular
capacity or queuing policies. </dd>

<dt>Hook methods</dt>

<dd>This class provides {@code protected} overridable
{@link #beforeExecute(Thread, Runnable)} and
{@link #afterExecute(Runnable, Throwable)} methods that are called
before and after execution of each task.  These can be used to
manipulate the execution environment; for example, reinitializing
ThreadLocals, gathering statistics, or adding log entries.
Additionally, method {@link #terminated} can be overridden to perform
any special processing that needs to be done once the Executor has
fully terminated.

<p>If hook or callback methods throw exceptions, internal worker
threads may in turn fail and abruptly terminate.</dd>

<dt>Queue maintenance</dt>

<dd>Method {@link #getQueue()} allows access to the work queue
for purposes of monitoring and debugging.  Use of this method for
any other purpose is strongly discouraged.  Two supplied methods,
{@link #remove(Runnable)} and {@link #purge} are available to
assist in storage reclamation when large numbers of queued tasks
become cancelled.</dd>

<dt>Finalization</dt>

<dd>A pool that is no longer referenced in a program <em>AND</em>
has no remaining threads will be {@code shutdown} automatically. If
you would like to ensure that unreferenced pools are reclaimed even
if users forget to call {@link #shutdown}, then you must arrange
that unused threads eventually die, by setting appropriate
keep-alive times, using a lower bound of zero core threads and/or
setting {@link #allowCoreThreadTimeOut(boolean)}.  </dd>

</dl>

<p><b>Extension example</b>. Most extensions of this class
override one or more of the protected hook methods. For example,
here is a subclass that adds a simple pause/resume feature:

 <pre> {@code
class PausableThreadPoolExecutor extends ThreadPoolExecutor {
  private boolean isPaused;
  private ReentrantLock pauseLock = new ReentrantLock();
  private Condition unpaused = pauseLock.newCondition();

  public PausableThreadPoolExecutor(...) { super(...); }

  protected void beforeExecute(Thread t, Runnable r) {
    super.beforeExecute(t, r);
    pauseLock.lock();
    try {
      while (isPaused) unpaused.await();
    } catch (InterruptedException ie) {
      t.interrupt();
    } finally {
      pauseLock.unlock();
    }
  }

  public void pause() {
    pauseLock.lock();
    try {
      isPaused = true;
    } finally {
      pauseLock.unlock();
    }
  }

  public void resume() {
    pauseLock.lock();
    try {
      isPaused = false;
      unpaused.signalAll();
    } finally {
      pauseLock.unlock();
    }
  }
}}</pre>

@since 1.5
@author Doug Lea
"
      classrelation 3633666 // <generalisation>
	relation 3633666 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3633666 // <generalisation>
	  b parent class_ref 1099266 // AbstractExecutorService
      end

      classrelation 3633794 // ctl (<unidirectional association>)
	relation 3633794 --->
	  a role_name "ctl" init_value " new AtomicInteger(ctlOf(RUNNING, 0))" const_relation private
	    comment "
The main pool control state, ctl, is an atomic integer packing
two conceptual fields
  workerCount, indicating the effective number of threads
  runState,    indicating whether running, shutting down etc

In order to pack them into one int, we limit workerCount to
(2^29)-1 (about 500 million) threads rather than (2^31)-1 (2
billion) otherwise representable. If this is ever an issue in
the future, the variable can be changed to be an AtomicLong,
and the shift/mask constants below adjusted. But until the need
arises, this code is a bit faster and simpler using an int.

The workerCount is the number of workers that have been
permitted to start and not permitted to stop.  The value may be
transiently different from the actual number of live threads,
for example when a ThreadFactory fails to create a thread when
asked, and when exiting threads are still performing
bookkeeping before terminating. The user-visible pool size is
reported as the current size of the workers set.

The runState provides the main lifecycle control, taking on values:

  RUNNING:  Accept new tasks and process queued tasks
  SHUTDOWN: Don't accept new tasks, but process queued tasks
  STOP:     Don't accept new tasks, don't process queued tasks,
            and interrupt in-progress tasks
  TIDYING:  All tasks have terminated, workerCount is zero,
            the thread transitioning to state TIDYING
            will run the terminated() hook method
  TERMINATED: terminated() has completed

The numerical order among these values matters, to allow
ordered comparisons. The runState monotonically increases over
time, but need not hit each state. The transitions are:

RUNNING -> SHUTDOWN
   On invocation of shutdown(), perhaps implicitly in finalize()
(RUNNING or SHUTDOWN) -> STOP
   On invocation of shutdownNow()
SHUTDOWN -> TIDYING
   When both queue and pool are empty
STOP -> TIDYING
   When pool is empty
TIDYING -> TERMINATED
   When the terminated() hook method has completed

Threads waiting in awaitTermination() will return when the
state reaches TERMINATED.

Detecting the transition from SHUTDOWN to TIDYING is less
straightforward than you'd like because the queue may become
empty after non-empty and vice versa during SHUTDOWN state, but
we can only terminate if, after seeing that it is empty, we see
that workerCount is 0 (which sometimes entails a recheck -- see
below).

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3633794 // ctl (<unidirectional association>)
	  b parent class_ref 191490 // AtomicInteger
      end

      attribute 2143234 "COUNT_BITS"
	class_attribute const_attribute private explicit_type "int"
	init_value " Integer.SIZE - 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2143362 "CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " (1 << COUNT_BITS) - 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2143490 "RUNNING"
	class_attribute const_attribute private explicit_type "int"
	init_value " -1 << COUNT_BITS"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " runState is stored in the high-order bits
"
      end

      attribute 2143618 "SHUTDOWN"
	class_attribute const_attribute private explicit_type "int"
	init_value "  0 << COUNT_BITS"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2143746 "STOP"
	class_attribute const_attribute private explicit_type "int"
	init_value "  1 << COUNT_BITS"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2143874 "TIDYING"
	class_attribute const_attribute private explicit_type "int"
	init_value "  2 << COUNT_BITS"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2144002 "TERMINATED"
	class_attribute const_attribute private explicit_type "int"
	init_value "  3 << COUNT_BITS"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9212802 "runStateOf"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Packing and unpacking ctl"
      end

      operation 9212930 "workerCountOf"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9213058 "ctlOf"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "rs" explicit_type "int"
	  param in name "wc" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9213186 "runStateLessThan"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "c" explicit_type "int"
	  param in name "s" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Bit field accessors that don't require unpacking ctl.
These depend on the bit layout and on workerCount being never negative.
"
      end

      operation 9213314 "runStateAtLeast"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "c" explicit_type "int"
	  param in name "s" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9213442 "isRunning"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9213570 "compareAndIncrementWorkerCount"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "expect" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to CAS-increment the workerCount field of ctl.
"
      end

      operation 9213698 "compareAndDecrementWorkerCount"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "expect" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to CAS-decrement the workerCount field of ctl.
"
      end

      operation 9213826 "decrementWorkerCount"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrements the workerCount field of ctl. This is called only on
abrupt termination of a thread (see processWorkerExit). Other
decrements are performed within getTask.
"
      end

      classrelation 3633922 // workQueue (<unidirectional association>)
	relation 3633922 --->
	  a role_name "workQueue" const_relation private
	    comment "
The queue used for holding tasks and handing off to worker
threads.  We do not require that workQueue.poll() returning
null necessarily means that workQueue.isEmpty(), so rely
solely on isEmpty to see if the queue is empty (which we must
do for example when deciding whether to transition from
SHUTDOWN to TIDYING).  This accommodates special-purpose
queues such as DelayQueues for which poll() is allowed to
return null even if it may later return non-null when delays
expire.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Runnable> ${name}${value};
"
	    classrelation_ref 3633922 // workQueue (<unidirectional association>)
	  b parent class_ref 1099522 // BlockingQueue
      end

      classrelation 3634050 // mainLock (<unidirectional association>)
	relation 3634050 --->
	  a role_name "mainLock" init_value " new ReentrantLock()" const_relation private
	    comment "
Lock held on access to workers set and related bookkeeping.
While we could use a concurrent set of some sort, it turns out
to be generally preferable to use a lock. Among the reasons is
that this serializes interruptIdleWorkers, which avoids
unnecessary interrupt storms, especially during shutdown.
Otherwise exiting threads would concurrently interrupt those
that have not yet interrupted. It also simplifies some of the
associated statistics bookkeeping of largestPoolSize etc. We
also hold mainLock on shutdown and shutdownNow, for the sake of
ensuring workers set is stable while separately checking
permission to interrupt and actually interrupting.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3634050 // mainLock (<unidirectional association>)
	  b parent class_ref 968706 // ReentrantLock
      end

      class 1124610 "Worker"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3635074 // <generalisation>
	  relation 3635074 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3635074 // <generalisation>
	    b parent class_ref 1106050 // AbstractQueuedSynchronizer
	end

	classrelation 3635202 // <realization>
	  relation 3635202 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3635202 // <realization>
	    b parent class_ref 128770 // Runnable
	end

	attribute 2144898 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 6138294804551838833L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "This class will never be serialized, but we provide a
serialVersionUID to suppress a javac warning.

"
	end

	classrelation 3635330 // thread (<unidirectional association>)
	  relation 3635330 --->
	    a role_name "thread" const_relation package
	      comment " Thread this worker is running in.  Null if factory fails. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3635330 // thread (<unidirectional association>)
	    b parent class_ref 128642 // Thread
	end

	classrelation 3635458 // firstTask (<unidirectional association>)
	  relation 3635458 --->
	    a role_name "firstTask" package
	      comment " Initial task to run.  Possibly null. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3635458 // firstTask (<unidirectional association>)
	    b parent class_ref 128770 // Runnable
	end

	attribute 2145026 "completedTasks"
	  volatile package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Per-thread task counter 
"
	end

	operation 9213954 "Worker"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "firstTask" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates with given first task and thread from ThreadFactory.
@param firstTask the first task (null if none)
"
	end

	operation 9214082 "run"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Delegates main run loop to outer runWorker  "
	end

	operation 9214210 "isHeldExclusively"
	  protected explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Lock methods

 The value 0 represents the unlocked state.
 The value 1 represents the locked state."
	end

	operation 9214338 "tryAcquire"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "unused" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9214466 "tryRelease"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "unused" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9214594 "lock"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9214722 "tryLock"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9214850 "unlock"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9214978 "isLocked"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9215106 "interruptIfStarted"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3634178 // workers (<unidirectional association>)
	relation 3634178 --->
	  a role_name "workers" init_value " new HashSet<Worker>()" const_relation private
	    comment "
Set containing all worker threads in pool. Accessed only when
holding mainLock.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Worker> ${name}${value};
"
	    classrelation_ref 3634178 // workers (<unidirectional association>)
	  b parent class_ref 388482 // HashSet
      end

      classrelation 3634306 // termination (<unidirectional association>)
	relation 3634306 --->
	  a role_name "termination" init_value " mainLock.newCondition()" const_relation private
	    comment "
Wait condition to support awaitTermination

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3634306 // termination (<unidirectional association>)
	  b parent class_ref 864770 // Condition
      end

      attribute 2144130 "largestPoolSize"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tracks largest attained pool size. Accessed only under
mainLock.

"
      end

      attribute 2144258 "completedTaskCount"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Counter for completed tasks. Updated only on termination of
worker threads. Accessed only under mainLock.

"
      end

      classrelation 3634434 // threadFactory (<unidirectional association>)
	relation 3634434 --->
	  a role_name "threadFactory" volatile private
	    comment "
All user control parameters are declared as volatiles so that
ongoing actions are based on freshest values, but without need
for locking, since no internal invariants depend on them
changing synchronously with respect to other actions.


Factory for new threads. All threads are created using this
factory (via method addWorker).  All callers must be prepared
for addWorker to fail, which may reflect a system or user's
policy limiting the number of threads.  Even though it is not
treated as an error, failure to create threads may result in
new tasks being rejected or existing ones remaining stuck in
the queue.

We go further and preserve pool invariants even in the face of
errors such as OutOfMemoryError, that might be thrown while
trying to create threads.  Such errors are rather common due to
the need to allocate a native stack in Thread.start, and users
will want to perform clean pool shutdown to clean up.  There
will likely be enough memory available for the cleanup code to
complete without encountering yet another OutOfMemoryError.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3634434 // threadFactory (<unidirectional association>)
	  b parent class_ref 985090 // ThreadFactory
      end

      classrelation 3634562 // handler (<unidirectional association>)
	relation 3634562 --->
	  a role_name "handler" volatile private
	    comment "
Handler called when saturated or shutdown in execute.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3634562 // handler (<unidirectional association>)
	  b parent class_ref 1124098 // RejectedExecutionHandler
      end

      attribute 2144386 "keepAliveTime"
	volatile private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Timeout in nanoseconds for idle threads waiting for work.
Threads use this timeout when there are more than corePoolSize
present or if allowCoreThreadTimeOut. Otherwise they wait
forever for new work.

"
      end

      attribute 2144514 "allowCoreThreadTimeOut"
	volatile private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If false (default), core threads stay alive even when idle.
If true, core threads use keepAliveTime to time out waiting
for work.

"
      end

      attribute 2144642 "corePoolSize"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Core pool size is the minimum number of workers to keep alive
(and not allow to time out etc) unless allowCoreThreadTimeOut
is set, in which case the minimum is zero.

"
      end

      attribute 2144770 "maximumPoolSize"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Maximum pool size. Note that the actual maximum is internally
bounded by CAPACITY.

"
      end

      classrelation 3634690 // defaultHandler (<unidirectional association>)
	relation 3634690 --->
	  a role_name "defaultHandler" init_value "
        new AbortPolicy()" class_relation const_relation private
	    comment "
The default rejected execution handler

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3634690 // defaultHandler (<unidirectional association>)
	  b parent class_ref 1124098 // RejectedExecutionHandler
      end

      classrelation 3634818 // shutdownPerm (<unidirectional association>)
	relation 3634818 --->
	  a role_name "shutdownPerm" init_value "
        new RuntimePermission(\"modifyThread\")" class_relation const_relation private
	    comment "
Permission required for callers of shutdown and shutdownNow.
We additionally require (see checkShutdownAccess) that callers
have permission to actually interrupt threads in the worker set
(as governed by Thread.interrupt, which relies on
ThreadGroup.checkAccess, which in turn relies on
SecurityManager.checkAccess). Shutdowns are attempted only if
these checks pass.

All actual invocations of Thread.interrupt (see
interruptIdleWorkers and interruptWorkers) ignore
SecurityExceptions, meaning that the attempted interrupts
silently fail. In the case of shutdown, they should not fail
unless the SecurityManager has inconsistent policies, sometimes
allowing access to a thread and sometimes not. In such cases,
failure to actually interrupt threads may disable or delay full
termination. Other uses of interruptIdleWorkers are advisory,
and failure to actually interrupt will merely delay response to
configuration changes so is not handled exceptionally.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3634818 // shutdownPerm (<unidirectional association>)
	  b parent class_ref 130306 // RuntimePermission
      end

      classrelation 3634946 // acc (<unidirectional association>)
	relation 3634946 --->
	  a role_name "acc" const_relation private
	    comment " The context to be used when executing the finalizer, or null. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3634946 // acc (<unidirectional association>)
	  b parent class_ref 129154 // AccessControlContext
      end

      operation 9215234 "advanceRunState"
	private explicit_return_type "void"
	nparams 1
	  param in name "targetState" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Methods for setting control state


Transitions runState to given target, or leaves it alone if
already at least the given target.

@param targetState the desired state, either SHUTDOWN or STOP
       (but not TIDYING or TERMINATED -- use tryTerminate for that)
"
      end

      operation 9215362 "tryTerminate"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transitions to TERMINATED state if either (SHUTDOWN and pool
and queue empty) or (STOP and pool empty).  If otherwise
eligible to terminate but workerCount is nonzero, interrupts an
idle worker to ensure that shutdown signals propagate. This
method must be called following any action that might make
termination possible -- reducing worker count or removing tasks
from the queue during shutdown. The method is non-private to
allow access from ScheduledThreadPoolExecutor.
"
      end

      operation 9215490 "checkShutdownAccess"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Methods for controlling interrupts to worker threads.


If there is a security manager, makes sure caller has
permission to shut down threads in general (see shutdownPerm).
If this passes, additionally makes sure the caller is allowed
to interrupt each worker thread. This might not be true even if
first check passed, if the SecurityManager treats some threads
specially.
"
      end

      operation 9215618 "interruptWorkers"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Interrupts all threads, even if active. Ignores SecurityExceptions
(in which case some threads may remain uninterrupted).
"
      end

      operation 9215746 "interruptIdleWorkers"
	private explicit_return_type "void"
	nparams 1
	  param inout name "onlyOne" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Interrupts threads that might be waiting for tasks (as
indicated by not being locked) so they can check for
termination or configuration changes. Ignores
SecurityExceptions (in which case some threads may remain
uninterrupted).

@param onlyOne If true, interrupt at most one worker. This is
called only from tryTerminate when termination is otherwise
enabled but there are still other workers.  In this case, at
most one waiting worker is interrupted to propagate shutdown
signals in case all threads are currently waiting.
Interrupting any arbitrary thread ensures that newly arriving
workers since shutdown began will also eventually exit.
To guarantee eventual termination, it suffices to always
interrupt only one idle worker, but shutdown() interrupts all
idle workers so that redundant workers exit promptly, not
waiting for a straggler task to finish.
"
      end

      operation 9215874 "interruptIdleWorkers"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Common form of interruptIdleWorkers, to avoid having to
remember what the boolean argument means.
"
      end

      attribute 2145154 "ONLY_ONE"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9216002 "reject"
	package explicit_return_type "void"
	nparams 1
	  param inout name "command" type class_ref 128770 // Runnable
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Misc utilities, most of which are also exported to
ScheduledThreadPoolExecutor


Invokes the rejected execution handler for the given command.
Package-protected for use by ScheduledThreadPoolExecutor.
"
      end

      operation 9216130 "onShutdown"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs any further cleanup following run state transition on
invocation of shutdown.  A no-op here, but used by
ScheduledThreadPoolExecutor to cancel delayed tasks.
"
      end

      operation 9216258 "isRunningOrShutdown"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "shutdownOK" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "State check needed by ScheduledThreadPoolExecutor to
enable running tasks during shutdown.

@param shutdownOK true if should return true if SHUTDOWN
"
      end

      operation 9216386 "drainQueue"
	private return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Drains the task queue into a new list, normally using
drainTo. But if the queue is a DelayQueue or any other kind of
queue for which poll or drainTo may fail to remove some
elements, it deletes them one by one.
"
      end

      operation 9216514 "addWorker"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "firstTask" type class_ref 128770 // Runnable
	  param inout name "core" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Methods for creating, running and cleaning up after workers


Checks if a new worker can be added with respect to current
pool state and the given bound (either core or maximum). If so,
the worker count is adjusted accordingly, and, if possible, a
new worker is created and started, running firstTask as its
first task. This method returns false if the pool is stopped or
eligible to shut down. It also returns false if the thread
factory fails to create a thread when asked.  If the thread
creation fails, either due to the thread factory returning
null, or due to an exception (typically OutOfMemoryError in
Thread.start()), we roll back cleanly.

@param firstTask the task the new thread should run first (or
null if none). Workers are created with an initial first task
(in method execute()) to bypass queuing when there are fewer
than corePoolSize threads (in which case we always start one),
or when the queue is full (in which case we must bypass queue).
Initially idle threads are usually created via
prestartCoreThread or to replace other dying workers.

@param core if true use corePoolSize as bound, else
maximumPoolSize. (A boolean indicator is used here rather than a
value to ensure reads of fresh values after checking other pool
state).
@return true if successful
"
      end

      operation 9216642 "addWorkerFailed"
	private explicit_return_type "void"
	nparams 1
	  param inout name "w" type class_ref 1124610 // Worker
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rolls back the worker thread creation.
- removes worker from workers, if present
- decrements worker count
- rechecks for termination, in case the existence of this
  worker was holding up termination
"
      end

      operation 9216770 "processWorkerExit"
	private explicit_return_type "void"
	nparams 2
	  param inout name "w" type class_ref 1124610 // Worker
	  param inout name "completedAbruptly" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs cleanup and bookkeeping for a dying worker. Called
only from worker threads. Unless completedAbruptly is set,
assumes that workerCount has already been adjusted to account
for exit.  This method removes thread from worker set, and
possibly terminates the pool or replaces the worker if either
it exited due to user task exception or if fewer than
corePoolSize workers are running or queue is non-empty but
there are no workers.

@param w the worker
@param completedAbruptly if the worker died due to user exception
"
      end

      operation 9216898 "getTask"
	private return_type class_ref 128770 // Runnable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs blocking or timed wait for a task, depending on
current configuration settings, or returns null if this worker
must exit because of any of:
1. There are more than maximumPoolSize workers (due to
   a call to setMaximumPoolSize).
2. The pool is stopped.
3. The pool is shutdown and the queue is empty.
4. This worker timed out waiting for a task, and timed-out
   workers are subject to termination (that is,
   {@code allowCoreThreadTimeOut || workerCount > corePoolSize})
   both before and after the timed wait, and if the queue is
   non-empty, this worker is not the last thread in the pool.

@return task, or null if the worker must exit, in which case
        workerCount is decremented
"
      end

      operation 9217026 "runWorker"
	package explicit_return_type "void"
	nparams 1
	  param inout name "w" type class_ref 1124610 // Worker
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main worker run loop.  Repeatedly gets tasks from queue and
executes them, while coping with a number of issues:

1. We may start out with an initial task, in which case we
don't need to get the first one. Otherwise, as long as pool is
running, we get tasks from getTask. If it returns null then the
worker exits due to changed pool state or configuration
parameters.  Other exits result from exception throws in
external code, in which case completedAbruptly holds, which
usually leads processWorkerExit to replace this thread.

2. Before running any task, the lock is acquired to prevent
other pool interrupts while the task is executing, and then we
ensure that unless pool is stopping, this thread does not have
its interrupt set.

3. Each task run is preceded by a call to beforeExecute, which
might throw an exception, in which case we cause thread to die
(breaking loop with completedAbruptly true) without processing
the task.

4. Assuming beforeExecute completes normally, we run the task,
gathering any of its thrown exceptions to send to afterExecute.
We separately handle RuntimeException, Error (both of which the
specs guarantee that we trap) and arbitrary Throwables.
Because we cannot rethrow Throwables within Runnable.run, we
wrap them within Errors on the way out (to the thread's
UncaughtExceptionHandler).  Any thrown exception also
conservatively causes thread to die.

5. After task.run completes, we call afterExecute, which may
also throw an exception, which will also cause thread to
die. According to JLS Sec 14.20, this exception is the one that
will be in effect even if task.run throws.

The net effect of the exception mechanics is that afterExecute
and the thread's UncaughtExceptionHandler have as accurate
information as we can provide about any problems encountered by
user code.

@param w the worker
"
      end

      operation 9217154 "ThreadPoolExecutor"
	public explicit_return_type ""
	nparams 5
	  param in name "corePoolSize" explicit_type "int"
	  param in name "maximumPoolSize" explicit_type "int"
	  param in name "keepAliveTime" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	  param inout name "workQueue" type class_ref 1099522 // BlockingQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<Runnable> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Public constructors and methods

Creates a new {@code ThreadPoolExecutor} with the given initial
parameters and default thread factory and rejected execution handler.
It may be more convenient to use one of the {@link Executors} factory
methods instead of this general purpose constructor.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param maximumPoolSize the maximum number of threads to allow in the
       pool
@param keepAliveTime when the number of threads is greater than
       the core, this is the maximum time that excess idle threads
       will wait for new tasks before terminating.
@param unit the time unit for the {@code keepAliveTime} argument
@param workQueue the queue to use for holding tasks before they are
       executed.  This queue will hold only the {@code Runnable}
       tasks submitted by the {@code execute} method.
@throws IllegalArgumentException if one of the following holds:<br>
        {@code corePoolSize < 0}<br>
        {@code keepAliveTime < 0}<br>
        {@code maximumPoolSize <= 0}<br>
        {@code maximumPoolSize < corePoolSize}
@throws NullPointerException if {@code workQueue} is null
"
      end

      operation 9217282 "ThreadPoolExecutor"
	public explicit_return_type ""
	nparams 6
	  param in name "corePoolSize" explicit_type "int"
	  param in name "maximumPoolSize" explicit_type "int"
	  param in name "keepAliveTime" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	  param inout name "workQueue" type class_ref 1099522 // BlockingQueue
	  param inout name "threadFactory" type class_ref 985090 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<Runnable> ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ThreadPoolExecutor} with the given initial
parameters and default rejected execution handler.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param maximumPoolSize the maximum number of threads to allow in the
       pool
@param keepAliveTime when the number of threads is greater than
       the core, this is the maximum time that excess idle threads
       will wait for new tasks before terminating.
@param unit the time unit for the {@code keepAliveTime} argument
@param workQueue the queue to use for holding tasks before they are
       executed.  This queue will hold only the {@code Runnable}
       tasks submitted by the {@code execute} method.
@param threadFactory the factory to use when the executor
       creates a new thread
@throws IllegalArgumentException if one of the following holds:<br>
        {@code corePoolSize < 0}<br>
        {@code keepAliveTime < 0}<br>
        {@code maximumPoolSize <= 0}<br>
        {@code maximumPoolSize < corePoolSize}
@throws NullPointerException if {@code workQueue}
        or {@code threadFactory} is null
"
      end

      operation 9217410 "ThreadPoolExecutor"
	public explicit_return_type ""
	nparams 6
	  param in name "corePoolSize" explicit_type "int"
	  param in name "maximumPoolSize" explicit_type "int"
	  param in name "keepAliveTime" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	  param inout name "workQueue" type class_ref 1099522 // BlockingQueue
	  param inout name "handler" type class_ref 1124098 // RejectedExecutionHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<Runnable> ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ThreadPoolExecutor} with the given initial
parameters and default thread factory.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param maximumPoolSize the maximum number of threads to allow in the
       pool
@param keepAliveTime when the number of threads is greater than
       the core, this is the maximum time that excess idle threads
       will wait for new tasks before terminating.
@param unit the time unit for the {@code keepAliveTime} argument
@param workQueue the queue to use for holding tasks before they are
       executed.  This queue will hold only the {@code Runnable}
       tasks submitted by the {@code execute} method.
@param handler the handler to use when execution is blocked
       because the thread bounds and queue capacities are reached
@throws IllegalArgumentException if one of the following holds:<br>
        {@code corePoolSize < 0}<br>
        {@code keepAliveTime < 0}<br>
        {@code maximumPoolSize <= 0}<br>
        {@code maximumPoolSize < corePoolSize}
@throws NullPointerException if {@code workQueue}
        or {@code handler} is null
"
      end

      operation 9217538 "ThreadPoolExecutor"
	public explicit_return_type ""
	nparams 7
	  param in name "corePoolSize" explicit_type "int"
	  param in name "maximumPoolSize" explicit_type "int"
	  param in name "keepAliveTime" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	  param inout name "workQueue" type class_ref 1099522 // BlockingQueue
	  param inout name "threadFactory" type class_ref 985090 // ThreadFactory
	  param inout name "handler" type class_ref 1124098 // RejectedExecutionHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<Runnable> ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ThreadPoolExecutor} with the given initial
parameters.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param maximumPoolSize the maximum number of threads to allow in the
       pool
@param keepAliveTime when the number of threads is greater than
       the core, this is the maximum time that excess idle threads
       will wait for new tasks before terminating.
@param unit the time unit for the {@code keepAliveTime} argument
@param workQueue the queue to use for holding tasks before they are
       executed.  This queue will hold only the {@code Runnable}
       tasks submitted by the {@code execute} method.
@param threadFactory the factory to use when the executor
       creates a new thread
@param handler the handler to use when execution is blocked
       because the thread bounds and queue capacities are reached
@throws IllegalArgumentException if one of the following holds:<br>
        {@code corePoolSize < 0}<br>
        {@code keepAliveTime < 0}<br>
        {@code maximumPoolSize <= 0}<br>
        {@code maximumPoolSize < corePoolSize}
@throws NullPointerException if {@code workQueue}
        or {@code threadFactory} or {@code handler} is null
"
      end

      operation 9217666 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "command" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given task sometime in the future.  The task
may execute in a new thread or in an existing pooled thread.

If the task cannot be submitted for execution, either because this
executor has been shutdown or because its capacity has been reached,
the task is handled by the current {@code RejectedExecutionHandler}.

@param command the task to execute
@throws RejectedExecutionException at discretion of
        {@code RejectedExecutionHandler}, if the task
        cannot be accepted for execution
@throws NullPointerException if {@code command} is null
"
      end

      operation 9217794 "shutdown"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initiates an orderly shutdown in which previously submitted
tasks are executed, but no new tasks will be accepted.
Invocation has no additional effect if already shut down.

<p>This method does not wait for previously submitted tasks to
complete execution.  Use {@link #awaitTermination awaitTermination}
to do that.

@throws SecurityException {@inheritDoc}
"
      end

      operation 9217922 "shutdownNow"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to stop all actively executing tasks, halts the
processing of waiting tasks, and returns a list of the tasks
that were awaiting execution. These tasks are drained (removed)
from the task queue upon return from this method.

<p>This method does not wait for actively executing tasks to
terminate.  Use {@link #awaitTermination awaitTermination} to
do that.

<p>There are no guarantees beyond best-effort attempts to stop
processing actively executing tasks.  This implementation
cancels tasks via {@link Thread#interrupt}, so any task that
fails to respond to interrupts may never terminate.

@throws SecurityException {@inheritDoc}
"
      end

      operation 9218050 "isShutdown"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9218178 "isTerminating"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this executor is in the process of terminating
after {@link #shutdown} or {@link #shutdownNow} but has not
completely terminated.  This method may be useful for
debugging. A return of {@code true} reported a sufficient
period after shutdown may indicate that submitted tasks have
ignored or suppressed interruption, causing this executor not
to properly terminate.

@return {@code true} if terminating but not yet terminated
"
      end

      operation 9218306 "isTerminated"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9218434 "awaitTermination"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9218562 "finalize"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes {@code shutdown} when this executor is no longer
referenced and it has no threads.
"
      end

      operation 9218690 "setThreadFactory"
	public explicit_return_type "void"
	nparams 1
	  param inout name "threadFactory" type class_ref 985090 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the thread factory used to create new threads.

@param threadFactory the new thread factory
@throws NullPointerException if threadFactory is null
@see #getThreadFactory
"
      end

      operation 9218818 "getThreadFactory"
	public return_type class_ref 985090 // ThreadFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thread factory used to create new threads.

@return the current thread factory
@see #setThreadFactory(ThreadFactory)
"
      end

      operation 9218946 "setRejectedExecutionHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 1124098 // RejectedExecutionHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a new handler for unexecutable tasks.

@param handler the new handler
@throws NullPointerException if handler is null
@see #getRejectedExecutionHandler
"
      end

      operation 9219074 "getRejectedExecutionHandler"
	public return_type class_ref 1124098 // RejectedExecutionHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current handler for unexecutable tasks.

@return the current handler
@see #setRejectedExecutionHandler(RejectedExecutionHandler)
"
      end

      operation 9219202 "setCorePoolSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "corePoolSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the core number of threads.  This overrides any value set
in the constructor.  If the new value is smaller than the
current value, excess existing threads will be terminated when
they next become idle.  If larger, new threads will, if needed,
be started to execute any queued tasks.

@param corePoolSize the new core size
@throws IllegalArgumentException if {@code corePoolSize < 0}
@see #getCorePoolSize
"
      end

      operation 9219330 "getCorePoolSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the core number of threads.

@return the core number of threads
@see #setCorePoolSize
"
      end

      operation 9219458 "prestartCoreThread"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts a core thread, causing it to idly wait for work. This
overrides the default policy of starting core threads only when
new tasks are executed. This method will return {@code false}
if all core threads have already been started.

@return {@code true} if a thread was started
"
      end

      operation 9219586 "ensurePrestart"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Same as prestartCoreThread except arranges that at least one
thread is started even if corePoolSize is 0.
"
      end

      operation 9219714 "prestartAllCoreThreads"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts all core threads, causing them to idly wait for work. This
overrides the default policy of starting core threads only when
new tasks are executed.

@return the number of threads started
"
      end

      operation 9219842 "allowsCoreThreadTimeOut"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this pool allows core threads to time out and
terminate if no tasks arrive within the keepAlive time, being
replaced if needed when new tasks arrive. When true, the same
keep-alive policy applying to non-core threads applies also to
core threads. When false (the default), core threads are never
terminated due to lack of incoming tasks.

@return {@code true} if core threads are allowed to time out,
        else {@code false}

@since 1.6
"
      end

      operation 9219970 "allowCoreThreadTimeOut"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the policy governing whether core threads may time out and
terminate if no tasks arrive within the keep-alive time, being
replaced if needed when new tasks arrive. When false, core
threads are never terminated due to lack of incoming
tasks. When true, the same keep-alive policy applying to
non-core threads applies also to core threads. To avoid
continual thread replacement, the keep-alive time must be
greater than zero when setting {@code true}. This method
should in general be called before the pool is actively used.

@param value {@code true} if should time out, else {@code false}
@throws IllegalArgumentException if value is {@code true}
        and the current keep-alive time is not greater than zero

@since 1.6
"
      end

      operation 9220098 "setMaximumPoolSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "maximumPoolSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum allowed number of threads. This overrides any
value set in the constructor. If the new value is smaller than
the current value, excess existing threads will be
terminated when they next become idle.

@param maximumPoolSize the new maximum
@throws IllegalArgumentException if the new maximum is
        less than or equal to zero, or
        less than the {@linkplain #getCorePoolSize core pool size}
@see #getMaximumPoolSize
"
      end

      operation 9220226 "getMaximumPoolSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum allowed number of threads.

@return the maximum allowed number of threads
@see #setMaximumPoolSize
"
      end

      operation 9220354 "setKeepAliveTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "time" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time limit for which threads may remain idle before
being terminated.  If there are more than the core number of
threads currently in the pool, after waiting this amount of
time without processing a task, excess threads will be
terminated.  This overrides any value set in the constructor.

@param time the time to wait.  A time value of zero will cause
       excess threads to terminate immediately after executing tasks.
@param unit the time unit of the {@code time} argument
@throws IllegalArgumentException if {@code time} less than zero or
        if {@code time} is zero and {@code allowsCoreThreadTimeOut}
@see #getKeepAliveTime(TimeUnit)
"
      end

      operation 9220482 "getKeepAliveTime"
	public explicit_return_type "long"
	nparams 1
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thread keep-alive time, which is the amount of time
that threads in excess of the core pool size may remain
idle before being terminated.

@param unit the desired time unit of the result
@return the time limit
@see #setKeepAliveTime(long, TimeUnit)
"
      end

      operation 9220610 "getQueue"
	public return_type class_ref 1099522 // BlockingQueue
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " User-level queue utilities 

Returns the task queue used by this executor. Access to the
task queue is intended primarily for debugging and monitoring.
This queue may be in active use.  Retrieving the task queue
does not prevent queued tasks from executing.

@return the task queue
"
      end

      operation 9220738 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "task" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes this task from the executor's internal queue if it is
present, thus causing it not to be run if it has not already
started.

<p>This method may be useful as one part of a cancellation
scheme.  It may fail to remove tasks that have been converted
into other forms before being placed on the internal queue. For
example, a task entered using {@code submit} might be
converted into a form that maintains {@code Future} status.
However, in such cases, method {@link #purge} may be used to
remove those Futures that have been cancelled.

@param task the task to remove
@return {@code true} if the task was removed
"
      end

      operation 9220866 "purge"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to remove from the work queue all {@link Future}
tasks that have been cancelled. This method can be useful as a
storage reclamation operation, that has no other impact on
functionality. Cancelled tasks are never executed, but may
accumulate in work queues until worker threads can actively
remove them. Invoking this method instead tries to remove them now.
However, this method may fail to remove tasks in
the presence of interference by other threads.
"
      end

      operation 9220994 "getPoolSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Statistics 

Returns the current number of threads in the pool.

@return the number of threads
"
      end

      operation 9221122 "getActiveCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate number of threads that are actively
executing tasks.

@return the number of threads
"
      end

      operation 9221250 "getLargestPoolSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the largest number of threads that have ever
simultaneously been in the pool.

@return the number of threads
"
      end

      operation 9221378 "getTaskCount"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate total number of tasks that have ever been
scheduled for execution. Because the states of tasks and
threads may change dynamically during computation, the returned
value is only an approximation.

@return the number of tasks
"
      end

      operation 9221506 "getCompletedTaskCount"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate total number of tasks that have
completed execution. Because the states of tasks and threads
may change dynamically during computation, the returned value
is only an approximation, but one that does not ever decrease
across successive calls.

@return the number of tasks
"
      end

      operation 9221634 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string identifying this pool, as well as its state,
including indications of run state and estimated worker and
task counts.

@return a string identifying this pool, as well as its state
"
      end

      operation 9221762 "beforeExecute"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "t" type class_ref 128642 // Thread
	  param inout name "r" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Extension hooks 

Method invoked prior to executing the given Runnable in the
given thread.  This method is invoked by thread {@code t} that
will execute task {@code r}, and may be used to re-initialize
ThreadLocals, or to perform logging.

<p>This implementation does nothing, but may be customized in
subclasses. Note: To properly nest multiple overridings, subclasses
should generally invoke {@code super.beforeExecute} at the end of
this method.

@param t the thread that will run task {@code r}
@param r the task that will be executed
"
      end

      operation 9221890 "afterExecute"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "r" type class_ref 128770 // Runnable
	  param inout name "t" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method invoked upon completion of execution of the given Runnable.
This method is invoked by the thread that executed the task. If
non-null, the Throwable is the uncaught {@code RuntimeException}
or {@code Error} that caused execution to terminate abruptly.

<p>This implementation does nothing, but may be customized in
subclasses. Note: To properly nest multiple overridings, subclasses
should generally invoke {@code super.afterExecute} at the
beginning of this method.

<p><b>Note:</b> When actions are enclosed in tasks (such as
{@link FutureTask}) either explicitly or via methods such as
{@code submit}, these task objects catch and maintain
computational exceptions, and so they do not cause abrupt
termination, and the internal exceptions are <em>not</em>
passed to this method. If you would like to trap both kinds of
failures in this method, you can further probe for such cases,
as in this sample subclass that prints either the direct cause
or the underlying exception if a task has been aborted:

 <pre> {@code
class ExtendedExecutor extends ThreadPoolExecutor {
  // ...
  protected void afterExecute(Runnable r, Throwable t) {
    super.afterExecute(r, t);
    if (t == null && r instanceof Future<?>) {
      try {
        Object result = ((Future<?>) r).get();
      } catch (CancellationException ce) {
          t = ce;
      } catch (ExecutionException ee) {
          t = ee.getCause();
      } catch (InterruptedException ie) {
          Thread.currentThread().interrupt(); // ignore/reset
      }
    }
    if (t != null)
      System.out.println(t);
  }
}}</pre>

@param r the runnable that has completed
@param t the exception that caused termination, or null if
execution completed normally
"
      end

      operation 9222018 "terminated"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method invoked when the Executor has terminated.  Default
implementation does nothing. Note: To properly nest multiple
overridings, subclasses should generally invoke
{@code super.terminated} within this method.
"
      end

      class 1124738 "CallerRunsPolicy"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3635586 // <realization>
	  relation 3635586 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3635586 // <realization>
	    b parent class_ref 1124098 // RejectedExecutionHandler
	end

	operation 9222146 "CallerRunsPolicy"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a {@code CallerRunsPolicy}.
"
	end

	operation 9222274 "rejectedExecution"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "r" type class_ref 128770 // Runnable
	    param inout name "e" type class_ref 1124226 // ThreadPoolExecutor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Executes task r in the caller's thread, unless the executor
has been shut down, in which case the task is discarded.

@param r the runnable task requested to be executed
@param e the executor attempting to execute this task
"
	end
      end

      class 1124866 "AbortPolicy"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3635714 // <realization>
	  relation 3635714 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3635714 // <realization>
	    b parent class_ref 1124098 // RejectedExecutionHandler
	end

	operation 9222402 "AbortPolicy"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates an {@code AbortPolicy}.
"
	end

	operation 9222530 "rejectedExecution"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "r" type class_ref 128770 // Runnable
	    param inout name "e" type class_ref 1124226 // ThreadPoolExecutor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Always throws RejectedExecutionException.

@param r the runnable task requested to be executed
@param e the executor attempting to execute this task
@throws RejectedExecutionException always
"
	end
      end

      class 1124994 "DiscardPolicy"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3635842 // <realization>
	  relation 3635842 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3635842 // <realization>
	    b parent class_ref 1124098 // RejectedExecutionHandler
	end

	operation 9222658 "DiscardPolicy"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a {@code DiscardPolicy}.
"
	end

	operation 9222786 "rejectedExecution"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "r" type class_ref 128770 // Runnable
	    param inout name "e" type class_ref 1124226 // ThreadPoolExecutor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Does nothing, which has the effect of discarding task r.

@param r the runnable task requested to be executed
@param e the executor attempting to execute this task
"
	end
      end

      class 1125122 "DiscardOldestPolicy"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3635970 // <realization>
	  relation 3635970 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3635970 // <realization>
	    b parent class_ref 1124098 // RejectedExecutionHandler
	end

	operation 9222914 "DiscardOldestPolicy"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a {@code DiscardOldestPolicy} for the given executor.
"
	end

	operation 9223042 "rejectedExecution"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "r" type class_ref 128770 // Runnable
	    param inout name "e" type class_ref 1124226 // ThreadPoolExecutor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Obtains and ignores the next task that the executor
would otherwise execute, if one is immediately available,
and then retries execution of task r, unless the executor
is shut down, in which case task r is instead discarded.

@param r the runnable task requested to be executed
@param e the executor attempting to execute this task
"
	end
      end
    end

    class 1124354 "RunnableScheduledFuture"
      visibility public stereotype "interface"
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1066114 // RunnableFuture
        rank 0 explicit_value ""
      actual class class_ref 1120898 // ScheduledFuture
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link ScheduledFuture} that is {@link Runnable}. Successful
execution of the {@code run} method causes completion of the
{@code Future} and allows access to its results.
@see FutureTask
@see Executor
@since 1.6
@author Doug Lea
@param <V> The result type returned by this Future's {@code get} method
"
      classrelation 3633154 // <realization>
	relation 3633154 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3633154 // <realization>
	  b parent class_ref 1066114 // RunnableFuture
      end

      classrelation 3633538 // <realization>
	relation 3633538 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3633538 // <realization>
	  b parent class_ref 1120898 // ScheduledFuture
      end

      operation 9212674 "isPeriodic"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this task is periodic. A periodic task may
re-run according to some schedule. A non-periodic task can be
run only once.

@return {@code true} if this task is periodic
"
      end
    end

    class 1124482 "ScheduledThreadPoolExecutor"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link ThreadPoolExecutor} that can additionally schedule
commands to run after a given delay, or to execute
periodically. This class is preferable to {@link java.util.Timer}
when multiple worker threads are needed, or when the additional
flexibility or capabilities of {@link ThreadPoolExecutor} (which
this class extends) are required.

<p>Delayed tasks execute no sooner than they are enabled, but
without any real-time guarantees about when, after they are
enabled, they will commence. Tasks scheduled for exactly the same
execution time are enabled in first-in-first-out (FIFO) order of
submission.

<p>When a submitted task is cancelled before it is run, execution
is suppressed. By default, such a cancelled task is not
automatically removed from the work queue until its delay
elapses. While this enables further inspection and monitoring, it
may also cause unbounded retention of cancelled tasks. To avoid
this, set {@link #setRemoveOnCancelPolicy} to {@code true}, which
causes tasks to be immediately removed from the work queue at
time of cancellation.

<p>Successive executions of a task scheduled via
{@code scheduleAtFixedRate} or
{@code scheduleWithFixedDelay} do not overlap. While different
executions may be performed by different threads, the effects of
prior executions <a
href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
those of subsequent ones.

<p>While this class inherits from {@link ThreadPoolExecutor}, a few
of the inherited tuning methods are not useful for it. In
particular, because it acts as a fixed-sized pool using
{@code corePoolSize} threads and an unbounded queue, adjustments
to {@code maximumPoolSize} have no useful effect. Additionally, it
is almost never a good idea to set {@code corePoolSize} to zero or
use {@code allowCoreThreadTimeOut} because this may leave the pool
without threads to handle tasks once they become eligible to run.

<p><b>Extension notes:</b> This class overrides the
{@link ThreadPoolExecutor#execute(Runnable) execute} and
{@link AbstractExecutorService#submit(Runnable) submit}
methods to generate internal {@link ScheduledFuture} objects to
control per-task delays and scheduling.  To preserve
functionality, any further overrides of these methods in
subclasses must invoke superclass versions, which effectively
disables additional task customization.  However, this class
provides alternative protected extension method
{@code decorateTask} (one version each for {@code Runnable} and
{@code Callable}) that can be used to customize the concrete task
types used to execute commands entered via {@code execute},
{@code submit}, {@code schedule}, {@code scheduleAtFixedRate},
and {@code scheduleWithFixedDelay}.  By default, a
{@code ScheduledThreadPoolExecutor} uses a task type extending
{@link FutureTask}. However, this may be modified or replaced using
subclasses of the form:

 <pre> {@code
public class CustomScheduledExecutor extends ScheduledThreadPoolExecutor {

  static class CustomTask<V> implements RunnableScheduledFuture<V> { ... }

  protected <V> RunnableScheduledFuture<V> decorateTask(
               Runnable r, RunnableScheduledFuture<V> task) {
      return new CustomTask<V>(r, task);
  }

  protected <V> RunnableScheduledFuture<V> decorateTask(
               Callable<V> c, RunnableScheduledFuture<V> task) {
      return new CustomTask<V>(c, task);
  }
  // ... add constructors, etc.
}}</pre>

@since 1.5
@author Doug Lea
"
      classrelation 3636098 // <generalisation>
	relation 3636098 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3636098 // <generalisation>
	  b parent class_ref 1124226 // ThreadPoolExecutor
      end

      classrelation 3636226 // <realization>
	relation 3636226 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3636226 // <realization>
	  b parent class_ref 1119746 // ScheduledExecutorService
      end

      attribute 2145282 "continueExistingPeriodicTasksAfterShutdown"
	volatile private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This class specializes ThreadPoolExecutor implementation by

1. Using a custom task type, ScheduledFutureTask for
   tasks, even those that don't require scheduling (i.e.,
   those submitted using ExecutorService execute, not
   ScheduledExecutorService methods) which are treated as
   delayed tasks with a delay of zero.

2. Using a custom queue (DelayedWorkQueue), a variant of
   unbounded DelayQueue. The lack of capacity constraint and
   the fact that corePoolSize and maximumPoolSize are
   effectively identical simplifies some execution mechanics
   (see delayedExecute) compared to ThreadPoolExecutor.

3. Supporting optional run-after-shutdown parameters, which
   leads to overrides of shutdown methods to remove and cancel
   tasks that should NOT be run after shutdown, as well as
   different recheck logic when task (re)submission overlaps
   with a shutdown.

4. Task decoration methods to allow interception and
   instrumentation, which are needed because subclasses cannot
   otherwise override submit methods to get this effect. These
   don't have any impact on pool control logic though.


False if should cancel/suppress periodic tasks on shutdown.

"
      end

      attribute 2145410 "executeExistingDelayedTasksAfterShutdown"
	volatile private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "False if should cancel non-periodic tasks on shutdown.

"
      end

      attribute 2145538 "removeOnCancel"
	volatile private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if ScheduledFutureTask.cancel should remove from queue

"
      end

      classrelation 3636354 // sequencer (<unidirectional association>)
	relation 3636354 --->
	  a role_name "sequencer" init_value " new AtomicLong()" class_relation const_relation private
	    comment "
Sequence number to break scheduling ties, and in turn to
guarantee FIFO order among tied entries.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3636354 // sequencer (<unidirectional association>)
	  b parent class_ref 256386 // AtomicLong
      end

      operation 9223170 "now"
	package explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns current nanosecond time.
"
      end

      class 1125250 "ScheduledFutureTask"
	visibility private 
	nformals 1
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1119362 // FutureTask
	  rank 0 explicit_value ""
	actual class class_ref 1124354 // RunnableScheduledFuture
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3636482 // <realization>
	  relation 3636482 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3636482 // <realization>
	    b parent class_ref 1119362 // FutureTask
	end

	classrelation 3636610 // <realization>
	  relation 3636610 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3636610 // <realization>
	    b parent class_ref 1124354 // RunnableScheduledFuture
	end

	attribute 2145666 "sequenceNumber"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Sequence number to break ties FIFO 
"
	end

	attribute 2145794 "time"
	  private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The time the task is enabled to execute in nanoTime units 
"
	end

	attribute 2145922 "period"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Period in nanoseconds for repeating tasks.  A positive
value indicates fixed-rate execution.  A negative value
indicates fixed-delay execution.  A value of 0 indicates a
non-repeating task.

"
	end

	classrelation 3636738 // outerTask (<unidirectional association>)
	  relation 3636738 --->
	    a role_name "outerTask" init_value " this" package
	      comment " The actual task to be re-enqueued by reExecutePeriodic 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 3636738 // outerTask (<unidirectional association>)
	    b parent class_ref 1124354 // RunnableScheduledFuture
	end

	attribute 2146050 "heapIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Index into delay queue, to support faster cancellation.

"
	end

	operation 9223298 "ScheduledFutureTask"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "r" type class_ref 128770 // Runnable
	    param inout name "result" explicit_type "V"
	    param in name "ns" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a one-shot action with given nanoTime-based trigger time.
"
	end

	operation 9223426 "ScheduledFutureTask"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "r" type class_ref 128770 // Runnable
	    param inout name "result" explicit_type "V"
	    param in name "ns" explicit_type "long"
	    param in name "period" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a periodic action with given nano time and period.
"
	end

	operation 9223554 "ScheduledFutureTask"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "callable" type class_ref 339330 // Callable
	    param in name "ns" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<V> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a one-shot action with given nanoTime-based trigger time.
"
	end

	operation 9223682 "getDelay"
	  cpp_inline public explicit_return_type "long"
	  nparams 1
	    param inout name "unit" type class_ref 935938 // TimeUnit
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9223810 "compareTo"
	  cpp_inline public explicit_return_type "int"
	  nparams 1
	    param inout name "other" type class_ref 1118338 // Delayed
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9223938 "isPeriodic"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns {@code true} if this is a periodic (not a one-shot) action.

@return {@code true} if periodic
"
	end

	operation 9224066 "setNextRunTime"
	  cpp_inline private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the next time to run for a periodic task.
"
	end

	operation 9224194 "cancel"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "mayInterruptIfRunning" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9224322 "run"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Overrides FutureTask version so as to reset/requeue if periodic.
"
	end
      end

      operation 9224450 "canRunInCurrentRunState"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "periodic" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if can run a task given current run state
and run-after-shutdown parameters.

@param periodic true if this task periodic, false if delayed
"
      end

      operation 9224578 "delayedExecute"
	private explicit_return_type "void"
	nparams 1
	  param inout name "task" type class_ref 1124354 // RunnableScheduledFuture
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main execution method for delayed or periodic tasks.  If pool
is shut down, rejects the task. Otherwise adds task to queue
and starts a thread, if necessary, to run it.  (We cannot
prestart the thread to run the task because the task (probably)
shouldn't be run yet.)  If the pool is shut down while the task
is being added, cancel and remove it if required by state and
run-after-shutdown parameters.

@param task the task
"
      end

      operation 9224706 "reExecutePeriodic"
	package explicit_return_type "void"
	nparams 1
	  param inout name "task" type class_ref 1124354 // RunnableScheduledFuture
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requeues a periodic task unless current run state precludes it.
Same idea as delayedExecute except drops task rather than rejecting.

@param task the task
"
      end

      operation 9224834 "onShutdown"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Cancels and clears the queue of all tasks that should not be run
due to shutdown policy.  Invoked within super.shutdown.
"
      end

      operation 9224962 "decorateTask"
	protected return_type class_ref 1124354 // RunnableScheduledFuture
	nparams 2
	  param inout name "runnable" type class_ref 128770 // Runnable
	  param inout name "task" type class_ref 1124354 // RunnableScheduledFuture
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0} ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Modifies or replaces the task used to execute a runnable.
This method can be used to override the concrete
class used for managing internal tasks.
The default implementation simply returns the given task.

@param runnable the submitted Runnable
@param task the task created to execute the runnable
@param <V> the type of the task's result
@return a task that can execute the runnable
@since 1.6
"
      end

      operation 9225090 "decorateTask"
	protected return_type class_ref 1124354 // RunnableScheduledFuture
	nparams 2
	  param inout name "callable" type class_ref 339330 // Callable
	  param inout name "task" type class_ref 1124354 // RunnableScheduledFuture
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0}<V> ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Modifies or replaces the task used to execute a callable.
This method can be used to override the concrete
class used for managing internal tasks.
The default implementation simply returns the given task.

@param callable the submitted Callable
@param task the task created to execute the callable
@param <V> the type of the task's result
@return a task that can execute the callable
@since 1.6
"
      end

      operation 9225218 "ScheduledThreadPoolExecutor"
	public explicit_return_type ""
	nparams 1
	  param in name "corePoolSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ScheduledThreadPoolExecutor} with the
given core pool size.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@throws IllegalArgumentException if {@code corePoolSize < 0}
"
      end

      operation 9225346 "ScheduledThreadPoolExecutor"
	public explicit_return_type ""
	nparams 2
	  param in name "corePoolSize" explicit_type "int"
	  param inout name "threadFactory" type class_ref 985090 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ScheduledThreadPoolExecutor} with the
given initial parameters.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param threadFactory the factory to use when the executor
       creates a new thread
@throws IllegalArgumentException if {@code corePoolSize < 0}
@throws NullPointerException if {@code threadFactory} is null
"
      end

      operation 9225474 "ScheduledThreadPoolExecutor"
	public explicit_return_type ""
	nparams 2
	  param in name "corePoolSize" explicit_type "int"
	  param inout name "handler" type class_ref 1124098 // RejectedExecutionHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ScheduledThreadPoolExecutor with the given
initial parameters.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param handler the handler to use when execution is blocked
       because the thread bounds and queue capacities are reached
@throws IllegalArgumentException if {@code corePoolSize < 0}
@throws NullPointerException if {@code handler} is null
"
      end

      operation 9225602 "ScheduledThreadPoolExecutor"
	public explicit_return_type ""
	nparams 3
	  param in name "corePoolSize" explicit_type "int"
	  param inout name "threadFactory" type class_ref 985090 // ThreadFactory
	  param inout name "handler" type class_ref 1124098 // RejectedExecutionHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ScheduledThreadPoolExecutor with the given
initial parameters.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param threadFactory the factory to use when the executor
       creates a new thread
@param handler the handler to use when execution is blocked
       because the thread bounds and queue capacities are reached
@throws IllegalArgumentException if {@code corePoolSize < 0}
@throws NullPointerException if {@code threadFactory} or
        {@code handler} is null
"
      end

      operation 9225730 "triggerTime"
	private explicit_return_type "long"
	nparams 2
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the trigger time of a delayed action.
"
      end

      operation 9225858 "triggerTime"
	package explicit_return_type "long"
	nparams 1
	  param in name "delay" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the trigger time of a delayed action.
"
      end

      operation 9225986 "overflowFree"
	private explicit_return_type "long"
	nparams 1
	  param in name "delay" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constrains the values of all delays in the queue to be within
Long.MAX_VALUE of each other, to avoid overflow in compareTo.
This may occur if a task is eligible to be dequeued, but has
not yet been, while some other task is added with a delay of
Long.MAX_VALUE.
"
      end

      operation 9226114 "schedule"
	public return_type class_ref 1120898 // ScheduledFuture
	nparams 3
	  param inout name "command" type class_ref 128770 // Runnable
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}
"
      end

      operation 9226242 "schedule"
	public return_type class_ref 1120898 // ScheduledFuture
	nparams 3
	  param inout name "callable" type class_ref 339330 // Callable
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0}<V> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}
"
      end

      operation 9226370 "scheduleAtFixedRate"
	public return_type class_ref 1120898 // ScheduledFuture
	nparams 4
	  param inout name "command" type class_ref 128770 // Runnable
	  param in name "initialDelay" explicit_type "long"
	  param in name "period" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}
@throws IllegalArgumentException   {@inheritDoc}
"
      end

      operation 9226498 "scheduleWithFixedDelay"
	public return_type class_ref 1120898 // ScheduledFuture
	nparams 4
	  param inout name "command" type class_ref 128770 // Runnable
	  param in name "initialDelay" explicit_type "long"
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}
@throws IllegalArgumentException   {@inheritDoc}
"
      end

      operation 9226626 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "command" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes {@code command} with zero required delay.
This has effect equivalent to
{@link #schedule(Runnable,long,TimeUnit) schedule(command, 0, anyUnit)}.
Note that inspections of the queue and of the list returned by
{@code shutdownNow} will access the zero-delayed
{@link ScheduledFuture}, not the {@code command} itself.

<p>A consequence of the use of {@code ScheduledFuture} objects is
that {@link ThreadPoolExecutor#afterExecute afterExecute} is always
called with a null second {@code Throwable} argument, even if the
{@code command} terminated abruptly.  Instead, the {@code Throwable}
thrown by such a task can be obtained via {@link Future#get}.

@throws RejectedExecutionException at discretion of
        {@code RejectedExecutionHandler}, if the task
        cannot be accepted for execution because the
        executor has been shut down
@throws NullPointerException {@inheritDoc}
"
      end

      operation 9226754 "submit"
	public return_type class_ref 984706 // Future
	nparams 1
	  param inout name "task" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Override AbstractExecutorService methods

@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}
"
      end

      operation 9226882 "submit"
	public return_type class_ref 984706 // Future
	nparams 2
	  param inout name "task" type class_ref 128770 // Runnable
	  param inout name "result" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}
"
      end

      operation 9227010 "submit"
	public return_type class_ref 984706 // Future
	nparams 1
	  param inout name "task" type class_ref 339330 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}
"
      end

      operation 9227138 "setContinueExistingPeriodicTasksAfterShutdownPolicy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the policy on whether to continue executing existing
periodic tasks even when this executor has been {@code shutdown}.
In this case, these tasks will only terminate upon
{@code shutdownNow} or after setting the policy to
{@code false} when already shutdown.
This value is by default {@code false}.

@param value if {@code true}, continue after shutdown, else don't
@see #getContinueExistingPeriodicTasksAfterShutdownPolicy
"
      end

      operation 9227266 "getContinueExistingPeriodicTasksAfterShutdownPolicy"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the policy on whether to continue executing existing
periodic tasks even when this executor has been {@code shutdown}.
In this case, these tasks will only terminate upon
{@code shutdownNow} or after setting the policy to
{@code false} when already shutdown.
This value is by default {@code false}.

@return {@code true} if will continue after shutdown
@see #setContinueExistingPeriodicTasksAfterShutdownPolicy
"
      end

      operation 9227394 "setExecuteExistingDelayedTasksAfterShutdownPolicy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the policy on whether to execute existing delayed
tasks even when this executor has been {@code shutdown}.
In this case, these tasks will only terminate upon
{@code shutdownNow}, or after setting the policy to
{@code false} when already shutdown.
This value is by default {@code true}.

@param value if {@code true}, execute after shutdown, else don't
@see #getExecuteExistingDelayedTasksAfterShutdownPolicy
"
      end

      operation 9227522 "getExecuteExistingDelayedTasksAfterShutdownPolicy"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the policy on whether to execute existing delayed
tasks even when this executor has been {@code shutdown}.
In this case, these tasks will only terminate upon
{@code shutdownNow}, or after setting the policy to
{@code false} when already shutdown.
This value is by default {@code true}.

@return {@code true} if will execute after shutdown
@see #setExecuteExistingDelayedTasksAfterShutdownPolicy
"
      end

      operation 9227650 "setRemoveOnCancelPolicy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the policy on whether cancelled tasks should be immediately
removed from the work queue at time of cancellation.  This value is
by default {@code false}.

@param value if {@code true}, remove on cancellation, else don't
@see #getRemoveOnCancelPolicy
@since 1.7
"
      end

      operation 9227778 "getRemoveOnCancelPolicy"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the policy on whether cancelled tasks should be immediately
removed from the work queue at time of cancellation.  This value is
by default {@code false}.

@return {@code true} if cancelled tasks are immediately removed
        from the queue
@see #setRemoveOnCancelPolicy
@since 1.7
"
      end

      operation 9227906 "shutdown"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initiates an orderly shutdown in which previously submitted
tasks are executed, but no new tasks will be accepted.
Invocation has no additional effect if already shut down.

<p>This method does not wait for previously submitted tasks to
complete execution.  Use {@link #awaitTermination awaitTermination}
to do that.

<p>If the {@code ExecuteExistingDelayedTasksAfterShutdownPolicy}
has been set {@code false}, existing delayed tasks whose delays
have not yet elapsed are cancelled.  And unless the {@code
ContinueExistingPeriodicTasksAfterShutdownPolicy} has been set
{@code true}, future executions of existing periodic tasks will
be cancelled.

@throws SecurityException {@inheritDoc}
"
      end

      operation 9228034 "shutdownNow"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to stop all actively executing tasks, halts the
processing of waiting tasks, and returns a list of the tasks
that were awaiting execution.

<p>This method does not wait for actively executing tasks to
terminate.  Use {@link #awaitTermination awaitTermination} to
do that.

<p>There are no guarantees beyond best-effort attempts to stop
processing actively executing tasks.  This implementation
cancels tasks via {@link Thread#interrupt}, so any task that
fails to respond to interrupts may never terminate.

@return list of tasks that never commenced execution.
        Each element of this list is a {@link ScheduledFuture},
        including those tasks submitted using {@code execute},
        which are for scheduling purposes used as the basis of a
        zero-delay {@code ScheduledFuture}.
@throws SecurityException {@inheritDoc}
"
      end

      operation 9228162 "getQueue"
	public return_type class_ref 1099522 // BlockingQueue
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the task queue used by this executor.  Each element of
this queue is a {@link ScheduledFuture}, including those
tasks submitted using {@code execute} which are for scheduling
purposes used as the basis of a zero-delay
{@code ScheduledFuture}.  Iteration over this queue is
<em>not</em> guaranteed to traverse tasks in the order in
which they will execute.

@return the task queue
"
      end

      class 1125378 "DelayedWorkQueue"
	visibility package 
	nactuals 2
	actual class class_ref 1064066 // AbstractQueue
	  rank 0 explicit_value ""
	actual class class_ref 1099522 // BlockingQueue
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3636866 // <realization>
	  relation 3636866 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3636866 // <realization>
	    b parent class_ref 1064066 // AbstractQueue
	end

	classrelation 3636994 // <realization>
	  relation 3636994 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3636994 // <realization>
	    b parent class_ref 1099522 // BlockingQueue
	end

	attribute 2146178 "INITIAL_CAPACITY"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 16"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "A DelayedWorkQueue is based on a heap-based data structure
like those in DelayQueue and PriorityQueue, except that
every ScheduledFutureTask also records its index into the
heap array. This eliminates the need to find a task upon
cancellation, greatly speeding up removal (down from O(n)
to O(log n)), and reducing garbage retention that would
otherwise occur by waiting for the element to rise to top
before clearing. But because the queue may also hold
RunnableScheduledFutures that are not ScheduledFutureTasks,
we are not guaranteed to have such indices available, in
which case we fall back to linear search. (We expect that
most tasks will not be decorated, and that the faster cases
will be much more common.)

All heap operations must record index changes -- mainly
within siftUp and siftDown. Upon removal, a task's
heapIndex is set to -1. Note that ScheduledFutureTasks can
appear at most once in the queue (this need not be true for
other kinds of tasks or work queues), so are uniquely
identified by heapIndex.

"
	end

	classrelation 3637122 // queue (<unidirectional association>)
	  relation 3637122 --->
	    a role_name "queue" multiplicity "[]" init_value "
            new RunnableScheduledFuture<?>[INITIAL_CAPACITY]" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	      classrelation_ref 3637122 // queue (<unidirectional association>)
	    b parent class_ref 1124354 // RunnableScheduledFuture
	end

	classrelation 3637250 // lock (<unidirectional association>)
	  relation 3637250 --->
	    a role_name "lock" init_value " new ReentrantLock()" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3637250 // lock (<unidirectional association>)
	    b parent class_ref 968706 // ReentrantLock
	end

	attribute 2146306 "size"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3637378 // leader (<unidirectional association>)
	  relation 3637378 --->
	    a role_name "leader" init_value " null" private
	      comment "
Thread designated to wait for the task at the head of the
queue.  This variant of the Leader-Follower pattern
(http://www.cs.wustl.edu/~schmidt/POSA/POSA2/) serves to
minimize unnecessary timed waiting.  When a thread becomes
the leader, it waits only for the next delay to elapse, but
other threads await indefinitely.  The leader thread must
signal some other thread before returning from take() or
poll(...), unless some other thread becomes leader in the
interim.  Whenever the head of the queue is replaced with a
task with an earlier expiration time, the leader field is
invalidated by being reset to null, and some waiting
thread, but not necessarily the current leader, is
signalled.  So waiting threads must be prepared to acquire
and lose leadership while waiting.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3637378 // leader (<unidirectional association>)
	    b parent class_ref 128642 // Thread
	end

	classrelation 3637506 // available (<unidirectional association>)
	  relation 3637506 --->
	    a role_name "available" init_value " lock.newCondition()" const_relation private
	      comment "
Condition signalled when a newer task becomes available at the
head of the queue or a new thread may need to become leader.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3637506 // available (<unidirectional association>)
	    b parent class_ref 864770 // Condition
	end

	operation 9228290 "setIndex"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "f" type class_ref 1124354 // RunnableScheduledFuture
	    param in name "idx" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets f's heapIndex if it is a ScheduledFutureTask.
"
	end

	operation 9228418 "siftUp"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "k" explicit_type "int"
	    param inout name "key" type class_ref 1124354 // RunnableScheduledFuture
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sifts element added at bottom up to its heap-ordered spot.
Call only when holding lock.
"
	end

	operation 9228546 "siftDown"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "k" explicit_type "int"
	    param inout name "key" type class_ref 1124354 // RunnableScheduledFuture
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sifts element added at top down to its heap-ordered spot.
Call only when holding lock.
"
	end

	operation 9228674 "grow"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resizes the heap array.  Call only when holding lock.
"
	end

	operation 9228802 "indexOf"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "x" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Finds index of given object, or -1 if absent.
"
	end

	operation 9228930 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "x" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9229058 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "x" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9229186 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9229314 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9229442 "remainingCapacity"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9229570 "peek"
	  public return_type class_ref 1124354 // RunnableScheduledFuture
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9229698 "offer"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "x" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9229826 "put"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "e" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9229954 "add"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "e" type class_ref 128770 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9230082 "offer"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "e" type class_ref 128770 // Runnable
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 935938 // TimeUnit
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9230210 "finishPoll"
	  private return_type class_ref 1124354 // RunnableScheduledFuture
	  nparams 1
	    param inout name "f" type class_ref 1124354 // RunnableScheduledFuture
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Performs common bookkeeping for poll and take: Replaces
first element with last and sifts it down.  Call only when
holding lock.
@param f the task to remove and return
"
	end

	operation 9230338 "poll"
	  public return_type class_ref 1124354 // RunnableScheduledFuture
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9230466 "take"
	  public return_type class_ref 1124354 // RunnableScheduledFuture
	  nparams 0
	  nexceptions 1
	    exception class_ref 129666 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9230594 "poll"
	  public return_type class_ref 1124354 // RunnableScheduledFuture
	  nparams 2
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 935938 // TimeUnit
	  nexceptions 1
	    exception class_ref 129666 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9230722 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9230850 "peekExpired"
	  private return_type class_ref 1124354 // RunnableScheduledFuture
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns first element only if it is expired.
Used only by drainTo.  Call only when holding lock.
"
	end

	operation 9230978 "drainTo"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "c" type class_ref 184194 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Runnable> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9231106 "drainTo"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "c" type class_ref 184194 // Collection
	    param in name "maxElements" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Runnable> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9231234 "toArray"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9231362 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9231490 "iterator"
	  public return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	class 1125506 "Itr"
	  visibility private 
	  nactuals 1
	  actual class class_ref 132994 // Iterator
	    rank 0 explicit_value ""
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3637634 // <realization>
	    relation 3637634 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 3637634 // <realization>
	      b parent class_ref 132994 // Iterator
	  end

	  classrelation 3637762 // array (<unidirectional association>)
	    relation 3637762 --->
	      a role_name "array" multiplicity "[]" const_relation package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
		classrelation_ref 3637762 // array (<unidirectional association>)
	      b parent class_ref 1124354 // RunnableScheduledFuture
	  end

	  attribute 2146434 "cursor"
	    package explicit_type "int"
	    init_value " 0"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	    comment " index of next element to return"
	  end

	  attribute 2146562 "lastRet"
	    package explicit_type "int"
	    init_value " -1"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	    comment " index of last element, or -1 if no such"
	  end

	  operation 9231618 "Itr"
	    package explicit_return_type ""
	    nparams 1
	      param inout name "array" type class_ref 1124354 // RunnableScheduledFuture
	    multiplicity "[]"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?>[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9231746 "hasNext"
	    public explicit_return_type "boolean"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9231874 "next"
	    public return_type class_ref 128770 // Runnable
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9232002 "remove"
	    public explicit_return_type "void"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end
      end
    end

    class 1125634 "Semaphore"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A counting semaphore.  Conceptually, a semaphore maintains a set of
permits.  Each {@link #acquire} blocks if necessary until a permit is
available, and then takes it.  Each {@link #release} adds a permit,
potentially releasing a blocking acquirer.
However, no actual permit objects are used; the {@code Semaphore} just
keeps a count of the number available and acts accordingly.

<p>Semaphores are often used to restrict the number of threads than can
access some (physical or logical) resource. For example, here is
a class that uses a semaphore to control access to a pool of items:
 <pre> {@code
class Pool {
  private static final int MAX_AVAILABLE = 100;
  private final Semaphore available = new Semaphore(MAX_AVAILABLE, true);

  public Object getItem() throws InterruptedException {
    available.acquire();
    return getNextAvailableItem();
  }

  public void putItem(Object x) {
    if (markAsUnused(x))
      available.release();
  }

  // Not a particularly efficient data structure; just for demo

  protected Object[] items = ... whatever kinds of items being managed
  protected boolean[] used = new boolean[MAX_AVAILABLE];

  protected synchronized Object getNextAvailableItem() {
    for (int i = 0; i < MAX_AVAILABLE; ++i) {
      if (!used[i]) {
         used[i] = true;
         return items[i];
      }
    }
    return null; // not reached
  }

  protected synchronized boolean markAsUnused(Object item) {
    for (int i = 0; i < MAX_AVAILABLE; ++i) {
      if (item == items[i]) {
         if (used[i]) {
           used[i] = false;
           return true;
         } else
           return false;
      }
    }
    return false;
  }
}}</pre>

<p>Before obtaining an item each thread must acquire a permit from
the semaphore, guaranteeing that an item is available for use. When
the thread has finished with the item it is returned back to the
pool and a permit is returned to the semaphore, allowing another
thread to acquire that item.  Note that no synchronization lock is
held when {@link #acquire} is called as that would prevent an item
from being returned to the pool.  The semaphore encapsulates the
synchronization needed to restrict access to the pool, separately
from any synchronization needed to maintain the consistency of the
pool itself.

<p>A semaphore initialized to one, and which is used such that it
only has at most one permit available, can serve as a mutual
exclusion lock.  This is more commonly known as a <em>binary
semaphore</em>, because it only has two states: one permit
available, or zero permits available.  When used in this way, the
binary semaphore has the property (unlike many {@link java.util.concurrent.locks.Lock}
implementations), that the &quot;lock&quot; can be released by a
thread other than the owner (as semaphores have no notion of
ownership).  This can be useful in some specialized contexts, such
as deadlock recovery.

<p> The constructor for this class optionally accepts a
<em>fairness</em> parameter. When set false, this class makes no
guarantees about the order in which threads acquire permits. In
particular, <em>barging</em> is permitted, that is, a thread
invoking {@link #acquire} can be allocated a permit ahead of a
thread that has been waiting - logically the new thread places itself at
the head of the queue of waiting threads. When fairness is set true, the
semaphore guarantees that threads invoking any of the {@link
#acquire() acquire} methods are selected to obtain permits in the order in
which their invocation of those methods was processed
(first-in-first-out; FIFO). Note that FIFO ordering necessarily
applies to specific internal points of execution within these
methods.  So, it is possible for one thread to invoke
{@code acquire} before another, but reach the ordering point after
the other, and similarly upon return from the method.
Also note that the untimed {@link #tryAcquire() tryAcquire} methods do not
honor the fairness setting, but will take any permits that are
available.

<p>Generally, semaphores used to control resource access should be
initialized as fair, to ensure that no thread is starved out from
accessing a resource. When using semaphores for other kinds of
synchronization control, the throughput advantages of non-fair
ordering often outweigh fairness considerations.

<p>This class also provides convenience methods to {@link
#acquire(int) acquire} and {@link #release(int) release} multiple
permits at a time.  Beware of the increased risk of indefinite
postponement when these methods are used without fairness set true.

<p>Memory consistency effects: Actions in a thread prior to calling
a \"release\" method such as {@code release()}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions following a successful \"acquire\" method such as {@code acquire()}
in another thread.

@since 1.5
@author Doug Lea
"
      classrelation 3637890 // <realization>
	relation 3637890 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3637890 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2146690 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3222578661600680210L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 1125762 "Sync"
	abstract visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3638146 // <generalisation>
	  relation 3638146 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3638146 // <generalisation>
	    b parent class_ref 1106050 // AbstractQueuedSynchronizer
	end

	attribute 2146818 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 1192457210091910933L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9232130 "Sync"
	  package explicit_return_type ""
	  nparams 1
	    param in name "permits" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9232258 "getPermits"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9232386 "nonfairTryAcquireShared"
	  package explicit_return_type "int"
	  nparams 1
	    param in name "acquires" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9232514 "tryReleaseShared"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "releases" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9232642 "reducePermits"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "reductions" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9232770 "drainPermits"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3638018 // sync (<unidirectional association>)
	relation 3638018 --->
	  a role_name "sync" const_relation private
	    comment " All mechanics via AbstractQueuedSynchronizer subclass 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3638018 // sync (<unidirectional association>)
	  b parent class_ref 1125762 // Sync
      end

      class 1125890 "NonfairSync"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3638274 // <generalisation>
	  relation 3638274 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3638274 // <generalisation>
	    b parent class_ref 1125762 // Sync
	end

	attribute 2146946 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -2694183684443567898L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9232898 "NonfairSync"
	  package explicit_return_type ""
	  nparams 1
	    param in name "permits" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9233026 "tryAcquireShared"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "acquires" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1126018 "FairSync"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3638402 // <generalisation>
	  relation 3638402 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3638402 // <generalisation>
	    b parent class_ref 1125762 // Sync
	end

	attribute 2147074 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 2014338818796000944L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9233154 "FairSync"
	  package explicit_return_type ""
	  nparams 1
	    param in name "permits" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9233282 "tryAcquireShared"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "acquires" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9233410 "Semaphore"
	public explicit_return_type ""
	nparams 1
	  param in name "permits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code Semaphore} with the given number of
permits and nonfair fairness setting.

@param permits the initial number of permits available.
       This value may be negative, in which case releases
       must occur before any acquires will be granted.
"
      end

      operation 9233538 "Semaphore"
	public explicit_return_type ""
	nparams 2
	  param in name "permits" explicit_type "int"
	  param inout name "fair" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code Semaphore} with the given number of
permits and the given fairness setting.

@param permits the initial number of permits available.
       This value may be negative, in which case releases
       must occur before any acquires will be granted.
@param fair {@code true} if this semaphore will guarantee
       first-in first-out granting of permits under contention,
       else {@code false}
"
      end

      operation 9233666 "acquire"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a permit from this semaphore, blocking until one is
available, or the thread is {@linkplain Thread#interrupt interrupted}.

<p>Acquires a permit, if one is available and returns immediately,
reducing the number of available permits by one.

<p>If no permit is available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
one of two things happens:
<ul>
<li>Some other thread invokes the {@link #release} method for this
semaphore and the current thread is next to be assigned a permit; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread.
</ul>

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
for a permit,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

@throws InterruptedException if the current thread is interrupted
"
      end

      operation 9233794 "acquireUninterruptibly"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a permit from this semaphore, blocking until one is
available.

<p>Acquires a permit, if one is available and returns immediately,
reducing the number of available permits by one.

<p>If no permit is available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
some other thread invokes the {@link #release} method for this
semaphore and the current thread is next to be assigned a permit.

<p>If the current thread is {@linkplain Thread#interrupt interrupted}
while waiting for a permit then it will continue to wait, but the
time at which the thread is assigned a permit may change compared to
the time it would have received the permit had no interruption
occurred.  When the thread does return from this method its interrupt
status will be set.
"
      end

      operation 9233922 "tryAcquire"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a permit from this semaphore, only if one is available at the
time of invocation.

<p>Acquires a permit, if one is available and returns immediately,
with the value {@code true},
reducing the number of available permits by one.

<p>If no permit is available then this method will return
immediately with the value {@code false}.

<p>Even when this semaphore has been set to use a
fair ordering policy, a call to {@code tryAcquire()} <em>will</em>
immediately acquire a permit if one is available, whether or not
other threads are currently waiting.
This &quot;barging&quot; behavior can be useful in certain
circumstances, even though it breaks fairness. If you want to honor
the fairness setting, then use
{@link #tryAcquire(long, TimeUnit) tryAcquire(0, TimeUnit.SECONDS) }
which is almost equivalent (it also detects interruption).

@return {@code true} if a permit was acquired and {@code false}
        otherwise
"
      end

      operation 9234050 "tryAcquire"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a permit from this semaphore, if one becomes available
within the given waiting time and the current thread has not
been {@linkplain Thread#interrupt interrupted}.

<p>Acquires a permit, if one is available and returns immediately,
with the value {@code true},
reducing the number of available permits by one.

<p>If no permit is available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
one of three things happens:
<ul>
<li>Some other thread invokes the {@link #release} method for this
semaphore and the current thread is next to be assigned a permit; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread; or
<li>The specified waiting time elapses.
</ul>

<p>If a permit is acquired then the value {@code true} is returned.

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
to acquire a permit,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

<p>If the specified waiting time elapses then the value {@code false}
is returned.  If the time is less than or equal to zero, the method
will not wait at all.

@param timeout the maximum time to wait for a permit
@param unit the time unit of the {@code timeout} argument
@return {@code true} if a permit was acquired and {@code false}
        if the waiting time elapsed before a permit was acquired
@throws InterruptedException if the current thread is interrupted
"
      end

      operation 9234178 "release"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases a permit, returning it to the semaphore.

<p>Releases a permit, increasing the number of available permits by
one.  If any threads are trying to acquire a permit, then one is
selected and given the permit that was just released.  That thread
is (re)enabled for thread scheduling purposes.

<p>There is no requirement that a thread that releases a permit must
have acquired that permit by calling {@link #acquire}.
Correct usage of a semaphore is established by programming convention
in the application.
"
      end

      operation 9234306 "acquire"
	public explicit_return_type "void"
	nparams 1
	  param in name "permits" explicit_type "int"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires the given number of permits from this semaphore,
blocking until all are available,
or the thread is {@linkplain Thread#interrupt interrupted}.

<p>Acquires the given number of permits, if they are available,
and returns immediately, reducing the number of available permits
by the given amount.

<p>If insufficient permits are available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
one of two things happens:
<ul>
<li>Some other thread invokes one of the {@link #release() release}
methods for this semaphore, the current thread is next to be assigned
permits and the number of available permits satisfies this request; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread.
</ul>

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
for a permit,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.
Any permits that were to be assigned to this thread are instead
assigned to other threads trying to acquire permits, as if
permits had been made available by a call to {@link #release()}.

@param permits the number of permits to acquire
@throws InterruptedException if the current thread is interrupted
@throws IllegalArgumentException if {@code permits} is negative
"
      end

      operation 9234434 "acquireUninterruptibly"
	public explicit_return_type "void"
	nparams 1
	  param in name "permits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires the given number of permits from this semaphore,
blocking until all are available.

<p>Acquires the given number of permits, if they are available,
and returns immediately, reducing the number of available permits
by the given amount.

<p>If insufficient permits are available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
some other thread invokes one of the {@link #release() release}
methods for this semaphore, the current thread is next to be assigned
permits and the number of available permits satisfies this request.

<p>If the current thread is {@linkplain Thread#interrupt interrupted}
while waiting for permits then it will continue to wait and its
position in the queue is not affected.  When the thread does return
from this method its interrupt status will be set.

@param permits the number of permits to acquire
@throws IllegalArgumentException if {@code permits} is negative
"
      end

      operation 9234562 "tryAcquire"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "permits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires the given number of permits from this semaphore, only
if all are available at the time of invocation.

<p>Acquires the given number of permits, if they are available, and
returns immediately, with the value {@code true},
reducing the number of available permits by the given amount.

<p>If insufficient permits are available then this method will return
immediately with the value {@code false} and the number of available
permits is unchanged.

<p>Even when this semaphore has been set to use a fair ordering
policy, a call to {@code tryAcquire} <em>will</em>
immediately acquire a permit if one is available, whether or
not other threads are currently waiting.  This
&quot;barging&quot; behavior can be useful in certain
circumstances, even though it breaks fairness. If you want to
honor the fairness setting, then use {@link #tryAcquire(int,
long, TimeUnit) tryAcquire(permits, 0, TimeUnit.SECONDS) }
which is almost equivalent (it also detects interruption).

@param permits the number of permits to acquire
@return {@code true} if the permits were acquired and
        {@code false} otherwise
@throws IllegalArgumentException if {@code permits} is negative
"
      end

      operation 9234690 "tryAcquire"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "permits" explicit_type "int"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires the given number of permits from this semaphore, if all
become available within the given waiting time and the current
thread has not been {@linkplain Thread#interrupt interrupted}.

<p>Acquires the given number of permits, if they are available and
returns immediately, with the value {@code true},
reducing the number of available permits by the given amount.

<p>If insufficient permits are available then
the current thread becomes disabled for thread scheduling
purposes and lies dormant until one of three things happens:
<ul>
<li>Some other thread invokes one of the {@link #release() release}
methods for this semaphore, the current thread is next to be assigned
permits and the number of available permits satisfies this request; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread; or
<li>The specified waiting time elapses.
</ul>

<p>If the permits are acquired then the value {@code true} is returned.

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
to acquire the permits,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.
Any permits that were to be assigned to this thread, are instead
assigned to other threads trying to acquire permits, as if
the permits had been made available by a call to {@link #release()}.

<p>If the specified waiting time elapses then the value {@code false}
is returned.  If the time is less than or equal to zero, the method
will not wait at all.  Any permits that were to be assigned to this
thread, are instead assigned to other threads trying to acquire
permits, as if the permits had been made available by a call to
{@link #release()}.

@param permits the number of permits to acquire
@param timeout the maximum time to wait for the permits
@param unit the time unit of the {@code timeout} argument
@return {@code true} if all permits were acquired and {@code false}
        if the waiting time elapsed before all permits were acquired
@throws InterruptedException if the current thread is interrupted
@throws IllegalArgumentException if {@code permits} is negative
"
      end

      operation 9234818 "release"
	public explicit_return_type "void"
	nparams 1
	  param in name "permits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases the given number of permits, returning them to the semaphore.

<p>Releases the given number of permits, increasing the number of
available permits by that amount.
If any threads are trying to acquire permits, then one
is selected and given the permits that were just released.
If the number of available permits satisfies that thread's request
then that thread is (re)enabled for thread scheduling purposes;
otherwise the thread will wait until sufficient permits are available.
If there are still permits available
after this thread's request has been satisfied, then those permits
are assigned in turn to other threads trying to acquire permits.

<p>There is no requirement that a thread that releases a permit must
have acquired that permit by calling {@link Semaphore#acquire acquire}.
Correct usage of a semaphore is established by programming convention
in the application.

@param permits the number of permits to release
@throws IllegalArgumentException if {@code permits} is negative
"
      end

      operation 9234946 "availablePermits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current number of permits available in this semaphore.

<p>This method is typically used for debugging and testing purposes.

@return the number of permits available in this semaphore
"
      end

      operation 9235074 "drainPermits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires and returns all permits that are immediately available.

@return the number of permits acquired
"
      end

      operation 9235202 "reducePermits"
	protected explicit_return_type "void"
	nparams 1
	  param in name "reduction" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Shrinks the number of available permits by the indicated
reduction. This method can be useful in subclasses that use
semaphores to track resources that become unavailable. This
method differs from {@code acquire} in that it does not block
waiting for permits to become available.

@param reduction the number of permits to remove
@throws IllegalArgumentException if {@code reduction} is negative
"
      end

      operation 9235330 "isFair"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this semaphore has fairness set true.

@return {@code true} if this semaphore has fairness set true
"
      end

      operation 9235458 "hasQueuedThreads"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries whether any threads are waiting to acquire. Note that
because cancellations may occur at any time, a {@code true}
return does not guarantee that any other thread will ever
acquire.  This method is designed primarily for use in
monitoring of the system state.

@return {@code true} if there may be other threads waiting to
        acquire the lock
"
      end

      operation 9235586 "getQueueLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of threads waiting to acquire.
The value is only an estimate because the number of threads may
change dynamically while this method traverses internal data
structures.  This method is designed for use in monitoring of the
system state, not for synchronization control.

@return the estimated number of threads waiting for this lock
"
      end

      operation 9235714 "getQueuedThreads"
	protected return_type class_ref 184194 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Thread> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a collection containing threads that may be waiting to acquire.
Because the actual set of threads may change dynamically while
constructing this result, the returned collection is only a best-effort
estimate.  The elements of the returned collection are in no particular
order.  This method is designed to facilitate construction of
subclasses that provide more extensive monitoring facilities.

@return the collection of threads
"
      end

      operation 9235842 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string identifying this semaphore, as well as its state.
The state, in brackets, includes the String {@code \"Permits =\"}
followed by the number of permits.

@return a string identifying this semaphore, as well as its state
"
      end
    end

    class 1126146 "SynchronousQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1064066 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 1099522 // BlockingQueue
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@linkplain BlockingQueue blocking queue} in which each insert
operation must wait for a corresponding remove operation by another
thread, and vice versa.  A synchronous queue does not have any
internal capacity, not even a capacity of one.  You cannot
{@code peek} at a synchronous queue because an element is only
present when you try to remove it; you cannot insert an element
(using any method) unless another thread is trying to remove it;
you cannot iterate as there is nothing to iterate.  The
<em>head</em> of the queue is the element that the first queued
inserting thread is trying to add to the queue; if there is no such
queued thread then no element is available for removal and
{@code poll()} will return {@code null}.  For purposes of other
{@code Collection} methods (for example {@code contains}), a
{@code SynchronousQueue} acts as an empty collection.  This queue
does not permit {@code null} elements.

<p>Synchronous queues are similar to rendezvous channels used in
CSP and Ada. They are well suited for handoff designs, in which an
object running in one thread must sync up with an object running
in another thread in order to hand it some information, event, or
task.

<p>This class supports an optional fairness policy for ordering
waiting producer and consumer threads.  By default, this ordering
is not guaranteed. However, a queue constructed with fairness set
to {@code true} grants threads access in FIFO order.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

<p>This class is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea and Bill Scherer and Michael Scott
@param <E> the type of elements held in this collection
"
      classrelation 3638530 // <realization>
	relation 3638530 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3638530 // <realization>
	  b parent class_ref 1064066 // AbstractQueue
      end

      classrelation 3638658 // <realization>
	relation 3638658 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3638658 // <realization>
	  b parent class_ref 1099522 // BlockingQueue
      end

      classrelation 3638786 // <realization>
	relation 3638786 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3638786 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2147202 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3223113410248163686L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 1126274 "Transferer"
	abstract visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 9235970 "transfer"
	  abstract cpp_inline package explicit_return_type "E"
	  nparams 3
	    param inout name "e" explicit_type "E"
	    param inout name "timed" explicit_type "boolean"
	    param in name "nanos" explicit_type "long"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Performs a put or take.

@param e if non-null, the item to be handed to a consumer;
         if null, requests that transfer return an item
         offered by producer.
@param timed if this operation should timeout
@param nanos the timeout, in nanoseconds
@return if non-null, the item provided or received; if null,
        the operation failed due to timeout or interrupt --
        the caller can distinguish which of these occurred
        by checking Thread.interrupted.
"
	end
      end

      attribute 2147330 "NCPUS"
	class_attribute const_attribute package explicit_type "int"
	init_value " Runtime.getRuntime().availableProcessors()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of CPUs, for spin control 
"
      end

      attribute 2147458 "maxTimedSpins"
	class_attribute const_attribute package explicit_type "int"
	init_value " (NCPUS < 2) ? 0 : 32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of times to spin before blocking in timed waits.
The value is empirically derived -- it works well across a
variety of processors and OSes. Empirically, the best value
seems not to vary with number of CPUs (beyond 2) so is just
a constant.

"
      end

      attribute 2147586 "maxUntimedSpins"
	class_attribute const_attribute package explicit_type "int"
	init_value " maxTimedSpins * 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of times to spin before blocking in untimed waits.
This is greater than timed value because untimed waits spin
faster since they don't need to check times on each spin.

"
      end

      attribute 2147714 "spinForTimeoutThreshold"
	class_attribute const_attribute package explicit_type "long"
	init_value " 1000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of nanoseconds for which it is faster to spin
rather than to use timed park. A rough estimate suffices.

"
      end

      class 1126402 "TransferStack"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1126146 // SynchronousQueue
	  rank 0 explicit_value ""
	actual class class_ref 1126274 // Transferer
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3638914 // <realization>
	  relation 3638914 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3638914 // <realization>
	    b parent class_ref 1126274 // Transferer
	end

	attribute 2147842 "REQUEST"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "This extends Scherer-Scott dual stack algorithm, differing,
among other ways, by using \"covering\" nodes rather than
bit-marked pointers: Fulfilling operations push on marker
nodes (with FULFILLING bit set in mode) to reserve a spot
to match a waiting node.

 Modes for SNodes, ORed together in node fields 
 Node represents an unfulfilled consumer 
"
	end

	attribute 2147970 "DATA"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Node represents an unfulfilled producer 
"
	end

	attribute 2148098 "FULFILLING"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Node is fulfilling another unfulfilled DATA or REQUEST 
"
	end

	operation 9236098 "isFulfilling"
	  class_operation cpp_inline package explicit_return_type "boolean"
	  nparams 1
	    param in name "m" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns true if m has fulfilling bit set. "
	end

	class 1126530 "SNode"
	  visibility package 
	  cpp_decl ""
	  final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3639042 // next (<unidirectional association>)
	    relation 3639042 --->
	      a role_name "next" volatile package
		comment " next node in stack"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3639042 // next (<unidirectional association>)
	      b parent class_ref 1126530 // SNode
	  end

	  classrelation 3639170 // match (<unidirectional association>)
	    relation 3639170 --->
	      a role_name "match" volatile package
		comment " the node matched to this"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3639170 // match (<unidirectional association>)
	      b parent class_ref 1126530 // SNode
	  end

	  classrelation 3639298 // waiter (<unidirectional association>)
	    relation 3639298 --->
	      a role_name "waiter" volatile package
		comment " to control park/unpark"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3639298 // waiter (<unidirectional association>)
	      b parent class_ref 128642 // Thread
	  end

	  classrelation 3639426 // item (<unidirectional association>)
	    relation 3639426 --->
	      a role_name "item" package
		comment " data; or null for REQUESTs"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3639426 // item (<unidirectional association>)
	      b parent class_ref 129538 // Object
	  end

	  attribute 2148226 "mode"
	    package explicit_type "int"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  operation 9236226 "SNode"
	    cpp_inline package explicit_return_type ""
	    nparams 1
	      param inout name "item" type class_ref 129538 // Object
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment " Note: item and mode fields don't need to be volatile
 since they are always written before, and read after,
 other volatile/atomic operations."
	  end

	  operation 9236354 "casNext"
	    cpp_inline package explicit_return_type "boolean"
	    nparams 2
	      param inout name "cmp" type class_ref 1126530 // SNode
	      param inout name "val" type class_ref 1126530 // SNode
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9236482 "tryMatch"
	    cpp_inline package explicit_return_type "boolean"
	    nparams 1
	      param inout name "s" type class_ref 1126530 // SNode
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "Tries to match node s to this node, if so, waking up thread.
Fulfillers call tryMatch to identify their waiters.
Waiters block until they have been matched.

@param s the node to match
@return true if successfully matched to s
"
	  end

	  operation 9236610 "tryCancel"
	    cpp_inline package explicit_return_type "void"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "Tries to cancel a wait by matching node to itself.
"
	  end

	  operation 9236738 "isCancelled"
	    cpp_inline package explicit_return_type "boolean"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  attribute 2148354 "UNSAFE"
	    class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	    comment " Unsafe mechanics
"
	  end

	  attribute 2148482 "matchOffset"
	    class_attribute const_attribute private explicit_type "long"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 2148610 "nextOffset"
	    class_attribute const_attribute private explicit_type "long"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  extra_member 175490 "initialization"
	    
	    cpp "" ""
	    java "  static {
                try {
                    UNSAFE = sun.misc.Unsafe.getUnsafe();
                    Class<?> k = SNode.class;
                    matchOffset = UNSAFE.objectFieldOffset
                        (k.getDeclaredField(\"match\"));
                    nextOffset = UNSAFE.objectFieldOffset
                        (k.getDeclaredField(\"next\"));
                } catch (Exception e) {
                    throw new Error(e);
                }
            }"
	    php ""
	    python ""
	    idl ""
	    mysql ""
	  end
	end

	classrelation 3639554 // head (<unidirectional association>)
	  relation 3639554 --->
	    a role_name "head" volatile package
	      comment " The head (top) of the stack 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3639554 // head (<unidirectional association>)
	    b parent class_ref 1126530 // SNode
	end

	operation 9236866 "casHead"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "h" type class_ref 1126530 // SNode
	    param inout name "nh" type class_ref 1126530 // SNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9236994 "snode"
	  class_operation cpp_inline package return_type class_ref 1126530 // SNode
	  nparams 4
	    param inout name "s" type class_ref 1126530 // SNode
	    param inout name "e" type class_ref 129538 // Object
	    param inout name "next" type class_ref 1126530 // SNode
	    param in name "mode" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates or resets fields of a node. Called only from transfer
where the node to push on stack is lazily created and
reused when possible to help reduce intervals between reads
and CASes of head and to avoid surges of garbage when CASes
to push nodes fail due to contention.
"
	end

	operation 9237122 "transfer"
	  cpp_inline package explicit_return_type "E"
	  nparams 3
	    param inout name "e" explicit_type "E"
	    param inout name "timed" explicit_type "boolean"
	    param in name "nanos" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	  comment "Puts or takes an item.
"
	end

	operation 9237250 "awaitFulfill"
	  cpp_inline package return_type class_ref 1126530 // SNode
	  nparams 3
	    param inout name "s" type class_ref 1126530 // SNode
	    param inout name "timed" explicit_type "boolean"
	    param in name "nanos" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Spins/blocks until node s is matched by a fulfill operation.

@param s the waiting node
@param timed true if timed wait
@param nanos timeout value
@return matched node, or s if cancelled
"
	end

	operation 9237378 "shouldSpin"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 1
	    param inout name "s" type class_ref 1126530 // SNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if node s is at head or there is an active
fulfiller.
"
	end

	operation 9237506 "clean"
	  cpp_inline package explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 1126530 // SNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Unlinks s from the stack.
"
	end

	attribute 2148738 "UNSAFE"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Unsafe mechanics
"
	end

	attribute 2148866 "headOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 175618 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = TransferStack.class;
                headOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"head\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      class 1126658 "TransferQueue"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1126146 // SynchronousQueue
	  rank 0 explicit_value ""
	actual class class_ref 1126274 // Transferer
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3639682 // <realization>
	  relation 3639682 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3639682 // <realization>
	    b parent class_ref 1126274 // Transferer
	end

	class 1126786 "QNode"
	  visibility package 
	  cpp_decl ""
	  final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3639810 // next (<unidirectional association>)
	    relation 3639810 --->
	      a role_name "next" volatile package
		comment " next node in queue"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3639810 // next (<unidirectional association>)
	      b parent class_ref 1126786 // QNode
	  end

	  classrelation 3639938 // item (<unidirectional association>)
	    relation 3639938 --->
	      a role_name "item" volatile package
		comment " CAS'ed to or from null"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3639938 // item (<unidirectional association>)
	      b parent class_ref 129538 // Object
	  end

	  classrelation 3640066 // waiter (<unidirectional association>)
	    relation 3640066 --->
	      a role_name "waiter" volatile package
		comment " to control park/unpark"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3640066 // waiter (<unidirectional association>)
	      b parent class_ref 128642 // Thread
	  end

	  attribute 2148994 "isData"
	    const_attribute package explicit_type "boolean"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  operation 9237634 "QNode"
	    cpp_inline package explicit_return_type ""
	    nparams 2
	      param inout name "item" type class_ref 129538 // Object
	      param inout name "isData" explicit_type "boolean"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9237762 "casNext"
	    cpp_inline package explicit_return_type "boolean"
	    nparams 2
	      param inout name "cmp" type class_ref 1126786 // QNode
	      param inout name "val" type class_ref 1126786 // QNode
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9237890 "casItem"
	    cpp_inline package explicit_return_type "boolean"
	    nparams 2
	      param inout name "cmp" type class_ref 129538 // Object
	      param inout name "val" type class_ref 129538 // Object
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9238018 "tryCancel"
	    cpp_inline package explicit_return_type "void"
	    nparams 1
	      param inout name "cmp" type class_ref 129538 // Object
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "Tries to cancel by CAS'ing ref to this as item.
"
	  end

	  operation 9238146 "isCancelled"
	    cpp_inline package explicit_return_type "boolean"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9238274 "isOffList"
	    cpp_inline package explicit_return_type "boolean"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "Returns true if this node is known to be off the queue
because its next pointer has been forgotten due to
an advanceHead operation.
"
	  end

	  attribute 2149122 "UNSAFE"
	    class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	    comment " Unsafe mechanics
"
	  end

	  attribute 2149250 "itemOffset"
	    class_attribute const_attribute private explicit_type "long"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 2149378 "nextOffset"
	    class_attribute const_attribute private explicit_type "long"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  extra_member 175746 "initialization"
	    
	    cpp "" ""
	    java "  static {
                try {
                    UNSAFE = sun.misc.Unsafe.getUnsafe();
                    Class<?> k = QNode.class;
                    itemOffset = UNSAFE.objectFieldOffset
                        (k.getDeclaredField(\"item\"));
                    nextOffset = UNSAFE.objectFieldOffset
                        (k.getDeclaredField(\"next\"));
                } catch (Exception e) {
                    throw new Error(e);
                }
            }"
	    php ""
	    python ""
	    idl ""
	    mysql ""
	  end
	end

	classrelation 3640194 // head (<unidirectional association>)
	  relation 3640194 --->
	    a role_name "head" volatile package
	      comment " Head of queue 
"
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3640194 // head (<unidirectional association>)
	    b parent class_ref 1126786 // QNode
	end

	classrelation 3640322 // tail (<unidirectional association>)
	  relation 3640322 --->
	    a role_name "tail" volatile package
	      comment " Tail of queue 
"
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3640322 // tail (<unidirectional association>)
	    b parent class_ref 1126786 // QNode
	end

	classrelation 3640450 // cleanMe (<unidirectional association>)
	  relation 3640450 --->
	    a role_name "cleanMe" volatile package
	      comment "
Reference to a cancelled node that might not yet have been
unlinked from queue because it was the last inserted node
when it was cancelled.

"
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3640450 // cleanMe (<unidirectional association>)
	    b parent class_ref 1126786 // QNode
	end

	operation 9238402 "TransferQueue"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9238530 "advanceHead"
	  cpp_inline package explicit_return_type "void"
	  nparams 2
	    param inout name "h" type class_ref 1126786 // QNode
	    param inout name "nh" type class_ref 1126786 // QNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to cas nh as new head; if successful, unlink
old head's next node to avoid garbage retention.
"
	end

	operation 9238658 "advanceTail"
	  cpp_inline package explicit_return_type "void"
	  nparams 2
	    param inout name "t" type class_ref 1126786 // QNode
	    param inout name "nt" type class_ref 1126786 // QNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to cas nt as new tail.
"
	end

	operation 9238786 "casCleanMe"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 1126786 // QNode
	    param inout name "val" type class_ref 1126786 // QNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to CAS cleanMe slot.
"
	end

	operation 9238914 "transfer"
	  cpp_inline package explicit_return_type "E"
	  nparams 3
	    param inout name "e" explicit_type "E"
	    param inout name "timed" explicit_type "boolean"
	    param in name "nanos" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	  comment "Puts or takes an item.
"
	end

	operation 9239042 "awaitFulfill"
	  cpp_inline package return_type class_ref 129538 // Object
	  nparams 4
	    param inout name "s" type class_ref 1126786 // QNode
	    param inout name "e" explicit_type "E"
	    param inout name "timed" explicit_type "boolean"
	    param in name "nanos" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Spins/blocks until node s is fulfilled.

@param s the waiting node
@param e the comparison value for checking match
@param timed true if timed wait
@param nanos timeout value
@return matched item, or s if cancelled
"
	end

	operation 9239170 "clean"
	  cpp_inline package explicit_return_type "void"
	  nparams 2
	    param inout name "pred" type class_ref 1126786 // QNode
	    param inout name "s" type class_ref 1126786 // QNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets rid of cancelled node s with original predecessor pred.
"
	end

	attribute 2149506 "UNSAFE"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2149634 "headOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2149762 "tailOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2149890 "cleanMeOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 175874 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = TransferQueue.class;
                headOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"head\"));
                tailOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"tail\"));
                cleanMeOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"cleanMe\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      classrelation 3640578 // transferer (<unidirectional association>)
	relation 3640578 --->
	  a role_name "transferer" volatile private
	    comment "
The transferer. Set only in constructor, but cannot be declared
as final without further complicating serialization.  Since
this is accessed only at most once per public method, there
isn't a noticeable performance penalty for using volatile
instead of final here.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 3640578 // transferer (<unidirectional association>)
	  b parent class_ref 1126274 // Transferer
      end

      operation 9239298 "SynchronousQueue"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code SynchronousQueue} with nonfair access policy.
"
      end

      operation 9239426 "SynchronousQueue"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "fair" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code SynchronousQueue} with the specified fairness policy.

@param fair if true, waiting threads contend in FIFO order for
       access; otherwise the order is unspecified.
"
      end

      operation 9239554 "put"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this queue, waiting if necessary for
another thread to receive it.

@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}
"
      end

      operation 9239682 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue, waiting if necessary
up to the specified wait time for another thread to receive it.

@return {@code true} if successful, or {@code false} if the
        specified waiting time elapses before a consumer appears
@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}
"
      end

      operation 9239810 "offer"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue, if another thread is
waiting to receive it.

@param e the element to add
@return {@code true} if the element was added to this queue, else
        {@code false}
@throws NullPointerException if the specified element is null
"
      end

      operation 9239938 "take"
	cpp_inline public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting if necessary
for another thread to insert it.

@return the head of this queue
@throws InterruptedException {@inheritDoc}
"
      end

      operation 9240066 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting
if necessary up to the specified wait time, for another thread
to insert it.

@return the head of this queue, or {@code null} if the
        specified waiting time elapses before an element is present
@throws InterruptedException {@inheritDoc}
"
      end

      operation 9240194 "poll"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, if another thread
is currently making an element available.

@return the head of this queue, or {@code null} if no
        element is available
"
      end

      operation 9240322 "isEmpty"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns {@code true}.
A {@code SynchronousQueue} has no internal capacity.

@return {@code true}
"
      end

      operation 9240450 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns zero.
A {@code SynchronousQueue} has no internal capacity.

@return zero
"
      end

      operation 9240578 "remainingCapacity"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns zero.
A {@code SynchronousQueue} has no internal capacity.

@return zero
"
      end

      operation 9240706 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does nothing.
A {@code SynchronousQueue} has no internal capacity.
"
      end

      operation 9240834 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns {@code false}.
A {@code SynchronousQueue} has no internal capacity.

@param o the element
@return {@code false}
"
      end

      operation 9240962 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns {@code false}.
A {@code SynchronousQueue} has no internal capacity.

@param o the element to remove
@return {@code false}
"
      end

      operation 9241090 "containsAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code false} unless the given collection is empty.
A {@code SynchronousQueue} has no internal capacity.

@param c the collection
@return {@code false} unless given collection is empty
"
      end

      operation 9241218 "removeAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns {@code false}.
A {@code SynchronousQueue} has no internal capacity.

@param c the collection
@return {@code false}
"
      end

      operation 9241346 "retainAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns {@code false}.
A {@code SynchronousQueue} has no internal capacity.

@param c the collection
@return {@code false}
"
      end

      operation 9241474 "peek"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns {@code null}.
A {@code SynchronousQueue} does not return elements
unless actively waited on.

@return {@code null}
"
      end

      operation 9241602 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an empty iterator in which {@code hasNext} always returns
{@code false}.

@return an empty iterator
"
      end

      operation 9241730 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an empty spliterator in which calls to
{@link java.util.Spliterator#trySplit()} always return {@code null}.

@return an empty spliterator
@since 1.8
"
      end

      operation 9241858 "toArray"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a zero-length array.
@return a zero-length array
"
      end

      operation 9241986 "toArray"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the zeroeth element of the specified array to {@code null}
(if the array has non-zero length) and returns it.

@param a the array
@return the specified array
@throws NullPointerException if the specified array is null
"
      end

      operation 9242114 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}
"
      end

      operation 9242242 "drainTo"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 184194 // Collection
	  param in name "maxElements" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}
"
      end

      class 1126914 "WaitQueue"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3640706 // <realization>
	  relation 3640706 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3640706 // <realization>
	    b parent class_ref 136578 // Serializable
	end
      end

      class 1127042 "LifoWaitQueue"
	visibility package 
	nactuals 1
	actual class class_ref 1126146 // SynchronousQueue
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3640834 // <generalisation>
	  relation 3640834 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3640834 // <generalisation>
	    b parent class_ref 1126914 // WaitQueue
	end

	attribute 2150018 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -3633113410248163686L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 1127170 "FifoWaitQueue"
	visibility package 
	nactuals 1
	actual class class_ref 1126146 // SynchronousQueue
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3640962 // <generalisation>
	  relation 3640962 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3640962 // <generalisation>
	    b parent class_ref 1126914 // WaitQueue
	end

	attribute 2150146 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -3623113410248163686L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 3641090 // qlock (<unidirectional association>)
	relation 3641090 --->
	  a role_name "qlock" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3641090 // qlock (<unidirectional association>)
	  b parent class_ref 968706 // ReentrantLock
      end

      classrelation 3641218 // waitingProducers (<unidirectional association>)
	relation 3641218 --->
	  a role_name "waitingProducers" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3641218 // waitingProducers (<unidirectional association>)
	  b parent class_ref 1126914 // WaitQueue
      end

      classrelation 3641346 // waitingConsumers (<unidirectional association>)
	relation 3641346 --->
	  a role_name "waitingConsumers" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3641346 // waitingConsumers (<unidirectional association>)
	  b parent class_ref 1126914 // WaitQueue
      end

      operation 9242370 "writeObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves this queue to a stream (that is, serializes it).
@param s the stream
@throws java.io.IOException if an I/O error occurs
"
      end

      operation 9242498 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes this queue from a stream (that is, deserializes it).
@param s the stream
@throws ClassNotFoundException if the class of a serialized object
        could not be found
@throws java.io.IOException if an I/O error occurs
"
      end

      operation 9242626 "objectFieldOffset"
	class_operation cpp_inline package explicit_return_type "long"
	nparams 3
	  param inout name "UNSAFE" explicit_type "sun.misc.Unsafe"
	  param inout name "field" type class_ref 128130 // String
	  param inout name "klazz" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Unsafe mechanics"
      end
    end

    class 1127298 "ThreadLocalRandom"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A random number generator isolated to the current thread.  Like the
global {@link java.util.Random} generator used by the {@link
java.lang.Math} class, a {@code ThreadLocalRandom} is initialized
with an internally generated seed that may not otherwise be
modified. When applicable, use of {@code ThreadLocalRandom} rather
than shared {@code Random} objects in concurrent programs will
typically encounter much less overhead and contention.  Use of
{@code ThreadLocalRandom} is particularly appropriate when multiple
tasks (for example, each a {@link ForkJoinTask}) use random numbers
in parallel in thread pools.

<p>Usages of this class should typically be of the form:
{@code ThreadLocalRandom.current().nextX(...)} (where
{@code X} is {@code Int}, {@code Long}, etc).
When all usages are of this form, it is never possible to
accidently share a {@code ThreadLocalRandom} across multiple threads.

<p>This class also provides additional commonly used bounded random
generation methods.

<p>Instances of {@code ThreadLocalRandom} are not cryptographically
secure.  Consider instead using {@link java.security.SecureRandom}
in security-sensitive applications. Additionally,
default-constructed instances do not use a cryptographically random
seed unless the {@linkplain System#getProperty system property}
{@code java.util.secureRandomSeed} is set to {@code true}.

@since 1.7
@author Doug Lea
"
      classrelation 3641474 // <generalisation>
	relation 3641474 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3641474 // <generalisation>
	  b parent class_ref 934914 // Random
      end

      classrelation 3641602 // probeGenerator (<unidirectional association>)
	relation 3641602 --->
	  a role_name "probeGenerator" init_value "
        new AtomicInteger()" class_relation const_relation private
	    comment "
This class implements the java.util.Random API (and subclasses
Random) using a single static instance that accesses random
number state held in class Thread (primarily, field
threadLocalRandomSeed). In doing so, it also provides a home
for managing package-private utilities that rely on exactly the
same state as needed to maintain the ThreadLocalRandom
instances. We leverage the need for an initialization flag
field to also use it as a \"probe\" -- a self-adjusting thread
hash used for contention avoidance, as well as a secondary
simpler (xorShift) random seed that is conservatively used to
avoid otherwise surprising users by hijacking the
ThreadLocalRandom sequence.  The dual use is a marriage of
convenience, but is a simple and efficient way of reducing
application-level overhead and footprint of most concurrent
programs.

Even though this class subclasses java.util.Random, it uses the
same basic algorithm as java.util.SplittableRandom.  (See its
internal documentation for explanations, which are not repeated
here.)  Because ThreadLocalRandoms are not splittable
though, we use only a single 64bit gamma.

Because this class is in a different package than class Thread,
field access methods use Unsafe to bypass access control rules.
To conform to the requirements of the Random superclass
constructor, the common static ThreadLocalRandom maintains an
\"initialized\" field for the sake of rejecting user calls to
setSeed while still allowing a call from constructor.  Note
that serialization is completely unnecessary because there is
only a static singleton.  But we generate a serial form
containing \"rnd\" and \"initialized\" fields to ensure
compatibility across versions.

Implementations of non-core methods are mostly the same as in
SplittableRandom, that were in part derived from a previous
version of this class.

The nextLocalGaussian ThreadLocal supports the very rarely used
nextGaussian method by providing a holder for the second of a
pair of them. As is true for the base class version of this
method, this time/space tradeoff is probably never worthwhile,
but we provide identical statistical properties.

 Generates per-thread initialization/probe field 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3641602 // probeGenerator (<unidirectional association>)
	  b parent class_ref 191490 // AtomicInteger
      end

      classrelation 3641730 // seeder (<unidirectional association>)
	relation 3641730 --->
	  a role_name "seeder" init_value " new AtomicLong(initialSeed())" class_relation const_relation private
	    comment "
The next seed for default constructors.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3641730 // seeder (<unidirectional association>)
	  b parent class_ref 256386 // AtomicLong
      end

      operation 9242754 "initialSeed"
	class_operation private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2150274 "GAMMA"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0x9e3779b97f4a7c15L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The seed increment

"
      end

      attribute 2150402 "PROBE_INCREMENT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x9e3779b9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The increment for generating probe values

"
      end

      attribute 2150530 "SEEDER_INCREMENT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0xbb67ae8584caa73bL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The increment of seeder per new instance

"
      end

      attribute 2150658 "DOUBLE_UNIT"
	class_attribute const_attribute private explicit_type "double"
	init_value " 0x1.0p-53"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constants from SplittableRandom
 1.0  / (1L << 53)"
      end

      attribute 2150786 "FLOAT_UNIT"
	class_attribute const_attribute private explicit_type "float"
	init_value " 0x1.0p-24f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " 1.0f / (1 << 24)"
      end

      classrelation 3641858 // nextLocalGaussian (<unidirectional association>)
	relation 3641858 --->
	  a role_name "nextLocalGaussian" init_value "
        new ThreadLocal<Double>()" class_relation const_relation private
	    comment " Rarely-used holder for the second of a pair of Gaussians 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Double> ${name}${value};
"
	    classrelation_ref 3641858 // nextLocalGaussian (<unidirectional association>)
	  b parent class_ref 129282 // ThreadLocal
      end

      operation 9242882 "mix64"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "z" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9243010 "mix32"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "z" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2150914 "initialized"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Field used only during singleton initialization.
True when constructor completes.

"
      end

      operation 9243138 "ThreadLocalRandom"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructor used only for static singleton "
      end

      classrelation 3641986 // instance (<unidirectional association>)
	relation 3641986 --->
	  a role_name "instance" init_value " new ThreadLocalRandom()" class_relation const_relation package
	    comment " The common ThreadLocalRandom 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3641986 // instance (<unidirectional association>)
	  b parent class_ref 1127298 // ThreadLocalRandom
      end

      operation 9243266 "localInit"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize Thread fields for the current thread.  Called only
when Thread.threadLocalRandomProbe is zero, indicating that a
thread local seed value needs to be generated. Note that even
though the initialization is purely thread-local, we need to
rely on (static) atomic generators to initialize the values.
"
      end

      operation 9243394 "current"
	class_operation public return_type class_ref 1127298 // ThreadLocalRandom
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current thread's {@code ThreadLocalRandom}.

@return the current thread's {@code ThreadLocalRandom}
"
      end

      operation 9243522 "setSeed"
	public explicit_return_type "void"
	nparams 1
	  param in name "seed" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws {@code UnsupportedOperationException}.  Setting seeds in
this generator is not supported.

@throws UnsupportedOperationException always
"
      end

      operation 9243650 "nextSeed"
	package explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9243778 "next"
	protected explicit_return_type "int"
	nparams 1
	  param in name "bits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " We must define this, but never use it."
      end

      classrelation 3642114 // BadBound (<unidirectional association>)
	relation 3642114 --->
	  a role_name "BadBound" init_value " \"bound must be positive\"" class_relation const_relation package
	    comment " IllegalArgumentException messages
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3642114 // BadBound (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3642242 // BadRange (<unidirectional association>)
	relation 3642242 --->
	  a role_name "BadRange" init_value " \"bound must be greater than origin\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3642242 // BadRange (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3642370 // BadSize (<unidirectional association>)
	relation 3642370 --->
	  a role_name "BadSize" init_value " \"size must be non-negative\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3642370 // BadSize (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9243906 "internalNextLong"
	package explicit_return_type "long"
	nparams 2
	  param in name "origin" explicit_type "long"
	  param in name "bound" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The form of nextLong used by LongStream Spliterators.  If
origin is greater than bound, acts as unbounded form of
nextLong, else as bounded form.

@param origin the least value, unless greater than bound
@param bound the upper bound (exclusive), must not equal origin
@return a pseudorandom value
"
      end

      operation 9244034 "internalNextInt"
	package explicit_return_type "int"
	nparams 2
	  param in name "origin" explicit_type "int"
	  param in name "bound" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The form of nextInt used by IntStream Spliterators.
Exactly the same as long version, except for types.

@param origin the least value, unless greater than bound
@param bound the upper bound (exclusive), must not equal origin
@return a pseudorandom value
"
      end

      operation 9244162 "internalNextDouble"
	package explicit_return_type "double"
	nparams 2
	  param in name "origin" explicit_type "double"
	  param in name "bound" explicit_type "double"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The form of nextDouble used by DoubleStream Spliterators.

@param origin the least value, unless greater than bound
@param bound the upper bound (exclusive), must not equal origin
@return a pseudorandom value
"
      end

      operation 9244290 "nextInt"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom {@code int} value.

@return a pseudorandom {@code int} value
"
      end

      operation 9244418 "nextInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "bound" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom {@code int} value between zero (inclusive)
and the specified bound (exclusive).

@param bound the upper bound (exclusive).  Must be positive.
@return a pseudorandom {@code int} value between zero
        (inclusive) and the bound (exclusive)
@throws IllegalArgumentException if {@code bound} is not positive
"
      end

      operation 9244546 "nextInt"
	public explicit_return_type "int"
	nparams 2
	  param in name "origin" explicit_type "int"
	  param in name "bound" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom {@code int} value between the specified
origin (inclusive) and the specified bound (exclusive).

@param origin the least value returned
@param bound the upper bound (exclusive)
@return a pseudorandom {@code int} value between the origin
        (inclusive) and the bound (exclusive)
@throws IllegalArgumentException if {@code origin} is greater than
        or equal to {@code bound}
"
      end

      operation 9244674 "nextLong"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom {@code long} value.

@return a pseudorandom {@code long} value
"
      end

      operation 9244802 "nextLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "bound" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom {@code long} value between zero (inclusive)
and the specified bound (exclusive).

@param bound the upper bound (exclusive).  Must be positive.
@return a pseudorandom {@code long} value between zero
        (inclusive) and the bound (exclusive)
@throws IllegalArgumentException if {@code bound} is not positive
"
      end

      operation 9244930 "nextLong"
	public explicit_return_type "long"
	nparams 2
	  param in name "origin" explicit_type "long"
	  param in name "bound" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom {@code long} value between the specified
origin (inclusive) and the specified bound (exclusive).

@param origin the least value returned
@param bound the upper bound (exclusive)
@return a pseudorandom {@code long} value between the origin
        (inclusive) and the bound (exclusive)
@throws IllegalArgumentException if {@code origin} is greater than
        or equal to {@code bound}
"
      end

      operation 9245058 "nextDouble"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom {@code double} value between zero
(inclusive) and one (exclusive).

@return a pseudorandom {@code double} value between zero
        (inclusive) and one (exclusive)
"
      end

      operation 9245186 "nextDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "bound" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom {@code double} value between 0.0
(inclusive) and the specified bound (exclusive).

@param bound the upper bound (exclusive).  Must be positive.
@return a pseudorandom {@code double} value between zero
        (inclusive) and the bound (exclusive)
@throws IllegalArgumentException if {@code bound} is not positive
"
      end

      operation 9245314 "nextDouble"
	public explicit_return_type "double"
	nparams 2
	  param in name "origin" explicit_type "double"
	  param in name "bound" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom {@code double} value between the specified
origin (inclusive) and bound (exclusive).

@param origin the least value returned
@param bound the upper bound (exclusive)
@return a pseudorandom {@code double} value between the origin
        (inclusive) and the bound (exclusive)
@throws IllegalArgumentException if {@code origin} is greater than
        or equal to {@code bound}
"
      end

      operation 9245442 "nextBoolean"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom {@code boolean} value.

@return a pseudorandom {@code boolean} value
"
      end

      operation 9245570 "nextFloat"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom {@code float} value between zero
(inclusive) and one (exclusive).

@return a pseudorandom {@code float} value between zero
        (inclusive) and one (exclusive)
"
      end

      operation 9245698 "nextGaussian"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9245826 "ints"
	public return_type class_ref 429570 // IntStream
	nparams 1
	  param in name "streamSize" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " stream methods, coded in a way intended to better isolate for
 maintenance purposes the small differences across forms.

Returns a stream producing the given {@code streamSize} number of
pseudorandom {@code int} values.

@param streamSize the number of values to generate
@return a stream of pseudorandom {@code int} values
@throws IllegalArgumentException if {@code streamSize} is
        less than zero
@since 1.8
"
      end

      operation 9245954 "ints"
	public return_type class_ref 429570 // IntStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an effectively unlimited stream of pseudorandom {@code int}
values.

@implNote This method is implemented to be equivalent to {@code
ints(Long.MAX_VALUE)}.

@return a stream of pseudorandom {@code int} values
@since 1.8
"
      end

      operation 9246082 "ints"
	public return_type class_ref 429570 // IntStream
	nparams 3
	  param in name "streamSize" explicit_type "long"
	  param in name "randomNumberOrigin" explicit_type "int"
	  param in name "randomNumberBound" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream producing the given {@code streamSize} number
of pseudorandom {@code int} values, each conforming to the given
origin (inclusive) and bound (exclusive).

@param streamSize the number of values to generate
@param randomNumberOrigin the origin (inclusive) of each random value
@param randomNumberBound the bound (exclusive) of each random value
@return a stream of pseudorandom {@code int} values,
        each with the given origin (inclusive) and bound (exclusive)
@throws IllegalArgumentException if {@code streamSize} is
        less than zero, or {@code randomNumberOrigin}
        is greater than or equal to {@code randomNumberBound}
@since 1.8
"
      end

      operation 9246210 "ints"
	public return_type class_ref 429570 // IntStream
	nparams 2
	  param in name "randomNumberOrigin" explicit_type "int"
	  param in name "randomNumberBound" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an effectively unlimited stream of pseudorandom {@code
int} values, each conforming to the given origin (inclusive) and bound
(exclusive).

@implNote This method is implemented to be equivalent to {@code
ints(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.

@param randomNumberOrigin the origin (inclusive) of each random value
@param randomNumberBound the bound (exclusive) of each random value
@return a stream of pseudorandom {@code int} values,
        each with the given origin (inclusive) and bound (exclusive)
@throws IllegalArgumentException if {@code randomNumberOrigin}
        is greater than or equal to {@code randomNumberBound}
@since 1.8
"
      end

      operation 9246338 "longs"
	public return_type class_ref 1023490 // LongStream
	nparams 1
	  param in name "streamSize" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream producing the given {@code streamSize} number of
pseudorandom {@code long} values.

@param streamSize the number of values to generate
@return a stream of pseudorandom {@code long} values
@throws IllegalArgumentException if {@code streamSize} is
        less than zero
@since 1.8
"
      end

      operation 9246466 "longs"
	public return_type class_ref 1023490 // LongStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an effectively unlimited stream of pseudorandom {@code long}
values.

@implNote This method is implemented to be equivalent to {@code
longs(Long.MAX_VALUE)}.

@return a stream of pseudorandom {@code long} values
@since 1.8
"
      end

      operation 9246594 "longs"
	public return_type class_ref 1023490 // LongStream
	nparams 3
	  param in name "streamSize" explicit_type "long"
	  param in name "randomNumberOrigin" explicit_type "long"
	  param in name "randomNumberBound" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream producing the given {@code streamSize} number of
pseudorandom {@code long}, each conforming to the given origin
(inclusive) and bound (exclusive).

@param streamSize the number of values to generate
@param randomNumberOrigin the origin (inclusive) of each random value
@param randomNumberBound the bound (exclusive) of each random value
@return a stream of pseudorandom {@code long} values,
        each with the given origin (inclusive) and bound (exclusive)
@throws IllegalArgumentException if {@code streamSize} is
        less than zero, or {@code randomNumberOrigin}
        is greater than or equal to {@code randomNumberBound}
@since 1.8
"
      end

      operation 9246722 "longs"
	public return_type class_ref 1023490 // LongStream
	nparams 2
	  param in name "randomNumberOrigin" explicit_type "long"
	  param in name "randomNumberBound" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an effectively unlimited stream of pseudorandom {@code
long} values, each conforming to the given origin (inclusive) and bound
(exclusive).

@implNote This method is implemented to be equivalent to {@code
longs(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.

@param randomNumberOrigin the origin (inclusive) of each random value
@param randomNumberBound the bound (exclusive) of each random value
@return a stream of pseudorandom {@code long} values,
        each with the given origin (inclusive) and bound (exclusive)
@throws IllegalArgumentException if {@code randomNumberOrigin}
        is greater than or equal to {@code randomNumberBound}
@since 1.8
"
      end

      operation 9246850 "doubles"
	public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param in name "streamSize" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream producing the given {@code streamSize} number of
pseudorandom {@code double} values, each between zero
(inclusive) and one (exclusive).

@param streamSize the number of values to generate
@return a stream of {@code double} values
@throws IllegalArgumentException if {@code streamSize} is
        less than zero
@since 1.8
"
      end

      operation 9246978 "doubles"
	public return_type class_ref 1023618 // DoubleStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an effectively unlimited stream of pseudorandom {@code
double} values, each between zero (inclusive) and one
(exclusive).

@implNote This method is implemented to be equivalent to {@code
doubles(Long.MAX_VALUE)}.

@return a stream of pseudorandom {@code double} values
@since 1.8
"
      end

      operation 9247106 "doubles"
	public return_type class_ref 1023618 // DoubleStream
	nparams 3
	  param in name "streamSize" explicit_type "long"
	  param in name "randomNumberOrigin" explicit_type "double"
	  param in name "randomNumberBound" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream producing the given {@code streamSize} number of
pseudorandom {@code double} values, each conforming to the given origin
(inclusive) and bound (exclusive).

@param streamSize the number of values to generate
@param randomNumberOrigin the origin (inclusive) of each random value
@param randomNumberBound the bound (exclusive) of each random value
@return a stream of pseudorandom {@code double} values,
        each with the given origin (inclusive) and bound (exclusive)
@throws IllegalArgumentException if {@code streamSize} is
        less than zero
@throws IllegalArgumentException if {@code randomNumberOrigin}
        is greater than or equal to {@code randomNumberBound}
@since 1.8
"
      end

      operation 9247234 "doubles"
	public return_type class_ref 1023618 // DoubleStream
	nparams 2
	  param in name "randomNumberOrigin" explicit_type "double"
	  param in name "randomNumberBound" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an effectively unlimited stream of pseudorandom {@code
double} values, each conforming to the given origin (inclusive) and bound
(exclusive).

@implNote This method is implemented to be equivalent to {@code
doubles(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.

@param randomNumberOrigin the origin (inclusive) of each random value
@param randomNumberBound the bound (exclusive) of each random value
@return a stream of pseudorandom {@code double} values,
        each with the given origin (inclusive) and bound (exclusive)
@throws IllegalArgumentException if {@code randomNumberOrigin}
        is greater than or equal to {@code randomNumberBound}
@since 1.8
"
      end
    end
  end

  package_ref 137602 // atomic

  package_ref 157058 // locks

  deploymentview 146306 "concurrent"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 330114 "Executor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 503426 // Executor
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 613762 "Callable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 339330 // Callable
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 792962 "Future"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 984706 // Future
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 793090 "RunnableFuture"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1066114 // RunnableFuture
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 793218 "ForkJoinTask"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import java.util.RandomAccess;
import java.lang.ref.WeakReference;
import java.lang.ref.ReferenceQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.RunnableFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.ReentrantLock;
import java.lang.reflect.Constructor;
${definition}"
      associated_elems
	class_ref 1065346 // ForkJoinTask
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 793346 "CountedCompleter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1065218 // CountedCompleter
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 803842 "ExecutorService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import java.util.Collection;
${definition}"
      associated_elems
	class_ref 985218 // ExecutorService
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 803970 "AbstractExecutorService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 1099266 // AbstractExecutorService
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 804098 "BlockingQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import java.util.Queue;
${definition}"
      associated_elems
	class_ref 1099522 // BlockingQueue
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 804226 "ArrayBlockingQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.AbstractQueue;
import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.lang.ref.WeakReference;
import java.util.Spliterators;
import java.util.Spliterator;
${definition}"
      associated_elems
	class_ref 1099394 // ArrayBlockingQueue
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 804354 "BlockingDeque"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 1100034 // BlockingDeque
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 804482 "BrokenBarrierException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1100162 // BrokenBarrierException
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 804610 "CancellationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1100290 // CancellationException
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 804738 "CompletionStage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.function.Supplier;
import java.util.function.Consumer;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.function.BiFunction;
import java.util.concurrent.Executor;
${definition}"
      associated_elems
	class_ref 1100546 // CompletionStage
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 804866 "ForkJoinPool"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.Thread.UncaughtExceptionHandler;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.AbstractExecutorService;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.RunnableFuture;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.security.AccessControlContext;
import java.security.ProtectionDomain;
import java.security.Permissions;
${definition}"
      associated_elems
	class_ref 1065858 // ForkJoinPool
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 804994 "CompletableFuture"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.function.Supplier;
import java.util.function.Consumer;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.function.BiFunction;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Executor;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.CancellationException;
import java.util.concurrent.CompletionException;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.locks.LockSupport;
${definition}"
      associated_elems
	class_ref 1100418 // CompletableFuture
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 805122 "CompletionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1104898 // CompletionException
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 805250 "CompletionService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1105026 // CompletionService
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 805378 "ConcurrentMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
${definition}"
      associated_elems
	class_ref 130690 // ConcurrentMap
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 806146 "ConcurrentHashMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectStreamField;
import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.Spliterator;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.ReentrantLock;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.DoubleBinaryOperator;
import java.util.function.Function;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.ToDoubleBiFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntBiFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToLongFunction;
import java.util.stream.Stream;
${definition}"
      associated_elems
	class_ref 319362 // ConcurrentHashMap
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 806274 "ConcurrentLinkedDeque"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.AbstractCollection;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Deque;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Queue;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 1113218 // ConcurrentLinkedDeque
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea and Martin Buchholz with assistance from members of
JCP JSR-166 Expert Group and released to the public domain, as explained
at http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 806402 "ConcurrentLinkedQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.AbstractQueue;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Queue;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 1113986 // ConcurrentLinkedQueue
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea and Martin Buchholz with assistance from members of
JCP JSR-166 Expert Group and released to the public domain, as explained
at http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 806530 "ConcurrentNavigableMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 1114498 // ConcurrentNavigableMap
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 806658 "ConcurrentSkipListMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.AbstractCollection;
import java.util.AbstractMap;
import java.util.AbstractSet;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.NavigableMap;
import java.util.NavigableSet;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentNavigableMap;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.BiConsumer;
import java.util.function.Function;
${definition}"
      associated_elems
	class_ref 1114626 // ConcurrentSkipListMap
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 806786 "ConcurrentSkipListSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.AbstractSet;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Map;
import java.util.NavigableMap;
import java.util.NavigableSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
${definition}"
      associated_elems
	class_ref 1117186 // ConcurrentSkipListSet
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 806914 "CopyOnWriteArrayList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.AbstractList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.RandomAccess;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.concurrent.locks.ReentrantLock;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
${definition}"
      associated_elems
	class_ref 589058 // CopyOnWriteArrayList
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group.  Adapted and released, under explicit permission,
from JDK ArrayList.java which carries the following copyright:

Copyright 1997 by Sun Microsystems, Inc.,
901 San Antonio Road, Palo Alto, California, 94303, U.S.A.
All rights reserved.
"
    end

    artifact 807042 "CopyOnWriteArraySet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import java.util.Set;
import java.util.AbstractSet;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.Predicate;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 1117698 // CopyOnWriteArraySet
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 807170 "CountDownLatch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
${definition}"
      associated_elems
	class_ref 1117826 // CountDownLatch
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 807298 "CyclicBarrier"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
${definition}"
      associated_elems
	class_ref 1118082 // CyclicBarrier
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 807426 "Delayed"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1118338 // Delayed
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 807554 "DelayQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.*;
import static java.util.concurrent.TimeUnit.NANOSECONDS;
${definition}"
      associated_elems
	class_ref 1118466 // DelayQueue
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 807682 "Exchanger"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.LockSupport;
${definition}"
      associated_elems
	class_ref 1118722 // Exchanger
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea, Bill Scherer, and Michael Scott with
assistance from members of JCP JSR-166 Expert Group and released to
the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 807810 "ExecutionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1065474 // ExecutionException
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 807938 "FutureTask"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.LockSupport;
${definition}"
      associated_elems
	class_ref 1119362 // FutureTask
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 808066 "ExecutorCompletionService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1119106 // ExecutorCompletionService
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 808194 "ThreadFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 985090 // ThreadFactory
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 808322 "ScheduledExecutorService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1119746 // ScheduledExecutorService
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 808450 "Executors"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.security.AccessControlContext;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.security.PrivilegedExceptionAction;
import java.security.PrivilegedActionException;
import java.security.AccessControlException;
import sun.security.util.SecurityConstants;
${definition}"
      associated_elems
	class_ref 1119618 // Executors
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 808578 "ForkJoinWorkerThread"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessControlContext;
import java.security.ProtectionDomain;
${definition}"
      associated_elems
	class_ref 1104258 // ForkJoinWorkerThread
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 808706 "LinkedBlockingDeque"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.AbstractQueue;
import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 1121154 // LinkedBlockingDeque
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 808834 "LinkedBlockingQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.AbstractQueue;
import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 1121922 // LinkedBlockingQueue
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 808962 "TransferQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1122562 // TransferQueue
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 809090 "LinkedTransferQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.AbstractQueue;
import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Queue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.LockSupport;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 1122434 // LinkedTransferQueue
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 809218 "Phaser"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.LockSupport;
${definition}"
      associated_elems
	class_ref 1123074 // Phaser
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 809346 "PriorityBlockingQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.AbstractQueue;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 1123330 // PriorityBlockingQueue
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 809474 "RecursiveAction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1123714 // RecursiveAction
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 809602 "RecursiveTask"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1123842 // RecursiveTask
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 809730 "RejectedExecutionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1123970 // RejectedExecutionException
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 809858 "RejectedExecutionHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1124098 // RejectedExecutionHandler
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 809986 "ScheduledFuture"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1120898 // ScheduledFuture
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 810114 "RunnableScheduledFuture"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1124354 // RunnableScheduledFuture
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 810242 "ThreadPoolExecutor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessControlContext;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.*;
${definition}"
      associated_elems
	class_ref 1124226 // ThreadPoolExecutor
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 810370 "ScheduledThreadPoolExecutor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.*;
${definition}"
      associated_elems
	class_ref 1124482 // ScheduledThreadPoolExecutor
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 810498 "Semaphore"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
${definition}"
      associated_elems
	class_ref 1125634 // Semaphore
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 810626 "SynchronousQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.ReentrantLock;
import java.util.*;
import java.util.Spliterator;
import java.util.Spliterators;
${definition}"
      associated_elems
	class_ref 1126146 // SynchronousQueue
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea, Bill Scherer, and Michael Scott with
assistance from members of JCP JSR-166 Expert Group and released to
the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 810754 "TimeoutException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1065602 // TimeoutException
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 810882 "TimeUnit"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 935938 // TimeUnit
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end
  end
end
