class SocketImpl
!!!7432578.java!!!	shutdownInput() : void
      throw new IOException("Method not implemented!");
!!!7432706.java!!!	shutdownOutput() : void
      throw new IOException("Method not implemented!");
!!!7432834.java!!!	getFileDescriptor() : FileDescriptor
        return fd;
!!!7432962.java!!!	getInetAddress() : InetAddress
        return address;
!!!7433090.java!!!	getPort() : int
        return port;
!!!7433218.java!!!	supportsUrgentData() : boolean
        return false; // must be overridden in sub-class
!!!7433474.java!!!	getLocalPort() : int
        return localport;
!!!7433602.java!!!	setSocket(inout soc : Socket) : void
        this.socket = soc;
!!!7433730.java!!!	getSocket() : Socket
        return socket;
!!!7433858.java!!!	setServerSocket(inout soc : ServerSocket) : void
        this.serverSocket = soc;
!!!7433986.java!!!	getServerSocket() : ServerSocket
        return serverSocket;
!!!7434114.java!!!	toString() : String
        return "Socket[addr=" + getInetAddress() +
            ",port=" + getPort() + ",localport=" + getLocalPort()  + "]";
!!!7434242.java!!!	reset() : void
        address = null;
        port = 0;
        localport = 0;
!!!7434370.java!!!	setPerformancePreferences(in connectionTime : int, in latency : int, in bandwidth : int) : void
        /* Not implemented yet */
!!!7434498.java!!!	setOption(inout name : SocketOption, inout value : T) : void
        if (name == StandardSocketOptions.SO_KEEPALIVE) {
            setOption(SocketOptions.SO_KEEPALIVE, value);
        } else if (name == StandardSocketOptions.SO_SNDBUF) {
            setOption(SocketOptions.SO_SNDBUF, value);
        } else if (name == StandardSocketOptions.SO_RCVBUF) {
            setOption(SocketOptions.SO_RCVBUF, value);
        } else if (name == StandardSocketOptions.SO_REUSEADDR) {
            setOption(SocketOptions.SO_REUSEADDR, value);
        } else if (name == StandardSocketOptions.SO_LINGER) {
            setOption(SocketOptions.SO_LINGER, value);
        } else if (name == StandardSocketOptions.IP_TOS) {
            setOption(SocketOptions.IP_TOS, value);
        } else if (name == StandardSocketOptions.TCP_NODELAY) {
            setOption(SocketOptions.TCP_NODELAY, value);
        } else {
            throw new UnsupportedOperationException("unsupported option");
        }
!!!7434626.java!!!	getOption(inout name : SocketOption) : T
        if (name == StandardSocketOptions.SO_KEEPALIVE) {
            return (T)getOption(SocketOptions.SO_KEEPALIVE);
        } else if (name == StandardSocketOptions.SO_SNDBUF) {
            return (T)getOption(SocketOptions.SO_SNDBUF);
        } else if (name == StandardSocketOptions.SO_RCVBUF) {
            return (T)getOption(SocketOptions.SO_RCVBUF);
        } else if (name == StandardSocketOptions.SO_REUSEADDR) {
            return (T)getOption(SocketOptions.SO_REUSEADDR);
        } else if (name == StandardSocketOptions.SO_LINGER) {
            return (T)getOption(SocketOptions.SO_LINGER);
        } else if (name == StandardSocketOptions.IP_TOS) {
            return (T)getOption(SocketOptions.IP_TOS);
        } else if (name == StandardSocketOptions.TCP_NODELAY) {
            return (T)getOption(SocketOptions.TCP_NODELAY);
        } else {
            throw new UnsupportedOperationException("unsupported option");
        }
