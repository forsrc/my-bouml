class DragGestureEvent
!!!6409346.java!!!	DragGestureEvent(inout dgr : DragGestureRecognizer, in act : int, inout ori : Point, inout evs : List)
        super(dgr);

        if ((component = dgr.getComponent()) == null)
            throw new IllegalArgumentException("null component");
        if ((dragSource = dgr.getDragSource()) == null)
            throw new IllegalArgumentException("null DragSource");

        if (evs == null || evs.isEmpty())
            throw new IllegalArgumentException("null or empty list of events");

        if (act != DnDConstants.ACTION_COPY &&
            act != DnDConstants.ACTION_MOVE &&
            act != DnDConstants.ACTION_LINK)
            throw new IllegalArgumentException("bad action");

        if (ori == null) throw new IllegalArgumentException("null origin");

        events     = evs;
        action     = act;
        origin     = ori;
!!!6409474.java!!!	getSourceAsDragGestureRecognizer() : DragGestureRecognizer
        return (DragGestureRecognizer)getSource();
!!!6409602.java!!!	getComponent() : Component
 return component;
!!!6409730.java!!!	getDragSource() : DragSource
 return dragSource;
!!!6409858.java!!!	getDragOrigin() : Point
        return origin;
!!!6409986.java!!!	iterator() : Iterator
 return events.iterator();
!!!6410114.java!!!	toArray() : Object
 return events.toArray();
!!!6410242.java!!!	toArray(inout array : Object [[]]) : Object
 return events.toArray(array);
!!!6410370.java!!!	getDragAction() : int
 return action;
!!!6410498.java!!!	getTriggerEvent() : InputEvent
        return getSourceAsDragGestureRecognizer().getTriggerEvent();
!!!6410626.java!!!	startDrag(inout dragCursor : Cursor, inout transferable : Transferable) : void
        dragSource.startDrag(this, dragCursor, transferable, null);
!!!6410754.java!!!	startDrag(inout dragCursor : Cursor, inout transferable : Transferable, inout dsl : DragSourceListener) : void
        dragSource.startDrag(this, dragCursor, transferable, dsl);
!!!6410882.java!!!	startDrag(inout dragCursor : Cursor, inout dragImage : Image, inout imageOffset : Point, inout transferable : Transferable, inout dsl : DragSourceListener) : void
        dragSource.startDrag(this,  dragCursor, dragImage, imageOffset, transferable, dsl);
!!!6411010.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();

        s.writeObject(SerializationTester.test(events) ? events : null);
!!!6411138.java!!!	readObject(inout s : ObjectInputStream) : void
        ObjectInputStream.GetField f = s.readFields();

        DragSource newDragSource = (DragSource)f.get("dragSource", null);
        if (newDragSource == null) {
            throw new InvalidObjectException("null DragSource");
        }
        dragSource = newDragSource;

        Component newComponent = (Component)f.get("component", null);
        if (newComponent == null) {
            throw new InvalidObjectException("null component");
        }
        component = newComponent;

        Point newOrigin = (Point)f.get("origin", null);
        if (newOrigin == null) {
            throw new InvalidObjectException("null origin");
        }
        origin = newOrigin;

        int newAction = f.get("action", 0);
        if (newAction != DnDConstants.ACTION_COPY &&
                newAction != DnDConstants.ACTION_MOVE &&
                newAction != DnDConstants.ACTION_LINK) {
            throw new InvalidObjectException("bad action");
        }
        action = newAction;

        // Pre-1.4 support. 'events' was previously non-transient
        List newEvents;
        try {
            newEvents = (List)f.get("events", null);
        } catch (IllegalArgumentException e) {
            // 1.4-compatible byte stream. 'events' was written explicitly
            newEvents = (List)s.readObject();
        }

        // Implementation assumes 'events' is never null.
        if (newEvents != null && newEvents.isEmpty()) {
            // Constructor treats empty events list as invalid value
            // Throw exception if serialized list is empty
            throw new InvalidObjectException("empty list of events");
        } else if (newEvents == null) {
            newEvents = Collections.emptyList();
        }
        events = newEvents;
