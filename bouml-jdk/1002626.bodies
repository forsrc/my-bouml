class Builder
!!!7858050.java!!!	Builder(inout type : AclEntryType, inout who : UserPrincipal, inout perms : Set, inout flags : Set)
            assert perms != null && flags != null;
            this.type = type;
            this.who = who;
            this.perms = perms;
            this.flags = flags;
!!!7858178.java!!!	build() : AclEntry
            if (type == null)
                throw new IllegalStateException("Missing type component");
            if (who == null)
                throw new IllegalStateException("Missing who component");
            return new AclEntry(type, who, perms, flags);
!!!7858306.java!!!	setType(inout type : AclEntryType) : AclEntry::Builder
            if (type == null)
                throw new NullPointerException();
            this.type = type;
            return this;
!!!7858434.java!!!	setPrincipal(inout who : UserPrincipal) : AclEntry::Builder
            if (who == null)
                throw new NullPointerException();
            this.who = who;
            return this;
!!!7858562.java!!!	checkSet(inout set : Set, inout type : Class) : void
            for (Object e: set) {
                if (e == null)
                    throw new NullPointerException();
                type.cast(e);
            }
!!!7858690.java!!!	setPermissions(inout perms : Set) : AclEntry::Builder
            if (perms.isEmpty()) {
                // EnumSet.copyOf does not allow empty set
                perms = Collections.emptySet();
            } else {
                // copy and check for erroneous elements
                perms = EnumSet.copyOf(perms);
                checkSet(perms, AclEntryPermission.class);
            }

            this.perms = perms;
            return this;
!!!7858818.java!!!	setPermissions(inout  : AclEntryPermission...perms) : AclEntry::Builder
            Set<AclEntryPermission> set = EnumSet.noneOf(AclEntryPermission.class);
            // copy and check for null elements
            for (AclEntryPermission p: perms) {
                if (p == null)
                    throw new NullPointerException();
                set.add(p);
            }
            this.perms = set;
            return this;
!!!7858946.java!!!	setFlags(inout flags : Set) : AclEntry::Builder
            if (flags.isEmpty()) {
                // EnumSet.copyOf does not allow empty set
                flags = Collections.emptySet();
            } else {
                // copy and check for erroneous elements
                flags = EnumSet.copyOf(flags);
                checkSet(flags, AclEntryFlag.class);
            }

            this.flags = flags;
            return this;
!!!7859074.java!!!	setFlags(inout  : AclEntryFlag...flags) : AclEntry::Builder
            Set<AclEntryFlag> set = EnumSet.noneOf(AclEntryFlag.class);
            // copy and check for null elements
            for (AclEntryFlag f: flags) {
                if (f == null)
                    throw new NullPointerException();
                set.add(f);
            }
            this.flags = set;
            return this;
