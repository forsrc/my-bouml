class NameValuePairHelper
!!!12224898.java!!!	insert(inout a : Any, inout that : NameValuePair) : void
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
!!!12225026.java!!!	extract(inout a : Any) : NameValuePair
    return read (a.create_input_stream ());
!!!12225154.java!!!	type() : TypeCode
    if (__typeCode == null)
    {
      synchronized (org.omg.CORBA.TypeCode.class)
      {
        if (__typeCode == null)
        {
          if (__active)
          {
            return org.omg.CORBA.ORB.init().create_recursive_tc ( _id );
          }
          __active = true;
          org.omg.CORBA.StructMember[] _members0 = new org.omg.CORBA.StructMember [2];
          org.omg.CORBA.TypeCode _tcOf_members0 = null;
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_string_tc (0);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_alias_tc (org.omg.CORBA.FieldNameHelper.id (), "FieldName", _tcOf_members0);
          _members0[0] = new org.omg.CORBA.StructMember (
            "id",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_any);
          _members0[1] = new org.omg.CORBA.StructMember (
            "value",
            _tcOf_members0,
            null);
          __typeCode = org.omg.CORBA.ORB.init ().create_struct_tc (org.omg.CORBA.NameValuePairHelper.id (), "NameValuePair", _members0);
          __active = false;
        }
      }
    }
    return __typeCode;
!!!12225282.java!!!	id() : String
    return _id;
!!!12225410.java!!!	read(inout istream : InputStream) : NameValuePair
    org.omg.CORBA.NameValuePair value = new org.omg.CORBA.NameValuePair ();
    value.id = istream.read_string ();
    value.value = istream.read_any ();
    return value;
!!!12225538.java!!!	write(inout ostream : OutputStream, inout value : NameValuePair) : void
    ostream.write_string (value.id);
    ostream.write_any (value.value);
