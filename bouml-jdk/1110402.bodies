class SearchValuesTask
!!!9080322.java!!!	SearchValuesTask(inout p : ConcurrentHashMap::BulkTask, in b : int, in i : int, in f : int, inout t : ConcurrentHashMap::Node [[]], inout searchFunction : Function, inout result : AtomicReference)
            super(p, b, i, f, t);
            this.searchFunction = searchFunction; this.result = result;
!!!9080450.java!!!	getRawResult() : U
 return result.get();
!!!9080578.java!!!	compute() : void
            final Function<? super V, ? extends U> searchFunction;
            final AtomicReference<U> result;
            if ((searchFunction = this.searchFunction) != null &&
                (result = this.result) != null) {
                for (int i = baseIndex, f, h; batch > 0 &&
                         (h = ((f = baseLimit) + i) >>> 1) > i;) {
                    if (result.get() != null)
                        return;
                    addToPendingCount(1);
                    new SearchValuesTask<K,V,U>
                        (this, batch >>>= 1, baseLimit = h, f, tab,
                         searchFunction, result).fork();
                }
                while (result.get() == null) {
                    U u;
                    Node<K,V> p;
                    if ((p = advance()) == null) {
                        propagateCompletion();
                        break;
                    }
                    if ((u = searchFunction.apply(p.val)) != null) {
                        if (result.compareAndSet(null, u))
                            quietlyCompleteRoot();
                        break;
                    }
                }
            }
