class SnmpIndex
!!!3141890.java!!!	SnmpIndex(inout oidList : SnmpOid [[]])
        size= oidList.length;
        for(int i= 0; i <size; i++) {
            // The order is important ...
            //
            oids.addElement(oidList[i]);
        }
!!!3142018.java!!!	SnmpIndex(inout oid : SnmpOid)
        oids.addElement(oid);
        size= 1;
!!!3142146.java!!!	getNbComponents() : int
        return size;
!!!3142274.java!!!	getComponents() : Vector
        return oids;
!!!3142402.java!!!	equals(inout index : SnmpIndex) : boolean

        if (size != index.getNbComponents())
            return false;

        // The two vectors have the same length.
        // Compare each single element ...
        //
        SnmpOid oid1;
        SnmpOid oid2;
        Vector<SnmpOid> components= index.getComponents();
        for(int i=0; i <size; i++) {
            oid1= oids.elementAt(i);
            oid2= components.elementAt(i);
            if (oid1.equals(oid2) == false)
                return false;
        }
        return true;
!!!3142530.java!!!	compareTo(inout index : SnmpIndex) : int

        int length= index.getNbComponents();
        Vector<SnmpOid> components= index.getComponents();
        SnmpOid oid1;
        SnmpOid oid2;
        int comp;
        for(int i=0; i < size; i++) {
            if ( i > length) {
                // There is no more element in the index
                //
                return 1;
            }
            // Access the element ...
            //
            oid1= oids.elementAt(i);
            oid2= components.elementAt(i);
            comp= oid1.compareTo(oid2);
            if (comp == 0)
                continue;
            return comp;
        }
        return 0;
!!!3142658.java!!!	toString() : String
        final StringBuilder msg= new StringBuilder();
        for(Enumeration<SnmpOid> e= oids.elements(); e.hasMoreElements(); ) {
            SnmpOid val= e.nextElement();
            msg.append("//").append( val.toString());
        }
        return msg.toString();
