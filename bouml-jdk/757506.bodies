class XMLSignatureInput
!!!5452418.java!!!	XMLSignatureInput(inout inputOctets : byte [[]])
        // NO defensive copy
        this.bytes = inputOctets;
!!!5452546.java!!!	XMLSignatureInput(inout inputOctetStream : InputStream)
        this.inputOctetStreamProxy = inputOctetStream;
!!!5452674.java!!!	XMLSignatureInput(inout rootNode : Node)
        this.subNode = rootNode;
!!!5452802.java!!!	XMLSignatureInput(inout inputNodeSet : Set)
        this.inputNodeSet = inputNodeSet;
!!!5452930.java!!!	isNeedsToBeExpanded() : boolean
        return needsToBeExpanded;
!!!5453058.java!!!	setNeedsToBeExpanded(inout needsToBeExpanded : boolean) : void
        this.needsToBeExpanded = needsToBeExpanded;
!!!5453186.java!!!	getNodeSet() : Set
        return getNodeSet(false);
!!!5453314.java!!!	getInputNodeSet() : Set
        return inputNodeSet;
!!!5453442.java!!!	getNodeSet(inout circumvent : boolean) : Set
        if (inputNodeSet != null) {
            return inputNodeSet;
        }
        if (inputOctetStreamProxy == null && subNode != null) {
            if (circumvent) {
                XMLUtils.circumventBug2650(XMLUtils.getOwnerDocument(subNode));
            }
            inputNodeSet = new LinkedHashSet<Node>();
            XMLUtils.getSet(subNode, inputNodeSet, excludeNode, excludeComments);
            return inputNodeSet;
        } else if (isOctetStream()) {
            convertToNodes();
            Set<Node> result = new LinkedHashSet<Node>();
            XMLUtils.getSet(subNode, result, null, false);
            return result;
        }

        throw new RuntimeException("getNodeSet() called but no input data present");
!!!5453570.java!!!	getOctetStream() : InputStream
        if (inputOctetStreamProxy != null) {
            return inputOctetStreamProxy;
        }

        if (bytes != null) {
            inputOctetStreamProxy = new ByteArrayInputStream(bytes);
            return inputOctetStreamProxy;
        }

        return null;
!!!5453698.java!!!	getOctetStreamReal() : InputStream
        return inputOctetStreamProxy;
!!!5453826.java!!!	getBytes() : byte
        byte[] inputBytes = getBytesFromInputStream();
        if (inputBytes != null) {
            return inputBytes;
        }
        Canonicalizer20010315OmitComments c14nizer = new Canonicalizer20010315OmitComments();
        bytes = c14nizer.engineCanonicalize(this);
        return bytes;
!!!5453954.java!!!	isNodeSet() : boolean
        return ((inputOctetStreamProxy == null
            && inputNodeSet != null) || isNodeSet);
!!!5454082.java!!!	isElement() : boolean
        return (inputOctetStreamProxy == null && subNode != null
            && inputNodeSet == null && !isNodeSet);
!!!5454210.java!!!	isOctetStream() : boolean
        return ((inputOctetStreamProxy != null || bytes != null)
          && (inputNodeSet == null && subNode == null));
!!!5454338.java!!!	isOutputStreamSet() : boolean
        return outputStream != null;
!!!5454466.java!!!	isByteArray() : boolean
        return (bytes != null && (this.inputNodeSet == null && subNode == null));
!!!5454594.java!!!	isInitialized() : boolean
        return isOctetStream() || isNodeSet();
!!!5454722.java!!!	getMIMEType() : String
        return mimeType;
!!!5454850.java!!!	setMIMEType(inout mimeType : String) : void
        this.mimeType = mimeType;
!!!5454978.java!!!	getSourceURI() : String
        return sourceURI;
!!!5455106.java!!!	setSourceURI(inout sourceURI : String) : void
        this.sourceURI = sourceURI;
!!!5455234.java!!!	toString() : String
        if (isNodeSet()) {
            return "XMLSignatureInput/NodeSet/" + inputNodeSet.size()
                   + " nodes/" + getSourceURI();
        }
        if (isElement()) {
            return "XMLSignatureInput/Element/" + subNode
                + " exclude "+ excludeNode + " comments:"
                + excludeComments +"/" + getSourceURI();
        }
        try {
            return "XMLSignatureInput/OctetStream/" + getBytes().length
                   + " octets/" + getSourceURI();
        } catch (IOException iex) {
            return "XMLSignatureInput/OctetStream//" + getSourceURI();
        } catch (CanonicalizationException cex) {
            return "XMLSignatureInput/OctetStream//" + getSourceURI();
        }
!!!5455362.java!!!	getHTMLRepresentation() : String
        XMLSignatureInputDebugger db = new XMLSignatureInputDebugger(this);
        return db.getHTMLRepresentation();
!!!5455490.java!!!	getHTMLRepresentation(inout inclusiveNamespaces : Set) : String
        XMLSignatureInputDebugger db =
            new XMLSignatureInputDebugger(this, inclusiveNamespaces);
        return db.getHTMLRepresentation();
!!!5455618.java!!!	getExcludeNode() : Node
        return excludeNode;
!!!5455746.java!!!	setExcludeNode(inout excludeNode : Node) : void
        this.excludeNode = excludeNode;
!!!5455874.java!!!	getSubNode() : Node
        return subNode;
!!!5456002.java!!!	isExcludeComments() : boolean
        return excludeComments;
!!!5456130.java!!!	setExcludeComments(inout excludeComments : boolean) : void
        this.excludeComments = excludeComments;
!!!5456258.java!!!	updateOutputStream(inout diOs : OutputStream) : void
        updateOutputStream(diOs, false);
!!!5456386.java!!!	updateOutputStream(inout diOs : OutputStream, inout c14n11 : boolean) : void
        if (diOs == outputStream) {
            return;
        }
        if (bytes != null) {
            diOs.write(bytes);
        } else if (inputOctetStreamProxy == null) {
            CanonicalizerBase c14nizer = null;
            if (c14n11) {
                c14nizer = new Canonicalizer11_OmitComments();
            } else {
                c14nizer = new Canonicalizer20010315OmitComments();
            }
            c14nizer.setWriter(diOs);
            c14nizer.engineCanonicalize(this);
        } else {
            byte[] buffer = new byte[4 * 1024];
            int bytesread = 0;
            try {
                while ((bytesread = inputOctetStreamProxy.read(buffer)) != -1) {
                    diOs.write(buffer, 0, bytesread);
                }
            } catch (IOException ex) {
                inputOctetStreamProxy.close();
                throw ex;
            }
        }
!!!5456514.java!!!	setOutputStream(inout os : OutputStream) : void
        outputStream = os;
!!!5456642.java!!!	getBytesFromInputStream() : byte
        if (bytes != null) {
            return bytes;
        }
        if (inputOctetStreamProxy == null) {
            return null;
        }
        try {
            bytes = JavaUtils.getBytesFromStream(inputOctetStreamProxy);
        } finally {
            inputOctetStreamProxy.close();
        }
        return bytes;
!!!5456770.java!!!	addNodeFilter(inout filter : NodeFilter) : void
        if (isOctetStream()) {
            try {
                convertToNodes();
            } catch (Exception e) {
                throw new XMLSecurityRuntimeException(
                    "signature.XMLSignatureInput.nodesetReference", e
                );
            }
        }
        nodeFilters.add(filter);
!!!5456898.java!!!	getNodeFilters() : List
        return nodeFilters;
!!!5457026.java!!!	setNodeSet(inout b : boolean) : void
        isNodeSet = b;
!!!5457154.java!!!	convertToNodes() : void
        if (dfactory == null) {
            dfactory = DocumentBuilderFactory.newInstance();
            dfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE);
            dfactory.setValidating(false);
            dfactory.setNamespaceAware(true);
        }
        DocumentBuilder db = dfactory.newDocumentBuilder();
        // select all nodes, also the comments.
        try {
            db.setErrorHandler(new com.sun.org.apache.xml.internal.security.utils.IgnoreAllErrorHandler());

            Document doc = db.parse(this.getOctetStream());
            this.subNode = doc;
        } catch (SAXException ex) {
            // if a not-wellformed nodeset exists, put a container around it...
            ByteArrayOutputStream baos = new ByteArrayOutputStream();

            baos.write("<container>".getBytes("UTF-8"));
            baos.write(this.getBytes());
            baos.write("</container>".getBytes("UTF-8"));

            byte result[] = baos.toByteArray();
            Document document = db.parse(new ByteArrayInputStream(result));
            this.subNode = document.getDocumentElement().getFirstChild().getFirstChild();
        } finally {
            if (this.inputOctetStreamProxy != null) {
                this.inputOctetStreamProxy.close();
            }
            this.inputOctetStreamProxy = null;
            this.bytes = null;
        }
