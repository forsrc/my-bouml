format 222
"dom2dtm" // jdk1.8::com::sun::org::apache::xml::internal::dtm::ref::dom2dtm
  revision 1
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/org/apache/xml/internal/dtm/ref/dom2dtm/"
  java_package "com.sun.org.apache.xml.internal.dtm.ref.dom2dtm"
  classview 165506 "dom2dtm"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 745218 "DOM2DTM"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The <code>DOM2DTM</code> class serves up a DOM's contents via the
DTM API.

Note that it doesn't necessarily represent a full Document
tree. You can wrap a DOM2DTM around a specific node and its subtree
and the right things should happen. (I don't _think_ we currently
support DocumentFrgment nodes as roots, though that might be worth
considering.)

Note too that we do not currently attempt to track document
mutation. If you alter the DOM after wrapping DOM2DTM around it,
all bets are off.
"
      classrelation 2246018 // <generalisation>
	relation 2246018 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2246018 // <generalisation>
	  b parent class_ref 626306 // DTMDefaultBaseIterators
      end

      attribute 1161730 "JJK_DEBUG"
	class_attribute const_attribute package explicit_type "boolean"
	init_value "false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1161858 "JJK_NEWCODE"
	class_attribute const_attribute package explicit_type "boolean"
	init_value "true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 2246146 // NAMESPACE_DECL_NS (<unidirectional association>)
	relation 2246146 --->
	  a role_name "NAMESPACE_DECL_NS" init_value "\"http://www.w3.org/XML/1998/namespace\"" class_relation const_relation package
	    comment " Manefest constant

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2246146 // NAMESPACE_DECL_NS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2246274 // m_pos (<unidirectional association>)
	relation 2246274 --->
	  a role_name "m_pos" private
	    comment " The current position in the DOM tree. Last node examined for
possible copying to DTM. 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2246274 // m_pos (<unidirectional association>)
	  b parent class_ref 317570 // Node
      end

      attribute 1161986 "m_last_parent"
	private explicit_type "int"
	init_value "0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The current position in the DTM tree. Who children get appended to. 
"
      end

      attribute 1162114 "m_last_kid"
	private explicit_type "int"
	init_value "NULL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The current position in the DTM tree. Who children reference as their
previous sib. 
"
      end

      classrelation 2246402 // m_root (<unidirectional association>)
	relation 2246402 --->
	  a role_name "m_root" private
	    comment " The top of the subtree.
%REVIEW%: 'may not be the same as m_context if \"//foo\" pattern.'

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2246402 // m_root (<unidirectional association>)
	  b parent class_ref 317570 // Node
      end

      attribute 1162242 "m_processedFirstElement"
	package explicit_type "boolean"
	init_value "false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " True iff the first element has been processed. This is used to control
synthesis of the implied xml: namespace declaration node. 
"
      end

      attribute 1162370 "m_nodesAreProcessed"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if ALL the nodes in the m_root subtree have been processed;
false if our incremental build has not yet finished scanning the
DOM tree.  
"
      end

      classrelation 2246530 // m_nodes (<unidirectional association>)
	relation 2246530 --->
	  a role_name "m_nodes" init_value " new Vector()" protected
	    comment " The node objects.  The instance part of the handle indexes
directly into this vector.  Each DTM node may actually be
composed of several DOM nodes (for example, if logically-adjacent
Text/CDATASection nodes in the DOM have been coalesced into a
single DTM Text node); this table points only to the first in
that sequence. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2246530 // m_nodes (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      operation 5238274 "DOM2DTM"
	public explicit_return_type ""
	nparams 6
	  param inout name "mgr" type class_ref 619266 // DTMManager
	  param inout name "domSource" type class_ref 725890 // DOMSource
	  param in name "dtmIdentity" explicit_type "int"
	  param inout name "whiteSpaceFilter" type class_ref 620162 // DTMWSFilter
	  param inout name "xstringfactory" type class_ref 626946 // XMLStringFactory
	  param inout name "doIndexing" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a DOM2DTM object from a DOM node.

@param mgr The DTMManager who owns this DTM.
@param domSource the DOM source that this DTM will wrap.
@param dtmIdentity The DTM identity ID for this DTM.
@param whiteSpaceFilter The white space filter for this DTM, which may
                        be null.
@param xstringfactory XMLString factory for creating character content.
@param doIndexing true if the caller considers it worth it to use
                  indexing schemes.
"
      end

      operation 5238402 "addNode"
	protected explicit_return_type "int"
	nparams 4
	  param inout name "node" type class_ref 317570 // Node
	  param in name "parentIndex" explicit_type "int"
	  param in name "previousSibling" explicit_type "int"
	  param in name "forceNodeType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct the node map from the node.

@param node The node that is to be added to the DTM.
@param parentIndex The current parent index.
@param previousSibling The previous sibling index.
@param forceNodeType If not DTM.NULL, overrides the DOM node type.
   Used to force nodes to Text rather than CDATASection when their
   coalesced value includes ordinary Text nodes (current DTM behavior).

@return The index identity of the node that was added.
"
      end

      operation 5238530 "getNumberOfNodes"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the number of nodes that have been added.
"
      end

      operation 5238658 "nextNode"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method iterates to the next node that will be added to the table.
Each call to this method adds a new node to the table, unless the end
is reached, in which case it returns null.

@return The true if a next node is found or false if
        there are no more nodes.
"
      end

      operation 5238786 "getNode"
	public return_type class_ref 317570 // Node
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an DOM node for the given node.

@param nodeHandle The node ID.

@return A node representation of the DTM node.
"
      end

      operation 5238914 "lookupNode"
	protected return_type class_ref 317570 // Node
	nparams 1
	  param in name "nodeIdentity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a Node from an identity index.

NEEDSDOC @param nodeIdentity

NEEDSDOC ($objectName$) @return
"
      end

      operation 5239042 "getNextNodeIdentity"
	protected explicit_return_type "int"
	nparams 1
	  param in name "identity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next node identity value in the list, and call the iterator
if it hasn't been added yet.

@param identity The node identity (index).
@return identity+1, or DTM.NULL.
"
      end

      operation 5239170 "getHandleFromNode"
	private explicit_return_type "int"
	nparams 1
	  param inout name "node" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the handle from a Node.
<p>%OPT% This will be pretty slow.</p>

<p>%OPT% An XPath-like search (walk up DOM to root, tracking path;
walk down DTM reconstructing path) might be considerably faster
on later nodes in large documents. That might also imply improving
this call to handle nodes which would be in this DTM but
have not yet been built, which might or might not be a Good Thing.</p>

%REVIEW% This relies on being able to test node-identity via
object-identity. DTM2DOM proxying is a great example of a case where
that doesn't work. DOM Level 3 will provide the isSameNode() method
to fix that, but until then this is going to be flaky.

@param node A node, which may be null.

@return The node handle or <code>DTM.NULL</code>.
"
      end

      operation 5239298 "getHandleOfNode"
	public explicit_return_type "int"
	nparams 1
	  param inout name "node" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the handle from a Node. This is a more robust version of
getHandleFromNode, intended to be usable by the public.

<p>%OPT% This will be pretty slow.</p>

%REVIEW% This relies on being able to test node-identity via
object-identity. DTM2DOM proxying is a great example of a case where
that doesn't work. DOM Level 3 will provide the isSameNode() method
to fix that, but until then this is going to be flaky.

@param node A node, which may be null.

@return The node handle or <code>DTM.NULL</code>.  "
      end

      operation 5239426 "getAttributeNode"
	public explicit_return_type "int"
	nparams 3
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an attribute node by by qualified name and namespace URI.

@param nodeHandle int Handle of the node upon which to look up this attribute..
@param namespaceURI The namespace URI of the attribute to
  retrieve, or null.
@param name The local name of the attribute to
  retrieve.
@return The attribute node handle with the specified name (
  <code>nodeName</code>) or <code>DTM.NULL</code> if there is no such
  attribute.
"
      end

      operation 5239554 "getStringValue"
	public return_type class_ref 619010 // XMLString
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the string-value of a node as a String object
(see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value).

@param nodeHandle The node ID.

@return A string object that represents the string-value of the given node.
"
      end

      operation 5239682 "isWhitespace"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the string-value of a node is whitespace

@param nodeHandle The node Handle.

@return Return true if the given node is whitespace.
"
      end

      operation 5239810 "getNodeData"
	class_operation protected explicit_return_type "void"
	nparams 2
	  param inout name "node" type class_ref 317570 // Node
	  param inout name "buf" type class_ref 633730 // FastStringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the text content of a DOM subtree, appending it into a
user-supplied FastStringBuffer object. Note that attributes are
not considered part of the content of an element.
<p>
There are open questions regarding whitespace stripping.
Currently we make no special effort in that regard, since the standard
DOM doesn't yet provide DTD-based information to distinguish
whitespace-in-element-context from genuine #PCDATA. Note that we
should probably also consider xml:space if/when we address this.
DOM Level 3 may solve the problem for us.
<p>
%REVIEW% Actually, since this method operates on the DOM side of the
fence rather than the DTM side, it SHOULDN'T do
any special handling. The DOM does what the DOM does; if you want
DTM-level abstractions, use DTM-level methods.

@param node Node whose subtree is to be walked, gathering the
contents of all Text or CDATASection nodes.
@param buf FastStringBuffer into which the contents of the text
nodes are to be concatenated.
"
      end

      operation 5239938 "getNodeName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style node name. This will
include names such as #text or #document.

@param nodeHandle the id of the node.
@return String Name of this node, which may be an empty string.
%REVIEW% Document when empty string is possible...
%REVIEW-COMMENT% It should never be empty, should it?
"
      end

      operation 5240066 "getNodeNameX"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return the XPath node name.  This should be
the name as described by the XPath data model, NOT the DOM-style
name.

@param nodeHandle the id of the node.
@return String Name of this node, which may be an empty string.
"
      end

      operation 5240194 "getLocalName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its XPath-style localname.
(As defined in Namespaces, this is the portion of the name after any
colon character).

@param nodeHandle the id of the node.
@return String Local name of this node.
"
      end

      operation 5240322 "getPrefix"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a namespace handle, return the prefix that the namespace decl is
mapping.
Given a node handle, return the prefix used to map to the namespace.

<p> %REVIEW% Are you sure you want \"\" for no prefix?  </p>
<p> %REVIEW-COMMENT% I think so... not totally sure. -sb  </p>

@param nodeHandle the id of the node.
@return String prefix of this node's name, or \"\" if no explicit
namespace prefix was given.
"
      end

      operation 5240450 "getNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style namespace URI
(As defined in Namespaces, this is the declared URI which this node's
prefix -- or default in lieu thereof -- was mapped to.)

<p>%REVIEW% Null or \"\"? -sb</p>

@param nodeHandle the id of the node.
@return String URI value of this node's namespace, or null if no
namespace was resolved.
"
      end

      operation 5240578 "logicalNextDOMTextNode"
	private return_type class_ref 317570 // Node
	nparams 1
	  param inout name "n" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility function: Given a DOM Text node, determine whether it is
logically followed by another Text or CDATASection node. This may
involve traversing into Entity References.

%REVIEW% DOM Level 3 is expected to add functionality which may
allow us to retire this.
"
      end

      operation 5240706 "getNodeValue"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its node value. This is mostly
as defined by the DOM, but may ignore some conveniences.
<p>

@param nodeHandle The node id.
@return String Value of this node, or null if not
meaningful for this node type.
"
      end

      operation 5240834 "getDocumentTypeDeclarationSystemIdentifier"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  A document type declaration information item has the following properties:

    1. [system identifier] The system identifier of the external subset, if
       it exists. Otherwise this property has no value.

@return the system identifier String object, or null if there is none.
"
      end

      operation 5240962 "getDocumentTypeDeclarationPublicIdentifier"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the public identifier of the external subset,
normalized as described in 4.2.2 External Entities [XML]. If there is
no external subset or if it has no public identifier, this property
has no value.

@return the public identifier String object, or null if there is none.
"
      end

      operation 5241090 "getElementById"
	public explicit_return_type "int"
	nparams 1
	  param inout name "elementId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Element</code> whose <code>ID</code> is given by
<code>elementId</code>. If no such element exists, returns
<code>DTM.NULL</code>. Behavior is not defined if more than one element
has this <code>ID</code>. Attributes (including those
with the name \"ID\") are not of type ID unless so defined by DTD/Schema
information available to the DTM implementation.
Implementations that do not know whether attributes are of type ID or
not are expected to return <code>DTM.NULL</code>.

<p>%REVIEW% Presumably IDs are still scoped to a single document,
and this operation searches only within a single document, right?
Wouldn't want collisions between DTMs in the same process.</p>

@param elementId The unique <code>id</code> value for an element.
@return The handle of the matching element.
"
      end

      operation 5241218 "getUnparsedEntityURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The getUnparsedEntityURI function returns the URI of the unparsed
entity with the specified name in the same document as the context
node (see [3.3 Unparsed Entities]). It returns the empty string if
there is no such entity.
<p>
XML processors may choose to use the System Identifier (if one
is provided) to resolve the entity, rather than the URI in the
Public Identifier. The details are dependent on the processor, and
we would have to support some form of plug-in resolver to handle
this properly. Currently, we simply return the System Identifier if
present, and hope that it a usable URI or that our caller can
map it to one.
TODO: Resolve Public Identifiers... or consider changing function name.
<p>
If we find a relative URI
reference, XML expects it to be resolved in terms of the base URI
of the document. The DOM doesn't do that for us, and it isn't
entirely clear whether that should be done here; currently that's
pushed up to a higher level of our application. (Note that DOM Level
1 didn't store the document's base URI.)
TODO: Consider resolving Relative URIs.
<p>
(The DOM's statement that \"An XML processor may choose to
completely expand entities before the structure model is passed
to the DOM\" refers only to parsed entities, not unparsed, and hence
doesn't affect this function.)

@param name A string containing the Entity Name of the unparsed
entity.

@return String containing the URI of the Unparsed Entity, or an
empty string if no such entity exists.
"
      end

      operation 5241346 "isAttributeSpecified"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "attributeHandle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    5. [specified] A flag indicating whether this attribute was actually
       specified in the start-tag of its element, or was defaulted from the
       DTD.

@param attributeHandle the attribute handle
@return <code>true</code> if the attribute was specified;
        <code>false</code> if it was defaulted.
"
      end

      operation 5241474 "setIncrementalSAXSource"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 633602 // IncrementalSAXSource
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bind an IncrementalSAXSource to this DTM. NOT RELEVANT for DOM2DTM, since
we're wrapped around an existing DOM.

@param source The IncrementalSAXSource that we want to recieve events from
on demand.
"
      end

      operation 5241602 "getContentHandler"
	public return_type class_ref 605954 // ContentHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getContentHandler returns \"our SAX builder\" -- the thing that
someone else should send SAX events to in order to extend this
DTM model.

@return null if this model doesn't respond to SAX events,
\"this\" if the DTM object has a built-in SAX ContentHandler,
the IncrmentalSAXSource if we're bound to one and should receive
the SAX stream via it for incremental build purposes...
"
      end

      operation 5241730 "getLexicalHandler"
	public return_type class_ref 617602 // LexicalHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's lexical handler.

%REVIEW% Should this return null if constrution already done/begun?

@return null if this model doesn't respond to lexical SAX events,
\"this\" if the DTM object has a built-in SAX ContentHandler,
the IncrementalSAXSource if we're bound to one and should receive
the SAX stream via it for incremental build purposes...
"
      end

      operation 5241858 "getEntityResolver"
	public return_type class_ref 619138 // EntityResolver
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's EntityResolver.

@return null if this model doesn't respond to SAX entity ref events.
"
      end

      operation 5241986 "getDTDHandler"
	public return_type class_ref 617986 // DTDHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's DTDHandler.

@return null if this model doesn't respond to SAX dtd events.
"
      end

      operation 5242114 "getErrorHandler"
	public return_type class_ref 618114 // ErrorHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's ErrorHandler.

@return null if this model doesn't respond to SAX error events.
"
      end

      operation 5242242 "getDeclHandler"
	public return_type class_ref 617858 // DeclHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's DeclHandler.

@return null if this model doesn't respond to SAX Decl events.
"
      end

      operation 5242370 "needsTwoThreads"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return true iff we're building this model incrementally (eg
we're partnered with a IncrementalSAXSource) and thus require that the
transformation and the parse run simultaneously. Guidance to the
DTMManager.
"
      end

      operation 5242498 "isSpace"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ========== Direct SAX Dispatch, for optimization purposes ========

Returns whether the specified <var>ch</var> conforms to the XML 1.0 definition
of whitespace.  Refer to <A href=\"http://www.w3.org/TR/1998/REC-xml-19980210#NT-S\">
the definition of <CODE>S</CODE></A> for details.
@param   ch      Character to check as XML whitespace.
@return          =true if <var>ch</var> is XML whitespace; otherwise =false.
"
      end

      operation 5242626 "dispatchCharactersEvents"
	public explicit_return_type "void"
	nparams 3
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "ch" type class_ref 605954 // ContentHandler
	  param inout name "normalize" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Directly call the
characters method on the passed ContentHandler for the
string-value of the given node (see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value). Multiple calls to the
ContentHandler's characters methods may well occur for a single call to
this method.

@param nodeHandle The node ID.
@param ch A non-null reference to a ContentHandler.

@throws org.xml.sax.SAXException
"
      end

      operation 5242754 "dispatchNodeData"
	class_operation protected explicit_return_type "void"
	nparams 3
	  param inout name "node" type class_ref 317570 // Node
	  param inout name "ch" type class_ref 605954 // ContentHandler
	  param in name "depth" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the text content of a DOM subtree, appending it into a
user-supplied FastStringBuffer object. Note that attributes are
not considered part of the content of an element.
<p>
There are open questions regarding whitespace stripping.
Currently we make no special effort in that regard, since the standard
DOM doesn't yet provide DTD-based information to distinguish
whitespace-in-element-context from genuine #PCDATA. Note that we
should probably also consider xml:space if/when we address this.
DOM Level 3 may solve the problem for us.
<p>
%REVIEW% Note that as a DOM-level operation, it can be argued that this
routine _shouldn't_ perform any processing beyond what the DOM already
does, and that whitespace stripping and so on belong at the DTM level.
If you want a stripped DOM view, wrap DTM2DOM around DOM2DTM.

@param node Node whose subtree is to be walked, gathering the
contents of all Text or CDATASection nodes.
"
      end

      classrelation 2246658 // m_walker (<unidirectional association>)
	relation 2246658 --->
	  a role_name "m_walker" init_value " new TreeWalker(null)" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2246658 // m_walker (<unidirectional association>)
	  b parent class_ref 745346 // TreeWalker
      end

      operation 5242882 "dispatchToEvents"
	public explicit_return_type "void"
	nparams 2
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "ch" type class_ref 605954 // ContentHandler
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Directly create SAX parser events from a subtree.

@param nodeHandle The node ID.
@param ch A non-null reference to a ContentHandler.

@throws org.xml.sax.SAXException
"
      end

      class 745474 "CharacterNodeHandler"
	visibility public stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 5243010 "characters"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "node" type class_ref 317570 // Node
	  nexceptions 1
	    exception class_ref 379266 // SAXException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 5243138 "setProperty"
	public explicit_return_type "void"
	nparams 2
	  param inout name "property" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For the moment all the run time properties are ignored by this
class.

@param property a <code>String</code> value
@param value an <code>Object</code> value
"
      end

      operation 5243266 "getSourceLocatorFor"
	public return_type class_ref 617346 // SourceLocator
	nparams 1
	  param in name "node" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "No source information is available for DOM2DTM, so return
<code>null</code> here.

@param node an <code>int</code> value
@return null
"
      end
    end

    class 745602 "DOM2DTMdefaultNamespaceDeclarationNode"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This is a kluge to let us shove a declaration for xml: into the
DOM2DTM model.  Basically, it creates a proxy node in DOM space to
carry the additional information. This is _NOT_ a full DOM
implementation, and shouldn't be one since it sits alongside the
DOM rather than becoming part of the DOM model.

(This used to be an internal class within DOM2DTM. Moved out because
I need to perform an instanceof operation on it to support a temporary
workaround in DTMManagerDefault.)

%REVIEW% What if the DOM2DTM was built around a DocumentFragment and
there isn't a single root element? I think this fails that case...

%REVIEW% An alternative solution would be to create the node _only_
in DTM space, but given how DOM2DTM is currently written I think
this is simplest.
"
      classrelation 2246786 // <realization>
	relation 2246786 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2246786 // <realization>
	  b parent class_ref 648066 // Attr
      end

      classrelation 2246914 // <realization>
	relation 2246914 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2246914 // <realization>
	  b parent class_ref 648322 // TypeInfo
      end

      classrelation 2247042 // NOT_SUPPORTED_ERR (<unidirectional association>)
	relation 2247042 --->
	  a role_name "NOT_SUPPORTED_ERR" init_value "\"Unsupported operation on pseudonode\"" const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2247042 // NOT_SUPPORTED_ERR (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2247170 // pseudoparent (<unidirectional association>)
	relation 2247170 --->
	  a role_name "pseudoparent" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2247170 // pseudoparent (<unidirectional association>)
	  b parent class_ref 648194 // Element
      end

      classrelation 2247298 // prefix (<unidirectional association>)
	relation 2247298 --->
	  a role_name "prefix" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2247298 // prefix (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2247426 // uri (<unidirectional association>)
	relation 2247426 --->
	  a role_name "uri" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2247426 // uri (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2247554 // nodename (<unidirectional association>)
	relation 2247554 --->
	  a role_name "nodename" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2247554 // nodename (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1162498 "handle"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 5243394 "DOM2DTMdefaultNamespaceDeclarationNode"
	package explicit_return_type ""
	nparams 4
	  param inout name "pseudoparent" type class_ref 648194 // Element
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	  param in name "handle" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5243522 "getNodeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5243650 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5243778 "getNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5243906 "getPrefix"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5244034 "getLocalName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5244162 "getNodeValue"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5244290 "getValue"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5244418 "getOwnerElement"
	public return_type class_ref 648194 // Element
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5244546 "isSupported"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "feature" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5244674 "hasChildNodes"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5244802 "hasAttributes"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5244930 "getParentNode"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5245058 "getFirstChild"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5245186 "getLastChild"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5245314 "getPreviousSibling"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5245442 "getNextSibling"
	public return_type class_ref 317570 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5245570 "getSpecified"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5245698 "normalize"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5245826 "getChildNodes"
	public return_type class_ref 333058 // NodeList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5245954 "getAttributes"
	public return_type class_ref 327042 // NamedNodeMap
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5246082 "getNodeType"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5246210 "setNodeValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5246338 "setValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5246466 "setPrefix"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5246594 "insertBefore"
	public return_type class_ref 317570 // Node
	nparams 2
	  param inout name "a" type class_ref 317570 // Node
	  param inout name "b" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5246722 "replaceChild"
	public return_type class_ref 317570 // Node
	nparams 2
	  param inout name "a" type class_ref 317570 // Node
	  param inout name "b" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5246850 "appendChild"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "a" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5246978 "removeChild"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "a" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5247106 "getOwnerDocument"
	public return_type class_ref 378626 // Document
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5247234 "cloneNode"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "deep" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5247362 "getHandleOfNode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Non-DOM method, part of the temporary kluge
%REVIEW% This would be a pruning problem, but since it will always be
added to the root element and we prune on elements, we shouldn't have
to worry.
"
      end

      operation 5247490 "getTypeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "RAMESH: PENDING=> Add proper implementation for the below DOM L3 additions

@see org.w3c.dom.TypeInfo#getTypeName()
"
      end

      operation 5247618 "getTypeNamespace"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see org.w3c.dom.TypeInfo#getTypeNamespace()
"
      end

      operation 5247746 "isDerivedFrom"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "ns" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param in name "derivationMethod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see or.gw3c.dom.TypeInfo#isDerivedFrom(String,String,int)
"
      end

      operation 5247874 "getSchemaTypeInfo"
	public return_type class_ref 648322 // TypeInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5248002 "isId"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5248130 "setUserData"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "key" type class_ref 128130 // String
	  param inout name "data" type class_ref 129538 // Object
	  param inout name "handler" type class_ref 647298 // UserDataHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associate an object to a key on this node. The object can later be
retrieved from this node by calling <code>getUserData</code> with the
same key.
@param key The key to associate the object to.
@param data The object to associate to the given key, or
  <code>null</code> to remove any existing association to that key.
@param handler The handler to associate to that key, or
  <code>null</code>.
@return Returns the <code>DOMObject</code> previously associated to
  the given key on this node, or <code>null</code> if there was none.
@since DOM Level 3
"
      end

      operation 5248258 "getUserData"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the object associated to a key on a this node. The object
must first have been set to this node by calling
<code>setUserData</code> with the same key.
@param key The key the object is associated to.
@return Returns the <code>DOMObject</code> associated to the given key
  on this node, or <code>null</code> if there was none.
@since DOM Level 3
"
      end

      operation 5248386 "getFeature"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "feature" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This method returns a specialized object which implements the
specialized APIs of the specified feature and version. The
specialized object may also be obtained by using binding-specific
casting methods but is not necessarily expected to, as discussed in Mixed DOM implementations.
@param feature The name of the feature requested (case-insensitive).
@param version  This is the version number of the feature to test. If
  the version is <code>null</code> or the empty string, supporting
  any version of the feature will cause the method to return an
  object that supports at least one version of the feature.
@return  Returns an object which implements the specialized APIs of
  the specified feature and version, if any, or <code>null</code> if
  there is no object which implements interfaces associated with that
  feature. If the <code>DOMObject</code> returned by this method
  implements the <code>Node</code> interface, it must delegate to the
  primary core <code>Node</code> and not return results inconsistent
  with the primary core <code>Node</code> such as attributes,
  childNodes, etc.
@since DOM Level 3
"
      end

      operation 5248514 "isEqualNode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "arg" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether two nodes are equal.
<br>This method tests for equality of nodes, not sameness (i.e.,
whether the two nodes are references to the same object) which can be
tested with <code>Node.isSameNode</code>. All nodes that are the same
will also be equal, though the reverse may not be true.
<br>Two nodes are equal if and only if the following conditions are
satisfied: The two nodes are of the same type.The following string
attributes are equal: <code>nodeName</code>, <code>localName</code>,
<code>namespaceURI</code>, <code>prefix</code>, <code>nodeValue</code>
, <code>baseURI</code>. This is: they are both <code>null</code>, or
they have the same length and are character for character identical.
The <code>attributes</code> <code>NamedNodeMaps</code> are equal.
This is: they are both <code>null</code>, or they have the same
length and for each node that exists in one map there is a node that
exists in the other map and is equal, although not necessarily at the
same index.The <code>childNodes</code> <code>NodeLists</code> are
equal. This is: they are both <code>null</code>, or they have the
same length and contain equal nodes at the same index. This is true
for <code>Attr</code> nodes as for any other type of node. Note that
normalization can affect equality; to avoid this, nodes should be
normalized before being compared.
<br>For two <code>DocumentType</code> nodes to be equal, the following
conditions must also be satisfied: The following string attributes
are equal: <code>publicId</code>, <code>systemId</code>,
<code>internalSubset</code>.The <code>entities</code>
<code>NamedNodeMaps</code> are equal.The <code>notations</code>
<code>NamedNodeMaps</code> are equal.
<br>On the other hand, the following do not affect equality: the
<code>ownerDocument</code> attribute, the <code>specified</code>
attribute for <code>Attr</code> nodes, the
<code>isWhitespaceInElementContent</code> attribute for
<code>Text</code> nodes, as well as any user data or event listeners
registered on the nodes.
@param arg The node to compare equality with.
@param deep If <code>true</code>, recursively compare the subtrees; if
  <code>false</code>, compare only the nodes themselves (and its
  attributes, if it is an <code>Element</code>).
@return If the nodes, and possibly subtrees are equal,
  <code>true</code> otherwise <code>false</code>.
@since DOM Level 3
"
      end

      operation 5248642 "lookupNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "specifiedPrefix" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DOM Level 3 - Experimental:
Look up the namespace URI associated to the given prefix, starting from this node.
Use lookupNamespaceURI(null) to lookup the default namespace

@param namespaceURI
@return th URI for the namespace
@since DOM Level 3
"
      end

      operation 5248770 "isDefaultNamespace"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "namespaceURI" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " DOM Level 3: Experimental
 This method checks if the specified <code>namespaceURI</code> is the
 default namespace or not.
 @param namespaceURI The namespace URI to look for.
 @return  <code>true</code> if the specified <code>namespaceURI</code>
  is the default namespace, <code>false</code> otherwise.
@since DOM Level 3
"
      end

      operation 5248898 "lookupPrefix"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "namespaceURI" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
DOM Level 3 - Experimental:
Look up the prefix associated to the given namespace URI, starting from this node.

@param namespaceURI
@return the prefix for the namespace
"
      end

      operation 5249026 "isSameNode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this node is the same node as the given one.
<br>This method provides a way to determine whether two
<code>Node</code> references returned by the implementation reference
the same object. When two <code>Node</code> references are references
to the same object, even if through a proxy, the references may be
used completely interchangably, such that all attributes have the
same values and calling the same DOM method on either reference
always has exactly the same effect.
@param other The node to test against.
@return Returns <code>true</code> if the nodes are the same,
  <code>false</code> otherwise.
@since DOM Level 3
"
      end

      operation 5249154 "setTextContent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "textContent" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This attribute returns the text content of this node and its
descendants. When it is defined to be null, setting it has no effect.
When set, any possible children this node may have are removed and
replaced by a single <code>Text</code> node containing the string
this attribute is set to. On getting, no serialization is performed,
the returned string does not contain any markup. No whitespace
normalization is performed, the returned string does not contain the
element content whitespaces . Similarly, on setting, no parsing is
performed either, the input string is taken as pure textual content.
<br>The string returned is made of the text content of this node
depending on its type, as defined below:
<table border='1'>
<tr>
<th>Node type</th>
<th>Content</th>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>
ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,
DOCUMENT_FRAGMENT_NODE</td>
<td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>
attribute value of every child node, excluding COMMENT_NODE and
PROCESSING_INSTRUCTION_NODE nodes</td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>ATTRIBUTE_NODE, TEXT_NODE,
CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>
<td valign='top' rowspan='1' colspan='1'>
<code>nodeValue</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>
<td valign='top' rowspan='1' colspan='1'>
null</td>
</tr>
</table>
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
@exception DOMException
  DOMSTRING_SIZE_ERR: Raised when it would return more characters than
  fit in a <code>DOMString</code> variable on the implementation
  platform.
@since DOM Level 3
"
      end

      operation 5249282 "getTextContent"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This attribute returns the text content of this node and its
descendants. When it is defined to be null, setting it has no effect.
When set, any possible children this node may have are removed and
replaced by a single <code>Text</code> node containing the string
this attribute is set to. On getting, no serialization is performed,
the returned string does not contain any markup. No whitespace
normalization is performed, the returned string does not contain the
element content whitespaces . Similarly, on setting, no parsing is
performed either, the input string is taken as pure textual content.
<br>The string returned is made of the text content of this node
depending on its type, as defined below:
<table border='1'>
<tr>
<th>Node type</th>
<th>Content</th>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>
ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,
DOCUMENT_FRAGMENT_NODE</td>
<td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>
attribute value of every child node, excluding COMMENT_NODE and
PROCESSING_INSTRUCTION_NODE nodes</td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>ATTRIBUTE_NODE, TEXT_NODE,
CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>
<td valign='top' rowspan='1' colspan='1'>
<code>nodeValue</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>
<td valign='top' rowspan='1' colspan='1'>
null</td>
</tr>
</table>
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
@exception DOMException
  DOMSTRING_SIZE_ERR: Raised when it would return more characters than
  fit in a <code>DOMString</code> variable on the implementation
  platform.
@since DOM Level 3
"
      end

      operation 5249410 "compareDocumentPosition"
	public explicit_return_type "short"
	nparams 1
	  param inout name "other" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares a node with this node with regard to their position in the
document.
@param other The node to compare against this node.
@return Returns how the given node is positioned relatively to this
  node.
@since DOM Level 3
"
      end

      operation 5249538 "getBaseURI"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The absolute base URI of this node or <code>null</code> if undefined.
This value is computed according to . However, when the
<code>Document</code> supports the feature \"HTML\" , the base URI is
computed using first the value of the href attribute of the HTML BASE
element if any, and the value of the <code>documentURI</code>
attribute from the <code>Document</code> interface otherwise.
<br> When the node is an <code>Element</code>, a <code>Document</code>
or a a <code>ProcessingInstruction</code>, this attribute represents
the properties [base URI] defined in . When the node is a
<code>Notation</code>, an <code>Entity</code>, or an
<code>EntityReference</code>, this attribute represents the
properties [declaration base URI] in the . How will this be affected
by resolution of relative namespace URIs issue?It's not.Should this
only be on Document, Element, ProcessingInstruction, Entity, and
Notation nodes, according to the infoset? If not, what is it equal to
on other nodes? Null? An empty string? I think it should be the
parent's.No.Should this be read-only and computed or and actual
read-write attribute?Read-only and computed (F2F 19 Jun 2000 and
teleconference 30 May 2001).If the base HTML element is not yet
attached to a document, does the insert change the Document.baseURI?
Yes. (F2F 26 Sep 2001)
@since DOM Level 3
"
      end
    end
  end

  deploymentview 158978 "dom2dtm"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 524034 "DOM2DTM"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import javax.xml.transform.SourceLocator;
import javax.xml.transform.dom.DOMSource;
import com.sun.org.apache.xml.internal.dtm.DTM;
import com.sun.org.apache.xml.internal.dtm.DTMManager;
import com.sun.org.apache.xml.internal.dtm.DTMWSFilter;
import com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators;
import com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault;
import com.sun.org.apache.xml.internal.dtm.ref.ExpandedNameTable;
import com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource;
import com.sun.org.apache.xml.internal.res.XMLErrorResources;
import com.sun.org.apache.xml.internal.res.XMLMessages;
import com.sun.org.apache.xml.internal.utils.FastStringBuffer;
import com.sun.org.apache.xml.internal.utils.QName;
import com.sun.org.apache.xml.internal.utils.StringBufferPool;
import com.sun.org.apache.xml.internal.utils.TreeWalker;
import com.sun.org.apache.xml.internal.utils.XMLCharacterRecognizer;
import com.sun.org.apache.xml.internal.utils.XMLString;
import com.sun.org.apache.xml.internal.utils.XMLStringFactory;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.Entity;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.xml.sax.ContentHandler;
${definition}"
      associated_elems
	class_ref 745218 // DOM2DTM
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DOM2DTM.java,v 1.2.4.1 2005/09/15 08:15:10 suresh_emailid Exp $
"
    end

    artifact 524162 "DOM2DTMdefaultNamespaceDeclarationNode"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.DTMException;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.TypeInfo;
import org.w3c.dom.UserDataHandler;
import org.w3c.dom.DOMException;
${definition}"
      associated_elems
	class_ref 745602 // DOM2DTMdefaultNamespaceDeclarationNode
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DOM2DTMdefaultNamespaceDeclarationNode.java,v 1.2.4.1 2005/09/15 08:15:11 suresh_emailid Exp $
"
    end
  end
end
