class Choice
!!!6132610.java!!!	Choice()
        GraphicsEnvironment.checkHeadless();
        pItems = new Vector<>();
!!!6132738.java!!!	constructComponentName() : String
        synchronized (Choice.class) {
            return base + nameCounter++;
        }
!!!6132866.java!!!	addNotify() : void
        synchronized (getTreeLock()) {
            if (peer == null)
                peer = getToolkit().createChoice(this);
            super.addNotify();
        }
!!!6132994.java!!!	getItemCount() : int
        return countItems();
!!!6133122.java!!!	countItems() : int
        return pItems.size();
!!!6133250.java!!!	getItem(in index : int) : String
        return getItemImpl(index);
!!!6133378.java!!!	getItemImpl(in index : int) : String
        return pItems.elementAt(index);
!!!6133506.java!!!	add(inout item : String) : void
        addItem(item);
!!!6133634.java!!!	addItem(inout item : String) : void
        synchronized (this) {
            insertNoInvalidate(item, pItems.size());
        }

        // This could change the preferred size of the Component.
        invalidateIfValid();
!!!6133762.java!!!	insertNoInvalidate(inout item : String, in index : int) : void
        if (item == null) {
            throw new
                NullPointerException("cannot add null item to Choice");
        }
        pItems.insertElementAt(item, index);
        ChoicePeer peer = (ChoicePeer)this.peer;
        if (peer != null) {
            peer.add(item, index);
        }
        // no selection or selection shifted up
        if (selectedIndex < 0 || selectedIndex >= index) {
            select(0);
        }
!!!6133890.java!!!	insert(inout item : String, in index : int) : void
        synchronized (this) {
            if (index < 0) {
                throw new IllegalArgumentException("index less than zero.");
            }
            /* if the index greater than item count, add item to the end */
            index = Math.min(index, pItems.size());

            insertNoInvalidate(item, index);
        }

        // This could change the preferred size of the Component.
        invalidateIfValid();
!!!6134018.java!!!	remove(inout item : String) : void
        synchronized (this) {
            int index = pItems.indexOf(item);
            if (index < 0) {
                throw new IllegalArgumentException("item " + item +
                                                   " not found in choice");
            } else {
                removeNoInvalidate(index);
            }
        }

        // This could change the preferred size of the Component.
        invalidateIfValid();
!!!6134146.java!!!	remove(in position : int) : void
        synchronized (this) {
            removeNoInvalidate(position);
        }

        // This could change the preferred size of the Component.
        invalidateIfValid();
!!!6134274.java!!!	removeNoInvalidate(in position : int) : void
        pItems.removeElementAt(position);
        ChoicePeer peer = (ChoicePeer)this.peer;
        if (peer != null) {
            peer.remove(position);
        }
        /* Adjust selectedIndex if selected item was removed. */
        if (pItems.size() == 0) {
            selectedIndex = -1;
        } else if (selectedIndex == position) {
            select(0);
        } else if (selectedIndex > position) {
            select(selectedIndex-1);
        }
!!!6134402.java!!!	removeAll() : void
        synchronized (this) {
            if (peer != null) {
                ((ChoicePeer)peer).removeAll();
            }
            pItems.removeAllElements();
            selectedIndex = -1;
        }

        // This could change the preferred size of the Component.
        invalidateIfValid();
!!!6134530.java!!!	getSelectedItem() : String
        return (selectedIndex >= 0) ? getItem(selectedIndex) : null;
!!!6134658.java!!!	getSelectedObjects() : Object
        if (selectedIndex >= 0) {
            Object[] items = new Object[1];
            items[0] = getItem(selectedIndex);
            return items;
        }
        return null;
!!!6134786.java!!!	getSelectedIndex() : int
        return selectedIndex;
!!!6134914.java!!!	select(in pos : int) : void
        if ((pos >= pItems.size()) || (pos < 0)) {
            throw new IllegalArgumentException("illegal Choice item position: " + pos);
        }
        if (pItems.size() > 0) {
            selectedIndex = pos;
            ChoicePeer peer = (ChoicePeer)this.peer;
            if (peer != null) {
                peer.select(pos);
            }
        }
!!!6135042.java!!!	select(inout str : String) : void
        int index = pItems.indexOf(str);
        if (index >= 0) {
            select(index);
        }
!!!6135170.java!!!	addItemListener(inout l : ItemListener) : void
        if (l == null) {
           return;
        }
        itemListener = AWTEventMulticaster.add(itemListener, l);
        newEventsOnly = true;
!!!6135298.java!!!	removeItemListener(inout l : ItemListener) : void
        if (l == null) {
            return;
        }
        itemListener = AWTEventMulticaster.remove(itemListener, l);
!!!6135426.java!!!	getItemListeners() : ItemListener
        return getListeners(ItemListener.class);
!!!6135554.java!!!	getListeners(inout listenerType : Class) : T
        EventListener l = null;
        if  (listenerType == ItemListener.class) {
            l = itemListener;
        } else {
            return super.getListeners(listenerType);
        }
        return AWTEventMulticaster.getListeners(l, listenerType);
!!!6135682.java!!!	eventEnabled(inout e : AWTEvent) : boolean
        if (e.id == ItemEvent.ITEM_STATE_CHANGED) {
            if ((eventMask & AWTEvent.ITEM_EVENT_MASK) != 0 ||
                itemListener != null) {
                return true;
            }
            return false;
        }
        return super.eventEnabled(e);
!!!6135810.java!!!	processEvent(inout e : AWTEvent) : void
        if (e instanceof ItemEvent) {
            processItemEvent((ItemEvent)e);
            return;
        }
        super.processEvent(e);
!!!6135938.java!!!	processItemEvent(inout e : ItemEvent) : void
        ItemListener listener = itemListener;
        if (listener != null) {
            listener.itemStateChanged(e);
        }
!!!6136066.java!!!	paramString() : String
        return super.paramString() + ",current=" + getSelectedItem();
!!!6136194.java!!!	writeObject(inout s : ObjectOutputStream) : void
      s.defaultWriteObject();

      AWTEventMulticaster.save(s, itemListenerK, itemListener);
      s.writeObject(null);
!!!6136322.java!!!	readObject(inout s : ObjectInputStream) : void
      GraphicsEnvironment.checkHeadless();
      s.defaultReadObject();

      Object keyOrNull;
      while(null != (keyOrNull = s.readObject())) {
        String key = ((String)keyOrNull).intern();

        if (itemListenerK == key)
          addItemListener((ItemListener)(s.readObject()));

        else // skip value for unrecognized key
          s.readObject();
      }
!!!6136578.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTChoice();
        }
        return accessibleContext;
