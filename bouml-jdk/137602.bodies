class Integer
!!!7028610.java!!!	toString(in i : int, in radix : int) : String
        if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)
            radix = 10;

        /* Use the faster version */
        if (radix == 10) {
            return toString(i);
        }

        char buf[] = new char[33];
        boolean negative = (i < 0);
        int charPos = 32;

        if (!negative) {
            i = -i;
        }

        while (i <= -radix) {
            buf[charPos--] = digits[-(i % radix)];
            i = i / radix;
        }
        buf[charPos] = digits[-i];

        if (negative) {
            buf[--charPos] = '-';
        }

        return new String(buf, charPos, (33 - charPos));
!!!7028738.java!!!	toUnsignedString(in i : int, in radix : int) : String
        return Long.toUnsignedString(toUnsignedLong(i), radix);
!!!7028866.java!!!	toHexString(in i : int) : String
        return toUnsignedString0(i, 4);
!!!7028994.java!!!	toOctalString(in i : int) : String
        return toUnsignedString0(i, 3);
!!!7029122.java!!!	toBinaryString(in i : int) : String
        return toUnsignedString0(i, 1);
!!!7029250.java!!!	toUnsignedString0(in val : int, in shift : int) : String
        // assert shift > 0 && shift <=5 : "Illegal shift value";
        int mag = Integer.SIZE - Integer.numberOfLeadingZeros(val);
        int chars = Math.max(((mag + (shift - 1)) / shift), 1);
        char[] buf = new char[chars];

        formatUnsignedInt(val, shift, buf, 0, chars);

        // Use special constructor which takes over "buf".
        return new String(buf, true);
!!!7029378.java!!!	formatUnsignedInt(in val : int, in shift : int, inout buf : char [[]], in offset : int, in len : int) : int
        int charPos = len;
        int radix = 1 << shift;
        int mask = radix - 1;
        do {
            buf[offset + --charPos] = Integer.digits[val & mask];
            val >>>= shift;
        } while (val != 0 && charPos > 0);

        return charPos;
!!!7029506.java!!!	toString(in i : int) : String
        if (i == Integer.MIN_VALUE)
            return "-2147483648";
        int size = (i < 0) ? stringSize(-i) + 1 : stringSize(i);
        char[] buf = new char[size];
        getChars(i, size, buf);
        return new String(buf, true);
!!!7029634.java!!!	toUnsignedString(in i : int) : String
        return Long.toString(toUnsignedLong(i));
!!!7029762.java!!!	getChars(in i : int, in index : int, inout buf : char [[]]) : void
        int q, r;
        int charPos = index;
        char sign = 0;

        if (i < 0) {
            sign = '-';
            i = -i;
        }

        // Generate two digits per iteration
        while (i >= 65536) {
            q = i / 100;
        // really: r = i - (q * 100);
            r = i - ((q << 6) + (q << 5) + (q << 2));
            i = q;
            buf [--charPos] = DigitOnes[r];
            buf [--charPos] = DigitTens[r];
        }

        // Fall thru to fast mode for smaller numbers
        // assert(i <= 65536, i);
        for (;;) {
            q = (i * 52429) >>> (16+3);
            r = i - ((q << 3) + (q << 1));  // r = i-(q*10) ...
            buf [--charPos] = digits [r];
            i = q;
            if (i == 0) break;
        }
        if (sign != 0) {
            buf [--charPos] = sign;
        }
!!!7029890.java!!!	stringSize(in x : int) : int
        for (int i=0; ; i++)
            if (x <= sizeTable[i])
                return i+1;
!!!7030018.java!!!	parseInt(inout s : String, in radix : int) : int
        /*
         * WARNING: This method may be invoked early during VM initialization
         * before IntegerCache is initialized. Care must be taken to not use
         * the valueOf method.
         */

        if (s == null) {
            throw new NumberFormatException("null");
        }

        if (radix < Character.MIN_RADIX) {
            throw new NumberFormatException("radix " + radix +
                                            " less than Character.MIN_RADIX");
        }

        if (radix > Character.MAX_RADIX) {
            throw new NumberFormatException("radix " + radix +
                                            " greater than Character.MAX_RADIX");
        }

        int result = 0;
        boolean negative = false;
        int i = 0, len = s.length();
        int limit = -Integer.MAX_VALUE;
        int multmin;
        int digit;

        if (len > 0) {
            char firstChar = s.charAt(0);
            if (firstChar < '0') { // Possible leading "+" or "-"
                if (firstChar == '-') {
                    negative = true;
                    limit = Integer.MIN_VALUE;
                } else if (firstChar != '+')
                    throw NumberFormatException.forInputString(s);

                if (len == 1) // Cannot have lone "+" or "-"
                    throw NumberFormatException.forInputString(s);
                i++;
            }
            multmin = limit / radix;
            while (i < len) {
                // Accumulating negatively avoids surprises near MAX_VALUE
                digit = Character.digit(s.charAt(i++),radix);
                if (digit < 0) {
                    throw NumberFormatException.forInputString(s);
                }
                if (result < multmin) {
                    throw NumberFormatException.forInputString(s);
                }
                result *= radix;
                if (result < limit + digit) {
                    throw NumberFormatException.forInputString(s);
                }
                result -= digit;
            }
        } else {
            throw NumberFormatException.forInputString(s);
        }
        return negative ? result : -result;
!!!7030146.java!!!	parseInt(inout s : String) : int
        return parseInt(s,10);
!!!7030274.java!!!	parseUnsignedInt(inout s : String, in radix : int) : int
        if (s == null)  {
            throw new NumberFormatException("null");
        }

        int len = s.length();
        if (len > 0) {
            char firstChar = s.charAt(0);
            if (firstChar == '-') {
                throw new
                    NumberFormatException(String.format("Illegal leading minus sign " +
                                                       "on unsigned string %s.", s));
            } else {
                if (len <= 5 || // Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits
                    (radix == 10 && len <= 9) ) { // Integer.MAX_VALUE in base 10 is 10 digits
                    return parseInt(s, radix);
                } else {
                    long ell = Long.parseLong(s, radix);
                    if ((ell & 0xffff_ffff_0000_0000L) == 0) {
                        return (int) ell;
                    } else {
                        throw new
                            NumberFormatException(String.format("String value %s exceeds " +
                                                                "range of unsigned int.", s));
                    }
                }
            }
        } else {
            throw NumberFormatException.forInputString(s);
        }
!!!7030402.java!!!	parseUnsignedInt(inout s : String) : int
        return parseUnsignedInt(s, 10);
!!!7030530.java!!!	valueOf(inout s : String, in radix : int) : Integer
        return Integer.valueOf(parseInt(s,radix));
!!!7030658.java!!!	valueOf(inout s : String) : Integer
        return Integer.valueOf(parseInt(s, 10));
!!!7030914.java!!!	valueOf(in i : int) : Integer
        if (i >= IntegerCache.low && i <= IntegerCache.high)
            return IntegerCache.cache[i + (-IntegerCache.low)];
        return new Integer(i);
!!!7031042.java!!!	Integer(in value : int)
        this.value = value;
!!!7031170.java!!!	Integer(inout s : String)
        this.value = parseInt(s, 10);
!!!7031298.java!!!	byteValue() : byte
        return (byte)value;
!!!7031426.java!!!	shortValue() : short
        return (short)value;
!!!7031554.java!!!	intValue() : int
        return value;
!!!7031682.java!!!	longValue() : long
        return (long)value;
!!!7031810.java!!!	floatValue() : float
        return (float)value;
!!!7031938.java!!!	doubleValue() : double
        return (double)value;
!!!7032066.java!!!	toString() : String
        return toString(value);
!!!7032194.java!!!	hashCode() : int
        return Integer.hashCode(value);
!!!7032322.java!!!	hashCode(in value : int) : int
        return value;
!!!7032450.java!!!	equals(inout obj : Object) : boolean
        if (obj instanceof Integer) {
            return value == ((Integer)obj).intValue();
        }
        return false;
!!!7032578.java!!!	getInteger(inout nm : String) : Integer
        return getInteger(nm, null);
!!!7032706.java!!!	getInteger(inout nm : String, in val : int) : Integer
        Integer result = getInteger(nm, null);
        return (result == null) ? Integer.valueOf(val) : result;
!!!7032834.java!!!	getInteger(inout nm : String, inout val : Integer) : Integer
        String v = null;
        try {
            v = System.getProperty(nm);
        } catch (IllegalArgumentException | NullPointerException e) {
        }
        if (v != null) {
            try {
                return Integer.decode(v);
            } catch (NumberFormatException e) {
            }
        }
        return val;
!!!7032962.java!!!	decode(inout nm : String) : Integer
        int radix = 10;
        int index = 0;
        boolean negative = false;
        Integer result;

        if (nm.length() == 0)
            throw new NumberFormatException("Zero length string");
        char firstChar = nm.charAt(0);
        // Handle sign, if present
        if (firstChar == '-') {
            negative = true;
            index++;
        } else if (firstChar == '+')
            index++;

        // Handle radix specifier, if present
        if (nm.startsWith("0x", index) || nm.startsWith("0X", index)) {
            index += 2;
            radix = 16;
        }
        else if (nm.startsWith("#", index)) {
            index ++;
            radix = 16;
        }
        else if (nm.startsWith("0", index) && nm.length() > 1 + index) {
            index ++;
            radix = 8;
        }

        if (nm.startsWith("-", index) || nm.startsWith("+", index))
            throw new NumberFormatException("Sign character in wrong position");

        try {
            result = Integer.valueOf(nm.substring(index), radix);
            result = negative ? Integer.valueOf(-result.intValue()) : result;
        } catch (NumberFormatException e) {
            // If number is Integer.MIN_VALUE, we'll end up here. The next line
            // handles this case, and causes any genuine format error to be
            // rethrown.
            String constant = negative ? ("-" + nm.substring(index))
                                       : nm.substring(index);
            result = Integer.valueOf(constant, radix);
        }
        return result;
!!!7033090.java!!!	compareTo(inout anotherInteger : Integer) : int
        return compare(this.value, anotherInteger.value);
!!!7033218.java!!!	compare(in x : int, in y : int) : int
        return (x < y) ? -1 : ((x == y) ? 0 : 1);
!!!7033346.java!!!	compareUnsigned(in x : int, in y : int) : int
        return compare(x + MIN_VALUE, y + MIN_VALUE);
!!!7033474.java!!!	toUnsignedLong(in x : int) : long
        return ((long) x) & 0xffffffffL;
!!!7033602.java!!!	divideUnsigned(in dividend : int, in divisor : int) : int
        // In lieu of tricky code, for now just use long arithmetic.
        return (int)(toUnsignedLong(dividend) / toUnsignedLong(divisor));
!!!7033730.java!!!	remainderUnsigned(in dividend : int, in divisor : int) : int
        // In lieu of tricky code, for now just use long arithmetic.
        return (int)(toUnsignedLong(dividend) % toUnsignedLong(divisor));
!!!7033858.java!!!	highestOneBit(in i : int) : int
        // HD, Figure 3-1
        i |= (i >>  1);
        i |= (i >>  2);
        i |= (i >>  4);
        i |= (i >>  8);
        i |= (i >> 16);
        return i - (i >>> 1);
!!!7033986.java!!!	lowestOneBit(in i : int) : int
        // HD, Section 2-1
        return i & -i;
!!!7034114.java!!!	numberOfLeadingZeros(in i : int) : int
        // HD, Figure 5-6
        if (i == 0)
            return 32;
        int n = 1;
        if (i >>> 16 == 0) { n += 16; i <<= 16; }
        if (i >>> 24 == 0) { n +=  8; i <<=  8; }
        if (i >>> 28 == 0) { n +=  4; i <<=  4; }
        if (i >>> 30 == 0) { n +=  2; i <<=  2; }
        n -= i >>> 31;
        return n;
!!!7034242.java!!!	numberOfTrailingZeros(in i : int) : int
        // HD, Figure 5-14
        int y;
        if (i == 0) return 32;
        int n = 31;
        y = i <<16; if (y != 0) { n = n -16; i = y; }
        y = i << 8; if (y != 0) { n = n - 8; i = y; }
        y = i << 4; if (y != 0) { n = n - 4; i = y; }
        y = i << 2; if (y != 0) { n = n - 2; i = y; }
        return n - ((i << 1) >>> 31);
!!!7034370.java!!!	bitCount(in i : int) : int
        // HD, Figure 5-2
        i = i - ((i >>> 1) & 0x55555555);
        i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);
        i = (i + (i >>> 4)) & 0x0f0f0f0f;
        i = i + (i >>> 8);
        i = i + (i >>> 16);
        return i & 0x3f;
!!!7034498.java!!!	rotateLeft(in i : int, in distance : int) : int
        return (i << distance) | (i >>> -distance);
!!!7034626.java!!!	rotateRight(in i : int, in distance : int) : int
        return (i >>> distance) | (i << -distance);
!!!7034754.java!!!	reverse(in i : int) : int
        // HD, Figure 7-1
        i = (i & 0x55555555) << 1 | (i >>> 1) & 0x55555555;
        i = (i & 0x33333333) << 2 | (i >>> 2) & 0x33333333;
        i = (i & 0x0f0f0f0f) << 4 | (i >>> 4) & 0x0f0f0f0f;
        i = (i << 24) | ((i & 0xff00) << 8) |
            ((i >>> 8) & 0xff00) | (i >>> 24);
        return i;
!!!7034882.java!!!	signum(in i : int) : int
        // HD, Section 2-7
        return (i >> 31) | (-i >>> 31);
!!!7035010.java!!!	reverseBytes(in i : int) : int
        return ((i >>> 24)           ) |
               ((i >>   8) &   0xFF00) |
               ((i <<   8) & 0xFF0000) |
               ((i << 24));
!!!7035138.java!!!	sum(in a : int, in b : int) : int
        return a + b;
!!!7035266.java!!!	max(in a : int, in b : int) : int
        return Math.max(a, b);
!!!7035394.java!!!	min(in a : int, in b : int) : int
        return Math.min(a, b);
