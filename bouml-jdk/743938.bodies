class DTMNodeProxy
!!!5206274.java!!!	DTMNodeProxy(inout dtm : DTM, in node : int)
    this.dtm = dtm;
    this.node = node;
!!!5206402.java!!!	getDTM() : DTM
    return dtm;
!!!5206530.java!!!	getDTMNodeNumber() : int
    return node;
!!!5206658.java!!!	equals(inout node : Node) : boolean

    try
    {
      DTMNodeProxy dtmp = (DTMNodeProxy) node;

      // return (dtmp.node == this.node);
      // Patch attributed to Gary L Peskin <garyp@firstech.com>
      return (dtmp.node == this.node) && (dtmp.dtm == this.dtm);
    }
    catch (ClassCastException cce)
    {
      return false;
    }
!!!5206786.java!!!	equals(inout node : Object) : boolean
      // DTMNodeProxy dtmp = (DTMNodeProxy)node;
      // return (dtmp.node == this.node);
      // Patch attributed to Gary L Peskin <garyp@firstech.com>
      return node instanceof Node && equals((Node) node);
!!!5206914.java!!!	hashCode() : int
      int hash = 7;
      hash = 29 * hash + Objects.hashCode(this.dtm);
      hash = 29 * hash + this.node;
      return hash;
!!!5207042.java!!!	sameNodeAs(inout other : Node) : boolean

    if (!(other instanceof DTMNodeProxy))
      return false;

    DTMNodeProxy that = (DTMNodeProxy) other;

    return this.dtm == that.dtm && this.node == that.node;
!!!5207170.java!!!	getNodeName() : String
    return dtm.getNodeName(node);
!!!5207298.java!!!	getTarget() : String
    return dtm.getNodeName(node);
!!!5207426.java!!!	getLocalName() : String
    return dtm.getLocalName(node);
!!!5207554.java!!!	getPrefix() : String
    return dtm.getPrefix(node);
!!!5207682.java!!!	setPrefix(inout prefix : String) : void
    throw new DTMDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR);
!!!5207810.java!!!	getNamespaceURI() : String
    return dtm.getNamespaceURI(node);
!!!5207938.java!!!	supports(inout feature : String, inout version : String) : boolean
    return implementation.hasFeature(feature,version);
    //throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5208066.java!!!	isSupported(inout feature : String, inout version : String) : boolean
    return implementation.hasFeature(feature,version);
    // throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5208194.java!!!	getNodeValue() : String
    return dtm.getNodeValue(node);
!!!5208322.java!!!	getStringValue() : String
        return dtm.getStringValue(node).toString();
!!!5208450.java!!!	setNodeValue(inout nodeValue : String) : void
    throw new DTMDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR);
!!!5208578.java!!!	getNodeType() : short
    return (short) dtm.getNodeType(node);
!!!5208706.java!!!	getParentNode() : Node

    if (getNodeType() == Node.ATTRIBUTE_NODE)
      return null;

    int newnode = dtm.getParent(node);

    return (newnode == DTM.NULL) ? null : dtm.getNode(newnode);
!!!5208834.java!!!	getOwnerNode() : Node

    int newnode = dtm.getParent(node);

    return (newnode == DTM.NULL) ? null : dtm.getNode(newnode);
!!!5208962.java!!!	getChildNodes() : NodeList

    // Annoyingly, AxisIterators do not currently implement DTMIterator, so
    // we can't just wap DTMNodeList around an Axis.CHILD iterator.
    // Instead, we've created a special-case operating mode for that object.
    return new DTMChildIterNodeList(dtm,node);

    // throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5209090.java!!!	getFirstChild() : Node

    int newnode = dtm.getFirstChild(node);

    return (newnode == DTM.NULL) ? null : dtm.getNode(newnode);
!!!5209218.java!!!	getLastChild() : Node

    int newnode = dtm.getLastChild(node);

    return (newnode == DTM.NULL) ? null : dtm.getNode(newnode);
!!!5209346.java!!!	getPreviousSibling() : Node

    int newnode = dtm.getPreviousSibling(node);

    return (newnode == DTM.NULL) ? null : dtm.getNode(newnode);
!!!5209474.java!!!	getNextSibling() : Node

    // Attr's Next is defined at DTM level, but not at DOM level.
    if (dtm.getNodeType(node) == Node.ATTRIBUTE_NODE)
      return null;

    int newnode = dtm.getNextSibling(node);

    return (newnode == DTM.NULL) ? null : dtm.getNode(newnode);
!!!5209602.java!!!	getAttributes() : NamedNodeMap

    return new DTMNamedNodeMap(dtm, node);
!!!5209730.java!!!	hasAttribute(inout name : String) : boolean
    return DTM.NULL != dtm.getAttributeNode(node,null,name);
!!!5209858.java!!!	hasAttributeNS(inout namespaceURI : String, inout localName : String) : boolean
    return DTM.NULL != dtm.getAttributeNode(node,namespaceURI,localName);
!!!5209986.java!!!	getOwnerDocument() : Document
        // Note that this uses the DOM-compatable version of the call
        return (Document)(dtm.getNode(dtm.getOwnerDocument(node)));
!!!5210114.java!!!	insertBefore(inout newChild : Node, inout refChild : Node) : Node
    throw new DTMDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR);
!!!5210242.java!!!	replaceChild(inout newChild : Node, inout oldChild : Node) : Node
    throw new DTMDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR);
!!!5210370.java!!!	removeChild(inout oldChild : Node) : Node
    throw new DTMDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR);
!!!5210498.java!!!	appendChild(inout newChild : Node) : Node
    throw new DTMDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR);
!!!5210626.java!!!	hasChildNodes() : boolean
    return (DTM.NULL != dtm.getFirstChild(node));
!!!5210754.java!!!	cloneNode(inout deep : boolean) : Node
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5210882.java!!!	getDoctype() : DocumentType
    return null;
!!!5211010.java!!!	getImplementation() : DOMImplementation
    return implementation;
!!!5211138.java!!!	getDocumentElement() : Element
                int dochandle=dtm.getDocument();
                int elementhandle=DTM.NULL;
                for(int kidhandle=dtm.getFirstChild(dochandle);
                                kidhandle!=DTM.NULL;
                                kidhandle=dtm.getNextSibling(kidhandle))
                {
                        switch(dtm.getNodeType(kidhandle))
                        {
                        case Node.ELEMENT_NODE:
                                if(elementhandle!=DTM.NULL)
                                {
                                        elementhandle=DTM.NULL; // More than one; ill-formed.
                                        kidhandle=dtm.getLastChild(dochandle); // End loop
                                }
                                else
                                        elementhandle=kidhandle;
                                break;

                        // These are harmless; document is still wellformed
                        case Node.COMMENT_NODE:
                        case Node.PROCESSING_INSTRUCTION_NODE:
                        case Node.DOCUMENT_TYPE_NODE:
                                break;

                        default:
                                elementhandle=DTM.NULL; // ill-formed
                                kidhandle=dtm.getLastChild(dochandle); // End loop
                                break;
                        }
                }
                if(elementhandle==DTM.NULL)
                        throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
                else
                        return (Element)(dtm.getNode(elementhandle));
!!!5211266.java!!!	createElement(inout tagName : String) : Element
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5211394.java!!!	createDocumentFragment() : DocumentFragment
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5211522.java!!!	createTextNode(inout data : String) : Text
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5211650.java!!!	createComment(inout data : String) : Comment
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5211778.java!!!	createCDATASection(inout data : String) : CDATASection
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5211906.java!!!	createProcessingInstruction(inout target : String, inout data : String) : ProcessingInstruction
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5212034.java!!!	createAttribute(inout name : String) : Attr
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5212162.java!!!	createEntityReference(inout name : String) : EntityReference
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5212290.java!!!	getElementsByTagName(inout tagname : String) : NodeList
       Vector listVector = new Vector();
       Node retNode = dtm.getNode(node);
       if (retNode != null)
       {
         boolean isTagNameWildCard = "*".equals(tagname);
         if (DTM.ELEMENT_NODE == retNode.getNodeType())
         {
           NodeList nodeList = retNode.getChildNodes();
           for (int i = 0; i < nodeList.getLength(); i++)
           {
             traverseChildren(listVector, nodeList.item(i), tagname,
                              isTagNameWildCard);
           }
         } else if (DTM.DOCUMENT_NODE == retNode.getNodeType()) {
           traverseChildren(listVector, dtm.getNode(node), tagname,
                            isTagNameWildCard);
         }
       }
       int size = listVector.size();
       NodeSet nodeSet = new NodeSet(size);
       for (int i = 0; i < size; i++)
       {
         nodeSet.addNode((Node) listVector.elementAt(i));
       }
       return (NodeList) nodeSet;
!!!5212418.java!!!	traverseChildren(inout listVector : Vector, inout tempNode : Node, inout tagname : String, inout isTagNameWildCard : boolean) : void
    if (tempNode == null)
    {
      return;
    }
    else
    {
      if (tempNode.getNodeType() == DTM.ELEMENT_NODE
            && (isTagNameWildCard || tempNode.getNodeName().equals(tagname)))
      {
        listVector.add(tempNode);
      }
      if(tempNode.hasChildNodes())
      {
        NodeList nodeList = tempNode.getChildNodes();
        for (int i = 0; i < nodeList.getLength(); i++)
        {
          traverseChildren(listVector, nodeList.item(i), tagname,
                           isTagNameWildCard);
        }
      }
    }
!!!5212546.java!!!	importNode(inout importedNode : Node, inout deep : boolean) : Node
    throw new DTMDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR);
!!!5212674.java!!!	createElementNS(inout namespaceURI : String, inout qualifiedName : String) : Element
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5212802.java!!!	createAttributeNS(inout namespaceURI : String, inout qualifiedName : String) : Attr
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5212930.java!!!	getElementsByTagNameNS(inout namespaceURI : String, inout localName : String) : NodeList
    Vector listVector = new Vector();
    Node retNode = dtm.getNode(node);
    if (retNode != null)
    {
      boolean isNamespaceURIWildCard = "*".equals(namespaceURI);
      boolean isLocalNameWildCard    = "*".equals(localName);
      if (DTM.ELEMENT_NODE == retNode.getNodeType())
      {
        NodeList nodeList = retNode.getChildNodes();
        for(int i = 0; i < nodeList.getLength(); i++)
        {
          traverseChildren(listVector, nodeList.item(i), namespaceURI, localName, isNamespaceURIWildCard, isLocalNameWildCard);
        }
      }
      else if(DTM.DOCUMENT_NODE == retNode.getNodeType())
      {
        traverseChildren(listVector, dtm.getNode(node), namespaceURI, localName, isNamespaceURIWildCard, isLocalNameWildCard);
      }
    }
    int size = listVector.size();
    NodeSet nodeSet = new NodeSet(size);
    for (int i = 0; i < size; i++)
    {
      nodeSet.addNode((Node)listVector.elementAt(i));
    }
    return (NodeList) nodeSet;
!!!5213058.java!!!	traverseChildren(inout listVector : Vector, inout tempNode : Node, inout namespaceURI : String, inout localname : String, inout isNamespaceURIWildCard : boolean, inout isLocalNameWildCard : boolean) : void
    if (tempNode == null)
    {
      return;
    }
    else
    {
      if (tempNode.getNodeType() == DTM.ELEMENT_NODE
              && (isLocalNameWildCard
                      || tempNode.getLocalName().equals(localname)))
      {
        String nsURI = tempNode.getNamespaceURI();
        if ((namespaceURI == null && nsURI == null)
               || isNamespaceURIWildCard
               || (namespaceURI != null && namespaceURI.equals(nsURI)))
        {
          listVector.add(tempNode);
        }
      }
      if(tempNode.hasChildNodes())
      {
        NodeList nl = tempNode.getChildNodes();
        for(int i = 0; i < nl.getLength(); i++)
        {
          traverseChildren(listVector, nl.item(i), namespaceURI, localname,
                           isNamespaceURIWildCard, isLocalNameWildCard);
        }
      }
    }
!!!5213186.java!!!	getElementById(inout elementId : String) : Element
       return (Element) dtm.getNode(dtm.getElementById(elementId));
!!!5213314.java!!!	splitText(in offset : int) : Text
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5213442.java!!!	getData() : String
    return dtm.getNodeValue(node);
!!!5213570.java!!!	setData(inout data : String) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5213698.java!!!	getLength() : int
    // %OPT% This should do something smarter?
    return dtm.getNodeValue(node).length();
!!!5213826.java!!!	substringData(in offset : int, in count : int) : String
    return getData().substring(offset,offset+count);
!!!5213954.java!!!	appendData(inout arg : String) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5214082.java!!!	insertData(in offset : int, inout arg : String) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5214210.java!!!	deleteData(in offset : int, in count : int) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5214338.java!!!	replaceData(in offset : int, in count : int, inout arg : String) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5214466.java!!!	getTagName() : String
    return dtm.getNodeName(node);
!!!5214594.java!!!	getAttribute(inout name : String) : String
    DTMNamedNodeMap  map = new DTMNamedNodeMap(dtm, node);
    Node n = map.getNamedItem(name);
    return (null == n) ? EMPTYSTRING : n.getNodeValue();
!!!5214722.java!!!	setAttribute(inout name : String, inout value : String) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5214850.java!!!	removeAttribute(inout name : String) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5214978.java!!!	getAttributeNode(inout name : String) : Attr
    DTMNamedNodeMap  map = new DTMNamedNodeMap(dtm, node);
    return (Attr)map.getNamedItem(name);
!!!5215106.java!!!	setAttributeNode(inout newAttr : Attr) : Attr
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5215234.java!!!	removeAttributeNode(inout oldAttr : Attr) : Attr
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5215362.java!!!	hasAttributes() : boolean
    return DTM.NULL != dtm.getFirstAttribute(node);
!!!5215490.java!!!	normalize() : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5215618.java!!!	getAttributeNS(inout namespaceURI : String, inout localName : String) : String
    Node retNode = null;
    int n = dtm.getAttributeNode(node,namespaceURI,localName);
    if(n != DTM.NULL)
            retNode = dtm.getNode(n);
    return (null == retNode) ? EMPTYSTRING : retNode.getNodeValue();
!!!5215746.java!!!	setAttributeNS(inout namespaceURI : String, inout qualifiedName : String, inout value : String) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5215874.java!!!	removeAttributeNS(inout namespaceURI : String, inout localName : String) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5216002.java!!!	getAttributeNodeNS(inout namespaceURI : String, inout localName : String) : Attr
       Attr retAttr = null;
       int n = dtm.getAttributeNode(node,namespaceURI,localName);
       if(n != DTM.NULL)
               retAttr = (Attr) dtm.getNode(n);
       return retAttr;

!!!5216130.java!!!	setAttributeNodeNS(inout newAttr : Attr) : Attr
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5216258.java!!!	getName() : String
    return dtm.getNodeName(node);
!!!5216386.java!!!	getSpecified() : boolean
    // We really don't know which attributes might have come from the
    // source document versus from the DTD. Treat them all as having
    // been provided by the user.
    // %REVIEW% if/when we become aware of DTDs/schemae.
    return true;
!!!5216514.java!!!	getValue() : String
    return dtm.getNodeValue(node);
!!!5216642.java!!!	setValue(inout value : String) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5216770.java!!!	getOwnerElement() : Element
    if (getNodeType() != Node.ATTRIBUTE_NODE)
      return null;
    // In XPath and DTM data models, unlike DOM, an Attr's parent is its
    // owner element.
    int newnode = dtm.getParent(node);
    return (newnode == DTM.NULL) ? null : (Element)(dtm.getNode(newnode));
!!!5216898.java!!!	adoptNode(inout source : Node) : Node
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5217026.java!!!	getInputEncoding() : String
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5217154.java!!!	setEncoding(inout encoding : String) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5217282.java!!!	getStandalone() : boolean
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5217410.java!!!	setStandalone(inout standalone : boolean) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5217538.java!!!	getStrictErrorChecking() : boolean
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5217666.java!!!	setStrictErrorChecking(inout strictErrorChecking : boolean) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5217794.java!!!	getVersion() : String
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5217922.java!!!	setVersion(inout version : String) : void
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
!!!5218562.java!!!	setUserData(inout key : String, inout data : Object, inout handler : UserDataHandler) : Object
        return getOwnerDocument().setUserData( key, data, handler);
!!!5218690.java!!!	getUserData(inout key : String) : Object
        return getOwnerDocument().getUserData( key);
!!!5218818.java!!!	getFeature(inout feature : String, inout version : String) : Object
        // we don't have any alternate node, either this node does the job
        // or we don't have anything that does
        return isSupported(feature, version) ? this : null;
!!!5218946.java!!!	isEqualNode(inout arg : Node) : boolean
        if (arg == this) {
            return true;
        }
        if (arg.getNodeType() != getNodeType()) {
            return false;
        }
        // in theory nodeName can't be null but better be careful
        // who knows what other implementations may be doing?...
        if (getNodeName() == null) {
            if (arg.getNodeName() != null) {
                return false;
            }
        }
        else if (!getNodeName().equals(arg.getNodeName())) {
            return false;
        }

        if (getLocalName() == null) {
            if (arg.getLocalName() != null) {
                return false;
            }
        }
        else if (!getLocalName().equals(arg.getLocalName())) {
            return false;
        }

        if (getNamespaceURI() == null) {
            if (arg.getNamespaceURI() != null) {
                return false;
            }
        }
        else if (!getNamespaceURI().equals(arg.getNamespaceURI())) {
            return false;
        }

        if (getPrefix() == null) {
            if (arg.getPrefix() != null) {
                return false;
            }
        }
        else if (!getPrefix().equals(arg.getPrefix())) {
            return false;
        }

        if (getNodeValue() == null) {
            if (arg.getNodeValue() != null) {
                return false;
            }
        }
        else if (!getNodeValue().equals(arg.getNodeValue())) {
            return false;
        }
    /*
        if (getBaseURI() == null) {
            if (((NodeImpl) arg).getBaseURI() != null) {
                return false;
            }
        }
        else if (!getBaseURI().equals(((NodeImpl) arg).getBaseURI())) {
            return false;
        }
*/

             return true;
!!!5219074.java!!!	lookupNamespaceURI(inout specifiedPrefix : String) : String
        short type = this.getNodeType();
        switch (type) {
        case Node.ELEMENT_NODE : {

                String namespace = this.getNamespaceURI();
                String prefix = this.getPrefix();
                if (namespace !=null) {
                    // REVISIT: is it possible that prefix is empty string?
                    if (specifiedPrefix== null && prefix==specifiedPrefix) {
                        // looking for default namespace
                        return namespace;
                    } else if (prefix != null && prefix.equals(specifiedPrefix)) {
                        // non default namespace
                        return namespace;
                    }
                }
                if (this.hasAttributes()) {
                    NamedNodeMap map = this.getAttributes();
                    int length = map.getLength();
                    for (int i=0;i<length;i++) {
                        Node attr = map.item(i);
                        String attrPrefix = attr.getPrefix();
                        String value = attr.getNodeValue();
                        namespace = attr.getNamespaceURI();
                        if (namespace !=null && namespace.equals("http://www.w3.org/2000/xmlns/")) {
                            // at this point we are dealing with DOM Level 2 nodes only
                            if (specifiedPrefix == null &&
                                attr.getNodeName().equals("xmlns")) {
                                // default namespace
                                return value;
                            } else if (attrPrefix !=null &&
                                       attrPrefix.equals("xmlns") &&
                                       attr.getLocalName().equals(specifiedPrefix)) {
                 // non default namespace
                                return value;
                            }
                        }
                    }
                }
                /*
                NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
                if (ancestor != null) {
                    return ancestor.lookupNamespaceURI(specifiedPrefix);
                }
                */

                return null;


            }
/*
        case Node.DOCUMENT_NODE : {
                return((NodeImpl)((Document)this).getDocumentElement()).lookupNamespaceURI(specifiedPrefix) ;
            }
*/
        case Node.ENTITY_NODE :
        case Node.NOTATION_NODE:
        case Node.DOCUMENT_FRAGMENT_NODE:
        case Node.DOCUMENT_TYPE_NODE:
            // type is unknown
            return null;
        case Node.ATTRIBUTE_NODE:{
                if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {
                    return getOwnerElement().lookupNamespaceURI(specifiedPrefix);

                }
                return null;
            }
        default:{
           /*
                NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
                if (ancestor != null) {
                    return ancestor.lookupNamespaceURI(specifiedPrefix);
                }
             */
                return null;
            }

        }
!!!5219202.java!!!	isDefaultNamespace(inout namespaceURI : String) : boolean
       /*
        // REVISIT: remove casts when DOM L3 becomes REC.
        short type = this.getNodeType();
        switch (type) {
        case Node.ELEMENT_NODE: {
            String namespace = this.getNamespaceURI();
            String prefix = this.getPrefix();

            // REVISIT: is it possible that prefix is empty string?
            if (prefix == null || prefix.length() == 0) {
                if (namespaceURI == null) {
                    return (namespace == namespaceURI);
                }
                return namespaceURI.equals(namespace);
            }
            if (this.hasAttributes()) {
                ElementImpl elem = (ElementImpl)this;
                NodeImpl attr = (NodeImpl)elem.getAttributeNodeNS("http://www.w3.org/2000/xmlns/", "xmlns");
                if (attr != null) {
                    String value = attr.getNodeValue();
                    if (namespaceURI == null) {
                        return (namespace == value);
                    }
                    return namespaceURI.equals(value);
                }
            }

            NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
            if (ancestor != null) {
                return ancestor.isDefaultNamespace(namespaceURI);
            }
            return false;
        }
        case Node.DOCUMENT_NODE:{
                return((NodeImpl)((Document)this).getDocumentElement()).isDefaultNamespace(namespaceURI);
            }

        case Node.ENTITY_NODE :
          case Node.NOTATION_NODE:
        case Node.DOCUMENT_FRAGMENT_NODE:
        case Node.DOCUMENT_TYPE_NODE:
            // type is unknown
            return false;
        case Node.ATTRIBUTE_NODE:{
                if (this.ownerNode.getNodeType() == Node.ELEMENT_NODE) {
                    return ownerNode.isDefaultNamespace(namespaceURI);

                }
                return false;
            }
        default:{
                NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
                if (ancestor != null) {
                    return ancestor.isDefaultNamespace(namespaceURI);
                }
                return false;
            }

        }
*/
        return false;


!!!5219330.java!!!	lookupPrefix(inout namespaceURI : String) : String

        // REVISIT: When Namespaces 1.1 comes out this may not be true
        // Prefix can't be bound to null namespace
        if (namespaceURI == null) {
            return null;
        }

        short type = this.getNodeType();

        switch (type) {
/*
        case Node.ELEMENT_NODE: {

                String namespace = this.getNamespaceURI(); // to flip out children
                return lookupNamespacePrefix(namespaceURI, (ElementImpl)this);
            }

        case Node.DOCUMENT_NODE:{
                return((NodeImpl)((Document)this).getDocumentElement()).lookupPrefix(namespaceURI);
            }
*/
        case Node.ENTITY_NODE :
        case Node.NOTATION_NODE:
        case Node.DOCUMENT_FRAGMENT_NODE:
        case Node.DOCUMENT_TYPE_NODE:
            // type is unknown
            return null;
        case Node.ATTRIBUTE_NODE:{
                if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {
                    return getOwnerElement().lookupPrefix(namespaceURI);

                }
                return null;
            }
        default:{
/*
                NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
                if (ancestor != null) {
                    return ancestor.lookupPrefix(namespaceURI);
                }
*/
                return null;
            }
         }
!!!5219458.java!!!	isSameNode(inout other : Node) : boolean
        // we do not use any wrapper so the answer is obvious
        return this == other;
!!!5219586.java!!!	setTextContent(inout textContent : String) : void
        setNodeValue(textContent);
!!!5219714.java!!!	getTextContent() : String
        return dtm.getStringValue(node).toString();
!!!5219842.java!!!	compareDocumentPosition(inout other : Node) : short
        return 0;
!!!5219970.java!!!	getBaseURI() : String
        return null;
!!!5220098.java!!!	renameNode(inout n : Node, inout namespaceURI : String, inout name : String) : Node
        return n;
!!!5220226.java!!!	normalizeDocument() : void

!!!5220354.java!!!	getDomConfig() : DOMConfiguration
       return null;
!!!5220482.java!!!	setDocumentURI(inout documentURI : String) : void
        fDocumentURI= documentURI;
!!!5220610.java!!!	getDocumentURI() : String
        return fDocumentURI;
!!!5220738.java!!!	getActualEncoding() : String
        return actualEncoding;
!!!5220866.java!!!	setActualEncoding(inout value : String) : void
        actualEncoding = value;
!!!5220994.java!!!	replaceWholeText(inout content : String) : Text
/*

        if (needsSyncData()) {
            synchronizeData();
        }

        // make sure we can make the replacement
        if (!canModify(nextSibling)) {
            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,
                DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null));
        }

        Node parent = this.getParentNode();
        if (content == null || content.length() == 0) {
            // remove current node
            if (parent !=null) { // check if node in the tree
                parent.removeChild(this);
                return null;
            }
        }
        Text currentNode = null;
        if (isReadOnly()){
            Text newNode = this.ownerDocument().createTextNode(content);
            if (parent !=null) { // check if node in the tree
                parent.insertBefore(newNode, this);
                parent.removeChild(this);
                currentNode = newNode;
            } else {
                return newNode;
            }
        }  else {
            this.setData(content);
            currentNode = this;
        }
        Node sibling =  currentNode.getNextSibling();
        while ( sibling !=null) {
            parent.removeChild(sibling);
            sibling = currentNode.getNextSibling();
        }

        return currentNode;
*/
        return null; //Pending
!!!5221122.java!!!	getWholeText() : String

/*
        if (needsSyncData()) {
            synchronizeData();
        }
        if (nextSibling == null) {
            return data;
        }
        StringBuffer buffer = new StringBuffer();
        if (data != null && data.length() != 0) {
            buffer.append(data);
        }
        getWholeText(nextSibling, buffer);
        return buffer.toString();
*/
        return null; // PENDING

!!!5221250.java!!!	isElementContentWhitespace() : boolean
        return false;
!!!5221378.java!!!	setIdAttribute(inout id : boolean) : void
        //PENDING
!!!5221506.java!!!	setIdAttribute(inout name : String, inout makeId : boolean) : void
        //PENDING
!!!5221634.java!!!	setIdAttributeNode(inout at : Attr, inout makeId : boolean) : void
        //PENDING
!!!5221762.java!!!	setIdAttributeNS(inout namespaceURI : String, inout localName : String, inout makeId : boolean) : void
        //PENDING
!!!5221890.java!!!	getSchemaTypeInfo() : TypeInfo
      return null; //PENDING
!!!5222018.java!!!	isId() : boolean
        return false; //PENDING
!!!5222146.java!!!	getXmlEncoding() : String
        return xmlEncoding;
!!!5222274.java!!!	setXmlEncoding(inout xmlEncoding : String) : void
        this.xmlEncoding = xmlEncoding;
!!!5222402.java!!!	getXmlStandalone() : boolean
        return xmlStandalone;
!!!5222530.java!!!	setXmlStandalone(inout xmlStandalone : boolean) : void
        this.xmlStandalone = xmlStandalone;
!!!5222658.java!!!	getXmlVersion() : String
        return xmlVersion;
!!!5222786.java!!!	setXmlVersion(inout xmlVersion : String) : void
        this.xmlVersion = xmlVersion;
