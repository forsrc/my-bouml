format 222
"math" // jdk1.8::java::math
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/math/"
  java_package "java.math"
  classview 130818 "math"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 145794 "BigDecimal"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable, arbitrary-precision signed decimal numbers.  A
{@code BigDecimal} consists of an arbitrary precision integer
<i>unscaled value</i> and a 32-bit integer <i>scale</i>.  If zero
or positive, the scale is the number of digits to the right of the
decimal point.  If negative, the unscaled value of the number is
multiplied by ten to the power of the negation of the scale.  The
value of the number represented by the {@code BigDecimal} is
therefore <tt>(unscaledValue &times; 10<sup>-scale</sup>)</tt>.

<p>The {@code BigDecimal} class provides operations for
arithmetic, scale manipulation, rounding, comparison, hashing, and
format conversion.  The {@link #toString} method provides a
canonical representation of a {@code BigDecimal}.

<p>The {@code BigDecimal} class gives its user complete control
over rounding behavior.  If no rounding mode is specified and the
exact result cannot be represented, an exception is thrown;
otherwise, calculations can be carried out to a chosen precision
and rounding mode by supplying an appropriate {@link MathContext}
object to the operation.  In either case, eight <em>rounding
modes</em> are provided for the control of rounding.  Using the
integer fields in this class (such as {@link #ROUND_HALF_UP}) to
represent rounding mode is largely obsolete; the enumeration values
of the {@code RoundingMode} {@code enum}, (such as {@link
RoundingMode#HALF_UP}) should be used instead.

<p>When a {@code MathContext} object is supplied with a precision
setting of 0 (for example, {@link MathContext#UNLIMITED}),
arithmetic operations are exact, as are the arithmetic methods
which take no {@code MathContext} object.  (This is the only
behavior that was supported in releases prior to 5.)  As a
corollary of computing the exact result, the rounding mode setting
of a {@code MathContext} object with a precision setting of 0 is
not used and thus irrelevant.  In the case of divide, the exact
quotient could have an infinitely long decimal expansion; for
example, 1 divided by 3.  If the quotient has a nonterminating
decimal expansion and the operation is specified to return an exact
result, an {@code ArithmeticException} is thrown.  Otherwise, the
exact result of the division is returned, as done for other
operations.

<p>When the precision setting is not 0, the rules of
{@code BigDecimal} arithmetic are broadly compatible with selected
modes of operation of the arithmetic defined in ANSI X3.274-1996
and ANSI X3.274-1996/AM 1-2000 (section 7.4).  Unlike those
standards, {@code BigDecimal} includes many rounding modes, which
were mandatory for division in {@code BigDecimal} releases prior
to 5.  Any conflicts between these ANSI standards and the
{@code BigDecimal} specification are resolved in favor of
{@code BigDecimal}.

<p>Since the same numerical value can have different
representations (with different scales), the rules of arithmetic
and rounding must specify both the numerical result and the scale
used in the result's representation.


<p>In general the rounding modes and precision setting determine
how operations return results with a limited number of digits when
the exact result has more digits (perhaps infinitely many in the
case of division) than the number of digits returned.

First, the
total number of digits to return is specified by the
{@code MathContext}'s {@code precision} setting; this determines
the result's <i>precision</i>.  The digit count starts from the
leftmost nonzero digit of the exact result.  The rounding mode
determines how any discarded trailing digits affect the returned
result.

<p>For all arithmetic operators , the operation is carried out as
though an exact intermediate result were first calculated and then
rounded to the number of digits specified by the precision setting
(if necessary), using the selected rounding mode.  If the exact
result is not returned, some digit positions of the exact result
are discarded.  When rounding increases the magnitude of the
returned result, it is possible for a new digit position to be
created by a carry propagating to a leading {@literal \"9\"} digit.
For example, rounding the value 999.9 to three digits rounding up
would be numerically equal to one thousand, represented as
100&times;10<sup>1</sup>.  In such cases, the new {@literal \"1\"} is
the leading digit position of the returned result.

<p>Besides a logical exact result, each arithmetic operation has a
preferred scale for representing a result.  The preferred
scale for each operation is listed in the table below.

<table border>
<caption><b>Preferred Scales for Results of Arithmetic Operations
</b></caption>
<tr><th>Operation</th><th>Preferred Scale of Result</th></tr>
<tr><td>Add</td><td>max(addend.scale(), augend.scale())</td>
<tr><td>Subtract</td><td>max(minuend.scale(), subtrahend.scale())</td>
<tr><td>Multiply</td><td>multiplier.scale() + multiplicand.scale()</td>
<tr><td>Divide</td><td>dividend.scale() - divisor.scale()</td>
</table>

These scales are the ones used by the methods which return exact
arithmetic results; except that an exact divide may have to use a
larger scale since the exact result may have more digits.  For
example, {@code 1/32} is {@code 0.03125}.

<p>Before rounding, the scale of the logical exact intermediate
result is the preferred scale for that operation.  If the exact
numerical result cannot be represented in {@code precision}
digits, rounding selects the set of digits to return and the scale
of the result is reduced from the scale of the intermediate result
to the least scale which can represent the {@code precision}
digits actually returned.  If the exact result can be represented
with at most {@code precision} digits, the representation
of the result with the scale closest to the preferred scale is
returned.  In particular, an exactly representable quotient may be
represented in fewer than {@code precision} digits by removing
trailing zeros and decreasing the scale.  For example, rounding to
three digits using the {@linkplain RoundingMode#FLOOR floor}
rounding mode, <br>

{@code 19/100 = 0.19   // integer=19,  scale=2} <br>

but<br>

{@code 21/110 = 0.190  // integer=190, scale=3} <br>

<p>Note that for add, subtract, and multiply, the reduction in
scale will equal the number of digit positions of the exact result
which are discarded. If the rounding causes a carry propagation to
create a new high-order digit position, an additional digit of the
result is discarded than when no new digit position is created.

<p>Other methods may have slightly different rounding semantics.
For example, the result of the {@code pow} method using the
{@linkplain #pow(int, MathContext) specified algorithm} can
occasionally differ from the rounded mathematical result by more
than one unit in the last place, one <i>{@linkplain #ulp() ulp}</i>.

<p>Two types of operations are provided for manipulating the scale
of a {@code BigDecimal}: scaling/rounding operations and decimal
point motion operations.  Scaling/rounding operations ({@link
#setScale setScale} and {@link #round round}) return a
{@code BigDecimal} whose value is approximately (or exactly) equal
to that of the operand, but whose scale or precision is the
specified value; that is, they increase or decrease the precision
of the stored number with minimal effect on its value.  Decimal
point motion operations ({@link #movePointLeft movePointLeft} and
{@link #movePointRight movePointRight}) return a
{@code BigDecimal} created from the operand by moving the decimal
point a specified distance in the specified direction.

<p>For the sake of brevity and clarity, pseudo-code is used
throughout the descriptions of {@code BigDecimal} methods.  The
pseudo-code expression {@code (i + j)} is shorthand for \"a
{@code BigDecimal} whose value is that of the {@code BigDecimal}
{@code i} added to that of the {@code BigDecimal}
{@code j}.\" The pseudo-code expression {@code (i == j)} is
shorthand for \"{@code true} if and only if the
{@code BigDecimal} {@code i} represents the same value as the
{@code BigDecimal} {@code j}.\" Other pseudo-code expressions
are interpreted similarly.  Square brackets are used to represent
the particular {@code BigInteger} and scale pair defining a
{@code BigDecimal} value; for example [19, 2] is the
{@code BigDecimal} numerically equal to 0.19 having a scale of 2.

<p>Note: care should be exercised if {@code BigDecimal} objects
are used as keys in a {@link java.util.SortedMap SortedMap} or
elements in a {@link java.util.SortedSet SortedSet} since
{@code BigDecimal}'s <i>natural ordering</i> is <i>inconsistent
with equals</i>.  See {@link Comparable}, {@link
java.util.SortedMap} or {@link java.util.SortedSet} for more
information.

<p>All methods and constructors for this class throw
{@code NullPointerException} when passed a {@code null} object
reference for any input parameter.

@see     BigInteger
@see     MathContext
@see     RoundingMode
@see     java.util.SortedMap
@see     java.util.SortedSet
@author  Josh Bloch
@author  Mike Cowlishaw
@author  Joseph D. Darcy
@author  Sergey V. Kuksenko
"
      classrelation 3230338 // <generalisation>
	relation 3230338 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3230338 // <generalisation>
	  b parent class_ref 398210 // Number
      end

      classrelation 3230466 // <realization>
	relation 3230466 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3230466 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3230594 // intVal (<unidirectional association>)
	relation 3230594 --->
	  a role_name "intVal" const_relation private
	    comment "
The unscaled value of this BigDecimal, as returned by {@link
#unscaledValue}.

@serial
@see #unscaledValue

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3230594 // intVal (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      attribute 1743618 "scale"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The scale of this BigDecimal, as returned by {@link #scale}.

@serial
@see #scale

 Note: this may have any value, so"
      end

      attribute 1743746 "precision"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " calculations must be done in longs

The number of decimal digits in this BigDecimal, or 0 if the
number of digits are not known (lookaside information).  If
nonzero, the value is guaranteed correct.  Use the precision()
method to obtain and set the value if it might be 0.  This
field is mutable until set nonzero.

@since  1.5

"
      end

      classrelation 3230722 // stringCache (<unidirectional association>)
	relation 3230722 --->
	  a role_name "stringCache" private
	    comment "
Used to store the canonical string representation, if computed.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3230722 // stringCache (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1743874 "INFLATED"
	class_attribute const_attribute package explicit_type "long"
	init_value " Long.MIN_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sentinel value for {@link #intCompact} indicating the
significand information is only available from {@code intVal}.

"
      end

      classrelation 3230850 // INFLATED_BIGINT (<unidirectional association>)
	relation 3230850 --->
	  a role_name "INFLATED_BIGINT" init_value " BigInteger.valueOf(INFLATED)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3230850 // INFLATED_BIGINT (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      attribute 1744002 "intCompact"
	const_attribute private explicit_type "long"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If the absolute value of the significand of this BigDecimal is
less than or equal to {@code Long.MAX_VALUE}, the value can be
compactly stored in this field and used in computations.

"
      end

      attribute 1744130 "MAX_COMPACT_DIGITS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 18"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " All 18-digit base ten strings fit into a long; not all 19-digit
 strings will
"
      end

      attribute 1744258 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6108874887143696463L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Appease the serialization gods 
"
      end

      class 960642 "StringBuilderHelper"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3232002 // sb (<unidirectional association>)
	  relation 3232002 --->
	    a role_name "sb" const_relation package
	      comment " Placeholder for BigDecimal string"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3232002 // sb (<unidirectional association>)
	    b parent class_ref 173058 // StringBuilder
	end

	attribute 1745922 "cmpCharArray"
	  const_attribute package explicit_type "char"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " character array to place the intCompact"
	end

	operation 7380738 "StringBuilderHelper"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7380866 "getStringBuilder"
	  package return_type class_ref 173058 // StringBuilder
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Accessors."
	end

	operation 7380994 "getCompactCharArray"
	  package explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7381122 "putIntCompact"
	  package explicit_return_type "int"
	  nparams 1
	    param in name "intCompact" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Places characters representing the intCompact in {@code long} into
cmpCharArray and returns the offset to the array where the
representation starts.

@param intCompact the number to put into the cmpCharArray.
@return offset to the array where the representation starts.
Note: intCompact must be greater or equal to zero.
"
	end

	attribute 1746050 "DIGIT_TENS"
	  class_attribute const_attribute package explicit_type "char"
	  multiplicity "[]"
	  init_value " {
            '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
            '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
            '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',
            '3', '3', '3', '3', '3', '3', '3', '3', '3', '3',
            '4', '4', '4', '4', '4', '4', '4', '4', '4', '4',
            '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',
            '6', '6', '6', '6', '6', '6', '6', '6', '6', '6',
            '7', '7', '7', '7', '7', '7', '7', '7', '7', '7',
            '8', '8', '8', '8', '8', '8', '8', '8', '8', '8',
            '9', '9', '9', '9', '9', '9', '9', '9', '9', '9',
        }"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1746178 "DIGIT_ONES"
	  class_attribute const_attribute package explicit_type "char"
	  multiplicity "[]"
	  init_value " {
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        }"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 3230978 // threadLocalStringBuilderHelper (<unidirectional association>)
	relation 3230978 --->
	  a role_name "threadLocalStringBuilderHelper" init_value " new ThreadLocal<StringBuilderHelper>() {
        @Override
        protected StringBuilderHelper initialValue() {
            return new StringBuilderHelper();
        }
    }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<StringBuilderHelper> ${name}${value};
"
	    classrelation_ref 3230978 // threadLocalStringBuilderHelper (<unidirectional association>)
	  b parent class_ref 129282 // ThreadLocal
      end

      classrelation 3231106 // zeroThroughTen (<unidirectional association>)
	relation 3231106 --->
	  a role_name "zeroThroughTen" multiplicity "[]" init_value " {
        new BigDecimal(BigInteger.ZERO,       0,  0, 1),
        new BigDecimal(BigInteger.ONE,        1,  0, 1),
        new BigDecimal(BigInteger.valueOf(2), 2,  0, 1),
        new BigDecimal(BigInteger.valueOf(3), 3,  0, 1),
        new BigDecimal(BigInteger.valueOf(4), 4,  0, 1),
        new BigDecimal(BigInteger.valueOf(5), 5,  0, 1),
        new BigDecimal(BigInteger.valueOf(6), 6,  0, 1),
        new BigDecimal(BigInteger.valueOf(7), 7,  0, 1),
        new BigDecimal(BigInteger.valueOf(8), 8,  0, 1),
        new BigDecimal(BigInteger.valueOf(9), 9,  0, 1),
        new BigDecimal(BigInteger.TEN,        10, 0, 2),
    }" class_relation const_relation private
	    comment " Cache of common small BigDecimal values.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3231106 // zeroThroughTen (<unidirectional association>)
	  b parent class_ref 145794 // BigDecimal
      end

      classrelation 3231234 // ZERO_SCALED_BY (<unidirectional association>)
	relation 3231234 --->
	  a role_name "ZERO_SCALED_BY" multiplicity "[]" init_value " {
        zeroThroughTen[0],
        new BigDecimal(BigInteger.ZERO, 0, 1, 1),
        new BigDecimal(BigInteger.ZERO, 0, 2, 1),
        new BigDecimal(BigInteger.ZERO, 0, 3, 1),
        new BigDecimal(BigInteger.ZERO, 0, 4, 1),
        new BigDecimal(BigInteger.ZERO, 0, 5, 1),
        new BigDecimal(BigInteger.ZERO, 0, 6, 1),
        new BigDecimal(BigInteger.ZERO, 0, 7, 1),
        new BigDecimal(BigInteger.ZERO, 0, 8, 1),
        new BigDecimal(BigInteger.ZERO, 0, 9, 1),
        new BigDecimal(BigInteger.ZERO, 0, 10, 1),
        new BigDecimal(BigInteger.ZERO, 0, 11, 1),
        new BigDecimal(BigInteger.ZERO, 0, 12, 1),
        new BigDecimal(BigInteger.ZERO, 0, 13, 1),
        new BigDecimal(BigInteger.ZERO, 0, 14, 1),
        new BigDecimal(BigInteger.ZERO, 0, 15, 1),
    }" class_relation const_relation private
	    comment " Cache of zero scaled by 0 - 15
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3231234 // ZERO_SCALED_BY (<unidirectional association>)
	  b parent class_ref 145794 // BigDecimal
      end

      attribute 1744386 "HALF_LONG_MAX_VALUE"
	class_attribute const_attribute private explicit_type "long"
	init_value " Long.MAX_VALUE / 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Half of Long.MIN_VALUE & Long.MAX_VALUE.
"
      end

      attribute 1744514 "HALF_LONG_MIN_VALUE"
	class_attribute const_attribute private explicit_type "long"
	init_value " Long.MIN_VALUE / 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3231362 // ZERO (<unidirectional association>)
	relation 3231362 --->
	  a role_name "ZERO" init_value "
        zeroThroughTen[0]" class_relation const_relation public
	    comment " Constants

The value 0, with a scale of 0.

@since  1.5

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3231362 // ZERO (<unidirectional association>)
	  b parent class_ref 145794 // BigDecimal
      end

      classrelation 3231490 // ONE (<unidirectional association>)
	relation 3231490 --->
	  a role_name "ONE" init_value "
        zeroThroughTen[1]" class_relation const_relation public
	    comment "
The value 1, with a scale of 0.

@since  1.5

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3231490 // ONE (<unidirectional association>)
	  b parent class_ref 145794 // BigDecimal
      end

      classrelation 3231618 // TEN (<unidirectional association>)
	relation 3231618 --->
	  a role_name "TEN" init_value "
        zeroThroughTen[10]" class_relation const_relation public
	    comment "
The value 10, with a scale of 0.

@since  1.5

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3231618 // TEN (<unidirectional association>)
	  b parent class_ref 145794 // BigDecimal
      end

      operation 7369730 "BigDecimal"
	package explicit_return_type ""
	nparams 4
	  param inout name "intVal" type class_ref 686338 // BigInteger
	  param in name "val" explicit_type "long"
	  param in name "scale" explicit_type "int"
	  param in name "prec" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors

Trusted package private constructor.
Trusted simply means if val is INFLATED, intVal could not be null and
if intVal is null, val could not be INFLATED.
"
      end

      operation 7369858 "BigDecimal"
	public explicit_return_type ""
	nparams 3
	  param inout name "in" explicit_type "char"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a character array representation of a
{@code BigDecimal} into a {@code BigDecimal}, accepting the
same sequence of characters as the {@link #BigDecimal(String)}
constructor, while allowing a sub-array to be specified.

<p>Note that if the sequence of characters is already available
within a character array, using this constructor is faster than
converting the {@code char} array to string and using the
{@code BigDecimal(String)} constructor .

@param  in {@code char} array that is the source of characters.
@param  offset first character in the array to inspect.
@param  len number of characters to consider.
@throws NumberFormatException if {@code in} is not a valid
        representation of a {@code BigDecimal} or the defined subarray
        is not wholly within {@code in}.
@since  1.5
"
      end

      operation 7369986 "BigDecimal"
	public explicit_return_type ""
	nparams 4
	  param inout name "in" explicit_type "char"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a character array representation of a
{@code BigDecimal} into a {@code BigDecimal}, accepting the
same sequence of characters as the {@link #BigDecimal(String)}
constructor, while allowing a sub-array to be specified and
with rounding according to the context settings.

<p>Note that if the sequence of characters is already available
within a character array, using this constructor is faster than
converting the {@code char} array to string and using the
{@code BigDecimal(String)} constructor .

@param  in {@code char} array that is the source of characters.
@param  offset first character in the array to inspect.
@param  len number of characters to consider..
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}.
@throws NumberFormatException if {@code in} is not a valid
        representation of a {@code BigDecimal} or the defined subarray
        is not wholly within {@code in}.
@since  1.5
"
      end

      operation 7370114 "adjustScale"
	private explicit_return_type "int"
	nparams 2
	  param in name "scl" explicit_type "int"
	  param in name "exp" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7370242 "parseExp"
	class_operation private explicit_return_type "long"
	nparams 3
	  param inout name "in" explicit_type "char"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "parse exponent
"
      end

      operation 7370370 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a character array representation of a
{@code BigDecimal} into a {@code BigDecimal}, accepting the
same sequence of characters as the {@link #BigDecimal(String)}
constructor.

<p>Note that if the sequence of characters is already available
as a character array, using this constructor is faster than
converting the {@code char} array to string and using the
{@code BigDecimal(String)} constructor .

@param in {@code char} array that is the source of characters.
@throws NumberFormatException if {@code in} is not a valid
        representation of a {@code BigDecimal}.
@since  1.5
"
      end

      operation 7370498 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" explicit_type "char"
	multiplicity "[]"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a character array representation of a
{@code BigDecimal} into a {@code BigDecimal}, accepting the
same sequence of characters as the {@link #BigDecimal(String)}
constructor and with rounding according to the context
settings.

<p>Note that if the sequence of characters is already available
as a character array, using this constructor is faster than
converting the {@code char} array to string and using the
{@code BigDecimal(String)} constructor .

@param  in {@code char} array that is the source of characters.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}.
@throws NumberFormatException if {@code in} is not a valid
        representation of a {@code BigDecimal}.
@since  1.5
"
      end

      operation 7370626 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the string representation of a {@code BigDecimal}
into a {@code BigDecimal}.  The string representation consists
of an optional sign, {@code '+'} (<tt> '&#92;u002B'</tt>) or
{@code '-'} (<tt>'&#92;u002D'</tt>), followed by a sequence of
zero or more decimal digits (\"the integer\"), optionally
followed by a fraction, optionally followed by an exponent.

<p>The fraction consists of a decimal point followed by zero
or more decimal digits.  The string must contain at least one
digit in either the integer or the fraction.  The number formed
by the sign, the integer and the fraction is referred to as the
<i>significand</i>.

<p>The exponent consists of the character {@code 'e'}
(<tt>'&#92;u0065'</tt>) or {@code 'E'} (<tt>'&#92;u0045'</tt>)
followed by one or more decimal digits.  The value of the
exponent must lie between -{@link Integer#MAX_VALUE} ({@link
Integer#MIN_VALUE}+1) and {@link Integer#MAX_VALUE}, inclusive.

<p>More formally, the strings this constructor accepts are
described by the following grammar:
<blockquote>
<dl>
<dt><i>BigDecimalString:</i>
<dd><i>Sign<sub>opt</sub> Significand Exponent<sub>opt</sub></i>
<dt><i>Sign:</i>
<dd>{@code +}
<dd>{@code -}
<dt><i>Significand:</i>
<dd><i>IntegerPart</i> {@code .} <i>FractionPart<sub>opt</sub></i>
<dd>{@code .} <i>FractionPart</i>
<dd><i>IntegerPart</i>
<dt><i>IntegerPart:</i>
<dd><i>Digits</i>
<dt><i>FractionPart:</i>
<dd><i>Digits</i>
<dt><i>Exponent:</i>
<dd><i>ExponentIndicator SignedInteger</i>
<dt><i>ExponentIndicator:</i>
<dd>{@code e}
<dd>{@code E}
<dt><i>SignedInteger:</i>
<dd><i>Sign<sub>opt</sub> Digits</i>
<dt><i>Digits:</i>
<dd><i>Digit</i>
<dd><i>Digits Digit</i>
<dt><i>Digit:</i>
<dd>any character for which {@link Character#isDigit}
returns {@code true}, including 0, 1, 2 ...
</dl>
</blockquote>

<p>The scale of the returned {@code BigDecimal} will be the
number of digits in the fraction, or zero if the string
contains no decimal point, subject to adjustment for any
exponent; if the string contains an exponent, the exponent is
subtracted from the scale.  The value of the resulting scale
must lie between {@code Integer.MIN_VALUE} and
{@code Integer.MAX_VALUE}, inclusive.

<p>The character-to-digit mapping is provided by {@link
java.lang.Character#digit} set to convert to radix 10.  The
String may not contain any extraneous characters (whitespace,
for example).

<p><b>Examples:</b><br>
The value of the returned {@code BigDecimal} is equal to
<i>significand</i> &times; 10<sup>&nbsp;<i>exponent</i></sup>.
For each string on the left, the resulting representation
[{@code BigInteger}, {@code scale}] is shown on the right.
<pre>
\"0\"            [0,0]
\"0.00\"         [0,2]
\"123\"          [123,0]
\"-123\"         [-123,0]
\"1.23E3\"       [123,-1]
\"1.23E+3\"      [123,-1]
\"12.3E+7\"      [123,-6]
\"12.0\"         [120,1]
\"12.3\"         [123,1]
\"0.00123\"      [123,5]
\"-1.23E-12\"    [-123,14]
\"1234.5E-4\"    [12345,5]
\"0E+7\"         [0,-7]
\"-0\"           [0,0]
</pre>

<p>Note: For values other than {@code float} and
{@code double} NaN and &plusmn;Infinity, this constructor is
compatible with the values returned by {@link Float#toString}
and {@link Double#toString}.  This is generally the preferred
way to convert a {@code float} or {@code double} into a
BigDecimal, as it doesn't suffer from the unpredictability of
the {@link #BigDecimal(double)} constructor.

@param val String representation of {@code BigDecimal}.

@throws NumberFormatException if {@code val} is not a valid
        representation of a {@code BigDecimal}.
"
      end

      operation 7370754 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param inout name "val" type class_ref 128130 // String
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the string representation of a {@code BigDecimal}
into a {@code BigDecimal}, accepting the same strings as the
{@link #BigDecimal(String)} constructor, with rounding
according to the context settings.

@param  val string representation of a {@code BigDecimal}.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}.
@throws NumberFormatException if {@code val} is not a valid
        representation of a BigDecimal.
@since  1.5
"
      end

      operation 7370882 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a {@code double} into a {@code BigDecimal} which
is the exact decimal representation of the {@code double}'s
binary floating-point value.  The scale of the returned
{@code BigDecimal} is the smallest value such that
<tt>(10<sup>scale</sup> &times; val)</tt> is an integer.
<p>
<b>Notes:</b>
<ol>
<li>
The results of this constructor can be somewhat unpredictable.
One might assume that writing {@code new BigDecimal(0.1)} in
Java creates a {@code BigDecimal} which is exactly equal to
0.1 (an unscaled value of 1, with a scale of 1), but it is
actually equal to
0.1000000000000000055511151231257827021181583404541015625.
This is because 0.1 cannot be represented exactly as a
{@code double} (or, for that matter, as a binary fraction of
any finite length).  Thus, the value that is being passed
<i>in</i> to the constructor is not exactly equal to 0.1,
appearances notwithstanding.

<li>
The {@code String} constructor, on the other hand, is
perfectly predictable: writing {@code new BigDecimal(\"0.1\")}
creates a {@code BigDecimal} which is <i>exactly</i> equal to
0.1, as one would expect.  Therefore, it is generally
recommended that the {@linkplain #BigDecimal(String)
<tt>String</tt> constructor} be used in preference to this one.

<li>
When a {@code double} must be used as a source for a
{@code BigDecimal}, note that this constructor provides an
exact conversion; it does not give the same result as
converting the {@code double} to a {@code String} using the
{@link Double#toString(double)} method and then using the
{@link #BigDecimal(String)} constructor.  To get that result,
use the {@code static} {@link #valueOf(double)} method.
</ol>

@param val {@code double} value to be converted to
       {@code BigDecimal}.
@throws NumberFormatException if {@code val} is infinite or NaN.
"
      end

      operation 7371010 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param in name "val" explicit_type "double"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a {@code double} into a {@code BigDecimal}, with
rounding according to the context settings.  The scale of the
{@code BigDecimal} is the smallest value such that
<tt>(10<sup>scale</sup> &times; val)</tt> is an integer.

<p>The results of this constructor can be somewhat unpredictable
and its use is generally not recommended; see the notes under
the {@link #BigDecimal(double)} constructor.

@param  val {@code double} value to be converted to
        {@code BigDecimal}.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        RoundingMode is UNNECESSARY.
@throws NumberFormatException if {@code val} is infinite or NaN.
@since  1.5
"
      end

      operation 7371138 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a {@code BigInteger} into a {@code BigDecimal}.
The scale of the {@code BigDecimal} is zero.

@param val {@code BigInteger} value to be converted to
           {@code BigDecimal}.
"
      end

      operation 7371266 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param inout name "val" type class_ref 686338 // BigInteger
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a {@code BigInteger} into a {@code BigDecimal}
rounding according to the context settings.  The scale of the
{@code BigDecimal} is zero.

@param val {@code BigInteger} value to be converted to
           {@code BigDecimal}.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}.
@since  1.5
"
      end

      operation 7371394 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param inout name "unscaledVal" type class_ref 686338 // BigInteger
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a {@code BigInteger} unscaled value and an
{@code int} scale into a {@code BigDecimal}.  The value of
the {@code BigDecimal} is
<tt>(unscaledVal &times; 10<sup>-scale</sup>)</tt>.

@param unscaledVal unscaled value of the {@code BigDecimal}.
@param scale scale of the {@code BigDecimal}.
"
      end

      operation 7371522 "BigDecimal"
	public explicit_return_type ""
	nparams 3
	  param inout name "unscaledVal" type class_ref 686338 // BigInteger
	  param in name "scale" explicit_type "int"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a {@code BigInteger} unscaled value and an
{@code int} scale into a {@code BigDecimal}, with rounding
according to the context settings.  The value of the
{@code BigDecimal} is <tt>(unscaledVal &times;
10<sup>-scale</sup>)</tt>, rounded according to the
{@code precision} and rounding mode settings.

@param  unscaledVal unscaled value of the {@code BigDecimal}.
@param  scale scale of the {@code BigDecimal}.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}.
@since  1.5
"
      end

      operation 7371650 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates an {@code int} into a {@code BigDecimal}.  The
scale of the {@code BigDecimal} is zero.

@param val {@code int} value to be converted to
           {@code BigDecimal}.
@since  1.5
"
      end

      operation 7371778 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param in name "val" explicit_type "int"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates an {@code int} into a {@code BigDecimal}, with
rounding according to the context settings.  The scale of the
{@code BigDecimal}, before any rounding, is zero.

@param  val {@code int} value to be converted to {@code BigDecimal}.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}.
@since  1.5
"
      end

      operation 7371906 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a {@code long} into a {@code BigDecimal}.  The
scale of the {@code BigDecimal} is zero.

@param val {@code long} value to be converted to {@code BigDecimal}.
@since  1.5
"
      end

      operation 7372034 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param in name "val" explicit_type "long"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a {@code long} into a {@code BigDecimal}, with
rounding according to the context settings.  The scale of the
{@code BigDecimal}, before any rounding, is zero.

@param  val {@code long} value to be converted to {@code BigDecimal}.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}.
@since  1.5
"
      end

      operation 7372162 "valueOf"
	class_operation public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param in name "unscaledVal" explicit_type "long"
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Static Factory Methods

Translates a {@code long} unscaled value and an
{@code int} scale into a {@code BigDecimal}.  This
{@literal \"static factory method\"} is provided in preference to
a ({@code long}, {@code int}) constructor because it
allows for reuse of frequently used {@code BigDecimal} values..

@param unscaledVal unscaled value of the {@code BigDecimal}.
@param scale scale of the {@code BigDecimal}.
@return a {@code BigDecimal} whose value is
        <tt>(unscaledVal &times; 10<sup>-scale</sup>)</tt>.
"
      end

      operation 7372290 "valueOf"
	class_operation public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a {@code long} value into a {@code BigDecimal}
with a scale of zero.  This {@literal \"static factory method\"}
is provided in preference to a ({@code long}) constructor
because it allows for reuse of frequently used
{@code BigDecimal} values.

@param val value of the {@code BigDecimal}.
@return a {@code BigDecimal} whose value is {@code val}.
"
      end

      operation 7372418 "valueOf"
	class_operation package return_type class_ref 145794 // BigDecimal
	nparams 3
	  param in name "unscaledVal" explicit_type "long"
	  param in name "scale" explicit_type "int"
	  param in name "prec" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7372546 "valueOf"
	class_operation package return_type class_ref 145794 // BigDecimal
	nparams 3
	  param inout name "intVal" type class_ref 686338 // BigInteger
	  param in name "scale" explicit_type "int"
	  param in name "prec" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7372674 "zeroValueOf"
	class_operation package return_type class_ref 145794 // BigDecimal
	nparams 1
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7372802 "valueOf"
	class_operation public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a {@code double} into a {@code BigDecimal}, using
the {@code double}'s canonical string representation provided
by the {@link Double#toString(double)} method.

<p><b>Note:</b> This is generally the preferred way to convert
a {@code double} (or {@code float}) into a
{@code BigDecimal}, as the value returned is equal to that
resulting from constructing a {@code BigDecimal} from the
result of using {@link Double#toString(double)}.

@param  val {@code double} to convert to a {@code BigDecimal}.
@return a {@code BigDecimal} whose value is equal to or approximately
        equal to the value of {@code val}.
@throws NumberFormatException if {@code val} is infinite or NaN.
@since  1.5
"
      end

      operation 7372930 "add"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "augend" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Arithmetic Operations

Returns a {@code BigDecimal} whose value is {@code (this +
augend)}, and whose scale is {@code max(this.scale(),
augend.scale())}.

@param  augend value to be added to this {@code BigDecimal}.
@return {@code this + augend}
"
      end

      operation 7373058 "add"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param inout name "augend" type class_ref 145794 // BigDecimal
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (this + augend)},
with rounding according to the context settings.

If either number is zero and the precision setting is nonzero then
the other number, rounded if necessary, is used as the result.

@param  augend value to be added to this {@code BigDecimal}.
@param  mc the context to use.
@return {@code this + augend}, rounded as necessary.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}.
@since  1.5
"
      end

      operation 7373186 "preAlign"
	private return_type class_ref 145794 // BigDecimal
	nparams 4
	  param inout name "lhs" type class_ref 145794 // BigDecimal
	  param inout name "augend" type class_ref 145794 // BigDecimal
	  param in name "padding" explicit_type "long"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of length two, the sum of whose entries is
equal to the rounded sum of the {@code BigDecimal} arguments.

<p>If the digit positions of the arguments have a sufficient
gap between them, the value smaller in magnitude can be
condensed into a {@literal \"sticky bit\"} and the end result will
round the same way <em>if</em> the precision of the final
result does not include the high order digit of the small
magnitude operand.

<p>Note that while strictly speaking this is an optimization,
it makes a much wider range of additions practical.

<p>This corresponds to a pre-shift operation in a fixed
precision floating-point adder; this method is complicated by
variable precision of the result as determined by the
MathContext.  A more nuanced operation could implement a
{@literal \"right shift\"} on the smaller magnitude operand so
that the number of digits of the smaller operand could be
reduced even though the significands partially overlapped.
"
      end

      operation 7373314 "subtract"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "subtrahend" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (this -
subtrahend)}, and whose scale is {@code max(this.scale(),
subtrahend.scale())}.

@param  subtrahend value to be subtracted from this {@code BigDecimal}.
@return {@code this - subtrahend}
"
      end

      operation 7373442 "subtract"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param inout name "subtrahend" type class_ref 145794 // BigDecimal
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (this - subtrahend)},
with rounding according to the context settings.

If {@code subtrahend} is zero then this, rounded if necessary, is used as the
result.  If this is zero then the result is {@code subtrahend.negate(mc)}.

@param  subtrahend value to be subtracted from this {@code BigDecimal}.
@param  mc the context to use.
@return {@code this - subtrahend}, rounded as necessary.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}.
@since  1.5
"
      end

      operation 7373570 "multiply"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "multiplicand" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is <tt>(this &times;
multiplicand)</tt>, and whose scale is {@code (this.scale() +
multiplicand.scale())}.

@param  multiplicand value to be multiplied by this {@code BigDecimal}.
@return {@code this * multiplicand}
"
      end

      operation 7373698 "multiply"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param inout name "multiplicand" type class_ref 145794 // BigDecimal
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is <tt>(this &times;
multiplicand)</tt>, with rounding according to the context settings.

@param  multiplicand value to be multiplied by this {@code BigDecimal}.
@param  mc the context to use.
@return {@code this * multiplicand}, rounded as necessary.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}.
@since  1.5
"
      end

      operation 7373826 "divide"
	public return_type class_ref 145794 // BigDecimal
	nparams 3
	  param inout name "divisor" type class_ref 145794 // BigDecimal
	  param in name "scale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (this /
divisor)}, and whose scale is as specified.  If rounding must
be performed to generate a result with the specified scale, the
specified rounding mode is applied.

<p>The new {@link #divide(BigDecimal, int, RoundingMode)} method
should be used in preference to this legacy method.

@param  divisor value by which this {@code BigDecimal} is to be divided.
@param  scale scale of the {@code BigDecimal} quotient to be returned.
@param  roundingMode rounding mode to apply.
@return {@code this / divisor}
@throws ArithmeticException if {@code divisor} is zero,
        {@code roundingMode==ROUND_UNNECESSARY} and
        the specified scale is insufficient to represent the result
        of the division exactly.
@throws IllegalArgumentException if {@code roundingMode} does not
        represent a valid rounding mode.
@see    #ROUND_UP
@see    #ROUND_DOWN
@see    #ROUND_CEILING
@see    #ROUND_FLOOR
@see    #ROUND_HALF_UP
@see    #ROUND_HALF_DOWN
@see    #ROUND_HALF_EVEN
@see    #ROUND_UNNECESSARY
"
      end

      operation 7373954 "divide"
	public return_type class_ref 145794 // BigDecimal
	nparams 3
	  param inout name "divisor" type class_ref 145794 // BigDecimal
	  param in name "scale" explicit_type "int"
	  param inout name "roundingMode" type class_ref 960898 // RoundingMode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (this /
divisor)}, and whose scale is as specified.  If rounding must
be performed to generate a result with the specified scale, the
specified rounding mode is applied.

@param  divisor value by which this {@code BigDecimal} is to be divided.
@param  scale scale of the {@code BigDecimal} quotient to be returned.
@param  roundingMode rounding mode to apply.
@return {@code this / divisor}
@throws ArithmeticException if {@code divisor} is zero,
        {@code roundingMode==RoundingMode.UNNECESSARY} and
        the specified scale is insufficient to represent the result
        of the division exactly.
@since 1.5
"
      end

      operation 7374082 "divide"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 145794 // BigDecimal
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (this /
divisor)}, and whose scale is {@code this.scale()}.  If
rounding must be performed to generate a result with the given
scale, the specified rounding mode is applied.

<p>The new {@link #divide(BigDecimal, RoundingMode)} method
should be used in preference to this legacy method.

@param  divisor value by which this {@code BigDecimal} is to be divided.
@param  roundingMode rounding mode to apply.
@return {@code this / divisor}
@throws ArithmeticException if {@code divisor==0}, or
        {@code roundingMode==ROUND_UNNECESSARY} and
        {@code this.scale()} is insufficient to represent the result
        of the division exactly.
@throws IllegalArgumentException if {@code roundingMode} does not
        represent a valid rounding mode.
@see    #ROUND_UP
@see    #ROUND_DOWN
@see    #ROUND_CEILING
@see    #ROUND_FLOOR
@see    #ROUND_HALF_UP
@see    #ROUND_HALF_DOWN
@see    #ROUND_HALF_EVEN
@see    #ROUND_UNNECESSARY
"
      end

      operation 7374210 "divide"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 145794 // BigDecimal
	  param inout name "roundingMode" type class_ref 960898 // RoundingMode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (this /
divisor)}, and whose scale is {@code this.scale()}.  If
rounding must be performed to generate a result with the given
scale, the specified rounding mode is applied.

@param  divisor value by which this {@code BigDecimal} is to be divided.
@param  roundingMode rounding mode to apply.
@return {@code this / divisor}
@throws ArithmeticException if {@code divisor==0}, or
        {@code roundingMode==RoundingMode.UNNECESSARY} and
        {@code this.scale()} is insufficient to represent the result
        of the division exactly.
@since 1.5
"
      end

      operation 7374338 "divide"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "divisor" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (this /
divisor)}, and whose preferred scale is {@code (this.scale() -
divisor.scale())}; if the exact quotient cannot be
represented (because it has a non-terminating decimal
expansion) an {@code ArithmeticException} is thrown.

@param  divisor value by which this {@code BigDecimal} is to be divided.
@throws ArithmeticException if the exact quotient does not have a
        terminating decimal expansion
@return {@code this / divisor}
@since 1.5
@author Joseph D. Darcy
"
      end

      operation 7374466 "divide"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 145794 // BigDecimal
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (this /
divisor)}, with rounding according to the context settings.

@param  divisor value by which this {@code BigDecimal} is to be divided.
@param  mc the context to use.
@return {@code this / divisor}, rounded as necessary.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY} or
        {@code mc.precision == 0} and the quotient has a
        non-terminating decimal expansion.
@since  1.5
"
      end

      operation 7374594 "divideToIntegralValue"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "divisor" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is the integer part
of the quotient {@code (this / divisor)} rounded down.  The
preferred scale of the result is {@code (this.scale() -
divisor.scale())}.

@param  divisor value by which this {@code BigDecimal} is to be divided.
@return The integer part of {@code this / divisor}.
@throws ArithmeticException if {@code divisor==0}
@since  1.5
"
      end

      operation 7374722 "divideToIntegralValue"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 145794 // BigDecimal
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is the integer part
of {@code (this / divisor)}.  Since the integer part of the
exact quotient does not depend on the rounding mode, the
rounding mode does not affect the values returned by this
method.  The preferred scale of the result is
{@code (this.scale() - divisor.scale())}.  An
{@code ArithmeticException} is thrown if the integer part of
the exact quotient needs more than {@code mc.precision}
digits.

@param  divisor value by which this {@code BigDecimal} is to be divided.
@param  mc the context to use.
@return The integer part of {@code this / divisor}.
@throws ArithmeticException if {@code divisor==0}
@throws ArithmeticException if {@code mc.precision} {@literal >} 0 and the result
        requires a precision of more than {@code mc.precision} digits.
@since  1.5
@author Joseph D. Darcy
"
      end

      operation 7374850 "remainder"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "divisor" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (this % divisor)}.

<p>The remainder is given by
{@code this.subtract(this.divideToIntegralValue(divisor).multiply(divisor))}.
Note that this is not the modulo operation (the result can be
negative).

@param  divisor value by which this {@code BigDecimal} is to be divided.
@return {@code this % divisor}.
@throws ArithmeticException if {@code divisor==0}
@since  1.5
"
      end

      operation 7374978 "remainder"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 145794 // BigDecimal
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (this %
divisor)}, with rounding according to the context settings.
The {@code MathContext} settings affect the implicit divide
used to compute the remainder.  The remainder computation
itself is by definition exact.  Therefore, the remainder may
contain more than {@code mc.getPrecision()} digits.

<p>The remainder is given by
{@code this.subtract(this.divideToIntegralValue(divisor,
mc).multiply(divisor))}.  Note that this is not the modulo
operation (the result can be negative).

@param  divisor value by which this {@code BigDecimal} is to be divided.
@param  mc the context to use.
@return {@code this % divisor}, rounded as necessary.
@throws ArithmeticException if {@code divisor==0}
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}, or {@code mc.precision}
        {@literal >} 0 and the result of {@code this.divideToIntgralValue(divisor)} would
        require a precision of more than {@code mc.precision} digits.
@see    #divideToIntegralValue(java.math.BigDecimal, java.math.MathContext)
@since  1.5
"
      end

      operation 7375106 "divideAndRemainder"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "divisor" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a two-element {@code BigDecimal} array containing the
result of {@code divideToIntegralValue} followed by the result of
{@code remainder} on the two operands.

<p>Note that if both the integer quotient and remainder are
needed, this method is faster than using the
{@code divideToIntegralValue} and {@code remainder} methods
separately because the division need only be carried out once.

@param  divisor value by which this {@code BigDecimal} is to be divided,
        and the remainder computed.
@return a two element {@code BigDecimal} array: the quotient
        (the result of {@code divideToIntegralValue}) is the initial element
        and the remainder is the final element.
@throws ArithmeticException if {@code divisor==0}
@see    #divideToIntegralValue(java.math.BigDecimal, java.math.MathContext)
@see    #remainder(java.math.BigDecimal, java.math.MathContext)
@since  1.5
"
      end

      operation 7375234 "divideAndRemainder"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 145794 // BigDecimal
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a two-element {@code BigDecimal} array containing the
result of {@code divideToIntegralValue} followed by the result of
{@code remainder} on the two operands calculated with rounding
according to the context settings.

<p>Note that if both the integer quotient and remainder are
needed, this method is faster than using the
{@code divideToIntegralValue} and {@code remainder} methods
separately because the division need only be carried out once.

@param  divisor value by which this {@code BigDecimal} is to be divided,
        and the remainder computed.
@param  mc the context to use.
@return a two element {@code BigDecimal} array: the quotient
        (the result of {@code divideToIntegralValue}) is the
        initial element and the remainder is the final element.
@throws ArithmeticException if {@code divisor==0}
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}, or {@code mc.precision}
        {@literal >} 0 and the result of {@code this.divideToIntgralValue(divisor)} would
        require a precision of more than {@code mc.precision} digits.
@see    #divideToIntegralValue(java.math.BigDecimal, java.math.MathContext)
@see    #remainder(java.math.BigDecimal, java.math.MathContext)
@since  1.5
"
      end

      operation 7375362 "pow"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is
<tt>(this<sup>n</sup>)</tt>, The power is computed exactly, to
unlimited precision.

<p>The parameter {@code n} must be in the range 0 through
999999999, inclusive.  {@code ZERO.pow(0)} returns {@link
#ONE}.

Note that future releases may expand the allowable exponent
range of this method.

@param  n power to raise this {@code BigDecimal} to.
@return <tt>this<sup>n</sup></tt>
@throws ArithmeticException if {@code n} is out of range.
@since  1.5
"
      end

      operation 7375490 "pow"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param in name "n" explicit_type "int"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is
<tt>(this<sup>n</sup>)</tt>.  The current implementation uses
the core algorithm defined in ANSI standard X3.274-1996 with
rounding according to the context settings.  In general, the
returned numerical value is within two ulps of the exact
numerical value for the chosen precision.  Note that future
releases may use a different algorithm with a decreased
allowable error bound and increased allowable exponent range.

<p>The X3.274-1996 algorithm is:

<ul>
<li> An {@code ArithmeticException} exception is thrown if
 <ul>
   <li>{@code abs(n) > 999999999}
   <li>{@code mc.precision == 0} and {@code n < 0}
   <li>{@code mc.precision > 0} and {@code n} has more than
   {@code mc.precision} decimal digits
 </ul>

<li> if {@code n} is zero, {@link #ONE} is returned even if
{@code this} is zero, otherwise
<ul>
  <li> if {@code n} is positive, the result is calculated via
  the repeated squaring technique into a single accumulator.
  The individual multiplications with the accumulator use the
  same math context settings as in {@code mc} except for a
  precision increased to {@code mc.precision + elength + 1}
  where {@code elength} is the number of decimal digits in
  {@code n}.

  <li> if {@code n} is negative, the result is calculated as if
  {@code n} were positive; this value is then divided into one
  using the working precision specified above.

  <li> The final value from either the positive or negative case
  is then rounded to the destination precision.
  </ul>
</ul>

@param  n power to raise this {@code BigDecimal} to.
@param  mc the context to use.
@return <tt>this<sup>n</sup></tt> using the ANSI standard X3.274-1996
        algorithm
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}, or {@code n} is out
        of range.
@since  1.5
"
      end

      operation 7375618 "abs"
	public return_type class_ref 145794 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is the absolute value
of this {@code BigDecimal}, and whose scale is
{@code this.scale()}.

@return {@code abs(this)}
"
      end

      operation 7375746 "abs"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is the absolute value
of this {@code BigDecimal}, with rounding according to the
context settings.

@param mc the context to use.
@return {@code abs(this)}, rounded as necessary.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}.
@since 1.5
"
      end

      operation 7375874 "negate"
	public return_type class_ref 145794 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (-this)},
and whose scale is {@code this.scale()}.

@return {@code -this}.
"
      end

      operation 7376002 "negate"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (-this)},
with rounding according to the context settings.

@param mc the context to use.
@return {@code -this}, rounded as necessary.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}.
@since  1.5
"
      end

      operation 7376130 "plus"
	public return_type class_ref 145794 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (+this)}, and whose
scale is {@code this.scale()}.

<p>This method, which simply returns this {@code BigDecimal}
is included for symmetry with the unary minus method {@link
#negate()}.

@return {@code this}.
@see #negate()
@since  1.5
"
      end

      operation 7376258 "plus"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (+this)},
with rounding according to the context settings.

<p>The effect of this method is identical to that of the {@link
#round(MathContext)} method.

@param mc the context to use.
@return {@code this}, rounded as necessary.  A zero result will
        have a scale of 0.
@throws ArithmeticException if the result is inexact but the
        rounding mode is {@code UNNECESSARY}.
@see    #round(MathContext)
@since  1.5
"
      end

      operation 7376386 "signum"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signum function of this {@code BigDecimal}.

@return -1, 0, or 1 as the value of this {@code BigDecimal}
        is negative, zero, or positive.
"
      end

      operation 7376514 "scale"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <i>scale</i> of this {@code BigDecimal}.  If zero
or positive, the scale is the number of digits to the right of
the decimal point.  If negative, the unscaled value of the
number is multiplied by ten to the power of the negation of the
scale.  For example, a scale of {@code -3} means the unscaled
value is multiplied by 1000.

@return the scale of this {@code BigDecimal}.
"
      end

      operation 7376642 "precision"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <i>precision</i> of this {@code BigDecimal}.  (The
precision is the number of digits in the unscaled value.)

<p>The precision of a zero value is 1.

@return the precision of this {@code BigDecimal}.
@since  1.5
"
      end

      operation 7376770 "unscaledValue"
	public return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is the <i>unscaled
value</i> of this {@code BigDecimal}.  (Computes <tt>(this *
10<sup>this.scale()</sup>)</tt>.)

@return the unscaled value of this {@code BigDecimal}.
@since  1.2
"
      end

      attribute 1744642 "ROUND_UP"
	class_attribute const_attribute public explicit_type "int"
	init_value "           0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Rounding Modes

Rounding mode to round away from zero.  Always increments the
digit prior to a nonzero discarded fraction.  Note that this rounding
mode never decreases the magnitude of the calculated value.

"
      end

      attribute 1744770 "ROUND_DOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value "         1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to round towards zero.  Never increments the digit
prior to a discarded fraction (i.e., truncates).  Note that this
rounding mode never increases the magnitude of the calculated value.

"
      end

      attribute 1744898 "ROUND_CEILING"
	class_attribute const_attribute public explicit_type "int"
	init_value "      2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to round towards positive infinity.  If the
{@code BigDecimal} is positive, behaves as for
{@code ROUND_UP}; if negative, behaves as for
{@code ROUND_DOWN}.  Note that this rounding mode never
decreases the calculated value.

"
      end

      attribute 1745026 "ROUND_FLOOR"
	class_attribute const_attribute public explicit_type "int"
	init_value "        3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to round towards negative infinity.  If the
{@code BigDecimal} is positive, behave as for
{@code ROUND_DOWN}; if negative, behave as for
{@code ROUND_UP}.  Note that this rounding mode never
increases the calculated value.

"
      end

      attribute 1745154 "ROUND_HALF_UP"
	class_attribute const_attribute public explicit_type "int"
	init_value "      4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to round towards {@literal \"nearest neighbor\"}
unless both neighbors are equidistant, in which case round up.
Behaves as for {@code ROUND_UP} if the discarded fraction is
&ge; 0.5; otherwise, behaves as for {@code ROUND_DOWN}.  Note
that this is the rounding mode that most of us were taught in
grade school.

"
      end

      attribute 1745282 "ROUND_HALF_DOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value "    5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to round towards {@literal \"nearest neighbor\"}
unless both neighbors are equidistant, in which case round
down.  Behaves as for {@code ROUND_UP} if the discarded
fraction is {@literal >} 0.5; otherwise, behaves as for
{@code ROUND_DOWN}.

"
      end

      attribute 1745410 "ROUND_HALF_EVEN"
	class_attribute const_attribute public explicit_type "int"
	init_value "    6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to round towards the {@literal \"nearest neighbor\"}
unless both neighbors are equidistant, in which case, round
towards the even neighbor.  Behaves as for
{@code ROUND_HALF_UP} if the digit to the left of the
discarded fraction is odd; behaves as for
{@code ROUND_HALF_DOWN} if it's even.  Note that this is the
rounding mode that minimizes cumulative error when applied
repeatedly over a sequence of calculations.

"
      end

      attribute 1745538 "ROUND_UNNECESSARY"
	class_attribute const_attribute public explicit_type "int"
	init_value "  7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to assert that the requested operation has an exact
result, hence no rounding is necessary.  If this rounding mode is
specified on an operation that yields an inexact result, an
{@code ArithmeticException} is thrown.

"
      end

      operation 7376898 "round"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Scaling/Rounding Operations

Returns a {@code BigDecimal} rounded according to the
{@code MathContext} settings.  If the precision setting is 0 then
no rounding takes place.

<p>The effect of this method is identical to that of the
{@link #plus(MathContext)} method.

@param mc the context to use.
@return a {@code BigDecimal} rounded according to the
        {@code MathContext} settings.
@throws ArithmeticException if the rounding mode is
        {@code UNNECESSARY} and the
        {@code BigDecimal}  operation would require rounding.
@see    #plus(MathContext)
@since  1.5
"
      end

      operation 7377026 "setScale"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param in name "newScale" explicit_type "int"
	  param inout name "roundingMode" type class_ref 960898 // RoundingMode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose scale is the specified
value, and whose unscaled value is determined by multiplying or
dividing this {@code BigDecimal}'s unscaled value by the
appropriate power of ten to maintain its overall value.  If the
scale is reduced by the operation, the unscaled value must be
divided (rather than multiplied), and the value may be changed;
in this case, the specified rounding mode is applied to the
division.

<p>Note that since BigDecimal objects are immutable, calls of
this method do <i>not</i> result in the original object being
modified, contrary to the usual convention of having methods
named <tt>set<i>X</i></tt> mutate field <i>{@code X}</i>.
Instead, {@code setScale} returns an object with the proper
scale; the returned object may or may not be newly allocated.

@param  newScale scale of the {@code BigDecimal} value to be returned.
@param  roundingMode The rounding mode to apply.
@return a {@code BigDecimal} whose scale is the specified value,
        and whose unscaled value is determined by multiplying or
        dividing this {@code BigDecimal}'s unscaled value by the
        appropriate power of ten to maintain its overall value.
@throws ArithmeticException if {@code roundingMode==UNNECESSARY}
        and the specified scaling operation would require
        rounding.
@see    RoundingMode
@since  1.5
"
      end

      operation 7377154 "setScale"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param in name "newScale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose scale is the specified
value, and whose unscaled value is determined by multiplying or
dividing this {@code BigDecimal}'s unscaled value by the
appropriate power of ten to maintain its overall value.  If the
scale is reduced by the operation, the unscaled value must be
divided (rather than multiplied), and the value may be changed;
in this case, the specified rounding mode is applied to the
division.

<p>Note that since BigDecimal objects are immutable, calls of
this method do <i>not</i> result in the original object being
modified, contrary to the usual convention of having methods
named <tt>set<i>X</i></tt> mutate field <i>{@code X}</i>.
Instead, {@code setScale} returns an object with the proper
scale; the returned object may or may not be newly allocated.

<p>The new {@link #setScale(int, RoundingMode)} method should
be used in preference to this legacy method.

@param  newScale scale of the {@code BigDecimal} value to be returned.
@param  roundingMode The rounding mode to apply.
@return a {@code BigDecimal} whose scale is the specified value,
        and whose unscaled value is determined by multiplying or
        dividing this {@code BigDecimal}'s unscaled value by the
        appropriate power of ten to maintain its overall value.
@throws ArithmeticException if {@code roundingMode==ROUND_UNNECESSARY}
        and the specified scaling operation would require
        rounding.
@throws IllegalArgumentException if {@code roundingMode} does not
        represent a valid rounding mode.
@see    #ROUND_UP
@see    #ROUND_DOWN
@see    #ROUND_CEILING
@see    #ROUND_FLOOR
@see    #ROUND_HALF_UP
@see    #ROUND_HALF_DOWN
@see    #ROUND_HALF_EVEN
@see    #ROUND_UNNECESSARY
"
      end

      operation 7377282 "setScale"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param in name "newScale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose scale is the specified
value, and whose value is numerically equal to this
{@code BigDecimal}'s.  Throws an {@code ArithmeticException}
if this is not possible.

<p>This call is typically used to increase the scale, in which
case it is guaranteed that there exists a {@code BigDecimal}
of the specified scale and the correct value.  The call can
also be used to reduce the scale if the caller knows that the
{@code BigDecimal} has sufficiently many zeros at the end of
its fractional part (i.e., factors of ten in its integer value)
to allow for the rescaling without changing its value.

<p>This method returns the same result as the two-argument
versions of {@code setScale}, but saves the caller the trouble
of specifying a rounding mode in cases where it is irrelevant.

<p>Note that since {@code BigDecimal} objects are immutable,
calls of this method do <i>not</i> result in the original
object being modified, contrary to the usual convention of
having methods named <tt>set<i>X</i></tt> mutate field
<i>{@code X}</i>.  Instead, {@code setScale} returns an
object with the proper scale; the returned object may or may
not be newly allocated.

@param  newScale scale of the {@code BigDecimal} value to be returned.
@return a {@code BigDecimal} whose scale is the specified value, and
        whose unscaled value is determined by multiplying or dividing
        this {@code BigDecimal}'s unscaled value by the appropriate
        power of ten to maintain its overall value.
@throws ArithmeticException if the specified scaling operation would
        require rounding.
@see    #setScale(int, int)
@see    #setScale(int, RoundingMode)
"
      end

      operation 7377410 "movePointLeft"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Decimal Point Motion Operations

Returns a {@code BigDecimal} which is equivalent to this one
with the decimal point moved {@code n} places to the left.  If
{@code n} is non-negative, the call merely adds {@code n} to
the scale.  If {@code n} is negative, the call is equivalent
to {@code movePointRight(-n)}.  The {@code BigDecimal}
returned by this call has value <tt>(this &times;
10<sup>-n</sup>)</tt> and scale {@code max(this.scale()+n,
0)}.

@param  n number of places to move the decimal point to the left.
@return a {@code BigDecimal} which is equivalent to this one with the
        decimal point moved {@code n} places to the left.
@throws ArithmeticException if scale overflows.
"
      end

      operation 7377538 "movePointRight"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} which is equivalent to this one
with the decimal point moved {@code n} places to the right.
If {@code n} is non-negative, the call merely subtracts
{@code n} from the scale.  If {@code n} is negative, the call
is equivalent to {@code movePointLeft(-n)}.  The
{@code BigDecimal} returned by this call has value <tt>(this
&times; 10<sup>n</sup>)</tt> and scale {@code max(this.scale()-n,
0)}.

@param  n number of places to move the decimal point to the right.
@return a {@code BigDecimal} which is equivalent to this one
        with the decimal point moved {@code n} places to the right.
@throws ArithmeticException if scale overflows.
"
      end

      operation 7377666 "scaleByPowerOfTen"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigDecimal whose numerical value is equal to
({@code this} * 10<sup>n</sup>).  The scale of
the result is {@code (this.scale() - n)}.

@param n the exponent power of ten to scale by
@return a BigDecimal whose numerical value is equal to
({@code this} * 10<sup>n</sup>)
@throws ArithmeticException if the scale would be
        outside the range of a 32-bit integer.

@since 1.5
"
      end

      operation 7377794 "stripTrailingZeros"
	public return_type class_ref 145794 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} which is numerically equal to
this one but with any trailing zeros removed from the
representation.  For example, stripping the trailing zeros from
the {@code BigDecimal} value {@code 600.0}, which has
[{@code BigInteger}, {@code scale}] components equals to
[6000, 1], yields {@code 6E2} with [{@code BigInteger},
{@code scale}] components equals to [6, -2].  If
this BigDecimal is numerically equal to zero, then
{@code BigDecimal.ZERO} is returned.

@return a numerically equal {@code BigDecimal} with any
trailing zeros removed.
@since 1.5
"
      end

      operation 7377922 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "val" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison Operations

Compares this {@code BigDecimal} with the specified
{@code BigDecimal}.  Two {@code BigDecimal} objects that are
equal in value but have a different scale (like 2.0 and 2.00)
are considered equal by this method.  This method is provided
in preference to individual methods for each of the six boolean
comparison operators ({@literal <}, ==,
{@literal >}, {@literal >=}, !=, {@literal <=}).  The
suggested idiom for performing these comparisons is:
{@code (x.compareTo(y)} &lt;<i>op</i>&gt; {@code 0)}, where
&lt;<i>op</i>&gt; is one of the six comparison operators.

@param  val {@code BigDecimal} to which this {@code BigDecimal} is
        to be compared.
@return -1, 0, or 1 as this {@code BigDecimal} is numerically
         less than, equal to, or greater than {@code val}.
"
      end

      operation 7378050 "compareMagnitude"
	private explicit_return_type "int"
	nparams 1
	  param inout name "val" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Version of compareTo that ignores sign.
"
      end

      operation 7378178 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares this {@code BigDecimal} with the specified
{@code Object} for equality.  Unlike {@link
#compareTo(BigDecimal) compareTo}, this method considers two
{@code BigDecimal} objects equal only if they are equal in
value and scale (thus 2.0 is not equal to 2.00 when compared by
this method).

@param  x {@code Object} to which this {@code BigDecimal} is
        to be compared.
@return {@code true} if and only if the specified {@code Object} is a
        {@code BigDecimal} whose value and scale are equal to this
        {@code BigDecimal}'s.
@see    #compareTo(java.math.BigDecimal)
@see    #hashCode
"
      end

      operation 7378306 "min"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "val" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum of this {@code BigDecimal} and
{@code val}.

@param  val value with which the minimum is to be computed.
@return the {@code BigDecimal} whose value is the lesser of this
        {@code BigDecimal} and {@code val}.  If they are equal,
        as defined by the {@link #compareTo(BigDecimal) compareTo}
        method, {@code this} is returned.
@see    #compareTo(java.math.BigDecimal)
"
      end

      operation 7378434 "max"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "val" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum of this {@code BigDecimal} and {@code val}.

@param  val value with which the maximum is to be computed.
@return the {@code BigDecimal} whose value is the greater of this
        {@code BigDecimal} and {@code val}.  If they are equal,
        as defined by the {@link #compareTo(BigDecimal) compareTo}
        method, {@code this} is returned.
@see    #compareTo(java.math.BigDecimal)
"
      end

      operation 7378562 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Hash Function

Returns the hash code for this {@code BigDecimal}.  Note that
two {@code BigDecimal} objects that are numerically equal but
differ in scale (like 2.0 and 2.00) will generally <i>not</i>
have the same hash code.

@return hash code for this {@code BigDecimal}.
@see #equals(Object)
"
      end

      operation 7378690 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Format Converters

Returns the string representation of this {@code BigDecimal},
using scientific notation if an exponent is needed.

<p>A standard canonical string form of the {@code BigDecimal}
is created as though by the following steps: first, the
absolute value of the unscaled value of the {@code BigDecimal}
is converted to a string in base ten using the characters
{@code '0'} through {@code '9'} with no leading zeros (except
if its value is zero, in which case a single {@code '0'}
character is used).

<p>Next, an <i>adjusted exponent</i> is calculated; this is the
negated scale, plus the number of characters in the converted
unscaled value, less one.  That is,
{@code -scale+(ulength-1)}, where {@code ulength} is the
length of the absolute value of the unscaled value in decimal
digits (its <i>precision</i>).

<p>If the scale is greater than or equal to zero and the
adjusted exponent is greater than or equal to {@code -6}, the
number will be converted to a character form without using
exponential notation.  In this case, if the scale is zero then
no decimal point is added and if the scale is positive a
decimal point will be inserted with the scale specifying the
number of characters to the right of the decimal point.
{@code '0'} characters are added to the left of the converted
unscaled value as necessary.  If no character precedes the
decimal point after this insertion then a conventional
{@code '0'} character is prefixed.

<p>Otherwise (that is, if the scale is negative, or the
adjusted exponent is less than {@code -6}), the number will be
converted to a character form using exponential notation.  In
this case, if the converted {@code BigInteger} has more than
one digit a decimal point is inserted after the first digit.
An exponent in character form is then suffixed to the converted
unscaled value (perhaps with inserted decimal point); this
comprises the letter {@code 'E'} followed immediately by the
adjusted exponent converted to a character form.  The latter is
in base ten, using the characters {@code '0'} through
{@code '9'} with no leading zeros, and is always prefixed by a
sign character {@code '-'} (<tt>'&#92;u002D'</tt>) if the
adjusted exponent is negative, {@code '+'}
(<tt>'&#92;u002B'</tt>) otherwise).

<p>Finally, the entire string is prefixed by a minus sign
character {@code '-'} (<tt>'&#92;u002D'</tt>) if the unscaled
value is less than zero.  No sign character is prefixed if the
unscaled value is zero or positive.

<p><b>Examples:</b>
<p>For each representation [<i>unscaled value</i>, <i>scale</i>]
on the left, the resulting string is shown on the right.
<pre>
[123,0]      \"123\"
[-123,0]     \"-123\"
[123,-1]     \"1.23E+3\"
[123,-3]     \"1.23E+5\"
[123,1]      \"12.3\"
[123,5]      \"0.00123\"
[123,10]     \"1.23E-8\"
[-123,12]    \"-1.23E-10\"
</pre>

<b>Notes:</b>
<ol>

<li>There is a one-to-one mapping between the distinguishable
{@code BigDecimal} values and the result of this conversion.
That is, every distinguishable {@code BigDecimal} value
(unscaled value and scale) has a unique string representation
as a result of using {@code toString}.  If that string
representation is converted back to a {@code BigDecimal} using
the {@link #BigDecimal(String)} constructor, then the original
value will be recovered.

<li>The string produced for a given number is always the same;
it is not affected by locale.  This means that it can be used
as a canonical string representation for exchanging decimal
data, or as a key for a Hashtable, etc.  Locale-sensitive
number formatting and parsing is handled by the {@link
java.text.NumberFormat} class and its subclasses.

<li>The {@link #toEngineeringString} method may be used for
presenting numbers with exponents in engineering notation, and the
{@link #setScale(int,RoundingMode) setScale} method may be used for
rounding a {@code BigDecimal} so it has a known number of digits after
the decimal point.

<li>The digit-to-character mapping provided by
{@code Character.forDigit} is used.

</ol>

@return string representation of this {@code BigDecimal}.
@see    Character#forDigit
@see    #BigDecimal(java.lang.String)
"
      end

      operation 7378818 "toEngineeringString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this {@code BigDecimal},
using engineering notation if an exponent is needed.

<p>Returns a string that represents the {@code BigDecimal} as
described in the {@link #toString()} method, except that if
exponential notation is used, the power of ten is adjusted to
be a multiple of three (engineering notation) such that the
integer part of nonzero values will be in the range 1 through
999.  If exponential notation is used for zero values, a
decimal point and one or two fractional zero digits are used so
that the scale of the zero value is preserved.  Note that
unlike the output of {@link #toString()}, the output of this
method is <em>not</em> guaranteed to recover the same [integer,
scale] pair of this {@code BigDecimal} if the output string is
converting back to a {@code BigDecimal} using the {@linkplain
#BigDecimal(String) string constructor}.  The result of this method meets
the weaker constraint of always producing a numerically equal
result from applying the string constructor to the method's output.

@return string representation of this {@code BigDecimal}, using
        engineering notation if an exponent is needed.
@since  1.5
"
      end

      operation 7378946 "toPlainString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this {@code BigDecimal}
without an exponent field.  For values with a positive scale,
the number of digits to the right of the decimal point is used
to indicate scale.  For values with a zero or negative scale,
the resulting string is generated as if the value were
converted to a numerically equal value with zero scale and as
if all the trailing zeros of the zero scale value were present
in the result.

The entire string is prefixed by a minus sign character '-'
(<tt>'&#92;u002D'</tt>) if the unscaled value is less than
zero. No sign character is prefixed if the unscaled value is
zero or positive.

Note that if the result of this method is passed to the
{@linkplain #BigDecimal(String) string constructor}, only the
numerical value of this {@code BigDecimal} will necessarily be
recovered; the representation of the new {@code BigDecimal}
may have a different scale.  In particular, if this
{@code BigDecimal} has a negative scale, the string resulting
from this method will have a scale of zero when processed by
the string constructor.

(This method behaves analogously to the {@code toString}
method in 1.4 and earlier releases.)

@return a string representation of this {@code BigDecimal}
without an exponent field.
@since 1.5
@see #toString()
@see #toEngineeringString()
"
      end

      operation 7379074 "getValueString"
	private return_type class_ref 128130 // String
	nparams 3
	  param in name "signum" explicit_type "int"
	  param inout name "intString" type class_ref 128130 // String
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a digit.digit string "
      end

      operation 7379202 "toBigInteger"
	public return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigDecimal} to a {@code BigInteger}.
This conversion is analogous to the
<i>narrowing primitive conversion</i> from {@code double} to
{@code long} as defined in section 5.1.3 of
<cite>The Java&trade; Language Specification</cite>:
any fractional part of this
{@code BigDecimal} will be discarded.  Note that this
conversion can lose information about the precision of the
{@code BigDecimal} value.
<p>
To have an exception thrown if the conversion is inexact (in
other words if a nonzero fractional part is discarded), use the
{@link #toBigIntegerExact()} method.

@return this {@code BigDecimal} converted to a {@code BigInteger}.
"
      end

      operation 7379330 "toBigIntegerExact"
	public return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigDecimal} to a {@code BigInteger},
checking for lost information.  An exception is thrown if this
{@code BigDecimal} has a nonzero fractional part.

@return this {@code BigDecimal} converted to a {@code BigInteger}.
@throws ArithmeticException if {@code this} has a nonzero
        fractional part.
@since  1.5
"
      end

      operation 7379458 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigDecimal} to a {@code long}.
This conversion is analogous to the
<i>narrowing primitive conversion</i> from {@code double} to
{@code short} as defined in section 5.1.3 of
<cite>The Java&trade; Language Specification</cite>:
any fractional part of this
{@code BigDecimal} will be discarded, and if the resulting
\"{@code BigInteger}\" is too big to fit in a
{@code long}, only the low-order 64 bits are returned.
Note that this conversion can lose information about the
overall magnitude and precision of this {@code BigDecimal} value as well
as return a result with the opposite sign.

@return this {@code BigDecimal} converted to a {@code long}.
"
      end

      operation 7379586 "longValueExact"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigDecimal} to a {@code long}, checking
for lost information.  If this {@code BigDecimal} has a
nonzero fractional part or is out of the possible range for a
{@code long} result then an {@code ArithmeticException} is
thrown.

@return this {@code BigDecimal} converted to a {@code long}.
@throws ArithmeticException if {@code this} has a nonzero
        fractional part, or will not fit in a {@code long}.
@since  1.5
"
      end

      class 961026 "LongOverflow"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3231746 // LONGMIN (<unidirectional association>)
	  relation 3231746 --->
	    a role_name "LONGMIN" init_value " BigInteger.valueOf(Long.MIN_VALUE)" class_relation const_relation private
	      comment " BigInteger equal to Long.MIN_VALUE. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3231746 // LONGMIN (<unidirectional association>)
	    b parent class_ref 686338 // BigInteger
	end

	classrelation 3231874 // LONGMAX (<unidirectional association>)
	  relation 3231874 --->
	    a role_name "LONGMAX" init_value " BigInteger.valueOf(Long.MAX_VALUE)" class_relation const_relation private
	      comment " BigInteger equal to Long.MAX_VALUE. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3231874 // LONGMAX (<unidirectional association>)
	    b parent class_ref 686338 // BigInteger
	end

	operation 7379714 "check"
	  class_operation public explicit_return_type "void"
	  nparams 1
	    param inout name "num" type class_ref 145794 // BigDecimal
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7379842 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigDecimal} to an {@code int}.
This conversion is analogous to the
<i>narrowing primitive conversion</i> from {@code double} to
{@code short} as defined in section 5.1.3 of
<cite>The Java&trade; Language Specification</cite>:
any fractional part of this
{@code BigDecimal} will be discarded, and if the resulting
\"{@code BigInteger}\" is too big to fit in an
{@code int}, only the low-order 32 bits are returned.
Note that this conversion can lose information about the
overall magnitude and precision of this {@code BigDecimal}
value as well as return a result with the opposite sign.

@return this {@code BigDecimal} converted to an {@code int}.
"
      end

      operation 7379970 "intValueExact"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigDecimal} to an {@code int}, checking
for lost information.  If this {@code BigDecimal} has a
nonzero fractional part or is out of the possible range for an
{@code int} result then an {@code ArithmeticException} is
thrown.

@return this {@code BigDecimal} converted to an {@code int}.
@throws ArithmeticException if {@code this} has a nonzero
        fractional part, or will not fit in an {@code int}.
@since  1.5
"
      end

      operation 7380098 "shortValueExact"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigDecimal} to a {@code short}, checking
for lost information.  If this {@code BigDecimal} has a
nonzero fractional part or is out of the possible range for a
{@code short} result then an {@code ArithmeticException} is
thrown.

@return this {@code BigDecimal} converted to a {@code short}.
@throws ArithmeticException if {@code this} has a nonzero
        fractional part, or will not fit in a {@code short}.
@since  1.5
"
      end

      operation 7380226 "byteValueExact"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigDecimal} to a {@code byte}, checking
for lost information.  If this {@code BigDecimal} has a
nonzero fractional part or is out of the possible range for a
{@code byte} result then an {@code ArithmeticException} is
thrown.

@return this {@code BigDecimal} converted to a {@code byte}.
@throws ArithmeticException if {@code this} has a nonzero
        fractional part, or will not fit in a {@code byte}.
@since  1.5
"
      end

      operation 7380354 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigDecimal} to a {@code float}.
This conversion is similar to the
<i>narrowing primitive conversion</i> from {@code double} to
{@code float} as defined in section 5.1.3 of
<cite>The Java&trade; Language Specification</cite>:
if this {@code BigDecimal} has too great a
magnitude to represent as a {@code float}, it will be
converted to {@link Float#NEGATIVE_INFINITY} or {@link
Float#POSITIVE_INFINITY} as appropriate.  Note that even when
the return value is finite, this conversion can lose
information about the precision of the {@code BigDecimal}
value.

@return this {@code BigDecimal} converted to a {@code float}.
"
      end

      operation 7380482 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigDecimal} to a {@code double}.
This conversion is similar to the
<i>narrowing primitive conversion</i> from {@code double} to
{@code float} as defined in section 5.1.3 of
<cite>The Java&trade; Language Specification</cite>:
if this {@code BigDecimal} has too great a
magnitude represent as a {@code double}, it will be
converted to {@link Double#NEGATIVE_INFINITY} or {@link
Double#POSITIVE_INFINITY} as appropriate.  Note that even when
the return value is finite, this conversion can lose
information about the precision of the {@code BigDecimal}
value.

@return this {@code BigDecimal} converted to a {@code double}.
"
      end

      attribute 1745666 "double10pow"
	class_attribute const_attribute private explicit_type "double"
	multiplicity "[]"
	init_value " {
        1.0e0,  1.0e1,  1.0e2,  1.0e3,  1.0e4,  1.0e5,
        1.0e6,  1.0e7,  1.0e8,  1.0e9,  1.0e10, 1.0e11,
        1.0e12, 1.0e13, 1.0e14, 1.0e15, 1.0e16, 1.0e17,
        1.0e18, 1.0e19, 1.0e20, 1.0e21, 1.0e22
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Powers of 10 which can be represented exactly in {@code
double}.

"
      end

      attribute 1745794 "float10pow"
	class_attribute const_attribute private explicit_type "float"
	multiplicity "[]"
	init_value " {
        1.0e0f, 1.0e1f, 1.0e2f, 1.0e3f, 1.0e4f, 1.0e5f,
        1.0e6f, 1.0e7f, 1.0e8f, 1.0e9f, 1.0e10f
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Powers of 10 which can be represented exactly in {@code
float}.

"
      end

      operation 7380610 "ulp"
	public return_type class_ref 145794 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of an ulp, a unit in the last place, of this
{@code BigDecimal}.  An ulp of a nonzero {@code BigDecimal}
value is the positive distance between this value and the
{@code BigDecimal} value next larger in magnitude with the
same number of digits.  An ulp of a zero value is numerically
equal to 1 with the scale of {@code this}.  The result is
stored with the same scale as {@code this} so the result
for zero and nonzero values is equal to {@code [1,
this.scale()]}.

@return the size of an ulp of {@code this}
@since 1.5
"
      end

      operation 7381250 "layoutChars"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "sci" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Lay out this {@code BigDecimal} into a {@code char[]} array.
The Java 1.2 equivalent to this was called {@code getValueString}.

@param  sci {@code true} for Scientific exponential notation;
         {@code false} for Engineering
@return string with canonical string representation of this
        {@code BigDecimal}
"
      end

      operation 7381378 "bigTenToThe"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return 10 to the power n, as a {@code BigInteger}.

@param  n the power of ten to be returned (>=0)
@return a {@code BigInteger} with the value (10<sup>n</sup>)
"
      end

      operation 7381506 "expandBigIntegerTenPowers"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Expand the BIG_TEN_POWERS_TABLE array to contain at least 10**n.

@param n the power of ten to be returned (>=0)
@return a {@code BigDecimal} with the value (10<sup>n</sup>) and
        in the meantime, the BIG_TEN_POWERS_TABLE array gets
        expanded to the size greater than n.
"
      end

      attribute 1746306 "LONG_TEN_POWERS_TABLE"
	class_attribute const_attribute private explicit_type "long"
	multiplicity "[]"
	init_value " {
        1,                     // 0 / 10^0
        10,                    // 1 / 10^1
        100,                   // 2 / 10^2
        1000,                  // 3 / 10^3
        10000,                 // 4 / 10^4
        100000,                // 5 / 10^5
        1000000,               // 6 / 10^6
        10000000,              // 7 / 10^7
        100000000,             // 8 / 10^8
        1000000000,            // 9 / 10^9
        10000000000L,          // 10 / 10^10
        100000000000L,         // 11 / 10^11
        1000000000000L,        // 12 / 10^12
        10000000000000L,       // 13 / 10^13
        100000000000000L,      // 14 / 10^14
        1000000000000000L,     // 15 / 10^15
        10000000000000000L,    // 16 / 10^16
        100000000000000000L,   // 17 / 10^17
        1000000000000000000L   // 18 / 10^18
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3232130 // BIG_TEN_POWERS_TABLE (<unidirectional association>)
	relation 3232130 --->
	  a role_name "BIG_TEN_POWERS_TABLE" multiplicity "[]" init_value " {
        BigInteger.ONE,
        BigInteger.valueOf(10),
        BigInteger.valueOf(100),
        BigInteger.valueOf(1000),
        BigInteger.valueOf(10000),
        BigInteger.valueOf(100000),
        BigInteger.valueOf(1000000),
        BigInteger.valueOf(10000000),
        BigInteger.valueOf(100000000),
        BigInteger.valueOf(1000000000),
        BigInteger.valueOf(10000000000L),
        BigInteger.valueOf(100000000000L),
        BigInteger.valueOf(1000000000000L),
        BigInteger.valueOf(10000000000000L),
        BigInteger.valueOf(100000000000000L),
        BigInteger.valueOf(1000000000000000L),
        BigInteger.valueOf(10000000000000000L),
        BigInteger.valueOf(100000000000000000L),
        BigInteger.valueOf(1000000000000000000L)
    }" class_relation volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3232130 // BIG_TEN_POWERS_TABLE (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      attribute 1746434 "BIG_TEN_POWERS_TABLE_INITLEN"
	class_attribute const_attribute private explicit_type "int"
	init_value "
        BIG_TEN_POWERS_TABLE.length"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1746562 "BIG_TEN_POWERS_TABLE_MAX"
	class_attribute const_attribute private explicit_type "int"
	init_value "
        16 * BIG_TEN_POWERS_TABLE_INITLEN"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1746690 "THRESHOLDS_TABLE"
	class_attribute const_attribute private explicit_type "long"
	multiplicity "[]"
	init_value " {
        Long.MAX_VALUE,                     // 0
        Long.MAX_VALUE/10L,                 // 1
        Long.MAX_VALUE/100L,                // 2
        Long.MAX_VALUE/1000L,               // 3
        Long.MAX_VALUE/10000L,              // 4
        Long.MAX_VALUE/100000L,             // 5
        Long.MAX_VALUE/1000000L,            // 6
        Long.MAX_VALUE/10000000L,           // 7
        Long.MAX_VALUE/100000000L,          // 8
        Long.MAX_VALUE/1000000000L,         // 9
        Long.MAX_VALUE/10000000000L,        // 10
        Long.MAX_VALUE/100000000000L,       // 11
        Long.MAX_VALUE/1000000000000L,      // 12
        Long.MAX_VALUE/10000000000000L,     // 13
        Long.MAX_VALUE/100000000000000L,    // 14
        Long.MAX_VALUE/1000000000000000L,   // 15
        Long.MAX_VALUE/10000000000000000L,  // 16
        Long.MAX_VALUE/100000000000000000L, // 17
        Long.MAX_VALUE/1000000000000000000L // 18
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7381634 "longMultiplyPowerTen"
	class_operation private explicit_return_type "long"
	nparams 2
	  param in name "val" explicit_type "long"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute val * 10 ^ n; return this product if it is
representable as a long, INFLATED otherwise.
"
      end

      operation 7381762 "bigMultiplyPowerTen"
	private return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute this * 10 ^ n.
Needed mainly to allow special casing to trap zero value
"
      end

      operation 7381890 "inflated"
	private return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns appropriate BigInteger from intVal field if intVal is
null, i.e. the compact representation is in use.
"
      end

      operation 7382018 "matchScale"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "val" type class_ref 145794 // BigDecimal
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Match the scales of two {@code BigDecimal}s to align their
least significant digits.

<p>If the scales of val[0] and val[1] differ, rescale
(non-destructively) the lower-scaled {@code BigDecimal} so
they match.  That is, the lower-scaled reference will be
replaced by a reference to a new object with the same scale as
the other {@code BigDecimal}.

@param  val array of two elements referring to the two
        {@code BigDecimal}s to be aligned.
"
      end

      class 961154 "UnsafeHolder"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1746818 "unsafe"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1746946 "intCompactOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1747074 "intValOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 162690 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                unsafe = sun.misc.Unsafe.getUnsafe();
                intCompactOffset = unsafe.objectFieldOffset
                    (BigDecimal.class.getDeclaredField(\"intCompact\"));
                intValOffset = unsafe.objectFieldOffset
                    (BigDecimal.class.getDeclaredField(\"intVal\"));
            } catch (Exception ex) {
                throw new ExceptionInInitializerError(ex);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end

	operation 7382146 "setIntCompactVolatile"
	  class_operation package explicit_return_type "void"
	  nparams 2
	    param inout name "bd" type class_ref 145794 // BigDecimal
	    param in name "val" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7382274 "setIntValVolatile"
	  class_operation package explicit_return_type "void"
	  nparams 2
	    param inout name "bd" type class_ref 145794 // BigDecimal
	    param inout name "val" type class_ref 686338 // BigInteger
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7382402 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the {@code BigDecimal} instance from a stream (that is,
deserialize it).

@param s the stream being read.
"
      end

      operation 7382530 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serialize this {@code BigDecimal} to the stream in question

@param s the stream to serialize to.
"
      end

      operation 7382658 "longDigitLength"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "x" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the absolute value of a {@code long}, in decimal
digits.

@param x the {@code long}
@return the length of the unscaled value, in deciaml digits.
"
      end

      operation 7382786 "bigDigitLength"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "b" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the absolute value of a BigInteger, in
decimal digits.

@param b the BigInteger
@return the length of the unscaled value, in decimal digits
"
      end

      operation 7382914 "checkScale"
	private explicit_return_type "int"
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check a scale for Underflow or Overflow.  If this BigDecimal is
nonzero, throw an exception if the scale is outof range. If this
is zero, saturate the scale to the extreme value of the right
sign if the scale is out of range.

@param val The new scale.
@throws ArithmeticException (overflow or underflow) if the new
        scale is out of range.
@return validated scale as an int.
"
      end

      operation 7383042 "compactValFor"
	class_operation private explicit_return_type "long"
	nparams 1
	  param inout name "b" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the compact value for given {@code BigInteger}, or
INFLATED if too big. Relies on internal representation of
{@code BigInteger}.
"
      end

      operation 7383170 "longCompareMagnitude"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "long"
	  param in name "y" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7383298 "saturateLong"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "s" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7383426 "print"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "bd" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal printing routine
"
      end

      operation 7383554 "audit"
	private return_type class_ref 145794 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check internal invariants of this BigDecimal.  These invariants
include:

<ul>

<li>The object must be initialized; either intCompact must not be
INFLATED or intVal is non-null.  Both of these conditions may
be true.

<li>If both intCompact and intVal and set, their values must be
consistent.

<li>If precision is nonzero, it must have the right value.
</ul>

Note: Since this is an audit method, we are not supposed to change the
state of this BigDecimal object.
"
      end

      operation 7383682 "checkScaleNonZero"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " the same as checkScale where value!=0 "
      end

      operation 7383810 "checkScale"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "intCompact" explicit_type "long"
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7383938 "checkScale"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "intVal" type class_ref 686338 // BigInteger
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7384066 "doRound"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 2
	  param inout name "val" type class_ref 145794 // BigDecimal
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} rounded according to the MathContext
settings;
If rounding is needed a new {@code BigDecimal} is created and returned.

@param val the value to be rounded
@param mc the context to use.
@return a {@code BigDecimal} rounded according to the MathContext
        settings.  May return {@code value}, if no rounding needed.
@throws ArithmeticException if the rounding mode is
        {@code RoundingMode.UNNECESSARY} and the
        result is inexact.
"
      end

      operation 7384194 "doRound"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 3
	  param in name "compactVal" explicit_type "long"
	  param in name "scale" explicit_type "int"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} created from {@code long} value with
given scale rounded according to the MathContext settings
"
      end

      operation 7384322 "doRound"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 3
	  param inout name "intVal" type class_ref 686338 // BigInteger
	  param in name "scale" explicit_type "int"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} created from {@code BigInteger} value with
given scale rounded according to the MathContext settings
"
      end

      operation 7384450 "divideAndRoundByTenPow"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 3
	  param inout name "intVal" type class_ref 686338 // BigInteger
	  param in name "tenPow" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Divides {@code BigInteger} value by ten power.
"
      end

      operation 7384578 "divideAndRound"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 5
	  param in name "ldividend" explicit_type "long"
	  param in name "ldivisor" explicit_type "long"
	  param in name "scale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	  param in name "preferredScale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internally used for division operation for division {@code long} by
{@code long}.
The returned {@code BigDecimal} object is the quotient whose scale is set
to the passed in scale. If the remainder is not zero, it will be rounded
based on the passed in roundingMode. Also, if the remainder is zero and
the last parameter, i.e. preferredScale is NOT equal to scale, the
trailing zeros of the result is stripped to match the preferredScale.
"
      end

      operation 7384706 "divideAndRound"
	class_operation private explicit_return_type "long"
	nparams 3
	  param in name "ldividend" explicit_type "long"
	  param in name "ldivisor" explicit_type "long"
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Divides {@code long} by {@code long} and do rounding based on the
passed in roundingMode.
"
      end

      operation 7384834 "commonNeedIncrement"
	class_operation private explicit_return_type "boolean"
	nparams 4
	  param in name "roundingMode" explicit_type "int"
	  param in name "qsign" explicit_type "int"
	  param in name "cmpFracHalf" explicit_type "int"
	  param inout name "oddQuot" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Shared logic of need increment computation.
"
      end

      operation 7384962 "needIncrement"
	class_operation private explicit_return_type "boolean"
	nparams 5
	  param in name "ldivisor" explicit_type "long"
	  param in name "roundingMode" explicit_type "int"
	  param in name "qsign" explicit_type "int"
	  param in name "q" explicit_type "long"
	  param in name "r" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if quotient has to be incremented according the roundingMode
"
      end

      operation 7385090 "divideAndRound"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 3
	  param inout name "bdividend" type class_ref 686338 // BigInteger
	  param in name "ldivisor" explicit_type "long"
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Divides {@code BigInteger} value by {@code long} value and
do rounding based on the passed in roundingMode.
"
      end

      operation 7385218 "divideAndRound"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 5
	  param inout name "bdividend" type class_ref 686338 // BigInteger
	  param in name "ldivisor" explicit_type "long"
	  param in name "scale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	  param in name "preferredScale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internally used for division operation for division {@code BigInteger}
by {@code long}.
The returned {@code BigDecimal} object is the quotient whose scale is set
to the passed in scale. If the remainder is not zero, it will be rounded
based on the passed in roundingMode. Also, if the remainder is zero and
the last parameter, i.e. preferredScale is NOT equal to scale, the
trailing zeros of the result is stripped to match the preferredScale.
"
      end

      operation 7385346 "needIncrement"
	class_operation private explicit_return_type "boolean"
	nparams 5
	  param in name "ldivisor" explicit_type "long"
	  param in name "roundingMode" explicit_type "int"
	  param in name "qsign" explicit_type "int"
	  param inout name "mq" type class_ref 961282 // MutableBigInteger
	  param in name "r" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if quotient has to be incremented according the roundingMode
"
      end

      operation 7385474 "divideAndRound"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 3
	  param inout name "bdividend" type class_ref 686338 // BigInteger
	  param inout name "bdivisor" type class_ref 686338 // BigInteger
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Divides {@code BigInteger} value by {@code BigInteger} value and
do rounding based on the passed in roundingMode.
"
      end

      operation 7385602 "divideAndRound"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 5
	  param inout name "bdividend" type class_ref 686338 // BigInteger
	  param inout name "bdivisor" type class_ref 686338 // BigInteger
	  param in name "scale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	  param in name "preferredScale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internally used for division operation for division {@code BigInteger}
by {@code BigInteger}.
The returned {@code BigDecimal} object is the quotient whose scale is set
to the passed in scale. If the remainder is not zero, it will be rounded
based on the passed in roundingMode. Also, if the remainder is zero and
the last parameter, i.e. preferredScale is NOT equal to scale, the
trailing zeros of the result is stripped to match the preferredScale.
"
      end

      operation 7385730 "needIncrement"
	class_operation private explicit_return_type "boolean"
	nparams 5
	  param inout name "mdivisor" type class_ref 961282 // MutableBigInteger
	  param in name "roundingMode" explicit_type "int"
	  param in name "qsign" explicit_type "int"
	  param inout name "mq" type class_ref 961282 // MutableBigInteger
	  param inout name "mr" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if quotient has to be incremented according the roundingMode
"
      end

      operation 7385858 "createAndStripZerosToMatchScale"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 3
	  param inout name "intVal" type class_ref 686338 // BigInteger
	  param in name "scale" explicit_type "int"
	  param in name "preferredScale" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove insignificant trailing zeros from this
{@code BigInteger} value until the preferred scale is reached or no
more zeros can be removed.  If the preferred scale is less than
Integer.MIN_VALUE, all the trailing zeros will be removed.

@return new {@code BigDecimal} with a scale possibly reduced
to be closed to the preferred scale.
"
      end

      operation 7385986 "createAndStripZerosToMatchScale"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 3
	  param in name "compactVal" explicit_type "long"
	  param in name "scale" explicit_type "int"
	  param in name "preferredScale" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove insignificant trailing zeros from this
{@code long} value until the preferred scale is reached or no
more zeros can be removed.  If the preferred scale is less than
Integer.MIN_VALUE, all the trailing zeros will be removed.

@return new {@code BigDecimal} with a scale possibly reduced
to be closed to the preferred scale.
"
      end

      operation 7386114 "stripZerosToMatchScale"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 4
	  param inout name "intVal" type class_ref 686338 // BigInteger
	  param in name "intCompact" explicit_type "long"
	  param in name "scale" explicit_type "int"
	  param in name "preferredScale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7386242 "add"
	class_operation private explicit_return_type "long"
	nparams 2
	  param in name "xs" explicit_type "long"
	  param in name "ys" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "returns INFLATED if oveflow
"
      end

      operation 7386370 "add"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 3
	  param in name "xs" explicit_type "long"
	  param in name "ys" explicit_type "long"
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7386498 "add"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 4
	  param in name "xs" explicit_type "long"
	  param in name "scale1" explicit_type "int"
	  param in name "ys" explicit_type "long"
	  param in name "scale2" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7386626 "add"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 4
	  param in name "xs" explicit_type "long"
	  param in name "scale1" explicit_type "int"
	  param inout name "snd" type class_ref 686338 // BigInteger
	  param in name "scale2" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7386754 "add"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 4
	  param inout name "fst" type class_ref 686338 // BigInteger
	  param in name "scale1" explicit_type "int"
	  param inout name "snd" type class_ref 686338 // BigInteger
	  param in name "scale2" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7386882 "bigMultiplyPowerTen"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 2
	  param in name "value" explicit_type "long"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7387010 "bigMultiplyPowerTen"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 2
	  param inout name "value" type class_ref 686338 // BigInteger
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7387138 "divideSmallFastPath"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 6
	  param in name "xs" explicit_type "long"
	  param in name "xscale" explicit_type "int"
	  param in name "ys" explicit_type "long"
	  param in name "yscale" explicit_type "int"
	  param in name "preferredScale" explicit_type "long"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (xs /
ys)}, with rounding according to the context settings.

Fast path - used only when (xscale <= yscale && yscale < 18
 && mc.presision<18) {
"
      end

      operation 7387266 "divide"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 6
	  param in name "xs" explicit_type "long"
	  param in name "xscale" explicit_type "int"
	  param in name "ys" explicit_type "long"
	  param in name "yscale" explicit_type "int"
	  param in name "preferredScale" explicit_type "long"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (xs /
ys)}, with rounding according to the context settings.
"
      end

      operation 7387394 "divide"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 6
	  param inout name "xs" type class_ref 686338 // BigInteger
	  param in name "xscale" explicit_type "int"
	  param in name "ys" explicit_type "long"
	  param in name "yscale" explicit_type "int"
	  param in name "preferredScale" explicit_type "long"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (xs /
ys)}, with rounding according to the context settings.
"
      end

      operation 7387522 "divide"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 6
	  param in name "xs" explicit_type "long"
	  param in name "xscale" explicit_type "int"
	  param inout name "ys" type class_ref 686338 // BigInteger
	  param in name "yscale" explicit_type "int"
	  param in name "preferredScale" explicit_type "long"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (xs /
ys)}, with rounding according to the context settings.
"
      end

      operation 7387650 "divide"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 6
	  param inout name "xs" type class_ref 686338 // BigInteger
	  param in name "xscale" explicit_type "int"
	  param inout name "ys" type class_ref 686338 // BigInteger
	  param in name "yscale" explicit_type "int"
	  param in name "preferredScale" explicit_type "long"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} whose value is {@code (xs /
ys)}, with rounding according to the context settings.
"
      end

      operation 7387778 "multiplyDivideAndRound"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 6
	  param in name "dividend0" explicit_type "long"
	  param in name "dividend1" explicit_type "long"
	  param in name "divisor" explicit_type "long"
	  param in name "scale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	  param in name "preferredScale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "performs divideAndRound for (dividend0*dividend1, divisor)
returns null if quotient can't fit into long value;
"
      end

      attribute 1747202 "DIV_NUM_BASE"
	class_attribute const_attribute private explicit_type "long"
	init_value " (1L<<32)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number base (32 bits)."
      end

      operation 7387906 "divideAndRound128"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 7
	  param in name "dividendHi" explicit_type "long"
	  param in name "dividendLo" explicit_type "long"
	  param in name "divisor" explicit_type "long"
	  param in name "sign" explicit_type "int"
	  param in name "scale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	  param in name "preferredScale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "divideAndRound 128-bit value by long divisor.
returns null if quotient can't fit into long value;
Specialized version of Knuth's division
"
      end

      operation 7388034 "roundedTenPower"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 4
	  param in name "qsign" explicit_type "int"
	  param in name "raise" explicit_type "int"
	  param in name "scale" explicit_type "int"
	  param in name "preferredScale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "calculate divideAndRound for ldividend*10^raise / divisor
when abs(dividend)==abs(divisor);
"
      end

      operation 7388162 "scaledTenPow"
	class_operation package return_type class_ref 145794 // BigDecimal
	nparams 3
	  param in name "n" explicit_type "int"
	  param in name "sign" explicit_type "int"
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7388290 "divRemNegativeLong"
	class_operation private explicit_return_type "long"
	nparams 2
	  param in name "n" explicit_type "long"
	  param in name "d" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate the quotient and remainder of dividing a negative long by
another long.

@param n the numerator; must be negative
@param d the denominator; must not be unity
@return a two-element {@long} array with the remainder and quotient in
        the initial and final elements, respectively
"
      end

      operation 7388418 "make64"
	class_operation private explicit_return_type "long"
	nparams 2
	  param in name "hi" explicit_type "long"
	  param in name "lo" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7388546 "mulsub"
	class_operation private explicit_return_type "long"
	nparams 5
	  param in name "u1" explicit_type "long"
	  param in name "u0" explicit_type "long"
	  param in name "v1" explicit_type "long"
	  param in name "v0" explicit_type "long"
	  param in name "q0" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7388674 "unsignedLongCompare"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "one" explicit_type "long"
	  param in name "two" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7388802 "unsignedLongCompareEq"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "one" explicit_type "long"
	  param in name "two" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7388930 "compareMagnitudeNormalized"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "xs" explicit_type "long"
	  param in name "xscale" explicit_type "int"
	  param in name "ys" explicit_type "long"
	  param in name "yscale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Compare Normalize dividend & divisor so that both fall into [0.1, 0.999...]"
      end

      operation 7389058 "compareMagnitudeNormalized"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "xs" explicit_type "long"
	  param in name "xscale" explicit_type "int"
	  param inout name "ys" type class_ref 686338 // BigInteger
	  param in name "yscale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Compare Normalize dividend & divisor so that both fall into [0.1, 0.999...]"
      end

      operation 7389186 "compareMagnitudeNormalized"
	class_operation private explicit_return_type "int"
	nparams 4
	  param inout name "xs" type class_ref 686338 // BigInteger
	  param in name "xscale" explicit_type "int"
	  param inout name "ys" type class_ref 686338 // BigInteger
	  param in name "yscale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Compare Normalize dividend & divisor so that both fall into [0.1, 0.999...]"
      end

      operation 7389314 "multiply"
	class_operation private explicit_return_type "long"
	nparams 2
	  param in name "x" explicit_type "long"
	  param in name "y" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7389442 "multiply"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 3
	  param in name "x" explicit_type "long"
	  param in name "y" explicit_type "long"
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7389570 "multiply"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 3
	  param in name "x" explicit_type "long"
	  param inout name "y" type class_ref 686338 // BigInteger
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7389698 "multiply"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 3
	  param inout name "x" type class_ref 686338 // BigInteger
	  param inout name "y" type class_ref 686338 // BigInteger
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7389826 "multiplyAndRound"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 4
	  param in name "x" explicit_type "long"
	  param in name "y" explicit_type "long"
	  param in name "scale" explicit_type "int"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiplies two long values and rounds according {@code MathContext}
"
      end

      operation 7389954 "multiplyAndRound"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 4
	  param in name "x" explicit_type "long"
	  param inout name "y" type class_ref 686338 // BigInteger
	  param in name "scale" explicit_type "int"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7390082 "multiplyAndRound"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 4
	  param inout name "x" type class_ref 686338 // BigInteger
	  param inout name "y" type class_ref 686338 // BigInteger
	  param in name "scale" explicit_type "int"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7390210 "doRound128"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 5
	  param in name "hi" explicit_type "long"
	  param in name "lo" explicit_type "long"
	  param in name "sign" explicit_type "int"
	  param in name "scale" explicit_type "int"
	  param inout name "mc" type class_ref 960770 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "rounds 128-bit value according {@code MathContext}
returns null if result can't be repsented as compact BigDecimal.
"
      end

      attribute 1747330 "LONGLONG_TEN_POWERS_TABLE"
	class_attribute const_attribute private explicit_type "long"
	multiplicity "[][]"
	init_value " {
        {   0L, 0x8AC7230489E80000L },  //10^19
        {       0x5L, 0x6bc75e2d63100000L },  //10^20
        {       0x36L, 0x35c9adc5dea00000L },  //10^21
        {       0x21eL, 0x19e0c9bab2400000L  },  //10^22
        {       0x152dL, 0x02c7e14af6800000L  },  //10^23
        {       0xd3c2L, 0x1bcecceda1000000L  },  //10^24
        {       0x84595L, 0x161401484a000000L  },  //10^25
        {       0x52b7d2L, 0xdcc80cd2e4000000L  },  //10^26
        {       0x33b2e3cL, 0x9fd0803ce8000000L  },  //10^27
        {       0x204fce5eL, 0x3e25026110000000L  },  //10^28
        {       0x1431e0faeL, 0x6d7217caa0000000L  },  //10^29
        {       0xc9f2c9cd0L, 0x4674edea40000000L  },  //10^30
        {       0x7e37be2022L, 0xc0914b2680000000L  },  //10^31
        {       0x4ee2d6d415bL, 0x85acef8100000000L  },  //10^32
        {       0x314dc6448d93L, 0x38c15b0a00000000L  },  //10^33
        {       0x1ed09bead87c0L, 0x378d8e6400000000L  },  //10^34
        {       0x13426172c74d82L, 0x2b878fe800000000L  },  //10^35
        {       0xc097ce7bc90715L, 0xb34b9f1000000000L  },  //10^36
        {       0x785ee10d5da46d9L, 0x00f436a000000000L  },  //10^37
        {       0x4b3b4ca85a86c47aL, 0x098a224000000000L  },  //10^38
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7390338 "precision"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "hi" explicit_type "long"
	  param in name "lo" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "returns precision of 128-bit value
"
      end

      operation 7390466 "longLongCompareMagnitude"
	class_operation private explicit_return_type "boolean"
	nparams 4
	  param in name "hi0" explicit_type "long"
	  param in name "lo0" explicit_type "long"
	  param in name "hi1" explicit_type "long"
	  param in name "lo1" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "returns true if 128 bit number <hi0,lo0> is less then <hi1,lo1>
hi0 & hi1 should be non-negative
"
      end

      operation 7390594 "divide"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 6
	  param in name "dividend" explicit_type "long"
	  param in name "dividendScale" explicit_type "int"
	  param in name "divisor" explicit_type "long"
	  param in name "divisorScale" explicit_type "int"
	  param in name "scale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7390722 "divide"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 6
	  param inout name "dividend" type class_ref 686338 // BigInteger
	  param in name "dividendScale" explicit_type "int"
	  param in name "divisor" explicit_type "long"
	  param in name "divisorScale" explicit_type "int"
	  param in name "scale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7390850 "divide"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 6
	  param in name "dividend" explicit_type "long"
	  param in name "dividendScale" explicit_type "int"
	  param inout name "divisor" type class_ref 686338 // BigInteger
	  param in name "divisorScale" explicit_type "int"
	  param in name "scale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7390978 "divide"
	class_operation private return_type class_ref 145794 // BigDecimal
	nparams 6
	  param inout name "dividend" type class_ref 686338 // BigInteger
	  param in name "dividendScale" explicit_type "int"
	  param inout name "divisor" type class_ref 686338 // BigInteger
	  param in name "divisorScale" explicit_type "int"
	  param in name "scale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 686338 "BigInteger"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable arbitrary-precision integers.  All operations behave as if
BigIntegers were represented in two's-complement notation (like Java's
primitive integer types).  BigInteger provides analogues to all of Java's
primitive integer operators, and all relevant methods from java.lang.Math.
Additionally, BigInteger provides operations for modular arithmetic, GCD
calculation, primality testing, prime generation, bit manipulation,
and a few other miscellaneous operations.

<p>Semantics of arithmetic operations exactly mimic those of Java's integer
arithmetic operators, as defined in <i>The Java Language Specification</i>.
For example, division by zero throws an {@code ArithmeticException}, and
division of a negative by a positive yields a negative (or zero) remainder.
All of the details in the Spec concerning overflow are ignored, as
BigIntegers are made as large as necessary to accommodate the results of an
operation.

<p>Semantics of shift operations extend those of Java's shift operators
to allow for negative shift distances.  A right-shift with a negative
shift distance results in a left shift, and vice-versa.  The unsigned
right shift operator ({@code >>>}) is omitted, as this operation makes
little sense in combination with the \"infinite word size\" abstraction
provided by this class.

<p>Semantics of bitwise logical operations exactly mimic those of Java's
bitwise integer operators.  The binary operators ({@code and},
{@code or}, {@code xor}) implicitly perform sign extension on the shorter
of the two operands prior to performing the operation.

<p>Comparison operations perform signed integer comparisons, analogous to
those performed by Java's relational and equality operators.

<p>Modular arithmetic operations are provided to compute residues, perform
exponentiation, and compute multiplicative inverses.  These methods always
return a non-negative result, between {@code 0} and {@code (modulus - 1)},
inclusive.

<p>Bit operations operate on a single bit of the two's-complement
representation of their operand.  If necessary, the operand is sign-
extended so that it contains the designated bit.  None of the single-bit
operations can produce a BigInteger with a different sign from the
BigInteger being operated on, as they affect only a single bit, and the
\"infinite word size\" abstraction provided by this class ensures that there
are infinitely many \"virtual sign bits\" preceding each BigInteger.

<p>For the sake of brevity and clarity, pseudo-code is used throughout the
descriptions of BigInteger methods.  The pseudo-code expression
{@code (i + j)} is shorthand for \"a BigInteger whose value is
that of the BigInteger {@code i} plus that of the BigInteger {@code j}.\"
The pseudo-code expression {@code (i == j)} is shorthand for
\"{@code true} if and only if the BigInteger {@code i} represents the same
value as the BigInteger {@code j}.\"  Other pseudo-code expressions are
interpreted similarly.

<p>All methods and constructors in this class throw
{@code NullPointerException} when passed
a null object reference for any input parameter.

BigInteger must support values in the range
-2<sup>{@code Integer.MAX_VALUE}</sup> (exclusive) to
+2<sup>{@code Integer.MAX_VALUE}</sup> (exclusive)
and may support values outside of that range.

The range of probable prime values is limited and may be less than
the full supported positive range of {@code BigInteger}.
The range must be at least 1 to 2<sup>500000000</sup>.

@implNote
BigInteger constructors and operations throw {@code ArithmeticException} when
the result is out of the supported range of
-2<sup>{@code Integer.MAX_VALUE}</sup> (exclusive) to
+2<sup>{@code Integer.MAX_VALUE}</sup> (exclusive).

@see     BigDecimal
@author  Josh Bloch
@author  Michael McCloskey
@author  Alan Eliasen
@author  Timothy Buktu
@since JDK1.1
"
      classrelation 3232258 // <generalisation>
	relation 3232258 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3232258 // <generalisation>
	  b parent class_ref 398210 // Number
      end

      classrelation 3232386 // <realization>
	relation 3232386 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3232386 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      attribute 1747458 "signum"
	const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The signum of this BigInteger: -1 for negative, 0 for zero, or
1 for positive.  Note that the BigInteger zero <i>must</i> have
a signum of 0.  This is necessary to ensures that there is exactly one
representation for each BigInteger value.

@serial

"
      end

      attribute 1747586 "mag"
	const_attribute package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The magnitude of this BigInteger, in <i>big-endian</i> order: the
zeroth element of this array is the most-significant int of the
magnitude.  The magnitude must be \"minimal\" in that the most-significant
int ({@code mag[0]}) must be non-zero.  This is necessary to
ensure that there is exactly one representation for each BigInteger
value.  Note that this implies that the BigInteger zero has a
zero-length mag array.

"
      end

      attribute 1747714 "bitCount"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Deprecated
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " These \"redundant fields\" are initialized with recognizable nonsense
 values, and cached the first time they are needed (or never, if they
 aren't needed).

One plus the bitCount of this BigInteger. Zeros means unitialized.

@serial
@see #bitCount
@deprecated Deprecated since logical value is offset from stored
value and correction factor is applied in accessor method.

"
      end

      attribute 1747842 "bitLength"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Deprecated
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "One plus the bitLength of this BigInteger. Zeros means unitialized.
(either value is acceptable).

@serial
@see #bitLength()
@deprecated Deprecated since logical value is offset from stored
value and correction factor is applied in accessor method.

"
      end

      attribute 1747970 "lowestSetBit"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Deprecated
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Two plus the lowest set bit of this BigInteger, as returned by
getLowestSetBit().

@serial
@see #getLowestSetBit
@deprecated Deprecated since logical value is offset from stored
value and correction factor is applied in accessor method.

"
      end

      attribute 1748098 "firstNonzeroIntNum"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Deprecated
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Two plus the index of the lowest-order int in the magnitude of this
BigInteger that contains a nonzero int, or -2 (either value is acceptable).
The least significant int has int-number 0, the next int in order of
increasing significance has int-number 1, and so forth.
@deprecated Deprecated since logical value is offset from stored
value and correction factor is applied in accessor method.

"
      end

      attribute 1748226 "LONG_MASK"
	class_attribute const_attribute package explicit_type "long"
	init_value " 0xffffffffL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This mask is used to obtain the value of an int as if it were unsigned.

"
      end

      attribute 1748354 "MAX_MAG_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value " Integer.MAX_VALUE / Integer.SIZE + 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant limits {@code mag.length} of BigIntegers to the supported
range.

 (1 << 26)"
      end

      attribute 1748482 "PRIME_SEARCH_BIT_LENGTH_LIMIT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 500000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Bit lengths larger than this constant can cause overflow in searchLen
calculation and in BitSieve.singleSearch method.

"
      end

      attribute 1748610 "KARATSUBA_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 80"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The threshold value for using Karatsuba multiplication.  If the number
of ints in both mag arrays are greater than this number, then
Karatsuba multiplication will be used.   This value is found
experimentally to work well.

"
      end

      attribute 1748738 "TOOM_COOK_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 240"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The threshold value for using 3-way Toom-Cook multiplication.
If the number of ints in each mag array is greater than the
Karatsuba threshold, and the number of ints in at least one of
the mag arrays is greater than this threshold, then Toom-Cook
multiplication will be used.

"
      end

      attribute 1748866 "KARATSUBA_SQUARE_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 128"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The threshold value for using Karatsuba squaring.  If the number
of ints in the number are larger than this value,
Karatsuba squaring will be used.   This value is found
experimentally to work well.

"
      end

      attribute 1748994 "TOOM_COOK_SQUARE_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 216"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The threshold value for using Toom-Cook squaring.  If the number
of ints in the number are larger than this value,
Toom-Cook squaring will be used.   This value is found
experimentally to work well.

"
      end

      attribute 1749122 "BURNIKEL_ZIEGLER_THRESHOLD"
	class_attribute const_attribute package explicit_type "int"
	init_value " 80"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The threshold value for using Burnikel-Ziegler division.  If the number
of ints in the divisor are larger than this value, Burnikel-Ziegler
division may be used.  This value is found experimentally to work well.

"
      end

      attribute 1749250 "BURNIKEL_ZIEGLER_OFFSET"
	class_attribute const_attribute package explicit_type "int"
	init_value " 40"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The offset value for using Burnikel-Ziegler division.  If the number
of ints in the divisor exceeds the Burnikel-Ziegler threshold, and the
number of ints in the dividend is greater than the number of ints in the
divisor plus this value, Burnikel-Ziegler division will be used.  This
value is found experimentally to work well.

"
      end

      attribute 1749378 "SCHOENHAGE_BASE_CONVERSION_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The threshold value for using Schoenhage recursive base conversion. If
the number of ints in the number are larger than this value,
the Schoenhage algorithm will be used.  In practice, it appears that the
Schoenhage routine is faster for any threshold down to 2, and is
relatively flat for thresholds between 2-25, so this choice may be
varied within this range for very small effect.

"
      end

      attribute 1749506 "MULTIPLY_SQUARE_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The threshold value for using squaring code to perform multiplication
of a {@code BigInteger} instance by itself.  If the number of ints in
the number are larger than this value, {@code multiply(this)} will
return {@code square()}.

"
      end

      attribute 1749634 "MONTGOMERY_INTRINSIC_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 512"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The threshold for using an intrinsic version of
implMontgomeryXXX to perform Montgomery multiplication.  If the
number of ints in the number is more than this value we do not
use the intrinsic.

"
      end

      operation 7391106 "BigInteger"
	public explicit_return_type ""
	nparams 1
	  param inout name "val" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors

Translates a byte array containing the two's-complement binary
representation of a BigInteger into a BigInteger.  The input array is
assumed to be in <i>big-endian</i> byte-order: the most significant
byte is in the zeroth element.

@param  val big-endian two's-complement binary representation of
        BigInteger.
@throws NumberFormatException {@code val} is zero bytes long.
"
      end

      operation 7391234 "BigInteger"
	private explicit_return_type ""
	nparams 1
	  param inout name "val" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This private constructor translates an int array containing the
two's-complement binary representation of a BigInteger into a
BigInteger. The input array is assumed to be in <i>big-endian</i>
int-order: the most significant int is in the zeroth element.
"
      end

      operation 7391362 "BigInteger"
	public explicit_return_type ""
	nparams 2
	  param in name "signum" explicit_type "int"
	  param inout name "magnitude" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the sign-magnitude representation of a BigInteger into a
BigInteger.  The sign is represented as an integer signum value: -1 for
negative, 0 for zero, or 1 for positive.  The magnitude is a byte array
in <i>big-endian</i> byte-order: the most significant byte is in the
zeroth element.  A zero-length magnitude array is permissible, and will
result in a BigInteger value of 0, whether signum is -1, 0 or 1.

@param  signum signum of the number (-1 for negative, 0 for zero, 1
        for positive).
@param  magnitude big-endian binary representation of the magnitude of
        the number.
@throws NumberFormatException {@code signum} is not one of the three
        legal values (-1, 0, and 1), or {@code signum} is 0 and
        {@code magnitude} contains one or more non-zero bytes.
"
      end

      operation 7391490 "BigInteger"
	private explicit_return_type ""
	nparams 2
	  param in name "signum" explicit_type "int"
	  param inout name "magnitude" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A constructor for internal use that translates the sign-magnitude
representation of a BigInteger into a BigInteger. It checks the
arguments and copies the magnitude so this constructor would be
safe for external use.
"
      end

      operation 7391618 "BigInteger"
	public explicit_return_type ""
	nparams 2
	  param inout name "val" type class_ref 128130 // String
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the String representation of a BigInteger in the
specified radix into a BigInteger.  The String representation
consists of an optional minus or plus sign followed by a
sequence of one or more digits in the specified radix.  The
character-to-digit mapping is provided by {@code
Character.digit}.  The String may not contain any extraneous
characters (whitespace, for example).

@param val String representation of BigInteger.
@param radix radix to be used in interpreting {@code val}.
@throws NumberFormatException {@code val} is not a valid representation
        of a BigInteger in the specified radix, or {@code radix} is
        outside the range from {@link Character#MIN_RADIX} to
        {@link Character#MAX_RADIX}, inclusive.
@see    Character#digit
"
      end

      operation 7391746 "BigInteger"
	package explicit_return_type ""
	nparams 3
	  param inout name "val" explicit_type "char"
	multiplicity "[]"
	  param in name "sign" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new BigInteger using a char array with radix=10.
Sign is precalculated outside and not allowed in the val.
"
      end

      operation 7391874 "parseInt"
	private explicit_return_type "int"
	nparams 3
	  param inout name "source" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create an integer with the digits between the two indexes
 Assumes start < end. The result may be negative, but it
 is to be treated as an unsigned value."
      end

      attribute 1749762 "bitsPerDigit"
	class_attribute private explicit_type "long"
	multiplicity "[]"
	init_value " { 0, 0,
        1024, 1624, 2048, 2378, 2648, 2875, 3072, 3247, 3402, 3543, 3672,
        3790, 3899, 4001, 4096, 4186, 4271, 4350, 4426, 4498, 4567, 4633,
        4696, 4756, 4814, 4870, 4923, 4975, 5025, 5074, 5120, 5166, 5210,
                                           5253, 5295}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " bitsPerDigit in the given radix times 1024
 Rounded up to avoid underallocation.
"
      end

      operation 7392002 "destructiveMulAdd"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "x" explicit_type "int"
	multiplicity "[]"
	  param in name "y" explicit_type "int"
	  param in name "z" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Multiply x array times word y in place, and add word z"
      end

      operation 7392130 "BigInteger"
	public explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the decimal String representation of a BigInteger into a
BigInteger.  The String representation consists of an optional minus
sign followed by a sequence of one or more decimal digits.  The
character-to-digit mapping is provided by {@code Character.digit}.
The String may not contain any extraneous characters (whitespace, for
example).

@param val decimal String representation of BigInteger.
@throws NumberFormatException {@code val} is not a valid representation
        of a BigInteger.
@see    Character#digit
"
      end

      operation 7392258 "BigInteger"
	public explicit_return_type ""
	nparams 2
	  param in name "numBits" explicit_type "int"
	  param inout name "rnd" type class_ref 934914 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a randomly generated BigInteger, uniformly distributed over
the range 0 to (2<sup>{@code numBits}</sup> - 1), inclusive.
The uniformity of the distribution assumes that a fair source of random
bits is provided in {@code rnd}.  Note that this constructor always
constructs a non-negative BigInteger.

@param  numBits maximum bitLength of the new BigInteger.
@param  rnd source of randomness to be used in computing the new
        BigInteger.
@throws IllegalArgumentException {@code numBits} is negative.
@see #bitLength()
"
      end

      operation 7392386 "randomBits"
	class_operation private explicit_return_type "byte"
	nparams 2
	  param in name "numBits" explicit_type "int"
	  param inout name "rnd" type class_ref 934914 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7392514 "BigInteger"
	public explicit_return_type ""
	nparams 3
	  param in name "bitLength" explicit_type "int"
	  param in name "certainty" explicit_type "int"
	  param inout name "rnd" type class_ref 934914 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a randomly generated positive BigInteger that is probably
prime, with the specified bitLength.

<p>It is recommended that the {@link #probablePrime probablePrime}
method be used in preference to this constructor unless there
is a compelling need to specify a certainty.

@param  bitLength bitLength of the returned BigInteger.
@param  certainty a measure of the uncertainty that the caller is
        willing to tolerate.  The probability that the new BigInteger
        represents a prime number will exceed
        (1 - 1/2<sup>{@code certainty}</sup>).  The execution time of
        this constructor is proportional to the value of this parameter.
@param  rnd source of random bits used to select candidates to be
        tested for primality.
@throws ArithmeticException {@code bitLength < 2} or {@code bitLength} is too large.
@see    #bitLength()
"
      end

      attribute 1749890 "SMALL_PRIME_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 95"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Minimum size in bits that the requested prime number has
 before we use the large prime number generating algorithms.
 The cutoff of 95 was chosen empirically for best performance.
"
      end

      attribute 1750018 "DEFAULT_PRIME_CERTAINTY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Certainty required to meet the spec of probablePrime
"
      end

      operation 7392642 "probablePrime"
	class_operation public return_type class_ref 686338 // BigInteger
	nparams 2
	  param in name "bitLength" explicit_type "int"
	  param inout name "rnd" type class_ref 934914 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a positive BigInteger that is probably prime, with the
specified bitLength. The probability that a BigInteger returned
by this method is composite does not exceed 2<sup>-100</sup>.

@param  bitLength bitLength of the returned BigInteger.
@param  rnd source of random bits used to select candidates to be
        tested for primality.
@return a BigInteger of {@code bitLength} bits that is probably prime
@throws ArithmeticException {@code bitLength < 2} or {@code bitLength} is too large.
@see    #bitLength()
@since 1.4
"
      end

      operation 7392770 "smallPrime"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 3
	  param in name "bitLength" explicit_type "int"
	  param in name "certainty" explicit_type "int"
	  param inout name "rnd" type class_ref 934914 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find a random number of the specified bitLength that is probably prime.
This method is used for smaller primes, its performance degrades on
larger bitlengths.

This method assumes bitLength > 1.
"
      end

      classrelation 3232514 // SMALL_PRIME_PRODUCT (<unidirectional association>)
	relation 3232514 --->
	  a role_name "SMALL_PRIME_PRODUCT" init_value " valueOf(3L*5*7*11*13*17*19*23*29*31*37*41)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3232514 // SMALL_PRIME_PRODUCT (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      operation 7392898 "largePrime"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 3
	  param in name "bitLength" explicit_type "int"
	  param in name "certainty" explicit_type "int"
	  param inout name "rnd" type class_ref 934914 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find a random number of the specified bitLength that is probably prime.
This method is more appropriate for larger bitlengths since it uses
a sieve to eliminate most composites before using a more expensive
test.
"
      end

      operation 7393026 "nextProbablePrime"
	public return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first integer greater than this {@code BigInteger} that
is probably prime.  The probability that the number returned by this
method is composite does not exceed 2<sup>-100</sup>. This method will
never skip over a prime when searching: if it returns {@code p}, there
is no prime {@code q} such that {@code this < q < p}.

@return the first integer greater than this {@code BigInteger} that
        is probably prime.
@throws ArithmeticException {@code this < 0} or {@code this} is too large.
@since 1.5
"
      end

      operation 7393154 "getPrimeSearchLen"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "bitLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7393282 "primeToCertainty"
	package explicit_return_type "boolean"
	nparams 2
	  param in name "certainty" explicit_type "int"
	  param inout name "random" type class_ref 934914 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this BigInteger is probably prime,
{@code false} if it's definitely composite.

This method assumes bitLength > 2.

@param  certainty a measure of the uncertainty that the caller is
        willing to tolerate: if the call returns {@code true}
        the probability that this BigInteger is prime exceeds
        {@code (1 - 1/2<sup>certainty</sup>)}.  The execution time of
        this method is proportional to the value of this parameter.
@return {@code true} if this BigInteger is probably prime,
        {@code false} if it's definitely composite.
"
      end

      operation 7393410 "passesLucasLehmer"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this BigInteger is a Lucas-Lehmer probable prime.

The following assumptions are made:
This BigInteger is a positive, odd number.
"
      end

      operation 7393538 "jacobiSymbol"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "p" explicit_type "int"
	  param inout name "n" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes Jacobi(p,n).
Assumes n positive, odd, n>=3.
"
      end

      operation 7393666 "lucasLehmerSequence"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 3
	  param in name "z" explicit_type "int"
	  param inout name "k" type class_ref 686338 // BigInteger
	  param inout name "n" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7393794 "passesMillerRabin"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "iterations" explicit_type "int"
	  param inout name "rnd" type class_ref 934914 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this BigInteger passes the specified number of
Miller-Rabin tests. This test is taken from the DSA spec (NIST FIPS
186-2).

The following assumptions are made:
This BigInteger is a positive, odd number greater than 2.
iterations<=50.
"
      end

      operation 7393922 "BigInteger"
	package explicit_return_type ""
	nparams 2
	  param inout name "magnitude" explicit_type "int"
	multiplicity "[]"
	  param in name "signum" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This internal constructor differs from its public cousin
with the arguments reversed in two ways: it assumes that its
arguments are correct, and it doesn't copy the magnitude array.
"
      end

      operation 7394050 "BigInteger"
	private explicit_return_type ""
	nparams 2
	  param inout name "magnitude" explicit_type "byte"
	multiplicity "[]"
	  param in name "signum" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This private constructor is for internal use and assumes that its
arguments are correct.
"
      end

      operation 7394178 "checkRange"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws an {@code ArithmeticException} if the {@code BigInteger} would be
out of the supported range.

@throws ArithmeticException if {@code this} exceeds the supported range.
"
      end

      operation 7394306 "reportOverflow"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7394434 "valueOf"
	class_operation public return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Static Factory Methods

Returns a BigInteger whose value is equal to that of the
specified {@code long}.  This \"static factory method\" is
provided in preference to a ({@code long}) constructor
because it allows for reuse of frequently used BigIntegers.

@param  val value of the BigInteger to return.
@return a BigInteger with the specified value.
"
      end

      operation 7394562 "BigInteger"
	private explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a BigInteger with the specified value, which may not be zero.
"
      end

      operation 7394690 "valueOf"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger with the given two's complement representation.
Assumes that the input array will not be modified (the returned
BigInteger will reference the input array if feasible).
"
      end

      attribute 1750146 "MAX_CONSTANT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constants

Initialize static constant array when class is loaded.

"
      end

      classrelation 3232642 // posConst (<unidirectional association>)
	relation 3232642 --->
	  a role_name "posConst" multiplicity "[]" init_value " new BigInteger[MAX_CONSTANT+1]" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3232642 // posConst (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      classrelation 3232770 // negConst (<unidirectional association>)
	relation 3232770 --->
	  a role_name "negConst" multiplicity "[]" init_value " new BigInteger[MAX_CONSTANT+1]" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3232770 // negConst (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      classrelation 3232898 // powerCache (<unidirectional association>)
	relation 3232898 --->
	  a role_name "powerCache" multiplicity "[][]" class_relation volatile private
	    comment "
The cache of powers of each radix.  This allows us to not have to
recalculate powers of radix^(2^n) more than once.  This speeds
Schoenhage recursive base conversion significantly.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3232898 // powerCache (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      attribute 1750274 "logCache"
	class_attribute const_attribute private explicit_type "double"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The cache of logarithms of radices for base conversion. 
"
      end

      attribute 1750402 "LOG_TWO"
	class_attribute const_attribute private explicit_type "double"
	init_value " Math.log(2.0)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The natural log of 2.  This is used in computing cache indices. 
"
      end

      extra_member 162818 "initialization"
	
	cpp "" ""
	java "  static {
        for (int i = 1; i <= MAX_CONSTANT; i++) {
            int[] magnitude = new int[1];
            magnitude[0] = i;
            posConst[i] = new BigInteger(magnitude,  1);
            negConst[i] = new BigInteger(magnitude, -1);
        }

        /*
         * Initialize the cache of radix^(2^x) values used for base conversion
         * with just the very first value.  Additional values will be created
         * on demand.
         */
        powerCache = new BigInteger[Character.MAX_RADIX+1][];
        logCache = new double[Character.MAX_RADIX+1];

        for (int i=Character.MIN_RADIX; i <= Character.MAX_RADIX; i++) {
            powerCache[i] = new BigInteger[] { BigInteger.valueOf(i) };
            logCache[i] = Math.log(i);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3233026 // ZERO (<unidirectional association>)
	relation 3233026 --->
	  a role_name "ZERO" init_value " new BigInteger(new int[0], 0)" class_relation const_relation public
	    comment "
The BigInteger constant zero.

@since   1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3233026 // ZERO (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      classrelation 3233154 // ONE (<unidirectional association>)
	relation 3233154 --->
	  a role_name "ONE" init_value " valueOf(1)" class_relation const_relation public
	    comment "
The BigInteger constant one.

@since   1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3233154 // ONE (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      classrelation 3233282 // TWO (<unidirectional association>)
	relation 3233282 --->
	  a role_name "TWO" init_value " valueOf(2)" class_relation const_relation private
	    comment "
The BigInteger constant two.  (Not exported.)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3233282 // TWO (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      classrelation 3233410 // NEGATIVE_ONE (<unidirectional association>)
	relation 3233410 --->
	  a role_name "NEGATIVE_ONE" init_value " valueOf(-1)" class_relation const_relation private
	    comment "
The BigInteger constant -1.  (Not exported.)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3233410 // NEGATIVE_ONE (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      classrelation 3233538 // TEN (<unidirectional association>)
	relation 3233538 --->
	  a role_name "TEN" init_value " valueOf(10)" class_relation const_relation public
	    comment "
The BigInteger constant ten.

@since   1.5

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3233538 // TEN (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      operation 7394818 "add"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Arithmetic Operations

Returns a BigInteger whose value is {@code (this + val)}.

@param  val value to be added to this BigInteger.
@return {@code this + val}
"
      end

      operation 7394946 "add"
	package return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package private methods used by BigDecimal code to add a BigInteger
with a long. Assumes val is not equal to INFLATED.
"
      end

      operation 7395074 "add"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "x" explicit_type "int"
	multiplicity "[]"
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the contents of the int array x and long value val. This
method allocates a new int array to hold the answer and returns
a reference to that array.  Assumes x.length &gt; 0 and val is
non-negative
"
      end

      operation 7395202 "add"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "x" explicit_type "int"
	multiplicity "[]"
	  param inout name "y" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the contents of the int arrays x and y. This method allocates
a new int array to hold the answer and returns a reference to that
array.
"
      end

      operation 7395330 "subtract"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "val" explicit_type "long"
	  param inout name "little" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7395458 "subtract"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "big" explicit_type "int"
	multiplicity "[]"
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subtracts the contents of the second argument (val) from the
first (big).  The first int array (big) must represent a larger number
than the second.  This method allocates the space necessary to hold the
answer.
assumes val &gt;= 0
"
      end

      operation 7395586 "subtract"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is {@code (this - val)}.

@param  val value to be subtracted from this BigInteger.
@return {@code this - val}
"
      end

      operation 7395714 "subtract"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "big" explicit_type "int"
	multiplicity "[]"
	  param inout name "little" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subtracts the contents of the second int arrays (little) from the
first (big).  The first int array (big) must represent a larger number
than the second.  This method allocates the space necessary to hold the
answer.
"
      end

      operation 7395842 "multiply"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is {@code (this * val)}.

@implNote An implementation may offer better algorithmic
performance when {@code val == this}.

@param  val value to be multiplied by this BigInteger.
@return {@code this * val}
"
      end

      operation 7395970 "multiplyByInt"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 3
	  param inout name "x" explicit_type "int"
	multiplicity "[]"
	  param in name "y" explicit_type "int"
	  param in name "sign" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7396098 "multiply"
	package return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "v" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package private methods used by BigDecimal code to multiply a BigInteger
with a long. Assumes v is not equal to INFLATED.
"
      end

      operation 7396226 "multiplyToLen"
	class_operation private explicit_return_type "int"
	nparams 5
	  param inout name "x" explicit_type "int"
	multiplicity "[]"
	  param in name "xlen" explicit_type "int"
	  param inout name "y" explicit_type "int"
	multiplicity "[]"
	  param in name "ylen" explicit_type "int"
	  param inout name "z" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiplies int arrays x and y to the specified lengths and places
the result into z. There will be no leading zeros in the resultant array.
"
      end

      operation 7396354 "multiplyKaratsuba"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 2
	  param inout name "x" type class_ref 686338 // BigInteger
	  param inout name "y" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiplies two BigIntegers using the Karatsuba multiplication
algorithm.  This is a recursive divide-and-conquer algorithm which is
more efficient for large numbers than what is commonly called the
\"grade-school\" algorithm used in multiplyToLen.  If the numbers to be
multiplied have length n, the \"grade-school\" algorithm has an
asymptotic complexity of O(n^2).  In contrast, the Karatsuba algorithm
has complexity of O(n^(log2(3))), or O(n^1.585).  It achieves this
increased performance by doing 3 multiplies instead of 4 when
evaluating the product.  As it has some overhead, should be used when
both numbers are larger than a certain threshold (found
experimentally).

See:  http://en.wikipedia.org/wiki/Karatsuba_algorithm
"
      end

      operation 7396482 "multiplyToomCook3"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 2
	  param inout name "a" type class_ref 686338 // BigInteger
	  param inout name "b" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiplies two BigIntegers using a 3-way Toom-Cook multiplication
algorithm.  This is a recursive divide-and-conquer algorithm which is
more efficient for large numbers than what is commonly called the
\"grade-school\" algorithm used in multiplyToLen.  If the numbers to be
multiplied have length n, the \"grade-school\" algorithm has an
asymptotic complexity of O(n^2).  In contrast, 3-way Toom-Cook has a
complexity of about O(n^1.465).  It achieves this increased asymptotic
performance by breaking each number into three parts and by doing 5
multiplies instead of 9 when evaluating the product.  Due to overhead
(additions, shifts, and one division) in the Toom-Cook algorithm, it
should only be used when both numbers are larger than a certain
threshold (found experimentally).  This threshold is generally larger
than that for Karatsuba multiplication, so this algorithm is generally
only used when numbers become significantly larger.

The algorithm used is the \"optimal\" 3-way Toom-Cook algorithm outlined
by Marco Bodrato.

 See: http://bodrato.it/toom-cook/
      http://bodrato.it/papers/#WAIFI2007

\"Towards Optimal Toom-Cook Multiplication for Univariate and
Multivariate Polynomials in Characteristic 2 and 0.\" by Marco BODRATO;
In C.Carlet and B.Sunar, Eds., \"WAIFI'07 proceedings\", p. 116-133,
LNCS #4547. Springer, Madrid, Spain, June 21-22, 2007.

"
      end

      operation 7396610 "getToomSlice"
	private return_type class_ref 686338 // BigInteger
	nparams 4
	  param in name "lowerSize" explicit_type "int"
	  param in name "upperSize" explicit_type "int"
	  param in name "slice" explicit_type "int"
	  param in name "fullsize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a slice of a BigInteger for use in Toom-Cook multiplication.

@param lowerSize The size of the lower-order bit slices.
@param upperSize The size of the higher-order bit slices.
@param slice The index of which slice is requested, which must be a
number from 0 to size-1. Slice 0 is the highest-order bits, and slice
size-1 are the lowest-order bits. Slice 0 may be of different size than
the other slices.
@param fullsize The size of the larger integer array, used to align
slices to the appropriate position when multiplying different-sized
numbers.
"
      end

      operation 7396738 "exactDivideBy3"
	private return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does an exact division (that is, the remainder is known to be zero)
of the specified number by 3.  This is used in Toom-Cook
multiplication.  This is an efficient algorithm that runs in linear
time.  If the argument is not exactly divisible by 3, results are
undefined.  Note that this is expected to be called with positive
arguments only.
"
      end

      operation 7396866 "getLower"
	private return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new BigInteger representing n lower ints of the number.
This is used by Karatsuba multiplication and Karatsuba squaring.
"
      end

      operation 7396994 "getUpper"
	private return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new BigInteger representing mag.length-n upper
ints of the number.  This is used by Karatsuba multiplication and
Karatsuba squaring.
"
      end

      operation 7397122 "square"
	private return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Squaring

Returns a BigInteger whose value is {@code (this<sup>2</sup>)}.

@return {@code this<sup>2</sup>}
"
      end

      operation 7397250 "squareToLen"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "x" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param inout name "z" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Squares the contents of the int array x. The result is placed into the
int array z.  The contents of x are not changed.
"
      end

      operation 7397378 "implSquareToLenChecks"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "x" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param inout name "z" explicit_type "int"
	multiplicity "[]"
	  param in name "zlen" explicit_type "int"
	nexceptions 1
	  exception class_ref 214786 // RuntimeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parameters validation.
"
      end

      operation 7397506 "implSquareToLen"
	class_operation private explicit_return_type "int"
	nparams 4
	  param inout name "x" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param inout name "z" explicit_type "int"
	multiplicity "[]"
	  param in name "zlen" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Java Runtime may use intrinsic for this method.
"
      end

      operation 7397634 "squareKaratsuba"
	private return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Squares a BigInteger using the Karatsuba squaring algorithm.  It should
be used when both numbers are larger than a certain threshold (found
experimentally).  It is a recursive divide-and-conquer algorithm that
has better asymptotic performance than the algorithm used in
squareToLen.
"
      end

      operation 7397762 "squareToomCook3"
	private return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Squares a BigInteger using the 3-way Toom-Cook squaring algorithm.  It
should be used when both numbers are larger than a certain threshold
(found experimentally).  It is a recursive divide-and-conquer algorithm
that has better asymptotic performance than the algorithm used in
squareToLen or squareKaratsuba.
"
      end

      operation 7397890 "divide"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Division

Returns a BigInteger whose value is {@code (this / val)}.

@param  val value by which this BigInteger is to be divided.
@return {@code this / val}
@throws ArithmeticException if {@code val} is zero.
"
      end

      operation 7398018 "divideKnuth"
	private return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is {@code (this / val)} using an O(n^2) algorithm from Knuth.

@param  val value by which this BigInteger is to be divided.
@return {@code this / val}
@throws ArithmeticException if {@code val} is zero.
@see MutableBigInteger#divideKnuth(MutableBigInteger, MutableBigInteger, boolean)
"
      end

      operation 7398146 "divideAndRemainder"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of two BigIntegers containing {@code (this / val)}
followed by {@code (this % val)}.

@param  val value by which this BigInteger is to be divided, and the
        remainder computed.
@return an array of two BigIntegers: the quotient {@code (this / val)}
        is the initial element, and the remainder {@code (this % val)}
        is the final element.
@throws ArithmeticException if {@code val} is zero.
"
      end

      operation 7398274 "divideAndRemainderKnuth"
	private return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Long division "
      end

      operation 7398402 "remainder"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is {@code (this % val)}.

@param  val value by which this BigInteger is to be divided, and the
        remainder computed.
@return {@code this % val}
@throws ArithmeticException if {@code val} is zero.
"
      end

      operation 7398530 "remainderKnuth"
	private return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Long division "
      end

      operation 7398658 "divideBurnikelZiegler"
	private return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates {@code this / val} using the Burnikel-Ziegler algorithm.
@param  val the divisor
@return {@code this / val}
"
      end

      operation 7398786 "remainderBurnikelZiegler"
	private return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates {@code this % val} using the Burnikel-Ziegler algorithm.
@param val the divisor
@return {@code this % val}
"
      end

      operation 7398914 "divideAndRemainderBurnikelZiegler"
	private return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes {@code this / val} and {@code this % val} using the
Burnikel-Ziegler algorithm.
@param val the divisor
@return an array containing the quotient and remainder
"
      end

      operation 7399042 "pow"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "exponent" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(this<sup>exponent</sup>)</tt>.
Note that {@code exponent} is an integer rather than a BigInteger.

@param  exponent exponent to which this BigInteger is to be raised.
@return <tt>this<sup>exponent</sup></tt>
@throws ArithmeticException {@code exponent} is negative.  (This would
        cause the operation to yield a non-integer value.)
"
      end

      operation 7399170 "gcd"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is the greatest common divisor of
{@code abs(this)} and {@code abs(val)}.  Returns 0 if
{@code this == 0 && val == 0}.

@param  val value with which the GCD is to be computed.
@return {@code GCD(abs(this), abs(val))}
"
      end

      operation 7399298 "bitLengthForInt"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package private method to return bit length for an integer.
"
      end

      operation 7399426 "leftShift"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Left shift int array a up to len by n bits. Returns the array that
results from the shift since space may have to be reallocated.
"
      end

      operation 7399554 "primitiveRightShift"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " shifts a up to len right n bits assumes no leading zeros, 0<n<32"
      end

      operation 7399682 "primitiveLeftShift"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " shifts a up to len left n bits assumes no leading zeros, 0<=n<32"
      end

      operation 7399810 "bitLength"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "val" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate bitlength of contents of the first len elements an int array,
assuming there are no leading zero ints.
"
      end

      operation 7399938 "abs"
	public return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is the absolute value of this
BigInteger.

@return {@code abs(this)}
"
      end

      operation 7400066 "negate"
	public return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is {@code (-this)}.

@return {@code -this}
"
      end

      operation 7400194 "signum"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signum function of this BigInteger.

@return -1, 0 or 1 as the value of this BigInteger is negative, zero or
        positive.
"
      end

      operation 7400322 "mod"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "m" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modular Arithmetic Operations

Returns a BigInteger whose value is {@code (this mod m}).  This method
differs from {@code remainder} in that it always returns a
<i>non-negative</i> BigInteger.

@param  m the modulus.
@return {@code this mod m}
@throws ArithmeticException {@code m} &le; 0
@see    #remainder
"
      end

      operation 7400450 "modPow"
	public return_type class_ref 686338 // BigInteger
	nparams 2
	  param inout name "exponent" type class_ref 686338 // BigInteger
	  param inout name "m" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is
<tt>(this<sup>exponent</sup> mod m)</tt>.  (Unlike {@code pow}, this
method permits negative exponents.)

@param  exponent the exponent.
@param  m the modulus.
@return <tt>this<sup>exponent</sup> mod m</tt>
@throws ArithmeticException {@code m} &le; 0 or the exponent is
        negative and this BigInteger is not <i>relatively
        prime</i> to {@code m}.
@see    #modInverse
"
      end

      operation 7400578 "montgomeryMultiply"
	class_operation private explicit_return_type "int"
	nparams 6
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	  param inout name "b" explicit_type "int"
	multiplicity "[]"
	  param inout name "n" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param in name "inv" explicit_type "long"
	  param inout name "product" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Montgomery multiplication.  These are wrappers for
 implMontgomeryXX routines which are expected to be replaced by
 virtual machine intrinsics.  We don't use the intrinsics for
 very large operands: MONTGOMERY_INTRINSIC_THRESHOLD should be
 larger than any reasonable crypto key."
      end

      operation 7400706 "montgomerySquare"
	class_operation private explicit_return_type "int"
	nparams 5
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	  param inout name "n" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param in name "inv" explicit_type "long"
	  param inout name "product" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7400834 "implMontgomeryMultiplyChecks"
	class_operation private explicit_return_type "void"
	nparams 5
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	  param inout name "b" explicit_type "int"
	multiplicity "[]"
	  param inout name "n" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param inout name "product" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 214786 // RuntimeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Range-check everything."
      end

      operation 7400962 "materialize"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "z" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Make sure that the int array z (which is expected to contain
 the result of a Montgomery multiplication) is present and
 sufficiently large."
      end

      operation 7401090 "implMontgomeryMultiply"
	class_operation private explicit_return_type "int"
	nparams 6
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	  param inout name "b" explicit_type "int"
	multiplicity "[]"
	  param inout name "n" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param in name "inv" explicit_type "long"
	  param inout name "product" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " These methods are intended to be be replaced by virtual machine
 intrinsics."
      end

      operation 7401218 "implMontgomerySquare"
	class_operation private explicit_return_type "int"
	nparams 5
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	  param inout name "n" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param in name "inv" explicit_type "long"
	  param inout name "product" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1750530 "bnExpModThreshTable"
	class_attribute package explicit_type "int"
	multiplicity "[]"
	init_value " {7, 25, 81, 241, 673, 1793,
                                                Integer.MAX_VALUE}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Sentinel"
      end

      operation 7401346 "oddModPow"
	private return_type class_ref 686338 // BigInteger
	nparams 2
	  param inout name "y" type class_ref 686338 // BigInteger
	  param inout name "z" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is x to the power of y mod z.
Assumes: z is odd && x < z.
"
      end

      operation 7401474 "montReduce"
	class_operation private explicit_return_type "int"
	nparams 4
	  param inout name "n" explicit_type "int"
	multiplicity "[]"
	  param inout name "mod" explicit_type "int"
	multiplicity "[]"
	  param in name "mlen" explicit_type "int"
	  param in name "inv" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Montgomery reduce n, modulo mod.  This reduces modulo mod and divides
by 2^(32*mlen). Adapted from Colin Plumb's C library.
"
      end

      operation 7401602 "intArrayCmpToLen"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "arg1" explicit_type "int"
	multiplicity "[]"
	  param inout name "arg2" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns -1, 0 or +1 as big-endian unsigned int array arg1 is less than,
equal to, or greater than arg2 up to length len.
"
      end

      operation 7401730 "subN"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	  param inout name "b" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subtracts two numbers of same length, returning borrow.
"
      end

      operation 7401858 "mulAdd"
	class_operation package explicit_return_type "int"
	nparams 5
	  param inout name "out" explicit_type "int"
	multiplicity "[]"
	  param inout name "in" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiply an array by one word k and add to result, return the carry
"
      end

      operation 7401986 "implMulAddCheck"
	class_operation private explicit_return_type "void"
	nparams 5
	  param inout name "out" explicit_type "int"
	multiplicity "[]"
	  param inout name "in" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parameters validation.
"
      end

      operation 7402114 "implMulAdd"
	class_operation private explicit_return_type "int"
	nparams 5
	  param inout name "out" explicit_type "int"
	multiplicity "[]"
	  param inout name "in" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Java Runtime may use intrinsic for this method.
"
      end

      operation 7402242 "addOne"
	class_operation package explicit_return_type "int"
	nparams 4
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "mlen" explicit_type "int"
	  param in name "carry" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add one word to the number a mlen words into a. Return the resulting
carry.
"
      end

      operation 7402370 "modPow2"
	private return_type class_ref 686338 // BigInteger
	nparams 2
	  param inout name "exponent" type class_ref 686338 // BigInteger
	  param in name "p" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is (this ** exponent) mod (2**p)
"
      end

      operation 7402498 "mod2"
	private return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "p" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is this mod(2**p).
Assumes that this {@code BigInteger >= 0} and {@code p > 0}.
"
      end

      operation 7402626 "modInverse"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "m" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is {@code (this}<sup>-1</sup> {@code mod m)}.

@param  m the modulus.
@return {@code this}<sup>-1</sup> {@code mod m}.
@throws ArithmeticException {@code  m} &le; 0, or this BigInteger
        has no multiplicative inverse mod m (that is, this BigInteger
        is not <i>relatively prime</i> to m).
"
      end

      operation 7402754 "shiftLeft"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Shift Operations

Returns a BigInteger whose value is {@code (this << n)}.
The shift distance, {@code n}, may be negative, in which case
this method performs a right shift.
(Computes <tt>floor(this * 2<sup>n</sup>)</tt>.)

@param  n shift distance, in bits.
@return {@code this << n}
@see #shiftRight
"
      end

      operation 7402882 "shiftLeft"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "mag" explicit_type "int"
	multiplicity "[]"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a magnitude array whose value is {@code (mag << n)}.
The shift distance, {@code n}, is considered unnsigned.
(Computes <tt>this * 2<sup>n</sup></tt>.)

@param mag magnitude, the most-significant int ({@code mag[0]}) must be non-zero.
@param  n unsigned shift distance, in bits.
@return {@code mag << n}
"
      end

      operation 7403010 "shiftRight"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is {@code (this >> n)}.  Sign
extension is performed.  The shift distance, {@code n}, may be
negative, in which case this method performs a left shift.
(Computes <tt>floor(this / 2<sup>n</sup>)</tt>.)

@param  n shift distance, in bits.
@return {@code this >> n}
@see #shiftLeft
"
      end

      operation 7403138 "shiftRightImpl"
	private return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is {@code (this >> n)}. The shift
distance, {@code n}, is considered unsigned.
(Computes <tt>floor(this * 2<sup>-n</sup>)</tt>.)

@param  n unsigned shift distance, in bits.
@return {@code this >> n}
"
      end

      operation 7403266 "javaIncrement"
	package explicit_return_type "int"
	nparams 1
	  param inout name "val" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7403394 "and"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bitwise Operations

Returns a BigInteger whose value is {@code (this & val)}.  (This
method returns a negative BigInteger if and only if this and val are
both negative.)

@param val value to be AND'ed with this BigInteger.
@return {@code this & val}
"
      end

      operation 7403522 "or"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is {@code (this | val)}.  (This method
returns a negative BigInteger if and only if either this or val is
negative.)

@param val value to be OR'ed with this BigInteger.
@return {@code this | val}
"
      end

      operation 7403650 "xor"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is {@code (this ^ val)}.  (This method
returns a negative BigInteger if and only if exactly one of this and
val are negative.)

@param val value to be XOR'ed with this BigInteger.
@return {@code this ^ val}
"
      end

      operation 7403778 "not"
	public return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is {@code (~this)}.  (This method
returns a negative value if and only if this BigInteger is
non-negative.)

@return {@code ~this}
"
      end

      operation 7403906 "andNot"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is {@code (this & ~val)}.  This
method, which is equivalent to {@code and(val.not())}, is provided as
a convenience for masking operations.  (This method returns a negative
BigInteger if and only if {@code this} is negative and {@code val} is
positive.)

@param val value to be complemented and AND'ed with this BigInteger.
@return {@code this & ~val}
"
      end

      operation 7404034 "testBit"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Single Bit Operations

Returns {@code true} if and only if the designated bit is set.
(Computes {@code ((this & (1<<n)) != 0)}.)

@param  n index of bit to test.
@return {@code true} if and only if the designated bit is set.
@throws ArithmeticException {@code n} is negative.
"
      end

      operation 7404162 "setBit"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is equivalent to this BigInteger
with the designated bit set.  (Computes {@code (this | (1<<n))}.)

@param  n index of bit to set.
@return {@code this | (1<<n)}
@throws ArithmeticException {@code n} is negative.
"
      end

      operation 7404290 "clearBit"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is equivalent to this BigInteger
with the designated bit cleared.
(Computes {@code (this & ~(1<<n))}.)

@param  n index of bit to clear.
@return {@code this & ~(1<<n)}
@throws ArithmeticException {@code n} is negative.
"
      end

      operation 7404418 "flipBit"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is equivalent to this BigInteger
with the designated bit flipped.
(Computes {@code (this ^ (1<<n))}.)

@param  n index of bit to flip.
@return {@code this ^ (1<<n)}
@throws ArithmeticException {@code n} is negative.
"
      end

      operation 7404546 "getLowestSetBit"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the rightmost (lowest-order) one bit in this
BigInteger (the number of zero bits to the right of the rightmost
one bit).  Returns -1 if this BigInteger contains no one bits.
(Computes {@code (this == 0? -1 : log2(this & -this))}.)

@return index of the rightmost one bit in this BigInteger.
"
      end

      operation 7404674 "bitLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Miscellaneous Bit Operations

Returns the number of bits in the minimal two's-complement
representation of this BigInteger, <i>excluding</i> a sign bit.
For positive BigIntegers, this is equivalent to the number of bits in
the ordinary binary representation.  (Computes
{@code (ceil(log2(this < 0 ? -this : this+1)))}.)

@return number of bits in the minimal two's-complement
        representation of this BigInteger, <i>excluding</i> a sign bit.
"
      end

      operation 7404802 "bitCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bits in the two's complement representation
of this BigInteger that differ from its sign bit.  This method is
useful when implementing bit-vector style sets atop BigIntegers.

@return number of bits in the two's complement representation
        of this BigInteger that differ from its sign bit.
"
      end

      operation 7404930 "isProbablePrime"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "certainty" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Primality Testing

Returns {@code true} if this BigInteger is probably prime,
{@code false} if it's definitely composite.  If
{@code certainty} is &le; 0, {@code true} is
returned.

@param  certainty a measure of the uncertainty that the caller is
        willing to tolerate: if the call returns {@code true}
        the probability that this BigInteger is prime exceeds
        (1 - 1/2<sup>{@code certainty}</sup>).  The execution time of
        this method is proportional to the value of this parameter.
@return {@code true} if this BigInteger is probably prime,
        {@code false} if it's definitely composite.
"
      end

      operation 7405058 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison Operations

Compares this BigInteger with the specified BigInteger.  This
method is provided in preference to individual methods for each
of the six boolean comparison operators ({@literal <}, ==,
{@literal >}, {@literal >=}, !=, {@literal <=}).  The suggested
idiom for performing these comparisons is: {@code
(x.compareTo(y)} &lt;<i>op</i>&gt; {@code 0)}, where
&lt;<i>op</i>&gt; is one of the six comparison operators.

@param  val BigInteger to which this BigInteger is to be compared.
@return -1, 0 or 1 as this BigInteger is numerically less than, equal
        to, or greater than {@code val}.
"
      end

      operation 7405186 "compareMagnitude"
	package explicit_return_type "int"
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the magnitude array of this BigInteger with the specified
BigInteger's. This is the version of compareTo ignoring sign.

@param val BigInteger whose magnitude array to be compared.
@return -1, 0 or 1 as this magnitude array is less than, equal to or
        greater than the magnitude aray for the specified BigInteger's.
"
      end

      operation 7405314 "compareMagnitude"
	package explicit_return_type "int"
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Version of compareMagnitude that compares magnitude with long value.
val can't be Long.MIN_VALUE.
"
      end

      operation 7405442 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this BigInteger with the specified Object for equality.

@param  x Object to which this BigInteger is to be compared.
@return {@code true} if and only if the specified Object is a
        BigInteger whose value is numerically equal to this BigInteger.
"
      end

      operation 7405570 "min"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum of this BigInteger and {@code val}.

@param  val value with which the minimum is to be computed.
@return the BigInteger whose value is the lesser of this BigInteger and
        {@code val}.  If they are equal, either may be returned.
"
      end

      operation 7405698 "max"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum of this BigInteger and {@code val}.

@param  val value with which the maximum is to be computed.
@return the BigInteger whose value is the greater of this and
        {@code val}.  If they are equal, either may be returned.
"
      end

      operation 7405826 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Hash Function

Returns the hash code for this BigInteger.

@return hash code for this BigInteger.
"
      end

      operation 7405954 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of this BigInteger in the
given radix.  If the radix is outside the range from {@link
Character#MIN_RADIX} to {@link Character#MAX_RADIX} inclusive,
it will default to 10 (as is the case for
{@code Integer.toString}).  The digit-to-character mapping
provided by {@code Character.forDigit} is used, and a minus
sign is prepended if appropriate.  (This representation is
compatible with the {@link #BigInteger(String, int) (String,
int)} constructor.)

@param  radix  radix of the String representation.
@return String representation of this BigInteger in the given radix.
@see    Integer#toString
@see    Character#forDigit
@see    #BigInteger(java.lang.String, int)
"
      end

      operation 7406082 "smallToString"
	private return_type class_ref 128130 // String
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This method is used to perform toString when arguments are small. "
      end

      operation 7406210 "toString"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "u" type class_ref 686338 // BigInteger
	  param inout name "sb" type class_ref 173058 // StringBuilder
	  param in name "radix" explicit_type "int"
	  param in name "digits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the specified BigInteger to a string and appends to
{@code sb}.  This implements the recursive Schoenhage algorithm
for base conversions.
<p/>
See Knuth, Donald,  _The Art of Computer Programming_, Vol. 2,
Answers to Exercises (4.4) Question 14.

@param u      The number to convert to a string.
@param sb     The StringBuilder that will be appended to in place.
@param radix  The base to convert to.
@param digits The minimum number of digits to pad to.
"
      end

      operation 7406338 "getRadixConversionCache"
	class_operation private return_type class_ref 686338 // BigInteger
	nparams 2
	  param in name "radix" explicit_type "int"
	  param in name "exponent" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value radix^(2^exponent) from the cache.
If this value doesn't already exist in the cache, it is added.
<p/>
This could be changed to a more complicated caching method using
{@code Future}.
"
      end

      classrelation 3233666 // zeros (<unidirectional association>)
	relation 3233666 --->
	  a role_name "zeros" multiplicity "[]" init_value " new String[64]" class_relation private
	    comment " zero[i] is a string of i consecutive zeros. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3233666 // zeros (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      extra_member 162946 "initialization"
	
	cpp "" ""
	java "  static {
        zeros[63] =
            \"000000000000000000000000000000000000000000000000000000000000000\";
        for (int i=0; i < 63; i++)
            zeros[i] = zeros[63].substring(0, i);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7406466 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the decimal String representation of this BigInteger.
The digit-to-character mapping provided by
{@code Character.forDigit} is used, and a minus sign is
prepended if appropriate.  (This representation is compatible
with the {@link #BigInteger(String) (String)} constructor, and
allows for String concatenation with Java's + operator.)

@return decimal String representation of this BigInteger.
@see    Character#forDigit
@see    #BigInteger(java.lang.String)
"
      end

      operation 7406594 "toByteArray"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a byte array containing the two's-complement
representation of this BigInteger.  The byte array will be in
<i>big-endian</i> byte-order: the most significant byte is in
the zeroth element.  The array will contain the minimum number
of bytes required to represent this BigInteger, including at
least one sign bit, which is {@code (ceil((this.bitLength() +
1)/8))}.  (This representation is compatible with the
{@link #BigInteger(byte[]) (byte[])} constructor.)

@return a byte array containing the two's-complement representation of
        this BigInteger.
@see    #BigInteger(byte[])
"
      end

      operation 7406722 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this BigInteger to an {@code int}.  This
conversion is analogous to a
<i>narrowing primitive conversion</i> from {@code long} to
{@code int} as defined in section 5.1.3 of
<cite>The Java&trade; Language Specification</cite>:
if this BigInteger is too big to fit in an
{@code int}, only the low-order 32 bits are returned.
Note that this conversion can lose information about the
overall magnitude of the BigInteger value as well as return a
result with the opposite sign.

@return this BigInteger converted to an {@code int}.
@see #intValueExact()
"
      end

      operation 7406850 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this BigInteger to a {@code long}.  This
conversion is analogous to a
<i>narrowing primitive conversion</i> from {@code long} to
{@code int} as defined in section 5.1.3 of
<cite>The Java&trade; Language Specification</cite>:
if this BigInteger is too big to fit in a
{@code long}, only the low-order 64 bits are returned.
Note that this conversion can lose information about the
overall magnitude of the BigInteger value as well as return a
result with the opposite sign.

@return this BigInteger converted to a {@code long}.
@see #longValueExact()
"
      end

      operation 7406978 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this BigInteger to a {@code float}.  This
conversion is similar to the
<i>narrowing primitive conversion</i> from {@code double} to
{@code float} as defined in section 5.1.3 of
<cite>The Java&trade; Language Specification</cite>:
if this BigInteger has too great a magnitude
to represent as a {@code float}, it will be converted to
{@link Float#NEGATIVE_INFINITY} or {@link
Float#POSITIVE_INFINITY} as appropriate.  Note that even when
the return value is finite, this conversion can lose
information about the precision of the BigInteger value.

@return this BigInteger converted to a {@code float}.
"
      end

      operation 7407106 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this BigInteger to a {@code double}.  This
conversion is similar to the
<i>narrowing primitive conversion</i> from {@code double} to
{@code float} as defined in section 5.1.3 of
<cite>The Java&trade; Language Specification</cite>:
if this BigInteger has too great a magnitude
to represent as a {@code double}, it will be converted to
{@link Double#NEGATIVE_INFINITY} or {@link
Double#POSITIVE_INFINITY} as appropriate.  Note that even when
the return value is finite, this conversion can lose
information about the precision of the BigInteger value.

@return this BigInteger converted to a {@code double}.
"
      end

      operation 7407234 "stripLeadingZeroInts"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "val" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the input array stripped of any leading zero bytes.
"
      end

      operation 7407362 "trustedStripLeadingZeroInts"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "val" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the input array stripped of any leading zero bytes.
Since the source is trusted the copying may be skipped.
"
      end

      operation 7407490 "stripLeadingZeroBytes"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "a" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the input array stripped of any leading zero bytes.
"
      end

      operation 7407618 "makePositive"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "a" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Takes an array a representing a negative 2's-complement number and
returns the minimal (no leading zero bytes) unsigned whose value is -a.
"
      end

      operation 7407746 "makePositive"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Takes an array a representing a negative 2's-complement number and
returns the minimal (no leading zero ints) unsigned whose value is -a.
"
      end

      attribute 1750658 "digitsPerLong"
	class_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {0, 0,
        62, 39, 31, 27, 24, 22, 20, 19, 18, 18, 17, 17, 16, 16, 15, 15, 15, 14,
        14, 14, 14, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The following two arrays are used for fast String conversions.  Both
are indexed by radix.  The first is the number of digits of the given
radix that can fit in a Java long without \"going negative\", i.e., the
highest integer n such that radix**n < 2**63.  The second is the
\"long radix\" that tears each number into \"long digits\", each of which
consists of the number of digits in the corresponding element in
digitsPerLong (longRadix[i] = i**digitPerLong[i]).  Both arrays have
nonsense values in their 0 and 1 elements, as radixes 0 and 1 are not
used.

"
      end

      classrelation 3233794 // longRadix (<unidirectional association>)
	relation 3233794 --->
	  a role_name "longRadix" multiplicity "[]" init_value " {null, null,
        valueOf(0x4000000000000000L), valueOf(0x383d9170b85ff80bL),
        valueOf(0x4000000000000000L), valueOf(0x6765c793fa10079dL),
        valueOf(0x41c21cb8e1000000L), valueOf(0x3642798750226111L),
        valueOf(0x1000000000000000L), valueOf(0x12bf307ae81ffd59L),
        valueOf( 0xde0b6b3a7640000L), valueOf(0x4d28cb56c33fa539L),
        valueOf(0x1eca170c00000000L), valueOf(0x780c7372621bd74dL),
        valueOf(0x1e39a5057d810000L), valueOf(0x5b27ac993df97701L),
        valueOf(0x1000000000000000L), valueOf(0x27b95e997e21d9f1L),
        valueOf(0x5da0e1e53c5c8000L), valueOf( 0xb16a458ef403f19L),
        valueOf(0x16bcc41e90000000L), valueOf(0x2d04b7fdd9c0ef49L),
        valueOf(0x5658597bcaa24000L), valueOf( 0x6feb266931a75b7L),
        valueOf( 0xc29e98000000000L), valueOf(0x14adf4b7320334b9L),
        valueOf(0x226ed36478bfa000L), valueOf(0x383d9170b85ff80bL),
        valueOf(0x5a3c23e39c000000L), valueOf( 0x4e900abb53e6b71L),
        valueOf( 0x7600ec618141000L), valueOf( 0xaee5720ee830681L),
        valueOf(0x1000000000000000L), valueOf(0x172588ad4f5f0981L),
        valueOf(0x211e44f7d02c1000L), valueOf(0x2ee56725f06e5c71L),
        valueOf(0x41c21cb8e1000000L)}" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3233794 // longRadix (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      attribute 1750786 "digitsPerInt"
	class_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {0, 0, 30, 19, 15, 13, 11,
        11, 10, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "These two arrays are the integer analogue of above.

"
      end

      attribute 1750914 "intRadix"
	class_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {0, 0,
        0x40000000, 0x4546b3db, 0x40000000, 0x48c27395, 0x159fd800,
        0x75db9c97, 0x40000000, 0x17179149, 0x3b9aca00, 0xcc6db61,
        0x19a10000, 0x309f1021, 0x57f6c100, 0xa2f1b6f,  0x10000000,
        0x18754571, 0x247dbc80, 0x3547667b, 0x4c4b4000, 0x6b5a6e1d,
        0x6c20a40,  0x8d2d931,  0xb640000,  0xe8d4a51,  0x1269ae40,
        0x17179149, 0x1cb91000, 0x23744899, 0x2b73a840, 0x34e63b41,
        0x40000000, 0x4cfa3cc1, 0x5c13d840, 0x6d91b519, 0x39aa400
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7407874 "intLength"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "These routines provide access to the two's complement representation
of BigIntegers.


Returns the length of the two's complement representation in ints,
including space for at least one sign bit.
"
      end

      operation 7408002 "signBit"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns sign bit "
      end

      operation 7408130 "signInt"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns an int of sign bits "
      end

      operation 7408258 "getInt"
	private explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the specified int of the little-endian two's complement
representation (int 0 is the least significant).  The int number can
be arbitrarily high (values are logically preceded by infinitely many
sign ints).
"
      end

      operation 7408386 "firstNonzeroIntNum"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the int that contains the first nonzero int in the
little-endian binary representation of the magnitude (int 0 is the
least significant). If the magnitude is zero, return value is undefined.
"
      end

      attribute 1751042 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8287574255936472291L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " use serialVersionUID from JDK 1.1. for interoperability 
"
      end

      classrelation 3233922 // serialPersistentFields (<unidirectional association>)
	relation 3233922 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"signum\", Integer.TYPE),
        new ObjectStreamField(\"magnitude\", byte[].class),
        new ObjectStreamField(\"bitCount\", Integer.TYPE),
        new ObjectStreamField(\"bitLength\", Integer.TYPE),
        new ObjectStreamField(\"firstNonzeroByteNum\", Integer.TYPE),
        new ObjectStreamField(\"lowestSetBit\", Integer.TYPE)
        }" class_relation const_relation private
	    comment "
Serializable fields for BigInteger.

@serialField signum  int
             signum of this BigInteger.
@serialField magnitude int[]
             magnitude array of this BigInteger.
@serialField bitCount  int
             number of bits in this BigInteger
@serialField bitLength int
             the number of bits in the minimal two's-complement
             representation of this BigInteger
@serialField lowestSetBit int
             lowest set bit in the twos complement representation

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3233922 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      operation 7408514 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the {@code BigInteger} instance from a stream (that is,
deserialize it). The magnitude is read in as an array of bytes
for historical reasons, but it is converted to an array of ints
and the byte array is discarded.
Note:
The current convention is to initialize the cache fields, bitCount,
bitLength and lowestSetBit, to 0 rather than some other marker value.
Therefore, no explicit action to set these fields needs to be taken in
readObject because those fields already have a 0 value be default since
defaultReadObject is not being used.
"
      end

      class 961410 "UnsafeHolder"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1751170 "unsafe"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1751298 "signumOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1751426 "magOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 163074 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                unsafe = sun.misc.Unsafe.getUnsafe();
                signumOffset = unsafe.objectFieldOffset
                    (BigInteger.class.getDeclaredField(\"signum\"));
                magOffset = unsafe.objectFieldOffset
                    (BigInteger.class.getDeclaredField(\"mag\"));
            } catch (Exception ex) {
                throw new ExceptionInInitializerError(ex);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end

	operation 7408642 "putSign"
	  class_operation package explicit_return_type "void"
	  nparams 2
	    param inout name "bi" type class_ref 686338 // BigInteger
	    param in name "sign" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7408770 "putMag"
	  class_operation package explicit_return_type "void"
	  nparams 2
	    param inout name "bi" type class_ref 686338 // BigInteger
	    param inout name "magnitude" explicit_type "int"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7408898 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the {@code BigInteger} instance to a stream.
The magnitude of a BigInteger is serialized as a byte array for
historical reasons.

@serialData two necessary fields are written as well as obsolete
            fields for compatibility with older versions.
"
      end

      operation 7409026 "magSerializedForm"
	private explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the mag array as an array of bytes.
"
      end

      operation 7409154 "longValueExact"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigInteger} to a {@code long}, checking
for lost information.  If the value of this {@code BigInteger}
is out of the range of the {@code long} type, then an
{@code ArithmeticException} is thrown.

@return this {@code BigInteger} converted to a {@code long}.
@throws ArithmeticException if the value of {@code this} will
not exactly fit in a {@code long}.
@see BigInteger#longValue
@since  1.8
"
      end

      operation 7409282 "intValueExact"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigInteger} to an {@code int}, checking
for lost information.  If the value of this {@code BigInteger}
is out of the range of the {@code int} type, then an
{@code ArithmeticException} is thrown.

@return this {@code BigInteger} converted to an {@code int}.
@throws ArithmeticException if the value of {@code this} will
not exactly fit in a {@code int}.
@see BigInteger#intValue
@since  1.8
"
      end

      operation 7409410 "shortValueExact"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigInteger} to a {@code short}, checking
for lost information.  If the value of this {@code BigInteger}
is out of the range of the {@code short} type, then an
{@code ArithmeticException} is thrown.

@return this {@code BigInteger} converted to a {@code short}.
@throws ArithmeticException if the value of {@code this} will
not exactly fit in a {@code short}.
@see BigInteger#shortValue
@since  1.8
"
      end

      operation 7409538 "byteValueExact"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code BigInteger} to a {@code byte}, checking
for lost information.  If the value of this {@code BigInteger}
is out of the range of the {@code byte} type, then an
{@code ArithmeticException} is thrown.

@return this {@code BigInteger} converted to a {@code byte}.
@throws ArithmeticException if the value of {@code this} will
not exactly fit in a {@code byte}.
@see BigInteger#byteValue
@since  1.8
"
      end
    end

    class 960770 "MathContext"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable objects which encapsulate the context settings which
describe certain rules for numerical operators, such as those
implemented by the {@link BigDecimal} class.

<p>The base-independent settings are:
<ol>
<li>{@code precision}:
the number of digits to be used for an operation; results are
rounded to this precision

<li>{@code roundingMode}:
a {@link RoundingMode} object which specifies the algorithm to be
used for rounding.
</ol>

@see     BigDecimal
@see     RoundingMode
@author  Mike Cowlishaw
@author  Joseph D. Darcy
@since 1.5
"
      classrelation 3234178 // <realization>
	relation 3234178 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3234178 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1751810 "DEFAULT_DIGITS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ----- Constants ----- 
 defaults for constructors
"
      end

      classrelation 3234306 // DEFAULT_ROUNDINGMODE (<unidirectional association>)
	relation 3234306 --->
	  a role_name "DEFAULT_ROUNDINGMODE" init_value " RoundingMode.HALF_UP" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3234306 // DEFAULT_ROUNDINGMODE (<unidirectional association>)
	  b parent class_ref 960898 // RoundingMode
      end

      attribute 1751938 "MIN_DIGITS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Smallest values for digits (Maximum is Integer.MAX_VALUE)
"
      end

      attribute 1752066 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5579720004786848255L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization version
"
      end

      classrelation 3234434 // UNLIMITED (<unidirectional association>)
	relation 3234434 --->
	  a role_name "UNLIMITED" init_value "
        new MathContext(0, RoundingMode.HALF_UP)" class_relation const_relation public
	    comment " ----- Public Properties ----- 

 A {@code MathContext} object whose settings have the values
 required for unlimited precision arithmetic.
 The values of the settings are:
 <code>
 precision=0 roundingMode=HALF_UP
 </code>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3234434 // UNLIMITED (<unidirectional association>)
	  b parent class_ref 960770 // MathContext
      end

      classrelation 3234562 // DECIMAL32 (<unidirectional association>)
	relation 3234562 --->
	  a role_name "DECIMAL32" init_value "
        new MathContext(7, RoundingMode.HALF_EVEN)" class_relation const_relation public
	    comment "
 A {@code MathContext} object with a precision setting
 matching the IEEE 754R Decimal32 format, 7 digits, and a
 rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the
 IEEE 754R default.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3234562 // DECIMAL32 (<unidirectional association>)
	  b parent class_ref 960770 // MathContext
      end

      classrelation 3234690 // DECIMAL64 (<unidirectional association>)
	relation 3234690 --->
	  a role_name "DECIMAL64" init_value "
        new MathContext(16, RoundingMode.HALF_EVEN)" class_relation const_relation public
	    comment "
 A {@code MathContext} object with a precision setting
 matching the IEEE 754R Decimal64 format, 16 digits, and a
 rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the
 IEEE 754R default.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3234690 // DECIMAL64 (<unidirectional association>)
	  b parent class_ref 960770 // MathContext
      end

      classrelation 3234818 // DECIMAL128 (<unidirectional association>)
	relation 3234818 --->
	  a role_name "DECIMAL128" init_value "
        new MathContext(34, RoundingMode.HALF_EVEN)" class_relation const_relation public
	    comment "
 A {@code MathContext} object with a precision setting
 matching the IEEE 754R Decimal128 format, 34 digits, and a
 rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the
 IEEE 754R default.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3234818 // DECIMAL128 (<unidirectional association>)
	  b parent class_ref 960770 // MathContext
      end

      attribute 1752194 "precision"
	const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ----- Shared Properties ----- 

The number of digits to be used for an operation.  A value of 0
indicates that unlimited precision (as many digits as are
required) will be used.  Note that leading zeros (in the
coefficient of a number) are never significant.

<p>{@code precision} will always be non-negative.

@serial

"
      end

      classrelation 3234946 // roundingMode (<unidirectional association>)
	relation 3234946 --->
	  a role_name "roundingMode" const_relation package
	    comment "
The rounding algorithm to be used for an operation.

@see RoundingMode
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3234946 // roundingMode (<unidirectional association>)
	  b parent class_ref 960898 // RoundingMode
      end

      operation 7410818 "MathContext"
	public explicit_return_type ""
	nparams 1
	  param in name "setPrecision" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ----- Constructors ----- 

Constructs a new {@code MathContext} with the specified
precision and the {@link RoundingMode#HALF_UP HALF_UP} rounding
mode.

@param setPrecision The non-negative {@code int} precision setting.
@throws IllegalArgumentException if the {@code setPrecision} parameter is less
        than zero.
"
      end

      operation 7410946 "MathContext"
	public explicit_return_type ""
	nparams 2
	  param in name "setPrecision" explicit_type "int"
	  param inout name "setRoundingMode" type class_ref 960898 // RoundingMode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code MathContext} with a specified
precision and rounding mode.

@param setPrecision The non-negative {@code int} precision setting.
@param setRoundingMode The rounding mode to use.
@throws IllegalArgumentException if the {@code setPrecision} parameter is less
        than zero.
@throws NullPointerException if the rounding mode argument is {@code null}
"
      end

      operation 7411074 "MathContext"
	public explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code MathContext} from a string.

The string must be in the same format as that produced by the
{@link #toString} method.

<p>An {@code IllegalArgumentException} is thrown if the precision
section of the string is out of range ({@code < 0}) or the string is
not in the format created by the {@link #toString} method.

@param val The string to be parsed
@throws IllegalArgumentException if the precision section is out of range
or of incorrect format
@throws NullPointerException if the argument is {@code null}
"
      end

      operation 7411202 "getPrecision"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code precision} setting.
This value is always non-negative.

@return an {@code int} which is the value of the {@code precision}
        setting
"
      end

      operation 7411330 "getRoundingMode"
	public return_type class_ref 960898 // RoundingMode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the roundingMode setting.
This will be one of
{@link  RoundingMode#CEILING},
{@link  RoundingMode#DOWN},
{@link  RoundingMode#FLOOR},
{@link  RoundingMode#HALF_DOWN},
{@link  RoundingMode#HALF_EVEN},
{@link  RoundingMode#HALF_UP},
{@link  RoundingMode#UNNECESSARY}, or
{@link  RoundingMode#UP}.

@return a {@code RoundingMode} object which is the value of the
        {@code roundingMode} setting
"
      end

      operation 7411458 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this {@code MathContext} with the specified
{@code Object} for equality.

@param  x {@code Object} to which this {@code MathContext} is to
        be compared.
@return {@code true} if and only if the specified {@code Object} is
        a {@code MathContext} object which has exactly the same
        settings as this object
"
      end

      operation 7411586 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code for this {@code MathContext}.

@return hash code for this {@code MathContext}
"
      end

      operation 7411714 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of this {@code MathContext}.
The {@code String} returned represents the settings of the
{@code MathContext} object as two space-delimited words
(separated by a single space character, <tt>'&#92;u0020'</tt>,
and with no leading or trailing white space), as follows:
<ol>
<li>
The string {@code \"precision=\"}, immediately followed
by the value of the precision setting as a numeric string as if
generated by the {@link Integer#toString(int) Integer.toString}
method.

<li>
The string {@code \"roundingMode=\"}, immediately
followed by the value of the {@code roundingMode} setting as a
word.  This word will be the same as the name of the
corresponding public constant in the {@link RoundingMode}
enum.
</ol>
<p>
For example:
<pre>
precision=9 roundingMode=HALF_UP
</pre>

Additional words may be appended to the result of
{@code toString} in the future if more properties are added to
this class.

@return a {@code String} representing the context settings
"
      end

      operation 7411842 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private methods

Reconstitute the {@code MathContext} instance from a stream (that is,
deserialize it).

@param s the stream being read.
"
      end
    end

    class 960898 "RoundingMode"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Specifies a <i>rounding behavior</i> for numerical operations
capable of discarding precision. Each rounding mode indicates how
the least significant returned digit of a rounded result is to be
calculated.  If fewer digits are returned than the digits needed to
represent the exact numerical result, the discarded digits will be
referred to as the <i>discarded fraction</i> regardless the digits'
contribution to the value of the number.  In other words,
considered as a numerical value, the discarded fraction could have
an absolute value greater than one.

<p>Each rounding mode description includes a table listing how
different two-digit decimal values would round to a one digit
decimal value under the rounding mode in question.  The result
column in the tables could be gotten by creating a
{@code BigDecimal} number with the specified value, forming a
{@link MathContext} object with the proper settings
({@code precision} set to {@code 1}, and the
{@code roundingMode} set to the rounding mode in question), and
calling {@link BigDecimal#round round} on this number with the
proper {@code MathContext}.  A summary table showing the results
of these rounding operations for all rounding modes appears below.

<table border>
<caption><b>Summary of Rounding Operations Under Different Rounding Modes</b></caption>
<tr><th></th><th colspan=8>Result of rounding input to one digit with the given
                          rounding mode</th>
<tr valign=top>
<th>Input Number</th>         <th>{@code UP}</th>
                                          <th>{@code DOWN}</th>
                                                       <th>{@code CEILING}</th>
                                                                      <th>{@code FLOOR}</th>
                                                                                   <th>{@code HALF_UP}</th>
                                                                                                  <th>{@code HALF_DOWN}</th>
                                                                                                                   <th>{@code HALF_EVEN}</th>
                                                                                                                                    <th>{@code UNNECESSARY}</th>

<tr align=right><td>5.5</td>  <td>6</td>  <td>5</td>    <td>6</td>    <td>5</td>  <td>6</td>      <td>5</td>       <td>6</td>       <td>throw {@code ArithmeticException}</td>
<tr align=right><td>2.5</td>  <td>3</td>  <td>2</td>    <td>3</td>    <td>2</td>  <td>3</td>      <td>2</td>       <td>2</td>       <td>throw {@code ArithmeticException}</td>
<tr align=right><td>1.6</td>  <td>2</td>  <td>1</td>    <td>2</td>    <td>1</td>  <td>2</td>      <td>2</td>       <td>2</td>       <td>throw {@code ArithmeticException}</td>
<tr align=right><td>1.1</td>  <td>2</td>  <td>1</td>    <td>2</td>    <td>1</td>  <td>1</td>      <td>1</td>       <td>1</td>       <td>throw {@code ArithmeticException}</td>
<tr align=right><td>1.0</td>  <td>1</td>  <td>1</td>    <td>1</td>    <td>1</td>  <td>1</td>      <td>1</td>       <td>1</td>       <td>1</td>
<tr align=right><td>-1.0</td> <td>-1</td> <td>-1</td>   <td>-1</td>   <td>-1</td> <td>-1</td>     <td>-1</td>      <td>-1</td>      <td>-1</td>
<tr align=right><td>-1.1</td> <td>-2</td> <td>-1</td>   <td>-1</td>   <td>-2</td> <td>-1</td>     <td>-1</td>      <td>-1</td>      <td>throw {@code ArithmeticException}</td>
<tr align=right><td>-1.6</td> <td>-2</td> <td>-1</td>   <td>-1</td>   <td>-2</td> <td>-2</td>     <td>-2</td>      <td>-2</td>      <td>throw {@code ArithmeticException}</td>
<tr align=right><td>-2.5</td> <td>-3</td> <td>-2</td>   <td>-2</td>   <td>-3</td> <td>-3</td>     <td>-2</td>      <td>-2</td>      <td>throw {@code ArithmeticException}</td>
<tr align=right><td>-5.5</td> <td>-6</td> <td>-5</td>   <td>-5</td>   <td>-6</td> <td>-6</td>     <td>-5</td>      <td>-6</td>      <td>throw {@code ArithmeticException}</td>
</table>


<p>This {@code enum} is intended to replace the integer-based
enumeration of rounding mode constants in {@link BigDecimal}
({@link BigDecimal#ROUND_UP}, {@link BigDecimal#ROUND_DOWN},
etc. ).

@see     BigDecimal
@see     MathContext
@author  Josh Bloch
@author  Mike Cowlishaw
@author  Joseph D. Darcy
@since 1.5
"
      attribute 1752962 "UP"
	public type class_ref 960898 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_UP),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to round away from zero.  Always increments the
digit prior to a non-zero discarded fraction.  Note that this
rounding mode never decreases the magnitude of the calculated
value.

<p>Example:
<table border>
<caption><b>Rounding mode UP Examples</b></caption>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with {@code UP} rounding
<tr align=right><td>5.5</td>  <td>6</td>
<tr align=right><td>2.5</td>  <td>3</td>
<tr align=right><td>1.6</td>  <td>2</td>
<tr align=right><td>1.1</td>  <td>2</td>
<tr align=right><td>1.0</td>  <td>1</td>
<tr align=right><td>-1.0</td> <td>-1</td>
<tr align=right><td>-1.1</td> <td>-2</td>
<tr align=right><td>-1.6</td> <td>-2</td>
<tr align=right><td>-2.5</td> <td>-3</td>
<tr align=right><td>-5.5</td> <td>-6</td>
</table>
"
      end

      attribute 1753090 "DOWN"
	public type class_ref 960898 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_DOWN),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to round towards zero.  Never increments the digit
prior to a discarded fraction (i.e., truncates).  Note that this
rounding mode never increases the magnitude of the calculated value.

<p>Example:
<table border>
<caption><b>Rounding mode DOWN Examples</b></caption>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with {@code DOWN} rounding
<tr align=right><td>5.5</td>  <td>5</td>
<tr align=right><td>2.5</td>  <td>2</td>
<tr align=right><td>1.6</td>  <td>1</td>
<tr align=right><td>1.1</td>  <td>1</td>
<tr align=right><td>1.0</td>  <td>1</td>
<tr align=right><td>-1.0</td> <td>-1</td>
<tr align=right><td>-1.1</td> <td>-1</td>
<tr align=right><td>-1.6</td> <td>-1</td>
<tr align=right><td>-2.5</td> <td>-2</td>
<tr align=right><td>-5.5</td> <td>-5</td>
</table>
"
      end

      attribute 1753218 "CEILING"
	public type class_ref 960898 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_CEILING),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to round towards positive infinity.  If the
result is positive, behaves as for {@code RoundingMode.UP};
if negative, behaves as for {@code RoundingMode.DOWN}.  Note
that this rounding mode never decreases the calculated value.

<p>Example:
<table border>
<caption><b>Rounding mode CEILING Examples</b></caption>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with {@code CEILING} rounding
<tr align=right><td>5.5</td>  <td>6</td>
<tr align=right><td>2.5</td>  <td>3</td>
<tr align=right><td>1.6</td>  <td>2</td>
<tr align=right><td>1.1</td>  <td>2</td>
<tr align=right><td>1.0</td>  <td>1</td>
<tr align=right><td>-1.0</td> <td>-1</td>
<tr align=right><td>-1.1</td> <td>-1</td>
<tr align=right><td>-1.6</td> <td>-1</td>
<tr align=right><td>-2.5</td> <td>-2</td>
<tr align=right><td>-5.5</td> <td>-5</td>
</table>
"
      end

      attribute 1753346 "FLOOR"
	public type class_ref 960898 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_FLOOR),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to round towards negative infinity.  If the
result is positive, behave as for {@code RoundingMode.DOWN};
if negative, behave as for {@code RoundingMode.UP}.  Note that
this rounding mode never increases the calculated value.

<p>Example:
<table border>
<caption><b>Rounding mode FLOOR Examples</b></caption>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with {@code FLOOR} rounding
<tr align=right><td>5.5</td>  <td>5</td>
<tr align=right><td>2.5</td>  <td>2</td>
<tr align=right><td>1.6</td>  <td>1</td>
<tr align=right><td>1.1</td>  <td>1</td>
<tr align=right><td>1.0</td>  <td>1</td>
<tr align=right><td>-1.0</td> <td>-1</td>
<tr align=right><td>-1.1</td> <td>-2</td>
<tr align=right><td>-1.6</td> <td>-2</td>
<tr align=right><td>-2.5</td> <td>-3</td>
<tr align=right><td>-5.5</td> <td>-6</td>
</table>
"
      end

      attribute 1753474 "HALF_UP"
	public type class_ref 960898 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_HALF_UP),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to round towards {@literal \"nearest neighbor\"}
unless both neighbors are equidistant, in which case round up.
Behaves as for {@code RoundingMode.UP} if the discarded
fraction is &ge; 0.5; otherwise, behaves as for
{@code RoundingMode.DOWN}.  Note that this is the rounding
mode commonly taught at school.

<p>Example:
<table border>
<caption><b>Rounding mode HALF_UP Examples</b></caption>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with {@code HALF_UP} rounding
<tr align=right><td>5.5</td>  <td>6</td>
<tr align=right><td>2.5</td>  <td>3</td>
<tr align=right><td>1.6</td>  <td>2</td>
<tr align=right><td>1.1</td>  <td>1</td>
<tr align=right><td>1.0</td>  <td>1</td>
<tr align=right><td>-1.0</td> <td>-1</td>
<tr align=right><td>-1.1</td> <td>-1</td>
<tr align=right><td>-1.6</td> <td>-2</td>
<tr align=right><td>-2.5</td> <td>-3</td>
<tr align=right><td>-5.5</td> <td>-6</td>
</table>
"
      end

      attribute 1753602 "HALF_DOWN"
	public type class_ref 960898 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_HALF_DOWN),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to round towards {@literal \"nearest neighbor\"}
unless both neighbors are equidistant, in which case round
down.  Behaves as for {@code RoundingMode.UP} if the discarded
fraction is &gt; 0.5; otherwise, behaves as for
{@code RoundingMode.DOWN}.

<p>Example:
<table border>
<caption><b>Rounding mode HALF_DOWN Examples</b></caption>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with {@code HALF_DOWN} rounding
<tr align=right><td>5.5</td>  <td>5</td>
<tr align=right><td>2.5</td>  <td>2</td>
<tr align=right><td>1.6</td>  <td>2</td>
<tr align=right><td>1.1</td>  <td>1</td>
<tr align=right><td>1.0</td>  <td>1</td>
<tr align=right><td>-1.0</td> <td>-1</td>
<tr align=right><td>-1.1</td> <td>-1</td>
<tr align=right><td>-1.6</td> <td>-2</td>
<tr align=right><td>-2.5</td> <td>-2</td>
<tr align=right><td>-5.5</td> <td>-5</td>
</table>
"
      end

      attribute 1753730 "HALF_EVEN"
	public type class_ref 960898 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_HALF_EVEN),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to round towards the {@literal \"nearest neighbor\"}
unless both neighbors are equidistant, in which case, round
towards the even neighbor.  Behaves as for
{@code RoundingMode.HALF_UP} if the digit to the left of the
discarded fraction is odd; behaves as for
{@code RoundingMode.HALF_DOWN} if it's even.  Note that this
is the rounding mode that statistically minimizes cumulative
error when applied repeatedly over a sequence of calculations.
It is sometimes known as {@literal \"Banker's rounding,\"} and is
chiefly used in the USA.  This rounding mode is analogous to
the rounding policy used for {@code float} and {@code double}
arithmetic in Java.

<p>Example:
<table border>
<caption><b>Rounding mode HALF_EVEN Examples</b></caption>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with {@code HALF_EVEN} rounding
<tr align=right><td>5.5</td>  <td>6</td>
<tr align=right><td>2.5</td>  <td>2</td>
<tr align=right><td>1.6</td>  <td>2</td>
<tr align=right><td>1.1</td>  <td>1</td>
<tr align=right><td>1.0</td>  <td>1</td>
<tr align=right><td>-1.0</td> <td>-1</td>
<tr align=right><td>-1.1</td> <td>-1</td>
<tr align=right><td>-1.6</td> <td>-2</td>
<tr align=right><td>-2.5</td> <td>-2</td>
<tr align=right><td>-5.5</td> <td>-6</td>
</table>
"
      end

      attribute 1753858 "UNNECESSARY"
	public type class_ref 960898 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_UNNECESSARY),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rounding mode to assert that the requested operation has an exact
result, hence no rounding is necessary.  If this rounding mode is
specified on an operation that yields an inexact result, an
{@code ArithmeticException} is thrown.
<p>Example:
<table border>
<caption><b>Rounding mode UNNECESSARY Examples</b></caption>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with {@code UNNECESSARY} rounding
<tr align=right><td>5.5</td>  <td>throw {@code ArithmeticException}</td>
<tr align=right><td>2.5</td>  <td>throw {@code ArithmeticException}</td>
<tr align=right><td>1.6</td>  <td>throw {@code ArithmeticException}</td>
<tr align=right><td>1.1</td>  <td>throw {@code ArithmeticException}</td>
<tr align=right><td>1.0</td>  <td>1</td>
<tr align=right><td>-1.0</td> <td>-1</td>
<tr align=right><td>-1.1</td> <td>throw {@code ArithmeticException}</td>
<tr align=right><td>-1.6</td> <td>throw {@code ArithmeticException}</td>
<tr align=right><td>-2.5</td> <td>throw {@code ArithmeticException}</td>
<tr align=right><td>-5.5</td> <td>throw {@code ArithmeticException}</td>
</table>
"
      end

      attribute 1753986 "oldMode"
	const_attribute package explicit_type "int"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Corresponding BigDecimal rounding constant
"
      end

      operation 7422338 "RoundingMode"
	private explicit_return_type ""
	nparams 1
	  param in name "oldMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor

@param oldMode The {@code BigDecimal} constant corresponding to
       this mode
"
      end

      operation 7422466 "valueOf"
	class_operation public return_type class_ref 960898 // RoundingMode
	nparams 1
	  param in name "rm" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code RoundingMode} object corresponding to a
legacy integer rounding mode constant in {@link BigDecimal}.

@param  rm legacy integer rounding mode to convert
@return {@code RoundingMode} corresponding to the given integer.
@throws IllegalArgumentException integer is out of range
"
      end
    end

    class 961282 "MutableBigInteger"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 1752322 "value"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Holds the magnitude of this MutableBigInteger in big endian order.
The magnitude may start at an offset into the value array, and it may
end before the length of the value array.

"
      end

      attribute 1752450 "intLen"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of ints of the value array that are currently used
to hold the magnitude of this MutableBigInteger. The magnitude starts
at an offset and offset + intLen may be less than value.length.

"
      end

      attribute 1752578 "offset"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The offset into the value array where the magnitude of this
MutableBigInteger begins.

"
      end

      classrelation 3235074 // ONE (<unidirectional association>)
	relation 3235074 --->
	  a role_name "ONE" init_value " new MutableBigInteger(1)" class_relation const_relation package
	    comment " Constants

MutableBigInteger with one element value array with the value 1. Used by
BigDecimal divideAndRound to increment the quotient. Use this constant
only when the method is not going to modify this object.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3235074 // ONE (<unidirectional association>)
	  b parent class_ref 961282 // MutableBigInteger
      end

      attribute 1752706 "KNUTH_POW2_THRESH_LEN"
	class_attribute const_attribute package explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum {@code intLen} for cancelling powers of two before
dividing.
If the number of ints is less than this threshold,
{@code divideKnuth} does not eliminate common powers of two from
the dividend and divisor.

"
      end

      attribute 1752834 "KNUTH_POW2_THRESH_ZEROS"
	class_attribute const_attribute package explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum number of trailing zero ints for cancelling powers of two
before dividing.
If the dividend and divisor don't share at least this many zero ints
at the end, {@code divideKnuth} does not eliminate common powers
of two from the dividend and divisor.

"
      end

      operation 7411970 "MutableBigInteger"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors

The default constructor. An empty MutableBigInteger is created with
a one word capacity.
"
      end

      operation 7412098 "MutableBigInteger"
	package explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MutableBigInteger with a magnitude specified by
the int val.
"
      end

      operation 7412226 "MutableBigInteger"
	package explicit_return_type ""
	nparams 1
	  param inout name "val" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MutableBigInteger with the specified value array
up to the length of the array supplied.
"
      end

      operation 7412354 "MutableBigInteger"
	package explicit_return_type ""
	nparams 1
	  param inout name "b" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MutableBigInteger with a magnitude equal to the
specified BigInteger.
"
      end

      operation 7412482 "MutableBigInteger"
	package explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MutableBigInteger with a magnitude equal to the
specified MutableBigInteger.
"
      end

      operation 7412610 "ones"
	private explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes this number an {@code n}-int number all of whose bits are ones.
Used by Burnikel-Ziegler division.
@param n number of ints in the {@code value} array
@return a number equal to {@code ((1<<(32*n)))-1}
"
      end

      operation 7412738 "getMagnitudeArray"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal helper method to return the magnitude array. The caller is not
supposed to modify the returned array.
"
      end

      operation 7412866 "toLong"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert this MutableBigInteger to a long value. The caller has to make
sure this MutableBigInteger can be fit into long.
"
      end

      operation 7412994 "toBigInteger"
	package return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "sign" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert this MutableBigInteger to a BigInteger object.
"
      end

      operation 7413122 "toBigInteger"
	package return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this number to a nonnegative {@code BigInteger}.
"
      end

      operation 7413250 "toBigDecimal"
	package return_type class_ref 145794 // BigDecimal
	nparams 2
	  param in name "sign" explicit_type "int"
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert this MutableBigInteger to BigDecimal object with the specified sign
and scale.
"
      end

      operation 7413378 "toCompactValue"
	package explicit_return_type "long"
	nparams 1
	  param in name "sign" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is for internal use in converting from a MutableBigInteger
object into a long value given a specified sign.
returns INFLATED if value is not fit into long
"
      end

      operation 7413506 "clear"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clear out a MutableBigInteger for reuse.
"
      end

      operation 7413634 "reset"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a MutableBigInteger to zero, removing its offset.
"
      end

      operation 7413762 "compare"
	package explicit_return_type "int"
	nparams 1
	  param inout name "b" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare the magnitude of two MutableBigIntegers. Returns -1, 0 or 1
as this MutableBigInteger is numerically less than, equal to, or
greater than <tt>b</tt>.
"
      end

      operation 7413890 "compareShifted"
	private explicit_return_type "int"
	nparams 2
	  param inout name "b" type class_ref 961282 // MutableBigInteger
	  param in name "ints" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a value equal to what {@code b.leftShift(32*ints); return compare(b);}
would return, but doesn't change the value of {@code b}.
"
      end

      operation 7414018 "compareHalf"
	package explicit_return_type "int"
	nparams 1
	  param inout name "b" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this against half of a MutableBigInteger object (Needed for
remainder tests).
Assumes no leading unnecessary zeros, which holds for results
from divide().
"
      end

      operation 7414146 "getLowestSetBit"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the index of the lowest set bit in this MutableBigInteger. If the
magnitude of this MutableBigInteger is zero, -1 is returned.
"
      end

      operation 7414274 "getInt"
	private explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the int in use in this MutableBigInteger at the specified
index. This method is not used because it is not inlined on all
platforms.
"
      end

      operation 7414402 "getLong"
	private explicit_return_type "long"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a long which is equal to the unsigned value of the int in
use in this MutableBigInteger at the specified index. This method is
not used because it is not inlined on all platforms.
"
      end

      operation 7414530 "normalize"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensure that the MutableBigInteger is in normal form, specifically
making sure that there are no leading zeros, and that if the
magnitude is zero, then intLen is zero.
"
      end

      operation 7414658 "ensureCapacity"
	private explicit_return_type "void"
	nparams 1
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this MutableBigInteger cannot hold len words, increase the size
of the value array to len words.
"
      end

      operation 7414786 "toIntArray"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert this MutableBigInteger into an int array with no leading
zeros, of a length that is equal to this MutableBigInteger's intLen.
"
      end

      operation 7414914 "setInt"
	package explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the int at index+offset in this MutableBigInteger to val.
This does not get inlined on all platforms so it is not used
as often as originally intended.
"
      end

      operation 7415042 "setValue"
	package explicit_return_type "void"
	nparams 2
	  param inout name "val" explicit_type "int"
	multiplicity "[]"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this MutableBigInteger's value array to the specified array.
The intLen is set to the specified length.
"
      end

      operation 7415170 "copyValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "src" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this MutableBigInteger's value array to a copy of the specified
array. The intLen is set to the length of the new array.
"
      end

      operation 7415298 "copyValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this MutableBigInteger's value array to a copy of the specified
array. The intLen is set to the length of the specified array.
"
      end

      operation 7415426 "isOne"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this MutableBigInteger has a value of one.
"
      end

      operation 7415554 "isZero"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this MutableBigInteger has a value of zero.
"
      end

      operation 7415682 "isEven"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this MutableBigInteger is even.
"
      end

      operation 7415810 "isOdd"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this MutableBigInteger is odd.
"
      end

      operation 7415938 "isNormal"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this MutableBigInteger is in normal form. A
MutableBigInteger is in normal form if it has no leading zeros
after the offset, and intLen + offset <= value.length.
"
      end

      operation 7416066 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String representation of this MutableBigInteger in radix 10.
"
      end

      operation 7416194 "safeRightShift"
	package explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Like {@link #rightShift(int)} but {@code n} can be greater than the length of the number.
"
      end

      operation 7416322 "rightShift"
	package explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Right shift this MutableBigInteger n bits. The MutableBigInteger is left
in normal form.
"
      end

      operation 7416450 "safeLeftShift"
	package explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Like {@link #leftShift(int)} but {@code n} can be zero.
"
      end

      operation 7416578 "leftShift"
	package explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Left shift this MutableBigInteger n bits.
"
      end

      operation 7416706 "divadd"
	private explicit_return_type "int"
	nparams 3
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	  param inout name "result" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A primitive used for division. This method adds in one multiple of the
divisor a back to the dividend result at a specified offset. It is used
when qhat was estimated too large, and must be adjusted.
"
      end

      operation 7416834 "mulsub"
	private explicit_return_type "int"
	nparams 5
	  param inout name "q" explicit_type "int"
	multiplicity "[]"
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	  param in name "x" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is used for division. It multiplies an n word input a by one
word input x, and subtracts the n word product from q. This is needed
when subtracting qhat*divisor from dividend.
"
      end

      operation 7416962 "mulsubBorrow"
	private explicit_return_type "int"
	nparams 5
	  param inout name "q" explicit_type "int"
	multiplicity "[]"
	  param inout name "a" explicit_type "int"
	multiplicity "[]"
	  param in name "x" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The method is the same as mulsun, except the fact that q array is not
updated, the only result of the method is borrow flag.
"
      end

      operation 7417090 "primitiveRightShift"
	private explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Right shift this MutableBigInteger n bits, where n is
less than 32.
Assumes that intLen > 0, n > 0 for speed
"
      end

      operation 7417218 "primitiveLeftShift"
	private explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Left shift this MutableBigInteger n bits, where n is
less than 32.
Assumes that intLen > 0, n > 0 for speed
"
      end

      operation 7417346 "getLower"
	private return_type class_ref 686338 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} equal to the {@code n}
low ints of this number.
"
      end

      operation 7417474 "keepLower"
	private explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Discards all ints whose index is greater than {@code n}.
"
      end

      operation 7417602 "add"
	package explicit_return_type "void"
	nparams 1
	  param inout name "addend" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the contents of two MutableBigInteger objects.The result
is placed within this MutableBigInteger.
The contents of the addend are not changed.
"
      end

      operation 7417730 "addShifted"
	package explicit_return_type "void"
	nparams 2
	  param inout name "addend" type class_ref 961282 // MutableBigInteger
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the value of {@code addend} shifted {@code n} ints to the left.
Has the same effect as {@code addend.leftShift(32*ints); add(addend);}
but doesn't change the value of {@code addend}.
"
      end

      operation 7417858 "addDisjoint"
	package explicit_return_type "void"
	nparams 2
	  param inout name "addend" type class_ref 961282 // MutableBigInteger
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Like {@link #addShifted(MutableBigInteger, int)} but {@code this.intLen} must
not be greater than {@code n}. In other words, concatenates {@code this}
and {@code addend}.
"
      end

      operation 7417986 "addLower"
	package explicit_return_type "void"
	nparams 2
	  param inout name "addend" type class_ref 961282 // MutableBigInteger
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the low {@code n} ints of {@code addend}.
"
      end

      operation 7418114 "subtract"
	package explicit_return_type "int"
	nparams 1
	  param inout name "b" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subtracts the smaller of this and b from the larger and places the
result into this MutableBigInteger.
"
      end

      operation 7418242 "difference"
	private explicit_return_type "int"
	nparams 1
	  param inout name "b" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subtracts the smaller of a and b from the larger and places the result
into the larger. Returns 1 if the answer is in a, -1 if in b, 0 if no
operation was performed.
"
      end

      operation 7418370 "multiply"
	package explicit_return_type "void"
	nparams 2
	  param inout name "y" type class_ref 961282 // MutableBigInteger
	  param inout name "z" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiply the contents of two MutableBigInteger objects. The result is
placed into MutableBigInteger z. The contents of y are not changed.
"
      end

      operation 7418498 "mul"
	package explicit_return_type "void"
	nparams 2
	  param in name "y" explicit_type "int"
	  param inout name "z" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiply the contents of this MutableBigInteger by the word y. The
result is placed into z.
"
      end

      operation 7418626 "divideOneWord"
	package explicit_return_type "int"
	nparams 2
	  param in name "divisor" explicit_type "int"
	  param inout name "quotient" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is used for division of an n word dividend by a one word
divisor. The quotient is placed into quotient. The one word divisor is
specified by divisor.

@return the remainder of the division is returned.

"
      end

      operation 7418754 "divide"
	package return_type class_ref 961282 // MutableBigInteger
	nparams 2
	  param inout name "b" type class_ref 961282 // MutableBigInteger
	  param inout name "quotient" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the quotient of this div b and places the quotient in the
provided MutableBigInteger objects and the remainder object is returned.

"
      end

      operation 7418882 "divide"
	package return_type class_ref 961282 // MutableBigInteger
	nparams 3
	  param inout name "b" type class_ref 961282 // MutableBigInteger
	  param inout name "quotient" type class_ref 961282 // MutableBigInteger
	  param inout name "needRemainder" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7419010 "divideKnuth"
	package return_type class_ref 961282 // MutableBigInteger
	nparams 2
	  param inout name "b" type class_ref 961282 // MutableBigInteger
	  param inout name "quotient" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see #divideKnuth(MutableBigInteger, MutableBigInteger, boolean)
"
      end

      operation 7419138 "divideKnuth"
	package return_type class_ref 961282 // MutableBigInteger
	nparams 3
	  param inout name "b" type class_ref 961282 // MutableBigInteger
	  param inout name "quotient" type class_ref 961282 // MutableBigInteger
	  param inout name "needRemainder" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the quotient of this div b and places the quotient in the
provided MutableBigInteger objects and the remainder object is returned.

Uses Algorithm D in Knuth section 4.3.1.
Many optimizations to that algorithm have been adapted from the Colin
Plumb C library.
It special cases one word divisors for speed. The content of b is not
changed.

"
      end

      operation 7419266 "divideAndRemainderBurnikelZiegler"
	package return_type class_ref 961282 // MutableBigInteger
	nparams 2
	  param inout name "b" type class_ref 961282 // MutableBigInteger
	  param inout name "quotient" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes {@code this/b} and {@code this%b} using the
<a href=\"http://cr.yp.to/bib/1998/burnikel.ps\"> Burnikel-Ziegler algorithm</a>.
This method implements algorithm 3 from pg. 9 of the Burnikel-Ziegler paper.
The parameter beta was chosen to b 2<sup>32</sup> so almost all shifts are
multiples of 32 bits.<br/>
{@code this} and {@code b} must be nonnegative.
@param b the divisor
@param quotient output parameter for {@code this/b}
@return the remainder
"
      end

      operation 7419394 "divide2n1n"
	private return_type class_ref 961282 // MutableBigInteger
	nparams 2
	  param inout name "b" type class_ref 961282 // MutableBigInteger
	  param inout name "quotient" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method implements algorithm 1 from pg. 4 of the Burnikel-Ziegler paper.
It divides a 2n-digit number by a n-digit number.<br/>
The parameter beta is 2<sup>32</sup> so all shifts are multiples of 32 bits.
<br/>
{@code this} must be a nonnegative number such that {@code this.bitLength() <= 2*b.bitLength()}
@param b a positive number such that {@code b.bitLength()} is even
@param quotient output parameter for {@code this/b}
@return {@code this%b}
"
      end

      operation 7419522 "divide3n2n"
	private return_type class_ref 961282 // MutableBigInteger
	nparams 2
	  param inout name "b" type class_ref 961282 // MutableBigInteger
	  param inout name "quotient" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method implements algorithm 2 from pg. 5 of the Burnikel-Ziegler paper.
It divides a 3n-digit number by a 2n-digit number.<br/>
The parameter beta is 2<sup>32</sup> so all shifts are multiples of 32 bits.<br/>
<br/>
{@code this} must be a nonnegative number such that {@code 2*this.bitLength() <= 3*b.bitLength()}
@param quotient output parameter for {@code this/b}
@return {@code this%b}
"
      end

      operation 7419650 "getBlock"
	private return_type class_ref 961282 // MutableBigInteger
	nparams 3
	  param in name "index" explicit_type "int"
	  param in name "numBlocks" explicit_type "int"
	  param in name "blockLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code MutableBigInteger} containing {@code blockLength} ints from
{@code this} number, starting at {@code index*blockLength}.<br/>
Used by Burnikel-Ziegler division.
@param index the block index
@param numBlocks the total number of blocks in {@code this} number
@param blockLength length of one block in units of 32 bits
@return
"
      end

      operation 7419778 "bitLength"
	package explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @see BigInteger#bitLength() "
      end

      operation 7419906 "divide"
	package explicit_return_type "long"
	nparams 2
	  param in name "v" explicit_type "long"
	  param inout name "quotient" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internally used  to calculate the quotient of this div v and places the
quotient in the provided MutableBigInteger object and the remainder is
returned.

@return the remainder of the division will be returned.
"
      end

      operation 7420034 "copyAndShift"
	class_operation private explicit_return_type "void"
	nparams 6
	  param inout name "src" explicit_type "int"
	multiplicity "[]"
	  param in name "srcFrom" explicit_type "int"
	  param in name "srcLen" explicit_type "int"
	  param inout name "dst" explicit_type "int"
	multiplicity "[]"
	  param in name "dstFrom" explicit_type "int"
	  param in name "shift" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7420162 "divideMagnitude"
	private return_type class_ref 961282 // MutableBigInteger
	nparams 3
	  param inout name "div" type class_ref 961282 // MutableBigInteger
	  param inout name "quotient" type class_ref 961282 // MutableBigInteger
	  param inout name "needRemainder" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Divide this MutableBigInteger by the divisor.
The quotient will be placed into the provided quotient object &
the remainder object is returned.
"
      end

      operation 7420290 "divideLongMagnitude"
	private return_type class_ref 961282 // MutableBigInteger
	nparams 2
	  param in name "ldivisor" explicit_type "long"
	  param inout name "quotient" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Divide this MutableBigInteger by the divisor represented by positive long
value. The quotient will be placed into the provided quotient object &
the remainder object is returned.
"
      end

      operation 7420418 "divaddLong"
	private explicit_return_type "int"
	nparams 4
	  param in name "dh" explicit_type "int"
	  param in name "dl" explicit_type "int"
	  param inout name "result" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A primitive used for division by long.
Specialized version of the method divadd.
dh is a high part of the divisor, dl is a low part
"
      end

      operation 7420546 "mulsubLong"
	private explicit_return_type "int"
	nparams 5
	  param inout name "q" explicit_type "int"
	multiplicity "[]"
	  param in name "dh" explicit_type "int"
	  param in name "dl" explicit_type "int"
	  param in name "x" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is used for division by long.
Specialized version of the method sulsub.
dh is a high part of the divisor, dl is a low part
"
      end

      operation 7420674 "unsignedLongCompare"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "one" explicit_type "long"
	  param in name "two" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare two longs as if they were unsigned.
Returns true iff one is bigger than two.
"
      end

      operation 7420802 "divWord"
	class_operation package explicit_return_type "long"
	nparams 2
	  param in name "n" explicit_type "long"
	  param in name "d" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method divides a long quantity by an int to estimate
qhat for two multi precision numbers. It is used when
the signed value of n is less than zero.
Returns long value where high 32 bits contain remainder value and
low 32 bits contain quotient value.
"
      end

      operation 7420930 "hybridGCD"
	package return_type class_ref 961282 // MutableBigInteger
	nparams 1
	  param inout name "b" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate GCD of this and b. This and b are changed by the computation.
"
      end

      operation 7421058 "binaryGCD"
	private return_type class_ref 961282 // MutableBigInteger
	nparams 1
	  param inout name "v" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate GCD of this and v.
Assumes that this and v are not zero.
"
      end

      operation 7421186 "binaryGcd"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate GCD of a and b interpreted as unsigned integers.
"
      end

      operation 7421314 "mutableModInverse"
	package return_type class_ref 961282 // MutableBigInteger
	nparams 1
	  param inout name "p" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the modInverse of this mod p. This and p are not affected by
the operation.
"
      end

      operation 7421442 "modInverseMP2"
	package return_type class_ref 961282 // MutableBigInteger
	nparams 1
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate the multiplicative inverse of this mod 2^k.
"
      end

      operation 7421570 "inverseMod32"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the multiplicative inverse of val mod 2^32.  Assumes val is odd.
"
      end

      operation 7421698 "inverseMod64"
	class_operation package explicit_return_type "long"
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the multiplicative inverse of val mod 2^64.  Assumes val is odd.
"
      end

      operation 7421826 "modInverseBP2"
	class_operation package return_type class_ref 961282 // MutableBigInteger
	nparams 2
	  param inout name "mod" type class_ref 961282 // MutableBigInteger
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate the multiplicative inverse of 2^k mod mod, where mod is odd.
"
      end

      operation 7421954 "modInverse"
	private return_type class_ref 961282 // MutableBigInteger
	nparams 1
	  param inout name "mod" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate the multiplicative inverse of this mod mod, where mod is odd.
This and mod are not changed by the calculation.

This method implements an algorithm due to Richard Schroeppel, that uses
the same intermediate representation as Montgomery Reduction
(\"Montgomery Form\").  The algorithm is described in an unpublished
manuscript entitled \"Fast Modular Reciprocals.\"
"
      end

      operation 7422082 "fixup"
	class_operation package return_type class_ref 961282 // MutableBigInteger
	nparams 3
	  param inout name "c" type class_ref 961282 // MutableBigInteger
	  param inout name "p" type class_ref 961282 // MutableBigInteger
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The Fixup Algorithm
Calculates X such that X = C * 2^(-k) (mod P)
Assumes C<P and P is odd.
"
      end

      operation 7422210 "euclidModInverse"
	package return_type class_ref 961282 // MutableBigInteger
	nparams 1
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Uses the extended Euclidean algorithm to compute the modInverse of base
mod a modulus that is a power of 2. The modulus is 2^k.
"
      end
    end

    class 961538 "BitSieve"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple bit sieve used for finding prime number candidates. Allows setting
and clearing of bits in a storage array. The size of the sieve is assumed to
be constant to reduce overhead. All the bits of a new bitSieve are zero, and
bits are removed from it by setting them.

To reduce storage space and increase efficiency, no even numbers are
represented in the sieve (each bit in the sieve represents an odd number).
The relationship between the index of a bit and the number it represents is
given by
N = offset + (2*index + 1);
Where N is the integer represented by a bit in the sieve, offset is some
even integer offset indicating where the sieve begins, and index is the
index of a bit in the sieve array.

@see     BigInteger
@author  Michael McCloskey
@since   1.3
"
      attribute 1751554 "bits"
	private explicit_type "long"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Stores the bits in this bitSieve.

"
      end

      attribute 1751682 "length"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Length is how many bits this sieve holds.

"
      end

      classrelation 3234050 // smallSieve (<unidirectional association>)
	relation 3234050 --->
	  a role_name "smallSieve" init_value " new BitSieve()" class_relation private
	    comment "
A small sieve used to filter out multiples of small primes in a search
sieve.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3234050 // smallSieve (<unidirectional association>)
	  b parent class_ref 961538 // BitSieve
      end

      operation 7409666 "BitSieve"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a \"small sieve\" with a base of 0.  This constructor is
used internally to generate the set of \"small primes\" whose multiples
are excluded from sieves generated by the main (package private)
constructor, BitSieve(BigInteger base, int searchLen).  The length
of the sieve generated by this constructor was chosen for performance;
it controls a tradeoff between how much time is spent constructing
other sieves, and how much time is wasted testing composite candidates
for primality.  The length was chosen experimentally to yield good
performance.
"
      end

      operation 7409794 "BitSieve"
	package explicit_return_type ""
	nparams 2
	  param inout name "base" type class_ref 686338 // BigInteger
	  param in name "searchLen" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a bit sieve of searchLen bits used for finding prime number
candidates. The new sieve begins at the specified base, which must
be even.
"
      end

      operation 7409922 "unitIndex"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a bit index return unit index containing it.
"
      end

      operation 7410050 "bit"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a unit that masks the specified bit in its unit.
"
      end

      operation 7410178 "get"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the value of the bit at the specified index.
"
      end

      operation 7410306 "set"
	private explicit_return_type "void"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the bit at the specified index.
"
      end

      operation 7410434 "sieveSearch"
	private explicit_return_type "int"
	nparams 2
	  param in name "limit" explicit_type "int"
	  param in name "start" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method returns the index of the first clear bit in the search
array that occurs at or after start. It will not search past the
specified limit. It returns -1 if there is no such clear bit.
"
      end

      operation 7410562 "sieveSingle"
	private explicit_return_type "void"
	nparams 3
	  param in name "limit" explicit_type "int"
	  param in name "start" explicit_type "int"
	  param in name "step" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sieve a single set of multiples out of the sieve. Begin to remove
multiples of the specified step starting at the specified start index,
up to the specified limit.
"
      end

      operation 7410690 "retrieve"
	package return_type class_ref 686338 // BigInteger
	nparams 3
	  param inout name "initValue" type class_ref 686338 // BigInteger
	  param in name "certainty" explicit_type "int"
	  param inout name "random" type class_ref 934914 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test probable primes in the sieve and return successful candidates.
"
      end
    end

    class 961666 "SignedMutableBigInteger"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class used to represent multiprecision integers that makes efficient
use of allocated space by allowing a number to occupy only part of
an array so that the arrays do not have to be reallocated as often.
When performing an operation with many iterations the array used to
hold a number is only increased when necessary and does not have to
be the same size as the number it represents. A mutable number allows
calculations to occur on the same number without having to create
a new number for every step of the calculation as occurs with
BigIntegers.

Note that SignedMutableBigIntegers only support signed addition and
subtraction. All other operations occur as with MutableBigIntegers.

@see     BigInteger
@author  Michael McCloskey
@since   1.3
"
      classrelation 3235202 // <generalisation>
	relation 3235202 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3235202 // <generalisation>
	  b parent class_ref 961282 // MutableBigInteger
      end

      attribute 1754114 "sign"
	package explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The sign of this MutableBigInteger.

"
      end

      operation 7422594 "SignedMutableBigInteger"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors

The default constructor. An empty MutableBigInteger is created with
a one word capacity.
"
      end

      operation 7422722 "SignedMutableBigInteger"
	package explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MutableBigInteger with a magnitude specified by
the int val.
"
      end

      operation 7422850 "SignedMutableBigInteger"
	package explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MutableBigInteger with a magnitude equal to the
specified MutableBigInteger.
"
      end

      operation 7422978 "signedAdd"
	package explicit_return_type "void"
	nparams 1
	  param inout name "addend" type class_ref 961666 // SignedMutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Arithmetic Operations

Signed addition built upon unsigned add and subtract.
"
      end

      operation 7423106 "signedAdd"
	package explicit_return_type "void"
	nparams 1
	  param inout name "addend" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signed addition built upon unsigned add and subtract.
"
      end

      operation 7423234 "signedSubtract"
	package explicit_return_type "void"
	nparams 1
	  param inout name "addend" type class_ref 961666 // SignedMutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signed subtraction built upon unsigned add and subtract.
"
      end

      operation 7423362 "signedSubtract"
	package explicit_return_type "void"
	nparams 1
	  param inout name "addend" type class_ref 961282 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signed subtraction built upon unsigned add and subtract.
"
      end

      operation 7423490 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print out the first intLen ints of this MutableBigInteger's value
array starting at offset.
"
      end
    end
  end

  deploymentview 167554 "math"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 700546 "BigDecimal"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import static java.math.BigInteger.LONG_MASK;
${definition}"
      associated_elems
	class_ref 145794 // BigDecimal
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Portions Copyright IBM Corporation, 2001. All Rights Reserved.
"
    end

    artifact 700674 "BigInteger"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.util.Arrays;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;
import sun.misc.DoubleConsts;
import sun.misc.FloatConsts;
${definition}"
      associated_elems
	class_ref 686338 // BigInteger
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Portions Copyright (c) 1995  Colin Plumb.  All rights reserved.
"
    end

    artifact 700802 "BitSieve"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 961538 // BitSieve
      end
      comment "Copyright (c) 1999, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 700930 "MathContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_elems
	class_ref 960770 // MathContext
      end
      comment "Copyright (c) 2003, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Portions Copyright IBM Corporation, 1997, 2001. All Rights Reserved.
"
    end

    artifact 701058 "MutableBigInteger"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import static java.math.BigDecimal.INFLATED;
import static java.math.BigInteger.LONG_MASK;
${definition}"
      associated_elems
	class_ref 961282 // MutableBigInteger
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 701186 "RoundingMode"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 960898 // RoundingMode
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Portions Copyright IBM Corporation, 2001. All Rights Reserved.
"
    end

    artifact 701314 "SignedMutableBigInteger"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 961666 // SignedMutableBigInteger
      end
      comment "Copyright (c) 1999, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
