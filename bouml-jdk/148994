format 222
"jpeg" // jdk1.8::javax::imageio::plugins::jpeg
  revision 1
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/imageio/plugins/jpeg/"
  java_package "javax.imageio.plugins.jpeg"
  classview 145282 "jpeg"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 327426 "JPEGHuffmanTable"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class encapsulating a single JPEG Huffman table.
Fields are provided for the \"standard\" tables taken
from Annex K of the JPEG specification.
These are the tables used as defaults.
<p>
For more information about the operation of the standard JPEG plug-in,
see the <A HREF=\"../../metadata/doc-files/jpeg_metadata.html\">JPEG
metadata format specification and usage notes</A>
"
      attribute 2248194 "StdDCLuminanceLengths"
	class_attribute const_attribute private explicit_type "short"
	multiplicity "[]"
	init_value " {
        0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The data for the publically defined tables, as specified in ITU T.81
JPEG specification section K3.3 and used in the IJG library.

"
      end

      attribute 2248322 "StdDCLuminanceValues"
	class_attribute const_attribute private explicit_type "short"
	multiplicity "[]"
	init_value " {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2248450 "StdDCChrominanceLengths"
	class_attribute const_attribute private explicit_type "short"
	multiplicity "[]"
	init_value " {
        0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2248578 "StdDCChrominanceValues"
	class_attribute const_attribute private explicit_type "short"
	multiplicity "[]"
	init_value " {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2248706 "StdACLuminanceLengths"
	class_attribute const_attribute private explicit_type "short"
	multiplicity "[]"
	init_value " {
        0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03,
        0x05, 0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7d,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2248834 "StdACLuminanceValues"
	class_attribute const_attribute private explicit_type "short"
	multiplicity "[]"
	init_value " {
        0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
        0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
        0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
        0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
        0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
        0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
        0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
        0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
        0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
        0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
        0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
        0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
        0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
        0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
        0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
        0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
        0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
        0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
        0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
        0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
        0xf9, 0xfa,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2248962 "StdACChrominanceLengths"
	class_attribute const_attribute private explicit_type "short"
	multiplicity "[]"
	init_value " {
        0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04,
        0x07, 0x05, 0x04, 0x04, 0x00, 0x01, 0x02, 0x77,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2249090 "StdACChrominanceValues"
	class_attribute const_attribute private explicit_type "short"
	multiplicity "[]"
	init_value " {
        0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
        0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
        0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
        0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
        0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
        0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
        0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
        0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
        0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
        0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
        0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
        0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
        0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
        0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
        0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
        0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
        0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
        0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
        0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
        0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
        0xf9, 0xfa,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3761794 // StdDCLuminance (<unidirectional association>)
	relation 3761794 --->
	  a role_name "StdDCLuminance" init_value " new JPEGHuffmanTable(StdDCLuminanceLengths,
                                              StdDCLuminanceValues, false)" class_relation const_relation public
	    comment "
The standard DC luminance Huffman table.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3761794 // StdDCLuminance (<unidirectional association>)
	  b parent class_ref 327426 // JPEGHuffmanTable
      end

      classrelation 3761922 // StdDCChrominance (<unidirectional association>)
	relation 3761922 --->
	  a role_name "StdDCChrominance" init_value " new JPEGHuffmanTable(StdDCChrominanceLengths,
                                                StdDCChrominanceValues, false)" class_relation const_relation public
	    comment "
The standard DC chrominance Huffman table.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3761922 // StdDCChrominance (<unidirectional association>)
	  b parent class_ref 327426 // JPEGHuffmanTable
      end

      classrelation 3762050 // StdACLuminance (<unidirectional association>)
	relation 3762050 --->
	  a role_name "StdACLuminance" init_value " new JPEGHuffmanTable(StdACLuminanceLengths,
                                              StdACLuminanceValues, false)" class_relation const_relation public
	    comment "
The standard AC luminance Huffman table.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3762050 // StdACLuminance (<unidirectional association>)
	  b parent class_ref 327426 // JPEGHuffmanTable
      end

      classrelation 3762178 // StdACChrominance (<unidirectional association>)
	relation 3762178 --->
	  a role_name "StdACChrominance" init_value " new JPEGHuffmanTable(StdACChrominanceLengths,
                                                StdACChrominanceValues, false)" class_relation const_relation public
	    comment "
The standard AC chrominance Huffman table.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3762178 // StdACChrominance (<unidirectional association>)
	  b parent class_ref 327426 // JPEGHuffmanTable
      end

      attribute 2249218 "lengths"
	private explicit_type "short"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2249346 "values"
	private explicit_type "short"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9676802 "JPEGHuffmanTable"
	public explicit_return_type ""
	nparams 2
	  param inout name "lengths" explicit_type "short"
	multiplicity "[]"
	  param inout name "values" explicit_type "short"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Huffman table and initializes it. The input arrays are copied.
The arrays must describe a possible Huffman table.
For example, 3 codes cannot be expressed with a single bit.

@param lengths an array of {@code short}s where <code>lengths[k]</code>
is equal to the number of values with corresponding codes of
length <code>k + 1</code> bits.
@param values an array of shorts containing the values in
order of increasing code length.
@throws IllegalArgumentException if <code>lengths</code> or
<code>values</code> are null, the length of <code>lengths</code> is
greater than 16, the length of <code>values</code> is greater than 256,
if any value in <code>lengths</code> or <code>values</code> is less
than zero, or if the arrays do not describe a valid Huffman table.
"
      end

      operation 9676930 "validate"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9677058 "JPEGHuffmanTable"
	private explicit_return_type ""
	nparams 3
	  param inout name "lengths" explicit_type "short"
	multiplicity "[]"
	  param inout name "values" explicit_type "short"
	multiplicity "[]"
	  param inout name "copy" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Internal version which avoids the overhead of copying and checking "
      end

      operation 9677186 "getLengths"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>short</code>s containing the number of values
for each length in the Huffman table. The returned array is a copy.

@return a <code>short</code> array where <code>array[k-1]</code>
is equal to the number of values in the table of length <code>k</code>.
@see #getValues
"
      end

      operation 9677314 "getValues"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>short</code>s containing the values arranged
by increasing length of their corresponding codes.
The interpretation of the array is dependent on the values returned
from <code>getLengths</code>. The returned array is a copy.

@return a <code>short</code> array of values.
@see #getLengths
"
      end

      operation 9677442 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code String} representing this Huffman table.
@return a {@code String} representing this Huffman table.
"
      end
    end

    class 327810 "JPEGQTable"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class encapsulating a single JPEG quantization table.
The elements appear in natural order (as opposed to zig-zag order).
Static variables are provided for the \"standard\" tables taken from
 Annex K of the JPEG specification, as well as the default tables
conventionally used for visually lossless encoding.
<p>
For more information about the operation of the standard JPEG plug-in,
see the <A HREF=\"../../metadata/doc-files/jpeg_metadata.html\">JPEG
metadata format specification and usage notes</A>
"
      attribute 2249730 "k1"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        16,  11,  10,  16,  24,  40,  51,  61,
        12,  12,  14,  19,  26,  58,  60,  55,
        14,  13,  16,  24,  40,  57,  69,  56,
        14,  17,  22,  29,  51,  87,  80,  62,
        18,  22,  37,  56,  68,  109, 103, 77,
        24,  35,  55,  64,  81,  104, 113, 92,
        49,  64,  78,  87,  103, 121, 120, 101,
        72,  92,  95,  98,  112, 100, 103, 99,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2249858 "k1div2"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        8,   6,   5,   8,   12,  20,  26,  31,
        6,   6,   7,   10,  13,  29,  30,  28,
        7,   7,   8,   12,  20,  29,  35,  28,
        7,   9,   11,  15,  26,  44,  40,  31,
        9,   11,  19,  28,  34,  55,  52,  39,
        12,  18,  28,  32,  41,  52,  57,  46,
        25,  32,  39,  44,  52,  61,  60,  51,
        36,  46,  48,  49,  56,  50,  52,  50,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2249986 "k2"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        17,  18,  24,  47,  99,  99,  99,  99,
        18,  21,  26,  66,  99,  99,  99,  99,
        24,  26,  56,  99,  99,  99,  99,  99,
        47,  66,  99,  99,  99,  99,  99,  99,
        99,  99,  99,  99,  99,  99,  99,  99,
        99,  99,  99,  99,  99,  99,  99,  99,
        99,  99,  99,  99,  99,  99,  99,  99,
        99,  99,  99,  99,  99,  99,  99,  99,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2250114 "k2div2"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        9,   9,   12,  24,  50,  50,  50,  50,
        9,   11,  13,  33,  50,  50,  50,  50,
        12,  13,  28,  50,  50,  50,  50,  50,
        24,  33,  50,  50,  50,  50,  50,  50,
        50,  50,  50,  50,  50,  50,  50,  50,
        50,  50,  50,  50,  50,  50,  50,  50,
        50,  50,  50,  50,  50,  50,  50,  50,
        50,  50,  50,  50,  50,  50,  50,  50,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3763586 // K1Luminance (<unidirectional association>)
	relation 3763586 --->
	  a role_name "K1Luminance" init_value " new JPEGQTable(k1, false)" class_relation const_relation public
	    comment "
The sample luminance quantization table given in the JPEG
specification, table K.1. According to the specification,
these values produce \"good\" quality output.
@see #K1Div2Luminance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3763586 // K1Luminance (<unidirectional association>)
	  b parent class_ref 327810 // JPEGQTable
      end

      classrelation 3763714 // K1Div2Luminance (<unidirectional association>)
	relation 3763714 --->
	  a role_name "K1Div2Luminance" init_value " new JPEGQTable(k1div2, false)" class_relation const_relation public
	    comment "
The sample luminance quantization table given in the JPEG
specification, table K.1, with all elements divided by 2.
According to the specification, these values produce \"very good\"
quality output. This is the table usually used for \"visually lossless\"
encoding, and is the default luminance table used if the default
tables and quality settings are used.
@see #K1Luminance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3763714 // K1Div2Luminance (<unidirectional association>)
	  b parent class_ref 327810 // JPEGQTable
      end

      classrelation 3763842 // K2Chrominance (<unidirectional association>)
	relation 3763842 --->
	  a role_name "K2Chrominance" init_value "
        new JPEGQTable(k2, false)" class_relation const_relation public
	    comment "
The sample chrominance quantization table given in the JPEG
specification, table K.2. According to the specification,
these values produce \"good\" quality output.
@see #K2Div2Chrominance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3763842 // K2Chrominance (<unidirectional association>)
	  b parent class_ref 327810 // JPEGQTable
      end

      classrelation 3763970 // K2Div2Chrominance (<unidirectional association>)
	relation 3763970 --->
	  a role_name "K2Div2Chrominance" init_value "
        new JPEGQTable(k2div2, false)" class_relation const_relation public
	    comment "
The sample chrominance quantization table given in the JPEG
specification, table K.1, with all elements divided by 2.
According to the specification, these values produce \"very good\"
quality output. This is the table usually used for \"visually lossless\"
encoding, and is the default chrominance table used if the default
tables and quality settings are used.
@see #K2Chrominance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3763970 // K2Div2Chrominance (<unidirectional association>)
	  b parent class_ref 327810 // JPEGQTable
      end

      attribute 2250242 "qTable"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9680130 "JPEGQTable"
	private explicit_return_type ""
	nparams 2
	  param inout name "table" explicit_type "int"
	multiplicity "[]"
	  param inout name "copy" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9680258 "JPEGQTable"
	public explicit_return_type ""
	nparams 1
	  param inout name "table" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a quantization table from the argument, which must
contain 64 elements in natural order (not zig-zag order).
A copy is made of the the input array.
@param table the quantization table, as an <code>int</code> array.
@throws IllegalArgumentException if <code>table</code> is
<code>null</code> or <code>table.length</code> is not equal to 64.
"
      end

      operation 9680386 "getTable"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the current quantization table as an array
of {@code int}s in natural (not zig-zag) order.
@return A copy of the current quantization table.
"
      end

      operation 9680514 "getScaledInstance"
	public return_type class_ref 327810 // JPEGQTable
	nparams 2
	  param in name "scaleFactor" explicit_type "float"
	  param inout name "forceBaseline" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new quantization table where the values are multiplied
by <code>scaleFactor</code> and then clamped to the range 1..32767
(or to 1..255 if <code>forceBaseline</code> is true).
<p>
Values of <code>scaleFactor</code> less than 1 tend to improve
the quality level of the table, and values greater than 1.0
degrade the quality level of the table.
@param scaleFactor multiplication factor for the table.
@param forceBaseline if <code>true</code>,
the values will be clamped to the range 1..255
@return a new quantization table that is a linear multiple
of the current table.
"
      end

      operation 9680642 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code String} representing this quantization table.
@return a {@code String} representing this quantization table.
"
      end
    end

    class 1177474 "JPEGImageReadParam"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class adds the ability to set JPEG quantization and Huffman
tables when using the built-in JPEG reader plug-in.  An instance of
this class will be returned from the
<code>getDefaultImageReadParam</code> methods of the built-in JPEG
<code>ImageReader</code>.

<p> The sole purpose of these additions is to allow the
specification of tables for use in decoding abbreviated streams.
The built-in JPEG reader will also accept an ordinary
<code>ImageReadParam</code>, which is sufficient for decoding
non-abbreviated streams.

<p> While tables for abbreviated streams are often obtained by
first reading another abbreviated stream containing only the
tables, in some applications the tables are fixed ahead of time.
This class allows the tables to be specified directly from client
code.  If no tables are specified either in the stream or in a
<code>JPEGImageReadParam</code>, then the stream is presumed to use
the \"standard\" visually lossless tables.  See {@link JPEGQTable JPEGQTable}
and {@link JPEGHuffmanTable JPEGHuffmanTable} for more information
 on the default tables.

<p> The default <code>JPEGImageReadParam</code> returned by the
<code>getDefaultReadParam</code> method of the builtin JPEG reader
contains no tables.  Default tables may be obtained from the table
classes {@link JPEGQTable JPEGQTable} and
{@link JPEGHuffmanTable JPEGHuffmanTable}.

<p> If a stream does contain tables, the tables given in a
<code>JPEGImageReadParam</code> are ignored.  Furthermore, if the
first image in a stream does contain tables and subsequent ones do
not, then the tables given in the first image are used for all the
abbreviated images.  Once tables have been read from a stream, they
can be overridden only by tables subsequently read from the same
stream.  In order to specify new tables, the {@link
javax.imageio.ImageReader#setInput setInput} method of
the reader must be called to change the stream.

<p> Note that this class does not provide a means for obtaining the
tables found in a stream.  These may be extracted from a stream by
consulting the IIOMetadata object returned by the reader.

<p>
For more information about the operation of the built-in JPEG plug-ins,
see the <A HREF=\"../../metadata/doc-files/jpeg_metadata.html\">JPEG
metadata format specification and usage notes</A>.

"
      classrelation 3762306 // <generalisation>
	relation 3762306 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3762306 // <generalisation>
	  b parent class_ref 313602 // ImageReadParam
      end

      classrelation 3762434 // qTables (<unidirectional association>)
	relation 3762434 --->
	  a role_name "qTables" multiplicity "[]" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3762434 // qTables (<unidirectional association>)
	  b parent class_ref 327810 // JPEGQTable
      end

      classrelation 3762562 // DCHuffmanTables (<unidirectional association>)
	relation 3762562 --->
	  a role_name "DCHuffmanTables" multiplicity "[]" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3762562 // DCHuffmanTables (<unidirectional association>)
	  b parent class_ref 327426 // JPEGHuffmanTable
      end

      classrelation 3762690 // ACHuffmanTables (<unidirectional association>)
	relation 3762690 --->
	  a role_name "ACHuffmanTables" multiplicity "[]" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3762690 // ACHuffmanTables (<unidirectional association>)
	  b parent class_ref 327426 // JPEGHuffmanTable
      end

      operation 9677570 "JPEGImageReadParam"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>JPEGImageReadParam</code>.
"
      end

      operation 9677698 "areTablesSet"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if tables are currently set.

@return <code>true</code> if tables are present.
"
      end

      operation 9677826 "setDecodeTables"
	public explicit_return_type "void"
	nparams 3
	  param inout name "qTables" type class_ref 327810 // JPEGQTable
	multiplicity "[]"
	  param inout name "DCHuffmanTables" type class_ref 327426 // JPEGHuffmanTable
	multiplicity "[]"
	  param inout name "ACHuffmanTables" type class_ref 327426 // JPEGHuffmanTable
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the quantization and Huffman tables to use in decoding
abbreviated streams.  There may be a maximum of 4 tables of
each type.  These tables are ignored once tables are
encountered in the stream.  All arguments must be
non-<code>null</code>.  The two arrays of Huffman tables must
have the same number of elements.  The table specifiers in the
frame and scan headers in the stream are assumed to be
equivalent to indices into these arrays.  The argument arrays
are copied by this method.

@param qTables an array of quantization table objects.
@param DCHuffmanTables an array of Huffman table objects.
@param ACHuffmanTables an array of Huffman table objects.

@exception IllegalArgumentException if any of the arguments
is <code>null</code>, has more than 4 elements, or if the
numbers of DC and AC tables differ.

@see #unsetDecodeTables
"
      end

      operation 9677954 "unsetDecodeTables"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes any quantization and Huffman tables that are currently
set.

@see #setDecodeTables
"
      end

      operation 9678082 "getQTables"
	public return_type class_ref 327810 // JPEGQTable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the array of quantization tables set on the
most recent call to <code>setDecodeTables</code>, or
<code>null</code> if tables are not currently set.

@return an array of <code>JPEGQTable</code> objects, or
<code>null</code>.

@see #setDecodeTables
"
      end

      operation 9678210 "getDCHuffmanTables"
	public return_type class_ref 327426 // JPEGHuffmanTable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the array of DC Huffman tables set on the
most recent call to <code>setDecodeTables</code>, or
<code>null</code> if tables are not currently set.

@return an array of <code>JPEGHuffmanTable</code> objects, or
<code>null</code>.

@see #setDecodeTables
"
      end

      operation 9678338 "getACHuffmanTables"
	public return_type class_ref 327426 // JPEGHuffmanTable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the array of AC Huffman tables set on the
most recent call to <code>setDecodeTables</code>, or
<code>null</code> if tables are not currently set.

@return an array of <code>JPEGHuffmanTable</code> objects, or
<code>null</code>.

@see #setDecodeTables
"
      end
    end

    class 1177602 "JPEGImageWriteParam"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class adds the ability to set JPEG quantization and Huffman
tables when using the built-in JPEG writer plug-in, and to request that
optimized Huffman tables be computed for an image.  An instance of
this class will be returned from the
<code>getDefaultImageWriteParam</code> methods of the built-in JPEG
<code>ImageWriter</code>.

<p> The principal purpose of these additions is to allow the
specification of tables to use in encoding abbreviated streams.
The built-in JPEG writer will also accept an ordinary
<code>ImageWriteParam</code>, in which case the writer will
construct the necessary tables internally.

<p> In either case, the quality setting in an <code>ImageWriteParam</code>
has the same meaning as for the underlying library: 1.00 means a
quantization table of all 1's, 0.75 means the \"standard\", visually
lossless quantization table, and 0.00 means aquantization table of
all 255's.

<p> While tables for abbreviated streams are often specified by
first writing an abbreviated stream containing only the tables, in
some applications the tables are fixed ahead of time.  This class
allows the tables to be specified directly from client code.

<p> Normally, the tables are specified in the
<code>IIOMetadata</code> objects passed in to the writer, and any
tables included in these objects are written to the stream.
If no tables are specified in the metadata, then an abbreviated
stream is written.  If no tables are included in the metadata and
no tables are specified in a <code>JPEGImageWriteParam</code>, then
an abbreviated stream is encoded using the \"standard\" visually
lossless tables.  This class is necessary for specifying tables
when an abbreviated stream must be written without writing any tables
to a stream first.  In order to use this class, the metadata object
passed into the writer must contain no tables, and no stream metadata
must be provided.  See {@link JPEGQTable JPEGQTable} and
{@link JPEGHuffmanTable JPEGHuffmanTable} for more
information on the default tables.

<p> The default <code>JPEGImageWriteParam</code> returned by the
<code>getDefaultWriteParam</code> method of the writer contains no
tables.  Default tables are included in the default
<code>IIOMetadata</code> objects returned by the writer.

<p> If the metadata does contain tables, the tables given in a
<code>JPEGImageWriteParam</code> are ignored.  Furthermore, once a
set of tables has been written, only tables in the metadata can
override them for subsequent writes, whether to the same stream or
a different one.  In order to specify new tables using this class,
the {@link javax.imageio.ImageWriter#reset reset}
method of the writer must be called.

<p>
For more information about the operation of the built-in JPEG plug-ins,
see the <A HREF=\"../../metadata/doc-files/jpeg_metadata.html\">JPEG
metadata format specification and usage notes</A>.

"
      classrelation 3762818 // <generalisation>
	relation 3762818 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3762818 // <generalisation>
	  b parent class_ref 316290 // ImageWriteParam
      end

      classrelation 3762946 // qTables (<unidirectional association>)
	relation 3762946 --->
	  a role_name "qTables" multiplicity "[]" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3762946 // qTables (<unidirectional association>)
	  b parent class_ref 327810 // JPEGQTable
      end

      classrelation 3763074 // DCHuffmanTables (<unidirectional association>)
	relation 3763074 --->
	  a role_name "DCHuffmanTables" multiplicity "[]" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3763074 // DCHuffmanTables (<unidirectional association>)
	  b parent class_ref 327426 // JPEGHuffmanTable
      end

      classrelation 3763202 // ACHuffmanTables (<unidirectional association>)
	relation 3763202 --->
	  a role_name "ACHuffmanTables" multiplicity "[]" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3763202 // ACHuffmanTables (<unidirectional association>)
	  b parent class_ref 327426 // JPEGHuffmanTable
      end

      attribute 2249474 "optimizeHuffman"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3763330 // compressionNames (<unidirectional association>)
	relation 3763330 --->
	  a role_name "compressionNames" multiplicity "[]" init_value " {\"JPEG\"}" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3763330 // compressionNames (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2249602 "qualityVals"
	private explicit_type "float"
	multiplicity "[]"
	init_value " { 0.00F, 0.30F, 0.75F, 1.00F }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3763458 // qualityDescs (<unidirectional association>)
	relation 3763458 --->
	  a role_name "qualityDescs" multiplicity "[]" init_value " {
        \"Low quality\",       // 0.00 -> 0.30
        \"Medium quality\",    // 0.30 -> 0.75
        \"Visually lossless\"  // 0.75 -> 1.00
    }" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3763458 // qualityDescs (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9678466 "JPEGImageWriteParam"
	public explicit_return_type ""
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>JPEGImageWriteParam</code>.  Tiling is not
supported.  Progressive encoding is supported. The default
progressive mode is MODE_DISABLED.  A single form of compression,
named \"JPEG\", is supported.  The default compression quality is
0.75.

@param locale a <code>Locale</code> to be used by the
superclass to localize compression type names and quality
descriptions, or <code>null</code>.
"
      end

      operation 9678594 "unsetCompression"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes any previous compression quality setting.

<p> The default implementation resets the compression quality
to <code>0.75F</code>.

@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>.
"
      end

      operation 9678722 "isCompressionLossless"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>false</code> since the JPEG plug-in only supports
lossy compression.

@return <code>false</code>.

@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>.
"
      end

      operation 9678850 "getCompressionQualityDescriptions"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9678978 "getCompressionQualityValues"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9679106 "areTablesSet"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if tables are currently set.

@return <code>true</code> if tables are present.
"
      end

      operation 9679234 "setEncodeTables"
	public explicit_return_type "void"
	nparams 3
	  param inout name "qTables" type class_ref 327810 // JPEGQTable
	multiplicity "[]"
	  param inout name "DCHuffmanTables" type class_ref 327426 // JPEGHuffmanTable
	multiplicity "[]"
	  param inout name "ACHuffmanTables" type class_ref 327426 // JPEGHuffmanTable
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the quantization and Huffman tables to use in encoding
abbreviated streams.  There may be a maximum of 4 tables of
each type.  These tables are ignored if tables are specified in
the metadata.  All arguments must be non-<code>null</code>.
The two arrays of Huffman tables must have the same number of
elements.  The table specifiers in the frame and scan headers
in the metadata are assumed to be equivalent to indices into
these arrays.  The argument arrays are copied by this method.

@param qTables An array of quantization table objects.
@param DCHuffmanTables An array of Huffman table objects.
@param ACHuffmanTables An array of Huffman table objects.

@exception IllegalArgumentException if any of the arguments
is <code>null</code> or has more than 4 elements, or if the
numbers of DC and AC tables differ.

@see #unsetEncodeTables
"
      end

      operation 9679362 "unsetEncodeTables"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes any quantization and Huffman tables that are currently
set.

@see #setEncodeTables
"
      end

      operation 9679490 "getQTables"
	public return_type class_ref 327810 // JPEGQTable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the array of quantization tables set on the
most recent call to <code>setEncodeTables</code>, or
<code>null</code> if tables are not currently set.

@return an array of <code>JPEGQTable</code> objects, or
<code>null</code>.

@see #setEncodeTables
"
      end

      operation 9679618 "getDCHuffmanTables"
	public return_type class_ref 327426 // JPEGHuffmanTable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the array of DC Huffman tables set on the
most recent call to <code>setEncodeTables</code>, or
<code>null</code> if tables are not currently set.

@return an array of <code>JPEGHuffmanTable</code> objects, or
<code>null</code>.

@see #setEncodeTables
"
      end

      operation 9679746 "getACHuffmanTables"
	public return_type class_ref 327426 // JPEGHuffmanTable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the array of AC Huffman tables set on the
most recent call to <code>setEncodeTables</code>, or
<code>null</code> if tables are not currently set.

@return an array of <code>JPEGHuffmanTable</code> objects, or
<code>null</code>.

@see #setEncodeTables
"
      end

      operation 9679874 "setOptimizeHuffmanTables"
	public explicit_return_type "void"
	nparams 1
	  param inout name "optimize" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells the writer to generate optimized Huffman tables
for the image as part of the writing process.  The
default is <code>false</code>.  If this flag is set
to <code>true</code>, it overrides any tables specified
in the metadata.  Note that this means that any image
written with this flag set to <code>true</code> will
always contain Huffman tables.

@param optimize A boolean indicating whether to generate
optimized Huffman tables when writing.

@see #getOptimizeHuffmanTables
"
      end

      operation 9680002 "getOptimizeHuffmanTables"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value passed into the most recent call
to <code>setOptimizeHuffmanTables</code>, or
<code>false</code> if <code>setOptimizeHuffmanTables</code>
has never been called.

@return <code>true</code> if the writer will generate optimized
Huffman tables.

@see #setOptimizeHuffmanTables
"
      end
    end
  end

  deploymentview 172162 "jpeg"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 838402 "JPEGHuffmanTable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 327426 // JPEGHuffmanTable
      end
      comment "Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 838530 "JPEGImageReadParam"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.imageio.ImageReadParam;
${definition}"
      associated_elems
	class_ref 1177474 // JPEGImageReadParam
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 838658 "JPEGImageWriteParam"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Locale;
import javax.imageio.ImageWriteParam;
import com.sun.imageio.plugins.jpeg.JPEG;
${definition}"
      associated_elems
	class_ref 1177602 // JPEGImageWriteParam
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 838786 "JPEGQTable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 327810 // JPEGQTable
      end
      comment "Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
