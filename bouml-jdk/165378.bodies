class CacheTable
!!!1243650.java!!!	CacheTable(inout orb : ORB, inout u : boolean)
        //System.out.println("using new cache table");
        this.orb = orb;
        wrapper = ORBUtilSystemException.get(orb,
            CORBALogDomains.RPC_ENCODING);
        noReverseMap = u;
        size = INITIAL_SIZE;
        entryCount = 0;
        initTables();
!!!1243778.java!!!	initTables() : void
        map = new Entry[size];
        rmap = noReverseMap ? null : new Entry[size];
!!!1243906.java!!!	grow() : void
        if (size == MAX_SIZE)
                return;
        Entry [] oldMap = map;
        int oldSize = size;
        size <<= 1;
        initTables();
        // now rehash the entries into the new table
        for (int i = 0; i < oldSize; i++) {
            for (Entry e = oldMap[i]; e != null; e = e.next)
                put_table(e.key, e.val);
        }
!!!1244034.java!!!	moduloTableSize(in h : int) : int
        // these are the "supplemental hash function" copied from
        // java.util.HashMap, supposed to be "critical"
        h += ~(h << 9);
        h ^=  (h >>> 14);
        h +=  (h << 4);
        h ^=  (h >>> 10);
        return h & (size - 1);
!!!1244162.java!!!	hash(inout key : Object) : int
        return moduloTableSize(System.identityHashCode(key));
!!!1244290.java!!!	hash(in val : int) : int
        return moduloTableSize(val);
!!!1244418.java!!!	put(inout key : Object, in val : int) : void
        if (put_table(key, val)) {
            entryCount++;
            if (entryCount > size * 3 / 4)
                grow();
        }
!!!1244546.java!!!	put_table(inout key : Object, in val : int) : boolean
        int index = hash(key);
        for (Entry e = map[index]; e != null; e = e.next) {
            if (e.key == key) {
                if (e.val != val) {
                    throw wrapper.duplicateIndirectionOffset();
                }
                // if we get here we are trying to put in the same key/val pair
                // this is a no-op, so we just return
                return false;
            }
        }
        // this means the key is not present in our table
        // then it shouldnt be present in our reverse table either
        Entry newEntry = new Entry(key, val);
        newEntry.next = map[index];
        map[index] = newEntry;
        if (!noReverseMap) {
            int rindex = hash(val);
            newEntry.rnext = rmap[rindex];
            rmap[rindex] = newEntry;
        }
        return true;
!!!1244674.java!!!	containsKey(inout key : Object) : boolean
        return (getVal(key) != -1);
!!!1244802.java!!!	getVal(inout key : Object) : int
        int index = hash(key);
        for (Entry e = map[index]; e != null; e = e.next) {
            if (e.key == key)
                return e.val;
        }
        return -1;
!!!1244930.java!!!	containsVal(in val : int) : boolean
        return (getKey(val) != null);
!!!1245058.java!!!	containsOrderedVal(in val : int) : boolean
        return containsVal(val);
!!!1245186.java!!!	getKey(in val : int) : Object
        int index = hash(val);
        for (Entry e = rmap[index]; e != null; e = e.rnext) {
            if (e.val == val)
                return e.key;
        }
        return null;
!!!1245314.java!!!	done() : void
        map = null;
        rmap = null;
