class DefaultMutableTreeNode
!!!11867522.java!!!	DefaultMutableTreeNode()
        this(null);
!!!11867650.java!!!	DefaultMutableTreeNode(inout userObject : Object)
        this(userObject, true);
!!!11867778.java!!!	DefaultMutableTreeNode(inout userObject : Object, inout allowsChildren : boolean)
        super();
        parent = null;
        this.allowsChildren = allowsChildren;
        this.userObject = userObject;
!!!11867906.java!!!	insert(inout newChild : MutableTreeNode, in childIndex : int) : void
        if (!allowsChildren) {
            throw new IllegalStateException("node does not allow children");
        } else if (newChild == null) {
            throw new IllegalArgumentException("new child is null");
        } else if (isNodeAncestor(newChild)) {
            throw new IllegalArgumentException("new child is an ancestor");
        }

            MutableTreeNode oldParent = (MutableTreeNode)newChild.getParent();

            if (oldParent != null) {
                oldParent.remove(newChild);
            }
            newChild.setParent(this);
            if (children == null) {
                children = new Vector();
            }
            children.insertElementAt(newChild, childIndex);
!!!11868034.java!!!	remove(in childIndex : int) : void
        MutableTreeNode child = (MutableTreeNode)getChildAt(childIndex);
        children.removeElementAt(childIndex);
        child.setParent(null);
!!!11868162.java!!!	setParent(inout newParent : MutableTreeNode) : void
        parent = newParent;
!!!11868290.java!!!	getParent() : TreeNode
        return parent;
!!!11868418.java!!!	getChildAt(in index : int) : TreeNode
        if (children == null) {
            throw new ArrayIndexOutOfBoundsException("node has no children");
        }
        return (TreeNode)children.elementAt(index);
!!!11868546.java!!!	getChildCount() : int
        if (children == null) {
            return 0;
        } else {
            return children.size();
        }
!!!11868674.java!!!	getIndex(inout aChild : TreeNode) : int
        if (aChild == null) {
            throw new IllegalArgumentException("argument is null");
        }

        if (!isNodeChild(aChild)) {
            return -1;
        }
        return children.indexOf(aChild);        // linear search
!!!11868802.java!!!	children() : Enumeration
        if (children == null) {
            return EMPTY_ENUMERATION;
        } else {
            return children.elements();
        }
!!!11868930.java!!!	setAllowsChildren(inout allows : boolean) : void
        if (allows != allowsChildren) {
            allowsChildren = allows;
            if (!allowsChildren) {
                removeAllChildren();
            }
        }
!!!11869058.java!!!	getAllowsChildren() : boolean
        return allowsChildren;
!!!11869186.java!!!	setUserObject(inout userObject : Object) : void
        this.userObject = userObject;
!!!11869314.java!!!	getUserObject() : Object
        return userObject;
!!!11869442.java!!!	removeFromParent() : void
        MutableTreeNode parent = (MutableTreeNode)getParent();
        if (parent != null) {
            parent.remove(this);
        }
!!!11869570.java!!!	remove(inout aChild : MutableTreeNode) : void
        if (aChild == null) {
            throw new IllegalArgumentException("argument is null");
        }

        if (!isNodeChild(aChild)) {
            throw new IllegalArgumentException("argument is not a child");
        }
        remove(getIndex(aChild));       // linear search
!!!11869698.java!!!	removeAllChildren() : void
        for (int i = getChildCount()-1; i >= 0; i--) {
            remove(i);
        }
!!!11869826.java!!!	add(inout newChild : MutableTreeNode) : void
        if(newChild != null && newChild.getParent() == this)
            insert(newChild, getChildCount() - 1);
        else
            insert(newChild, getChildCount());
!!!11869954.java!!!	isNodeAncestor(inout anotherNode : TreeNode) : boolean
        if (anotherNode == null) {
            return false;
        }

        TreeNode ancestor = this;

        do {
            if (ancestor == anotherNode) {
                return true;
            }
        } while((ancestor = ancestor.getParent()) != null);

        return false;
!!!11870082.java!!!	isNodeDescendant(inout anotherNode : DefaultMutableTreeNode) : boolean
        if (anotherNode == null)
            return false;

        return anotherNode.isNodeAncestor(this);
!!!11870210.java!!!	getSharedAncestor(inout aNode : DefaultMutableTreeNode) : TreeNode
        if (aNode == this) {
            return this;
        } else if (aNode == null) {
            return null;
        }

        int             level1, level2, diff;
        TreeNode        node1, node2;

        level1 = getLevel();
        level2 = aNode.getLevel();

        if (level2 > level1) {
            diff = level2 - level1;
            node1 = aNode;
            node2 = this;
        } else {
            diff = level1 - level2;
            node1 = this;
            node2 = aNode;
        }

        // Go up the tree until the nodes are at the same level
        while (diff > 0) {
            node1 = node1.getParent();
            diff--;
        }

        // Move up the tree until we find a common ancestor.  Since we know
        // that both nodes are at the same level, we won't cross paths
        // unknowingly (if there is a common ancestor, both nodes hit it in
        // the same iteration).

        do {
            if (node1 == node2) {
                return node1;
            }
            node1 = node1.getParent();
            node2 = node2.getParent();
        } while (node1 != null);// only need to check one -- they're at the
        // same level so if one is null, the other is

        if (node1 != null || node2 != null) {
            throw new Error ("nodes should be null");
        }

        return null;
!!!11870338.java!!!	isNodeRelated(inout aNode : DefaultMutableTreeNode) : boolean
        return (aNode != null) && (getRoot() == aNode.getRoot());
!!!11870466.java!!!	getDepth() : int
        Object  last = null;
        Enumeration     enum_ = breadthFirstEnumeration();

        while (enum_.hasMoreElements()) {
            last = enum_.nextElement();
        }

        if (last == null) {
            throw new Error ("nodes should be null");
        }

        return ((DefaultMutableTreeNode)last).getLevel() - getLevel();
!!!11870594.java!!!	getLevel() : int
        TreeNode ancestor;
        int levels = 0;

        ancestor = this;
        while((ancestor = ancestor.getParent()) != null){
            levels++;
        }

        return levels;
!!!11870722.java!!!	getPath() : TreeNode
        return getPathToRoot(this, 0);
!!!11870850.java!!!	getPathToRoot(inout aNode : TreeNode, in depth : int) : TreeNode
        TreeNode[]              retNodes;

        /* Check for null, in case someone passed in a null node, or
           they passed in an element that isn't rooted at root. */
        if(aNode == null) {
            if(depth == 0)
                return null;
            else
                retNodes = new TreeNode[depth];
        }
        else {
            depth++;
            retNodes = getPathToRoot(aNode.getParent(), depth);
            retNodes[retNodes.length - depth] = aNode;
        }
        return retNodes;
!!!11870978.java!!!	getUserObjectPath() : Object
        TreeNode[]          realPath = getPath();
        Object[]            retPath = new Object[realPath.length];

        for(int counter = 0; counter < realPath.length; counter++)
            retPath[counter] = ((DefaultMutableTreeNode)realPath[counter])
                               .getUserObject();
        return retPath;
!!!11871106.java!!!	getRoot() : TreeNode
        TreeNode ancestor = this;
        TreeNode previous;

        do {
            previous = ancestor;
            ancestor = ancestor.getParent();
        } while (ancestor != null);

        return previous;
!!!11871234.java!!!	isRoot() : boolean
        return getParent() == null;
!!!11871362.java!!!	getNextNode() : DefaultMutableTreeNode
        if (getChildCount() == 0) {
            // No children, so look for nextSibling
            DefaultMutableTreeNode nextSibling = getNextSibling();

            if (nextSibling == null) {
                DefaultMutableTreeNode aNode = (DefaultMutableTreeNode)getParent();

                do {
                    if (aNode == null) {
                        return null;
                    }

                    nextSibling = aNode.getNextSibling();
                    if (nextSibling != null) {
                        return nextSibling;
                    }

                    aNode = (DefaultMutableTreeNode)aNode.getParent();
                } while(true);
            } else {
                return nextSibling;
            }
        } else {
            return (DefaultMutableTreeNode)getChildAt(0);
        }
!!!11871490.java!!!	getPreviousNode() : DefaultMutableTreeNode
        DefaultMutableTreeNode previousSibling;
        DefaultMutableTreeNode myParent = (DefaultMutableTreeNode)getParent();

        if (myParent == null) {
            return null;
        }

        previousSibling = getPreviousSibling();

        if (previousSibling != null) {
            if (previousSibling.getChildCount() == 0)
                return previousSibling;
            else
                return previousSibling.getLastLeaf();
        } else {
            return myParent;
        }
!!!11871618.java!!!	preorderEnumeration() : Enumeration
        return new PreorderEnumeration(this);
!!!11871746.java!!!	postorderEnumeration() : Enumeration
        return new PostorderEnumeration(this);
!!!11871874.java!!!	breadthFirstEnumeration() : Enumeration
        return new BreadthFirstEnumeration(this);
!!!11872002.java!!!	depthFirstEnumeration() : Enumeration
        return postorderEnumeration();
!!!11872130.java!!!	pathFromAncestorEnumeration(inout ancestor : TreeNode) : Enumeration
        return new PathBetweenNodesEnumeration(ancestor, this);
!!!11872258.java!!!	isNodeChild(inout aNode : TreeNode) : boolean
        boolean retval;

        if (aNode == null) {
            retval = false;
        } else {
            if (getChildCount() == 0) {
                retval = false;
            } else {
                retval = (aNode.getParent() == this);
            }
        }

        return retval;
!!!11872386.java!!!	getFirstChild() : TreeNode
        if (getChildCount() == 0) {
            throw new NoSuchElementException("node has no children");
        }
        return getChildAt(0);
!!!11872514.java!!!	getLastChild() : TreeNode
        if (getChildCount() == 0) {
            throw new NoSuchElementException("node has no children");
        }
        return getChildAt(getChildCount()-1);
!!!11872642.java!!!	getChildAfter(inout aChild : TreeNode) : TreeNode
        if (aChild == null) {
            throw new IllegalArgumentException("argument is null");
        }

        int index = getIndex(aChild);           // linear search

        if (index == -1) {
            throw new IllegalArgumentException("node is not a child");
        }

        if (index < getChildCount() - 1) {
            return getChildAt(index + 1);
        } else {
            return null;
        }
!!!11872770.java!!!	getChildBefore(inout aChild : TreeNode) : TreeNode
        if (aChild == null) {
            throw new IllegalArgumentException("argument is null");
        }

        int index = getIndex(aChild);           // linear search

        if (index == -1) {
            throw new IllegalArgumentException("argument is not a child");
        }

        if (index > 0) {
            return getChildAt(index - 1);
        } else {
            return null;
        }
!!!11872898.java!!!	isNodeSibling(inout anotherNode : TreeNode) : boolean
        boolean retval;

        if (anotherNode == null) {
            retval = false;
        } else if (anotherNode == this) {
            retval = true;
        } else {
            TreeNode  myParent = getParent();
            retval = (myParent != null && myParent == anotherNode.getParent());

            if (retval && !((DefaultMutableTreeNode)getParent())
                           .isNodeChild(anotherNode)) {
                throw new Error("sibling has different parent");
            }
        }

        return retval;
!!!11873026.java!!!	getSiblingCount() : int
        TreeNode myParent = getParent();

        if (myParent == null) {
            return 1;
        } else {
            return myParent.getChildCount();
        }
!!!11873154.java!!!	getNextSibling() : DefaultMutableTreeNode
        DefaultMutableTreeNode retval;

        DefaultMutableTreeNode myParent = (DefaultMutableTreeNode)getParent();

        if (myParent == null) {
            retval = null;
        } else {
            retval = (DefaultMutableTreeNode)myParent.getChildAfter(this);      // linear search
        }

        if (retval != null && !isNodeSibling(retval)) {
            throw new Error("child of parent is not a sibling");
        }

        return retval;
!!!11873282.java!!!	getPreviousSibling() : DefaultMutableTreeNode
        DefaultMutableTreeNode retval;

        DefaultMutableTreeNode myParent = (DefaultMutableTreeNode)getParent();

        if (myParent == null) {
            retval = null;
        } else {
            retval = (DefaultMutableTreeNode)myParent.getChildBefore(this);     // linear search
        }

        if (retval != null && !isNodeSibling(retval)) {
            throw new Error("child of parent is not a sibling");
        }

        return retval;
!!!11873410.java!!!	isLeaf() : boolean
        return (getChildCount() == 0);
!!!11873538.java!!!	getFirstLeaf() : DefaultMutableTreeNode
        DefaultMutableTreeNode node = this;

        while (!node.isLeaf()) {
            node = (DefaultMutableTreeNode)node.getFirstChild();
        }

        return node;
!!!11873666.java!!!	getLastLeaf() : DefaultMutableTreeNode
        DefaultMutableTreeNode node = this;

        while (!node.isLeaf()) {
            node = (DefaultMutableTreeNode)node.getLastChild();
        }

        return node;
!!!11873794.java!!!	getNextLeaf() : DefaultMutableTreeNode
        DefaultMutableTreeNode nextSibling;
        DefaultMutableTreeNode myParent = (DefaultMutableTreeNode)getParent();

        if (myParent == null)
            return null;

        nextSibling = getNextSibling(); // linear search

        if (nextSibling != null)
            return nextSibling.getFirstLeaf();

        return myParent.getNextLeaf();  // tail recursion
!!!11873922.java!!!	getPreviousLeaf() : DefaultMutableTreeNode
        DefaultMutableTreeNode previousSibling;
        DefaultMutableTreeNode myParent = (DefaultMutableTreeNode)getParent();

        if (myParent == null)
            return null;

        previousSibling = getPreviousSibling(); // linear search

        if (previousSibling != null)
            return previousSibling.getLastLeaf();

        return myParent.getPreviousLeaf();              // tail recursion
!!!11874050.java!!!	getLeafCount() : int
        int count = 0;

        TreeNode node;
        Enumeration enum_ = breadthFirstEnumeration(); // order matters not

        while (enum_.hasMoreElements()) {
            node = (TreeNode)enum_.nextElement();
            if (node.isLeaf()) {
                count++;
            }
        }

        if (count < 1) {
            throw new Error("tree has zero leaves");
        }

        return count;
!!!11874178.java!!!	toString() : String
        if (userObject == null) {
            return "";
        } else {
            return userObject.toString();
        }
!!!11874306.java!!!	clone() : Object
        DefaultMutableTreeNode newNode;

        try {
            newNode = (DefaultMutableTreeNode)super.clone();

            // shallow copy -- the new node has no parent or children
            newNode.children = null;
            newNode.parent = null;

        } catch (CloneNotSupportedException e) {
            // Won't happen because we implement Cloneable
            throw new Error(e.toString());
        }

        return newNode;
!!!11874434.java!!!	writeObject(inout s : ObjectOutputStream) : void
        Object[]             tValues;

        s.defaultWriteObject();
        // Save the userObject, if its Serializable.
        if(userObject != null && userObject instanceof Serializable) {
            tValues = new Object[2];
            tValues[0] = "userObject";
            tValues[1] = userObject;
        }
        else
            tValues = new Object[0];
        s.writeObject(tValues);
!!!11874562.java!!!	readObject(inout s : ObjectInputStream) : void
        Object[]      tValues;

        s.defaultReadObject();

        tValues = (Object[])s.readObject();

        if(tValues.length > 0 && tValues[0].equals("userObject"))
            userObject = tValues[1];
