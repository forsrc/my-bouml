class BufferManagerFactory
!!!320002.java!!!	newBufferManagerRead(inout version : GIOPVersion, in encodingVersion : byte, inout orb : ORB) : BufferManagerRead

        // REVISIT - On the reading side, shouldn't we monitor the incoming
        // fragments on a given connection to determine what fragment size
        // they're using, then use that ourselves?

        if (encodingVersion != Message.CDR_ENC_VERSION) {
            return new BufferManagerReadGrow(orb);
        }

        switch (version.intValue())
        {
            case GIOPVersion.VERSION_1_0:
                return new BufferManagerReadGrow(orb);
            case GIOPVersion.VERSION_1_1:
            case GIOPVersion.VERSION_1_2:
                // The stream reader can handle fragmented and
                // non fragmented messages
                return new BufferManagerReadStream(orb);
            default:
                // REVISIT - what is appropriate?
                throw new INTERNAL("Unknown GIOP version: "
                                   + version);
        }
!!!320130.java!!!	newBufferManagerRead(in strategy : int, in encodingVersion : byte, inout orb : ORB) : BufferManagerRead

        if (encodingVersion != Message.CDR_ENC_VERSION) {
            if (strategy != BufferManagerFactory.GROW) {
                ORBUtilSystemException wrapper =
                    ORBUtilSystemException.get((ORB)orb,
                                               CORBALogDomains.RPC_ENCODING);
                throw wrapper.invalidBuffMgrStrategy("newBufferManagerRead");
            }
            return new BufferManagerReadGrow(orb);
        }
        switch (strategy) {
            case BufferManagerFactory.GROW:
                return new BufferManagerReadGrow(orb);
            case BufferManagerFactory.COLLECT:
                throw new INTERNAL("Collect strategy invalid for reading");
            case BufferManagerFactory.STREAM:
                return new BufferManagerReadStream(orb);
            default:
                throw new INTERNAL("Unknown buffer manager read strategy: "
                                   + strategy);
        }
!!!320258.java!!!	newBufferManagerWrite(in strategy : int, in encodingVersion : byte, inout orb : ORB) : BufferManagerWrite
        if (encodingVersion != Message.CDR_ENC_VERSION) {
            if (strategy != BufferManagerFactory.GROW) {
                ORBUtilSystemException wrapper =
                    ORBUtilSystemException.get((ORB)orb,
                                               CORBALogDomains.RPC_ENCODING);
                throw wrapper.invalidBuffMgrStrategy("newBufferManagerWrite");
            }
            return new BufferManagerWriteGrow(orb);
        }
        switch (strategy) {
            case BufferManagerFactory.GROW:
                return new BufferManagerWriteGrow(orb);
            case BufferManagerFactory.COLLECT:
                return new BufferManagerWriteCollect(orb);
            case BufferManagerFactory.STREAM:
                return new BufferManagerWriteStream(orb);
            default:
                throw new INTERNAL("Unknown buffer manager write strategy: "
                                   + strategy);
        }
!!!320386.java!!!	newBufferManagerWrite(inout version : GIOPVersion, in encodingVersion : byte, inout orb : ORB) : BufferManagerWrite
        if (encodingVersion != Message.CDR_ENC_VERSION) {
            return new BufferManagerWriteGrow(orb);
        }
        return BufferManagerFactory.newBufferManagerWrite(
            orb.getORBData().getGIOPBuffMgrStrategy(version),
            encodingVersion, orb);
!!!320514.java!!!	defaultBufferManagerRead(inout orb : ORB) : BufferManagerRead
        return new BufferManagerReadGrow(orb);
