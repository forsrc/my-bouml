class FileImageOutputStream
!!!9689090.java!!!	FileImageOutputStream(inout f : File)
        this(f == null ? null : new RandomAccessFile(f, "rw"));
!!!9689218.java!!!	FileImageOutputStream(inout raf : RandomAccessFile)
        if (raf == null) {
            throw new IllegalArgumentException("raf == null!");
        }
        this.raf = raf;

        disposerRecord = new CloseableDisposerRecord(raf);
        if (getClass() == FileImageOutputStream.class) {
            disposerReferent = new Object();
            Disposer.addRecord(disposerReferent, disposerRecord);
        } else {
            disposerReferent = new StreamFinalizer(this);
        }
!!!9689346.java!!!	read() : int
        checkClosed();
        bitOffset = 0;
        int val = raf.read();
        if (val != -1) {
            ++streamPos;
        }
        return val;
!!!9689474.java!!!	read(inout b : byte [[]], in off : int, in len : int) : int
        checkClosed();
        bitOffset = 0;
        int nbytes = raf.read(b, off, len);
        if (nbytes != -1) {
            streamPos += nbytes;
        }
        return nbytes;
!!!9689602.java!!!	write(in b : int) : void
        flushBits(); // this will call checkClosed() for us
        raf.write(b);
        ++streamPos;
!!!9689730.java!!!	write(inout b : byte [[]], in off : int, in len : int) : void
        flushBits(); // this will call checkClosed() for us
        raf.write(b, off, len);
        streamPos += len;
!!!9689858.java!!!	length() : long
        try {
            checkClosed();
            return raf.length();
        } catch (IOException e) {
            return -1L;
        }
!!!9689986.java!!!	seek(in pos : long) : void
        checkClosed();
        if (pos < flushedPos) {
            throw new IndexOutOfBoundsException("pos < flushedPos!");
        }
        bitOffset = 0;
        raf.seek(pos);
        streamPos = raf.getFilePointer();
!!!9690114.java!!!	close() : void
        super.close();
        disposerRecord.dispose(); // this closes the RandomAccessFile
        raf = null;
!!!9690242.java!!!	finalize() : void
        // Empty finalizer: for performance reasons we instead use the
        // Disposer mechanism for ensuring that the underlying
        // RandomAccessFile is closed prior to garbage collection
