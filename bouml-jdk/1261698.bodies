class SyncFactory
!!!10398082.java!!!	registerProvider(inout providerID : String) : void

        ProviderImpl impl = new ProviderImpl();
        impl.setClassname(providerID);
        initMapIfNecessary();
        implementations.put(providerID, impl);

!!!10398210.java!!!	getSyncFactory() : SyncFactory
        /*
         * Using Initialization on Demand Holder idiom as
         * Effective Java 2nd Edition,ITEM 71, indicates it is more performant
         * than the Double-Check Locking idiom.
         */
        return SyncFactoryHolder.factory;
!!!10398338.java!!!	unregisterProvider(inout providerID : String) : void
        initMapIfNecessary();
        if (implementations.containsKey(providerID)) {
            implementations.remove(providerID);
        }
!!!10398466.java!!!	initMapIfNecessary() : void

        // Local implementation class names and keys from Properties
        // file, translate names into Class objects using Class.forName
        // and store mappings
        final Properties properties = new Properties();

        if (implementations == null) {
            implementations = new Hashtable<>();

            try {

                // check if user is supplying his Synchronisation Provider
                // Implementation if not using Oracle's implementation.
                // properties.load(new FileInputStream(ROWSET_PROPERTIES));

                // The rowset.properties needs to be in jdk/jre/lib when
                // integrated with jdk.
                // else it should be picked from -D option from command line.

                // -Drowset.properties will add to standard properties. Similar
                // keys will over-write

                /*
                 * Dependent on application
                 */
                String strRowsetProperties;
                try {
                    strRowsetProperties = AccessController.doPrivileged(new PrivilegedAction<String>() {
                        public String run() {
                            return System.getProperty("rowset.properties");
                        }
                    }, null, new PropertyPermission("rowset.properties", "read"));
                } catch (Exception ex) {
                    System.out.println("errorget rowset.properties: " + ex);
                    strRowsetProperties = null;
                };

                if (strRowsetProperties != null) {
                    // Load user's implementation of SyncProvider
                    // here. -Drowset.properties=/abc/def/pqr.txt
                    ROWSET_PROPERTIES = strRowsetProperties;
                    try (FileInputStream fis = new FileInputStream(ROWSET_PROPERTIES)) {
                        properties.load(fis);
                    }
                    parseProperties(properties);
                }

                /*
                 * Always available
                 */
                ROWSET_PROPERTIES = "javax" + strFileSep + "sql" +
                        strFileSep + "rowset" + strFileSep +
                        "rowset.properties";

                ClassLoader cl = Thread.currentThread().getContextClassLoader();

                try {
                    AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {
                        try (InputStream stream = (cl == null) ?
                                ClassLoader.getSystemResourceAsStream(ROWSET_PROPERTIES)
                                : cl.getResourceAsStream(ROWSET_PROPERTIES)) {
                            if (stream == null) {
                                throw new SyncFactoryException("Resource " + ROWSET_PROPERTIES + " not found");
                            }
                            properties.load(stream);
                        }
                        return null;
                    });
                } catch (PrivilegedActionException ex) {
                    Throwable e = ex.getException();
                    if (e instanceof SyncFactoryException) {
                      throw (SyncFactoryException) e;
                    } else {
                        SyncFactoryException sfe = new SyncFactoryException();
                        sfe.initCause(ex.getException());
                        throw sfe;
                    }
                }

                parseProperties(properties);

            // removed else, has properties should sum together

            } catch (FileNotFoundException e) {
                throw new SyncFactoryException("Cannot locate properties file: " + e);
            } catch (IOException e) {
                throw new SyncFactoryException("IOException: " + e);
            }

            /*
             * Now deal with -Drowset.provider.classname
             * load additional properties from -D command line
             */
            properties.clear();
            String providerImpls;
            try {
                providerImpls = AccessController.doPrivileged(new PrivilegedAction<String>() {
                    public String run() {
                        return System.getProperty(ROWSET_SYNC_PROVIDER);
                    }
                }, null, new PropertyPermission(ROWSET_SYNC_PROVIDER, "read"));
            } catch (Exception ex) {
                providerImpls = null;
            }

            if (providerImpls != null) {
                int i = 0;
                if (providerImpls.indexOf(colon) > 0) {
                    StringTokenizer tokenizer = new StringTokenizer(providerImpls, colon);
                    while (tokenizer.hasMoreElements()) {
                        properties.put(ROWSET_SYNC_PROVIDER + "." + i, tokenizer.nextToken());
                        i++;
                    }
                } else {
                    properties.put(ROWSET_SYNC_PROVIDER, providerImpls);
                }
                parseProperties(properties);
            }
        }
!!!10398594.java!!!	parseProperties(inout p : Properties) : void

        ProviderImpl impl = null;
        String key = null;
        String[] propertyNames = null;

        for (Enumeration<?> e = p.propertyNames(); e.hasMoreElements();) {

            String str = (String) e.nextElement();

            int w = str.length();

            if (str.startsWith(SyncFactory.ROWSET_SYNC_PROVIDER)) {

                impl = new ProviderImpl();
                impl.setIndex(providerImplIndex++);

                if (w == (SyncFactory.ROWSET_SYNC_PROVIDER).length()) {
                    // no property index has been set.
                    propertyNames = getPropertyNames(false);
                } else {
                    // property index has been set.
                    propertyNames = getPropertyNames(true, str.substring(w - 1));
                }

                key = p.getProperty(propertyNames[0]);
                impl.setClassname(key);
                impl.setVendor(p.getProperty(propertyNames[1]));
                impl.setVersion(p.getProperty(propertyNames[2]));
                implementations.put(key, impl);
            }
        }
!!!10398722.java!!!	getPropertyNames(inout append : boolean) : String
        return getPropertyNames(append, null);
!!!10398850.java!!!	getPropertyNames(inout append : boolean, inout propertyIndex : String) : String
        String dot = ".";
        String[] propertyNames =
                new String[]{SyncFactory.ROWSET_SYNC_PROVIDER,
            SyncFactory.ROWSET_SYNC_VENDOR,
            SyncFactory.ROWSET_SYNC_PROVIDER_VERSION};
        if (append) {
            for (int i = 0; i < propertyNames.length; i++) {
                propertyNames[i] = propertyNames[i] +
                        dot +
                        propertyIndex;
            }
            return propertyNames;
        } else {
            return propertyNames;
        }
!!!10398978.java!!!	showImpl(inout impl : ProviderImpl) : void
        System.out.println("Provider implementation:");
        System.out.println("Classname: " + impl.getClassname());
        System.out.println("Vendor: " + impl.getVendor());
        System.out.println("Version: " + impl.getVersion());
        System.out.println("Impl index: " + impl.getIndex());
!!!10399106.java!!!	getInstance(inout providerID : String) : SyncProvider

        if(providerID == null) {
            throw new SyncFactoryException("The providerID cannot be null");
        }

        initMapIfNecessary(); // populate HashTable
        initJNDIContext();    // check JNDI context for any additional bindings

        ProviderImpl impl = (ProviderImpl) implementations.get(providerID);

        if (impl == null) {
            // Requested SyncProvider is unavailable. Return default provider.
            return new com.sun.rowset.providers.RIOptimisticProvider();
        }

        try {
            ReflectUtil.checkPackageAccess(providerID);
        } catch (java.security.AccessControlException e) {
            SyncFactoryException sfe = new SyncFactoryException();
            sfe.initCause(e);
            throw sfe;
        }

        // Attempt to invoke classname from registered SyncProvider list
        Class<?> c = null;
        try {
            ClassLoader cl = Thread.currentThread().getContextClassLoader();

            /**
             * The SyncProvider implementation of the user will be in
             * the classpath. We need to find the ClassLoader which loads
             * this SyncFactory and try to load the SyncProvider class from
             * there.
             **/
            c = Class.forName(providerID, true, cl);

            if (c != null) {
                return (SyncProvider) c.newInstance();
            } else {
                return new com.sun.rowset.providers.RIOptimisticProvider();
            }

        } catch (IllegalAccessException e) {
            throw new SyncFactoryException("IllegalAccessException: " + e.getMessage());
        } catch (InstantiationException e) {
            throw new SyncFactoryException("InstantiationException: " + e.getMessage());
        } catch (ClassNotFoundException e) {
            throw new SyncFactoryException("ClassNotFoundException: " + e.getMessage());
        }
!!!10399234.java!!!	getRegisteredProviders() : Enumeration
        initMapIfNecessary();
        // return a collection of classnames
        // of type SyncProvider
        return implementations.elements();
!!!10399362.java!!!	setLogger(inout logger : Logger) : void

        SecurityManager sec = System.getSecurityManager();
        if (sec != null) {
            sec.checkPermission(SET_SYNCFACTORY_PERMISSION);
        }

        if(logger == null){
            throw new NullPointerException("You must provide a Logger");
        }
        rsLogger = logger;
!!!10399490.java!!!	setLogger(inout logger : Logger, inout level : Level) : void
        // singleton
        SecurityManager sec = System.getSecurityManager();
        if (sec != null) {
            sec.checkPermission(SET_SYNCFACTORY_PERMISSION);
        }

        if(logger == null){
            throw new NullPointerException("You must provide a Logger");
        }
        logger.setLevel(level);
        rsLogger = logger;
!!!10399618.java!!!	getLogger() : Logger

        Logger result = rsLogger;
        // only one logger per session
        if (result == null) {
            throw new SyncFactoryException("(SyncFactory) : No logger has been set");
        }

        return result;
!!!10399746.java!!!	setJNDIContext(inout ctx : Context) : void
        SecurityManager sec = System.getSecurityManager();
        if (sec != null) {
            sec.checkPermission(SET_SYNCFACTORY_PERMISSION);
        }
        if (ctx == null) {
            throw new SyncFactoryException("Invalid JNDI context supplied");
        }
        ic = ctx;
!!!10399874.java!!!	initJNDIContext() : void

        if ((ic != null) && (lazyJNDICtxRefresh == false)) {
            try {
                parseProperties(parseJNDIContext());
                lazyJNDICtxRefresh = true; // touch JNDI namespace once.
            } catch (NamingException e) {
                e.printStackTrace();
                throw new SyncFactoryException("SPI: NamingException: " + e.getExplanation());
            } catch (Exception e) {
                e.printStackTrace();
                throw new SyncFactoryException("SPI: Exception: " + e.getMessage());
            }
        }
!!!10400002.java!!!	parseJNDIContext() : Properties

        NamingEnumeration<?> bindings = ic.listBindings("");
        Properties properties = new Properties();

        // Hunt one level below context for available SyncProvider objects
        enumerateBindings(bindings, properties);

        return properties;
!!!10400130.java!!!	enumerateBindings(inout bindings : NamingEnumeration, inout properties : Properties) : void

        boolean syncProviderObj = false; // move to parameters ?

        try {
            Binding bd = null;
            Object elementObj = null;
            String element = null;
            while (bindings.hasMore()) {
                bd = (Binding) bindings.next();
                element = bd.getName();
                elementObj = bd.getObject();

                if (!(ic.lookup(element) instanceof Context)) {
                    // skip directories/sub-contexts
                    if (ic.lookup(element) instanceof SyncProvider) {
                        syncProviderObj = true;
                    }
                }

                if (syncProviderObj) {
                    SyncProvider sync = (SyncProvider) elementObj;
                    properties.put(SyncFactory.ROWSET_SYNC_PROVIDER,
                            sync.getProviderID());
                    syncProviderObj = false; // reset
                }

            }
        } catch (javax.naming.NotContextException e) {
            bindings.next();
            // Re-entrant call into method
            enumerateBindings(bindings, properties);
        }
