class BasicStroke
!!!6092674.java!!!	BasicStroke(in width : float, in cap : int, in join : int, in miterlimit : float, inout dash : float [[]], in dash_phase : float)
        if (width < 0.0f) {
            throw new IllegalArgumentException("negative width");
        }
        if (cap != CAP_BUTT && cap != CAP_ROUND && cap != CAP_SQUARE) {
            throw new IllegalArgumentException("illegal end cap value");
        }
        if (join == JOIN_MITER) {
            if (miterlimit < 1.0f) {
                throw new IllegalArgumentException("miter limit < 1");
            }
        } else if (join != JOIN_ROUND && join != JOIN_BEVEL) {
            throw new IllegalArgumentException("illegal line join value");
        }
        if (dash != null) {
            if (dash_phase < 0.0f) {
                throw new IllegalArgumentException("negative dash phase");
            }
            boolean allzero = true;
            for (int i = 0; i < dash.length; i++) {
                float d = dash[i];
                if (d > 0.0) {
                    allzero = false;
                } else if (d < 0.0) {
                    throw new IllegalArgumentException("negative dash length");
                }
            }
            if (allzero) {
                throw new IllegalArgumentException("dash lengths all zero");
            }
        }
        this.width      = width;
        this.cap        = cap;
        this.join       = join;
        this.miterlimit = miterlimit;
        if (dash != null) {
            this.dash = (float []) dash.clone();
        }
        this.dash_phase = dash_phase;
!!!6092802.java!!!	BasicStroke(in width : float, in cap : int, in join : int, in miterlimit : float)
        this(width, cap, join, miterlimit, null, 0.0f);
!!!6092930.java!!!	BasicStroke(in width : float, in cap : int, in join : int)
        this(width, cap, join, 10.0f, null, 0.0f);
!!!6093058.java!!!	BasicStroke(in width : float)
        this(width, CAP_SQUARE, JOIN_MITER, 10.0f, null, 0.0f);
!!!6093186.java!!!	BasicStroke()
        this(1.0f, CAP_SQUARE, JOIN_MITER, 10.0f, null, 0.0f);
!!!6093314.java!!!	createStrokedShape(inout s : Shape) : Shape
        sun.java2d.pipe.RenderingEngine re =
            sun.java2d.pipe.RenderingEngine.getInstance();
        return re.createStrokedShape(s, width, cap, join, miterlimit,
                                     dash, dash_phase);
!!!6093442.java!!!	getLineWidth() : float
        return width;
!!!6093570.java!!!	getEndCap() : int
        return cap;
!!!6093698.java!!!	getLineJoin() : int
        return join;
!!!6093826.java!!!	getMiterLimit() : float
        return miterlimit;
!!!6093954.java!!!	getDashArray() : float
        if (dash == null) {
            return null;
        }

        return (float[]) dash.clone();
!!!6094082.java!!!	getDashPhase() : float
        return dash_phase;
!!!6094210.java!!!	hashCode() : int
        int hash = Float.floatToIntBits(width);
        hash = hash * 31 + join;
        hash = hash * 31 + cap;
        hash = hash * 31 + Float.floatToIntBits(miterlimit);
        if (dash != null) {
            hash = hash * 31 + Float.floatToIntBits(dash_phase);
            for (int i = 0; i < dash.length; i++) {
                hash = hash * 31 + Float.floatToIntBits(dash[i]);
            }
        }
        return hash;
!!!6094338.java!!!	equals(inout obj : Object) : boolean
        if (!(obj instanceof BasicStroke)) {
            return false;
        }

        BasicStroke bs = (BasicStroke) obj;
        if (width != bs.width) {
            return false;
        }

        if (join != bs.join) {
            return false;
        }

        if (cap != bs.cap) {
            return false;
        }

        if (miterlimit != bs.miterlimit) {
            return false;
        }

        if (dash != null) {
            if (dash_phase != bs.dash_phase) {
                return false;
            }

            if (!java.util.Arrays.equals(dash, bs.dash)) {
                return false;
            }
        }
        else if (bs.dash != null) {
            return false;
        }

        return true;
