class Method
!!!7349762.java!!!	getGenericSignature() : String
return signature;
!!!7349890.java!!!	getFactory() : GenericsFactory
        // create scope and factory
        return CoreReflectionFactory.make(this, MethodScope.make(this));
!!!7350018.java!!!	getGenericInfo() : MethodRepository
        // lazily initialize repository if necessary
        if (genericInfo == null) {
            // create and cache generic info repository
            genericInfo = MethodRepository.make(getGenericSignature(),
                                                getFactory());
        }
        return genericInfo; //return cached repository
!!!7350146.java!!!	Method(inout declaringClass : Class, inout name : String, inout parameterTypes : Class [[]], inout returnType : Class, inout checkedExceptions : Class [[]], in modifiers : int, in slot : int, inout signature : String, inout annotations : byte [[]], inout parameterAnnotations : byte [[]], inout annotationDefault : byte [[]])
        this.clazz = declaringClass;
        this.name = name;
        this.parameterTypes = parameterTypes;
        this.returnType = returnType;
        this.exceptionTypes = checkedExceptions;
        this.modifiers = modifiers;
        this.slot = slot;
        this.signature = signature;
        this.annotations = annotations;
        this.parameterAnnotations = parameterAnnotations;
        this.annotationDefault = annotationDefault;
!!!7350274.java!!!	copy() : Method
        // This routine enables sharing of MethodAccessor objects
        // among Method objects which refer to the same underlying
        // method in the VM. (All of this contortion is only necessary
        // because of the "accessibility" bit in AccessibleObject,
        // which implicitly requires that new java.lang.reflect
        // objects be fabricated for each reflective call on Class
        // objects.)
        if (this.root != null)
            throw new IllegalArgumentException("Can not copy a non-root Method");

        Method res = new Method(clazz, name, parameterTypes, returnType,
                                exceptionTypes, modifiers, slot, signature,
                                annotations, parameterAnnotations, annotationDefault);
        res.root = this;
        // Might as well eagerly propagate this if already present
        res.methodAccessor = methodAccessor;
        return res;
!!!7350402.java!!!	getRoot() : Executable
        return root;
!!!7350530.java!!!	hasGenericInformation() : boolean
        return (getGenericSignature() != null);
!!!7350658.java!!!	getAnnotationBytes() : byte
        return annotations;
!!!7350786.java!!!	getDeclaringClass() : Class
        return clazz;
!!!7350914.java!!!	getName() : String
        return name;
!!!7351042.java!!!	getModifiers() : int
        return modifiers;
!!!7351170.java!!!	getTypeParameters() : TypeVariable
        if (getGenericSignature() != null)
            return (TypeVariable<Method>[])getGenericInfo().getTypeParameters();
        else
            return (TypeVariable<Method>[])new TypeVariable[0];
!!!7351298.java!!!	getReturnType() : Class
        return returnType;
!!!7351426.java!!!	getGenericReturnType() : Type
      if (getGenericSignature() != null) {
        return getGenericInfo().getReturnType();
      } else { return getReturnType();}
!!!7351554.java!!!	getParameterTypes() : Class
        return parameterTypes.clone();
!!!7351682.java!!!	getParameterCount() : int
 return parameterTypes.length;
!!!7351810.java!!!	getGenericParameterTypes() : Type
        return super.getGenericParameterTypes();
!!!7351938.java!!!	getExceptionTypes() : Class
        return exceptionTypes.clone();
!!!7352066.java!!!	getGenericExceptionTypes() : Type
        return super.getGenericExceptionTypes();
!!!7352194.java!!!	equals(inout obj : Object) : boolean
        if (obj != null && obj instanceof Method) {
            Method other = (Method)obj;
            if ((getDeclaringClass() == other.getDeclaringClass())
                && (getName() == other.getName())) {
                if (!returnType.equals(other.getReturnType()))
                    return false;
                return equalParamTypes(parameterTypes, other.parameterTypes);
            }
        }
        return false;
!!!7352322.java!!!	hashCode() : int
        return getDeclaringClass().getName().hashCode() ^ getName().hashCode();
!!!7352450.java!!!	toString() : String
        return sharedToString(Modifier.methodModifiers(),
                              isDefault(),
                              parameterTypes,
                              exceptionTypes);
!!!7352578.java!!!	specificToStringHeader(inout sb : StringBuilder) : void
        sb.append(getReturnType().getTypeName()).append(' ');
        sb.append(getDeclaringClass().getTypeName()).append('.');
        sb.append(getName());
!!!7352706.java!!!	toGenericString() : String
        return sharedToGenericString(Modifier.methodModifiers(), isDefault());
!!!7352834.java!!!	specificToGenericStringHeader(inout sb : StringBuilder) : void
        Type genRetType = getGenericReturnType();
        sb.append(genRetType.getTypeName()).append(' ');
        sb.append(getDeclaringClass().getTypeName()).append('.');
        sb.append(getName());
!!!7352962.java!!!	invoke(inout obj : Object, inout  : Object...args) : Object
        if (!override) {
            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {
                Class<?> caller = Reflection.getCallerClass();
                checkAccess(caller, clazz, obj, modifiers);
            }
        }
        MethodAccessor ma = methodAccessor;             // read volatile
        if (ma == null) {
            ma = acquireMethodAccessor();
        }
        return ma.invoke(obj, args);
!!!7353090.java!!!	isBridge() : boolean
        return (getModifiers() & Modifier.BRIDGE) != 0;
!!!7353218.java!!!	isVarArgs() : boolean
        return super.isVarArgs();
!!!7353346.java!!!	isSynthetic() : boolean
        return super.isSynthetic();
!!!7353474.java!!!	isDefault() : boolean
        // Default methods are public non-abstract instance methods
        // declared in an interface.
        return ((getModifiers() & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) ==
                Modifier.PUBLIC) && getDeclaringClass().isInterface();
!!!7353602.java!!!	acquireMethodAccessor() : MethodAccessor
        // First check to see if one has been created yet, and take it
        // if so
        MethodAccessor tmp = null;
        if (root != null) tmp = root.getMethodAccessor();
        if (tmp != null) {
            methodAccessor = tmp;
        } else {
            // Otherwise fabricate one and propagate it up to the root
            tmp = reflectionFactory.newMethodAccessor(this);
            setMethodAccessor(tmp);
        }

        return tmp;
!!!7353730.java!!!	getMethodAccessor() : MethodAccessor
        return methodAccessor;
!!!7353858.java!!!	setMethodAccessor(inout accessor : MethodAccessor) : void
        methodAccessor = accessor;
        // Propagate up
        if (root != null) {
            root.setMethodAccessor(accessor);
        }
!!!7353986.java!!!	getDefaultValue() : Object
        if  (annotationDefault == null)
            return null;
        Class<?> memberType = AnnotationType.invocationHandlerReturnType(
            getReturnType());
        Object result = AnnotationParser.parseMemberValue(
            memberType, ByteBuffer.wrap(annotationDefault),
            sun.misc.SharedSecrets.getJavaLangAccess().
                getConstantPool(getDeclaringClass()),
            getDeclaringClass());
        if (result instanceof sun.reflect.annotation.ExceptionProxy)
            throw new AnnotationFormatError("Invalid default: " + this);
        return result;
!!!7354114.java!!!	getAnnotation(inout annotationClass : Class) : T
        return super.getAnnotation(annotationClass);
!!!7354242.java!!!	getDeclaredAnnotations() : Annotation
        return super.getDeclaredAnnotations();
!!!7354370.java!!!	getParameterAnnotations() : Annotation
        return sharedGetParameterAnnotations(parameterTypes, parameterAnnotations);
!!!7354498.java!!!	getAnnotatedReturnType() : AnnotatedType
        return getAnnotatedReturnType0(getGenericReturnType());
!!!7354626.java!!!	handleParameterNumberMismatch(in resultLength : int, in numParameters : int) : void
        throw new AnnotationFormatError("Parameter annotations don't match number of parameters");
