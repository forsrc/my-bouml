class MenuComponent
!!!6113282.java!!!	getAccessControlContext() : AccessControlContext
        if (acc == null) {
            throw new SecurityException(
                    "MenuComponent is missing AccessControlContext");
        }
        return acc;
!!!6113410.java!!!	MenuComponent()
        GraphicsEnvironment.checkHeadless();
        appContext = AppContext.getAppContext();
!!!6113538.java!!!	constructComponentName() : String
        return null; // For strict compliance with prior platform versions, a MenuComponent
                     // that doesn't set its name should return null from
                     // getName()
!!!6113666.java!!!	getName() : String
        if (name == null && !nameExplicitlySet) {
            synchronized(this) {
                if (name == null && !nameExplicitlySet)
                    name = constructComponentName();
            }
        }
        return name;
!!!6113794.java!!!	setName(inout name : String) : void
        synchronized(this) {
            this.name = name;
            nameExplicitlySet = true;
        }
!!!6113922.java!!!	getParent() : MenuContainer
        return getParent_NoClientCode();
!!!6114050.java!!!	getParent_NoClientCode() : MenuContainer
        return parent;
!!!6114178.java!!!	getPeer() : MenuComponentPeer
        return peer;
!!!6114306.java!!!	getFont() : Font
        Font font = this.font;
        if (font != null) {
            return font;
        }
        MenuContainer parent = this.parent;
        if (parent != null) {
            return parent.getFont();
        }
        return null;
!!!6114434.java!!!	getFont_NoClientCode() : Font
        Font font = this.font;
        if (font != null) {
            return font;
        }

        // The MenuContainer interface does not have getFont_NoClientCode()
        // and it cannot, because it must be package-private. Because of
        // this, we must manually cast classes that implement
        // MenuContainer.
        Object parent = this.parent;
        if (parent != null) {
            if (parent instanceof Component) {
                font = ((Component)parent).getFont_NoClientCode();
            } else if (parent instanceof MenuComponent) {
                font = ((MenuComponent)parent).getFont_NoClientCode();
            }
        }
        return font;
!!!6114562.java!!!	setFont(inout f : Font) : void
        synchronized (getTreeLock()) {
            font = f;
            //Fixed 6312943: NullPointerException in method MenuComponent.setFont(Font)
            MenuComponentPeer peer = this.peer;
            if (peer != null) {
                peer.setFont(f);
            }
        }
!!!6114690.java!!!	removeNotify() : void
        synchronized (getTreeLock()) {
            MenuComponentPeer p = this.peer;
            if (p != null) {
                Toolkit.getEventQueue().removeSourceEvents(this, true);
                this.peer = null;
                p.dispose();
            }
        }
!!!6114818.java!!!	postEvent(inout evt : Event) : boolean
        MenuContainer parent = this.parent;
        if (parent != null) {
            parent.postEvent(evt);
        }
        return false;
!!!6114946.java!!!	dispatchEvent(inout e : AWTEvent) : void
        dispatchEventImpl(e);
!!!6115074.java!!!	dispatchEventImpl(inout e : AWTEvent) : void
        EventQueue.setCurrentEventAndMostRecentTime(e);

        Toolkit.getDefaultToolkit().notifyAWTEventListeners(e);

        if (newEventsOnly ||
            (parent != null && parent instanceof MenuComponent &&
             ((MenuComponent)parent).newEventsOnly)) {
            if (eventEnabled(e)) {
                processEvent(e);
            } else if (e instanceof ActionEvent && parent != null) {
                e.setSource(parent);
                ((MenuComponent)parent).dispatchEvent(e);
            }

        } else { // backward compatibility
            Event olde = e.convertToOld();
            if (olde != null) {
                postEvent(olde);
            }
        }
!!!6115202.java!!!	eventEnabled(inout e : AWTEvent) : boolean
        return false;
!!!6115458.java!!!	paramString() : String
        String thisName = getName();
        return (thisName != null? thisName : "");
!!!6115586.java!!!	toString() : String
        return getClass().getName() + "[" + paramString() + "]";
!!!6115714.java!!!	getTreeLock() : Object
        return Component.LOCK;
!!!6115842.java!!!	readObject(inout s : ObjectInputStream) : void
        GraphicsEnvironment.checkHeadless();

        acc = AccessController.getContext();

        s.defaultReadObject();

        appContext = AppContext.getAppContext();
!!!6116098.java!!!	getAccessibleContext() : AccessibleContext
        return accessibleContext;
!!!6122114.java!!!	getAccessibleIndexInParent() : int
        MenuContainer localParent = parent;
        if (!(localParent instanceof MenuComponent)) {
            // MenuComponents only have accessible index when inside MenuComponents
            return -1;
        }
        MenuComponent localParentMenu = (MenuComponent)localParent;
        return localParentMenu.getAccessibleChildIndex(this);
!!!6122242.java!!!	getAccessibleChildIndex(inout child : MenuComponent) : int
        return -1; // Overridden in subclasses.
!!!6122370.java!!!	getAccessibleStateSet() : AccessibleStateSet
        AccessibleStateSet states = new AccessibleStateSet();
        return states;
