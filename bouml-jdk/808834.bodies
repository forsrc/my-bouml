class WalkingIterator
!!!5857410.java!!!	WalkingIterator(inout compiler : Compiler, in opPos : int, in analysis : int, inout shouldLoadWalkers : boolean)
    super(compiler, opPos, analysis, shouldLoadWalkers);

    int firstStepPos = OpMap.getFirstChildPos(opPos);

    if (shouldLoadWalkers)
    {
      m_firstWalker = WalkerFactory.loadWalkers(this, compiler, firstStepPos, 0);
      m_lastUsedWalker = m_firstWalker;
    }
!!!5857538.java!!!	WalkingIterator(inout nscontext : PrefixResolver)

    super(nscontext);
!!!5857666.java!!!	getAnalysisBits() : int
    int bits = 0;
    if (null != m_firstWalker)
    {
      AxesWalker walker = m_firstWalker;

      while (null != walker)
      {
        int bit = walker.getAnalysisBits();
        bits |= bit;
        walker = walker.getNextWalker();
      }
    }
    return bits;
!!!5857794.java!!!	clone() : Object

    WalkingIterator clone = (WalkingIterator) super.clone();

    //    clone.m_varStackPos = this.m_varStackPos;
    //    clone.m_varStackContext = this.m_varStackContext;
    if (null != m_firstWalker)
    {
      clone.m_firstWalker = m_firstWalker.cloneDeep(clone, null);
    }

    return clone;
!!!5857922.java!!!	reset() : void

    super.reset();

    if (null != m_firstWalker)
    {
      m_lastUsedWalker = m_firstWalker;

      m_firstWalker.setRoot(m_context);
    }

!!!5858050.java!!!	setRoot(in context : int, inout environment : Object) : void

    super.setRoot(context, environment);

    if(null != m_firstWalker)
    {
      m_firstWalker.setRoot(context);
      m_lastUsedWalker = m_firstWalker;
    }
!!!5858178.java!!!	nextNode() : int
        if(m_foundLast)
                return DTM.NULL;

    // If the variable stack position is not -1, we'll have to
    // set our position in the variable stack, so our variable access
    // will be correct.  Iterators that are at the top level of the
    // expression need to reset the variable stack, while iterators
    // in predicates do not need to, and should not, since their execution
    // may be much later than top-level iterators.
    // m_varStackPos is set in setRoot, which is called
    // from the execute method.
    if (-1 == m_stackFrame)
    {
      return returnNextNode(m_firstWalker.nextNode());
    }
    else
    {
      VariableStack vars = m_execContext.getVarStack();

      // These three statements need to be combined into one operation.
      int savedStart = vars.getStackFrame();

      vars.setStackFrame(m_stackFrame);

      int n = returnNextNode(m_firstWalker.nextNode());

      // These two statements need to be combined into one operation.
      vars.setStackFrame(savedStart);

      return n;
    }
!!!5858306.java!!!	getFirstWalker() : AxesWalker
    return m_firstWalker;
!!!5858434.java!!!	setFirstWalker(inout walker : AxesWalker) : void
    m_firstWalker = walker;
!!!5858562.java!!!	setLastUsedWalker(inout walker : AxesWalker) : void
    m_lastUsedWalker = walker;
!!!5858690.java!!!	getLastUsedWalker() : AxesWalker
    return m_lastUsedWalker;
!!!5858818.java!!!	detach() : void
    if(m_allowDetach)
    {
                AxesWalker walker = m_firstWalker;
            while (null != walker)
            {
              walker.detach();
              walker = walker.getNextWalker();
            }

            m_lastUsedWalker = null;

            // Always call the superclass detach last!
            super.detach();
    }
!!!5858946.java!!!	fixupVariables(inout vars : Vector, in globalsSize : int) : void
    m_predicateIndex = -1;

    AxesWalker walker = m_firstWalker;

    while (null != walker)
    {
      walker.fixupVariables(vars, globalsSize);
      walker = walker.getNextWalker();
    }
!!!5859074.java!!!	callVisitors(inout owner : ExpressionOwner, inout visitor : XPathVisitor) : void
                if(visitor.visitLocationPath(owner, this))
                {
                        if(null != m_firstWalker)
                        {
                                m_firstWalker.callVisitors(this, visitor);
                        }
                }
!!!5859202.java!!!	getExpression() : Expression
    return m_firstWalker;
!!!5859330.java!!!	setExpression(inout exp : Expression) : void
        exp.exprSetParent(this);
        m_firstWalker = (AxesWalker)exp;
!!!5859458.java!!!	deepEquals(inout expr : Expression) : boolean
      if (!super.deepEquals(expr))
                return false;

      AxesWalker walker1 = m_firstWalker;
      AxesWalker walker2 = ((WalkingIterator)expr).m_firstWalker;
      while ((null != walker1) && (null != walker2))
      {
        if(!walker1.deepEquals(walker2))
                return false;
        walker1 = walker1.getNextWalker();
        walker2 = walker2.getNextWalker();
      }

      if((null != walker1) || (null != walker2))
        return false;

      return true;
