class EncryptedKeyResolver
!!!5418114.java!!!	EncryptedKeyResolver(inout algorithm : String)
        kek = null;
        this.algorithm = algorithm;
!!!5418242.java!!!	EncryptedKeyResolver(inout algorithm : String, inout kek : Key)
        this.algorithm = algorithm;
        this.kek = kek;
!!!5418370.java!!!	registerInternalKeyResolver(inout realKeyResolver : KeyResolverSpi) : void
        if (internalKeyResolvers == null) {
            internalKeyResolvers = new ArrayList<KeyResolverSpi>();
        }
        internalKeyResolvers.add(realKeyResolver);
!!!5418498.java!!!	engineLookupAndResolvePublicKey(inout element : Element, inout BaseURI : String, inout storage : StorageResolver) : PublicKey
        return null;
!!!5418626.java!!!	engineLookupResolveX509Certificate(inout element : Element, inout BaseURI : String, inout storage : StorageResolver) : X509Certificate
        return null;
!!!5418754.java!!!	engineLookupAndResolveSecretKey(inout element : Element, inout BaseURI : String, inout storage : StorageResolver) : javax.crypto.SecretKey
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE, "EncryptedKeyResolver - Can I resolve " + element.getTagName());
        }

        if (element == null) {
            return null;
        }

        SecretKey key = null;
        boolean isEncryptedKey =
            XMLUtils.elementIsInEncryptionSpace(element, EncryptionConstants._TAG_ENCRYPTEDKEY);
        if (isEncryptedKey) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "Passed an Encrypted Key");
            }
            try {
                XMLCipher cipher = XMLCipher.getInstance();
                cipher.init(XMLCipher.UNWRAP_MODE, kek);
                if (internalKeyResolvers != null) {
                    int size = internalKeyResolvers.size();
                    for (int i = 0; i < size; i++) {
                        cipher.registerInternalKeyResolver(internalKeyResolvers.get(i));
                    }
                }
                EncryptedKey ek = cipher.loadEncryptedKey(element);
                key = (SecretKey) cipher.decryptKey(ek, algorithm);
            } catch (XMLEncryptionException e) {
                if (log.isLoggable(java.util.logging.Level.FINE)) {
                    log.log(java.util.logging.Level.FINE, e.getMessage(), e);
                }
            }
        }

        return key;
