class CopiesList
!!!8756738.java!!!	CopiesList(in n : int, inout e : E)
            assert n >= 0;
            this.n = n;
            element = e;
!!!8756866.java!!!	size() : int
            return n;
!!!8756994.java!!!	contains(inout obj : Object) : boolean
            return n != 0 && eq(obj, element);
!!!8757122.java!!!	indexOf(inout o : Object) : int
            return contains(o) ? 0 : -1;
!!!8757250.java!!!	lastIndexOf(inout o : Object) : int
            return contains(o) ? n - 1 : -1;
!!!8757378.java!!!	get(in index : int) : E
            if (index < 0 || index >= n)
                throw new IndexOutOfBoundsException("Index: "+index+
                                                    ", Size: "+n);
            return element;
!!!8757506.java!!!	toArray() : Object
            final Object[] a = new Object[n];
            if (element != null)
                Arrays.fill(a, 0, n, element);
            return a;
!!!8757634.java!!!	toArray(inout a : T [[]]) : T
            final int n = this.n;
            if (a.length < n) {
                a = (T[])java.lang.reflect.Array
                    .newInstance(a.getClass().getComponentType(), n);
                if (element != null)
                    Arrays.fill(a, 0, n, element);
            } else {
                Arrays.fill(a, 0, n, element);
                if (a.length > n)
                    a[n] = null;
            }
            return a;
!!!8757762.java!!!	subList(in fromIndex : int, in toIndex : int) : List
            if (fromIndex < 0)
                throw new IndexOutOfBoundsException("fromIndex = " + fromIndex);
            if (toIndex > n)
                throw new IndexOutOfBoundsException("toIndex = " + toIndex);
            if (fromIndex > toIndex)
                throw new IllegalArgumentException("fromIndex(" + fromIndex +
                                                   ") > toIndex(" + toIndex + ")");
            return new CopiesList<>(toIndex - fromIndex, element);
!!!8757890.java!!!	stream() : Stream
            return IntStream.range(0, n).mapToObj(i -> element);
!!!8758018.java!!!	parallelStream() : Stream
            return IntStream.range(0, n).parallel().mapToObj(i -> element);
!!!8758146.java!!!	spliterator() : Spliterator
            return stream().spliterator();
