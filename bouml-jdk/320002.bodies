class Package
!!!7055874.java!!!	getName() : String
        return pkgName;
!!!7056002.java!!!	getSpecificationTitle() : String
        return specTitle;
!!!7056130.java!!!	getSpecificationVersion() : String
        return specVersion;
!!!7056258.java!!!	getSpecificationVendor() : String
        return specVendor;
!!!7056386.java!!!	getImplementationTitle() : String
        return implTitle;
!!!7056514.java!!!	getImplementationVersion() : String
        return implVersion;
!!!7056642.java!!!	getImplementationVendor() : String
        return implVendor;
!!!7056770.java!!!	isSealed() : boolean
        return sealBase != null;
!!!7056898.java!!!	isSealed(inout url : URL) : boolean
        return url.equals(sealBase);
!!!7057026.java!!!	isCompatibleWith(inout desired : String) : boolean
        if (specVersion == null || specVersion.length() < 1) {
            throw new NumberFormatException("Empty version string");
        }

        String [] sa = specVersion.split("\\.", -1);
        int [] si = new int[sa.length];
        for (int i = 0; i < sa.length; i++) {
            si[i] = Integer.parseInt(sa[i]);
            if (si[i] < 0)
                throw NumberFormatException.forInputString("" + si[i]);
        }

        String [] da = desired.split("\\.", -1);
        int [] di = new int[da.length];
        for (int i = 0; i < da.length; i++) {
            di[i] = Integer.parseInt(da[i]);
            if (di[i] < 0)
                throw NumberFormatException.forInputString("" + di[i]);
        }

        int len = Math.max(di.length, si.length);
        for (int i = 0; i < len; i++) {
            int d = (i < di.length ? di[i] : 0);
            int s = (i < si.length ? si[i] : 0);
            if (s < d)
                return false;
            if (s > d)
                return true;
        }
        return true;
!!!7057154.java!!!	getPackage(inout name : String) : Package
        ClassLoader l = ClassLoader.getClassLoader(Reflection.getCallerClass());
        if (l != null) {
            return l.getPackage(name);
        } else {
            return getSystemPackage(name);
        }
!!!7057282.java!!!	getPackages() : Package
        ClassLoader l = ClassLoader.getClassLoader(Reflection.getCallerClass());
        if (l != null) {
            return l.getPackages();
        } else {
            return getSystemPackages();
        }
!!!7057410.java!!!	getPackage(inout c : Class) : Package
        String name = c.getName();
        int i = name.lastIndexOf('.');
        if (i != -1) {
            name = name.substring(0, i);
            ClassLoader cl = c.getClassLoader();
            if (cl != null) {
                return cl.getPackage(name);
            } else {
                return getSystemPackage(name);
            }
        } else {
            return null;
        }
!!!7057538.java!!!	hashCode() : int
        return pkgName.hashCode();
!!!7057666.java!!!	toString() : String
        String spec = specTitle;
        String ver =  specVersion;
        if (spec != null && spec.length() > 0)
            spec = ", " + spec;
        else
            spec = "";
        if (ver != null && ver.length() > 0)
            ver = ", version " + ver;
        else
            ver = "";
        return "package " + pkgName + spec + ver;
!!!7057794.java!!!	getPackageInfo() : Class
        if (packageInfo == null) {
            try {
                packageInfo = Class.forName(pkgName + ".package-info", false, loader);
            } catch (ClassNotFoundException ex) {
                // store a proxy for the package info that has no annotations
                class PackageInfoProxy {}
                packageInfo = PackageInfoProxy.class;
            }
        }
        return packageInfo;
!!!7057922.java!!!	getAnnotation(inout annotationClass : Class) : A
        return getPackageInfo().getAnnotation(annotationClass);
!!!7058050.java!!!	isAnnotationPresent(inout annotationClass : Class) : boolean
        return AnnotatedElement.super.isAnnotationPresent(annotationClass);
!!!7058178.java!!!	getAnnotationsByType(inout annotationClass : Class) : A
        return getPackageInfo().getAnnotationsByType(annotationClass);
!!!7058306.java!!!	getAnnotations() : Annotation
        return getPackageInfo().getAnnotations();
!!!7058434.java!!!	getDeclaredAnnotation(inout annotationClass : Class) : A
        return getPackageInfo().getDeclaredAnnotation(annotationClass);
!!!7058562.java!!!	getDeclaredAnnotationsByType(inout annotationClass : Class) : A
        return getPackageInfo().getDeclaredAnnotationsByType(annotationClass);
!!!7058690.java!!!	getDeclaredAnnotations() : Annotation
        return getPackageInfo().getDeclaredAnnotations();
!!!7058818.java!!!	Package(inout name : String, inout spectitle : String, inout specversion : String, inout specvendor : String, inout impltitle : String, inout implversion : String, inout implvendor : String, inout sealbase : URL, inout loader : ClassLoader)
        pkgName = name;
        implTitle = impltitle;
        implVersion = implversion;
        implVendor = implvendor;
        specTitle = spectitle;
        specVersion = specversion;
        specVendor = specvendor;
        sealBase = sealbase;
        this.loader = loader;
!!!7058946.java!!!	Package(inout name : String, inout man : Manifest, inout url : URL, inout loader : ClassLoader)
        String path = name.replace('.', '/').concat("/");
        String sealed = null;
        String specTitle= null;
        String specVersion= null;
        String specVendor= null;
        String implTitle= null;
        String implVersion= null;
        String implVendor= null;
        URL sealBase= null;
        Attributes attr = man.getAttributes(path);
        if (attr != null) {
            specTitle   = attr.getValue(Name.SPECIFICATION_TITLE);
            specVersion = attr.getValue(Name.SPECIFICATION_VERSION);
            specVendor  = attr.getValue(Name.SPECIFICATION_VENDOR);
            implTitle   = attr.getValue(Name.IMPLEMENTATION_TITLE);
            implVersion = attr.getValue(Name.IMPLEMENTATION_VERSION);
            implVendor  = attr.getValue(Name.IMPLEMENTATION_VENDOR);
            sealed      = attr.getValue(Name.SEALED);
        }
        attr = man.getMainAttributes();
        if (attr != null) {
            if (specTitle == null) {
                specTitle = attr.getValue(Name.SPECIFICATION_TITLE);
            }
            if (specVersion == null) {
                specVersion = attr.getValue(Name.SPECIFICATION_VERSION);
            }
            if (specVendor == null) {
                specVendor = attr.getValue(Name.SPECIFICATION_VENDOR);
            }
            if (implTitle == null) {
                implTitle = attr.getValue(Name.IMPLEMENTATION_TITLE);
            }
            if (implVersion == null) {
                implVersion = attr.getValue(Name.IMPLEMENTATION_VERSION);
            }
            if (implVendor == null) {
                implVendor = attr.getValue(Name.IMPLEMENTATION_VENDOR);
            }
            if (sealed == null) {
                sealed = attr.getValue(Name.SEALED);
            }
        }
        if ("true".equalsIgnoreCase(sealed)) {
            sealBase = url;
        }
        pkgName = name;
        this.specTitle = specTitle;
        this.specVersion = specVersion;
        this.specVendor = specVendor;
        this.implTitle = implTitle;
        this.implVersion = implVersion;
        this.implVendor = implVendor;
        this.sealBase = sealBase;
        this.loader = loader;
!!!7059074.java!!!	getSystemPackage(inout name : String) : Package
        synchronized (pkgs) {
            Package pkg = pkgs.get(name);
            if (pkg == null) {
                name = name.replace('.', '/').concat("/");
                String fn = getSystemPackage0(name);
                if (fn != null) {
                    pkg = defineSystemPackage(name, fn);
                }
            }
            return pkg;
        }
!!!7059202.java!!!	getSystemPackages() : Package
        // First, update the system package map with new package names
        String[] names = getSystemPackages0();
        synchronized (pkgs) {
            for (int i = 0; i < names.length; i++) {
                defineSystemPackage(names[i], getSystemPackage0(names[i]));
            }
            return pkgs.values().toArray(new Package[pkgs.size()]);
        }
!!!7059330.java!!!	defineSystemPackage(in iname : String, in fn : String) : Package
        return AccessController.doPrivileged(new PrivilegedAction<Package>() {
            public Package run() {
                String name = iname;
                // Get the cached code source url for the file name
                URL url = urls.get(fn);
                if (url == null) {
                    // URL not found, so create one
                    File file = new File(fn);
                    try {
                        url = ParseUtil.fileToEncodedURL(file);
                    } catch (MalformedURLException e) {
                    }
                    if (url != null) {
                        urls.put(fn, url);
                        // If loading a JAR file, then also cache the manifest
                        if (file.isFile()) {
                            mans.put(fn, loadManifest(fn));
                        }
                    }
                }
                // Convert to "."-separated package name
                name = name.substring(0, name.length() - 1).replace('/', '.');
                Package pkg;
                Manifest man = mans.get(fn);
                if (man != null) {
                    pkg = new Package(name, man, url, null);
                } else {
                    pkg = new Package(name, null, null, null,
                                      null, null, null, null, null);
                }
                pkgs.put(name, pkg);
                return pkg;
            }
        });
!!!7059458.java!!!	loadManifest(inout fn : String) : Manifest
        try (FileInputStream fis = new FileInputStream(fn);
             JarInputStream jis = new JarInputStream(fis, false))
        {
            return jis.getManifest();
        } catch (IOException e) {
            return null;
        }
