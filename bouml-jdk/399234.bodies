class JDesktopPane
!!!10574978.java!!!	JDesktopPane()
        setUIProperty("opaque", Boolean.TRUE);
        setFocusCycleRoot(true);

        setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() {
            public Component getDefaultComponent(Container c) {
                JInternalFrame jifArray[] = getAllFrames();
                Component comp = null;
                for (JInternalFrame jif : jifArray) {
                    comp = jif.getFocusTraversalPolicy().getDefaultComponent(jif);
                    if (comp != null) {
                        break;
                    }
                }
                return comp;
            }
        });
        updateUI();
!!!10575106.java!!!	getUI() : DesktopPaneUI
        return (DesktopPaneUI)ui;
!!!10575234.java!!!	setUI(inout ui : DesktopPaneUI) : void
        super.setUI(ui);
!!!10575362.java!!!	setDragMode(in dragMode : int) : void
        int oldDragMode = this.dragMode;
        this.dragMode = dragMode;
        firePropertyChange("dragMode", oldDragMode, this.dragMode);
        dragModeSet = true;
!!!10575490.java!!!	getDragMode() : int
         return dragMode;
!!!10575618.java!!!	getDesktopManager() : DesktopManager
        return desktopManager;
!!!10575746.java!!!	setDesktopManager(inout d : DesktopManager) : void
        DesktopManager oldValue = desktopManager;
        desktopManager = d;
        firePropertyChange("desktopManager", oldValue, desktopManager);
!!!10575874.java!!!	updateUI() : void
        setUI((DesktopPaneUI)UIManager.getUI(this));
!!!10576002.java!!!	getUIClassID() : String
        return uiClassID;
!!!10576130.java!!!	getAllFrames() : JInternalFrame
        return getAllFrames(this).toArray(new JInternalFrame[0]);
!!!10576258.java!!!	getAllFrames(inout parent : Container) : Collection
        int i, count;
        Collection<JInternalFrame> results = new LinkedHashSet<>();
        count = parent.getComponentCount();
        for (i = 0; i < count; i++) {
            Component next = parent.getComponent(i);
            if (next instanceof JInternalFrame) {
                results.add((JInternalFrame) next);
            } else if (next instanceof JInternalFrame.JDesktopIcon) {
                JInternalFrame tmp = ((JInternalFrame.JDesktopIcon) next).getInternalFrame();
                if (tmp != null) {
                    results.add(tmp);
                }
            } else if (next instanceof Container) {
                results.addAll(getAllFrames((Container) next));
            }
        }
        return results;
!!!10576386.java!!!	getSelectedFrame() : JInternalFrame
      return selectedFrame;
!!!10576514.java!!!	setSelectedFrame(inout f : JInternalFrame) : void
      selectedFrame = f;
!!!10576642.java!!!	getAllFramesInLayer(in layer : int) : JInternalFrame
        Collection<JInternalFrame> allFrames = getAllFrames(this);
        Iterator<JInternalFrame> iterator = allFrames.iterator();
        while (iterator.hasNext()) {
            if (iterator.next().getLayer() != layer) {
                iterator.remove();
            }
        }
        return allFrames.toArray(new JInternalFrame[0]);
!!!10576770.java!!!	getFrames() : List
        Component c;
        Set<ComponentPosition> set = new TreeSet<ComponentPosition>();
        for (int i = 0; i < getComponentCount(); i++) {
            c = getComponent(i);
            if (c instanceof JInternalFrame) {
                set.add(new ComponentPosition((JInternalFrame)c, getLayer(c),
                    i));
            }
            else if (c instanceof JInternalFrame.JDesktopIcon)  {
                c = ((JInternalFrame.JDesktopIcon)c).getInternalFrame();
                set.add(new ComponentPosition((JInternalFrame)c, getLayer(c),
                    i));
            }
        }
        List<JInternalFrame> frames = new ArrayList<JInternalFrame>(
                set.size());
        for (ComponentPosition position : set) {
            frames.add(position.component);
        }
        return frames;
!!!10577154.java!!!	getNextFrame(inout f : JInternalFrame, inout forward : boolean) : JInternalFrame
        verifyFramesCache();
        if (f == null) {
            return getTopInternalFrame();
        }
        int i = framesCache.indexOf(f);
        if (i == -1 || framesCache.size() == 1) {
            /* error */
            return null;
        }
        if (forward) {
            // navigate to the next frame
            if (++i == framesCache.size()) {
                /* wrap */
                i = 0;
            }
        }
        else {
            // navigate to the previous frame
            if (--i == -1) {
                /* wrap */
                i = framesCache.size() - 1;
            }
        }
        return framesCache.get(i);
!!!10577282.java!!!	getNextFrame(inout f : JInternalFrame) : JInternalFrame
        return getNextFrame(f, true);
!!!10577410.java!!!	getTopInternalFrame() : JInternalFrame
        if (framesCache.size() == 0) {
            return null;
        }
        return framesCache.get(0);
!!!10577538.java!!!	updateFramesCache() : void
        framesCache = getFrames();
!!!10577666.java!!!	verifyFramesCache() : void
        // If framesCache is dirty, then recreate it.
        if (componentOrderChanged) {
            componentOrderChanged = false;
            updateFramesCache();
        }
!!!10577794.java!!!	remove(inout comp : Component) : void
        super.remove(comp);
        updateFramesCache();
!!!10577922.java!!!	selectFrame(inout forward : boolean) : JInternalFrame
        JInternalFrame selectedFrame = getSelectedFrame();
        JInternalFrame frameToSelect = getNextFrame(selectedFrame, forward);
        if (frameToSelect == null) {
            return null;
        }
        // Maintain navigation traversal order until an
        // external stack change, such as a click on a frame.
        setComponentOrderCheckingEnabled(false);
        if (forward && selectedFrame != null) {
            selectedFrame.moveToBack();  // For Windows MDI fidelity.
        }
        try { frameToSelect.setSelected(true);
        } catch (PropertyVetoException pve) {}
        setComponentOrderCheckingEnabled(true);
        return frameToSelect;
!!!10578050.java!!!	setComponentOrderCheckingEnabled(inout enable : boolean) : void
        componentOrderCheckingEnabled = enable;
!!!10578178.java!!!	addImpl(inout comp : Component, inout constraints : Object, in index : int) : void
        super.addImpl(comp, constraints, index);
        if (componentOrderCheckingEnabled) {
            if (comp instanceof JInternalFrame ||
                comp instanceof JInternalFrame.JDesktopIcon) {
                componentOrderChanged = true;
            }
        }
!!!10578306.java!!!	remove(in index : int) : void
        if (componentOrderCheckingEnabled) {
            Component comp = getComponent(index);
            if (comp instanceof JInternalFrame ||
                comp instanceof JInternalFrame.JDesktopIcon) {
                componentOrderChanged = true;
            }
        }
        super.remove(index);
!!!10578434.java!!!	removeAll() : void
        if (componentOrderCheckingEnabled) {
            int count = getComponentCount();
            for (int i = 0; i < count; i++) {
                Component comp = getComponent(i);
                if (comp instanceof JInternalFrame ||
                    comp instanceof JInternalFrame.JDesktopIcon) {
                    componentOrderChanged = true;
                    break;
                }
            }
        }
        super.removeAll();
!!!10578562.java!!!	setComponentZOrder(inout comp : Component, in index : int) : void
        super.setComponentZOrder(comp, index);
        if (componentOrderCheckingEnabled) {
            if (comp instanceof JInternalFrame ||
                comp instanceof JInternalFrame.JDesktopIcon) {
                componentOrderChanged = true;
            }
        }
!!!10578690.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
        if (getUIClassID().equals(uiClassID)) {
            byte count = JComponent.getWriteObjCounter(this);
            JComponent.setWriteObjCounter(this, --count);
            if (count == 0 && ui != null) {
                ui.installUI(this);
            }
        }
!!!10578818.java!!!	setUIProperty(inout propertyName : String, inout value : Object) : void
        if (propertyName == "dragMode") {
            if (!dragModeSet) {
                setDragMode(((Integer)value).intValue());
                dragModeSet = false;
            }
        } else {
            super.setUIProperty(propertyName, value);
        }
!!!10578946.java!!!	paramString() : String
        String desktopManagerString = (desktopManager != null ?
                                       desktopManager.toString() : "");

        return super.paramString() +
        ",desktopManager=" + desktopManagerString;
!!!10579074.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJDesktopPane();
        }
        return accessibleContext;
