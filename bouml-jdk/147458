format 222
"event" // jdk1.8::javax::imageio::event
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/imageio/event/"
  java_package "javax.imageio.event"
  classview 143874 "event"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 313090 "IIOReadWarningListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface used by <code>ImageReader</code> implementations to
notify callers of their image and thumbnail reading methods of
warnings (non-fatal errors).  Fatal errors cause the relevant
read method to throw an <code>IIOException</code>.

<p> Localization is handled by associating a <code>Locale</code>
with each <code>IIOReadWarningListener</code> as it is registered
with an <code>ImageReader</code>.  It is up to the
<code>ImageReader</code> to provide localized messages.

@see javax.imageio.ImageReader#addIIOReadWarningListener
@see javax.imageio.ImageReader#removeIIOReadWarningListener

"
      classrelation 3758466 // <generalisation>
	relation 3758466 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3758466 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 9663874 "warningOccurred"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 312706 // ImageReader
	  param inout name "warning" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports the occurrence of a non-fatal error in decoding.  Decoding
will continue following the call to this method.  The application
may choose to display a dialog, print the warning to the console,
ignore the warning, or take any other action it chooses.

@param source the <code>ImageReader</code> object calling this method.
@param warning a <code>String</code> containing the warning.
"
      end
    end

    class 313218 "IIOReadProgressListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface used by <code>ImageReader</code> implementations to
notify callers of their image and thumbnail reading methods of
progress.

<p> This interface receives general indications of decoding
progress (via the <code>imageProgress</code> and
<code>thumbnailProgress</code> methods), and events indicating when
an entire image has been updated (via the
<code>imageStarted</code>, <code>imageComplete</code>,
<code>thumbnailStarted</code> and <code>thumbnailComplete</code>
methods).  Applications that wish to be informed of pixel updates
as they happen (for example, during progressive decoding), should
provide an <code>IIOReadUpdateListener</code>.

@see IIOReadUpdateListener
@see javax.imageio.ImageReader#addIIOReadProgressListener
@see javax.imageio.ImageReader#removeIIOReadProgressListener

"
      classrelation 525314 // <generalisation>
	relation 525314 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 525314 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 1681154 "sequenceStarted"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 312706 // ImageReader
	  param in name "minIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a sequence of read operations is beginning.
<code>ImageReader</code> implementations are required to call
this method exactly once from their
<code>readAll(Iterator)</code> method.

@param source the <code>ImageReader</code> object calling this method.
@param minIndex the index of the first image to be read.
"
      end

      operation 1681282 "sequenceComplete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 312706 // ImageReader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a sequence of read operations has completed.
<code>ImageReader</code> implementations are required to call
this method exactly once from their
<code>readAll(Iterator)</code> method.

@param source the <code>ImageReader</code> object calling this method.
"
      end

      operation 1681410 "imageStarted"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 312706 // ImageReader
	  param in name "imageIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that an image read operation is beginning.  All
<code>ImageReader</code> implementations are required to call
this method exactly once when beginning an image read
operation.

@param source the <code>ImageReader</code> object calling this method.
@param imageIndex the index of the image being read within its
containing input file or stream.
"
      end

      operation 1681538 "imageProgress"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 312706 // ImageReader
	  param in name "percentageDone" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports the approximate degree of completion of the current
<code>read</code> call of the associated
<code>ImageReader</code>.

<p> The degree of completion is expressed as a percentage
varying from <code>0.0F</code> to <code>100.0F</code>.  The
percentage should ideally be calculated in terms of the
remaining time to completion, but it is usually more practical
to use a more well-defined metric such as pixels decoded or
portion of input stream consumed.  In any case, a sequence of
calls to this method during a given read operation should
supply a monotonically increasing sequence of percentage
values.  It is not necessary to supply the exact values
<code>0</code> and <code>100</code>, as these may be inferred
by the callee from other methods.

<p> Each particular <code>ImageReader</code> implementation may
call this method at whatever frequency it desires.  A rule of
thumb is to call it around each 5 percent mark.

@param source the <code>ImageReader</code> object calling this method.
@param percentageDone the approximate percentage of decoding that
has been completed.
"
      end

      operation 1681666 "imageComplete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 312706 // ImageReader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that the current image read operation has completed.
All <code>ImageReader</code> implementations are required to
call this method exactly once upon completion of each image
read operation.

@param source the <code>ImageReader</code> object calling this
method.
"
      end

      operation 1681794 "thumbnailStarted"
	public explicit_return_type "void"
	nparams 3
	  param inout name "source" type class_ref 312706 // ImageReader
	  param in name "imageIndex" explicit_type "int"
	  param in name "thumbnailIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a thumbnail read operation is beginning.  All
<code>ImageReader</code> implementations are required to call
this method exactly once when beginning a thumbnail read
operation.

@param source the <code>ImageReader</code> object calling this method.
@param imageIndex the index of the image being read within its
containing input file or stream.
@param thumbnailIndex the index of the thumbnail being read.
"
      end

      operation 1681922 "thumbnailProgress"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 312706 // ImageReader
	  param in name "percentageDone" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports the approximate degree of completion of the current
<code>getThumbnail</code> call within the associated
<code>ImageReader</code>.  The semantics are identical to those
of <code>imageProgress</code>.

@param source the <code>ImageReader</code> object calling this method.
@param percentageDone the approximate percentage of decoding that
has been completed.
"
      end

      operation 1682050 "thumbnailComplete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 312706 // ImageReader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a thumbnail read operation has completed.  All
<code>ImageReader</code> implementations are required to call
this method exactly once upon completion of each thumbnail read
operation.

@param source the <code>ImageReader</code> object calling this
method.
"
      end

      operation 1682178 "readAborted"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 312706 // ImageReader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a read has been aborted via the reader's
<code>abort</code> method.  No further notifications will be
given.

@param source the <code>ImageReader</code> object calling this
method.
"
      end
    end

    class 313346 "IIOReadUpdateListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface used by <code>ImageReader</code> implementations to
notify callers of their image and thumbnail reading methods of
pixel updates.

@see javax.imageio.ImageReader#addIIOReadUpdateListener
@see javax.imageio.ImageReader#removeIIOReadUpdateListener

"
      classrelation 3758338 // <generalisation>
	relation 3758338 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3758338 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 9663106 "passStarted"
	public explicit_return_type "void"
	nparams 10
	  param inout name "source" type class_ref 312706 // ImageReader
	  param inout name "theImage" type class_ref 311554 // BufferedImage
	  param in name "pass" explicit_type "int"
	  param in name "minPass" explicit_type "int"
	  param in name "maxPass" explicit_type "int"
	  param in name "minX" explicit_type "int"
	  param in name "minY" explicit_type "int"
	  param in name "periodX" explicit_type "int"
	  param in name "periodY" explicit_type "int"
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9}[] ${p9}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that the current read operation is about to begin a
progressive pass.  Readers of formats that support progressive
encoding should use this to notify clients when each pass is
completed when reading a progressively encoded image.

<p> An estimate of the area that will be updated by the pass is
indicated by the <code>minX</code>, <code>minY</code>,
<code>width</code>, and <code>height</code> parameters.  If the
pass is interlaced, that is, it only updates selected rows or
columns, the <code>periodX</code> and <code>periodY</code>
parameters will indicate the degree of subsampling.  The set of
bands that may be affected is indicated by the value of
<code>bands</code>.

@param source the <code>ImageReader</code> object calling this
method.
@param theImage the <code>BufferedImage</code> being updated.
@param pass the number of the pass that is about to begin,
starting with 0.
@param minPass the index of the first pass that will be decoded.
@param maxPass the index of the last pass that will be decoded.
@param minX the X coordinate of the leftmost updated column
of pixels.
@param minY the Y coordinate of the uppermost updated row
of pixels.
@param periodX the horizontal spacing between updated pixels;
a value of 1 means no gaps.
@param periodY the vertical spacing between updated pixels;
a value of 1 means no gaps.
@param bands an array of <code>int</code>s indicating the the
set bands that may be updated.
"
      end

      operation 9663234 "imageUpdate"
	public explicit_return_type "void"
	nparams 9
	  param inout name "source" type class_ref 312706 // ImageReader
	  param inout name "theImage" type class_ref 311554 // BufferedImage
	  param in name "minX" explicit_type "int"
	  param in name "minY" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "periodX" explicit_type "int"
	  param in name "periodY" explicit_type "int"
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8}[] ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a given region of the image has been updated.
The application might choose to redisplay the specified area,
for example, in order to provide a progressive display effect,
or perform other incremental processing.

<p> Note that different image format readers may produce
decoded pixels in a variety of different orders.  Many readers
will produce pixels in a simple top-to-bottom,
left-to-right-order, but others may use multiple passes of
interlacing, tiling, etc.  The sequence of updates may even
differ from call to call depending on network speeds, for
example.  A call to this method does not guarantee that all the
specified pixels have actually been updated, only that some
activity has taken place within some subregion of the one
specified.

<p> The particular <code>ImageReader</code> implementation may
choose how often to provide updates.  Each update specifies
that a given region of the image has been updated since the
last update.  A region is described by its spatial bounding box
(<code>minX</code>, <code>minY</code>, <code>width</code>, and
<code>height</code>); X and Y subsampling factors
(<code>periodX</code> and <code>periodY</code>); and a set of
updated bands (<code>bands</code>).  For example, the update:

<pre>
minX = 10
minY = 20
width = 3
height = 4
periodX = 2
periodY = 3
bands = { 1, 3 }
</pre>

would indicate that bands 1 and 3 of the following pixels were
updated:

<pre>
(10, 20) (12, 20) (14, 20)
(10, 23) (12, 23) (14, 23)
(10, 26) (12, 26) (14, 26)
(10, 29) (12, 29) (14, 29)
</pre>

@param source the <code>ImageReader</code> object calling this method.
@param theImage the <code>BufferedImage</code> being updated.
@param minX the X coordinate of the leftmost updated column
of pixels.
@param minY the Y coordinate of the uppermost updated row
of pixels.
@param width the number of updated pixels horizontally.
@param height the number of updated pixels vertically.
@param periodX the horizontal spacing between updated pixels;
a value of 1 means no gaps.
@param periodY the vertical spacing between updated pixels;
a value of 1 means no gaps.
@param bands an array of <code>int</code>s indicating which
bands are being updated.
"
      end

      operation 9663362 "passComplete"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 312706 // ImageReader
	  param inout name "theImage" type class_ref 311554 // BufferedImage
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that the current read operation has completed a
progressive pass.  Readers of formats that support
progressive encoding should use this to notify clients when
each pass is completed when reading a progressively
encoded image.

@param source the <code>ImageReader</code> object calling this
method.
@param theImage the <code>BufferedImage</code> being updated.

@see javax.imageio.ImageReadParam#setSourceProgressivePasses(int, int)
"
      end

      operation 9663490 "thumbnailPassStarted"
	public explicit_return_type "void"
	nparams 10
	  param inout name "source" type class_ref 312706 // ImageReader
	  param inout name "theThumbnail" type class_ref 311554 // BufferedImage
	  param in name "pass" explicit_type "int"
	  param in name "minPass" explicit_type "int"
	  param in name "maxPass" explicit_type "int"
	  param in name "minX" explicit_type "int"
	  param in name "minY" explicit_type "int"
	  param in name "periodX" explicit_type "int"
	  param in name "periodY" explicit_type "int"
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9}[] ${p9}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that the current thumbnail read operation is about to
begin a progressive pass.  Readers of formats that support
progressive encoding should use this to notify clients when
each pass is completed when reading a progressively encoded
thumbnail image.

@param source the <code>ImageReader</code> object calling this
method.
@param theThumbnail the <code>BufferedImage</code> thumbnail
being updated.
@param pass the number of the pass that is about to begin,
starting with 0.
@param minPass the index of the first pass that will be decoded.
@param maxPass the index of the last pass that will be decoded.
@param minX the X coordinate of the leftmost updated column
of pixels.
@param minY the Y coordinate of the uppermost updated row
of pixels.
@param periodX the horizontal spacing between updated pixels;
a value of 1 means no gaps.
@param periodY the vertical spacing between updated pixels;
a value of 1 means no gaps.
@param bands an array of <code>int</code>s indicating the the
set bands that may be updated.

@see #passStarted
"
      end

      operation 9663618 "thumbnailUpdate"
	public explicit_return_type "void"
	nparams 9
	  param inout name "source" type class_ref 312706 // ImageReader
	  param inout name "theThumbnail" type class_ref 311554 // BufferedImage
	  param in name "minX" explicit_type "int"
	  param in name "minY" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "periodX" explicit_type "int"
	  param in name "periodY" explicit_type "int"
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8}[] ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a given region of a thumbnail image has been updated.
The application might choose to redisplay the specified area,
for example, in order to provide a progressive display effect,
or perform other incremental processing.

@param source the <code>ImageReader</code> object calling this method.
@param theThumbnail the <code>BufferedImage</code> thumbnail
being updated.
@param minX the X coordinate of the leftmost updated column
of pixels.
@param minY the Y coordinate of the uppermost updated row
of pixels.
@param width the number of updated pixels horizontally.
@param height the number of updated pixels vertically.
@param periodX the horizontal spacing between updated pixels;
a value of 1 means no gaps.
@param periodY the vertical spacing between updated pixels;
a value of 1 means no gaps.
@param bands an array of <code>int</code>s indicating which
bands are being updated.

@see #imageUpdate
"
      end

      operation 9663746 "thumbnailPassComplete"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 312706 // ImageReader
	  param inout name "theThumbnail" type class_ref 311554 // BufferedImage
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that the current thumbnail read operation has completed
a progressive pass.  Readers of formats that support
progressive encoding should use this to notify clients when
each pass is completed when reading a progressively encoded
thumbnail image.

@param source the <code>ImageReader</code> object calling this
method.
@param theThumbnail the <code>BufferedImage</code> thumbnail
being updated.

@see #passComplete
"
      end
    end

    class 316546 "IIOWriteWarningListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface used by <code>ImageWriter</code> implementations to
notify callers of their image and thumbnail reading methods of
warnings (non-fatal errors).  Fatal errors cause the relevant
read method to throw an <code>IIOException</code>.

<p> Localization is handled by associating a <code>Locale</code>
with each <code>IIOWriteWarningListener</code> as it is registered
with an <code>ImageWriter</code>.  It is up to the
<code>ImageWriter</code> to provide localized messages.

@see javax.imageio.ImageWriter#addIIOWriteWarningListener
@see javax.imageio.ImageWriter#removeIIOWriteWarningListener

"
      classrelation 3758594 // <generalisation>
	relation 3758594 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3758594 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 9664002 "warningOccurred"
	public explicit_return_type "void"
	nparams 3
	  param inout name "source" type class_ref 316034 // ImageWriter
	  param in name "imageIndex" explicit_type "int"
	  param inout name "warning" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports the occurrence of a non-fatal error in encoding.  Encoding
will continue following the call to this method.  The application
may choose to display a dialog, print the warning to the console,
ignore the warning, or take any other action it chooses.

@param source the <code>ImageWriter</code> object calling this method.
@param imageIndex the index, starting with 0, of the image
generating the warning.
@param warning a <code>String</code> containing the warning.
"
      end
    end

    class 316674 "IIOWriteProgressListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface used by <code>ImageWriter</code> implementations to notify
callers of their image writing methods of progress.

@see javax.imageio.ImageWriter#write

"
      classrelation 530690 // <generalisation>
	relation 530690 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 530690 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 1699202 "imageStarted"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 316034 // ImageWriter
	  param in name "imageIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that an image write operation is beginning.  All
<code>ImageWriter</code> implementations are required to call
this method exactly once when beginning an image write
operation.

@param source the <code>ImageWriter</code> object calling this
method.
@param imageIndex the index of the image being written within
its containing input file or stream.
"
      end

      operation 1699330 "imageProgress"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 316034 // ImageWriter
	  param in name "percentageDone" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports the approximate degree of completion of the current
<code>write</code> call within the associated
<code>ImageWriter</code>.

<p> The degree of completion is expressed as an index
indicating which image is being written, and a percentage
varying from <code>0.0F</code> to <code>100.0F</code>
indicating how much of the current image has been output.  The
percentage should ideally be calculated in terms of the
remaining time to completion, but it is usually more practical
to use a more well-defined metric such as pixels decoded or
portion of input stream consumed.  In any case, a sequence of
calls to this method during a given read operation should
supply a monotonically increasing sequence of percentage
values.  It is not necessary to supply the exact values
<code>0</code> and <code>100</code>, as these may be inferred
by the callee from other methods.

<p> Each particular <code>ImageWriter</code> implementation may
call this method at whatever frequency it desires.  A rule of
thumb is to call it around each 5 percent mark.

@param source the <code>ImageWriter</code> object calling this method.
@param percentageDone the approximate percentage of decoding that
has been completed.
"
      end

      operation 1699458 "imageComplete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 316034 // ImageWriter
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that the image write operation has completed.  All
<code>ImageWriter</code> implementations are required to call
this method exactly once upon completion of each image write
operation.

@param source the <code>ImageWriter</code> object calling this method.
"
      end

      operation 1699586 "thumbnailStarted"
	public explicit_return_type "void"
	nparams 3
	  param inout name "source" type class_ref 316034 // ImageWriter
	  param in name "imageIndex" explicit_type "int"
	  param in name "thumbnailIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a thumbnail write operation is beginning.  All
<code>ImageWriter</code> implementations are required to call
this method exactly once when beginning a thumbnail write
operation.

@param source the <code>ImageWrite</code> object calling this method.
@param imageIndex the index of the image being written within its
containing input file or stream.
@param thumbnailIndex the index of the thumbnail being written.
"
      end

      operation 1699714 "thumbnailProgress"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 316034 // ImageWriter
	  param in name "percentageDone" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports the approximate degree of completion of the current
thumbnail write within the associated <code>ImageWriter</code>.
The semantics are identical to those of
<code>imageProgress</code>.

@param source the <code>ImageWriter</code> object calling this
method.
@param percentageDone the approximate percentage of decoding that
has been completed.
"
      end

      operation 1699842 "thumbnailComplete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 316034 // ImageWriter
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a thumbnail write operation has completed.  All
<code>ImageWriter</code> implementations are required to call
this method exactly once upon completion of each thumbnail
write operation.

@param source the <code>ImageWriter</code> object calling this
method.
"
      end

      operation 1699970 "writeAborted"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 316034 // ImageWriter
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a write has been aborted via the writer's
<code>abort</code> method.  No further notifications will be
given.

@param source the <code>ImageWriter</code> object calling this
method.
"
      end
    end
  end

  deploymentview 139778 "event"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 257026 "IIOReadProgressListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
import javax.imageio.ImageReader;
${definition}"
      associated_elems
	class_ref 313218 // IIOReadProgressListener
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 258178 "IIOWriteProgressListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
import javax.imageio.ImageWriter;
${definition}"
      associated_elems
	class_ref 316674 // IIOWriteProgressListener
      end
      comment "Copyright (c) 2000, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 837506 "IIOReadUpdateListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.image.BufferedImage;
import java.util.EventListener;
import javax.imageio.ImageReader;
${definition}"
      associated_elems
	class_ref 313346 // IIOReadUpdateListener
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 837634 "IIOReadWarningListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
import javax.imageio.ImageReader;
${definition}"
      associated_elems
	class_ref 313090 // IIOReadWarningListener
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 837762 "IIOWriteWarningListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
import javax.imageio.ImageWriter;
${definition}"
      associated_elems
	class_ref 316546 // IIOWriteWarningListener
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
