class PortableRemoteObject
!!!10185858.java!!!	PortableRemoteObject()
        if (proDelegate != null) {
            PortableRemoteObject.exportObject((Remote)this);
        }
!!!10185986.java!!!	exportObject(inout obj : Remote) : void

        // Let the delegate do everything, including error handling.
        if (proDelegate != null) {
            proDelegate.exportObject(obj);
        }
!!!10186114.java!!!	toStub(inout obj : Remote) : Remote

        if (proDelegate != null) {
            return proDelegate.toStub(obj);
        }
        return null;
!!!10186242.java!!!	unexportObject(inout obj : Remote) : void

        if (proDelegate != null) {
            proDelegate.unexportObject(obj);
        }

!!!10186370.java!!!	narrow(inout narrowFrom : Object, inout narrowTo : Class) : Object

        if (proDelegate != null) {
            return proDelegate.narrow(narrowFrom, narrowTo);
        }
        return null;

!!!10186498.java!!!	connect(inout target : Remote, inout source : Remote) : void

        if (proDelegate != null) {
            proDelegate.connect(target, source);
        }

!!!10186626.java!!!	createDelegate(inout classKey : String) : Object
        String className = (String)
            AccessController.doPrivileged(new GetPropertyAction(classKey));
        if (className == null) {
            Properties props = getORBPropertiesFile();
            if (props != null) {
                className = props.getProperty(classKey);
            }
        }
        if (className == null) {
            return new com.sun.corba.se.impl.javax.rmi.PortableRemoteObject();
        }

        try {
            return (Object) loadDelegateClass(className).newInstance();
        } catch (ClassNotFoundException ex) {
            INITIALIZE exc = new INITIALIZE( "Cannot instantiate " + className);
            exc.initCause( ex ) ;
            throw exc ;
        } catch (Exception ex) {
            INITIALIZE exc = new INITIALIZE( "Error while instantiating" + className);
            exc.initCause( ex ) ;
            throw exc ;
        }

!!!10186754.java!!!	loadDelegateClass(inout className : String) : Class
        try {
            ClassLoader loader = Thread.currentThread().getContextClassLoader();
            return Class.forName(className, false, loader);
        } catch (ClassNotFoundException e) {
            // ignore, then try RMIClassLoader
        }

        try {
            return RMIClassLoader.loadClass(className);
        } catch (MalformedURLException e) {
            String msg = "Could not load " + className + ": " + e.toString();
            ClassNotFoundException exc = new ClassNotFoundException( msg ) ;
            throw exc ;
        }
!!!10186882.java!!!	getORBPropertiesFile() : Properties
        return (Properties) AccessController.doPrivileged(new GetORBPropertiesFileAction());
