class CheckedMap
!!!8730242.java!!!	typeCheck(inout key : Object, inout value : Object) : void
            if (key != null && !keyType.isInstance(key))
                throw new ClassCastException(badKeyMsg(key));

            if (value != null && !valueType.isInstance(value))
                throw new ClassCastException(badValueMsg(value));
!!!8730370.java!!!	typeCheck(inout func : BiFunction) : BiFunction
            Objects.requireNonNull(func);
            return (k, v) -> {
                V newValue = func.apply(k, v);
                typeCheck(k, newValue);
                return newValue;
            };
!!!8730498.java!!!	badKeyMsg(inout key : Object) : String
            return "Attempt to insert " + key.getClass() +
                    " key into map with key type " + keyType;
!!!8730626.java!!!	badValueMsg(inout value : Object) : String
            return "Attempt to insert " + value.getClass() +
                    " value into map with value type " + valueType;
!!!8730754.java!!!	CheckedMap(inout m : Map, inout keyType : Class, inout valueType : Class)
            this.m = Objects.requireNonNull(m);
            this.keyType = Objects.requireNonNull(keyType);
            this.valueType = Objects.requireNonNull(valueType);
!!!8730882.java!!!	size() : int
 return m.size();
!!!8731010.java!!!	isEmpty() : boolean
 return m.isEmpty();
!!!8731138.java!!!	containsKey(inout key : Object) : boolean
 return m.containsKey(key);
!!!8731266.java!!!	containsValue(inout v : Object) : boolean
 return m.containsValue(v);
!!!8731394.java!!!	get(inout key : Object) : V
 return m.get(key);
!!!8731522.java!!!	remove(inout key : Object) : V
 return m.remove(key);
!!!8731650.java!!!	clear() : void
 m.clear();
!!!8731778.java!!!	keySet() : Set
 return m.keySet();
!!!8731906.java!!!	values() : Collection
 return m.values();
!!!8732034.java!!!	equals(inout o : Object) : boolean
 return o == this || m.equals(o);
!!!8732162.java!!!	hashCode() : int
 return m.hashCode();
!!!8732290.java!!!	toString() : String
 return m.toString();
!!!8732418.java!!!	put(inout key : K, inout value : V) : V
            typeCheck(key, value);
            return m.put(key, value);
!!!8732546.java!!!	putAll(inout t : Map) : void
            // Satisfy the following goals:
            // - good diagnostics in case of type mismatch
            // - all-or-nothing semantics
            // - protection from malicious t
            // - correct behavior if t is a concurrent map
            Object[] entries = t.entrySet().toArray();
            List<Map.Entry<K,V>> checked = new ArrayList<>(entries.length);
            for (Object o : entries) {
                Map.Entry<?,?> e = (Map.Entry<?,?>) o;
                Object k = e.getKey();
                Object v = e.getValue();
                typeCheck(k, v);
                checked.add(
                        new AbstractMap.SimpleImmutableEntry<>((K)k, (V)v));
            }
            for (Map.Entry<K,V> e : checked)
                m.put(e.getKey(), e.getValue());
!!!8732674.java!!!	entrySet() : Set
            if (entrySet==null)
                entrySet = new CheckedEntrySet<>(m.entrySet(), valueType);
            return entrySet;
!!!8732802.java!!!	forEach(inout action : BiConsumer) : void
            m.forEach(action);
!!!8732930.java!!!	replaceAll(inout function : BiFunction) : void
            m.replaceAll(typeCheck(function));
!!!8733058.java!!!	putIfAbsent(inout key : K, inout value : V) : V
            typeCheck(key, value);
            return m.putIfAbsent(key, value);
!!!8733186.java!!!	remove(inout key : Object, inout value : Object) : boolean
            return m.remove(key, value);
!!!8733314.java!!!	replace(inout key : K, inout oldValue : V, inout newValue : V) : boolean
            typeCheck(key, newValue);
            return m.replace(key, oldValue, newValue);
!!!8733442.java!!!	replace(inout key : K, inout value : V) : V
            typeCheck(key, value);
            return m.replace(key, value);
!!!8733570.java!!!	computeIfAbsent(inout key : K, inout mappingFunction : Function) : V
            Objects.requireNonNull(mappingFunction);
            return m.computeIfAbsent(key, k -> {
                V value = mappingFunction.apply(k);
                typeCheck(k, value);
                return value;
            });
!!!8733698.java!!!	computeIfPresent(inout key : K, inout remappingFunction : BiFunction) : V
            return m.computeIfPresent(key, typeCheck(remappingFunction));
!!!8733826.java!!!	compute(inout key : K, inout remappingFunction : BiFunction) : V
            return m.compute(key, typeCheck(remappingFunction));
!!!8733954.java!!!	merge(inout key : K, inout value : V, inout remappingFunction : BiFunction) : V
            Objects.requireNonNull(remappingFunction);
            return m.merge(key, value, (v1, v2) -> {
                V newValue = remappingFunction.apply(v1, v2);
                typeCheck(null, newValue);
                return newValue;
            });
