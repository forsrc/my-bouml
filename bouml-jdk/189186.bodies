class Constructor
!!!7337986.java!!!	getFactory() : GenericsFactory
        // create scope and factory
        return CoreReflectionFactory.make(this, ConstructorScope.make(this));
!!!7338114.java!!!	getGenericInfo() : ConstructorRepository
        // lazily initialize repository if necessary
        if (genericInfo == null) {
            // create and cache generic info repository
            genericInfo =
                ConstructorRepository.make(getSignature(),
                                           getFactory());
        }
        return genericInfo; //return cached repository
!!!7338242.java!!!	getRoot() : Executable
        return root;
!!!7338370.java!!!	Constructor(inout declaringClass : Class, inout parameterTypes : Class [[]], inout checkedExceptions : Class [[]], in modifiers : int, in slot : int, inout signature : String, inout annotations : byte [[]], inout parameterAnnotations : byte [[]])
        this.clazz = declaringClass;
        this.parameterTypes = parameterTypes;
        this.exceptionTypes = checkedExceptions;
        this.modifiers = modifiers;
        this.slot = slot;
        this.signature = signature;
        this.annotations = annotations;
        this.parameterAnnotations = parameterAnnotations;
!!!7338498.java!!!	copy() : Constructor
        // This routine enables sharing of ConstructorAccessor objects
        // among Constructor objects which refer to the same underlying
        // method in the VM. (All of this contortion is only necessary
        // because of the "accessibility" bit in AccessibleObject,
        // which implicitly requires that new java.lang.reflect
        // objects be fabricated for each reflective call on Class
        // objects.)
        if (this.root != null)
            throw new IllegalArgumentException("Can not copy a non-root Constructor");

        Constructor<T> res = new Constructor<>(clazz,
                                               parameterTypes,
                                               exceptionTypes, modifiers, slot,
                                               signature,
                                               annotations,
                                               parameterAnnotations);
        res.root = this;
        // Might as well eagerly propagate this if already present
        res.constructorAccessor = constructorAccessor;
        return res;
!!!7338626.java!!!	hasGenericInformation() : boolean
        return (getSignature() != null);
!!!7338754.java!!!	getAnnotationBytes() : byte
        return annotations;
!!!7338882.java!!!	getDeclaringClass() : Class
        return clazz;
!!!7339010.java!!!	getName() : String
        return getDeclaringClass().getName();
!!!7339138.java!!!	getModifiers() : int
        return modifiers;
!!!7339266.java!!!	getTypeParameters() : TypeVariable
      if (getSignature() != null) {
        return (TypeVariable<Constructor<T>>[])getGenericInfo().getTypeParameters();
      } else
          return (TypeVariable<Constructor<T>>[])new TypeVariable[0];
!!!7339394.java!!!	getParameterTypes() : Class
        return parameterTypes.clone();
!!!7339522.java!!!	getParameterCount() : int
 return parameterTypes.length;
!!!7339650.java!!!	getGenericParameterTypes() : Type
        return super.getGenericParameterTypes();
!!!7339778.java!!!	getExceptionTypes() : Class
        return exceptionTypes.clone();
!!!7339906.java!!!	getGenericExceptionTypes() : Type
        return super.getGenericExceptionTypes();
!!!7340034.java!!!	equals(inout obj : Object) : boolean
        if (obj != null && obj instanceof Constructor) {
            Constructor<?> other = (Constructor<?>)obj;
            if (getDeclaringClass() == other.getDeclaringClass()) {
                return equalParamTypes(parameterTypes, other.parameterTypes);
            }
        }
        return false;
!!!7340162.java!!!	hashCode() : int
        return getDeclaringClass().getName().hashCode();
!!!7340290.java!!!	toString() : String
        return sharedToString(Modifier.constructorModifiers(),
                              false,
                              parameterTypes,
                              exceptionTypes);
!!!7340418.java!!!	specificToStringHeader(inout sb : StringBuilder) : void
        sb.append(getDeclaringClass().getTypeName());
!!!7340546.java!!!	toGenericString() : String
        return sharedToGenericString(Modifier.constructorModifiers(), false);
!!!7340674.java!!!	specificToGenericStringHeader(inout sb : StringBuilder) : void
        specificToStringHeader(sb);
!!!7340802.java!!!	newInstance(inout initargs : Object) : T
        if (!override) {
            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {
                Class<?> caller = Reflection.getCallerClass();
                checkAccess(caller, clazz, null, modifiers);
            }
        }
        if ((clazz.getModifiers() & Modifier.ENUM) != 0)
            throw new IllegalArgumentException("Cannot reflectively create enum objects");
        ConstructorAccessor ca = constructorAccessor;   // read volatile
        if (ca == null) {
            ca = acquireConstructorAccessor();
        }
        @SuppressWarnings("unchecked")
        T inst = (T) ca.newInstance(initargs);
        return inst;
!!!7340930.java!!!	isVarArgs() : boolean
        return super.isVarArgs();
!!!7341058.java!!!	isSynthetic() : boolean
        return super.isSynthetic();
!!!7341186.java!!!	acquireConstructorAccessor() : ConstructorAccessor
        // First check to see if one has been created yet, and take it
        // if so.
        ConstructorAccessor tmp = null;
        if (root != null) tmp = root.getConstructorAccessor();
        if (tmp != null) {
            constructorAccessor = tmp;
        } else {
            // Otherwise fabricate one and propagate it up to the root
            tmp = reflectionFactory.newConstructorAccessor(this);
            setConstructorAccessor(tmp);
        }

        return tmp;
!!!7341314.java!!!	getConstructorAccessor() : ConstructorAccessor
        return constructorAccessor;
!!!7341442.java!!!	setConstructorAccessor(inout accessor : ConstructorAccessor) : void
        constructorAccessor = accessor;
        // Propagate up
        if (root != null) {
            root.setConstructorAccessor(accessor);
        }
!!!7341570.java!!!	getSlot() : int
        return slot;
!!!7341698.java!!!	getSignature() : String
        return signature;
!!!7341826.java!!!	getRawAnnotations() : byte
        return annotations;
!!!7341954.java!!!	getRawParameterAnnotations() : byte
        return parameterAnnotations;
!!!7342082.java!!!	getAnnotation(inout annotationClass : Class) : T
        return super.getAnnotation(annotationClass);
!!!7342210.java!!!	getDeclaredAnnotations() : Annotation
        return super.getDeclaredAnnotations();
!!!7342338.java!!!	getParameterAnnotations() : Annotation
        return sharedGetParameterAnnotations(parameterTypes, parameterAnnotations);
!!!7342466.java!!!	handleParameterNumberMismatch(in resultLength : int, in numParameters : int) : void
        Class<?> declaringClass = getDeclaringClass();
        if (declaringClass.isEnum() ||
            declaringClass.isAnonymousClass() ||
            declaringClass.isLocalClass() )
            return ; // Can't do reliable parameter counting
        else {
            if (!declaringClass.isMemberClass() || // top-level
                // Check for the enclosing instance parameter for
                // non-static member classes
                (declaringClass.isMemberClass() &&
                 ((declaringClass.getModifiers() & Modifier.STATIC) == 0)  &&
                 resultLength + 1 != numParameters) ) {
                throw new AnnotationFormatError(
                          "Parameter annotations don't match number of parameters");
            }
        }
!!!7342594.java!!!	getAnnotatedReturnType() : AnnotatedType
        return getAnnotatedReturnType0(getDeclaringClass());
!!!7342722.java!!!	getAnnotatedReceiverType() : AnnotatedType
        if (getDeclaringClass().getEnclosingClass() == null)
            return super.getAnnotatedReceiverType();

        return TypeAnnotationParser.buildAnnotatedType(getTypeAnnotationBytes0(),
                sun.misc.SharedSecrets.getJavaLangAccess().
                        getConstantPool(getDeclaringClass()),
                this,
                getDeclaringClass(),
                getDeclaringClass().getEnclosingClass(),
                TypeAnnotation.TypeAnnotationTarget.METHOD_RECEIVER);
