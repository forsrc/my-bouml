class TreeNode
!!!3220354.java!!!	registerNode(inout agent : SnmpMibAgent) : void
            long[] oid= agent.getRootOid();
            registerNode(oid, 0, agent);
!!!3220482.java!!!	retrieveMatchingBranch(inout oid : long [[]], in cursor : int) : SnmpMibTree::TreeNode
            TreeNode node= retrieveChild(oid, cursor);
            if (node == null)
                return this;
            if (children.isEmpty()) {
                // In this case, the node does not have any children. So no point to
                // continue the search ...
                return node;
            }
            if( cursor + 1 == oid.length) {
                // In this case, the oid does not have any more element. So the search
                // is over.
                return node;
            }

            TreeNode n = node.retrieveMatchingBranch(oid, cursor + 1);
            //If the returned node got a null agent, we have to replace it by
            //the current one (in case it is not null)
            //
            return n.agent == null ? this : n;
!!!3220610.java!!!	getAgentMib() : SnmpMibAgent
            return agent;
!!!3220738.java!!!	printTree(inout ident : String) : void

            StringBuilder buff= new StringBuilder();
            if (agents == null) {
                return;
            }

            for(Enumeration<SnmpMibAgent> e= agents.elements(); e.hasMoreElements(); ) {
                SnmpMibAgent mib= e.nextElement();
                if (mib == null)
                    buff.append("empty ");
                else
                    buff.append(mib.getMibName()).append(" ");
            }
            ident+= " ";
            if (children == null) {
                return;
            }
            for(Enumeration<TreeNode> e= children.elements(); e.hasMoreElements(); ) {
                TreeNode node= e.nextElement();
                node.printTree(ident);
            }
!!!3220866.java!!!	TreeNode(in nodeValue : long, inout agent : SnmpMibAgent, inout sup : SnmpMibTree::TreeNode)
            this.nodeValue= nodeValue;
            this.parent= sup;
            agents.addElement(agent);
!!!3220994.java!!!	removeAgentFully(inout agent : SnmpMibAgent) : void
            Vector<TreeNode> v = new Vector<>();
            for(Enumeration<TreeNode> e= children.elements();
                e.hasMoreElements(); ) {

                TreeNode node= e.nextElement();
                node.removeAgentFully(agent);
                if(node.agents.isEmpty())
                    v.add(node);

            }
            for(Enumeration<TreeNode> e= v.elements(); e.hasMoreElements(); ) {
                children.removeElement(e.nextElement());
            }
            removeAgent(agent);

!!!3221122.java!!!	removeAgent(inout mib : SnmpMibAgent) : void
            if (!agents.contains(mib))
                return;
            agents.removeElement(mib);

            if (!agents.isEmpty())
                agent= agents.firstElement();

!!!3221250.java!!!	setAgent(inout agent : SnmpMibAgent) : void
            this.agent = agent;
!!!3221378.java!!!	registerNode(inout oid : long [[]], in cursor : int, inout agent : SnmpMibAgent) : void

            if (cursor >= oid.length)
                //That's it !
                //
                return;
            TreeNode child = retrieveChild(oid, cursor);
            if (child == null) {
                // Create a child and register it !
                //
                long theValue= oid[cursor];
                child= new TreeNode(theValue, agent, this);
                children.addElement(child);
            }
            else
                if (agents.contains(agent) == false) {
                    agents.addElement(agent);
                }

            // We have to set the agent attribute
            //
            if(cursor == (oid.length - 1)) {
              child.setAgent(agent);
            }
            else
              child.registerNode(oid, cursor+1, agent);
!!!3221506.java!!!	retrieveChild(inout oid : long [[]], in current : int) : SnmpMibTree::TreeNode
            long theValue= oid[current];

            for(Enumeration<TreeNode> e= children.elements(); e.hasMoreElements(); ) {
                TreeNode node= e.nextElement();
                if (node.match(theValue))
                    return node;
            }
            return null;
!!!3221634.java!!!	match(in value : long) : boolean
            return (nodeValue == value) ? true : false;
