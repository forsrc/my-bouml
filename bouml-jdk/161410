format 222
"generic" // jdk1.8::com::sun::org::apache::bcel::internal::generic
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/org/apache/bcel/internal/generic/"
  java_package "com.sun.org.apache.bcel.internal.generic"
  classview 155650 "generic"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 547330 "Type"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract super class for all possible java types, namely basic types
such as int, object types like String and array types, e.g. int[]

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1097346 // <realization>
	relation 1097346 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1097346 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 756738 "type"
	protected explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1097474 // signature (<unidirectional association>)
	relation 1097474 --->
	  a role_name "signature" protected
	    comment " signature for the type"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1097474 // signature (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1097602 // VOID (<unidirectional association>)
	relation 1097602 --->
	  a role_name "VOID" init_value " new BasicType(Constants.T_VOID)" class_relation const_relation public
	    comment " Predefined constants

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1097602 // VOID (<unidirectional association>)
	  b parent class_ref 552578 // BasicType
      end

      classrelation 1097730 // BOOLEAN (<unidirectional association>)
	relation 1097730 --->
	  a role_name "BOOLEAN" init_value " new BasicType(Constants.T_BOOLEAN)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1097730 // BOOLEAN (<unidirectional association>)
	  b parent class_ref 552578 // BasicType
      end

      classrelation 1097858 // INT (<unidirectional association>)
	relation 1097858 --->
	  a role_name "INT" init_value " new BasicType(Constants.T_INT)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1097858 // INT (<unidirectional association>)
	  b parent class_ref 552578 // BasicType
      end

      classrelation 1097986 // SHORT (<unidirectional association>)
	relation 1097986 --->
	  a role_name "SHORT" init_value " new BasicType(Constants.T_SHORT)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1097986 // SHORT (<unidirectional association>)
	  b parent class_ref 552578 // BasicType
      end

      classrelation 1098114 // BYTE (<unidirectional association>)
	relation 1098114 --->
	  a role_name "BYTE" init_value " new BasicType(Constants.T_BYTE)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1098114 // BYTE (<unidirectional association>)
	  b parent class_ref 552578 // BasicType
      end

      classrelation 1098242 // LONG (<unidirectional association>)
	relation 1098242 --->
	  a role_name "LONG" init_value " new BasicType(Constants.T_LONG)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1098242 // LONG (<unidirectional association>)
	  b parent class_ref 552578 // BasicType
      end

      classrelation 1098370 // DOUBLE (<unidirectional association>)
	relation 1098370 --->
	  a role_name "DOUBLE" init_value " new BasicType(Constants.T_DOUBLE)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1098370 // DOUBLE (<unidirectional association>)
	  b parent class_ref 552578 // BasicType
      end

      classrelation 1098498 // FLOAT (<unidirectional association>)
	relation 1098498 --->
	  a role_name "FLOAT" init_value " new BasicType(Constants.T_FLOAT)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1098498 // FLOAT (<unidirectional association>)
	  b parent class_ref 552578 // BasicType
      end

      classrelation 1098626 // CHAR (<unidirectional association>)
	relation 1098626 --->
	  a role_name "CHAR" init_value " new BasicType(Constants.T_CHAR)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1098626 // CHAR (<unidirectional association>)
	  b parent class_ref 552578 // BasicType
      end

      classrelation 1098754 // OBJECT (<unidirectional association>)
	relation 1098754 --->
	  a role_name "OBJECT" init_value " new ObjectType(\"java.lang.Object\")" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1098754 // OBJECT (<unidirectional association>)
	  b parent class_ref 551682 // ObjectType
      end

      classrelation 1098882 // STRING (<unidirectional association>)
	relation 1098882 --->
	  a role_name "STRING" init_value " new ObjectType(\"java.lang.String\")" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1098882 // STRING (<unidirectional association>)
	  b parent class_ref 551682 // ObjectType
      end

      classrelation 1099010 // STRINGBUFFER (<unidirectional association>)
	relation 1099010 --->
	  a role_name "STRINGBUFFER" init_value " new ObjectType(\"java.lang.StringBuffer\")" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1099010 // STRINGBUFFER (<unidirectional association>)
	  b parent class_ref 551682 // ObjectType
      end

      classrelation 1099138 // THROWABLE (<unidirectional association>)
	relation 1099138 --->
	  a role_name "THROWABLE" init_value " new ObjectType(\"java.lang.Throwable\")" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1099138 // THROWABLE (<unidirectional association>)
	  b parent class_ref 551682 // ObjectType
      end

      classrelation 1099266 // NO_ARGS (<unidirectional association>)
	relation 1099266 --->
	  a role_name "NO_ARGS" multiplicity "[]" init_value " new Type[0]" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1099266 // NO_ARGS (<unidirectional association>)
	  b parent class_ref 547330 // Type
      end

      classrelation 1099394 // NULL (<unidirectional association>)
	relation 1099394 --->
	  a role_name "NULL" init_value " new ReferenceType(){}" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1099394 // NULL (<unidirectional association>)
	  b parent class_ref 552450 // ReferenceType
      end

      classrelation 1099522 // UNKNOWN (<unidirectional association>)
	relation 1099522 --->
	  a role_name "UNKNOWN" init_value " new Type(Constants.T_UNKNOWN,
                                                            \"<unknown object>\"){}" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1099522 // UNKNOWN (<unidirectional association>)
	  b parent class_ref 547330 // Type
      end

      operation 3424642 "Type"
	protected explicit_return_type ""
	nparams 2
	  param in name "t" explicit_type "byte"
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3424770 "getSignature"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return signature for given type.
"
      end

      operation 3424898 "getType"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return type as defined in Constants
"
      end

      operation 3425026 "getSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return stack size of this type (2 for long and double, 0 for void, 1 otherwise)
"
      end

      operation 3425154 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return Type string, e.g. `int[]'
"
      end

      operation 3425282 "getMethodSignature"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "return_type" type class_ref 547330 // Type
	  param inout name "arg_types" type class_ref 547330 // Type
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert type to Java method signature, e.g. int[] f(java.lang.String x)
becomes (Ljava/lang/String;)[I

@param return_type what the method returns
@param arg_types what are the argument types
@return method signature for given type(s).
"
      end

      attribute 756866 "consumed_chars"
	class_attribute private explicit_type "int"
	init_value "0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Remember position in string, see getArgumentTypes"
      end

      operation 3425410 "getType"
	class_operation public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "signature" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 552706 // StringIndexOutOfBoundsException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert signature to a Type object.
@param signature signature string such as Ljava/lang/String;
@return type object
"
      end

      operation 3425538 "getReturnType"
	class_operation public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "signature" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert return value of a method (signature) to a Type object.

@param signature signature string such as (Ljava/lang/String;)V
@return return type
"
      end

      operation 3425666 "getArgumentTypes"
	class_operation public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "signature" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert arguments of a method (signature) to an array of Type objects.
@param signature signature string such as (Ljava/lang/String;)V
@return array of argument types
"
      end

      operation 3425794 "getType"
	class_operation public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert runtime java.lang.Class to BCEL Type object.
@param cl Java class
@return corresponding Type object
"
      end

      operation 3425922 "getSignature"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "meth" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 548994 "AALOAD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


AALOAD - Load reference from array
<PRE>Stack: ..., arrayref, index -&gt; value</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1092994 // <generalisation>
	relation 1092994 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1092994 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1093122 // <realization>
	relation 1093122 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1093122 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3417474 "AALOAD"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load reference from array
"
      end

      operation 3417602 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 549122 "ArrayInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Super class for instructions dealing with array access such as IALOAD.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1092610 // <generalisation>
	relation 1092610 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1092610 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1092738 // <realization>
	relation 1092738 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1092738 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1092866 // <realization>
	relation 1092866 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1092866 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      operation 3416834 "ArrayInstruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3416962 "ArrayInstruction"
	protected explicit_return_type ""
	nparams 1
	  param in name "opcode" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param opcode of instruction
"
      end

      operation 3417090 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3417218 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return type associated with the instruction
"
      end
    end

    class 549250 "Instruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract super class for all Java byte codes.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1092226 // <realization>
	relation 1092226 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1092226 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 1092354 // <realization>
	relation 1092354 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1092354 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 755970 "length"
	protected explicit_type "short"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Length of instruction in bytes"
      end

      attribute 756098 "opcode"
	protected explicit_type "short"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Opcode number"
      end

      classrelation 1092482 // cmp (<unidirectional association>)
	relation 1092482 --->
	  a role_name "cmp" init_value " InstructionComparator.DEFAULT" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1092482 // cmp (<unidirectional association>)
	  b parent class_ref 549378 // InstructionComparator
      end

      operation 3413890 "Instruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3414018 "Instruction"
	public explicit_return_type ""
	nparams 2
	  param in name "opcode" explicit_type "short"
	  param in name "length" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3414146 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3414274 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return name of instruction, i.e., opcode name
"
      end

      operation 3414402 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "verbose" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Long output format:

&lt;name of opcode&gt; \"[\"&lt;opcode number&gt;\"]\"
\"(\"&lt;length of instruction&gt;\")\"

@param verbose long/short format switch
@return mnemonic for instruction
"
      end

      operation 3414530 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction in verbose format
"
      end

      operation 3414658 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "cp" type class_ref 541954 // ConstantPool
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction with sumbolic references resolved
"
      end

      operation 3414786 "copy"
	public return_type class_ref 549250 // Instruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Use with caution, since `BranchInstruction's have a `target' reference which
is not copied correctly (only basic types are). This also applies for
`Select' instructions with their multiple branch targets.

@see BranchInstruction
@return (shallow) copy of an instruction
"
      end

      operation 3414914 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (e.g. index) from file.

@param bytes byte sequence to read from
@param wide \"wide\" instruction flag
"
      end

      operation 3415042 "readInstruction"
	class_operation public return_type class_ref 549250 // Instruction
	nparams 1
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read an instruction from (byte code) input stream and return the
appropiate object.

@param file file to read from
@return instruction object being read
"
      end

      operation 3415170 "className"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param in name "opcode" explicit_type "short"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3415298 "consumeStack"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method also gives right results for instructions whose
effect on the stack depends on the constant pool entry they
reference.
 @return Number of words consumed from stack by this instruction,
or Constants.UNPREDICTABLE, if this can not be computed statically
"
      end

      operation 3415426 "produceStack"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method also gives right results for instructions whose
effect on the stack depends on the constant pool entry they
reference.
@return Number of words produced onto stack by this instruction,
or Constants.UNPREDICTABLE, if this can not be computed statically
"
      end

      operation 3415554 "getOpcode"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return this instructions opcode
"
      end

      operation 3415682 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return length (in bytes) of instruction
"
      end

      operation 3415810 "setOpcode"
	private explicit_return_type "void"
	nparams 1
	  param in name "opcode" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Needed in readInstruction.
"
      end

      operation 3415938 "dispose"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Some instructions may be reused, so don't do anything by default.
"
      end

      operation 3416066 "accept"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end

      operation 3416194 "getComparator"
	class_operation public return_type class_ref 549378 // InstructionComparator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get Comparator object used in the equals() method to determine
equality of instructions.

@return currently used comparator for equals()
"
      end

      operation 3416322 "setComparator"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 549378 // InstructionComparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set comparator to be used for equals().
"
      end

      operation 3416450 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check for equality, delegated to comparator
@return true if that is an Instruction and has the same opcode
"
      end
    end

    class 549378 "InstructionComparator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Equality of instructions isn't clearly to be defined. You might
wish, for example, to compare whether instructions have the same
meaning. E.g., whether two INVOKEVIRTUALs describe the same
call.<br>The DEFAULT comparator however, considers two instructions
to be equal if they have same opcode and point to the same indexes
(if any) in the constant pool or the same local variable index. Branch
instructions must have the same target.

@see Instruction
@author <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1126914 // DEFAULT (<unidirectional association>)
	relation 1126914 --->
	  a role_name "DEFAULT" init_value "
    new InstructionComparator() {
        public boolean equals(Instruction i1, Instruction i2) {
          if(i1.opcode == i2.opcode) {
            if(i1 instanceof Select) {
              InstructionHandle[] t1 = ((Select)i1).getTargets();
              InstructionHandle[] t2 = ((Select)i2).getTargets();

              if(t1.length == t2.length) {
                for(int i = 0; i < t1.length; i++) {
                  if(t1[i] != t2[i]) {
                    return false;
                  }
                }

                return true;
              }
            } else if(i1 instanceof BranchInstruction) {
              return ((BranchInstruction)i1).target ==
                ((BranchInstruction)i2).target;
            } else if(i1 instanceof ConstantPushInstruction) {
              return ((ConstantPushInstruction)i1).getValue().
                equals(((ConstantPushInstruction)i2).getValue());
            } else if(i1 instanceof IndexedInstruction) {
              return ((IndexedInstruction)i1).getIndex() ==
                ((IndexedInstruction)i2).getIndex();
            } else if(i1 instanceof NEWARRAY) {
              return ((NEWARRAY)i1).getTypecode() == ((NEWARRAY)i2).getTypecode();
            } else {
              return true;
            }
          }

          return false;
        }
      }" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1126914 // DEFAULT (<unidirectional association>)
	  b parent class_ref 549378 // InstructionComparator
      end

      operation 3536898 "equals"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "i1" type class_ref 549250 // Instruction
	  param inout name "i2" type class_ref 549250 // Instruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 549506 "ConstantPoolGen"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used to build up a constant pool. The user adds
constants via `addXXX' methods, `addString', `addClass',
etc.. These methods return an index into the constant
pool. Finally, `getFinalConstantPool()' returns the constant pool
built up. Intermediate versions of the constant pool can be
obtained with `getConstantPool()'. A constant pool has capacity for
Constants.MAX_SHORT entries. Note that the first (0) is used by the
JVM and that Double and Long constants need two slots.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@see Constant
"
      classrelation 1107458 // <realization>
	relation 1107458 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1107458 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 758146 "size"
	protected explicit_type "int"
	init_value " 1024"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Inital size, sufficient in most cases"
      end

      classrelation 1107586 // constants (<unidirectional association>)
	relation 1107586 --->
	  a role_name "constants" multiplicity "[]" init_value " new Constant[size]" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1107586 // constants (<unidirectional association>)
	  b parent class_ref 543362 // Constant
      end

      attribute 758274 "index"
	protected explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " First entry (0) used by JVM"
      end

      classrelation 1107714 // METHODREF_DELIM (<unidirectional association>)
	relation 1107714 --->
	  a role_name "METHODREF_DELIM" init_value " \":\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1107714 // METHODREF_DELIM (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1107842 // IMETHODREF_DELIM (<unidirectional association>)
	relation 1107842 --->
	  a role_name "IMETHODREF_DELIM" init_value " \"#\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1107842 // IMETHODREF_DELIM (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1107970 // FIELDREF_DELIM (<unidirectional association>)
	relation 1107970 --->
	  a role_name "FIELDREF_DELIM" init_value " \"&\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1107970 // FIELDREF_DELIM (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1108098 // NAT_DELIM (<unidirectional association>)
	relation 1108098 --->
	  a role_name "NAT_DELIM" init_value " \"%\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1108098 // NAT_DELIM (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      class 555778 "Index"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1108226 // <realization>
	  relation 1108226 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1108226 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 758402 "index"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 3447298 "Index"
	  package explicit_return_type ""
	  nparams 1
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 3447426 "ConstantPoolGen"
	public explicit_return_type ""
	nparams 1
	  param inout name "cs" type class_ref 543362 // Constant
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize with given array of constants.

@param c array of given constants, new ones will be appended
"
      end

      operation 3447554 "ConstantPoolGen"
	public explicit_return_type ""
	nparams 1
	  param inout name "cp" type class_ref 541954 // ConstantPool
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize with given constant pool.
"
      end

      operation 3447682 "ConstantPoolGen"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create empty constant pool.
"
      end

      operation 3447810 "adjustSize"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Resize internal array of constants.
"
      end

      classrelation 1108354 // string_table (<unidirectional association>)
	relation 1108354 --->
	  a role_name "string_table" init_value " new HashMap()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1108354 // string_table (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      operation 3447938 "lookupString"
	public explicit_return_type "int"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look for ConstantString in ConstantPool containing String `str'.

@param str String to search for
@return index on success, -1 otherwise
"
      end

      operation 3448066 "addString"
	public explicit_return_type "int"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new String constant to the ConstantPool, if it is not already in there.

@param str String to add
@return index of entry
"
      end

      classrelation 1108482 // class_table (<unidirectional association>)
	relation 1108482 --->
	  a role_name "class_table" init_value " new HashMap()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1108482 // class_table (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      operation 3448194 "lookupClass"
	public explicit_return_type "int"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look for ConstantClass in ConstantPool named `str'.

@param str String to search for
@return index on success, -1 otherwise
"
      end

      operation 3448322 "addClass_"
	private explicit_return_type "int"
	nparams 1
	  param inout name "clazz" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3448450 "addClass"
	public explicit_return_type "int"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new Class reference to the ConstantPool, if it is not already in there.

@param str Class to add
@return index of entry
"
      end

      operation 3448578 "addClass"
	public explicit_return_type "int"
	nparams 1
	  param inout name "type" type class_ref 551682 // ObjectType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new Class reference to the ConstantPool for a given type.

@param str Class to add
@return index of entry
"
      end

      operation 3448706 "addArrayClass"
	public explicit_return_type "int"
	nparams 1
	  param inout name "type" type class_ref 552322 // ArrayType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a reference to an array class (e.g. String[][]) as needed by MULTIANEWARRAY
instruction, e.g. to the ConstantPool.

@param type type of array class
@return index of entry
"
      end

      operation 3448834 "lookupInteger"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look for ConstantInteger in ConstantPool.

@param n integer number to look for
@return index on success, -1 otherwise
"
      end

      operation 3448962 "addInteger"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new Integer constant to the ConstantPool, if it is not already in there.

@param n integer number to add
@return index of entry
"
      end

      operation 3449090 "lookupFloat"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look for ConstantFloat in ConstantPool.

@param n Float number to look for
@return index on success, -1 otherwise
"
      end

      operation 3449218 "addFloat"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new Float constant to the ConstantPool, if it is not already in there.

@param n Float number to add
@return index of entry
"
      end

      classrelation 1108610 // utf8_table (<unidirectional association>)
	relation 1108610 --->
	  a role_name "utf8_table" init_value " new HashMap()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1108610 // utf8_table (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      operation 3449346 "lookupUtf8"
	public explicit_return_type "int"
	nparams 1
	  param inout name "n" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look for ConstantUtf8 in ConstantPool.

@param n Utf8 string to look for
@return index on success, -1 otherwise
"
      end

      operation 3449474 "addUtf8"
	public explicit_return_type "int"
	nparams 1
	  param inout name "n" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new Utf8 constant to the ConstantPool, if it is not already in there.

@param n Utf8 string to add
@return index of entry
"
      end

      operation 3449602 "lookupLong"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look for ConstantLong in ConstantPool.

@param n Long number to look for
@return index on success, -1 otherwise
"
      end

      operation 3449730 "addLong"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new long constant to the ConstantPool, if it is not already in there.

@param n Long number to add
@return index of entry
"
      end

      operation 3449858 "lookupDouble"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look for ConstantDouble in ConstantPool.

@param n Double number to look for
@return index on success, -1 otherwise
"
      end

      operation 3449986 "addDouble"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new double constant to the ConstantPool, if it is not already in there.

@param n Double number to add
@return index of entry
"
      end

      classrelation 1108738 // n_a_t_table (<unidirectional association>)
	relation 1108738 --->
	  a role_name "n_a_t_table" init_value " new HashMap()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1108738 // n_a_t_table (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      operation 3450114 "lookupNameAndType"
	public explicit_return_type "int"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "signature" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look for ConstantNameAndType in ConstantPool.

@param name of variable/method
@param signature of variable/method
@return index on success, -1 otherwise
"
      end

      operation 3450242 "addNameAndType"
	public explicit_return_type "int"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "signature" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new NameAndType constant to the ConstantPool if it is not already
in there.

@param n NameAndType string to add
@return index of entry
"
      end

      classrelation 1108866 // cp_table (<unidirectional association>)
	relation 1108866 --->
	  a role_name "cp_table" init_value " new HashMap()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1108866 // cp_table (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      operation 3450370 "lookupMethodref"
	public explicit_return_type "int"
	nparams 3
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "method_name" type class_ref 128130 // String
	  param inout name "signature" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look for ConstantMethodref in ConstantPool.

@param class_name Where to find method
@param method_name Guess what
@param signature return and argument types
@return index on success, -1 otherwise
"
      end

      operation 3450498 "lookupMethodref"
	public explicit_return_type "int"
	nparams 1
	  param inout name "method" type class_ref 555906 // MethodGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3450626 "addMethodref"
	public explicit_return_type "int"
	nparams 3
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "method_name" type class_ref 128130 // String
	  param inout name "signature" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new Methodref constant to the ConstantPool, if it is not already
in there.

@param n Methodref string to add
@return index of entry
"
      end

      operation 3450754 "addMethodref"
	public explicit_return_type "int"
	nparams 1
	  param inout name "method" type class_ref 555906 // MethodGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3450882 "lookupInterfaceMethodref"
	public explicit_return_type "int"
	nparams 3
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "method_name" type class_ref 128130 // String
	  param inout name "signature" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look for ConstantInterfaceMethodref in ConstantPool.

@param class_name Where to find method
@param method_name Guess what
@param signature return and argument types
@return index on success, -1 otherwise
"
      end

      operation 3451010 "lookupInterfaceMethodref"
	public explicit_return_type "int"
	nparams 1
	  param inout name "method" type class_ref 555906 // MethodGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3451138 "addInterfaceMethodref"
	public explicit_return_type "int"
	nparams 3
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "method_name" type class_ref 128130 // String
	  param inout name "signature" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new InterfaceMethodref constant to the ConstantPool, if it is not already
in there.

@param n InterfaceMethodref string to add
@return index of entry
"
      end

      operation 3451266 "addInterfaceMethodref"
	public explicit_return_type "int"
	nparams 1
	  param inout name "method" type class_ref 555906 // MethodGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3451394 "lookupFieldref"
	public explicit_return_type "int"
	nparams 3
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "field_name" type class_ref 128130 // String
	  param inout name "signature" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look for ConstantFieldref in ConstantPool.

@param class_name Where to find method
@param field_name Guess what
@param signature return and argument types
@return index on success, -1 otherwise
"
      end

      operation 3451522 "addFieldref"
	public explicit_return_type "int"
	nparams 3
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "field_name" type class_ref 128130 // String
	  param inout name "signature" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new Fieldref constant to the ConstantPool, if it is not already
in there.

@param n Fieldref string to add
@return index of entry
"
      end

      operation 3451650 "getConstant"
	public return_type class_ref 543362 // Constant
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param i index in constant pool
@return constant pool entry at index i
"
      end

      operation 3451778 "setConstant"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "c" type class_ref 543362 // Constant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Use with care!

@param i index in constant pool
@param c new constant pool entry at index i
"
      end

      operation 3451906 "getConstantPool"
	public return_type class_ref 541954 // ConstantPool
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return intermediate constant pool
"
      end

      operation 3452034 "getSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return current size of constant pool
"
      end

      operation 3452162 "getFinalConstantPool"
	public return_type class_ref 541954 // ConstantPool
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return constant pool with proper length
"
      end

      operation 3452290 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return String representation.
"
      end

      operation 3452418 "addConstant"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 543362 // Constant
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Import constant from another ConstantPool and return new index.
"
      end
    end

    class 549634 "Visitor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Interface implementing the Visitor pattern programming style.
I.e., a class that implements this interface can handle all types of
instructions with the properly typed methods just by calling the accept()
method.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      operation 3460098 "visitStackInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558466 // StackInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3460226 "visitLocalVariableInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 551042 // LocalVariableInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3460354 "visitBranchInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 554370 // BranchInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3460482 "visitLoadClass"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 551554 // LoadClass
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3460610 "visitFieldInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 559362 // FieldInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3460738 "visitIfInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 559490 // IfInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3460866 "visitConversionInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556034 // ConversionInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3460994 "visitPopInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553090 // PopInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3461122 "visitStoreInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 552962 // StoreInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3461250 "visitTypedInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 549890 // TypedInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3461378 "visitSelect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 559618 // Select
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3461506 "visitJsrInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 559746 // JsrInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3461634 "visitGotoInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 559874 // GotoInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3461762 "visitUnconditionalBranch"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553346 // UnconditionalBranch
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3461890 "visitPushInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550530 // PushInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3462018 "visitArithmeticInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 552066 // ArithmeticInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3462146 "visitCPInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 551426 // CPInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3462274 "visitInvokeInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560002 // InvokeInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3462402 "visitArrayInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 549122 // ArrayInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3462530 "visitAllocationInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550658 // AllocationInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3462658 "visitReturnInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 551938 // ReturnInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3462786 "visitFieldOrMethod"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560130 // FieldOrMethod
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3462914 "visitConstantPushInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553858 // ConstantPushInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3463042 "visitExceptionThrower"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 549762 // ExceptionThrower
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3463170 "visitLoadInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550914 // LoadInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3463298 "visitVariableLengthInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560258 // VariableLengthInstruction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3463426 "visitStackProducer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550018 // StackProducer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3463554 "visitStackConsumer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550274 // StackConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3463682 "visitACONST_NULL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550402 // ACONST_NULL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3463810 "visitGETSTATIC"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560386 // GETSTATIC
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3463938 "visitIF_ICMPLT"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560514 // IF_ICMPLT
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3464066 "visitMONITOREXIT"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560642 // MONITOREXIT
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3464194 "visitIFLT"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560770 // IFLT
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3464322 "visitLSTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560898 // LSTORE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3464450 "visitPOP2"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561026 // POP2
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3464578 "visitBASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553602 // BASTORE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3464706 "visitISTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561154 // ISTORE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3464834 "visitCHECKCAST"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 554882 // CHECKCAST
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3464962 "visitFCMPG"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561282 // FCMPG
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3465090 "visitI2F"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561410 // I2F
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3465218 "visitATHROW"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553218 // ATHROW
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3465346 "visitDCMPL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557058 // DCMPL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3465474 "visitARRAYLENGTH"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 552194 // ARRAYLENGTH
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3465602 "visitDUP"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558338 // DUP
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3465730 "visitINVOKESTATIC"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561538 // INVOKESTATIC
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3465858 "visitLCONST"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561666 // LCONST
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3465986 "visitDREM"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557826 // DREM
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3466114 "visitIFGE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561794 // IFGE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3466242 "visitCALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 554626 // CALOAD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3466370 "visitLASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561922 // LASTORE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3466498 "visitI2D"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562050 // I2D
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3466626 "visitDADD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556546 // DADD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3466754 "visitINVOKESPECIAL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562178 // INVOKESPECIAL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3466882 "visitIAND"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562306 // IAND
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3467010 "visitPUTFIELD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562434 // PUTFIELD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3467138 "visitILOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562562 // ILOAD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3467266 "visitDLOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557442 // DLOAD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3467394 "visitDCONST"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557186 // DCONST
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3467522 "visitNEW"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562690 // NEW
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3467650 "visitIFNULL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562818 // IFNULL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3467778 "visitLSUB"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562946 // LSUB
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3467906 "visitL2I"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563074 // L2I
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3468034 "visitISHR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563202 // ISHR
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3468162 "visitTABLESWITCH"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563330 // TABLESWITCH
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3468290 "visitIINC"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563458 // IINC
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3468418 "visitDRETURN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557954 // DRETURN
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3468546 "visitFSTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563586 // FSTORE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3468674 "visitDASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556802 // DASTORE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3468802 "visitIALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563714 // IALOAD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3468930 "visitDDIV"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557314 // DDIV
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3469058 "visitIF_ICMPGE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563842 // IF_ICMPGE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3469186 "visitLAND"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563970 // LAND
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3469314 "visitIDIV"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564098 // IDIV
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3469442 "visitLOR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564226 // LOR
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3469570 "visitCASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 554754 // CASTORE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3469698 "visitFREM"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564354 // FREM
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3469826 "visitLDC"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564482 // LDC
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3469954 "visitBIPUSH"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553730 // BIPUSH
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3470082 "visitDSTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558082 // DSTORE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3470210 "visitF2L"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564610 // F2L
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3470338 "visitFMUL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564738 // FMUL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3470466 "visitLLOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564866 // LLOAD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3470594 "visitJSR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564994 // JSR
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3470722 "visitFSUB"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565122 // FSUB
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3470850 "visitSASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565250 // SASTORE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3470978 "visitALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550786 // ALOAD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3471106 "visitDUP2_X2"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558850 // DUP2_X2
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3471234 "visitRETURN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565378 // RETURN
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3471362 "visitDALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556674 // DALOAD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3471490 "visitSIPUSH"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565506 // SIPUSH
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3471618 "visitDSUB"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558210 // DSUB
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3471746 "visitL2F"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565634 // L2F
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3471874 "visitIF_ICMPGT"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565762 // IF_ICMPGT
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3472002 "visitF2D"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565890 // F2D
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3472130 "visitI2L"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566018 // I2L
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3472258 "visitIF_ACMPNE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566146 // IF_ACMPNE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3472386 "visitPOP"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566274 // POP
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3472514 "visitI2S"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566402 // I2S
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3472642 "visitIFEQ"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566530 // IFEQ
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3472770 "visitSWAP"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566658 // SWAP
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3472898 "visitIOR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566786 // IOR
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3473026 "visitIREM"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566914 // IREM
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3473154 "visitIASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567042 // IASTORE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3473282 "visitNEWARRAY"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567170 // NEWARRAY
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3473410 "visitINVOKEINTERFACE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567298 // INVOKEINTERFACE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3473538 "visitINEG"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567426 // INEG
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3473666 "visitLCMP"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567554 // LCMP
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3473794 "visitJSR_W"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567682 // JSR_W
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3473922 "visitMULTIANEWARRAY"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567810 // MULTIANEWARRAY
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3474050 "visitDUP_X2"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 559106 // DUP_X2
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3474178 "visitSALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567938 // SALOAD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3474306 "visitIFNONNULL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568066 // IFNONNULL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3474434 "visitDMUL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557570 // DMUL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3474562 "visitIFNE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568194 // IFNE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3474690 "visitIF_ICMPLE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568322 // IF_ICMPLE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3474818 "visitLDC2_W"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568450 // LDC2_W
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3474946 "visitGETFIELD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568578 // GETFIELD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3475074 "visitLADD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568706 // LADD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3475202 "visitNOP"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568834 // NOP
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3475330 "visitFALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568962 // FALOAD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3475458 "visitINSTANCEOF"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569090 // INSTANCEOF
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3475586 "visitIFLE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569218 // IFLE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3475714 "visitLXOR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569346 // LXOR
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3475842 "visitLRETURN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569474 // LRETURN
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3475970 "visitFCONST"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569602 // FCONST
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3476098 "visitIUSHR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569730 // IUSHR
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3476226 "visitBALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553474 // BALOAD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3476354 "visitDUP2"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558594 // DUP2
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3476482 "visitIF_ACMPEQ"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569858 // IF_ACMPEQ
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3476610 "visitIMPDEP1"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569986 // IMPDEP1
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3476738 "visitMONITORENTER"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570114 // MONITORENTER
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3476866 "visitLSHL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570242 // LSHL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3476994 "visitDCMPG"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556930 // DCMPG
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3477122 "visitD2L"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556418 // D2L
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3477250 "visitIMPDEP2"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570370 // IMPDEP2
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3477378 "visitL2D"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570498 // L2D
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3477506 "visitRET"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570626 // RET
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3477634 "visitIFGT"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570754 // IFGT
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3477762 "visitIXOR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570882 // IXOR
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3477890 "visitINVOKEVIRTUAL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571010 // INVOKEVIRTUAL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3478018 "visitFASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571138 // FASTORE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3478146 "visitIRETURN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571266 // IRETURN
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3478274 "visitIF_ICMPNE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571394 // IF_ICMPNE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3478402 "visitFLOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571522 // FLOAD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3478530 "visitLDIV"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571650 // LDIV
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3478658 "visitPUTSTATIC"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571778 // PUTSTATIC
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3478786 "visitAALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 548994 // AALOAD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3478914 "visitD2I"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556290 // D2I
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3479042 "visitIF_ICMPEQ"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571906 // IF_ICMPEQ
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3479170 "visitAASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550146 // AASTORE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3479298 "visitARETURN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 551810 // ARETURN
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3479426 "visitDUP2_X1"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558722 // DUP2_X1
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3479554 "visitFNEG"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572034 // FNEG
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3479682 "visitGOTO_W"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572162 // GOTO_W
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3479810 "visitD2F"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556162 // D2F
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3479938 "visitGOTO"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572290 // GOTO
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3480066 "visitISUB"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572418 // ISUB
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3480194 "visitF2I"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572546 // F2I
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3480322 "visitDNEG"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557698 // DNEG
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3480450 "visitICONST"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572674 // ICONST
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3480578 "visitFDIV"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572802 // FDIV
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3480706 "visitI2B"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572930 // I2B
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3480834 "visitLNEG"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573058 // LNEG
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3480962 "visitLREM"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573186 // LREM
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3481090 "visitIMUL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573314 // IMUL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3481218 "visitIADD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573442 // IADD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3481346 "visitLSHR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573570 // LSHR
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3481474 "visitLOOKUPSWITCH"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573698 // LOOKUPSWITCH
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3481602 "visitDUP_X1"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558978 // DUP_X1
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3481730 "visitFCMPL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573826 // FCMPL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3481858 "visitI2C"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573954 // I2C
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3481986 "visitLMUL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 574082 // LMUL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3482114 "visitLUSHR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 574210 // LUSHR
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3482242 "visitISHL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 574338 // ISHL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3482370 "visitLALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 574466 // LALOAD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3482498 "visitASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 552834 // ASTORE
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3482626 "visitANEWARRAY"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 551298 // ANEWARRAY
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3482754 "visitFRETURN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 574594 // FRETURN
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3482882 "visitFADD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 574722 // FADD
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3483010 "visitBREAKPOINT"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 554498 // BREAKPOINT
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 549762 "ExceptionThrower"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denote an instruction that may throw a run-time or a linking
exception (or both) during execution.  This is not quite the truth
as such; because all instructions may throw an
java.lang.VirtualMachineError. These exceptions are omitted.

The Lava Language Specification specifies exactly which
<i>RUN-TIME</i> and which <i>LINKING</i> exceptions each
instruction may throw which is reflected by the implementers.  Due
to the structure of the JVM specification, it may be possible that
an Instruction implementing this interface returns a Class[] of
size 0.

Please note that we speak of an \"exception\" here when we mean any
\"Throwable\" object; so this term is equally used for \"Exception\"
and \"Error\" objects.

@author  <A HREF=\"http://www.inf.fu-berlin.de/~ehaase\">Enver Haase</A>
"
      operation 3416578 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 549890 "TypedInstruction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Get the type associated with an instruction, int for ILOAD, or the type
of the field of a PUTFIELD instruction, e.g..

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      operation 3416706 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 550018 "StackProducer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denote an instruction that may produce a value on top of the stack
(this excludes DUP_X1, e.g.)

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      operation 3417346 "produceStack"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return how many words are produced on stack
"
      end
    end

    class 550146 "AASTORE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


AASTORE -  Store into reference array
<PRE>Stack: ..., arrayref, index, value -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1093250 // <generalisation>
	relation 1093250 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1093250 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1093378 // <realization>
	relation 1093378 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1093378 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3417858 "AASTORE"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Store into reference array
"
      end

      operation 3417986 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 550274 "StackConsumer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denote an instruction that may consume a value from the stack.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      operation 3417730 "consumeStack"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return how many words are consumed from stack
"
      end
    end

    class 550402 "ACONST_NULL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


ACONST_NULL - Push null reference
<PRE>Stack: ... -&gt; ..., null</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1093506 // <generalisation>
	relation 1093506 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1093506 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1093762 // <realization>
	relation 1093762 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1093762 // <realization>
	  b parent class_ref 550530 // PushInstruction
      end

      classrelation 1093890 // <realization>
	relation 1093890 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1093890 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      operation 3418114 "ACONST_NULL"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Push null reference
"
      end

      operation 3418242 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return Type.NULL
"
      end

      operation 3418370 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 550530 "PushInstruction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denotes an unparameterized instruction to produce a value on top of the stack,
such as ILOAD, LDC, SIPUSH, DUP, ICONST, etc.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>

@see ILOAD
@see ICONST
@see LDC
@see DUP
@see SIPUSH
@see GETSTATIC
"
      classrelation 1093634 // <generalisation>
	relation 1093634 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1093634 // <generalisation>
	  b parent class_ref 550018 // StackProducer
      end
    end

    class 550658 "AllocationInstruction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denote family of instructions that allocates space in the heap.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
    end

    class 550786 "ALOAD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


ALOAD - Load reference from local variable
<PRE>Stack: ... -&gt; ..., objectref</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1094658 // <generalisation>
	relation 1094658 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1094658 // <generalisation>
	  b parent class_ref 550914 // LoadInstruction
      end

      operation 3420546 "ALOAD"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3420674 "ALOAD"
	public explicit_return_type ""
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load reference from local variable
@param n index of local variable
"
      end

      operation 3420802 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 550914 "LoadInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denotes an unparameterized instruction to load a value from a local
variable, e.g. ILOAD.

@author <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1094402 // <generalisation>
	relation 1094402 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1094402 // <generalisation>
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1094530 // <realization>
	relation 1094530 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1094530 // <realization>
	  b parent class_ref 550530 // PushInstruction
      end

      operation 3420162 "LoadInstruction"
	package explicit_return_type ""
	nparams 2
	  param in name "canon_tag" explicit_type "short"
	  param in name "c_tag" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
tag and length are defined in readInstruction and initFromFile, respectively.
"
      end

      operation 3420290 "LoadInstruction"
	protected explicit_return_type ""
	nparams 3
	  param in name "opcode" explicit_type "short"
	  param in name "c_tag" explicit_type "short"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param opcode Instruction opcode
@param c_tag Instruction number for compact version, ALOAD_0, e.g.
@param n local variable index (unsigned short)
"
      end

      operation 3420418 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 551042 "LocalVariableInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract super class for instructions dealing with local variables.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1094018 // <generalisation>
	relation 1094018 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1094018 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1094146 // <realization>
	relation 1094146 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1094146 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      classrelation 1094274 // <realization>
	relation 1094274 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1094274 // <realization>
	  b parent class_ref 551170 // IndexedInstruction
      end

      attribute 756226 "n"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " index of referenced variable"
      end

      attribute 756354 "c_tag"
	private explicit_type "short"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " compact version, such as ILOAD_0"
      end

      attribute 756482 "canon_tag"
	private explicit_type "short"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " canonical tag such as ILOAD"
      end

      operation 3418754 "wide"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3418882 "LocalVariableInstruction"
	package explicit_return_type ""
	nparams 2
	  param in name "canon_tag" explicit_type "short"
	  param in name "c_tag" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
tag and length are defined in readInstruction and initFromFile, respectively.
"
      end

      operation 3419010 "LocalVariableInstruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Also used by IINC()!
"
      end

      operation 3419138 "LocalVariableInstruction"
	protected explicit_return_type ""
	nparams 3
	  param in name "opcode" explicit_type "short"
	  param in name "c_tag" explicit_type "short"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param opcode Instruction opcode
@param c_tag Instruction number for compact version, ALOAD_0, e.g.
@param n local variable index (unsigned short)
"
      end

      operation 3419266 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3419394 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "verbose" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Long output format:

&lt;name of opcode&gt; \"[\"&lt;opcode number&gt;\"]\"
\"(\"&lt;length of instruction&gt;\")\" \"&lt;\"&lt; local variable index&gt;\"&gt;\"

@param verbose long/short format switch
@return mnemonic for instruction
"
      end

      operation 3419522 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (e.g. index) from file.
PRE: (ILOAD <= tag <= ALOAD_3) || (ISTORE <= tag <= ASTORE_3)
"
      end

      operation 3419650 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return local variable index  referred by this instruction.
"
      end

      operation 3419778 "setIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the local variable index
"
      end

      operation 3419906 "getCanonicalTag"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return canonical tag for instruction, e.g., ALOAD for ALOAD_0
"
      end

      operation 3420034 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type associated with the instruction -
in case of ALOAD or ASTORE Type.OBJECT is returned.
This is just a bit incorrect, because ALOAD and ASTORE
may work on every ReferenceType (including Type.NULL) and
ASTORE may even work on a ReturnaddressType .
@return type associated with the instruction
"
      end
    end

    class 551170 "IndexedInstruction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denote entity that refers to an index, e.g. local variable instructions,
RET, CPInstruction, etc.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      operation 3418498 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3418626 "setIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 551298 "ANEWARRAY"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "ANEWARRAY -  Create new array of references
<PRE>Stack: ..., count -&gt; ..., arrayref</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1095170 // <generalisation>
	relation 1095170 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1095170 // <generalisation>
	  b parent class_ref 551426 // CPInstruction
      end

      classrelation 1095298 // <realization>
	relation 1095298 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1095298 // <realization>
	  b parent class_ref 551554 // LoadClass
      end

      classrelation 1095426 // <realization>
	relation 1095426 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1095426 // <realization>
	  b parent class_ref 550658 // AllocationInstruction
      end

      classrelation 1095554 // <realization>
	relation 1095554 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1095554 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1095682 // <realization>
	relation 1095682 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1095682 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3422338 "ANEWARRAY"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3422466 "ANEWARRAY"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3422594 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3422722 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end

      operation 3422850 "getLoadClassType"
	public return_type class_ref 551682 // ObjectType
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 551426 "CPInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract super class for instructions that use an index into the
constant pool such as LDC, INVOKEVIRTUAL, etc.

@see ConstantPoolGen
@see LDC
@see INVOKEVIRTUAL

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1094786 // <generalisation>
	relation 1094786 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1094786 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1094914 // <realization>
	relation 1094914 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1094914 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      classrelation 1095042 // <realization>
	relation 1095042 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1095042 // <realization>
	  b parent class_ref 551170 // IndexedInstruction
      end

      attribute 756610 "index"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " index to constant pool"
      end

      operation 3420930 "CPInstruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3421058 "CPInstruction"
	protected explicit_return_type ""
	nparams 2
	  param in name "opcode" explicit_type "short"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param index to constant pool
"
      end

      operation 3421186 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3421314 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "verbose" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Long output format:

&lt;name of opcode&gt; \"[\"&lt;opcode number&gt;\"]\"
\"(\"&lt;length of instruction&gt;\")\" \"&lt;\"&lt; constant pool index&gt;\"&gt;\"

@param verbose long/short format switch
@return mnemonic for instruction
"
      end

      operation 3421442 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "cp" type class_ref 541954 // ConstantPool
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction with symbolic references resolved
"
      end

      operation 3421570 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (i.e., index) from file.
@param bytes input stream
@param wide wide prefix?
"
      end

      operation 3421698 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return index in constant pool referred by this instruction.
"
      end

      operation 3421826 "setIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the index to constant pool.
@param index in  constant pool.
"
      end

      operation 3421954 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return type related with this instruction.
"
      end
    end

    class 551554 "LoadClass"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denotes that an instruction may start the process of loading and resolving
the referenced class in the Virtual Machine.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      operation 3422082 "getLoadClassType"
	public return_type class_ref 551682 // ObjectType
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ObjectType of the referenced class or interface
that may be loaded and resolved.
@return object type that may be loaded or null if a primitive is
referenced
"
      end

      operation 3422210 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type associated with this instruction.
LoadClass instances are always typed, but this type
does not always refer to the type of the class or interface
that it possibly forces to load. For example, GETFIELD would
return the type of the field and not the type of the class
where the field is defined.
If no class is forced to be loaded, <B>null</B> is returned.
An example for this is an ANEWARRAY instruction that creates
an int[][].
@see #getLoadClassType(ConstantPoolGen)
"
      end
    end

    class 551682 "ObjectType"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Denotes reference such as java.lang.String.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1159426 // <generalisation>
	relation 1159426 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1159426 // <generalisation>
	  b parent class_ref 552450 // ReferenceType
      end

      classrelation 1159554 // class_name (<unidirectional association>)
	relation 1159554 --->
	  a role_name "class_name" private
	    comment " Class name of type"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1159554 // class_name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 3587202 "ObjectType"
	public explicit_return_type ""
	nparams 1
	  param inout name "class_name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param class_name fully qualified class name, e.g. java.lang.String
"
      end

      operation 3587330 "getClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return name of referenced class
"
      end

      operation 3587458 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a hash code value for the object.
"
      end

      operation 3587586 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "type" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return true if both type objects refer to the same class.
"
      end

      operation 3587714 "referencesClass"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If \"this\" doesn't reference a class, it references an interface
or a non-existant entity.
"
      end

      operation 3587842 "referencesInterface"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If \"this\" doesn't reference an interface, it references a class
or a non-existant entity.
"
      end

      operation 3587970 "subclassOf"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "superclass" type class_ref 551682 // ObjectType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3588098 "accessibleTo"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "accessor" type class_ref 551682 // ObjectType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Java Virtual Machine Specification edition 2, 5.4.4 Access Control
"
      end
    end

    class 551810 "ARETURN"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


ARETURN -  Return reference from method
<PRE>Stack: ..., objectref -&gt; &lt;empty&gt;</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1096322 // <generalisation>
	relation 1096322 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1096322 // <generalisation>
	  b parent class_ref 551938 // ReturnInstruction
      end

      operation 3423618 "ARETURN"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return reference from method
"
      end

      operation 3423746 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 551938 "ReturnInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Super class for the xRETURN family of instructions.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1095810 // <generalisation>
	relation 1095810 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1095810 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1095938 // <realization>
	relation 1095938 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1095938 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1096066 // <realization>
	relation 1096066 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1096066 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      classrelation 1096194 // <realization>
	relation 1096194 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1096194 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3422978 "ReturnInstruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3423106 "ReturnInstruction"
	protected explicit_return_type ""
	nparams 1
	  param in name "opcode" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param opcode of instruction
"
      end

      operation 3423234 "getType"
	public return_type class_ref 547330 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3423362 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3423490 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return type associated with the instruction
"
      end
    end

    class 552066 "ArithmeticInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Super class for the family of arithmetic instructions.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1096450 // <generalisation>
	relation 1096450 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1096450 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1096578 // <realization>
	relation 1096578 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1096578 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      classrelation 1096706 // <realization>
	relation 1096706 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1096706 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      classrelation 1096834 // <realization>
	relation 1096834 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1096834 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3423874 "ArithmeticInstruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3424002 "ArithmeticInstruction"
	protected explicit_return_type ""
	nparams 1
	  param in name "opcode" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param opcode of instruction
"
      end

      operation 3424130 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return type associated with the instruction
"
      end
    end

    class 552194 "ARRAYLENGTH"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


ARRAYLENGTH -  Get length of array
<PRE>Stack: ..., arrayref -&gt; ..., length</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1096962 // <generalisation>
	relation 1096962 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1096962 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1097090 // <realization>
	relation 1097090 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1097090 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1097218 // <realization>
	relation 1097218 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1097218 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3424258 "ARRAYLENGTH"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get length of array
"
      end

      operation 3424386 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return exceptions this instruction may cause
"
      end

      operation 3424514 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 552322 "ArrayType"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Denotes array type, such as int[][]

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1099778 // <generalisation>
	relation 1099778 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1099778 // <generalisation>
	  b parent class_ref 552450 // ReferenceType
      end

      attribute 756994 "dimensions"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1099906 // basic_type (<unidirectional association>)
	relation 1099906 --->
	  a role_name "basic_type" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1099906 // basic_type (<unidirectional association>)
	  b parent class_ref 547330 // Type
      end

      operation 3426818 "ArrayType"
	public explicit_return_type ""
	nparams 2
	  param in name "type" explicit_type "byte"
	  param in name "dimensions" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience constructor for array type, e.g. int[]

@param type array type, e.g. T_INT
"
      end

      operation 3426946 "ArrayType"
	public explicit_return_type ""
	nparams 2
	  param inout name "class_name" type class_ref 128130 // String
	  param in name "dimensions" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience constructor for reference array type, e.g. Object[]

@param class_name complete name of class (java.lang.String, e.g.)
"
      end

      operation 3427074 "ArrayType"
	public explicit_return_type ""
	nparams 2
	  param inout name "type" type class_ref 547330 // Type
	  param in name "dimensions" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for array of given type

@param type type of array (may be an array itself)
"
      end

      operation 3427202 "getBasicType"
	public return_type class_ref 547330 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return basic type of array, i.e., for int[][][] the basic type is int
"
      end

      operation 3427330 "getElementType"
	public return_type class_ref 547330 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return element type of array, i.e., for int[][][] the element type is int[][]
"
      end

      operation 3427458 "getDimensions"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return number of dimensions of array
"
      end

      operation 3427586 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a hash code value for the object.
"
      end

      operation 3427714 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "type" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return true if both type objects refer to the same array type.
"
      end
    end

    class 552450 "ReferenceType"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Super class for object and array types.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1099650 // <generalisation>
	relation 1099650 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1099650 // <generalisation>
	  b parent class_ref 547330 // Type
      end

      operation 3426050 "ReferenceType"
	protected explicit_return_type ""
	nparams 2
	  param in name "t" explicit_type "byte"
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3426178 "ReferenceType"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Class is non-abstract but not instantiable from the outside
"
      end

      operation 3426306 "isCastableTo"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "t" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true iff this type is castable to another type t as defined in
the JVM specification.  The case where this is Type.NULL is not
defined (see the CHECKCAST definition in the JVM specification).
However, because e.g. CHECKCAST doesn't throw a
ClassCastException when casting a null reference to any Object,
true is returned in this case.
"
      end

      operation 3426434 "isAssignmentCompatibleWith"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "t" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true iff this is assignment compatible with another type t
as defined in the JVM specification; see the AASTORE definition
there.
"
      end

      operation 3426562 "getFirstCommonSuperclass"
	public return_type class_ref 552450 // ReferenceType
	nparams 1
	  param inout name "t" type class_ref 552450 // ReferenceType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This commutative operation returns the first common superclass (narrowest ReferenceType
referencing a class, not an interface).
If one of the types is a superclass of the other, the former is returned.
If \"this\" is Type.NULL, then t is returned.
If t is Type.NULL, then \"this\" is returned.
If \"this\" equals t ['this.equals(t)'] \"this\" is returned.
If \"this\" or t is an ArrayType, then Type.OBJECT is returned;
unless their dimensions match. Then an ArrayType of the same
number of dimensions is returned, with its basic type being the
first common super class of the basic types of \"this\" and t.
If \"this\" or t is a ReferenceType referencing an interface, then Type.OBJECT is returned.
If not all of the two classes' superclasses cannot be found, \"null\" is returned.
See the JVM specification edition 2, \"4.9.2 The Bytecode Verifier\".
"
      end

      operation 3426690 "firstCommonSuperclass"
	public return_type class_ref 552450 // ReferenceType
	nparams 1
	  param inout name "t" type class_ref 552450 // ReferenceType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This commutative operation returns the first common superclass (narrowest ReferenceType
referencing a class, not an interface).
If one of the types is a superclass of the other, the former is returned.
If \"this\" is Type.NULL, then t is returned.
If t is Type.NULL, then \"this\" is returned.
If \"this\" equals t ['this.equals(t)'] \"this\" is returned.
If \"this\" or t is an ArrayType, then Type.OBJECT is returned.
If \"this\" or t is a ReferenceType referencing an interface, then Type.OBJECT is returned.
If not all of the two classes' superclasses cannot be found, \"null\" is returned.
See the JVM specification edition 2, \"4.9.2 The Bytecode Verifier\".

@deprecated use getFirstCommonSuperclass(ReferenceType t) which has
            slightly changed semantics.
"
      end
    end

    class 552578 "BasicType"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Denotes basic type such as int.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1101186 // <generalisation>
	relation 1101186 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1101186 // <generalisation>
	  b parent class_ref 547330 // Type
      end

      operation 3429250 "BasicType"
	package explicit_return_type ""
	nparams 1
	  param in name "type" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for basic types such as int, long, `void'

@param type one of T_INT, T_BOOLEAN, ..., T_VOID
@see com.sun.org.apache.bcel.internal.Constants
"
      end

      operation 3429378 "getType"
	class_operation public return_type class_ref 552578 // BasicType
	nparams 1
	  param in name "type" explicit_type "byte"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3429506 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "type" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " @return true if both type objects refer to the same type
"
      end

      operation 3429634 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 552834 "ASTORE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


ASTORE - Store reference into local variable
<PRE>Stack ..., objectref -&gt; ... </PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1100418 // <generalisation>
	relation 1100418 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1100418 // <generalisation>
	  b parent class_ref 552962 // StoreInstruction
      end

      operation 3428226 "ASTORE"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3428354 "ASTORE"
	public explicit_return_type ""
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Store reference into local variable
@param n index of local variable
"
      end

      operation 3428482 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 552962 "StoreInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denotes an unparameterized instruction to store a value into a local variable,
e.g. ISTORE.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1100034 // <generalisation>
	relation 1100034 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1100034 // <generalisation>
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1100290 // <realization>
	relation 1100290 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1100290 // <realization>
	  b parent class_ref 553090 // PopInstruction
      end

      operation 3427842 "StoreInstruction"
	package explicit_return_type ""
	nparams 2
	  param in name "canon_tag" explicit_type "short"
	  param in name "c_tag" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
tag and length are defined in readInstruction and initFromFile, respectively.
"
      end

      operation 3427970 "StoreInstruction"
	protected explicit_return_type ""
	nparams 3
	  param in name "opcode" explicit_type "short"
	  param in name "c_tag" explicit_type "short"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param opcode Instruction opcode
@param c_tag Instruction number for compact version, ASTORE_0, e.g.
@param n local variable index (unsigned short)
"
      end

      operation 3428098 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 553090 "PopInstruction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denotes an unparameterized instruction to pop a value on top from the stack,
such as ISTORE, POP, PUTSTATIC.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@see ISTORE
@see POP
"
      classrelation 1100162 // <generalisation>
	relation 1100162 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1100162 // <generalisation>
	  b parent class_ref 550274 // StackConsumer
      end
    end

    class 553218 "ATHROW"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


ATHROW -  Throw exception
<PRE>Stack: ..., objectref -&gt; objectref</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1100546 // <generalisation>
	relation 1100546 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1100546 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1100674 // <realization>
	relation 1100674 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1100674 // <realization>
	  b parent class_ref 553346 // UnconditionalBranch
      end

      classrelation 1100802 // <realization>
	relation 1100802 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1100802 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      operation 3428610 "ATHROW"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Throw exception
"
      end

      operation 3428738 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return exceptions this instruction may cause
"
      end

      operation 3428866 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 553346 "UnconditionalBranch"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denotes an instruction to perform an unconditional branch, i.e., GOTO, JSR.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>

@see GOTO
@see JSR
"
    end

    class 553474 "BALOAD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


BALOAD - Load byte or boolean from array
<PRE>Stack: ..., arrayref, index -&gt; ..., value</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1100930 // <generalisation>
	relation 1100930 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1100930 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1101058 // <realization>
	relation 1101058 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1101058 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3428994 "BALOAD"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load byte or boolean from array
"
      end

      operation 3429122 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 553602 "BASTORE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


BASTORE -  Store into byte or boolean array
<PRE>Stack: ..., arrayref, index, value -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1101314 // <generalisation>
	relation 1101314 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1101314 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1101442 // <realization>
	relation 1101442 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1101442 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3429762 "BASTORE"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Store byte or boolean into array
"
      end

      operation 3429890 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 553730 "BIPUSH"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "BIPUSH - Push byte on stack

<PRE>Stack: ... -&gt; ..., value</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1101570 // <generalisation>
	relation 1101570 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1101570 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1101954 // <realization>
	relation 1101954 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1101954 // <realization>
	  b parent class_ref 553858 // ConstantPushInstruction
      end

      attribute 757122 "b"
	private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3430146 "BIPUSH"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3430274 "BIPUSH"
	public explicit_return_type ""
	nparams 1
	  param in name "b" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Push byte on stack
"
      end

      operation 3430402 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
"
      end

      operation 3430530 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "verbose" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction
"
      end

      operation 3430658 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (e.g. index) from file.
"
      end

      operation 3430786 "getValue"
	public return_type class_ref 398210 // Number
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3430914 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return Type.BYTE
"
      end

      operation 3431042 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 553858 "ConstantPushInstruction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denotes a push instruction that produces a literal on the stack
such as  SIPUSH, BIPUSH, ICONST, etc.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>

@see ICONST
@see SIPUSH
"
      classrelation 1101698 // <generalisation>
	relation 1101698 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1101698 // <generalisation>
	  b parent class_ref 550530 // PushInstruction
      end

      classrelation 1101826 // <generalisation>
	relation 1101826 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1101826 // <generalisation>
	  b parent class_ref 549890 // TypedInstruction
      end

      operation 3430018 "getValue"
	public return_type class_ref 398210 // Number
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 553986 "BranchHandle"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


BranchHandle is returned by specialized InstructionList.append() whenever a
BranchInstruction is appended. This is useful when the target of this
instruction is not known at time of creation and must be set later
via setTarget().

@see InstructionHandle
@see Instruction
@see InstructionList
@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1102978 // <generalisation>
	relation 1102978 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1102978 // <generalisation>
	  b parent class_ref 554114 // InstructionHandle
      end

      classrelation 1103106 // bi (<unidirectional association>)
	relation 1103106 --->
	  a role_name "bi" private
	    comment " An alias in fact, but saves lots of casts"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1103106 // bi (<unidirectional association>)
	  b parent class_ref 554370 // BranchInstruction
      end

      operation 3434242 "BranchHandle"
	private explicit_return_type ""
	nparams 1
	  param inout name "i" type class_ref 554370 // BranchInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1103234 // bh_list (<unidirectional association>)
	relation 1103234 --->
	  a role_name "bh_list" init_value " null" class_relation private
	    comment " Factory methods.

 List of reusable handles"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1103234 // bh_list (<unidirectional association>)
	  b parent class_ref 553986 // BranchHandle
      end

      operation 3434370 "getBranchHandle"
	class_operation package return_type class_ref 553986 // BranchHandle
	nparams 1
	  param inout name "i" type class_ref 554370 // BranchInstruction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3434498 "addHandle"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Handle adds itself to the list of resuable handles.
"
      end

      operation 3434626 "getPosition"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Override InstructionHandle methods: delegate to branch instruction.
Through this overriding all access to the private i_position field should
be prevented.
"
      end

      operation 3434754 "setPosition"
	package explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3434882 "updatePosition"
	protected explicit_return_type "int"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "max_offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3435010 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pass new target to instruction.
"
      end

      operation 3435138 "updateTarget"
	public explicit_return_type "void"
	nparams 2
	  param inout name "old_ih" type class_ref 554114 // InstructionHandle
	  param inout name "new_ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Update target of instruction.
"
      end

      operation 3435266 "getTarget"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return target of instruction.
"
      end

      operation 3435394 "setInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "i" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set new contents. Old instruction is disposed and may not be used anymore.
"
      end
    end

    class 554114 "InstructionHandle"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Instances of this class give users a handle to the instructions contained in
an InstructionList. Instruction objects may be used more than once within a
list, this is useful because it saves memory and may be much faster.

Within an InstructionList an InstructionHandle object is wrapped
around all instructions, i.e., it implements a cell in a
doubly-linked list. From the outside only the next and the
previous instruction (handle) are accessible. One
can traverse the list via an Enumeration returned by
InstructionList.elements().

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@see Instruction
@see BranchHandle
@see InstructionList
"
      classrelation 1102082 // <realization>
	relation 1102082 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1102082 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 1102210 // next (<unidirectional association>)
	relation 1102210 --->
	  a role_name "next" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1102210 // next (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      classrelation 1102338 // prev (<unidirectional association>)
	relation 1102338 --->
	  a role_name "prev" package
	    comment " Will be set from the outside"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1102338 // prev (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      classrelation 1102466 // instruction (<unidirectional association>)
	relation 1102466 --->
	  a role_name "instruction" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1102466 // instruction (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      attribute 757250 "i_position"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " byte code offset of instruction"
      end

      classrelation 1102594 // targeters (<unidirectional association>)
	relation 1102594 --->
	  a role_name "targeters" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1102594 // targeters (<unidirectional association>)
	  b parent class_ref 388482 // HashSet
      end

      classrelation 1102722 // attributes (<unidirectional association>)
	relation 1102722 --->
	  a role_name "attributes" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1102722 // attributes (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      operation 3431170 "getNext"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3431298 "getPrev"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3431426 "getInstruction"
	public return_type class_ref 549250 // Instruction
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3431554 "setInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "i" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace current instruction contained in this handle.
Old instruction is disposed using Instruction.dispose().
"
      end

      operation 3431682 "swapInstruction"
	public return_type class_ref 549250 // Instruction
	nparams 1
	  param inout name "i" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Temporarily swap the current instruction, without disturbing
anything. Meant to be used by a debugger, implementing
breakpoints. Current instruction is returned.
"
      end

      operation 3431810 "InstructionHandle"
	protected explicit_return_type ""
	nparams 1
	  param inout name "i" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "private"
      end

      classrelation 1102850 // ih_list (<unidirectional association>)
	relation 1102850 --->
	  a role_name "ih_list" init_value " null" class_relation private
	    comment " List of reusable handles"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1102850 // ih_list (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      operation 3431938 "getInstructionHandle"
	class_operation package return_type class_ref 554114 // InstructionHandle
	nparams 1
	  param inout name "i" type class_ref 549250 // Instruction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Factory method.
"
      end

      operation 3432066 "updatePosition"
	protected explicit_return_type "int"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "max_offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by InstructionList.setPositions when setting the position for every
instruction. In the presence of variable length instructions `setPositions()'
performs multiple passes over the instruction list to calculate the
correct (byte) positions and offsets by calling this function.

@param offset additional offset caused by preceding (variable length) instructions
@param max_offset the maximum offset that may be caused by these instructions
@return additional offset caused by possible change of this instruction's length
"
      end

      operation 3432194 "getPosition"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return the position, i.e., the byte code offset of the contained
instruction. This is accurate only after
InstructionList.setPositions() has been called.
"
      end

      operation 3432322 "setPosition"
	package explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set the position, i.e., the byte code offset of the contained
instruction.
"
      end

      operation 3432450 "addHandle"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Overridden in BranchHandle
"
      end

      operation 3432578 "dispose"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Delete contents, i.e., remove user access and make handle reusable.
"
      end

      operation 3432706 "removeAllTargeters"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Remove all targeters, if any.
"
      end

      operation 3432834 "removeTargeter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 554242 // InstructionTargeter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Denote this handle isn't referenced anymore by t.
"
      end

      operation 3432962 "addTargeter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 554242 // InstructionTargeter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Denote this handle is being referenced by t.
"
      end

      operation 3433090 "hasTargeters"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3433218 "getTargeters"
	public return_type class_ref 554242 // InstructionTargeter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return null, if there are no targeters
"
      end

      operation 3433346 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "verbose" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a (verbose) string representation of the contained instruction.
"
      end

      operation 3433474 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return a string representation of the contained instruction.
"
      end

      operation 3433602 "addAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "attr" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add an attribute to an instruction handle.

@param key the key object to store/retrieve the attribute
@param attr the attribute to associate with this handle
"
      end

      operation 3433730 "removeAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Delete an attribute of an instruction handle.

@param key the key object to retrieve the attribute
"
      end

      operation 3433858 "getAttribute"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get attribute of an instruction handle.

@param key the key object to store/retrieve the attribute
"
      end

      operation 3433986 "getAttributes"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return all attributes associated with this handle
"
      end

      operation 3434114 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convenience method, simply calls accept() on the contained instruction.

@param v Visitor object
"
      end
    end

    class 554242 "InstructionTargeter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denote that a class targets InstructionHandles within an InstructionList. Namely
the following implementers:

@see BranchHandle
@see LocalVariableGen
@see CodeExceptionGen
@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      operation 3435522 "containsTarget"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3435650 "updateTarget"
	public explicit_return_type "void"
	nparams 2
	  param inout name "old_ih" type class_ref 554114 // InstructionHandle
	  param inout name "new_ih" type class_ref 554114 // InstructionHandle
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 554370 "BranchInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract super class for branching instructions like GOTO, IFEQ, etc..
Branch instructions may have a variable length, namely GOTO, JSR,
LOOKUPSWITCH and TABLESWITCH.

@see InstructionList
@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1103362 // <generalisation>
	relation 1103362 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1103362 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1103490 // <realization>
	relation 1103490 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1103490 // <realization>
	  b parent class_ref 554242 // InstructionTargeter
      end

      attribute 757378 "index"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Branch target relative to this instruction"
      end

      classrelation 1103618 // target (<unidirectional association>)
	relation 1103618 --->
	  a role_name "target" protected
	    comment " Target object in instruction list"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1103618 // target (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      attribute 757506 "position"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Byte code offset"
      end

      operation 3435778 "BranchInstruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3435906 "BranchInstruction"
	protected explicit_return_type ""
	nparams 2
	  param in name "opcode" explicit_type "short"
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Common super constructor
@param opcodee Instruction opcode
@param target instruction to branch to
"
      end

      operation 3436034 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3436162 "getTargetOffset"
	protected explicit_return_type "int"
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param target branch target
@return the offset to  `target' relative to this instruction
"
      end

      operation 3436290 "getTargetOffset"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return the offset to this instruction's target
"
      end

      operation 3436418 "updatePosition"
	protected explicit_return_type "int"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "max_offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by InstructionList.setPositions when setting the position for every
instruction. In the presence of variable length instructions `setPositions'
performs multiple passes over the instruction list to calculate the
correct (byte) positions and offsets by calling this function.

@param offset additional offset caused by preceding (variable length) instructions
@param max_offset the maximum offset that may be caused by these instructions
@return additional offset caused by possible change of this instruction's length
"
      end

      operation 3436546 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "verbose" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Long output format:

&lt;position in byte code&gt;
&lt;name of opcode&gt; \"[\"&lt;opcode number&gt;\"]\"
\"(\"&lt;length of instruction&gt;\")\"
\"&lt;\"&lt;target instruction&gt;\"&gt;\" \"@\"&lt;branch target offset&gt;

@param verbose long/short format switch
@return mnemonic for instruction
"
      end

      operation 3436674 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Read needed data (e.g. index) from file. Conversion to a InstructionHandle
is done in InstructionList(byte[]).

@param bytes input stream
@param wide wide prefix?
@see InstructionList
"
      end

      operation 3436802 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return target offset in byte code
"
      end

      operation 3436930 "getTarget"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return target of branch instruction
"
      end

      operation 3437058 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set branch target
@param target branch target
"
      end

      operation 3437186 "notifyTargetChanging"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "old_ih" type class_ref 554114 // InstructionHandle
	  param inout name "t" type class_ref 554242 // InstructionTargeter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by BranchInstruction, LocalVariableGen, CodeExceptionGen.
Must be called before the target is actually changed in the
InstructionTargeter.
"
      end

      operation 3437314 "notifyTargetChanged"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "new_ih" type class_ref 554114 // InstructionHandle
	  param inout name "t" type class_ref 554242 // InstructionTargeter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by BranchInstruction, LocalVariableGen, CodeExceptionGen.
Must be called after the target is actually changed in the
InstructionTargeter.
"
      end

      operation 3437442 "updateTarget"
	public explicit_return_type "void"
	nparams 2
	  param inout name "old_ih" type class_ref 554114 // InstructionHandle
	  param inout name "new_ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@param old_ih old target
@param new_ih new target
"
      end

      operation 3437570 "containsTarget"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@return true, if ih is target of this instruction
"
      end

      operation 3437698 "dispose"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Inform target that it's not targeted anymore.
"
      end
    end

    class 554498 "BREAKPOINT"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


BREAKPOINT, JVM dependent, ignored by default

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1103746 // <generalisation>
	relation 1103746 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1103746 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      operation 3437826 "BREAKPOINT"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3437954 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 554626 "CALOAD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


CALOAD - Load char from array
<PRE>Stack: ..., arrayref, index -&gt; ..., value</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1103874 // <generalisation>
	relation 1103874 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1103874 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1104002 // <realization>
	relation 1104002 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1104002 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3438082 "CALOAD"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load char from array
"
      end

      operation 3438210 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 554754 "CASTORE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


CASTORE -  Store into char array
<PRE>Stack: ..., arrayref, index, value -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1104130 // <generalisation>
	relation 1104130 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1104130 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1104258 // <realization>
	relation 1104258 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1104258 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3438338 "CASTORE"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Store char into array
"
      end

      operation 3438466 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 554882 "CHECKCAST"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "CHECKCAST - Check whether object is of given type
<PRE>Stack: ..., objectref -&gt; ..., objectref</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1104386 // <generalisation>
	relation 1104386 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1104386 // <generalisation>
	  b parent class_ref 551426 // CPInstruction
      end

      classrelation 1104514 // <realization>
	relation 1104514 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1104514 // <realization>
	  b parent class_ref 551554 // LoadClass
      end

      classrelation 1104642 // <realization>
	relation 1104642 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1104642 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1104770 // <realization>
	relation 1104770 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1104770 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      classrelation 1104898 // <realization>
	relation 1104898 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1104898 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3438594 "CHECKCAST"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3438722 "CHECKCAST"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check whether object is of given type
@param n index to class in constant pool
"
      end

      operation 3438850 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return exceptions this instruction may cause
"
      end

      operation 3438978 "getLoadClassType"
	public return_type class_ref 551682 // ObjectType
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3439106 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 555010 "ClassGen"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Template class for building up a java class. May be initialized with an
existing java class (file).

@see JavaClass
@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1105026 // <generalisation>
	relation 1105026 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1105026 // <generalisation>
	  b parent class_ref 541442 // AccessFlags
      end

      classrelation 1105154 // <realization>
	relation 1105154 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1105154 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 1105282 // class_name (<unidirectional association>)
	relation 1105282 --->
	  a role_name "class_name" private
	    comment " Corresponds to the fields found in a JavaClass object.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1105282 // class_name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1105410 // super_class_name (<unidirectional association>)
	relation 1105410 --->
	  a role_name "super_class_name" private
	    comment " Corresponds to the fields found in a JavaClass object.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1105410 // super_class_name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1105538 // file_name (<unidirectional association>)
	relation 1105538 --->
	  a role_name "file_name" private
	    comment " Corresponds to the fields found in a JavaClass object.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1105538 // file_name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 757634 "class_name_index"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 757762 "superclass_name_index"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 757890 "major"
	private explicit_type "int"
	init_value " Constants.MAJOR_1_1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 758018 "minor"
	private explicit_type "int"
	init_value " Constants.MINOR_1_1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1105666 // cp (<unidirectional association>)
	relation 1105666 --->
	  a role_name "cp" private
	    comment " Template for building up constant pool"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1105666 // cp (<unidirectional association>)
	  b parent class_ref 549506 // ConstantPoolGen
      end

      classrelation 1105794 // field_vec (<unidirectional association>)
	relation 1105794 --->
	  a role_name "field_vec" init_value " new ArrayList()" private
	    comment " ArrayLists instead of arrays to gather fields, methods, etc.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1105794 // field_vec (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      classrelation 1105922 // method_vec (<unidirectional association>)
	relation 1105922 --->
	  a role_name "method_vec" init_value " new ArrayList()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1105922 // method_vec (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      classrelation 1106050 // attribute_vec (<unidirectional association>)
	relation 1106050 --->
	  a role_name "attribute_vec" init_value " new ArrayList()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1106050 // attribute_vec (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      classrelation 1106178 // interface_vec (<unidirectional association>)
	relation 1106178 --->
	  a role_name "interface_vec" init_value " new ArrayList()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1106178 // interface_vec (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      operation 3439234 "ClassGen"
	public explicit_return_type ""
	nparams 6
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "super_class_name" type class_ref 128130 // String
	  param inout name "file_name" type class_ref 128130 // String
	  param in name "access_flags" explicit_type "int"
	  param inout name "interfaces" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convenience constructor to set up some important values initially.

@param class_name fully qualified class name
@param super_class_name fully qualified superclass name
@param file_name source file name
@param access_flags access qualifiers
@param interfaces implemented interfaces
@param cp constant pool to use
"
      end

      operation 3439362 "ClassGen"
	public explicit_return_type ""
	nparams 5
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "super_class_name" type class_ref 128130 // String
	  param inout name "file_name" type class_ref 128130 // String
	  param in name "access_flags" explicit_type "int"
	  param inout name "interfaces" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convenience constructor to set up some important values initially.

@param class_name fully qualified class name
@param super_class_name fully qualified superclass name
@param file_name source file name
@param access_flags access qualifiers
@param interfaces implemented interfaces
"
      end

      operation 3439490 "ClassGen"
	public explicit_return_type ""
	nparams 1
	  param inout name "clazz" type class_ref 541058 // JavaClass
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize with existing class.
@param clazz JavaClass object (e.g. read from file)
"
      end

      operation 3439618 "getJavaClass"
	public return_type class_ref 541058 // JavaClass
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return the (finally) built up Java class object.
"
      end

      operation 3439746 "addInterface"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add an interface to this class, i.e., this class has to implement it.
@param name interface to implement (fully qualified class name)
"
      end

      operation 3439874 "removeInterface"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove an interface from this class.
@param name interface to remove (fully qualified name)
"
      end

      operation 3440002 "getMajor"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return major version number of class file
"
      end

      operation 3440130 "setMajor"
	public explicit_return_type "void"
	nparams 1
	  param in name "major" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set major version number of class file, default value is 45 (JDK 1.1)
@param major major version number
"
      end

      operation 3440258 "setMinor"
	public explicit_return_type "void"
	nparams 1
	  param in name "minor" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set minor version number of class file, default value is 3 (JDK 1.1)
@param minor minor version number
"
      end

      operation 3440386 "getMinor"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return minor version number of class file
"
      end

      operation 3440514 "addAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a" type class_ref 541570 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add an attribute to this class.
@param a attribute to add
"
      end

      operation 3440642 "addMethod"
	public explicit_return_type "void"
	nparams 1
	  param inout name "m" type class_ref 542722 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a method to this class.
@param m method to add
"
      end

      operation 3440770 "addEmptyConstructor"
	public explicit_return_type "void"
	nparams 1
	  param in name "access_flags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method.

Add an empty constructor to this class that does nothing but calling super().
@param access rights for constructor
"
      end

      operation 3440898 "addField"
	public explicit_return_type "void"
	nparams 1
	  param inout name "f" type class_ref 542594 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a field to this class.
@param f field to add
"
      end

      operation 3441026 "containsField"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 542594 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3441154 "containsField"
	public return_type class_ref 542594 // Field
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return field object with given name, or null
"
      end

      operation 3441282 "containsMethod"
	public return_type class_ref 542722 // Method
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "signature" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return method object with given name and signature, or null
"
      end

      operation 3441410 "removeAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a" type class_ref 541570 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove an attribute from this class.
@param a attribute to remove
"
      end

      operation 3441538 "removeMethod"
	public explicit_return_type "void"
	nparams 1
	  param inout name "m" type class_ref 542722 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a method from this class.
@param m method to remove
"
      end

      operation 3441666 "replaceMethod"
	public explicit_return_type "void"
	nparams 2
	  param inout name "old" type class_ref 542722 // Method
	  param inout name "new_" type class_ref 542722 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Replace given method with new one. If the old one does not exist
add the new_ method to the class anyway.
"
      end

      operation 3441794 "replaceField"
	public explicit_return_type "void"
	nparams 2
	  param inout name "old" type class_ref 542594 // Field
	  param inout name "new_" type class_ref 542594 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Replace given field with new one. If the old one does not exist
add the new_ field to the class anyway.
"
      end

      operation 3441922 "removeField"
	public explicit_return_type "void"
	nparams 1
	  param inout name "f" type class_ref 542594 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a field to this class.
@param f field to remove
"
      end

      operation 3442050 "getClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3442178 "getSuperclassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3442306 "getFileName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3442434 "setClassName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3442562 "setSuperclassName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3442690 "getMethods"
	public return_type class_ref 542722 // Method
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3442818 "setMethods"
	public explicit_return_type "void"
	nparams 1
	  param inout name "methods" type class_ref 542722 // Method
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3442946 "setMethodAt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "method" type class_ref 542722 // Method
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3443074 "getMethodAt"
	public return_type class_ref 542722 // Method
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3443202 "getInterfaceNames"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3443330 "getInterfaces"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3443458 "getFields"
	public return_type class_ref 542594 // Field
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3443586 "getAttributes"
	public return_type class_ref 541570 // Attribute
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3443714 "getConstantPool"
	public return_type class_ref 549506 // ConstantPoolGen
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3443842 "setConstantPool"
	public explicit_return_type "void"
	nparams 1
	  param inout name "constant_pool" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3443970 "setClassNameIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "class_name_index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3444098 "setSuperclassNameIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "superclass_name_index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3444226 "getSuperclassNameIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3444354 "getClassNameIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1106306 // observers (<unidirectional association>)
	relation 1106306 --->
	  a role_name "observers" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1106306 // observers (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      operation 3444482 "addObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 555138 // ClassObserver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add observer for this object.
"
      end

      operation 3444610 "removeObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 555138 // ClassObserver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Remove observer for this object.
"
      end

      operation 3444738 "update"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Call notify() method on all observers. This method is not called
automatically whenever the state has changed, but has to be
called by the user after he has finished editing the object.
"
      end

      operation 3444866 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 555138 "ClassObserver"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Implement this interface if you're interested in changes to a ClassGen object
and register yourself with addObserver().

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      operation 3445250 "notify"
	public explicit_return_type "void"
	nparams 1
	  param inout name "clazz" type class_ref 555010 // ClassGen
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 555266 "ClassGenException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Thrown on internal errors. Extends RuntimeException so it hasn't to be declared
in the throws clause every time.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1106434 // <generalisation>
	relation 1106434 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1106434 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      operation 3444994 "ClassGenException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3445122 "ClassGenException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 555394 "CodeExceptionGen"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents an exception handler, i.e., specifies the  region where
a handler is active and an instruction where the actual handling is done.
pool as parameters. Opposed to the JVM specification the end of the handled
region is set to be inclusive, i.e. all instructions between start and end
are protected including the start and end instructions (handles) themselves.
The end of the region is automatically mapped to be exclusive when calling
getCodeException(), i.e., there is no difference semantically.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@see     MethodGen
@see     CodeException
@see     InstructionHandle
"
      classrelation 1106562 // <realization>
	relation 1106562 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1106562 // <realization>
	  b parent class_ref 554242 // InstructionTargeter
      end

      classrelation 1106690 // <realization>
	relation 1106690 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1106690 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 1106818 // <realization>
	relation 1106818 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1106818 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 1106946 // start_pc (<unidirectional association>)
	relation 1106946 --->
	  a role_name "start_pc" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1106946 // start_pc (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      classrelation 1107074 // end_pc (<unidirectional association>)
	relation 1107074 --->
	  a role_name "end_pc" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1107074 // end_pc (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      classrelation 1107202 // handler_pc (<unidirectional association>)
	relation 1107202 --->
	  a role_name "handler_pc" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1107202 // handler_pc (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      classrelation 1107330 // catch_type (<unidirectional association>)
	relation 1107330 --->
	  a role_name "catch_type" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1107330 // catch_type (<unidirectional association>)
	  b parent class_ref 551682 // ObjectType
      end

      operation 3445378 "CodeExceptionGen"
	public explicit_return_type ""
	nparams 4
	  param inout name "start_pc" type class_ref 554114 // InstructionHandle
	  param inout name "end_pc" type class_ref 554114 // InstructionHandle
	  param inout name "handler_pc" type class_ref 554114 // InstructionHandle
	  param inout name "catch_type" type class_ref 551682 // ObjectType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add an exception handler, i.e., specify region where a handler is active and an
instruction where the actual handling is done.

@param start_pc Start of handled region (inclusive)
@param end_pc End of handled region (inclusive)
@param handler_pc Where handling is done
@param catch_type which exception is handled, null for ANY
"
      end

      operation 3445506 "getCodeException"
	public return_type class_ref 542978 // CodeException
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get CodeException object.<BR>

This relies on that the instruction list has already been dumped
to byte code or or that the `setPositions' methods has been
called for the instruction list.

@param cp constant pool
"
      end

      operation 3445634 "setStartPC"
	public explicit_return_type "void"
	nparams 1
	  param inout name "start_pc" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set start of handler
@param start_pc Start of handled region (inclusive)
"
      end

      operation 3445762 "setEndPC"
	public explicit_return_type "void"
	nparams 1
	  param inout name "end_pc" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set end of handler
@param end_pc End of handled region (inclusive)
"
      end

      operation 3445890 "setHandlerPC"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler_pc" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set handler code
@param handler_pc Start of handler
"
      end

      operation 3446018 "updateTarget"
	public explicit_return_type "void"
	nparams 2
	  param inout name "old_ih" type class_ref 554114 // InstructionHandle
	  param inout name "new_ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@param old_ih old target, either start or end
@param new_ih new target
"
      end

      operation 3446146 "containsTarget"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@return true, if ih is target of this handler
"
      end

      operation 3446274 "setCatchType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "catch_type" type class_ref 551682 // ObjectType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the type of the Exception to catch. Set 'null' for ANY. "
      end

      operation 3446402 "getCatchType"
	public return_type class_ref 551682 // ObjectType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the type of the Exception to catch, 'null' for ANY. "
      end

      operation 3446530 "getStartPC"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return start of handled region (inclusive)
"
      end

      operation 3446658 "getEndPC"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return end of handled region (inclusive)
"
      end

      operation 3446786 "getHandlerPC"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return start of handler
"
      end

      operation 3446914 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3447042 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 555522 "CompoundInstruction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Wrapper class for `compound' operations, virtual instructions that
don't exist as byte code, but give a useful meaning. For example,
the (virtual) PUSH instruction takes an arbitray argument and produces the
appropiate code at dump time (ICONST, LDC, BIPUSH, ...). Also you can use the
SWITCH instruction as a useful template for either LOOKUPSWITCH or
TABLESWITCH.

The interface provides the possibilty for the user to write
`templates' or `macros' for such reuseable code patterns.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@see PUSH
@see SWITCH
"
      operation 3447170 "getInstructionList"
	public return_type class_ref 555650 // InstructionList
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 555650 "InstructionList"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is a container for a list of <a
href=\"Instruction.html\">Instruction</a> objects. Instructions can
be appended, inserted, moved, deleted, etc.. Instructions are being
wrapped into <a
href=\"InstructionHandle.html\">InstructionHandles</a> objects that
are returned upon append/insert operations. They give the user
(read only) access to the list structure, such that it can be traversed and
manipulated in a controlled way.

A list is finally dumped to a byte code array with <a
href=\"#getByteCode()\">getByteCode</a>.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@see     Instruction
@see     InstructionHandle
@see BranchHandle
"
      classrelation 1143938 // <realization>
	relation 1143938 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1143938 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 1144066 // start (<unidirectional association>)
	relation 1144066 --->
	  a role_name "start" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1144066 // start (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      classrelation 1144194 // end (<unidirectional association>)
	relation 1144194 --->
	  a role_name "end" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1144194 // end (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      attribute 759298 "length"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " number of elements in list"
      end

      attribute 759426 "byte_positions"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " byte code offsets corresponding to instructions"
      end

      operation 3542530 "InstructionList"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create (empty) instruction list.
"
      end

      operation 3542658 "InstructionList"
	public explicit_return_type ""
	nparams 1
	  param inout name "i" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create instruction list containing one instruction.
@param i initial instruction
"
      end

      operation 3542786 "InstructionList"
	public explicit_return_type ""
	nparams 1
	  param inout name "i" type class_ref 554370 // BranchInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create instruction list containing one instruction.
@param i initial instruction
"
      end

      operation 3542914 "InstructionList"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 555522 // CompoundInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize list with (nonnull) compound instruction. Consumes argument
list, i.e., it becomes empty.

@param c compound instruction (list)
"
      end

      operation 3543042 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test for empty list.
"
      end

      operation 3543170 "findHandle"
	class_operation public return_type class_ref 554114 // InstructionHandle
	nparams 4
	  param inout name "ihs" type class_ref 554114 // InstructionHandle
	multiplicity "[]"
	  param inout name "pos" explicit_type "int"
	multiplicity "[]"
	  param in name "count" explicit_type "int"
	  param in name "target" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " && end == null

Find the target instruction (handle) that corresponds to the given target
position (byte code offset).

@param ihs array of instruction handles, i.e. il.getInstructionHandles()
@param pos array of positions corresponding to ihs, i.e. il.getInstructionPositions()
@param count length of arrays
@param target target position to search for
@return target position's instruction handle if available
"
      end

      operation 3543298 "findHandle"
	public return_type class_ref 554114 // InstructionHandle
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get instruction handle for instruction at byte code position pos.
This only works properly, if the list is freshly initialized from a byte array or
setPositions() has been called before this method.

@param pos byte code position to search for
@return target position's instruction handle if available
"
      end

      operation 3543426 "InstructionList"
	public explicit_return_type ""
	nparams 1
	  param inout name "code" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize instruction list from byte array.

@param code byte array containing the instructions
"
      end

      operation 3543554 "append"
	public return_type class_ref 554114 // InstructionHandle
	nparams 2
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	  param inout name "il" type class_ref 555650 // InstructionList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append another list after instruction (handle) ih contained in this list.
Consumes argument list, i.e., it becomes empty.

@param ih where to append the instruction list
@param il Instruction list to append to this one
@return instruction handle pointing to the <B>first</B> appended instruction
"
      end

      operation 3543682 "append"
	public return_type class_ref 554114 // InstructionHandle
	nparams 2
	  param inout name "i" type class_ref 549250 // Instruction
	  param inout name "il" type class_ref 555650 // InstructionList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append another list after instruction i contained in this list.
Consumes argument list, i.e., it becomes empty.

@param i  where to append the instruction list
@param il Instruction list to append to this one
@return instruction handle pointing to the <B>first</B> appended instruction
"
      end

      operation 3543810 "append"
	public return_type class_ref 554114 // InstructionHandle
	nparams 1
	  param inout name "il" type class_ref 555650 // InstructionList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append another list to this one.
Consumes argument list, i.e., it becomes empty.

@param il list to append to end of this list
@return instruction handle of the <B>first</B> appended instruction
"
      end

      operation 3543938 "append"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append an instruction to the end of this list.

@param ih instruction to append
"
      end

      operation 3544066 "append"
	public return_type class_ref 554114 // InstructionHandle
	nparams 1
	  param inout name "i" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append an instruction to the end of this list.

@param i instruction to append
@return instruction handle of the appended instruction
"
      end

      operation 3544194 "append"
	public return_type class_ref 553986 // BranchHandle
	nparams 1
	  param inout name "i" type class_ref 554370 // BranchInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a branch instruction to the end of this list.

@param i branch instruction to append
@return branch instruction handle of the appended instruction
"
      end

      operation 3544322 "append"
	public return_type class_ref 554114 // InstructionHandle
	nparams 2
	  param inout name "i" type class_ref 549250 // Instruction
	  param inout name "j" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a single instruction j after another instruction i, which
must be in this list of course!

@param i Instruction in list
@param j Instruction to append after i in list
@return instruction handle of the first appended instruction
"
      end

      operation 3544450 "append"
	public return_type class_ref 554114 // InstructionHandle
	nparams 2
	  param inout name "i" type class_ref 549250 // Instruction
	  param inout name "c" type class_ref 555522 // CompoundInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a compound instruction, after instruction i.

@param i Instruction in list
@param c The composite instruction (containing an InstructionList)
@return instruction handle of the first appended instruction
"
      end

      operation 3544578 "append"
	public return_type class_ref 554114 // InstructionHandle
	nparams 1
	  param inout name "c" type class_ref 555522 // CompoundInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a compound instruction.

@param c The composite instruction (containing an InstructionList)
@return instruction handle of the first appended instruction
"
      end

      operation 3544706 "append"
	public return_type class_ref 554114 // InstructionHandle
	nparams 2
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	  param inout name "c" type class_ref 555522 // CompoundInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a compound instruction.

@param ih where to append the instruction list
@param c The composite instruction (containing an InstructionList)
@return instruction handle of the first appended instruction
"
      end

      operation 3544834 "append"
	public return_type class_ref 554114 // InstructionHandle
	nparams 2
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	  param inout name "i" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append an instruction after instruction (handle) ih contained in this list.

@param ih where to append the instruction list
@param i Instruction to append
@return instruction handle pointing to the <B>first</B> appended instruction
"
      end

      operation 3544962 "append"
	public return_type class_ref 553986 // BranchHandle
	nparams 2
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	  param inout name "i" type class_ref 554370 // BranchInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append an instruction after instruction (handle) ih contained in this list.

@param ih where to append the instruction list
@param i Instruction to append
@return instruction handle pointing to the <B>first</B> appended instruction
"
      end

      operation 3545090 "insert"
	public return_type class_ref 554114 // InstructionHandle
	nparams 2
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	  param inout name "il" type class_ref 555650 // InstructionList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert another list before Instruction handle ih contained in this list.
Consumes argument list, i.e., it becomes empty.

@param i  where to append the instruction list
@param il Instruction list to insert
@return instruction handle of the first inserted instruction
"
      end

      operation 3545218 "insert"
	public return_type class_ref 554114 // InstructionHandle
	nparams 1
	  param inout name "il" type class_ref 555650 // InstructionList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert another list.

@param il list to insert before start of this list
@return instruction handle of the first inserted instruction
"
      end

      operation 3545346 "insert"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert an instruction at start of this list.

@param ih instruction to insert
"
      end

      operation 3545474 "insert"
	public return_type class_ref 554114 // InstructionHandle
	nparams 2
	  param inout name "i" type class_ref 549250 // Instruction
	  param inout name "il" type class_ref 555650 // InstructionList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert another list before Instruction i contained in this list.
Consumes argument list, i.e., it becomes empty.

@param i  where to append the instruction list
@param il Instruction list to insert
@return instruction handle pointing to the first inserted instruction,
i.e., il.getStart()
"
      end

      operation 3545602 "insert"
	public return_type class_ref 554114 // InstructionHandle
	nparams 1
	  param inout name "i" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert an instruction at start of this list.

@param i instruction to insert
@return instruction handle of the inserted instruction
"
      end

      operation 3545730 "insert"
	public return_type class_ref 553986 // BranchHandle
	nparams 1
	  param inout name "i" type class_ref 554370 // BranchInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert a branch instruction at start of this list.

@param i branch instruction to insert
@return branch instruction handle of the appended instruction
"
      end

      operation 3545858 "insert"
	public return_type class_ref 554114 // InstructionHandle
	nparams 2
	  param inout name "i" type class_ref 549250 // Instruction
	  param inout name "j" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert a single instruction j before another instruction i, which
must be in this list of course!

@param i Instruction in list
@param j Instruction to insert before i in list
@return instruction handle of the first inserted instruction
"
      end

      operation 3545986 "insert"
	public return_type class_ref 554114 // InstructionHandle
	nparams 2
	  param inout name "i" type class_ref 549250 // Instruction
	  param inout name "c" type class_ref 555522 // CompoundInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert a compound instruction before instruction i.

@param i Instruction in list
@param c The composite instruction (containing an InstructionList)
@return instruction handle of the first inserted instruction
"
      end

      operation 3546114 "insert"
	public return_type class_ref 554114 // InstructionHandle
	nparams 1
	  param inout name "c" type class_ref 555522 // CompoundInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert a compound instruction.

@param c The composite instruction (containing an InstructionList)
@return instruction handle of the first inserted instruction
"
      end

      operation 3546242 "insert"
	public return_type class_ref 554114 // InstructionHandle
	nparams 2
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	  param inout name "i" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert an instruction before instruction (handle) ih contained in this list.

@param ih where to insert to the instruction list
@param i Instruction to insert
@return instruction handle of the first inserted instruction
"
      end

      operation 3546370 "insert"
	public return_type class_ref 554114 // InstructionHandle
	nparams 2
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	  param inout name "c" type class_ref 555522 // CompoundInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert a compound instruction.

@param ih where to insert the instruction list
@param c The composite instruction (containing an InstructionList)
@return instruction handle of the first inserted instruction
"
      end

      operation 3546498 "insert"
	public return_type class_ref 553986 // BranchHandle
	nparams 2
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	  param inout name "i" type class_ref 554370 // BranchInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert an instruction before instruction (handle) ih contained in this list.

@param ih where to insert to the instruction list
@param i Instruction to insert
@return instruction handle of the first inserted instruction
"
      end

      operation 3546626 "move"
	public explicit_return_type "void"
	nparams 3
	  param inout name "start" type class_ref 554114 // InstructionHandle
	  param inout name "end" type class_ref 554114 // InstructionHandle
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Take all instructions (handles) from \"start\" to \"end\" and append them after the
new location \"target\". Of course, \"end\" must be after \"start\" and target must
not be located withing this range. If you want to move something to the start of
the list use null as value for target.<br>
Any instruction targeters pointing to handles within the block, keep their targets.

@param start  of moved block
@param end    of moved block
@param target of moved block
"
      end

      operation 3546754 "move"
	public explicit_return_type "void"
	nparams 2
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Move a single instruction (handle) to a new location.

@param ih     moved instruction
@param target new location of moved instruction
"
      end

      operation 3546882 "remove"
	private explicit_return_type "void"
	nparams 2
	  param inout name "prev" type class_ref 554114 // InstructionHandle
	  param inout name "next" type class_ref 554114 // InstructionHandle
	nexceptions 1
	  exception class_ref 575874 // TargetLostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove from instruction `prev' to instruction `next' both contained
in this list. Throws TargetLostException when one of the removed instruction handles
is still being targeted.

@param prev where to start deleting (predecessor, exclusive)
@param next where to end deleting (successor, exclusive)
"
      end

      operation 3547010 "delete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	nexceptions 1
	  exception class_ref 575874 // TargetLostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove instruction from this list. The corresponding Instruction
handles must not be reused!

@param ih instruction (handle) to remove
"
      end

      operation 3547138 "delete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "i" type class_ref 549250 // Instruction
	nexceptions 1
	  exception class_ref 575874 // TargetLostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove instruction from this list. The corresponding Instruction
handles must not be reused!

@param i instruction to remove
"
      end

      operation 3547266 "delete"
	public explicit_return_type "void"
	nparams 2
	  param inout name "from" type class_ref 554114 // InstructionHandle
	  param inout name "to" type class_ref 554114 // InstructionHandle
	nexceptions 1
	  exception class_ref 575874 // TargetLostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove instructions from instruction `from' to instruction `to' contained
in this list. The user must ensure that `from' is an instruction before
`to', or risk havoc. The corresponding Instruction handles must not be reused!

@param from where to start deleting (inclusive)
@param to   where to end deleting (inclusive)
"
      end

      operation 3547394 "delete"
	public explicit_return_type "void"
	nparams 2
	  param inout name "from" type class_ref 549250 // Instruction
	  param inout name "to" type class_ref 549250 // Instruction
	nexceptions 1
	  exception class_ref 575874 // TargetLostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove instructions from instruction `from' to instruction `to' contained
in this list. The user must ensure that `from' is an instruction before
`to', or risk havoc. The corresponding Instruction handles must not be reused!

@param from where to start deleting (inclusive)
@param to   where to end deleting (inclusive)
"
      end

      operation 3547522 "findInstruction1"
	private return_type class_ref 554114 // InstructionHandle
	nparams 1
	  param inout name "i" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Search for given Instruction reference, start at beginning of list.

@param i instruction to search for
@return instruction found on success, null otherwise
"
      end

      operation 3547650 "findInstruction2"
	private return_type class_ref 554114 // InstructionHandle
	nparams 1
	  param inout name "i" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Search for given Instruction reference, start at end of list

@param i instruction to search for
@return instruction found on success, null otherwise
"
      end

      operation 3547778 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "i" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3547906 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "i" type class_ref 549250 // Instruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3548034 "setPositions"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3548162 "setPositions"
	public explicit_return_type "void"
	nparams 1
	  param inout name "check" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Give all instructions their position number (offset in byte stream), i.e.,
make the list ready to be dumped.

@param check Perform sanity checks, e.g. if all targeted instructions really belong
to this list
"
      end

      operation 3548290 "getByteCode"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "When everything is finished, use this method to convert the instruction
list into an array of bytes.

@return the byte code ready to be dumped
"
      end

      operation 3548418 "getInstructions"
	public return_type class_ref 549250 // Instruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return an array of instructions without target information for branch instructions.
"
      end

      operation 3548546 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3548674 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "verbose" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param verbose toggle output format
@return String containing all instructions in this list.
"
      end

      operation 3548802 "iterator"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return Enumeration that lists all instructions (handles)
"
      end

      operation 3548930 "getInstructionHandles"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return array containing all instructions (handles)
"
      end

      operation 3549058 "getInstructionPositions"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get positions (offsets) of all instructions in the list. This relies on that
the list has been freshly created from an byte code array, or that setPositions()
has been called. Otherwise this may be inaccurate.

@return array containing all instruction's offset in byte code
"
      end

      operation 3549186 "copy"
	public return_type class_ref 555650 // InstructionList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return complete, i.e., deep copy of this list
"
      end

      operation 3549314 "replaceConstantPool"
	public explicit_return_type "void"
	nparams 2
	  param inout name "old_cp" type class_ref 549506 // ConstantPoolGen
	  param inout name "new_cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Replace all references to the old constant pool with references to the new
 constant pool
"
      end

      operation 3549442 "clear"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3549570 "dispose"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Delete contents of list. Provides besser memory utilization,
because the system then may reuse the instruction handles. This
method is typically called right after
<href=\"MethodGen.html#getMethod()\">MethodGen.getMethod()</a>.
"
      end

      operation 3549698 "getStart"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return start of list
"
      end

      operation 3549826 "getEnd"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return end of list
"
      end

      operation 3549954 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return length of list (Number of instructions, not bytes)
"
      end

      operation 3550082 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return length of list (Number of instructions, not bytes)
"
      end

      operation 3550210 "redirectBranches"
	public explicit_return_type "void"
	nparams 2
	  param inout name "old_target" type class_ref 554114 // InstructionHandle
	  param inout name "new_target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Redirect all references from old_target to new_target, i.e., update targets
of branch instructions.

@param old_target the old target instruction handle
@param new_target the new target instruction handle
"
      end

      operation 3550338 "redirectLocalVariables"
	public explicit_return_type "void"
	nparams 3
	  param inout name "lg" type class_ref 576002 // LocalVariableGen
	multiplicity "[]"
	  param inout name "old_target" type class_ref 554114 // InstructionHandle
	  param inout name "new_target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Redirect all references of local variables from old_target to new_target.

@param lg array of local variables
@param old_target the old target instruction handle
@param new_target the new target instruction handle
@see MethodGen
"
      end

      operation 3550466 "redirectExceptionHandlers"
	public explicit_return_type "void"
	nparams 3
	  param inout name "exceptions" type class_ref 555394 // CodeExceptionGen
	multiplicity "[]"
	  param inout name "old_target" type class_ref 554114 // InstructionHandle
	  param inout name "new_target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Redirect all references of exception handlers from old_target to new_target.

@param exceptions array of exception handlers
@param old_target the old target instruction handle
@param new_target the new target instruction handle
@see MethodGen
"
      end

      classrelation 1144322 // observers (<unidirectional association>)
	relation 1144322 --->
	  a role_name "observers" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1144322 // observers (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      operation 3550594 "addObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 576130 // InstructionListObserver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add observer for this object.
"
      end

      operation 3550722 "removeObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 576130 // InstructionListObserver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Remove observer for this object.
"
      end

      operation 3550850 "update"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Call notify() method on all observers. This method is not called
automatically whenever the state has changed, but has to be
called by the user after he has finished editing the object.
"
      end
    end

    class 555906 "MethodGen"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Template class for building up a method. This is done by defining exception
handlers, adding thrown exceptions, local variables and attributes, whereas
the `LocalVariableTable' and `LineNumberTable' attributes will be set
automatically for the code. Use stripAttributes() if you don't like this.

While generating code it may be necessary to insert NOP operations. You can
use the `removeNOPs' method to get rid off them.
The resulting method object can be obtained via the `getMethod()' method.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@author  <A HREF=\"http://www.vmeng.com/beard\">Patrick C. Beard</A> [setMaxStack()]
@see     InstructionList
@see     Method
"
      classrelation 1154946 // <generalisation>
	relation 1154946 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1154946 // <generalisation>
	  b parent class_ref 574978 // FieldGenOrMethodGen
      end

      classrelation 1155074 // class_name (<unidirectional association>)
	relation 1155074 --->
	  a role_name "class_name" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1155074 // class_name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1155202 // arg_types (<unidirectional association>)
	relation 1155202 --->
	  a role_name "arg_types" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1155202 // arg_types (<unidirectional association>)
	  b parent class_ref 547330 // Type
      end

      classrelation 1155330 // arg_names (<unidirectional association>)
	relation 1155330 --->
	  a role_name "arg_names" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1155330 // arg_names (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 760706 "max_locals"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 760834 "max_stack"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1155458 // il (<unidirectional association>)
	relation 1155458 --->
	  a role_name "il" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1155458 // il (<unidirectional association>)
	  b parent class_ref 555650 // InstructionList
      end

      attribute 760962 "strip_attributes"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1155586 // variable_vec (<unidirectional association>)
	relation 1155586 --->
	  a role_name "variable_vec" init_value " new ArrayList()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1155586 // variable_vec (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      classrelation 1155714 // type_vec (<unidirectional association>)
	relation 1155714 --->
	  a role_name "type_vec" init_value " new ArrayList()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1155714 // type_vec (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      classrelation 1155842 // line_number_vec (<unidirectional association>)
	relation 1155842 --->
	  a role_name "line_number_vec" init_value " new ArrayList()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1155842 // line_number_vec (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      classrelation 1155970 // exception_vec (<unidirectional association>)
	relation 1155970 --->
	  a role_name "exception_vec" init_value " new ArrayList()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1155970 // exception_vec (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      classrelation 1156098 // throws_vec (<unidirectional association>)
	relation 1156098 --->
	  a role_name "throws_vec" init_value " new ArrayList()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1156098 // throws_vec (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      classrelation 1156226 // code_attrs_vec (<unidirectional association>)
	relation 1156226 --->
	  a role_name "code_attrs_vec" init_value " new ArrayList()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1156226 // code_attrs_vec (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      operation 3574146 "MethodGen"
	public explicit_return_type ""
	nparams 8
	  param in name "access_flags" explicit_type "int"
	  param inout name "return_type" type class_ref 547330 // Type
	  param inout name "arg_types" type class_ref 547330 // Type
	multiplicity "[]"
	  param inout name "arg_names" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "method_name" type class_ref 128130 // String
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "il" type class_ref 555650 // InstructionList
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Declare method. If the method is non-static the constructor
automatically declares a local variable `$this' in slot 0. The
actual code is contained in the `il' parameter, which may further
manipulated by the user. But he must take care not to remove any
instruction (handles) that are still referenced from this object.

For example one may not add a local variable and later remove the
instructions it refers to without causing havoc. It is safe
however if you remove that local variable, too.

@param access_flags access qualifiers
@param return_type  method type
@param arg_types argument types
@param arg_names argument names (if this is null, default names will be provided
for them)
@param method_name name of method
@param class_name class name containing this method (may be null, if you don't care)
@param il instruction list associated with this method, may be null only for
abstract or native methods
@param cp constant pool
"
      end

      operation 3574274 "MethodGen"
	public explicit_return_type ""
	nparams 3
	  param inout name "m" type class_ref 542722 // Method
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiate from existing method.

@param m method
@param class_name class name containing this method
@param cp constant pool
"
      end

      operation 3574402 "addLocalVariable"
	public return_type class_ref 576002 // LocalVariableGen
	nparams 5
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 547330 // Type
	  param in name "slot" explicit_type "int"
	  param inout name "start" type class_ref 554114 // InstructionHandle
	  param inout name "end" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a local variable to this method.

@param name variable name
@param type variable type
@param slot the index of the local variable, if type is long or double, the next available
index is slot+2
@param start from where the variable is valid
@param end until where the variable is valid
@return new local variable object
@see LocalVariable
"
      end

      operation 3574530 "addLocalVariable"
	public return_type class_ref 576002 // LocalVariableGen
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 547330 // Type
	  param inout name "start" type class_ref 554114 // InstructionHandle
	  param inout name "end" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a local variable to this method and assigns an index automatically.

@param name variable name
@param type variable type
@param start from where the variable is valid, if this is null,
it is valid from the start
@param end until where the variable is valid, if this is null,
it is valid to the end
@return new local variable object
@see LocalVariable
"
      end

      operation 3574658 "removeLocalVariable"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 576002 // LocalVariableGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a local variable, its slot will not be reused, if you do not use addLocalVariable
with an explicit index argument.
"
      end

      operation 3574786 "removeLocalVariables"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all local variables.
"
      end

      operation 3574914 "sort"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "vars" type class_ref 576002 // LocalVariableGen
	multiplicity "[]"
	  param in name "l" explicit_type "int"
	  param in name "r" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sort local variables by index
"
      end

      operation 3575042 "getLocalVariables"
	public return_type class_ref 576002 // LocalVariableGen
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the range of the variable has not been set yet, it will be set to be valid from
the start to the end of the instruction list.

@return array of declared local variables sorted by index
"
      end

      operation 3575170 "getLocalVariableTypes"
	private return_type class_ref 576002 // LocalVariableGen
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the range of the variable has not been set yet, it will be set to be
val id from the start to the end of the instruction list.

@return array of declared local variable types sorted by index
"
      end

      operation 3575298 "getLocalVariableTable"
	public return_type class_ref 543234 // LocalVariableTable
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return `LocalVariableTable' attribute of all the local variables of this method.
"
      end

      operation 3575426 "getLocalVariableTypeTable"
	public return_type class_ref 546178 // LocalVariableTypeTable
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return `LocalVariableTypeTable' attribute of all the local variable
types of this method.
"
      end

      operation 3575554 "addLocalVariableType"
	private return_type class_ref 576002 // LocalVariableGen
	nparams 5
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 547330 // Type
	  param in name "slot" explicit_type "int"
	  param inout name "start" type class_ref 554114 // InstructionHandle
	  param inout name "end" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a local variable type to this method.

@param name variable name
@param type variable type
@param slot the index of the local variable, if type is long or double, the next available
index is slot+2
@param start from where the variable is valid
@param end until where the variable is valid
@return new local variable object
@see LocalVariable
"
      end

      operation 3575682 "removeLocalVariableTypes"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all local variable types.
"
      end

      operation 3575810 "addLineNumber"
	public return_type class_ref 576386 // LineNumberGen
	nparams 2
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	  param in name "src_line" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Give an instruction a line number corresponding to the source code line.

@param ih instruction to tag
@return new line number object
@see LineNumber
"
      end

      operation 3575938 "removeLineNumber"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 576386 // LineNumberGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a line number.
"
      end

      operation 3576066 "removeLineNumbers"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all line numbers.
"
      end

      operation 3576194 "getLineNumbers"
	public return_type class_ref 576386 // LineNumberGen
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return array of line numbers
"
      end

      operation 3576322 "getLineNumberTable"
	public return_type class_ref 543106 // LineNumberTable
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return `LineNumberTable' attribute of all the local variables of this method.
"
      end

      operation 3576450 "addExceptionHandler"
	public return_type class_ref 555394 // CodeExceptionGen
	nparams 4
	  param inout name "start_pc" type class_ref 554114 // InstructionHandle
	  param inout name "end_pc" type class_ref 554114 // InstructionHandle
	  param inout name "handler_pc" type class_ref 554114 // InstructionHandle
	  param inout name "catch_type" type class_ref 551682 // ObjectType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add an exception handler, i.e., specify region where a handler is active and an
instruction where the actual handling is done.

@param start_pc Start of region (inclusive)
@param end_pc End of region (inclusive)
@param handler_pc Where handling is done
@param catch_type class type of handled exception or null if any
exception is handled
@return new exception handler object
"
      end

      operation 3576578 "removeExceptionHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 555394 // CodeExceptionGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove an exception handler.
"
      end

      operation 3576706 "removeExceptionHandlers"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all line numbers.
"
      end

      operation 3576834 "getExceptionHandlers"
	public return_type class_ref 555394 // CodeExceptionGen
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return array of declared exception handlers
"
      end

      operation 3576962 "getCodeExceptions"
	private return_type class_ref 542978 // CodeException
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return code exceptions for `Code' attribute
"
      end

      operation 3577090 "addException"
	public explicit_return_type "void"
	nparams 1
	  param inout name "class_name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add an exception possibly thrown by this method.

@param class_name (fully qualified) name of exception
"
      end

      operation 3577218 "removeException"
	public explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove an exception.
"
      end

      operation 3577346 "removeExceptions"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all exceptions.
"
      end

      operation 3577474 "getExceptions"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return array of thrown exceptions
"
      end

      operation 3577602 "getExceptionTable"
	private return_type class_ref 545538 // ExceptionTable
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return `Exceptions' attribute of all the exceptions thrown by this method.
"
      end

      operation 3577730 "addCodeAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a" type class_ref 541570 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add an attribute to the code. Currently, the JVM knows about the
LineNumberTable, LocalVariableTable and StackMap attributes,
where the former two will be generated automatically and the
latter is used for the MIDP only. Other attributes will be
ignored by the JVM but do no harm.

@param a attribute to be added
"
      end

      operation 3577858 "removeCodeAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a" type class_ref 541570 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a code attribute.
"
      end

      operation 3577986 "removeCodeAttributes"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all code attributes.
"
      end

      operation 3578114 "getCodeAttributes"
	public return_type class_ref 541570 // Attribute
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return all attributes of this method.
"
      end

      operation 3578242 "getMethod"
	public return_type class_ref 542722 // Method
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get method object. Never forget to call setMaxStack() or setMaxStack(max), respectively,
before calling this method (the same applies for max locals).

@return method object
"
      end

      operation 3578370 "removeNOPs"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all NOPs from the instruction list (if possible) and update every
object refering to them, i.e., branch instructions, local variables and
exception handlers.
"
      end

      operation 3578498 "setMaxLocals"
	public explicit_return_type "void"
	nparams 1
	  param in name "m" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set maximum number of local variables.
"
      end

      operation 3578626 "getMaxLocals"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3578754 "setMaxStack"
	public explicit_return_type "void"
	nparams 1
	  param in name "m" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set maximum stack size for this method.
"
      end

      operation 3578882 "getMaxStack"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3579010 "getClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return class that contains this method
"
      end

      operation 3579138 "setClassName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "class_name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3579266 "setReturnType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "return_type" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3579394 "getReturnType"
	public return_type class_ref 547330 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3579522 "setArgumentTypes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "arg_types" type class_ref 547330 // Type
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3579650 "getArgumentTypes"
	public return_type class_ref 547330 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3579778 "setArgumentType"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "type" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3579906 "getArgumentType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3580034 "setArgumentNames"
	public explicit_return_type "void"
	nparams 1
	  param inout name "arg_names" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3580162 "getArgumentNames"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3580290 "setArgumentName"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3580418 "getArgumentName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3580546 "getInstructionList"
	public return_type class_ref 555650 // InstructionList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3580674 "setInstructionList"
	public explicit_return_type "void"
	nparams 1
	  param inout name "il" type class_ref 555650 // InstructionList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3580802 "getSignature"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3580930 "setMaxStack"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes max. stack size by performing control flow analysis.
"
      end

      operation 3581058 "setMaxLocals"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute maximum number of local variables.
"
      end

      operation 3581186 "stripAttributes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Do not/Do produce attributes code attributesLineNumberTable and
LocalVariableTable, like javac -O
"
      end

      class 576514 "BranchTarget"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1156354 // target (<unidirectional association>)
	  relation 1156354 --->
	    a role_name "target" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1156354 // target (<unidirectional association>)
	    b parent class_ref 554114 // InstructionHandle
	end

	attribute 761090 "stackDepth"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 3581314 "BranchTarget"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "target" type class_ref 554114 // InstructionHandle
	    param in name "stackDepth" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 576642 "BranchStack"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1156482 // branchTargets (<unidirectional association>)
	  relation 1156482 --->
	    a role_name "branchTargets" init_value " new Stack()" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1156482 // branchTargets (<unidirectional association>)
	    b parent class_ref 183810 // Stack
	end

	classrelation 1156610 // visitedTargets (<unidirectional association>)
	  relation 1156610 --->
	    a role_name "visitedTargets" init_value " new Hashtable()" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1156610 // visitedTargets (<unidirectional association>)
	    b parent class_ref 137090 // Hashtable
	end

	operation 3581442 "push"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "target" type class_ref 554114 // InstructionHandle
	    param in name "stackDepth" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3581570 "pop"
	  public return_type class_ref 576514 // BranchTarget
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3581698 "visit"
	  private return_type class_ref 576514 // BranchTarget
	  nparams 2
	    param inout name "target" type class_ref 554114 // InstructionHandle
	    param in name "stackDepth" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3581826 "visited"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "target" type class_ref 554114 // InstructionHandle
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 3581954 "getMaxStack"
	class_operation public explicit_return_type "int"
	nparams 3
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	  param inout name "il" type class_ref 555650 // InstructionList
	  param inout name "et" type class_ref 555394 // CodeExceptionGen
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes stack usage of an instruction list by performing control flow analysis.

@return maximum stack depth used by method
"
      end

      classrelation 1156738 // observers (<unidirectional association>)
	relation 1156738 --->
	  a role_name "observers" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1156738 // observers (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      operation 3582082 "addObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 576770 // MethodObserver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add observer for this object.
"
      end

      operation 3582210 "removeObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 576770 // MethodObserver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Remove observer for this object.
"
      end

      operation 3582338 "update"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Call notify() method on all observers. This method is not called
automatically whenever the state has changed, but has to be
called by the user after he has finished editing the object.
"
      end

      operation 3582466 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return string representation close to declaration format,
`public static void _main(String[]) throws IOException', e.g.

@return String representation of the method.
"
      end

      operation 3582594 "copy"
	public return_type class_ref 555906 // MethodGen
	nparams 2
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return deep copy of this method
"
      end
    end

    class 556034 "ConversionInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Super class for the x2y family of instructions.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1108994 // <generalisation>
	relation 1108994 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1108994 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1109122 // <realization>
	relation 1109122 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1109122 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      classrelation 1109250 // <realization>
	relation 1109250 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1109250 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      classrelation 1109378 // <realization>
	relation 1109378 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1109378 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3452546 "ConversionInstruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3452674 "ConversionInstruction"
	protected explicit_return_type ""
	nparams 1
	  param in name "opcode" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param opcode opcode of instruction
"
      end

      operation 3452802 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return type associated with the instruction
"
      end
    end

    class 556162 "D2F"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


D2F - Convert double to float
<PRE>Stack: ..., value.word1, value.word2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1109506 // <generalisation>
	relation 1109506 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1109506 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3452930 "D2F"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert double to float
"
      end

      operation 3453058 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 556290 "D2I"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


D2I - Convert double to int
<PRE>Stack: ..., value.word1, value.word2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1109634 // <generalisation>
	relation 1109634 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1109634 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3453186 "D2I"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert double to int
"
      end

      operation 3453314 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 556418 "D2L"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


D2L - Convert double to long
<PRE>Stack: ..., value.word1, value.word2 -&gt; ..., result.word1, result.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1109762 // <generalisation>
	relation 1109762 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1109762 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3453442 "D2L"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert double to long
"
      end

      operation 3453570 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 556546 "DADD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DADD - Add doubles
<PRE>Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;</PRE>
       ..., result.word1, result1.word2

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1109890 // <generalisation>
	relation 1109890 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1109890 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3453698 "DADD"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add doubles
"
      end

      operation 3453826 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 556674 "DALOAD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DALOAD - Load double from array
<PRE>Stack: ..., arrayref, index -&gt; ..., result.word1, result.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1110018 // <generalisation>
	relation 1110018 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1110018 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1110146 // <realization>
	relation 1110146 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1110146 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3453954 "DALOAD"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load double from array
"
      end

      operation 3454082 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 556802 "DASTORE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DASTORE -  Store into double array
<PRE>Stack: ..., arrayref, index, value.word1, value.word2 -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1110274 // <generalisation>
	relation 1110274 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1110274 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1110402 // <realization>
	relation 1110402 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1110402 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3454210 "DASTORE"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Store double into array
"
      end

      operation 3454338 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 556930 "DCMPG"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DCMPG - Compare doubles: value1 > value2
<PRE>Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;</PRE>
       ..., result

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1110530 // <generalisation>
	relation 1110530 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1110530 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1110658 // <realization>
	relation 1110658 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1110658 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      classrelation 1110786 // <realization>
	relation 1110786 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1110786 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      classrelation 1110914 // <realization>
	relation 1110914 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1110914 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3454466 "DCMPG"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3454594 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return Type.DOUBLE
"
      end

      operation 3454722 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 557058 "DCMPL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DCMPL - Compare doubles: value1 < value2
<PRE>Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;</PRE>
       ..., result

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1111042 // <generalisation>
	relation 1111042 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1111042 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1111170 // <realization>
	relation 1111170 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1111170 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      classrelation 1111298 // <realization>
	relation 1111298 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1111298 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      classrelation 1111426 // <realization>
	relation 1111426 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1111426 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3454850 "DCMPL"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3454978 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return Type.DOUBLE
"
      end

      operation 3455106 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 557186 "DCONST"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DCONST - Push 0.0 or 1.0, other values cause an exception

<PRE>Stack: ... -&gt; ..., </PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1111554 // <generalisation>
	relation 1111554 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1111554 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1111682 // <realization>
	relation 1111682 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1111682 // <realization>
	  b parent class_ref 553858 // ConstantPushInstruction
      end

      classrelation 1111810 // <realization>
	relation 1111810 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1111810 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      attribute 758530 "value"
	private explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3455234 "DCONST"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3455362 "DCONST"
	public explicit_return_type ""
	nparams 1
	  param in name "f" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3455490 "getValue"
	public return_type class_ref 398210 // Number
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3455618 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return Type.DOUBLE
"
      end

      operation 3455746 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 557314 "DDIV"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DDIV -  Divide doubles
<PRE>Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;</PRE>
       ..., result.word1, result.word2

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1111938 // <generalisation>
	relation 1111938 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1111938 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3455874 "DDIV"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Divide doubles
"
      end

      operation 3456002 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 557442 "DLOAD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DLOAD - Load double from local variable
<PRE>Stack ... -&gt; ..., result.word1, result.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1112066 // <generalisation>
	relation 1112066 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1112066 // <generalisation>
	  b parent class_ref 550914 // LoadInstruction
      end

      operation 3456130 "DLOAD"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3456258 "DLOAD"
	public explicit_return_type ""
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load double from local variable
@param n index of local variable
"
      end

      operation 3456386 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 557570 "DMUL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DMUL - Multiply doubles
<PRE>Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;</PRE>
       ..., result.word1, result.word2

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1112194 // <generalisation>
	relation 1112194 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1112194 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3456514 "DMUL"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Multiply doubles
"
      end

      operation 3456642 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 557698 "DNEG"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DNEG - Negate double
<PRE>Stack: ..., value.word1, value.word2 -&gt; ..., result.word1, result.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1112322 // <generalisation>
	relation 1112322 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1112322 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3456770 "DNEG"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3456898 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 557826 "DREM"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DREM - Remainder of doubles
<PRE>Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;</PRE>
       ..., result.word1, result.word2

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1112450 // <generalisation>
	relation 1112450 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1112450 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3457026 "DREM"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Remainder of doubles
"
      end

      operation 3457154 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 557954 "DRETURN"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DRETURN -  Return double from method
<PRE>Stack: ..., value.word1, value.word2 -&gt; &lt;empty&gt;</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1112578 // <generalisation>
	relation 1112578 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1112578 // <generalisation>
	  b parent class_ref 551938 // ReturnInstruction
      end

      operation 3457282 "DRETURN"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return double from method
"
      end

      operation 3457410 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 558082 "DSTORE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DSTORE - Store double into local variable
<pre>Stack: ..., value.word1, value.word2 -&gt; ... </PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1112706 // <generalisation>
	relation 1112706 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1112706 // <generalisation>
	  b parent class_ref 552962 // StoreInstruction
      end

      operation 3457538 "DSTORE"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3457666 "DSTORE"
	public explicit_return_type ""
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Store double into local variable
@param n index of local variable
"
      end

      operation 3457794 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 558210 "DSUB"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DSUB - Substract doubles
<PRE>Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;</PRE>
       ..., result.word1, result.word2

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1112834 // <generalisation>
	relation 1112834 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1112834 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3457922 "DSUB"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Substract doubles
"
      end

      operation 3458050 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 558338 "DUP"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DUP - Duplicate top operand stack word
<PRE>Stack: ..., word -&gt; ..., word, word</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1113090 // <generalisation>
	relation 1113090 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1113090 // <generalisation>
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1113218 // <realization>
	relation 1113218 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1113218 // <realization>
	  b parent class_ref 550530 // PushInstruction
      end

      operation 3458562 "DUP"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3458690 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 558466 "StackInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Super class for stack operations like DUP and POP.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1112962 // <generalisation>
	relation 1112962 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1112962 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      operation 3458178 "StackInstruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3458306 "StackInstruction"
	protected explicit_return_type ""
	nparams 1
	  param in name "opcode" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param opcode instruction opcode
"
      end

      operation 3458434 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return Type.UNKNOWN
"
      end
    end

    class 558594 "DUP2"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DUP2 - Duplicate two top operand stack words
<PRE>Stack: ..., word2, word1 -&gt; ..., word2, word1, word2, word1</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1113346 // <generalisation>
	relation 1113346 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1113346 // <generalisation>
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1113474 // <realization>
	relation 1113474 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1113474 // <realization>
	  b parent class_ref 550530 // PushInstruction
      end

      operation 3458818 "DUP2"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3458946 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 558722 "DUP2_X1"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DUP2_X1 - Duplicate two top operand stack words and put three down
<PRE>Stack: ..., word3, word2, word1 -&gt; ..., word2, word1, word3, word2, word1</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1113602 // <generalisation>
	relation 1113602 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1113602 // <generalisation>
	  b parent class_ref 558466 // StackInstruction
      end

      operation 3459074 "DUP2_X1"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3459202 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 558850 "DUP2_X2"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DUP2_X2 - Duplicate two top operand stack words and put four down
<PRE>Stack: ..., word4, word3, word2, word1 -&gt; ..., word2, word1, word4, word3, word2, word1</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1113730 // <generalisation>
	relation 1113730 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1113730 // <generalisation>
	  b parent class_ref 558466 // StackInstruction
      end

      operation 3459330 "DUP2_X2"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3459458 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 558978 "DUP_X1"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DUP_X1 - Duplicate top operand stack word and put two down
<PRE>Stack: ..., word2, word1 -&gt; ..., word1, word2, word1</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1113858 // <generalisation>
	relation 1113858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1113858 // <generalisation>
	  b parent class_ref 558466 // StackInstruction
      end

      operation 3459586 "DUP_X1"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3459714 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 559106 "DUP_X2"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


DUP_X2 - Duplicate top operand stack word and put three down
<PRE>Stack: ..., word3, word2, word1 -&gt; ..., word1, word3, word2, word1</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1113986 // <generalisation>
	relation 1113986 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1113986 // <generalisation>
	  b parent class_ref 558466 // StackInstruction
      end

      operation 3459842 "DUP_X2"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3459970 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 559234 "EmptyVisitor"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Supplies empty method bodies to be overridden by subclasses.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1114114 // <realization>
	relation 1114114 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1114114 // <realization>
	  b parent class_ref 549634 // Visitor
      end

      operation 3483138 "visitStackInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558466 // StackInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3483266 "visitLocalVariableInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 551042 // LocalVariableInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3483394 "visitBranchInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 554370 // BranchInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3483522 "visitLoadClass"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 551554 // LoadClass
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3483650 "visitFieldInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 559362 // FieldInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3483778 "visitIfInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 559490 // IfInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3483906 "visitConversionInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556034 // ConversionInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3484034 "visitPopInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553090 // PopInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3484162 "visitJsrInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 559746 // JsrInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3484290 "visitGotoInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 559874 // GotoInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3484418 "visitStoreInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 552962 // StoreInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3484546 "visitTypedInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 549890 // TypedInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3484674 "visitSelect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 559618 // Select
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3484802 "visitUnconditionalBranch"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553346 // UnconditionalBranch
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3484930 "visitPushInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550530 // PushInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3485058 "visitArithmeticInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 552066 // ArithmeticInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3485186 "visitCPInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 551426 // CPInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3485314 "visitInvokeInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560002 // InvokeInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3485442 "visitArrayInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 549122 // ArrayInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3485570 "visitAllocationInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550658 // AllocationInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3485698 "visitReturnInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 551938 // ReturnInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3485826 "visitFieldOrMethod"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560130 // FieldOrMethod
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3485954 "visitConstantPushInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553858 // ConstantPushInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3486082 "visitExceptionThrower"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 549762 // ExceptionThrower
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3486210 "visitLoadInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550914 // LoadInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3486338 "visitVariableLengthInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560258 // VariableLengthInstruction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3486466 "visitStackProducer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550018 // StackProducer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3486594 "visitStackConsumer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550274 // StackConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3486722 "visitACONST_NULL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550402 // ACONST_NULL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3486850 "visitGETSTATIC"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560386 // GETSTATIC
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3486978 "visitIF_ICMPLT"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560514 // IF_ICMPLT
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3487106 "visitMONITOREXIT"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560642 // MONITOREXIT
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3487234 "visitIFLT"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560770 // IFLT
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3487362 "visitLSTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 560898 // LSTORE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3487490 "visitPOP2"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561026 // POP2
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3487618 "visitBASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553602 // BASTORE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3487746 "visitISTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561154 // ISTORE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3487874 "visitCHECKCAST"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 554882 // CHECKCAST
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3488002 "visitFCMPG"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561282 // FCMPG
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3488130 "visitI2F"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561410 // I2F
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3488258 "visitATHROW"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553218 // ATHROW
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3488386 "visitDCMPL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557058 // DCMPL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3488514 "visitARRAYLENGTH"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 552194 // ARRAYLENGTH
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3488642 "visitDUP"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558338 // DUP
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3488770 "visitINVOKESTATIC"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561538 // INVOKESTATIC
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3488898 "visitLCONST"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561666 // LCONST
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3489026 "visitDREM"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557826 // DREM
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3489154 "visitIFGE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561794 // IFGE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3489282 "visitCALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 554626 // CALOAD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3489410 "visitLASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 561922 // LASTORE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3489538 "visitI2D"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562050 // I2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3489666 "visitDADD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556546 // DADD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3489794 "visitINVOKESPECIAL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562178 // INVOKESPECIAL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3489922 "visitIAND"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562306 // IAND
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3490050 "visitPUTFIELD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562434 // PUTFIELD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3490178 "visitILOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562562 // ILOAD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3490306 "visitDLOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557442 // DLOAD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3490434 "visitDCONST"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557186 // DCONST
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3490562 "visitNEW"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562690 // NEW
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3490690 "visitIFNULL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562818 // IFNULL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3490818 "visitLSUB"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 562946 // LSUB
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3490946 "visitL2I"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563074 // L2I
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3491074 "visitISHR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563202 // ISHR
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3491202 "visitTABLESWITCH"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563330 // TABLESWITCH
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3491330 "visitIINC"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563458 // IINC
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3491458 "visitDRETURN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557954 // DRETURN
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3491586 "visitFSTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563586 // FSTORE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3491714 "visitDASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556802 // DASTORE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3491842 "visitIALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563714 // IALOAD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3491970 "visitDDIV"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557314 // DDIV
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3492098 "visitIF_ICMPGE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563842 // IF_ICMPGE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3492226 "visitLAND"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 563970 // LAND
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3492354 "visitIDIV"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564098 // IDIV
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3492482 "visitLOR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564226 // LOR
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3492610 "visitCASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 554754 // CASTORE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3492738 "visitFREM"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564354 // FREM
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3492866 "visitLDC"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564482 // LDC
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3492994 "visitBIPUSH"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553730 // BIPUSH
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3493122 "visitDSTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558082 // DSTORE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3493250 "visitF2L"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564610 // F2L
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3493378 "visitFMUL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564738 // FMUL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3493506 "visitLLOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564866 // LLOAD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3493634 "visitJSR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 564994 // JSR
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3493762 "visitFSUB"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565122 // FSUB
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3493890 "visitSASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565250 // SASTORE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3494018 "visitALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550786 // ALOAD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3494146 "visitDUP2_X2"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558850 // DUP2_X2
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3494274 "visitRETURN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565378 // RETURN
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3494402 "visitDALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556674 // DALOAD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3494530 "visitSIPUSH"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565506 // SIPUSH
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3494658 "visitDSUB"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558210 // DSUB
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3494786 "visitL2F"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565634 // L2F
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3494914 "visitIF_ICMPGT"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565762 // IF_ICMPGT
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3495042 "visitF2D"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 565890 // F2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3495170 "visitI2L"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566018 // I2L
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3495298 "visitIF_ACMPNE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566146 // IF_ACMPNE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3495426 "visitPOP"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566274 // POP
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3495554 "visitI2S"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566402 // I2S
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3495682 "visitIFEQ"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566530 // IFEQ
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3495810 "visitSWAP"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566658 // SWAP
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3495938 "visitIOR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566786 // IOR
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3496066 "visitIREM"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 566914 // IREM
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3496194 "visitIASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567042 // IASTORE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3496322 "visitNEWARRAY"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567170 // NEWARRAY
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3496450 "visitINVOKEINTERFACE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567298 // INVOKEINTERFACE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3496578 "visitINEG"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567426 // INEG
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3496706 "visitLCMP"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567554 // LCMP
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3496834 "visitJSR_W"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567682 // JSR_W
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3496962 "visitMULTIANEWARRAY"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567810 // MULTIANEWARRAY
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3497090 "visitDUP_X2"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 559106 // DUP_X2
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3497218 "visitSALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 567938 // SALOAD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3497346 "visitIFNONNULL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568066 // IFNONNULL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3497474 "visitDMUL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557570 // DMUL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3497602 "visitIFNE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568194 // IFNE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3497730 "visitIF_ICMPLE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568322 // IF_ICMPLE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3497858 "visitLDC2_W"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568450 // LDC2_W
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3497986 "visitGETFIELD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568578 // GETFIELD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3498114 "visitLADD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568706 // LADD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3498242 "visitNOP"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568834 // NOP
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3498370 "visitFALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 568962 // FALOAD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3498498 "visitINSTANCEOF"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569090 // INSTANCEOF
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3498626 "visitIFLE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569218 // IFLE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3498754 "visitLXOR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569346 // LXOR
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3498882 "visitLRETURN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569474 // LRETURN
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3499010 "visitFCONST"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569602 // FCONST
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3499138 "visitIUSHR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569730 // IUSHR
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3499266 "visitBALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 553474 // BALOAD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3499394 "visitDUP2"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558594 // DUP2
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3499522 "visitIF_ACMPEQ"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569858 // IF_ACMPEQ
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3499650 "visitIMPDEP1"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 569986 // IMPDEP1
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3499778 "visitMONITORENTER"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570114 // MONITORENTER
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3499906 "visitLSHL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570242 // LSHL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3500034 "visitDCMPG"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556930 // DCMPG
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3500162 "visitD2L"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556418 // D2L
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3500290 "visitIMPDEP2"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570370 // IMPDEP2
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3500418 "visitL2D"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570498 // L2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3500546 "visitRET"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570626 // RET
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3500674 "visitIFGT"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570754 // IFGT
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3500802 "visitIXOR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 570882 // IXOR
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3500930 "visitINVOKEVIRTUAL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571010 // INVOKEVIRTUAL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3501058 "visitFASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571138 // FASTORE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3501186 "visitIRETURN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571266 // IRETURN
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3501314 "visitIF_ICMPNE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571394 // IF_ICMPNE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3501442 "visitFLOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571522 // FLOAD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3501570 "visitLDIV"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571650 // LDIV
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3501698 "visitPUTSTATIC"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571778 // PUTSTATIC
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3501826 "visitAALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 548994 // AALOAD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3501954 "visitD2I"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556290 // D2I
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3502082 "visitIF_ICMPEQ"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 571906 // IF_ICMPEQ
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3502210 "visitAASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 550146 // AASTORE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3502338 "visitARETURN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 551810 // ARETURN
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3502466 "visitDUP2_X1"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558722 // DUP2_X1
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3502594 "visitFNEG"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572034 // FNEG
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3502722 "visitGOTO_W"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572162 // GOTO_W
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3502850 "visitD2F"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 556162 // D2F
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3502978 "visitGOTO"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572290 // GOTO
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3503106 "visitISUB"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572418 // ISUB
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3503234 "visitF2I"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572546 // F2I
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3503362 "visitDNEG"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 557698 // DNEG
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3503490 "visitICONST"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572674 // ICONST
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3503618 "visitFDIV"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572802 // FDIV
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3503746 "visitI2B"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 572930 // I2B
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3503874 "visitLNEG"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573058 // LNEG
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3504002 "visitLREM"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573186 // LREM
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3504130 "visitIMUL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573314 // IMUL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3504258 "visitIADD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573442 // IADD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3504386 "visitLSHR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573570 // LSHR
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3504514 "visitLOOKUPSWITCH"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573698 // LOOKUPSWITCH
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3504642 "visitDUP_X1"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 558978 // DUP_X1
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3504770 "visitFCMPL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573826 // FCMPL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3504898 "visitI2C"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 573954 // I2C
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3505026 "visitLMUL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 574082 // LMUL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3505154 "visitLUSHR"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 574210 // LUSHR
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3505282 "visitISHL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 574338 // ISHL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3505410 "visitLALOAD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 574466 // LALOAD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3505538 "visitASTORE"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 552834 // ASTORE
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3505666 "visitANEWARRAY"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 551298 // ANEWARRAY
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3505794 "visitFRETURN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 574594 // FRETURN
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3505922 "visitFADD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 574722 // FADD
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3506050 "visitBREAKPOINT"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 554498 // BREAKPOINT
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 559362 "FieldInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Super class for the GET/PUTxxx family of instructions.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1118338 // <generalisation>
	relation 1118338 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1118338 // <generalisation>
	  b parent class_ref 560130 // FieldOrMethod
      end

      classrelation 1118466 // <realization>
	relation 1118466 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1118466 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      operation 3515394 "FieldInstruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3515522 "FieldInstruction"
	protected explicit_return_type ""
	nparams 2
	  param in name "opcode" explicit_type "short"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param index to constant pool
"
      end

      operation 3515650 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "cp" type class_ref 541954 // ConstantPool
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction with symbolic references resolved
"
      end

      operation 3515778 "getFieldSize"
	protected explicit_return_type "int"
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return size of field (1 or 2)
"
      end

      operation 3515906 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return return type of referenced field
"
      end

      operation 3516034 "getFieldType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return type of field
"
      end

      operation 3516162 "getFieldName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return name of referenced field.
"
      end
    end

    class 559490 "IfInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Super class for the IFxxx family of instructions.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1123202 // <generalisation>
	relation 1123202 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1123202 // <generalisation>
	  b parent class_ref 554370 // BranchInstruction
      end

      classrelation 1123330 // <realization>
	relation 1123330 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1123330 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3524866 "IfInstruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3524994 "IfInstruction"
	protected explicit_return_type ""
	nparams 2
	  param in name "opcode" explicit_type "short"
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param instruction Target instruction to branch to
"
      end

      operation 3525122 "negate"
	abstract public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction, e.g. IFEQ.negate() == IFNE
"
      end
    end

    class 559618 "Select"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Select - Abstract super class for LOOKUPSWITCH and TABLESWITCH instructions.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@see LOOKUPSWITCH
@see TABLESWITCH
@see InstructionList
"
      classrelation 1153026 // <generalisation>
	relation 1153026 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1153026 // <generalisation>
	  b parent class_ref 554370 // BranchInstruction
      end

      classrelation 1153154 // <realization>
	relation 1153154 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1153154 // <realization>
	  b parent class_ref 560258 // VariableLengthInstruction
      end

      classrelation 1153282 // <realization>
	relation 1153282 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1153282 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      attribute 760066 "match"
	protected explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " matches, i.e., case 1: ..."
      end

      attribute 760194 "indices"
	protected explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " target offsets"
      end

      classrelation 1153410 // targets (<unidirectional association>)
	relation 1153410 --->
	  a role_name "targets" multiplicity "[]" protected
	    comment " target objects in instruction list"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1153410 // targets (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      attribute 760322 "fixed_length"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " fixed length defined by subclasses"
      end

      attribute 760450 "match_length"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " number of cases"
      end

      attribute 760578 "padding"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " number of pad bytes for alignment"
      end

      operation 3569282 "Select"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3569410 "Select"
	package explicit_return_type ""
	nparams 4
	  param in name "opcode" explicit_type "short"
	  param inout name "match" explicit_type "int"
	multiplicity "[]"
	  param inout name "targets" type class_ref 554114 // InstructionHandle
	multiplicity "[]"
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "(Match, target) pairs for switch.
`Match' and `targets' must have the same length of course.

@param match array of matching values
@param targets instruction targets
@param target default instruction target
"
      end

      operation 3569538 "updatePosition"
	protected explicit_return_type "int"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "max_offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Since this is a variable length instruction, it may shift the following
instructions which then need to update their position.

Called by InstructionList.setPositions when setting the position for every
instruction. In the presence of variable length instructions `setPositions'
performs multiple passes over the instruction list to calculate the
correct (byte) positions and offsets by calling this function.

@param offset additional offset caused by preceding (variable length) instructions
@param max_offset the maximum offset that may be caused by these instructions
@return additional offset caused by possible change of this instruction's length
"
      end

      operation 3569666 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3569794 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Read needed data (e.g. index) from file.
"
      end

      operation 3569922 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "verbose" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@return mnemonic for instruction
"
      end

      operation 3570050 "setTarget"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set branch target for `i'th case
"
      end

      operation 3570178 "updateTarget"
	public explicit_return_type "void"
	nparams 2
	  param inout name "old_ih" type class_ref 554114 // InstructionHandle
	  param inout name "new_ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@param old_ih old target
@param new_ih new target
"
      end

      operation 3570306 "containsTarget"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@return true, if ih is target of this instruction
"
      end

      operation 3570434 "dispose"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Inform targets that they're not targeted anymore.
"
      end

      operation 3570562 "getMatchs"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return array of match indices
"
      end

      operation 3570690 "getIndices"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return array of match target offsets
"
      end

      operation 3570818 "getTargets"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return array of match targets
"
      end
    end

    class 559746 "JsrInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Super class for JSR - Jump to subroutine

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1146882 // <generalisation>
	relation 1146882 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1146882 // <generalisation>
	  b parent class_ref 554370 // BranchInstruction
      end

      classrelation 1147010 // <realization>
	relation 1147010 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1147010 // <realization>
	  b parent class_ref 553346 // UnconditionalBranch
      end

      classrelation 1147138 // <realization>
	relation 1147138 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1147138 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      classrelation 1147266 // <realization>
	relation 1147266 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1147266 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3557506 "JsrInstruction"
	package explicit_return_type ""
	nparams 2
	  param in name "opcode" explicit_type "short"
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3557634 "JsrInstruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3557762 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return return address type
"
      end

      operation 3557890 "physicalSuccessor"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an InstructionHandle to the physical successor
of this JsrInstruction. <B>For this method to work,
this JsrInstruction object must not be shared between
multiple InstructionHandle objects!</B>
Formally, there must not be InstructionHandle objects
i, j where i != j and i.getInstruction() == this ==
j.getInstruction().
@return an InstructionHandle to the \"next\" instruction that
will be executed when RETurned from a subroutine.
"
      end
    end

    class 559874 "GotoInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Super class for GOTO

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1120386 // <generalisation>
	relation 1120386 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1120386 // <generalisation>
	  b parent class_ref 554370 // BranchInstruction
      end

      classrelation 1120514 // <realization>
	relation 1120514 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1120514 // <realization>
	  b parent class_ref 553346 // UnconditionalBranch
      end

      operation 3519746 "GotoInstruction"
	package explicit_return_type ""
	nparams 2
	  param in name "opcode" explicit_type "short"
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3519874 "GotoInstruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end
    end

    class 560002 "InvokeInstruction"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Super class for the INVOKExxx family of instructions.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1144450 // <generalisation>
	relation 1144450 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1144450 // <generalisation>
	  b parent class_ref 560130 // FieldOrMethod
      end

      classrelation 1144578 // <realization>
	relation 1144578 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1144578 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1144706 // <realization>
	relation 1144706 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1144706 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      classrelation 1144834 // <realization>
	relation 1144834 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1144834 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      classrelation 1144962 // <realization>
	relation 1144962 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1144962 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3551106 "InvokeInstruction"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3551234 "InvokeInstruction"
	protected explicit_return_type ""
	nparams 2
	  param in name "opcode" explicit_type "short"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param index to constant pool
"
      end

      operation 3551362 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "cp" type class_ref 541954 // ConstantPool
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction with symbolic references resolved
"
      end

      operation 3551490 "consumeStack"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Also works for instructions whose stack effect depends on the
constant pool entry they reference.
@return Number of words consumed from stack by this instruction
"
      end

      operation 3551618 "produceStack"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Also works for instructions whose stack effect depends on the
constant pool entry they reference.
@return Number of words produced onto stack by this instruction
"
      end

      operation 3551746 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return return type of referenced method.
"
      end

      operation 3551874 "getMethodName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return name of referenced method.
"
      end

      operation 3552002 "getReturnType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return return type of referenced method.
"
      end

      operation 3552130 "getArgumentTypes"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return argument types of referenced method.
"
      end
    end

    class 560130 "FieldOrMethod"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Super class for InvokeInstruction and FieldInstruction, since they have
some methods in common!

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1118082 // <generalisation>
	relation 1118082 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1118082 // <generalisation>
	  b parent class_ref 551426 // CPInstruction
      end

      classrelation 1118210 // <realization>
	relation 1118210 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1118210 // <realization>
	  b parent class_ref 551554 // LoadClass
      end

      operation 3514498 "FieldOrMethod"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3514626 "FieldOrMethod"
	protected explicit_return_type ""
	nparams 2
	  param in name "opcode" explicit_type "short"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param index to constant pool
"
      end

      operation 3514754 "getSignature"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return signature of referenced method/field.
"
      end

      operation 3514882 "getName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return name of referenced method/field.
"
      end

      operation 3515010 "getClassName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return name of the referenced class/interface
"
      end

      operation 3515138 "getClassType"
	public return_type class_ref 551682 // ObjectType
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return type of the referenced class/interface
"
      end

      operation 3515266 "getLoadClassType"
	public return_type class_ref 551682 // ObjectType
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return type of the referenced class/interface
"
      end
    end

    class 560258 "VariableLengthInstruction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denotes an instruction to be a variable length instruction, such as
GOTO, JSR, LOOKUPSWITCH and TABLESWITCH.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>

@see GOTO
@see JSR
@see LOOKUPSWITCH
@see TABLESWITCH
"
    end

    class 560386 "GETSTATIC"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "GETSTATIC - Fetch static field from class
<PRE>Stack: ..., -&gt; ..., value</PRE>
OR
<PRE>Stack: ..., -&gt; ..., value.word1, value.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1120002 // <generalisation>
	relation 1120002 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1120002 // <generalisation>
	  b parent class_ref 559362 // FieldInstruction
      end

      classrelation 1120130 // <realization>
	relation 1120130 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1120130 // <realization>
	  b parent class_ref 550530 // PushInstruction
      end

      classrelation 1120258 // <realization>
	relation 1120258 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1120258 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      operation 3519106 "GETSTATIC"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3519234 "GETSTATIC"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3519362 "produceStack"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3519490 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3519618 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 560514 "IF_ICMPLT"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IF_ICMPLT - Branch if int comparison succeeds

<PRE>Stack: ..., value1, value2 -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1124226 // <generalisation>
	relation 1124226 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1124226 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3528322 "IF_ICMPLT"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3528450 "IF_ICMPLT"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3528578 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3528706 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 560642 "MONITOREXIT"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


MONITOREXIT - Exit monitor for object
<PRE>Stack: ..., objectref -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1157250 // <generalisation>
	relation 1157250 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1157250 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1157378 // <realization>
	relation 1157378 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1157378 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1157506 // <realization>
	relation 1157506 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1157506 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3583234 "MONITOREXIT"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3583362 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3583490 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 560770 "IFLT"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IFLT - Branch if int comparison with zero succeeds

<PRE>Stack: ..., value -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1124994 // <generalisation>
	relation 1124994 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1124994 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3531394 "IFLT"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3531522 "IFLT"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3531650 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3531778 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 560898 "LSTORE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LSTORE - Store long into local variable
<PRE>Stack: ..., value.word1, value.word2 -&gt; ... </PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1154434 // <generalisation>
	relation 1154434 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1154434 // <generalisation>
	  b parent class_ref 552962 // StoreInstruction
      end

      operation 3572994 "LSTORE"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3573122 "LSTORE"
	public explicit_return_type ""
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3573250 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 561026 "POP2"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


POP2 - Pop two top operand stack words

<PRE>Stack: ..., word2, word1 -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1159938 // <generalisation>
	relation 1159938 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1159938 // <generalisation>
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1160066 // <realization>
	relation 1160066 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1160066 // <realization>
	  b parent class_ref 553090 // PopInstruction
      end

      operation 3588482 "POP2"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3588610 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 561154 "ISTORE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


ISTORE - Store int from stack into local variable
<PRE>Stack: ..., value -&gt; ... </PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1146370 // <generalisation>
	relation 1146370 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1146370 // <generalisation>
	  b parent class_ref 552962 // StoreInstruction
      end

      operation 3556354 "ISTORE"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3556482 "ISTORE"
	public explicit_return_type ""
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Store int into local variable
@param n index of local variable
"
      end

      operation 3556610 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 561282 "FCMPG"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FCMPG - Compare floats: value1 > value2
<PRE>Stack: ..., value1, value2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1115266 // <generalisation>
	relation 1115266 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1115266 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1115394 // <realization>
	relation 1115394 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1115394 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      classrelation 1115522 // <realization>
	relation 1115522 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1115522 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      classrelation 1115650 // <realization>
	relation 1115650 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1115650 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3507714 "FCMPG"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3507842 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return Type.FLOAT
"
      end

      operation 3507970 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 561410 "I2F"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


I2F - Convert int to float
<PRE>Stack: ..., value -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1121410 // <generalisation>
	relation 1121410 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1121410 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3522050 "I2F"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert int to float
"
      end

      operation 3522178 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 561538 "INVOKESTATIC"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "INVOKESTATIC - Invoke a class (static) method

<PRE>Stack: ..., [arg1, [arg2 ...]] -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1145346 // <generalisation>
	relation 1145346 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1145346 // <generalisation>
	  b parent class_ref 560002 // InvokeInstruction
      end

      operation 3553922 "INVOKESTATIC"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3554050 "INVOKESTATIC"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3554178 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3554306 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 561666 "LCONST"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LCONST - Push 0 or 1, other values cause an exception

<PRE>Stack: ... -&gt; ..., </PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1149442 // <generalisation>
	relation 1149442 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1149442 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1149570 // <realization>
	relation 1149570 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1149570 // <realization>
	  b parent class_ref 553858 // ConstantPushInstruction
      end

      classrelation 1149698 // <realization>
	relation 1149698 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1149698 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      attribute 759682 "value"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3561474 "LCONST"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3561602 "LCONST"
	public explicit_return_type ""
	nparams 1
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3561730 "getValue"
	public return_type class_ref 398210 // Number
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3561858 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return Type.LONG
"
      end

      operation 3561986 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 561794 "IFGE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IFGE - Branch if int comparison with zero succeeds

<PRE>Stack: ..., value -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1124610 // <generalisation>
	relation 1124610 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1124610 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3529858 "IFGE"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3529986 "IFGE"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3530114 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3530242 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 561922 "LASTORE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LASTORE -  Store into long array
<PRE>Stack: ..., arrayref, index, value.word1, value.word2 -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1148674 // <generalisation>
	relation 1148674 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1148674 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1148802 // <realization>
	relation 1148802 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1148802 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3560834 "LASTORE"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Store long into array
"
      end

      operation 3560962 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 562050 "I2D"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


I2D - Convert int to double
<PRE>Stack: ..., value -&gt; ..., result.word1, result.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1121282 // <generalisation>
	relation 1121282 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1121282 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3521794 "I2D"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert int to double
"
      end

      operation 3521922 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 562178 "INVOKESPECIAL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "INVOKESPECIAL - Invoke instance method; special handling for superclass, private
and instance initialization method invocations

<PRE>Stack: ..., objectref, [arg1, [arg2 ...]] -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1145218 // <generalisation>
	relation 1145218 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1145218 // <generalisation>
	  b parent class_ref 560002 // InvokeInstruction
      end

      operation 3553410 "INVOKESPECIAL"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3553538 "INVOKESPECIAL"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3553666 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3553794 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 562306 "IAND"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IAND - Bitwise AND int
<PRE>Stack: ..., value1, value2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1122178 // <generalisation>
	relation 1122178 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1122178 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3523330 "IAND"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3523458 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 562434 "PUTFIELD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "PUTFIELD - Put field in object
<PRE>Stack: ..., objectref, value -&gt; ...</PRE>
OR
<PRE>Stack: ..., objectref, value.word1, value.word2 -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1160706 // <generalisation>
	relation 1160706 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1160706 // <generalisation>
	  b parent class_ref 559362 // FieldInstruction
      end

      classrelation 1160834 // <realization>
	relation 1160834 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1160834 // <realization>
	  b parent class_ref 553090 // PopInstruction
      end

      classrelation 1160962 // <realization>
	relation 1160962 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1160962 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      operation 3590274 "PUTFIELD"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3590402 "PUTFIELD"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3590530 "consumeStack"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3590658 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3590786 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 562562 "ILOAD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


ILOAD - Load int from local variable onto stack
<PRE>Stack: ... -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1125634 // <generalisation>
	relation 1125634 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1125634 // <generalisation>
	  b parent class_ref 550914 // LoadInstruction
      end

      operation 3534850 "ILOAD"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3534978 "ILOAD"
	public explicit_return_type ""
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load int from local variable
@param n index of local variable
"
      end

      operation 3535106 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 562690 "NEW"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "NEW - Create new object
<PRE>Stack: ... -&gt; ..., objectref</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1158146 // <generalisation>
	relation 1158146 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1158146 // <generalisation>
	  b parent class_ref 551426 // CPInstruction
      end

      classrelation 1158274 // <realization>
	relation 1158274 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1158274 // <realization>
	  b parent class_ref 551554 // LoadClass
      end

      classrelation 1158402 // <realization>
	relation 1158402 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1158402 // <realization>
	  b parent class_ref 550658 // AllocationInstruction
      end

      classrelation 1158530 // <realization>
	relation 1158530 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1158530 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1158658 // <realization>
	relation 1158658 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1158658 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3585026 "NEW"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3585154 "NEW"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3585282 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3585410 "getLoadClassType"
	public return_type class_ref 551682 // ObjectType
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3585538 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 562818 "IFNULL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IFNULL - Branch if reference is not null

<PRE>Stack: ..., reference -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1125378 // <generalisation>
	relation 1125378 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1125378 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3532930 "IFNULL"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3533058 "IFNULL"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3533186 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3533314 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 562946 "LSUB"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LSUB - Substract longs
<PRE>Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;</PRE>
       ..., result.word1, result.word2

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1154562 // <generalisation>
	relation 1154562 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1154562 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3573378 "LSUB"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3573506 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 563074 "L2I"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


L2I - Convert long to int
<PRE>Stack: ..., value.word1, value.word2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1148034 // <generalisation>
	relation 1148034 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1148034 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3559810 "L2I"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3559938 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 563202 "ISHR"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


ISHR - Arithmetic shift right int
<PRE>Stack: ..., value1, value2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1146242 // <generalisation>
	relation 1146242 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1146242 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3556098 "ISHR"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3556226 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 563330 "TABLESWITCH"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "TABLESWITCH - Switch within given range of values, i.e., low..high

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@see SWITCH
"
      classrelation 1163906 // <generalisation>
	relation 1163906 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1163906 // <generalisation>
	  b parent class_ref 559618 // Select
      end

      operation 3596418 "TABLESWITCH"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3596546 "TABLESWITCH"
	public explicit_return_type ""
	nparams 3
	  param inout name "match" explicit_type "int"
	multiplicity "[]"
	  param inout name "targets" type class_ref 554114 // InstructionHandle
	multiplicity "[]"
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param match sorted array of match values, match[0] must be low value,
match[match_length - 1] high value
@param targets where to branch for matched values
@param target default branch
"
      end

      operation 3596674 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3596802 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (e.g. index) from file.
"
      end

      operation 3596930 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 563458 "IINC"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "IINC - Increment local variable by constant

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1125506 // <generalisation>
	relation 1125506 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1125506 // <generalisation>
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      attribute 758914 "wide"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 759042 "c"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3533442 "IINC"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3533570 "IINC"
	public explicit_return_type ""
	nparams 2
	  param in name "n" explicit_type "int"
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param n index of local variable
@param c increment factor
"
      end

      operation 3533698 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3533826 "setWide"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3533954 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (e.g. index) from file.
"
      end

      operation 3534082 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "verbose" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction
"
      end

      operation 3534210 "setIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set index of local variable.
"
      end

      operation 3534338 "getIncrement"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return increment factor
"
      end

      operation 3534466 "setIncrement"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set increment factor.
"
      end

      operation 3534594 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return int type
"
      end

      operation 3534722 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 563586 "FSTORE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FSTORE - Store float into local variable
<PRE>Stack: ..., value -&gt; ... </PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1119234 // <generalisation>
	relation 1119234 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1119234 // <generalisation>
	  b parent class_ref 552962 // StoreInstruction
      end

      operation 3517826 "FSTORE"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3517954 "FSTORE"
	public explicit_return_type ""
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Store float into local variable
@param n index of local variable
"
      end

      operation 3518082 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 563714 "IALOAD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IALOAD - Load int from array
<PRE>Stack: ..., arrayref, index -&gt; ..., value</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1121922 // <generalisation>
	relation 1121922 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1121922 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1122050 // <realization>
	relation 1122050 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1122050 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3523074 "IALOAD"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load int from array
"
      end

      operation 3523202 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 563842 "IF_ICMPGE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IF_ICMPGE - Branch if int comparison succeeds

<PRE>Stack: ..., value1, value2 -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1123842 // <generalisation>
	relation 1123842 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1123842 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3526786 "IF_ICMPGE"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3526914 "IF_ICMPGE"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3527042 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3527170 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 563970 "LAND"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LAND - Bitwise AND longs
<PRE>Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;</PRE>
       ..., result.word1, result.word2

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1148546 // <generalisation>
	relation 1148546 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1148546 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3560578 "LAND"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3560706 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 564098 "IDIV"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IDIV - Divide ints
<PRE>Stack: ..., value1, value2 -&gt; result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1122946 // <generalisation>
	relation 1122946 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1122946 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1123074 // <realization>
	relation 1123074 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1123074 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      operation 3524482 "IDIV"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Divide ints
"
      end

      operation 3524610 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return exceptions this instruction may cause
"
      end

      operation 3524738 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 564226 "LOR"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LOR - Bitwise OR long
<PRE>Stack: ..., value1, value2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1153666 // <generalisation>
	relation 1153666 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1153666 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3571586 "LOR"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3571714 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 564354 "FREM"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FREM - Remainder of floats
<PRE>Stack: ..., value1, value2 -&gt; result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1118978 // <generalisation>
	relation 1118978 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1118978 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3517314 "FREM"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Remainder of floats
"
      end

      operation 3517442 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 564482 "LDC"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "LDC - Push item from constant pool.

<PRE>Stack: ... -&gt; ..., item</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1149826 // <generalisation>
	relation 1149826 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1149826 // <generalisation>
	  b parent class_ref 551426 // CPInstruction
      end

      classrelation 1149954 // <realization>
	relation 1149954 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1149954 // <realization>
	  b parent class_ref 550530 // PushInstruction
      end

      classrelation 1150082 // <realization>
	relation 1150082 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1150082 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1150210 // <realization>
	relation 1150210 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1150210 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      operation 3562114 "LDC"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3562242 "LDC"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3562370 "setSize"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adjust to proper size"
      end

      operation 3562498 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3562626 "setIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the index to constant pool and adjust size.
"
      end

      operation 3562754 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (e.g. index) from file.
"
      end

      operation 3562882 "getValue"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3563010 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3563138 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3563266 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 564610 "F2L"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


F2L - Convert float to long
<PRE>Stack: ..., value -&gt; ..., result.word1, result.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1114498 // <generalisation>
	relation 1114498 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1114498 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3506690 "F2L"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert float to long
"
      end

      operation 3506818 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 564738 "FMUL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FMUL - Multiply floats
<PRE>Stack: ..., value1, value2 -&gt; result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1118722 // <generalisation>
	relation 1118722 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1118722 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3516802 "FMUL"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Multiply floats
"
      end

      operation 3516930 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 564866 "LLOAD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LLOAD - Load long from local variable
<PRE>Stack ... -&GT; ..., result.word1, result.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1151618 // <generalisation>
	relation 1151618 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1151618 // <generalisation>
	  b parent class_ref 550914 // LoadInstruction
      end

      operation 3565954 "LLOAD"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3566082 "LLOAD"
	public explicit_return_type ""
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3566210 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 564994 "JSR"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "JSR - Jump to subroutine

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1147394 // <generalisation>
	relation 1147394 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1147394 // <generalisation>
	  b parent class_ref 559746 // JsrInstruction
      end

      classrelation 1147522 // <realization>
	relation 1147522 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1147522 // <realization>
	  b parent class_ref 560258 // VariableLengthInstruction
      end

      operation 3558018 "JSR"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3558146 "JSR"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3558274 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3558402 "updatePosition"
	protected explicit_return_type "int"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "max_offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3558530 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 565122 "FSUB"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FSUB - Substract floats
<PRE>Stack: ..., value1, value2 -&gt; result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1119362 // <generalisation>
	relation 1119362 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1119362 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3518210 "FSUB"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Substract floats
"
      end

      operation 3518338 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 565250 "SASTORE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


SASTORE - Store into short array
<PRE>Stack: ..., arrayref, index, value -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1162626 // <generalisation>
	relation 1162626 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1162626 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1162754 // <realization>
	relation 1162754 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1162754 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3593986 "SASTORE"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3594114 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 565378 "RETURN"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


RETURN -  Return from void method
<PRE>Stack: ... -&gt; &lt;empty&gt;</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1161858 // <generalisation>
	relation 1161858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1161858 // <generalisation>
	  b parent class_ref 551938 // ReturnInstruction
      end

      operation 3592834 "RETURN"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3592962 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 565506 "SIPUSH"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "SIPUSH - Push short

<PRE>Stack: ... -&gt; ..., value</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1162882 // <generalisation>
	relation 1162882 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1162882 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1163010 // <realization>
	relation 1163010 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1163010 // <realization>
	  b parent class_ref 553858 // ConstantPushInstruction
      end

      attribute 761730 "b"
	private explicit_type "short"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3594242 "SIPUSH"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3594370 "SIPUSH"
	public explicit_return_type ""
	nparams 1
	  param in name "b" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3594498 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as short code to stream out.
"
      end

      operation 3594626 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "verbose" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction
"
      end

      operation 3594754 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (e.g. index) from file.
"
      end

      operation 3594882 "getValue"
	public return_type class_ref 398210 // Number
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3595010 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return Type.SHORT
"
      end

      operation 3595138 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 565634 "L2F"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


L2F - Convert long to float
<PRE>Stack: ..., value.word1, value.word2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1147906 // <generalisation>
	relation 1147906 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1147906 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3559554 "L2F"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3559682 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 565762 "IF_ICMPGT"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IF_ICMPGT - Branch if int comparison succeeds

<PRE>Stack: ..., value1, value2 -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1123970 // <generalisation>
	relation 1123970 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1123970 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3527298 "IF_ICMPGT"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3527426 "IF_ICMPGT"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3527554 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3527682 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 565890 "F2D"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


F2D - Convert float to double
<PRE>Stack: ..., value -&gt; ..., result.word1, result.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1114242 // <generalisation>
	relation 1114242 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1114242 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3506178 "F2D"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert float to double
"
      end

      operation 3506306 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 566018 "I2L"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


I2L - Convert int to long
<PRE>Stack: ..., value -&gt; ..., result.word1, result.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1121538 // <generalisation>
	relation 1121538 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1121538 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3522306 "I2L"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert int to long
"
      end

      operation 3522434 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 566146 "IF_ACMPNE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IF_ACMPNE - Branch if reference comparison doesn't succeed

<PRE>Stack: ..., value1, value2 -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1123586 // <generalisation>
	relation 1123586 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1123586 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3525762 "IF_ACMPNE"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3525890 "IF_ACMPNE"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3526018 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3526146 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 566274 "POP"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


POP - Pop top operand stack word

<PRE>Stack: ..., word -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1159682 // <generalisation>
	relation 1159682 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1159682 // <generalisation>
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1159810 // <realization>
	relation 1159810 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1159810 // <realization>
	  b parent class_ref 553090 // PopInstruction
      end

      operation 3588226 "POP"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3588354 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 566402 "I2S"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


I2S - Convert int to short
<PRE>Stack: ..., value -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1121666 // <generalisation>
	relation 1121666 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1121666 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3522562 "I2S"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3522690 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 566530 "IFEQ"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IFEQ - Branch if int comparison with zero succeeds

<PRE>Stack: ..., value -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1124482 // <generalisation>
	relation 1124482 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1124482 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3529346 "IFEQ"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3529474 "IFEQ"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3529602 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction, e.g. IFEQ.negate() == IFNE
"
      end

      operation 3529730 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 566658 "SWAP"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


SWAP - Swa top operand stack word
<PRE>Stack: ..., word2, word1 -&gt; ..., word1, word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1163138 // <generalisation>
	relation 1163138 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1163138 // <generalisation>
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1163266 // <realization>
	relation 1163266 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1163266 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      classrelation 1163394 // <realization>
	relation 1163394 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1163394 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3595266 "SWAP"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3595394 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 566786 "IOR"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IOR - Bitwise OR int
<PRE>Stack: ..., value1, value2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1145602 // <generalisation>
	relation 1145602 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1145602 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3554946 "IOR"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3555074 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 566914 "IREM"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IREM - Remainder of int
<PRE>Stack: ..., value1, value2 -&gt; result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1145730 // <generalisation>
	relation 1145730 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1145730 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1145858 // <realization>
	relation 1145858 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1145858 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      operation 3555202 "IREM"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Remainder of ints
"
      end

      operation 3555330 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return exceptions this instruction may cause
"
      end

      operation 3555458 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 567042 "IASTORE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IASTORE -  Store into int array
<PRE>Stack: ..., arrayref, index, value -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1122306 // <generalisation>
	relation 1122306 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1122306 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1122434 // <realization>
	relation 1122434 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1122434 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3523586 "IASTORE"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Store into int array
"
      end

      operation 3523714 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 567170 "NEWARRAY"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "NEWARRAY -  Create new array of basic type (int, short, ...)
<PRE>Stack: ..., count -&gt; ..., arrayref</PRE>
type must be one of T_INT, T_SHORT, ...

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1158786 // <generalisation>
	relation 1158786 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1158786 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1158914 // <realization>
	relation 1158914 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1158914 // <realization>
	  b parent class_ref 550658 // AllocationInstruction
      end

      classrelation 1159042 // <realization>
	relation 1159042 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1159042 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1159170 // <realization>
	relation 1159170 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1159170 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      attribute 761346 "type"
	private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3585666 "NEWARRAY"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3585794 "NEWARRAY"
	public explicit_return_type ""
	nparams 1
	  param in name "type" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3585922 "NEWARRAY"
	public explicit_return_type ""
	nparams 1
	  param inout name "type" type class_ref 552578 // BasicType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3586050 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3586178 "getTypecode"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return numeric code for basic element type
"
      end

      operation 3586306 "getType"
	public return_type class_ref 547330 // Type
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return type of constructed array
"
      end

      operation 3586434 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "verbose" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction
"
      end

      operation 3586562 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (e.g. index) from file.
"
      end

      operation 3586690 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3586818 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 567298 "INVOKEINTERFACE"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "INVOKEINTERFACE - Invoke interface method
<PRE>Stack: ..., objectref, [arg1, [arg2 ...]] -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1145090 // <generalisation>
	relation 1145090 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1145090 // <generalisation>
	  b parent class_ref 560002 // InvokeInstruction
      end

      attribute 759554 "nargs"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of arguments on stack (number of stack slots), called \"count\" in vmspec2"
      end

      operation 3552258 "INVOKEINTERFACE"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3552386 "INVOKEINTERFACE"
	public explicit_return_type ""
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "nargs" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3552514 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3552642 "getCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <B>count</B> argument according to the Java Language Specification,
Second Edition.
"
      end

      operation 3552770 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (i.e., index) from file.
"
      end

      operation 3552898 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "cp" type class_ref 541954 // ConstantPool
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction with symbolic references resolved
"
      end

      operation 3553026 "consumeStack"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3553154 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3553282 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 567426 "INEG"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


INEG - Negate int
<PRE>Stack: ..., value -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1126146 // <generalisation>
	relation 1126146 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1126146 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3536002 "INEG"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3536130 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 567554 "LCMP"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LCMP - Compare longs:
<PRE>Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;</PRE>
       ..., result <= -1, 0, 1>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1148930 // <generalisation>
	relation 1148930 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1148930 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1149058 // <realization>
	relation 1149058 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1149058 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      classrelation 1149186 // <realization>
	relation 1149186 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1149186 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      classrelation 1149314 // <realization>
	relation 1149314 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1149314 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3561090 "LCMP"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3561218 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return Type.LONG
"
      end

      operation 3561346 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 567682 "JSR_W"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "JSR_W - Jump to subroutine

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1147650 // <generalisation>
	relation 1147650 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1147650 // <generalisation>
	  b parent class_ref 559746 // JsrInstruction
      end

      operation 3558658 "JSR_W"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3558786 "JSR_W"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3558914 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3559042 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (e.g. index) from file.
"
      end

      operation 3559170 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 567810 "MULTIANEWARRAY"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "MULTIANEWARRAY - Create new mutidimensional array of references
<PRE>Stack: ..., count1, [count2, ...] -&gt; ..., arrayref</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1157634 // <generalisation>
	relation 1157634 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1157634 // <generalisation>
	  b parent class_ref 551426 // CPInstruction
      end

      classrelation 1157762 // <realization>
	relation 1157762 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1157762 // <realization>
	  b parent class_ref 551554 // LoadClass
      end

      classrelation 1157890 // <realization>
	relation 1157890 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1157890 // <realization>
	  b parent class_ref 550658 // AllocationInstruction
      end

      classrelation 1158018 // <realization>
	relation 1158018 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1158018 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      attribute 761218 "dimensions"
	private explicit_type "short"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3583618 "MULTIANEWARRAY"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3583746 "MULTIANEWARRAY"
	public explicit_return_type ""
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "dimensions" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3583874 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3584002 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (i.e., no. dimension) from file.
"
      end

      operation 3584130 "getDimensions"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return number of dimensions to be created
"
      end

      operation 3584258 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "verbose" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction
"
      end

      operation 3584386 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "cp" type class_ref 541954 // ConstantPool
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction with symbolic references resolved
"
      end

      operation 3584514 "consumeStack"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Also works for instructions whose stack effect depends on the
constant pool entry they reference.
@return Number of words consumed from stack by this instruction
"
      end

      operation 3584642 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3584770 "getLoadClassType"
	public return_type class_ref 551682 // ObjectType
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3584898 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 567938 "SALOAD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


SALOAD - Load short from array
<PRE>Stack: ..., arrayref, index -&gt; ..., value</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1162370 // <generalisation>
	relation 1162370 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1162370 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1162498 // <realization>
	relation 1162498 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1162498 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3593730 "SALOAD"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3593858 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 568066 "IFNONNULL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IFNONNULL - Branch if reference is not null

<PRE>Stack: ..., reference -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1125250 // <generalisation>
	relation 1125250 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1125250 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3532418 "IFNONNULL"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3532546 "IFNONNULL"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3532674 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3532802 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 568194 "IFNE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IFNE - Branch if int comparison with zero succeeds

<PRE>Stack: ..., value -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1125122 // <generalisation>
	relation 1125122 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1125122 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3531906 "IFNE"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3532034 "IFNE"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3532162 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3532290 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 568322 "IF_ICMPLE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IF_ICMPLE - Branch if int comparison succeeds

<PRE>Stack: ..., value1, value2 -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1124098 // <generalisation>
	relation 1124098 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1124098 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3527810 "IF_ICMPLE"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3527938 "IF_ICMPLE"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3528066 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3528194 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 568450 "LDC2_W"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LDC2_W - Push long or double from constant pool

<PRE>Stack: ... -&gt; ..., item.word1, item.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1150338 // <generalisation>
	relation 1150338 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1150338 // <generalisation>
	  b parent class_ref 551426 // CPInstruction
      end

      classrelation 1150466 // <realization>
	relation 1150466 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1150466 // <realization>
	  b parent class_ref 550530 // PushInstruction
      end

      classrelation 1150594 // <realization>
	relation 1150594 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1150594 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      operation 3563394 "LDC2_W"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3563522 "LDC2_W"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3563650 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3563778 "getValue"
	public return_type class_ref 398210 // Number
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3563906 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 568578 "GETFIELD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "GETFIELD - Fetch field from object
<PRE>Stack: ..., objectref -&gt; ..., value</PRE>
OR
<PRE>Stack: ..., objectref -&gt; ..., value.word1, value.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1119490 // <generalisation>
	relation 1119490 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1119490 // <generalisation>
	  b parent class_ref 559362 // FieldInstruction
      end

      classrelation 1119618 // <realization>
	relation 1119618 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1119618 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1119746 // <realization>
	relation 1119746 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1119746 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      classrelation 1119874 // <realization>
	relation 1119874 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1119874 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3518466 "GETFIELD"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3518594 "GETFIELD"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3518722 "produceStack"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3518850 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3518978 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 568706 "LADD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LADD - Add longs
<PRE>Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;</PRE>
       ..., result.word1, result.word2

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1148162 // <generalisation>
	relation 1148162 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1148162 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3560066 "LADD"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3560194 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 568834 "NOP"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


NOP - Do nothing

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1159298 // <generalisation>
	relation 1159298 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1159298 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      operation 3586946 "NOP"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3587074 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 568962 "FALOAD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FALOAD - Load float from array
<PRE>Stack: ..., arrayref, index -&gt; ..., value</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1114754 // <generalisation>
	relation 1114754 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1114754 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1114882 // <realization>
	relation 1114882 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1114882 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3507202 "FALOAD"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load float from array
"
      end

      operation 3507330 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 569090 "INSTANCEOF"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


INSTANCEOF - Determine if object is of given type
<PRE>Stack: ..., objectref -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1126274 // <generalisation>
	relation 1126274 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1126274 // <generalisation>
	  b parent class_ref 551426 // CPInstruction
      end

      classrelation 1126402 // <realization>
	relation 1126402 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1126402 // <realization>
	  b parent class_ref 551554 // LoadClass
      end

      classrelation 1126530 // <realization>
	relation 1126530 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1126530 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1126658 // <realization>
	relation 1126658 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1126658 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      classrelation 1126786 // <realization>
	relation 1126786 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1126786 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3536258 "INSTANCEOF"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3536386 "INSTANCEOF"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3536514 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3536642 "getLoadClassType"
	public return_type class_ref 551682 // ObjectType
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3536770 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 569218 "IFLE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IFLE - Branch if int comparison with zero succeeds

<PRE>Stack: ..., value -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1124866 // <generalisation>
	relation 1124866 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1124866 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3530882 "IFLE"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3531010 "IFLE"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3531138 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3531266 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 569346 "LXOR"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LXOR - Bitwise XOR long
<PRE>Stack: ..., value1, value2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1154818 // <generalisation>
	relation 1154818 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1154818 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3573890 "LXOR"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3574018 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 569474 "LRETURN"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LRETURN -  Return long from method
<PRE>Stack: ..., value.word1, value.word2 -&gt; &lt;empty&gt;</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1154050 // <generalisation>
	relation 1154050 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1154050 // <generalisation>
	  b parent class_ref 551938 // ReturnInstruction
      end

      operation 3572226 "LRETURN"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3572354 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 569602 "FCONST"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FCONST - Push 0.0, 1.0 or 2.0, other values cause an exception

<PRE>Stack: ... -&gt; ..., </PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1116290 // <generalisation>
	relation 1116290 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1116290 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1116418 // <realization>
	relation 1116418 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1116418 // <realization>
	  b parent class_ref 553858 // ConstantPushInstruction
      end

      classrelation 1116546 // <realization>
	relation 1116546 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1116546 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      attribute 758658 "value"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3508482 "FCONST"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3508610 "FCONST"
	public explicit_return_type ""
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3508738 "getValue"
	public return_type class_ref 398210 // Number
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3508866 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return Type.FLOAT
"
      end

      operation 3508994 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 569730 "IUSHR"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IUSHR - Logical shift right int
<PRE>Stack: ..., value1, value2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1146626 // <generalisation>
	relation 1146626 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1146626 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3556994 "IUSHR"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3557122 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 569858 "IF_ACMPEQ"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IF_ACMPEQ - Branch if reference comparison succeeds

<PRE>Stack: ..., value1, value2 -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1123458 // <generalisation>
	relation 1123458 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1123458 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3525250 "IF_ACMPEQ"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3525378 "IF_ACMPEQ"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3525506 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3525634 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 569986 "IMPDEP1"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IMPDEP1 - Implementation dependent

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1125762 // <generalisation>
	relation 1125762 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1125762 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      operation 3535234 "IMPDEP1"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3535362 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 570114 "MONITORENTER"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


MONITORENTER - Enter monitor for object
<PRE>Stack: ..., objectref -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1156866 // <generalisation>
	relation 1156866 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1156866 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1156994 // <realization>
	relation 1156994 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1156994 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1157122 // <realization>
	relation 1157122 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1157122 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3582850 "MONITORENTER"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3582978 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3583106 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 570242 "LSHL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LSHL - Arithmetic shift left long
<PRE>Stack: ..., value1.word1, value1.word2, value2 -&gt; ..., result.word1, result.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1154178 // <generalisation>
	relation 1154178 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1154178 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3572482 "LSHL"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3572610 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 570370 "IMPDEP2"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IMPDEP2 - Implementation dependent

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1125890 // <generalisation>
	relation 1125890 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1125890 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      operation 3535490 "IMPDEP2"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3535618 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 570498 "L2D"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


L2D - Convert long to double
<PRE>Stack: ..., value.word1, value.word2 -&gt; ..., result.word1, result.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1147778 // <generalisation>
	relation 1147778 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1147778 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3559298 "L2D"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3559426 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 570626 "RET"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "RET - Return from subroutine

<PRE>Stack: ..., -&gt; ..., address</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1161474 // <generalisation>
	relation 1161474 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1161474 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1161602 // <realization>
	relation 1161602 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1161602 // <realization>
	  b parent class_ref 551170 // IndexedInstruction
      end

      classrelation 1161730 // <realization>
	relation 1161730 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1161730 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      attribute 761474 "wide"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 761602 "index"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " index to local variable containg the return address"
      end

      operation 3591554 "RET"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3591682 "RET"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3591810 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3591938 "setWide"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3592066 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (e.g. index) from file.
"
      end

      operation 3592194 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return index of local variable containg the return address
"
      end

      operation 3592322 "setIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set index of local variable containg the return address
"
      end

      operation 3592450 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "verbose" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction
"
      end

      operation 3592578 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return return address type
"
      end

      operation 3592706 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 570754 "IFGT"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IFGT - Branch if int comparison with zero succeeds

<PRE>Stack: ..., value -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1124738 // <generalisation>
	relation 1124738 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1124738 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3530370 "IFGT"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3530498 "IFGT"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3530626 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3530754 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 570882 "IXOR"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IXOR - Bitwise XOR int
<PRE>Stack: ..., value1, value2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1146754 // <generalisation>
	relation 1146754 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1146754 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3557250 "IXOR"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3557378 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 571010 "INVOKEVIRTUAL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "INVOKEVIRTUAL - Invoke instance method; dispatch based on class

<PRE>Stack: ..., objectref, [arg1, [arg2 ...]] -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1145474 // <generalisation>
	relation 1145474 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1145474 // <generalisation>
	  b parent class_ref 560002 // InvokeInstruction
      end

      operation 3554434 "INVOKEVIRTUAL"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3554562 "INVOKEVIRTUAL"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3554690 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3554818 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 571138 "FASTORE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FASTORE -  Store into float array
<PRE>Stack: ..., arrayref, index, value -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1115010 // <generalisation>
	relation 1115010 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1115010 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1115138 // <realization>
	relation 1115138 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1115138 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3507458 "FASTORE"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Store float into array
"
      end

      operation 3507586 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 571266 "IRETURN"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IRETURN -  Return int from method
<PRE>Stack: ..., value -&gt; &lt;empty&gt;</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1145986 // <generalisation>
	relation 1145986 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1145986 // <generalisation>
	  b parent class_ref 551938 // ReturnInstruction
      end

      operation 3555586 "IRETURN"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return int from method
"
      end

      operation 3555714 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 571394 "IF_ICMPNE"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IF_ICMPNE - Branch if int comparison doesn't succeed

<PRE>Stack: ..., value1, value2 -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1124354 // <generalisation>
	relation 1124354 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1124354 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3528834 "IF_ICMPNE"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3528962 "IF_ICMPNE"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3529090 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3529218 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 571522 "FLOAD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FLOAD - Load float from local variable
<PRE>Stack ... -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1118594 // <generalisation>
	relation 1118594 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1118594 // <generalisation>
	  b parent class_ref 550914 // LoadInstruction
      end

      operation 3516418 "FLOAD"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3516546 "FLOAD"
	public explicit_return_type ""
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load float from local variable
@param n index of local variable
"
      end

      operation 3516674 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 571650 "LDIV"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LDIV - Divide longs
<PRE>Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;</PRE>
       ..., result.word1, result.word2

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1150850 // <generalisation>
	relation 1150850 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1150850 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1150978 // <realization>
	relation 1150978 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1150978 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      operation 3564418 "LDIV"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3564546 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3564674 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 571778 "PUTSTATIC"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "PUTSTATIC - Put static field in class
<PRE>Stack: ..., value -&gt; ...</PRE>
OR
<PRE>Stack: ..., value.word1, value.word2 -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1161090 // <generalisation>
	relation 1161090 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1161090 // <generalisation>
	  b parent class_ref 559362 // FieldInstruction
      end

      classrelation 1161218 // <realization>
	relation 1161218 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1161218 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      classrelation 1161346 // <realization>
	relation 1161346 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1161346 // <realization>
	  b parent class_ref 553090 // PopInstruction
      end

      operation 3590914 "PUTSTATIC"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3591042 "PUTSTATIC"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3591170 "consumeStack"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cpg" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3591298 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3591426 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 571906 "IF_ICMPEQ"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IF_ICMPEQ - Branch if int comparison succeeds

<PRE>Stack: ..., value1, value2 -&gt; ...</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1123714 // <generalisation>
	relation 1123714 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1123714 // <generalisation>
	  b parent class_ref 559490 // IfInstruction
      end

      operation 3526274 "IF_ICMPEQ"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3526402 "IF_ICMPEQ"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3526530 "negate"
	public return_type class_ref 559490 // IfInstruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return negation of instruction
"
      end

      operation 3526658 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 572034 "FNEG"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FNEG - Negate float
<PRE>Stack: ..., value -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1118850 // <generalisation>
	relation 1118850 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1118850 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3517058 "FNEG"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3517186 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 572162 "GOTO_W"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "GOTO_W - Branch always (to relative offset, not absolute address)

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1120898 // <generalisation>
	relation 1120898 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1120898 // <generalisation>
	  b parent class_ref 559874 // GotoInstruction
      end

      operation 3520642 "GOTO_W"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3520770 "GOTO_W"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3520898 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3521026 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (e.g. index) from file.
"
      end

      operation 3521154 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 572290 "GOTO"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "GOTO - Branch always (to relative offset, not absolute address)

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1120642 // <generalisation>
	relation 1120642 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1120642 // <generalisation>
	  b parent class_ref 559874 // GotoInstruction
      end

      classrelation 1120770 // <realization>
	relation 1120770 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1120770 // <realization>
	  b parent class_ref 560258 // VariableLengthInstruction
      end

      operation 3520002 "GOTO"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3520130 "GOTO"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3520258 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3520386 "updatePosition"
	protected explicit_return_type "int"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "max_offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called in pass 2 of InstructionList.setPositions() in order to update
the branch target, that may shift due to variable length instructions.
"
      end

      operation 3520514 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 572418 "ISUB"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


ISUB - Substract ints
<PRE>Stack: ..., value1, value2 -&gt; result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1146498 // <generalisation>
	relation 1146498 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1146498 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3556738 "ISUB"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Substract ints
"
      end

      operation 3556866 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 572546 "F2I"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


F2I - Convert float to int
<PRE>Stack: ..., value -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1114370 // <generalisation>
	relation 1114370 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1114370 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3506434 "F2I"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert float to int
"
      end

      operation 3506562 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 572674 "ICONST"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


ICONST - Push value between -1, ..., 5, other values cause an exception

<PRE>Stack: ... -&gt; ..., </PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1122562 // <generalisation>
	relation 1122562 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1122562 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1122690 // <realization>
	relation 1122690 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1122690 // <realization>
	  b parent class_ref 553858 // ConstantPushInstruction
      end

      classrelation 1122818 // <realization>
	relation 1122818 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1122818 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      attribute 758786 "value"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3523842 "ICONST"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3523970 "ICONST"
	public explicit_return_type ""
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3524098 "getValue"
	public return_type class_ref 398210 // Number
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3524226 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return Type.INT
"
      end

      operation 3524354 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 572802 "FDIV"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FDIV - Divide floats
<PRE>Stack: ..., value1, value2 -&gt; result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1116674 // <generalisation>
	relation 1116674 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1116674 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3509122 "FDIV"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Divide floats
"
      end

      operation 3509250 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 572930 "I2B"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


I2B - Convert int to byte
<PRE>Stack: ..., value -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1121026 // <generalisation>
	relation 1121026 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1121026 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3521282 "I2B"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert int to byte
"
      end

      operation 3521410 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 573058 "LNEG"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LNEG - Negate long
<PRE>Stack: ..., value.word1, value.word2 -&gt; ..., result.word1, result.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1151874 // <generalisation>
	relation 1151874 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1151874 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3566594 "LNEG"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3566722 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 573186 "LREM"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LREM - Remainder of long
<PRE>Stack: ..., value1, value2 -&gt; result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1153794 // <generalisation>
	relation 1153794 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1153794 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1153922 // <realization>
	relation 1153922 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1153922 // <realization>
	  b parent class_ref 549762 // ExceptionThrower
      end

      operation 3571842 "LREM"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3571970 "getExceptions"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3572098 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 573314 "IMUL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IMUL - Multiply ints
<PRE>Stack: ..., value1, value2 -&gt; result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1126018 // <generalisation>
	relation 1126018 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1126018 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3535746 "IMUL"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Multiply ints
"
      end

      operation 3535874 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 573442 "IADD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


IADD - Add ints
<PRE>Stack: ..., value1, value2 -&gt; result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1121794 // <generalisation>
	relation 1121794 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1121794 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3522818 "IADD"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add ints
"
      end

      operation 3522946 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 573570 "LSHR"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LSHR - Arithmetic shift right long
<PRE>Stack: ..., value1.word1, value1.word2, value2 -&gt; ..., result.word1, result.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1154306 // <generalisation>
	relation 1154306 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1154306 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3572738 "LSHR"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3572866 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 573698 "LOOKUPSWITCH"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "LOOKUPSWITCH - Switch with unordered set of values

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@see SWITCH
"
      classrelation 1153538 // <generalisation>
	relation 1153538 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1153538 // <generalisation>
	  b parent class_ref 559618 // Select
      end

      operation 3570946 "LOOKUPSWITCH"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3571074 "LOOKUPSWITCH"
	public explicit_return_type ""
	nparams 3
	  param inout name "match" explicit_type "int"
	multiplicity "[]"
	  param inout name "targets" type class_ref 554114 // InstructionHandle
	multiplicity "[]"
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3571202 "dump"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 175234 // DataOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump instruction as byte code to stream out.
@param out Output stream
"
      end

      operation 3571330 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (e.g. index) from file.
"
      end

      operation 3571458 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 573826 "FCMPL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FCMPL - Compare floats: value1 < value2
<PRE>Stack: ..., value1, value2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1115778 // <generalisation>
	relation 1115778 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1115778 // <generalisation>
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1115906 // <realization>
	relation 1115906 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1115906 // <realization>
	  b parent class_ref 549890 // TypedInstruction
      end

      classrelation 1116034 // <realization>
	relation 1116034 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1116034 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      classrelation 1116162 // <realization>
	relation 1116162 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1116162 // <realization>
	  b parent class_ref 550274 // StackConsumer
      end

      operation 3508098 "FCMPL"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3508226 "getType"
	public return_type class_ref 547330 // Type
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return Type.FLOAT
"
      end

      operation 3508354 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 573954 "I2C"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


I2C - Convert int to char
<PRE>Stack: ..., value -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1121154 // <generalisation>
	relation 1121154 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1121154 // <generalisation>
	  b parent class_ref 556034 // ConversionInstruction
      end

      operation 3521538 "I2C"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert int to char
"
      end

      operation 3521666 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 574082 "LMUL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LMUL - Multiply longs
<PRE>Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;</PRE>
       ..., result.word1, result.word2

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1151746 // <generalisation>
	relation 1151746 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1151746 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3566338 "LMUL"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3566466 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 574210 "LUSHR"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LUSHR - Logical shift right long
<PRE>Stack: ..., value1, value2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1154690 // <generalisation>
	relation 1154690 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1154690 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3573634 "LUSHR"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3573762 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 574338 "ISHL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


ISHL - Arithmetic shift left int
<PRE>Stack: ..., value1, value2 -&gt; ..., result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1146114 // <generalisation>
	relation 1146114 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1146114 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3555842 "ISHL"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3555970 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 574466 "LALOAD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


LALOAD - Load long from array
<PRE>Stack: ..., arrayref, index -&gt; ..., value1, value2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1148290 // <generalisation>
	relation 1148290 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1148290 // <generalisation>
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1148418 // <realization>
	relation 1148418 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1148418 // <realization>
	  b parent class_ref 550018 // StackProducer
      end

      operation 3560322 "LALOAD"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load long from array
"
      end

      operation 3560450 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 574594 "FRETURN"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FRETURN -  Return float from method
<PRE>Stack: ..., value -&gt; &lt;empty&gt;</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1119106 // <generalisation>
	relation 1119106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1119106 // <generalisation>
	  b parent class_ref 551938 // ReturnInstruction
      end

      operation 3517570 "FRETURN"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return float from method
"
      end

      operation 3517698 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 574722 "FADD"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


FADD - Add floats
<PRE>Stack: ..., value1, value2 -&gt; result</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1114626 // <generalisation>
	relation 1114626 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1114626 // <generalisation>
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      operation 3506946 "FADD"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add floats
"
      end

      operation 3507074 "accept"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 549634 // Visitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call corresponding visitor method(s). The order is:
Call visitor methods of implemented interfaces first, then
call methods according to the class hierarchy in descending order,
i.e., the most specific visitXXX() call comes last.

@param v Visitor object
"
      end
    end

    class 574850 "FieldGen"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Template class for building up a field.  The only extraordinary thing
one can do is to add a constant value attribute to a field (which must of
course be compatible with to the declared type).

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@see Field
"
      classrelation 1117698 // <generalisation>
	relation 1117698 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1117698 // <generalisation>
	  b parent class_ref 574978 // FieldGenOrMethodGen
      end

      classrelation 1117826 // value (<unidirectional association>)
	relation 1117826 --->
	  a role_name "value" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1117826 // value (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 3511554 "FieldGen"
	public explicit_return_type ""
	nparams 4
	  param in name "access_flags" explicit_type "int"
	  param inout name "type" type class_ref 547330 // Type
	  param inout name "name" type class_ref 128130 // String
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Declare a field. If it is static (isStatic() == true) and has a
basic type like int or String it may have an initial value
associated with it as defined by setInitValue().

@param access_flags access qualifiers
@param type  field type
@param name field name
@param cp constant pool
"
      end

      operation 3511682 "FieldGen"
	public explicit_return_type ""
	nparams 2
	  param inout name "field" type class_ref 542594 // Field
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiate from existing field.

@param field Field object
@param cp constant pool (must contain the same entries as the field's constant pool)
"
      end

      operation 3511810 "setValue"
	private explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3511938 "setInitValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set (optional) initial value of field, otherwise it will be set to null/0/false
by the JVM automatically.
"
      end

      operation 3512066 "setInitValue"
	public explicit_return_type "void"
	nparams 1
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3512194 "setInitValue"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3512322 "setInitValue"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3512450 "setInitValue"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3512578 "setInitValue"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3512706 "setInitValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3512834 "setInitValue"
	public explicit_return_type "void"
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3512962 "setInitValue"
	public explicit_return_type "void"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3513090 "cancelInitValue"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Remove any initial value.
"
      end

      operation 3513218 "checkType"
	private explicit_return_type "void"
	nparams 1
	  param inout name "atype" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3513346 "getField"
	public return_type class_ref 542594 // Field
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get field object after having set up all necessary values.
"
      end

      operation 3513474 "addConstant"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3513602 "getSignature"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1117954 // observers (<unidirectional association>)
	relation 1117954 --->
	  a role_name "observers" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1117954 // observers (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      operation 3513730 "addObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 575234 // FieldObserver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add observer for this object.
"
      end

      operation 3513858 "removeObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 575234 // FieldObserver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Remove observer for this object.
"
      end

      operation 3513986 "update"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Call notify() method on all observers. This method is not called
automatically whenever the state has changed, but has to be
called by the user after he has finished editing the object.
"
      end

      operation 3514114 "getInitValue"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3514242 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return string representation close to declaration format,
`public static final short MAX = 100', e.g..

@return String representation of field
"
      end

      operation 3514370 "copy"
	public return_type class_ref 574850 // FieldGen
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return deep copy of this field
"
      end
    end

    class 574978 "FieldGenOrMethodGen"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Super class for FieldGen and MethodGen objects, since they have
some methods in common!

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1116802 // <generalisation>
	relation 1116802 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1116802 // <generalisation>
	  b parent class_ref 541442 // AccessFlags
      end

      classrelation 1116930 // <realization>
	relation 1116930 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1116930 // <realization>
	  b parent class_ref 575106 // NamedAndTyped
      end

      classrelation 1117058 // <realization>
	relation 1117058 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1117058 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 1117186 // name (<unidirectional association>)
	relation 1117186 --->
	  a role_name "name" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1117186 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1117314 // type (<unidirectional association>)
	relation 1117314 --->
	  a role_name "type" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1117314 // type (<unidirectional association>)
	  b parent class_ref 547330 // Type
      end

      classrelation 1117442 // cp (<unidirectional association>)
	relation 1117442 --->
	  a role_name "cp" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1117442 // cp (<unidirectional association>)
	  b parent class_ref 549506 // ConstantPoolGen
      end

      classrelation 1117570 // attribute_vec (<unidirectional association>)
	relation 1117570 --->
	  a role_name "attribute_vec" init_value " new ArrayList()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1117570 // attribute_vec (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      operation 3509890 "FieldGenOrMethodGen"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3510018 "setType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "type" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3510146 "getType"
	public return_type class_ref 547330 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3510274 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return name of method/field.
"
      end

      operation 3510402 "setName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3510530 "getConstantPool"
	public return_type class_ref 549506 // ConstantPoolGen
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3510658 "setConstantPool"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3510786 "addAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a" type class_ref 541570 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add an attribute to this method. Currently, the JVM knows about
the `Code', `ConstantValue', `Synthetic' and `Exceptions'
attributes. Other attributes will be ignored by the JVM but do no
harm.

@param a attribute to be added
"
      end

      operation 3510914 "removeAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a" type class_ref 541570 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove an attribute.
"
      end

      operation 3511042 "removeAttributes"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all attributes.
"
      end

      operation 3511170 "getAttributes"
	public return_type class_ref 541570 // Attribute
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return all attributes of this method.
"
      end

      operation 3511298 "getSignature"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return signature of method/field.
"
      end

      operation 3511426 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 575106 "NamedAndTyped"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Denote entity that has both name and type. This is true for local variables,
methods and fields.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      operation 3509378 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3509506 "getType"
	public return_type class_ref 547330 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3509634 "setName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3509762 "setType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "type" type class_ref 547330 // Type
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 575234 "FieldObserver"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Imnplement this interface if you're interested in changes to a FieldGen object
and register yourself with addObserver().

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      operation 3516290 "notify"
	public explicit_return_type "void"
	nparams 1
	  param inout name "field" type class_ref 574850 // FieldGen
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 575362 "InstructionConstants"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface contains shareable instruction objects.

In order to save memory you can use some instructions multiply,
since they have an immutable state and are directly derived from
Instruction.  I.e. they have no instance fields that could be
changed. Since some of these instructions like ICONST_0 occur
very frequently this can save a lot of time and space. This
feature is an adaptation of the FlyWeight design pattern, we
just use an array instead of a factory.

The Instructions can also accessed directly under their names, so
it's possible to write il.append(Instruction.ICONST_0);

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1127042 // NOP (<unidirectional association>)
	relation 1127042 --->
	  a role_name "NOP" init_value " new NOP()" class_relation const_relation public
	    comment " Predefined instruction objects

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1127042 // NOP (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1127170 // ACONST_NULL (<unidirectional association>)
	relation 1127170 --->
	  a role_name "ACONST_NULL" init_value " new ACONST_NULL()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1127170 // ACONST_NULL (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1127298 // ICONST_M1 (<unidirectional association>)
	relation 1127298 --->
	  a role_name "ICONST_M1" init_value " new ICONST(-1)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1127298 // ICONST_M1 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1127426 // ICONST_0 (<unidirectional association>)
	relation 1127426 --->
	  a role_name "ICONST_0" init_value " new ICONST(0)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1127426 // ICONST_0 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1127554 // ICONST_1 (<unidirectional association>)
	relation 1127554 --->
	  a role_name "ICONST_1" init_value " new ICONST(1)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1127554 // ICONST_1 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1127682 // ICONST_2 (<unidirectional association>)
	relation 1127682 --->
	  a role_name "ICONST_2" init_value " new ICONST(2)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1127682 // ICONST_2 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1127810 // ICONST_3 (<unidirectional association>)
	relation 1127810 --->
	  a role_name "ICONST_3" init_value " new ICONST(3)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1127810 // ICONST_3 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1127938 // ICONST_4 (<unidirectional association>)
	relation 1127938 --->
	  a role_name "ICONST_4" init_value " new ICONST(4)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1127938 // ICONST_4 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1128066 // ICONST_5 (<unidirectional association>)
	relation 1128066 --->
	  a role_name "ICONST_5" init_value " new ICONST(5)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1128066 // ICONST_5 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1128194 // LCONST_0 (<unidirectional association>)
	relation 1128194 --->
	  a role_name "LCONST_0" init_value " new LCONST(0)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1128194 // LCONST_0 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1128322 // LCONST_1 (<unidirectional association>)
	relation 1128322 --->
	  a role_name "LCONST_1" init_value " new LCONST(1)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1128322 // LCONST_1 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1128450 // FCONST_0 (<unidirectional association>)
	relation 1128450 --->
	  a role_name "FCONST_0" init_value " new FCONST(0)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1128450 // FCONST_0 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1128578 // FCONST_1 (<unidirectional association>)
	relation 1128578 --->
	  a role_name "FCONST_1" init_value " new FCONST(1)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1128578 // FCONST_1 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1128706 // FCONST_2 (<unidirectional association>)
	relation 1128706 --->
	  a role_name "FCONST_2" init_value " new FCONST(2)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1128706 // FCONST_2 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1128834 // DCONST_0 (<unidirectional association>)
	relation 1128834 --->
	  a role_name "DCONST_0" init_value " new DCONST(0)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1128834 // DCONST_0 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1128962 // DCONST_1 (<unidirectional association>)
	relation 1128962 --->
	  a role_name "DCONST_1" init_value " new DCONST(1)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1128962 // DCONST_1 (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1129090 // IALOAD (<unidirectional association>)
	relation 1129090 --->
	  a role_name "IALOAD" init_value " new IALOAD()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1129090 // IALOAD (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1129218 // LALOAD (<unidirectional association>)
	relation 1129218 --->
	  a role_name "LALOAD" init_value " new LALOAD()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1129218 // LALOAD (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1129346 // FALOAD (<unidirectional association>)
	relation 1129346 --->
	  a role_name "FALOAD" init_value " new FALOAD()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1129346 // FALOAD (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1129474 // DALOAD (<unidirectional association>)
	relation 1129474 --->
	  a role_name "DALOAD" init_value " new DALOAD()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1129474 // DALOAD (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1129602 // AALOAD (<unidirectional association>)
	relation 1129602 --->
	  a role_name "AALOAD" init_value " new AALOAD()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1129602 // AALOAD (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1129730 // BALOAD (<unidirectional association>)
	relation 1129730 --->
	  a role_name "BALOAD" init_value " new BALOAD()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1129730 // BALOAD (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1129858 // CALOAD (<unidirectional association>)
	relation 1129858 --->
	  a role_name "CALOAD" init_value " new CALOAD()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1129858 // CALOAD (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1129986 // SALOAD (<unidirectional association>)
	relation 1129986 --->
	  a role_name "SALOAD" init_value " new SALOAD()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1129986 // SALOAD (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1130114 // IASTORE (<unidirectional association>)
	relation 1130114 --->
	  a role_name "IASTORE" init_value " new IASTORE()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1130114 // IASTORE (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1130242 // LASTORE (<unidirectional association>)
	relation 1130242 --->
	  a role_name "LASTORE" init_value " new LASTORE()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1130242 // LASTORE (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1130370 // FASTORE (<unidirectional association>)
	relation 1130370 --->
	  a role_name "FASTORE" init_value " new FASTORE()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1130370 // FASTORE (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1130498 // DASTORE (<unidirectional association>)
	relation 1130498 --->
	  a role_name "DASTORE" init_value " new DASTORE()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1130498 // DASTORE (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1130626 // AASTORE (<unidirectional association>)
	relation 1130626 --->
	  a role_name "AASTORE" init_value " new AASTORE()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1130626 // AASTORE (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1130754 // BASTORE (<unidirectional association>)
	relation 1130754 --->
	  a role_name "BASTORE" init_value " new BASTORE()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1130754 // BASTORE (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1130882 // CASTORE (<unidirectional association>)
	relation 1130882 --->
	  a role_name "CASTORE" init_value " new CASTORE()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1130882 // CASTORE (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1131010 // SASTORE (<unidirectional association>)
	relation 1131010 --->
	  a role_name "SASTORE" init_value " new SASTORE()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1131010 // SASTORE (<unidirectional association>)
	  b parent class_ref 549122 // ArrayInstruction
      end

      classrelation 1131138 // POP (<unidirectional association>)
	relation 1131138 --->
	  a role_name "POP" init_value " new POP()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1131138 // POP (<unidirectional association>)
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1131266 // POP2 (<unidirectional association>)
	relation 1131266 --->
	  a role_name "POP2" init_value " new POP2()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1131266 // POP2 (<unidirectional association>)
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1131394 // DUP (<unidirectional association>)
	relation 1131394 --->
	  a role_name "DUP" init_value " new DUP()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1131394 // DUP (<unidirectional association>)
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1131522 // DUP_X1 (<unidirectional association>)
	relation 1131522 --->
	  a role_name "DUP_X1" init_value " new DUP_X1()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1131522 // DUP_X1 (<unidirectional association>)
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1131650 // DUP_X2 (<unidirectional association>)
	relation 1131650 --->
	  a role_name "DUP_X2" init_value " new DUP_X2()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1131650 // DUP_X2 (<unidirectional association>)
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1131778 // DUP2 (<unidirectional association>)
	relation 1131778 --->
	  a role_name "DUP2" init_value " new DUP2()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1131778 // DUP2 (<unidirectional association>)
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1131906 // DUP2_X1 (<unidirectional association>)
	relation 1131906 --->
	  a role_name "DUP2_X1" init_value " new DUP2_X1()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1131906 // DUP2_X1 (<unidirectional association>)
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1132034 // DUP2_X2 (<unidirectional association>)
	relation 1132034 --->
	  a role_name "DUP2_X2" init_value " new DUP2_X2()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1132034 // DUP2_X2 (<unidirectional association>)
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1132162 // SWAP (<unidirectional association>)
	relation 1132162 --->
	  a role_name "SWAP" init_value " new SWAP()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1132162 // SWAP (<unidirectional association>)
	  b parent class_ref 558466 // StackInstruction
      end

      classrelation 1132290 // IADD (<unidirectional association>)
	relation 1132290 --->
	  a role_name "IADD" init_value " new IADD()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1132290 // IADD (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1132418 // LADD (<unidirectional association>)
	relation 1132418 --->
	  a role_name "LADD" init_value " new LADD()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1132418 // LADD (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1132546 // FADD (<unidirectional association>)
	relation 1132546 --->
	  a role_name "FADD" init_value " new FADD()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1132546 // FADD (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1132674 // DADD (<unidirectional association>)
	relation 1132674 --->
	  a role_name "DADD" init_value " new DADD()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1132674 // DADD (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1132802 // ISUB (<unidirectional association>)
	relation 1132802 --->
	  a role_name "ISUB" init_value " new ISUB()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1132802 // ISUB (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1132930 // LSUB (<unidirectional association>)
	relation 1132930 --->
	  a role_name "LSUB" init_value " new LSUB()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1132930 // LSUB (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1133058 // FSUB (<unidirectional association>)
	relation 1133058 --->
	  a role_name "FSUB" init_value " new FSUB()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1133058 // FSUB (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1133186 // DSUB (<unidirectional association>)
	relation 1133186 --->
	  a role_name "DSUB" init_value " new DSUB()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1133186 // DSUB (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1133314 // IMUL (<unidirectional association>)
	relation 1133314 --->
	  a role_name "IMUL" init_value " new IMUL()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1133314 // IMUL (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1133442 // LMUL (<unidirectional association>)
	relation 1133442 --->
	  a role_name "LMUL" init_value " new LMUL()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1133442 // LMUL (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1133570 // FMUL (<unidirectional association>)
	relation 1133570 --->
	  a role_name "FMUL" init_value " new FMUL()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1133570 // FMUL (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1133698 // DMUL (<unidirectional association>)
	relation 1133698 --->
	  a role_name "DMUL" init_value " new DMUL()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1133698 // DMUL (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1133826 // IDIV (<unidirectional association>)
	relation 1133826 --->
	  a role_name "IDIV" init_value " new IDIV()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1133826 // IDIV (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1133954 // LDIV (<unidirectional association>)
	relation 1133954 --->
	  a role_name "LDIV" init_value " new LDIV()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1133954 // LDIV (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1134082 // FDIV (<unidirectional association>)
	relation 1134082 --->
	  a role_name "FDIV" init_value " new FDIV()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1134082 // FDIV (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1134210 // DDIV (<unidirectional association>)
	relation 1134210 --->
	  a role_name "DDIV" init_value " new DDIV()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1134210 // DDIV (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1134338 // IREM (<unidirectional association>)
	relation 1134338 --->
	  a role_name "IREM" init_value " new IREM()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1134338 // IREM (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1134466 // LREM (<unidirectional association>)
	relation 1134466 --->
	  a role_name "LREM" init_value " new LREM()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1134466 // LREM (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1134594 // FREM (<unidirectional association>)
	relation 1134594 --->
	  a role_name "FREM" init_value " new FREM()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1134594 // FREM (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1134722 // DREM (<unidirectional association>)
	relation 1134722 --->
	  a role_name "DREM" init_value " new DREM()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1134722 // DREM (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1134850 // INEG (<unidirectional association>)
	relation 1134850 --->
	  a role_name "INEG" init_value " new INEG()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1134850 // INEG (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1134978 // LNEG (<unidirectional association>)
	relation 1134978 --->
	  a role_name "LNEG" init_value " new LNEG()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1134978 // LNEG (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1135106 // FNEG (<unidirectional association>)
	relation 1135106 --->
	  a role_name "FNEG" init_value " new FNEG()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1135106 // FNEG (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1135234 // DNEG (<unidirectional association>)
	relation 1135234 --->
	  a role_name "DNEG" init_value " new DNEG()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1135234 // DNEG (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1135362 // ISHL (<unidirectional association>)
	relation 1135362 --->
	  a role_name "ISHL" init_value " new ISHL()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1135362 // ISHL (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1135490 // LSHL (<unidirectional association>)
	relation 1135490 --->
	  a role_name "LSHL" init_value " new LSHL()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1135490 // LSHL (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1135618 // ISHR (<unidirectional association>)
	relation 1135618 --->
	  a role_name "ISHR" init_value " new ISHR()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1135618 // ISHR (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1135746 // LSHR (<unidirectional association>)
	relation 1135746 --->
	  a role_name "LSHR" init_value " new LSHR()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1135746 // LSHR (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1135874 // IUSHR (<unidirectional association>)
	relation 1135874 --->
	  a role_name "IUSHR" init_value " new IUSHR()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1135874 // IUSHR (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1136002 // LUSHR (<unidirectional association>)
	relation 1136002 --->
	  a role_name "LUSHR" init_value " new LUSHR()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1136002 // LUSHR (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1136130 // IAND (<unidirectional association>)
	relation 1136130 --->
	  a role_name "IAND" init_value " new IAND()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1136130 // IAND (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1136258 // LAND (<unidirectional association>)
	relation 1136258 --->
	  a role_name "LAND" init_value " new LAND()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1136258 // LAND (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1136386 // IOR (<unidirectional association>)
	relation 1136386 --->
	  a role_name "IOR" init_value " new IOR()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1136386 // IOR (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1136514 // LOR (<unidirectional association>)
	relation 1136514 --->
	  a role_name "LOR" init_value " new LOR()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1136514 // LOR (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1136642 // IXOR (<unidirectional association>)
	relation 1136642 --->
	  a role_name "IXOR" init_value " new IXOR()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1136642 // IXOR (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1136770 // LXOR (<unidirectional association>)
	relation 1136770 --->
	  a role_name "LXOR" init_value " new LXOR()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1136770 // LXOR (<unidirectional association>)
	  b parent class_ref 552066 // ArithmeticInstruction
      end

      classrelation 1136898 // I2L (<unidirectional association>)
	relation 1136898 --->
	  a role_name "I2L" init_value " new I2L()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1136898 // I2L (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1137026 // I2F (<unidirectional association>)
	relation 1137026 --->
	  a role_name "I2F" init_value " new I2F()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1137026 // I2F (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1137154 // I2D (<unidirectional association>)
	relation 1137154 --->
	  a role_name "I2D" init_value " new I2D()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1137154 // I2D (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1137282 // L2I (<unidirectional association>)
	relation 1137282 --->
	  a role_name "L2I" init_value " new L2I()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1137282 // L2I (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1137410 // L2F (<unidirectional association>)
	relation 1137410 --->
	  a role_name "L2F" init_value " new L2F()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1137410 // L2F (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1137538 // L2D (<unidirectional association>)
	relation 1137538 --->
	  a role_name "L2D" init_value " new L2D()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1137538 // L2D (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1137666 // F2I (<unidirectional association>)
	relation 1137666 --->
	  a role_name "F2I" init_value " new F2I()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1137666 // F2I (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1137794 // F2L (<unidirectional association>)
	relation 1137794 --->
	  a role_name "F2L" init_value " new F2L()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1137794 // F2L (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1137922 // F2D (<unidirectional association>)
	relation 1137922 --->
	  a role_name "F2D" init_value " new F2D()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1137922 // F2D (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1138050 // D2I (<unidirectional association>)
	relation 1138050 --->
	  a role_name "D2I" init_value " new D2I()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1138050 // D2I (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1138178 // D2L (<unidirectional association>)
	relation 1138178 --->
	  a role_name "D2L" init_value " new D2L()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1138178 // D2L (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1138306 // D2F (<unidirectional association>)
	relation 1138306 --->
	  a role_name "D2F" init_value " new D2F()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1138306 // D2F (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1138434 // I2B (<unidirectional association>)
	relation 1138434 --->
	  a role_name "I2B" init_value " new I2B()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1138434 // I2B (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1138562 // I2C (<unidirectional association>)
	relation 1138562 --->
	  a role_name "I2C" init_value " new I2C()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1138562 // I2C (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1138690 // I2S (<unidirectional association>)
	relation 1138690 --->
	  a role_name "I2S" init_value " new I2S()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1138690 // I2S (<unidirectional association>)
	  b parent class_ref 556034 // ConversionInstruction
      end

      classrelation 1138818 // LCMP (<unidirectional association>)
	relation 1138818 --->
	  a role_name "LCMP" init_value " new LCMP()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1138818 // LCMP (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1138946 // FCMPL (<unidirectional association>)
	relation 1138946 --->
	  a role_name "FCMPL" init_value " new FCMPL()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1138946 // FCMPL (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1139074 // FCMPG (<unidirectional association>)
	relation 1139074 --->
	  a role_name "FCMPG" init_value " new FCMPG()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1139074 // FCMPG (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1139202 // DCMPL (<unidirectional association>)
	relation 1139202 --->
	  a role_name "DCMPL" init_value " new DCMPL()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1139202 // DCMPL (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1139330 // DCMPG (<unidirectional association>)
	relation 1139330 --->
	  a role_name "DCMPG" init_value " new DCMPG()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1139330 // DCMPG (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1139458 // IRETURN (<unidirectional association>)
	relation 1139458 --->
	  a role_name "IRETURN" init_value " new IRETURN()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1139458 // IRETURN (<unidirectional association>)
	  b parent class_ref 551938 // ReturnInstruction
      end

      classrelation 1139586 // LRETURN (<unidirectional association>)
	relation 1139586 --->
	  a role_name "LRETURN" init_value " new LRETURN()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1139586 // LRETURN (<unidirectional association>)
	  b parent class_ref 551938 // ReturnInstruction
      end

      classrelation 1139714 // FRETURN (<unidirectional association>)
	relation 1139714 --->
	  a role_name "FRETURN" init_value " new FRETURN()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1139714 // FRETURN (<unidirectional association>)
	  b parent class_ref 551938 // ReturnInstruction
      end

      classrelation 1139842 // DRETURN (<unidirectional association>)
	relation 1139842 --->
	  a role_name "DRETURN" init_value " new DRETURN()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1139842 // DRETURN (<unidirectional association>)
	  b parent class_ref 551938 // ReturnInstruction
      end

      classrelation 1139970 // ARETURN (<unidirectional association>)
	relation 1139970 --->
	  a role_name "ARETURN" init_value " new ARETURN()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1139970 // ARETURN (<unidirectional association>)
	  b parent class_ref 551938 // ReturnInstruction
      end

      classrelation 1140098 // RETURN (<unidirectional association>)
	relation 1140098 --->
	  a role_name "RETURN" init_value " new RETURN()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1140098 // RETURN (<unidirectional association>)
	  b parent class_ref 551938 // ReturnInstruction
      end

      classrelation 1140226 // ARRAYLENGTH (<unidirectional association>)
	relation 1140226 --->
	  a role_name "ARRAYLENGTH" init_value " new ARRAYLENGTH()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1140226 // ARRAYLENGTH (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1140354 // ATHROW (<unidirectional association>)
	relation 1140354 --->
	  a role_name "ATHROW" init_value " new ATHROW()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1140354 // ATHROW (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1140482 // MONITORENTER (<unidirectional association>)
	relation 1140482 --->
	  a role_name "MONITORENTER" init_value " new MONITORENTER()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1140482 // MONITORENTER (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1140610 // MONITOREXIT (<unidirectional association>)
	relation 1140610 --->
	  a role_name "MONITOREXIT" init_value " new MONITOREXIT()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1140610 // MONITOREXIT (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      classrelation 1140738 // THIS (<unidirectional association>)
	relation 1140738 --->
	  a role_name "THIS" init_value " new ALOAD(0)" class_relation const_relation public
	    comment " You can use these constants in multiple places safely, if you can guarantee
that you will never alter their internal values, e.g. call setIndex().

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1140738 // THIS (<unidirectional association>)
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1140866 // ALOAD_0 (<unidirectional association>)
	relation 1140866 --->
	  a role_name "ALOAD_0" init_value " THIS" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1140866 // ALOAD_0 (<unidirectional association>)
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1140994 // ALOAD_1 (<unidirectional association>)
	relation 1140994 --->
	  a role_name "ALOAD_1" init_value " new ALOAD(1)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1140994 // ALOAD_1 (<unidirectional association>)
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1141122 // ALOAD_2 (<unidirectional association>)
	relation 1141122 --->
	  a role_name "ALOAD_2" init_value " new ALOAD(2)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1141122 // ALOAD_2 (<unidirectional association>)
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1141250 // ILOAD_0 (<unidirectional association>)
	relation 1141250 --->
	  a role_name "ILOAD_0" init_value " new ILOAD(0)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1141250 // ILOAD_0 (<unidirectional association>)
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1141378 // ILOAD_1 (<unidirectional association>)
	relation 1141378 --->
	  a role_name "ILOAD_1" init_value " new ILOAD(1)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1141378 // ILOAD_1 (<unidirectional association>)
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1141506 // ILOAD_2 (<unidirectional association>)
	relation 1141506 --->
	  a role_name "ILOAD_2" init_value " new ILOAD(2)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1141506 // ILOAD_2 (<unidirectional association>)
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1141634 // ASTORE_0 (<unidirectional association>)
	relation 1141634 --->
	  a role_name "ASTORE_0" init_value " new ASTORE(0)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1141634 // ASTORE_0 (<unidirectional association>)
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1141762 // ASTORE_1 (<unidirectional association>)
	relation 1141762 --->
	  a role_name "ASTORE_1" init_value " new ASTORE(1)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1141762 // ASTORE_1 (<unidirectional association>)
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1141890 // ASTORE_2 (<unidirectional association>)
	relation 1141890 --->
	  a role_name "ASTORE_2" init_value " new ASTORE(2)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1141890 // ASTORE_2 (<unidirectional association>)
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1142018 // ISTORE_0 (<unidirectional association>)
	relation 1142018 --->
	  a role_name "ISTORE_0" init_value " new ISTORE(0)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1142018 // ISTORE_0 (<unidirectional association>)
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1142146 // ISTORE_1 (<unidirectional association>)
	relation 1142146 --->
	  a role_name "ISTORE_1" init_value " new ISTORE(1)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1142146 // ISTORE_1 (<unidirectional association>)
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1142274 // ISTORE_2 (<unidirectional association>)
	relation 1142274 --->
	  a role_name "ISTORE_2" init_value " new ISTORE(2)" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1142274 // ISTORE_2 (<unidirectional association>)
	  b parent class_ref 551042 // LocalVariableInstruction
      end

      classrelation 1142402 // INSTRUCTIONS (<unidirectional association>)
	relation 1142402 --->
	  a role_name "INSTRUCTIONS" multiplicity "[]" init_value " new Instruction[256]" class_relation const_relation public
	    comment " Get object via its opcode, for immutable instructions like
branch instructions entries are set to null.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1142402 // INSTRUCTIONS (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      class 575490 "Clinit"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 3537026 "Clinit"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1142530 // bla (<unidirectional association>)
	relation 1142530 --->
	  a role_name "bla" init_value " new Clinit()" class_relation const_relation public
	    comment " Interfaces may have no static initializers, so we simulate this
with an inner class.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1142530 // bla (<unidirectional association>)
	  b parent class_ref 575490 // Clinit
      end
    end

    class 575618 "InstructionFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Instances of this class may be used, e.g., to generate typed
versions of instructions. Its main purpose is to be used as the
byte code generating backend of a compiler. You can subclass it to
add your own create methods.

@author <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@see Constants
"
      classrelation 1142658 // <realization>
	relation 1142658 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1142658 // <realization>
	  b parent class_ref 575362 // InstructionConstants
      end

      classrelation 1142786 // <realization>
	relation 1142786 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1142786 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 1142914 // cg (<unidirectional association>)
	relation 1142914 --->
	  a role_name "cg" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1142914 // cg (<unidirectional association>)
	  b parent class_ref 555010 // ClassGen
      end

      classrelation 1143042 // cp (<unidirectional association>)
	relation 1143042 --->
	  a role_name "cp" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1143042 // cp (<unidirectional association>)
	  b parent class_ref 549506 // ConstantPoolGen
      end

      operation 3537154 "InstructionFactory"
	public explicit_return_type ""
	nparams 2
	  param inout name "cg" type class_ref 555010 // ClassGen
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3537282 "InstructionFactory"
	public explicit_return_type ""
	nparams 1
	  param inout name "cg" type class_ref 555010 // ClassGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize with ClassGen object
"
      end

      operation 3537410 "InstructionFactory"
	public explicit_return_type ""
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize just with ConstantPoolGen object
"
      end

      operation 3537538 "createInvoke"
	public return_type class_ref 560002 // InvokeInstruction
	nparams 5
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	  param inout name "ret_type" type class_ref 547330 // Type
	  param inout name "arg_types" type class_ref 547330 // Type
	multiplicity "[]"
	  param in name "kind" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create an invoke instruction.

@param class_name name of the called class
@param name name of the called method
@param ret_type return type of method
@param arg_types argument types of method
@param kind how to invoke, i.e., INVOKEINTERFACE, INVOKESTATIC, INVOKEVIRTUAL,
or INVOKESPECIAL
@see Constants
"
      end

      operation 3537666 "createPrintln"
	public return_type class_ref 555650 // InstructionList
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a call to the most popular System.out.println() method.

@param s the string to print
"
      end

      operation 3537794 "createConstant"
	public return_type class_ref 549250 // Instruction
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Uses PUSH to push a constant value onto the stack.
@param value must be of type Number, Boolean, Character or String
"
      end

      class 575746 "MethodObject"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1143170 // arg_types (<unidirectional association>)
	  relation 1143170 --->
	    a role_name "arg_types" multiplicity "[]" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1143170 // arg_types (<unidirectional association>)
	    b parent class_ref 547330 // Type
	end

	classrelation 1143298 // result_type (<unidirectional association>)
	  relation 1143298 --->
	    a role_name "result_type" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1143298 // result_type (<unidirectional association>)
	    b parent class_ref 547330 // Type
	end

	classrelation 1143426 // arg_names (<unidirectional association>)
	  relation 1143426 --->
	    a role_name "arg_names" multiplicity "[]" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1143426 // arg_names (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 1143554 // class_name (<unidirectional association>)
	  relation 1143554 --->
	    a role_name "class_name" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1143554 // class_name (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 1143682 // name (<unidirectional association>)
	  relation 1143682 --->
	    a role_name "name" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1143682 // name (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 759170 "access"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 3537922 "MethodObject"
	  package explicit_return_type ""
	  nparams 5
	    param inout name "c" type class_ref 128130 // String
	    param inout name "n" type class_ref 128130 // String
	    param inout name "r" type class_ref 547330 // Type
	    param inout name "a" type class_ref 547330 // Type
	  multiplicity "[]"
	    param in name "acc" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 3538050 "createInvoke"
	private return_type class_ref 560002 // InvokeInstruction
	nparams 2
	  param inout name "m" type class_ref 575746 // MethodObject
	  param in name "kind" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1143810 // append_mos (<unidirectional association>)
	relation 1143810 --->
	  a role_name "append_mos" multiplicity "[]" init_value " {
    new MethodObject(\"java.lang.StringBuffer\", \"append\", Type.STRINGBUFFER,
                     new Type[] { Type.STRING }, Constants.ACC_PUBLIC),
    new MethodObject(\"java.lang.StringBuffer\", \"append\", Type.STRINGBUFFER,
                     new Type[] { Type.OBJECT }, Constants.ACC_PUBLIC),
    null, null, // indices 2, 3
    new MethodObject(\"java.lang.StringBuffer\", \"append\", Type.STRINGBUFFER,
                     new Type[] { Type.BOOLEAN }, Constants.ACC_PUBLIC),
    new MethodObject(\"java.lang.StringBuffer\", \"append\", Type.STRINGBUFFER,
                     new Type[] { Type.CHAR }, Constants.ACC_PUBLIC),
    new MethodObject(\"java.lang.StringBuffer\", \"append\", Type.STRINGBUFFER,
                     new Type[] { Type.FLOAT }, Constants.ACC_PUBLIC),
    new MethodObject(\"java.lang.StringBuffer\", \"append\", Type.STRINGBUFFER,
                     new Type[] { Type.DOUBLE }, Constants.ACC_PUBLIC),
    new MethodObject(\"java.lang.StringBuffer\", \"append\", Type.STRINGBUFFER,
                     new Type[] { Type.INT }, Constants.ACC_PUBLIC),
    new MethodObject(\"java.lang.StringBuffer\", \"append\", Type.STRINGBUFFER, // No append(byte)
                     new Type[] { Type.INT }, Constants.ACC_PUBLIC),
    new MethodObject(\"java.lang.StringBuffer\", \"append\", Type.STRINGBUFFER, // No append(short)
                     new Type[] { Type.INT }, Constants.ACC_PUBLIC),
    new MethodObject(\"java.lang.StringBuffer\", \"append\", Type.STRINGBUFFER,
                     new Type[] { Type.LONG }, Constants.ACC_PUBLIC)
  }" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1143810 // append_mos (<unidirectional association>)
	  b parent class_ref 575746 // MethodObject
      end

      operation 3538178 "isString"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "type" type class_ref 547330 // Type
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3538306 "createAppend"
	public return_type class_ref 549250 // Instruction
	nparams 1
	  param inout name "type" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3538434 "createFieldAccess"
	public return_type class_ref 559362 // FieldInstruction
	nparams 4
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 547330 // Type
	  param in name "kind" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a field instruction.

@param class_name name of the accessed class
@param name name of the referenced field
@param type  type of field
@param kind how to access, i.e., GETFIELD, PUTFIELD, GETSTATIC, PUTSTATIC
@see Constants
"
      end

      operation 3538562 "createThis"
	class_operation public return_type class_ref 549250 // Instruction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create reference to `this'
"
      end

      operation 3538690 "createReturn"
	class_operation public return_type class_ref 551938 // ReturnInstruction
	nparams 1
	  param inout name "type" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create typed return
"
      end

      operation 3538818 "createBinaryIntOp"
	class_operation private return_type class_ref 552066 // ArithmeticInstruction
	nparams 2
	  param in name "first" explicit_type "char"
	  param inout name "op" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3538946 "createBinaryLongOp"
	class_operation private return_type class_ref 552066 // ArithmeticInstruction
	nparams 2
	  param in name "first" explicit_type "char"
	  param inout name "op" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3539074 "createBinaryFloatOp"
	class_operation private return_type class_ref 552066 // ArithmeticInstruction
	nparams 1
	  param in name "op" explicit_type "char"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3539202 "createBinaryDoubleOp"
	class_operation private return_type class_ref 552066 // ArithmeticInstruction
	nparams 1
	  param in name "op" explicit_type "char"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3539330 "createBinaryOperation"
	class_operation public return_type class_ref 552066 // ArithmeticInstruction
	nparams 2
	  param inout name "op" type class_ref 128130 // String
	  param inout name "type" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create binary operation for simple basic types, such as int and float.

@param op operation, such as \"+\", \"*\", \"<<\", etc.
"
      end

      operation 3539458 "createPop"
	class_operation public return_type class_ref 558466 // StackInstruction
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param size size of operand, either 1 (int, e.g.) or 2 (double)
"
      end

      operation 3539586 "createDup"
	class_operation public return_type class_ref 558466 // StackInstruction
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param size size of operand, either 1 (int, e.g.) or 2 (double)
"
      end

      operation 3539714 "createDup_2"
	class_operation public return_type class_ref 558466 // StackInstruction
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param size size of operand, either 1 (int, e.g.) or 2 (double)
"
      end

      operation 3539842 "createDup_1"
	class_operation public return_type class_ref 558466 // StackInstruction
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param size size of operand, either 1 (int, e.g.) or 2 (double)
"
      end

      operation 3539970 "createStore"
	class_operation public return_type class_ref 551042 // LocalVariableInstruction
	nparams 2
	  param inout name "type" type class_ref 547330 // Type
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param index index of local variable
"
      end

      operation 3540098 "createLoad"
	class_operation public return_type class_ref 551042 // LocalVariableInstruction
	nparams 2
	  param inout name "type" type class_ref 547330 // Type
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param index index of local variable
"
      end

      operation 3540226 "createArrayLoad"
	class_operation public return_type class_ref 549122 // ArrayInstruction
	nparams 1
	  param inout name "type" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param type type of elements of array, i.e., array.getElementType()
"
      end

      operation 3540354 "createArrayStore"
	class_operation public return_type class_ref 549122 // ArrayInstruction
	nparams 1
	  param inout name "type" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param type type of elements of array, i.e., array.getElementType()
"
      end

      operation 3540482 "createCast"
	public return_type class_ref 549250 // Instruction
	nparams 2
	  param inout name "src_type" type class_ref 547330 // Type
	  param inout name "dest_type" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create conversion operation for two stack operands, this may be an I2C, instruction, e.g.,
if the operands are basic types and CHECKCAST if they are reference types.
"
      end

      operation 3540610 "createGetField"
	public return_type class_ref 568578 // GETFIELD
	nparams 3
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	  param inout name "t" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3540738 "createGetStatic"
	public return_type class_ref 560386 // GETSTATIC
	nparams 3
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	  param inout name "t" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3540866 "createPutField"
	public return_type class_ref 562434 // PUTFIELD
	nparams 3
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	  param inout name "t" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3540994 "createPutStatic"
	public return_type class_ref 571778 // PUTSTATIC
	nparams 3
	  param inout name "class_name" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	  param inout name "t" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3541122 "createCheckCast"
	public return_type class_ref 554882 // CHECKCAST
	nparams 1
	  param inout name "t" type class_ref 552450 // ReferenceType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3541250 "createInstanceOf"
	public return_type class_ref 569090 // INSTANCEOF
	nparams 1
	  param inout name "t" type class_ref 552450 // ReferenceType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3541378 "createNew"
	public return_type class_ref 562690 // NEW
	nparams 1
	  param inout name "t" type class_ref 551682 // ObjectType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3541506 "createNew"
	public return_type class_ref 562690 // NEW
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3541634 "createNewArray"
	public return_type class_ref 549250 // Instruction
	nparams 2
	  param inout name "t" type class_ref 547330 // Type
	  param in name "dim" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create new array of given size and type.
@return an instruction that creates the corresponding array at runtime, i.e. is an AllocationInstruction
"
      end

      operation 3541762 "createNull"
	class_operation public return_type class_ref 549250 // Instruction
	nparams 1
	  param inout name "type" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create \"null\" value for reference types, 0 for basic types like int
"
      end

      operation 3541890 "createBranchInstruction"
	class_operation public return_type class_ref 554370 // BranchInstruction
	nparams 2
	  param in name "opcode" explicit_type "short"
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create branch instruction by given opcode, except LOOKUPSWITCH and TABLESWITCH.
For those you should use the SWITCH compound instruction.
"
      end

      operation 3542018 "setClassGen"
	public explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 555010 // ClassGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3542146 "getClassGen"
	public return_type class_ref 555010 // ClassGen
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3542274 "setConstantPool"
	public explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3542402 "getConstantPool"
	public return_type class_ref 549506 // ConstantPoolGen
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 575874 "TargetLostException"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Thrown by InstructionList.remove() when one or multiple disposed instruction
are still being referenced by a InstructionTargeter object. I.e. the
InstructionTargeter has to be notified that (one of) the InstructionHandle it
is referencing is being removed from the InstructionList and thus not valid anymore.

Making this an exception instead of a return value forces the user to handle
these case explicitely in a try { ... } catch. The following code illustrates
how this may be done:

<PRE>
    ...
    try {
     il.delete(start_ih, end_ih);
    } catch(TargetLostException e) {
      InstructionHandle[] targets = e.getTargets();
      for(int i=0; i < targets.length; i++) {
        InstructionTargeter[] targeters = targets[i].getTargeters();

        for(int j=0; j < targeters.length; j++)
          targeters[j].updateTarget(targets[i], new_target);
      }
    }
</PRE>

@see InstructionHandle
@see InstructionList
@see InstructionTargeter
@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1164034 // <generalisation>
	relation 1164034 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1164034 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      classrelation 1164162 // targets (<unidirectional association>)
	relation 1164162 --->
	  a role_name "targets" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1164162 // targets (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      operation 3597058 "TargetLostException"
	package explicit_return_type ""
	nparams 2
	  param inout name "t" type class_ref 554114 // InstructionHandle
	multiplicity "[]"
	  param inout name "mesg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3597186 "getTargets"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return list of instructions still being targeted.
"
      end
    end

    class 576002 "LocalVariableGen"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents a local variable within a method. It contains its
scope, name and type. The generated LocalVariable object can be obtained
with getLocalVariable which needs the instruction list and the constant
pool as parameters.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@see     LocalVariable
@see     MethodGen
"
      classrelation 1152002 // <realization>
	relation 1152002 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1152002 // <realization>
	  b parent class_ref 554242 // InstructionTargeter
      end

      classrelation 1152130 // <realization>
	relation 1152130 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1152130 // <realization>
	  b parent class_ref 575106 // NamedAndTyped
      end

      classrelation 1152258 // <realization>
	relation 1152258 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1152258 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 1152386 // <realization>
	relation 1152386 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1152386 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 759938 "index"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1152514 // name (<unidirectional association>)
	relation 1152514 --->
	  a role_name "name" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1152514 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1152642 // type (<unidirectional association>)
	relation 1152642 --->
	  a role_name "type" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1152642 // type (<unidirectional association>)
	  b parent class_ref 547330 // Type
      end

      classrelation 1152770 // start (<unidirectional association>)
	relation 1152770 --->
	  a role_name "start" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1152770 // start (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      classrelation 1152898 // end (<unidirectional association>)
	relation 1152898 --->
	  a role_name "end" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1152898 // end (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      operation 3566850 "LocalVariableGen"
	public explicit_return_type ""
	nparams 5
	  param in name "index" explicit_type "int"
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 547330 // Type
	  param inout name "start" type class_ref 554114 // InstructionHandle
	  param inout name "end" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate a local variable that with index `index'. Note that double and long
variables need two indexs. Index indices have to be provided by the user.

@param index index of local variable
@param name its name
@param type its type
@param start from where the instruction is valid (null means from the start)
@param end until where the instruction is valid (null means to the end)
"
      end

      operation 3566978 "getLocalVariable"
	public return_type class_ref 546050 // LocalVariable
	nparams 1
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get LocalVariable object.

This relies on that the instruction list has already been dumped to byte code or
or that the `setPositions' methods has been called for the instruction list.

Note that for local variables whose scope end at the last
instruction of the method's code, the JVM specification is ambiguous:
both a start_pc+length ending at the last instruction and
start_pc+length ending at first index beyond the end of the code are
valid.

@param il instruction list (byte code) which this variable belongs to
@param cp constant pool
"
      end

      operation 3567106 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3567234 "setName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3567362 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3567490 "setType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "type" type class_ref 547330 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3567618 "getType"
	public return_type class_ref 547330 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3567746 "getStart"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3567874 "getEnd"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3568002 "notifyTargetChanging"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove this from any known HashSet in which it might be registered.
"
      end

      operation 3568130 "notifyTargetChanged"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add back 'this' in all HashSet in which it should be registered.
"
      end

      operation 3568258 "setStart"
	public explicit_return_type "void"
	nparams 1
	  param inout name "start" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3568386 "setEnd"
	public explicit_return_type "void"
	nparams 1
	  param inout name "end" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3568514 "updateTarget"
	public explicit_return_type "void"
	nparams 2
	  param inout name "old_ih" type class_ref 554114 // InstructionHandle
	  param inout name "new_ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@param old_ih old target, either start or end
@param new_ih new target
"
      end

      operation 3568642 "containsTarget"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@return true, if ih is target of this variable
"
      end

      operation 3568770 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "We consider two local variables to be equal, if they use the same index and
are valid in the same range.
"
      end

      operation 3568898 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3569026 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3569154 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 576130 "InstructionListObserver"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Implement this interface if you're interested in changes to an InstructionList object
and register yourself with addObserver().

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      operation 3550978 "notify"
	public explicit_return_type "void"
	nparams 1
	  param inout name "list" type class_ref 555650 // InstructionList
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 576258 "LDC_W"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "LDC_W - Push item from constant pool (wide index)

<PRE>Stack: ... -&gt; ..., item.word1, item.word2</PRE>

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1150722 // <generalisation>
	relation 1150722 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1150722 // <generalisation>
	  b parent class_ref 564482 // LDC
      end

      operation 3564034 "LDC_W"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empty constructor needed for the Class.newInstance() statement in
Instruction.readInstruction(). Not to be used otherwise.
"
      end

      operation 3564162 "LDC_W"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3564290 "initFromFile"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "bytes" type class_ref 547970 // ByteSequence
	  param inout name "wide" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read needed data (i.e., index) from file.
"
      end
    end

    class 576386 "LineNumberGen"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents a line number within a method, i.e., give an instruction
a line number corresponding to the source code line.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
@see     LineNumber
@see     MethodGen
"
      classrelation 1151106 // <realization>
	relation 1151106 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1151106 // <realization>
	  b parent class_ref 554242 // InstructionTargeter
      end

      classrelation 1151234 // <realization>
	relation 1151234 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1151234 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 1151362 // <realization>
	relation 1151362 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1151362 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 1151490 // ih (<unidirectional association>)
	relation 1151490 --->
	  a role_name "ih" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1151490 // ih (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      attribute 759810 "src_line"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3564802 "LineNumberGen"
	public explicit_return_type ""
	nparams 2
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	  param in name "src_line" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a line number.

@param ih instruction handle to reference
"
      end

      operation 3564930 "containsTarget"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@return true, if ih is target of this line number
"
      end

      operation 3565058 "updateTarget"
	public explicit_return_type "void"
	nparams 2
	  param inout name "old_ih" type class_ref 554114 // InstructionHandle
	  param inout name "new_ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@param old_ih old target
@param new_ih new target
"
      end

      operation 3565186 "getLineNumber"
	public return_type class_ref 545922 // LineNumber
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get LineNumber attribute .

This relies on that the instruction list has already been dumped to byte code or
or that the `setPositions' methods has been called for the instruction list.
"
      end

      operation 3565314 "setInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ih" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3565442 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3565570 "getInstruction"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3565698 "setSourceLine"
	public explicit_return_type "void"
	nparams 1
	  param in name "src_line" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3565826 "getSourceLine"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 576770 "MethodObserver"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


Implement this interface if you're interested in changes to a MethodGen object
and register yourself with addObserver().

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      operation 3582722 "notify"
	public explicit_return_type "void"
	nparams 1
	  param inout name "method" type class_ref 555906 // MethodGen
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 576898 "PUSH"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Wrapper class for push operations, which are implemented either as BIPUSH,
LDC or xCONST_n instructions.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1160194 // <realization>
	relation 1160194 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1160194 // <realization>
	  b parent class_ref 555522 // CompoundInstruction
      end

      classrelation 1160322 // <realization>
	relation 1160322 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1160322 // <realization>
	  b parent class_ref 560258 // VariableLengthInstruction
      end

      classrelation 1160450 // <realization>
	relation 1160450 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1160450 // <realization>
	  b parent class_ref 575362 // InstructionConstants
      end

      classrelation 1160578 // instruction (<unidirectional association>)
	relation 1160578 --->
	  a role_name "instruction" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1160578 // instruction (<unidirectional association>)
	  b parent class_ref 549250 // Instruction
      end

      operation 3588738 "PUSH"
	public explicit_return_type ""
	nparams 2
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This constructor also applies for values of type short, char, byte

@param cp Constant pool
@param value to be pushed
"
      end

      operation 3588866 "PUSH"
	public explicit_return_type ""
	nparams 2
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param cp Constant pool
@param value to be pushed
"
      end

      operation 3588994 "PUSH"
	public explicit_return_type ""
	nparams 2
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	  param in name "value" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param cp Constant pool
@param value to be pushed
"
      end

      operation 3589122 "PUSH"
	public explicit_return_type ""
	nparams 2
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param cp Constant pool
@param value to be pushed
"
      end

      operation 3589250 "PUSH"
	public explicit_return_type ""
	nparams 2
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	  param in name "value" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param cp Constant pool
@param value to be pushed
"
      end

      operation 3589378 "PUSH"
	public explicit_return_type ""
	nparams 2
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param cp Constant pool
@param value to be pushed
"
      end

      operation 3589506 "PUSH"
	public explicit_return_type ""
	nparams 2
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	  param inout name "value" type class_ref 398210 // Number
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param cp Constant pool
@param value to be pushed
"
      end

      operation 3589634 "PUSH"
	public explicit_return_type ""
	nparams 2
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	  param inout name "value" type class_ref 577026 // Character
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param cp Constant pool
@param value to be pushed
"
      end

      operation 3589762 "PUSH"
	public explicit_return_type ""
	nparams 2
	  param inout name "cp" type class_ref 549506 // ConstantPoolGen
	  param inout name "value" type class_ref 315010 // Boolean
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param cp Constant pool
@param value to be pushed
"
      end

      operation 3589890 "getInstructionList"
	public return_type class_ref 555650 // InstructionList
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3590018 "getInstruction"
	public return_type class_ref 549250 // Instruction
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3590146 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return mnemonic for instruction
"
      end
    end

    class 577154 "ReturnaddressType"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Returnaddress, the type JSR or JSR_W instructions push upon the stack.

see vmspec2 3.3.3
@author  <A HREF=\"http://www.inf.fu-berlin.de/~ehaase\">Enver Haase</A>
"
      classrelation 1161986 // <generalisation>
	relation 1161986 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1161986 // <generalisation>
	  b parent class_ref 547330 // Type
      end

      classrelation 1162114 // NO_TARGET (<unidirectional association>)
	relation 1162114 --->
	  a role_name "NO_TARGET" init_value " new ReturnaddressType()" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1162114 // NO_TARGET (<unidirectional association>)
	  b parent class_ref 577154 // ReturnaddressType
      end

      classrelation 1162242 // returnTarget (<unidirectional association>)
	relation 1162242 --->
	  a role_name "returnTarget" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1162242 // returnTarget (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      operation 3593090 "ReturnaddressType"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A Returnaddress [that doesn't know where to return to].
"
      end

      operation 3593218 "ReturnaddressType"
	public explicit_return_type ""
	nparams 1
	  param inout name "returnTarget" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a ReturnaddressType object with a target.
"
      end

      operation 3593346 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3593474 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "rat" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns if the two Returnaddresses refer to the same target.
"
      end

      operation 3593602 "getTarget"
	public return_type class_ref 554114 // InstructionHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return the target of this ReturnaddressType
"
      end
    end

    class 577282 "SWITCH"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================
The Apache Software License, Version 1.1

Copyright (c) 2001 The Apache Software Foundation.  All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Apache\" and \"Apache Software Foundation\" and
   \"Apache BCEL\" must not be used to endorse or promote products
   derived from this software without prior written permission. For
   written permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   \"Apache BCEL\", nor may \"Apache\" appear in their name, without
   prior written permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.


SWITCH - Branch depending on int value, generates either LOOKUPSWITCH or
TABLESWITCH instruction, depending on whether the match values (int[]) can be
sorted with no gaps between the numbers.

@author  <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>
"
      classrelation 1163522 // <realization>
	relation 1163522 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1163522 // <realization>
	  b parent class_ref 555522 // CompoundInstruction
      end

      attribute 761858 "match"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1163650 // targets (<unidirectional association>)
	relation 1163650 --->
	  a role_name "targets" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1163650 // targets (<unidirectional association>)
	  b parent class_ref 554114 // InstructionHandle
      end

      classrelation 1163778 // instruction (<unidirectional association>)
	relation 1163778 --->
	  a role_name "instruction" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1163778 // instruction (<unidirectional association>)
	  b parent class_ref 559618 // Select
      end

      attribute 761986 "match_length"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3595522 "SWITCH"
	public explicit_return_type ""
	nparams 4
	  param inout name "match" explicit_type "int"
	multiplicity "[]"
	  param inout name "targets" type class_ref 554114 // InstructionHandle
	multiplicity "[]"
	  param inout name "target" type class_ref 554114 // InstructionHandle
	  param in name "max_gap" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Template for switch() constructs. If the match array can be
sorted in ascending order with gaps no larger than max_gap
between the numbers, a TABLESWITCH instruction is generated, and
a LOOKUPSWITCH otherwise. The former may be more efficient, but
needs more space.

Note, that the key array always will be sorted, though we leave
the original arrays unaltered.

@param match array of match values (case 2: ... case 7: ..., etc.)
@param targets the instructions to be branched to for each case
@param target the default target
@param max_gap maximum gap that may between case branches
"
      end

      operation 3595650 "SWITCH"
	public explicit_return_type ""
	nparams 3
	  param inout name "match" explicit_type "int"
	multiplicity "[]"
	  param inout name "targets" type class_ref 554114 // InstructionHandle
	multiplicity "[]"
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3595778 "fillup"
	private explicit_return_type "void"
	nparams 2
	  param in name "max_gap" explicit_type "int"
	  param inout name "target" type class_ref 554114 // InstructionHandle
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3595906 "sort"
	private explicit_return_type "void"
	nparams 2
	  param in name "l" explicit_type "int"
	  param in name "r" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sort match and targets array with QuickSort.
"
      end

      operation 3596034 "matchIsOrdered"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "max_gap" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return match is sorted in ascending order with no gap bigger than max_gap?
"
      end

      operation 3596162 "getInstructionList"
	public return_type class_ref 555650 // InstructionList
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3596290 "getInstruction"
	public return_type class_ref 549250 // Instruction
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 149378 "generic"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 368002 "Instruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.classfile.Utility;
import com.sun.org.apache.bcel.internal.classfile.ConstantPool;
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 549250 // Instruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 368130 "ExceptionThrower"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 549762 // ExceptionThrower
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 368258 "TypedInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 549890 // TypedInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 368386 "ArrayInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 549122 // ArrayInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 368514 "StackProducer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 550018 // StackProducer
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 368642 "AALOAD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 548994 // AALOAD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 368770 "StackConsumer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 550274 // StackConsumer
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 368898 "AASTORE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 550146 // AASTORE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 369026 "PushInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 550530 // PushInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 369154 "ACONST_NULL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 550402 // ACONST_NULL
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 369282 "AllocationInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 550658 // AllocationInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 369410 "IndexedInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 551170 // IndexedInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 369538 "LocalVariableInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
import com.sun.org.apache.bcel.internal.classfile.Utility;
import com.sun.org.apache.bcel.internal.Constants;
${definition}"
      associated_elems
	class_ref 551042 // LocalVariableInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 369666 "LoadInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 550914 // LoadInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 369794 "ALOAD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 550786 // ALOAD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 369922 "CPInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.classfile.*;
${definition}"
      associated_elems
	class_ref 551426 // CPInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 370050 "LoadClass"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 551554 // LoadClass
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 370178 "ANEWARRAY"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.ExceptionConstants;
${definition}"
      associated_elems
	class_ref 551298 // ANEWARRAY
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 370306 "ReturnInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.ExceptionConstants;
${definition}"
      associated_elems
	class_ref 551938 // ReturnInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 370434 "ARETURN"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 551810 // ARETURN
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 370562 "ArithmeticInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
${definition}"
      associated_elems
	class_ref 552066 // ArithmeticInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 370690 "ARRAYLENGTH"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 552194 // ARRAYLENGTH
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 370818 "Type"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.classfile.*;
import java.util.ArrayList;
${definition}"
      associated_elems
	class_ref 547330 // Type
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 370946 "ReferenceType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.Repository;
import com.sun.org.apache.bcel.internal.classfile.JavaClass;
${definition}"
      associated_elems
	class_ref 552450 // ReferenceType
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 371074 "ArrayType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
${definition}"
      associated_elems
	class_ref 552322 // ArrayType
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 371202 "PopInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 553090 // PopInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 371330 "StoreInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 552962 // StoreInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 371458 "ASTORE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 552834 // ASTORE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 371586 "UnconditionalBranch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 553346 // UnconditionalBranch
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 371714 "ATHROW"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 553218 // ATHROW
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 371842 "BALOAD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 553474 // BALOAD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 371970 "BasicType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
${definition}"
      associated_elems
	class_ref 552578 // BasicType
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 372098 "BASTORE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 553602 // BASTORE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 372226 "ConstantPushInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 553858 // ConstantPushInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 372354 "BIPUSH"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 553730 // BIPUSH
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 372482 "InstructionHandle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.classfile.Utility;
import java.util.HashSet;
import java.util.Collection;
import java.util.HashMap;
${definition}"
      associated_elems
	class_ref 554114 // InstructionHandle
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 372610 "BranchHandle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 553986 // BranchHandle
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 372738 "InstructionTargeter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 554242 // InstructionTargeter
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 372866 "BranchInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 554370 // BranchInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 372994 "BREAKPOINT"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 554498 // BREAKPOINT
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 373122 "CALOAD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 554626 // CALOAD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 373250 "CASTORE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 554754 // CASTORE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 373378 "CHECKCAST"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.ExceptionConstants;
${definition}"
      associated_elems
	class_ref 554882 // CHECKCAST
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 373506 "ClassGen"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.classfile.*;
import java.util.ArrayList;
import java.util.Iterator;
${definition}"
      associated_elems
	class_ref 555010 // ClassGen
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 373634 "ClassGenException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 555266 // ClassGenException
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 373762 "ClassObserver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 555138 // ClassObserver
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 373890 "CodeExceptionGen"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.classfile.*;
${definition}"
      associated_elems
	class_ref 555394 // CodeExceptionGen
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 374018 "CompoundInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 555522 // CompoundInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 374146 "ConstantPoolGen"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.classfile.*;
import java.util.HashMap;
${definition}"
      associated_elems
	class_ref 549506 // ConstantPoolGen
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 374274 "ConversionInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
${definition}"
      associated_elems
	class_ref 556034 // ConversionInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 374402 "D2F"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 556162 // D2F
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 374530 "D2I"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 556290 // D2I
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 374658 "D2L"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 556418 // D2L
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 374786 "DADD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 556546 // DADD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 374914 "DALOAD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 556674 // DALOAD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 375042 "DASTORE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 556802 // DASTORE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 375170 "DCMPG"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 556930 // DCMPG
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 375298 "DCMPL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 557058 // DCMPL
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 375426 "DCONST"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 557186 // DCONST
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 375554 "DDIV"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 557314 // DDIV
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 375682 "DLOAD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 557442 // DLOAD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 375810 "DMUL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 557570 // DMUL
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 375938 "DNEG"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 557698 // DNEG
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 376066 "DREM"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 557826 // DREM
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 376194 "DRETURN"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 557954 // DRETURN
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 376322 "DSTORE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 558082 // DSTORE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 376450 "DSUB"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 558210 // DSUB
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 376578 "StackInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 558466 // StackInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 376706 "DUP"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 558338 // DUP
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 376834 "DUP2"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 558594 // DUP2
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 376962 "DUP2_X1"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 558722 // DUP2_X1
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 377090 "DUP2_X2"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 558850 // DUP2_X2
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 377218 "DUP_X1"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 558978 // DUP_X1
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 377346 "DUP_X2"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 559106 // DUP_X2
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 377474 "Visitor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 549634 // Visitor
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 377602 "EmptyVisitor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 559234 // EmptyVisitor
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 377730 "F2D"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 565890 // F2D
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 377858 "F2I"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 572546 // F2I
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 377986 "F2L"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 564610 // F2L
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 378114 "FADD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 574722 // FADD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 378242 "FALOAD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 568962 // FALOAD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 378370 "FASTORE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 571138 // FASTORE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 378498 "FCMPG"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 561282 // FCMPG
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 378626 "FCMPL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 573826 // FCMPL
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 378754 "FCONST"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 569602 // FCONST
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 378882 "FDIV"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 572802 // FDIV
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 379010 "NamedAndTyped"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 575106 // NamedAndTyped
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 379138 "FieldGenOrMethodGen"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.classfile.*;
import java.util.ArrayList;
${definition}"
      associated_elems
	class_ref 574978 // FieldGenOrMethodGen
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 379266 "FieldGen"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.classfile.*;
import java.util.ArrayList;
import java.util.Iterator;
${definition}"
      associated_elems
	class_ref 574850 // FieldGen
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 379394 "FieldOrMethod"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.classfile.*;
${definition}"
      associated_elems
	class_ref 560130 // FieldOrMethod
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 379522 "FieldInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.classfile.ConstantPool;
import com.sun.org.apache.bcel.internal.classfile.ConstantUtf8;
import com.sun.org.apache.bcel.internal.classfile.ConstantNameAndType;
import com.sun.org.apache.bcel.internal.classfile.ConstantCP;
import com.sun.org.apache.bcel.internal.classfile.*;
${definition}"
      associated_elems
	class_ref 559362 // FieldInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 379650 "FieldObserver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 575234 // FieldObserver
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 379778 "FLOAD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 571522 // FLOAD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 379906 "FMUL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 564738 // FMUL
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 380034 "FNEG"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 572034 // FNEG
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 380162 "FREM"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 564354 // FREM
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 380290 "FRETURN"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 574594 // FRETURN
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 380418 "FSTORE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 563586 // FSTORE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 380546 "FSUB"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 565122 // FSUB
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 380674 "GETFIELD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.ExceptionConstants;
${definition}"
      associated_elems
	class_ref 568578 // GETFIELD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 380802 "GETSTATIC"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.ExceptionConstants;
${definition}"
      associated_elems
	class_ref 560386 // GETSTATIC
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 380930 "GotoInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 559874 // GotoInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 381058 "VariableLengthInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 560258 // VariableLengthInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 381186 "GOTO"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_elems
	class_ref 572290 // GOTO
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 381314 "GOTO_W"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 572162 // GOTO_W
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 381442 "I2B"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 572930 // I2B
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 381570 "I2C"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 573954 // I2C
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 381698 "I2D"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 562050 // I2D
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 381826 "I2F"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 561410 // I2F
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 381954 "I2L"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 566018 // I2L
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 382082 "I2S"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 566402 // I2S
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 382210 "IADD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 573442 // IADD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 382338 "IALOAD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 563714 // IALOAD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 382466 "IAND"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 562306 // IAND
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 382594 "IASTORE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 567042 // IASTORE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 382722 "ICONST"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 572674 // ICONST
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 382850 "IDIV"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 564098 // IDIV
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 382978 "IfInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 559490 // IfInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 383106 "IF_ACMPEQ"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 569858 // IF_ACMPEQ
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 383234 "IF_ACMPNE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 566146 // IF_ACMPNE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 383362 "IF_ICMPEQ"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 571906 // IF_ICMPEQ
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 383490 "IF_ICMPGE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 563842 // IF_ICMPGE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 383618 "IF_ICMPGT"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 565762 // IF_ICMPGT
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 383746 "IF_ICMPLE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 568322 // IF_ICMPLE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 383874 "IF_ICMPLT"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 560514 // IF_ICMPLT
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 384002 "IF_ICMPNE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 571394 // IF_ICMPNE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 384130 "IFEQ"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 566530 // IFEQ
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 384258 "IFGE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 561794 // IFGE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 384386 "IFGT"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 570754 // IFGT
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 384514 "IFLE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 569218 // IFLE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 384642 "IFLT"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 560770 // IFLT
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 384770 "IFNE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 568194 // IFNE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 384898 "IFNONNULL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 568066 // IFNONNULL
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 385026 "IFNULL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 562818 // IFNULL
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 385154 "IINC"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 563458 // IINC
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 385282 "ILOAD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 562562 // ILOAD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 385410 "IMPDEP1"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 569986 // IMPDEP1
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 385538 "IMPDEP2"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 570370 // IMPDEP2
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 385666 "IMUL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 573314 // IMUL
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 385794 "INEG"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 567426 // INEG
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 385922 "INSTANCEOF"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 569090 // INSTANCEOF
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 386050 "InstructionComparator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 549378 // InstructionComparator
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 386178 "InstructionConstants"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
${definition}"
      associated_elems
	class_ref 575362 // InstructionConstants
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 386306 "InstructionFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
${definition}"
      associated_elems
	class_ref 575618 // InstructionFactory
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 386434 "InstructionList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.classfile.Constant;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
import java.io.*;
import java.util.Iterator;
import java.util.HashMap;
import java.util.ArrayList;
${definition}"
      associated_elems
	class_ref 555650 // InstructionList
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 386562 "InstructionListObserver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 576130 // InstructionListObserver
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 386690 "InvokeInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.classfile.*;
import java.util.StringTokenizer;
${definition}"
      associated_elems
	class_ref 560002 // InvokeInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 386818 "INVOKEINTERFACE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.classfile.ConstantPool;
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.ExceptionConstants;
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 567298 // INVOKEINTERFACE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 386946 "INVOKESPECIAL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.ExceptionConstants;
${definition}"
      associated_elems
	class_ref 562178 // INVOKESPECIAL
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 387074 "INVOKESTATIC"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.ExceptionConstants;
${definition}"
      associated_elems
	class_ref 561538 // INVOKESTATIC
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 387202 "INVOKEVIRTUAL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.ExceptionConstants;
${definition}"
      associated_elems
	class_ref 571010 // INVOKEVIRTUAL
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 387330 "IOR"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 566786 // IOR
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 387458 "IREM"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 566914 // IREM
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 387586 "IRETURN"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 571266 // IRETURN
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 387714 "ISHL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 574338 // ISHL
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 387842 "ISHR"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 563202 // ISHR
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 387970 "ISTORE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 561154 // ISTORE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 388098 "ISUB"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 572418 // ISUB
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 388226 "IUSHR"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 569730 // IUSHR
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 388354 "IXOR"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 570882 // IXOR
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 388482 "JsrInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 559746 // JsrInstruction
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 388610 "JSR"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_elems
	class_ref 564994 // JSR
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 388738 "JSR_W"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 567682 // JSR_W
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 388866 "L2D"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 570498 // L2D
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 388994 "L2F"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 565634 // L2F
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 389122 "L2I"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 563074 // L2I
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 389250 "LADD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 568706 // LADD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 389378 "LALOAD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 574466 // LALOAD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 389506 "LAND"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 563970 // LAND
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 389634 "LASTORE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 561922 // LASTORE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 389762 "LCMP"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 567554 // LCMP
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 389890 "LCONST"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 561666 // LCONST
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 390018 "LDC"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 564482 // LDC
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 390146 "LDC2_W"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 568450 // LDC2_W
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 390274 "LDC_W"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 576258 // LDC_W
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 390402 "LDIV"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 571650 // LDIV
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 390530 "LineNumberGen"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.classfile.*;
${definition}"
      associated_elems
	class_ref 576386 // LineNumberGen
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 390658 "LLOAD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 564866 // LLOAD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 390786 "LMUL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 574082 // LMUL
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 390914 "LNEG"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 573058 // LNEG
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 391042 "LocalVariableGen"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.classfile.*;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 576002 // LocalVariableGen
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 391170 "Select"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 559618 // Select
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 391298 "LOOKUPSWITCH"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 573698 // LOOKUPSWITCH
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 391426 "LOR"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 564226 // LOR
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 391554 "LREM"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 573186 // LREM
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 391682 "LRETURN"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 569474 // LRETURN
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 391810 "LSHL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 570242 // LSHL
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 391938 "LSHR"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 573570 // LSHR
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 392066 "LSTORE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 560898 // LSTORE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 392194 "LSUB"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 562946 // LSUB
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 392322 "LUSHR"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 574210 // LUSHR
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 392450 "LXOR"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 569346 // LXOR
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 392578 "MethodGen"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.classfile.*;
import java.util.*;
${definition}"
      associated_elems
	class_ref 555906 // MethodGen
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 392706 "MethodObserver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 576770 // MethodObserver
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 392834 "MONITORENTER"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 570114 // MONITORENTER
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 392962 "MONITOREXIT"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 560642 // MONITOREXIT
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 393090 "MULTIANEWARRAY"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
import com.sun.org.apache.bcel.internal.classfile.ConstantPool;
import com.sun.org.apache.bcel.internal.ExceptionConstants;
${definition}"
      associated_elems
	class_ref 567810 // MULTIANEWARRAY
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 393218 "NEW"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.ExceptionConstants;
${definition}"
      associated_elems
	class_ref 562690 // NEW
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 393346 "NEWARRAY"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 567170 // NEWARRAY
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 393474 "NOP"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 568834 // NOP
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 393602 "ObjectType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.Repository;
import com.sun.org.apache.bcel.internal.classfile.JavaClass;
${definition}"
      associated_elems
	class_ref 551682 // ObjectType
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 393730 "POP"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 566274 // POP
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 393858 "POP2"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 561026 // POP2
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 393986 "PUSH"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import java.io.*;
${definition}"
      associated_elems
	class_ref 576898 // PUSH
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 394114 "PUTFIELD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.ExceptionConstants;
${definition}"
      associated_elems
	class_ref 562434 // PUTFIELD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 394242 "PUTSTATIC"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import com.sun.org.apache.bcel.internal.ExceptionConstants;
${definition}"
      associated_elems
	class_ref 571778 // PUTSTATIC
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 394370 "RET"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 570626 // RET
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 394498 "RETURN"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 565378 // RETURN
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 394626 "ReturnaddressType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.bcel.internal.Constants;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 577154 // ReturnaddressType
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 394754 "SALOAD"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 567938 // SALOAD
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 394882 "SASTORE"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 565250 // SASTORE
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 395010 "SIPUSH"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 565506 // SIPUSH
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 395138 "SWAP"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 566658 // SWAP
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 395266 "SWITCH"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 577282 // SWITCH
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 395394 "TABLESWITCH"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import com.sun.org.apache.bcel.internal.util.ByteSequence;
${definition}"
      associated_elems
	class_ref 563330 // TABLESWITCH
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end

    artifact 395522 "TargetLostException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 575874 // TargetLostException
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
"
    end
  end
end
