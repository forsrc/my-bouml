format 222
"event" // jdk1.8::java::awt::event
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/awt/event/"
  java_package "java.awt.event"
  classview 146946 "event"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 341890 "ComponentListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving component events.
The class that is interested in processing a component event
either implements this interface (and all the methods it
contains) or extends the abstract <code>ComponentAdapter</code> class
(overriding only the methods of interest).
The listener object created from that class is then registered with a
component using the component's <code>addComponentListener</code>
method. When the component's size, location, or visibility
changes, the relevant method in the listener object is invoked,
and the <code>ComponentEvent</code> is passed to it.
<P>
Component events are provided for notification purposes ONLY;
The AWT will automatically handle component moves and resizes
internally so that GUI layout works properly regardless of
whether a program registers a <code>ComponentListener</code> or not.

@see ComponentAdapter
@see ComponentEvent
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/componentlistener.html\">Tutorial: Writing a Component Listener</a>

@author Carl Quinn
@since 1.1
"
      classrelation 605186 // <generalisation>
	relation 605186 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 605186 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 1935106 "componentResized"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346242 // ComponentEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the component's size changes.
"
      end

      operation 1935234 "componentMoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346242 // ComponentEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the component's position changes.
"
      end

      operation 1935362 "componentShown"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346242 // ComponentEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the component has been made visible.
"
      end

      operation 1935490 "componentHidden"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346242 // ComponentEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the component has been made invisible.
"
      end
    end

    class 342018 "FocusListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving keyboard focus events on
a component.
The class that is interested in processing a focus event
either implements this interface (and all the methods it
contains) or extends the abstract <code>FocusAdapter</code> class
(overriding only the methods of interest).
The listener object created from that class is then registered with a
component using the component's <code>addFocusListener</code>
method. When the component gains or loses the keyboard focus,
the relevant method in the listener object
is invoked, and the <code>FocusEvent</code> is passed to it.

@see FocusAdapter
@see FocusEvent
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html\">Tutorial: Writing a Focus Listener</a>

@author Carl Quinn
@since 1.1
"
      classrelation 605442 // <generalisation>
	relation 605442 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 605442 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 1936130 "focusGained"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346370 // FocusEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a component gains the keyboard focus.
"
      end

      operation 1936258 "focusLost"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346370 // FocusEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a component loses the keyboard focus.
"
      end
    end

    class 342146 "HierarchyListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving hierarchy changed events.
The class that is interested in processing a hierarchy changed event
should implement this interface.
The listener object created from that class is then registered with a
Component using the Component's <code>addHierarchyListener</code>
method. When the hierarchy to which the Component belongs changes, the
<code>hierarchyChanged</code> method in the listener object is invoked,
and the <code>HierarchyEvent</code> is passed to it.
<p>
Hierarchy events are provided for notification purposes ONLY;
The AWT will automatically handle changes to the hierarchy internally so
that GUI layout, displayability, and visibility work properly regardless
of whether a program registers a <code>HierarchyListener</code> or not.

@author      David Mendenhall
@see         HierarchyEvent
@since       1.3
"
      classrelation 827010 // <generalisation>
	relation 827010 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 827010 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 2598530 "hierarchyChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346882 // HierarchyEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the hierarchy has been changed. To discern the actual
type of change, call <code>HierarchyEvent.getChangeFlags()</code>.

@see HierarchyEvent#getChangeFlags()
"
      end
    end

    class 342274 "HierarchyBoundsListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving ancestor moved and resized events.
The class that is interested in processing these events either implements
this interface (and all the methods it contains) or extends the abstract
<code>HierarchyBoundsAdapter</code> class (overriding only the method of
interest).
The listener object created from that class is then registered with a
Component using the Component's <code>addHierarchyBoundsListener</code>
method. When the hierarchy to which the Component belongs changes by
the resizing or movement of an ancestor, the relevant method in the listener
object is invoked, and the <code>HierarchyEvent</code> is passed to it.
<p>
Hierarchy events are provided for notification purposes ONLY;
The AWT will automatically handle changes to the hierarchy internally so
that GUI layout works properly regardless of whether a
program registers an <code>HierarchyBoundsListener</code> or not.

@author      David Mendenhall
@see         HierarchyBoundsAdapter
@see         HierarchyEvent
@since       1.3
"
      classrelation 2884482 // <generalisation>
	relation 2884482 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2884482 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 6077570 "ancestorMoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346882 // HierarchyEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when an ancestor of the source is moved.
"
      end

      operation 6077698 "ancestorResized"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346882 // HierarchyEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when an ancestor of the source is resized.
"
      end
    end

    class 342402 "KeyListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving keyboard events (keystrokes).
The class that is interested in processing a keyboard event
either implements this interface (and all the methods it
contains) or extends the abstract <code>KeyAdapter</code> class
(overriding only the methods of interest).
<P>
The listener object created from that class is then registered with a
component using the component's <code>addKeyListener</code>
method. A keyboard event is generated when a key is pressed, released,
or typed. The relevant method in the listener
object is then invoked, and the <code>KeyEvent</code> is passed to it.

@author Carl Quinn

@see KeyAdapter
@see KeyEvent
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/keylistener.html\">Tutorial: Writing a Key Listener</a>

@since 1.1
"
      classrelation 695554 // <generalisation>
	relation 695554 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 695554 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 2204930 "keyTyped"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346498 // KeyEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a key has been typed.
See the class description for {@link KeyEvent} for a definition of
a key typed event.
"
      end

      operation 2205058 "keyPressed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346498 // KeyEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a key has been pressed.
See the class description for {@link KeyEvent} for a definition of
a key pressed event.
"
      end

      operation 2205186 "keyReleased"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346498 // KeyEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a key has been released.
See the class description for {@link KeyEvent} for a definition of
a key released event.
"
      end
    end

    class 342530 "MouseListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving \"interesting\" mouse events
(press, release, click, enter, and exit) on a component.
(To track mouse moves and mouse drags, use the
<code>MouseMotionListener</code>.)
<P>
The class that is interested in processing a mouse event
either implements this interface (and all the methods it
contains) or extends the abstract <code>MouseAdapter</code> class
(overriding only the methods of interest).
<P>
The listener object created from that class is then registered with a
component using the component's <code>addMouseListener</code>
method. A mouse event is generated when the mouse is pressed, released
clicked (pressed and released). A mouse event is also generated when
the mouse cursor enters or leaves a component. When a mouse event
occurs, the relevant method in the listener object is invoked, and
the <code>MouseEvent</code> is passed to it.

@author Carl Quinn

@see MouseAdapter
@see MouseEvent
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/mouselistener.html\">Tutorial: Writing a Mouse Listener</a>

@since 1.1
"
      classrelation 645378 // <generalisation>
	relation 645378 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 645378 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 2041730 "mouseClicked"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the mouse button has been clicked (pressed
and released) on a component.
"
      end

      operation 2041858 "mousePressed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a mouse button has been pressed on a component.
"
      end

      operation 2041986 "mouseReleased"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a mouse button has been released on a component.
"
      end

      operation 2042114 "mouseEntered"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the mouse enters a component.
"
      end

      operation 2042242 "mouseExited"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the mouse exits a component.
"
      end
    end

    class 342658 "MouseMotionListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving mouse motion events on a component.
(For clicks and other mouse events, use the <code>MouseListener</code>.)
<P>
The class that is interested in processing a mouse motion event
either implements this interface (and all the methods it
contains) or extends the abstract <code>MouseMotionAdapter</code> class
(overriding only the methods of interest).
<P>
The listener object created from that class is then registered with a
component using the component's <code>addMouseMotionListener</code>
method. A mouse motion event is generated when the mouse is moved
or dragged. (Many such events will be generated). When a mouse motion event
occurs, the relevant method in the listener object is invoked, and
the <code>MouseEvent</code> is passed to it.

@author Amy Fowler

@see MouseMotionAdapter
@see MouseEvent
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/mousemotionlistener.html\">Tutorial: Writing a Mouse Motion Listener</a>

@since 1.1
"
      classrelation 645890 // <generalisation>
	relation 645890 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 645890 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 2042498 "mouseDragged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a mouse button is pressed on a component and then
dragged.  <code>MOUSE_DRAGGED</code> events will continue to be
delivered to the component where the drag originated until the
mouse button is released (regardless of whether the mouse position
is within the bounds of the component).
<p>
Due to platform-dependent Drag&amp;Drop implementations,
<code>MOUSE_DRAGGED</code> events may not be delivered during a native
Drag&amp;Drop operation.
"
      end

      operation 2042626 "mouseMoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the mouse cursor has been moved onto a component
but no buttons have been pushed.
"
      end
    end

    class 342786 "MouseWheelListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving mouse wheel events on a component.
(For clicks and other mouse events, use the <code>MouseListener</code>.
For mouse movement and drags, use the <code>MouseMotionListener</code>.)
<P>
The class that is interested in processing a mouse wheel event
implements this interface (and all the methods it contains).
<P>
The listener object created from that class is then registered with a
component using the component's <code>addMouseWheelListener</code>
method. A mouse wheel event is generated when the mouse wheel is rotated.
When a mouse wheel event occurs, that object's <code>mouseWheelMoved</code>
method is invoked.
<p>
For information on how mouse wheel events are dispatched, see
the class description for {@link MouseWheelEvent}.

@author Brent Christian
@see MouseWheelEvent
@since 1.4
"
      classrelation 645634 // <generalisation>
	relation 645634 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 645634 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 2042370 "mouseWheelMoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 345858 // MouseWheelEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the mouse wheel is rotated.
@see MouseWheelEvent
"
      end
    end

    class 342914 "InputMethodListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving input method events. A text editing
component has to install an input method event listener in order to work
with input methods.

<p>
The text editing component also has to provide an instance of InputMethodRequests.

@author JavaSoft Asia/Pacific
@see InputMethodEvent
@see java.awt.im.InputMethodRequests
@since 1.2
"
      classrelation 2884098 // <generalisation>
	relation 2884098 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2884098 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 6077314 "inputMethodTextChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 346754 // InputMethodEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the text entered through an input method has changed.
"
      end

      operation 6077442 "caretPositionChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 346754 // InputMethodEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the caret within composed text has changed.
"
      end
    end

    class 345858 "MouseWheelEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An event which indicates that the mouse wheel was rotated in a component.
<P>
A wheel mouse is a mouse which has a wheel in place of the middle button.
This wheel can be rotated towards or away from the user.  Mouse wheels are
most often used for scrolling, though other uses are possible.
<P>
A MouseWheelEvent object is passed to every <code>MouseWheelListener</code>
object which registered to receive the \"interesting\" mouse events using the
component's <code>addMouseWheelListener</code> method.  Each such listener
object gets a <code>MouseEvent</code> containing the mouse event.
<P>
Due to the mouse wheel's special relationship to scrolling Components,
MouseWheelEvents are delivered somewhat differently than other MouseEvents.
This is because while other MouseEvents usually affect a change on
the Component directly under the mouse
cursor (for instance, when clicking a button), MouseWheelEvents often have
an effect away from the mouse cursor (moving the wheel while
over a Component inside a ScrollPane should scroll one of the
Scrollbars on the ScrollPane).
<P>
MouseWheelEvents start delivery from the Component underneath the
mouse cursor.  If MouseWheelEvents are not enabled on the
Component, the event is delivered to the first ancestor
Container with MouseWheelEvents enabled.  This will usually be
a ScrollPane with wheel scrolling enabled.  The source
Component and x,y coordinates will be relative to the event's
final destination (the ScrollPane).  This allows a complex
GUI to be installed without modification into a ScrollPane, and
for all MouseWheelEvents to be delivered to the ScrollPane for
scrolling.
<P>
Some AWT Components are implemented using native widgets which
display their own scrollbars and handle their own scrolling.
The particular Components for which this is true will vary from
platform to platform.  When the mouse wheel is
moved over one of these Components, the event is delivered straight to
the native widget, and not propagated to ancestors.
<P>
Platforms offer customization of the amount of scrolling that
should take place when the mouse wheel is moved.  The two most
common settings are to scroll a certain number of \"units\"
(commonly lines of text in a text-based component) or an entire \"block\"
(similar to page-up/page-down).  The MouseWheelEvent offers
methods for conforming to the underlying platform settings.  These
platform settings can be changed at any time by the user.  MouseWheelEvents
reflect the most recent settings.
<P>
The <code>MouseWheelEvent</code> class includes methods for
getting the number of \"clicks\" by which the mouse wheel is rotated.
The {@link #getWheelRotation} method returns the integer number
of \"clicks\" corresponding to the number of notches by which the wheel was
rotated. In addition to this method, the <code>MouseWheelEvent</code>
class provides the {@link #getPreciseWheelRotation} method which returns
a double number of \"clicks\" in case a partial rotation occurred.
The {@link #getPreciseWheelRotation} method is useful if a mouse supports
a high-resolution wheel, such as a freely rotating wheel with no
notches. Applications can benefit by using this method to process
mouse wheel events more precisely, and thus, making visual perception
smoother.

@author Brent Christian
@see MouseWheelListener
@see java.awt.ScrollPane
@see java.awt.ScrollPane#setWheelScrollingEnabled(boolean)
@see javax.swing.JScrollPane
@see javax.swing.JScrollPane#setWheelScrollingEnabled(boolean)
@since 1.4
"
      classrelation 3009154 // <generalisation>
	relation 3009154 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3009154 // <generalisation>
	  b parent class_ref 346626 // MouseEvent
      end

      attribute 1508610 "WHEEL_UNIT_SCROLL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant representing scrolling by \"units\" (like scrolling with the
arrow keys)

@see #getScrollType

"
      end

      attribute 1508738 "WHEEL_BLOCK_SCROLL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant representing scrolling by a \"block\" (like scrolling
with page-up, page-down keys)

@see #getScrollType

"
      end

      attribute 1508866 "scrollType"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates what sort of scrolling should take place in response to this
event, based on platform settings.  Legal values are:
<ul>
<li> WHEEL_UNIT_SCROLL
<li> WHEEL_BLOCK_SCROLL
</ul>

@see #getScrollType

"
      end

      attribute 1508994 "scrollAmount"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Only valid for scrollType WHEEL_UNIT_SCROLL.
Indicates number of units that should be scrolled per
click of mouse wheel rotation, based on platform settings.

@see #getScrollAmount
@see #getScrollType

"
      end

      attribute 1509122 "wheelRotation"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates how far the mouse wheel was rotated.

@see #getWheelRotation

"
      end

      attribute 1509250 "preciseWheelRotation"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates how far the mouse wheel was rotated.

@see #getPreciseWheelRotation

"
      end

      attribute 1509378 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6459879390515399677L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "serialVersionUID

"
      end

      operation 6448258 "MouseWheelEvent"
	public explicit_return_type ""
	nparams 11
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param in name "when" explicit_type "long"
	  param in name "modifiers" explicit_type "int"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "clickCount" explicit_type "int"
	  param inout name "popupTrigger" explicit_type "boolean"
	  param in name "scrollType" explicit_type "int"
	  param in name "scrollAmount" explicit_type "int"
	  param in name "wheelRotation" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>MouseWheelEvent</code> object with the
specified source component, type, modifiers, coordinates,
scroll type, scroll amount, and wheel rotation.
<p>Absolute coordinates xAbs and yAbs are set to source's location on screen plus
relative coordinates x and y. xAbs and yAbs are set to zero if the source is not showing.
<p>Note that passing in an invalid <code>id</code> results in
unspecified behavior. This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source         the <code>Component</code> that originated
                      the event
@param id             the integer that identifies the event
@param when           a long that gives the time the event occurred
@param modifiers      the modifier keys down during event
                      (shift, ctrl, alt, meta)
@param x              the horizontal x coordinate for the mouse location
@param y              the vertical y coordinate for the mouse location
@param clickCount     the number of mouse clicks associated with event
@param popupTrigger   a boolean, true if this event is a trigger for a
                      popup-menu
@param scrollType     the type of scrolling which should take place in
                      response to this event;  valid values are
                      <code>WHEEL_UNIT_SCROLL</code> and
                      <code>WHEEL_BLOCK_SCROLL</code>
@param  scrollAmount  for scrollType <code>WHEEL_UNIT_SCROLL</code>,
                      the number of units to be scrolled
@param wheelRotation  the integer number of \"clicks\" by which the mouse
                      wheel was rotated

@throws IllegalArgumentException if <code>source</code> is null
@see MouseEvent#MouseEvent(java.awt.Component, int, long, int, int, int, int, boolean)
@see MouseEvent#MouseEvent(java.awt.Component, int, long, int, int, int, int, int, int, boolean, int)
"
      end

      operation 6448386 "MouseWheelEvent"
	public explicit_return_type ""
	nparams 13
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param in name "when" explicit_type "long"
	  param in name "modifiers" explicit_type "int"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "xAbs" explicit_type "int"
	  param in name "yAbs" explicit_type "int"
	  param in name "clickCount" explicit_type "int"
	  param inout name "popupTrigger" explicit_type "boolean"
	  param in name "scrollType" explicit_type "int"
	  param in name "scrollAmount" explicit_type "int"
	  param in name "wheelRotation" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}, ${t12} ${p12}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>MouseWheelEvent</code> object with the
specified source component, type, modifiers, coordinates,
absolute coordinates, scroll type, scroll amount, and wheel rotation.
<p>Note that passing in an invalid <code>id</code> results in
unspecified behavior. This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.<p>
Even if inconsistent values for relative and absolute coordinates are
passed to the constructor, the MouseWheelEvent instance is still
created and no exception is thrown.

@param source         the <code>Component</code> that originated
                      the event
@param id             the integer that identifies the event
@param when           a long that gives the time the event occurred
@param modifiers      the modifier keys down during event
                      (shift, ctrl, alt, meta)
@param x              the horizontal x coordinate for the mouse location
@param y              the vertical y coordinate for the mouse location
@param xAbs           the absolute horizontal x coordinate for the mouse location
@param yAbs           the absolute vertical y coordinate for the mouse location
@param clickCount     the number of mouse clicks associated with event
@param popupTrigger   a boolean, true if this event is a trigger for a
                      popup-menu
@param scrollType     the type of scrolling which should take place in
                      response to this event;  valid values are
                      <code>WHEEL_UNIT_SCROLL</code> and
                      <code>WHEEL_BLOCK_SCROLL</code>
@param  scrollAmount  for scrollType <code>WHEEL_UNIT_SCROLL</code>,
                      the number of units to be scrolled
@param wheelRotation  the integer number of \"clicks\" by which the mouse
                      wheel was rotated

@throws IllegalArgumentException if <code>source</code> is null
@see MouseEvent#MouseEvent(java.awt.Component, int, long, int, int, int, int, boolean)
@see MouseEvent#MouseEvent(java.awt.Component, int, long, int, int, int, int, int, int, boolean, int)
@since 1.6
"
      end

      operation 6448514 "MouseWheelEvent"
	public explicit_return_type ""
	nparams 14
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param in name "when" explicit_type "long"
	  param in name "modifiers" explicit_type "int"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "xAbs" explicit_type "int"
	  param in name "yAbs" explicit_type "int"
	  param in name "clickCount" explicit_type "int"
	  param inout name "popupTrigger" explicit_type "boolean"
	  param in name "scrollType" explicit_type "int"
	  param in name "scrollAmount" explicit_type "int"
	  param in name "wheelRotation" explicit_type "int"
	  param in name "preciseWheelRotation" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}, ${t12} ${p12}, ${t13} ${p13}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>MouseWheelEvent</code> object with the specified
source component, type, modifiers, coordinates, absolute coordinates,
scroll type, scroll amount, and wheel rotation.
<p>Note that passing in an invalid <code>id</code> parameter results
in unspecified behavior. This method throws an
<code>IllegalArgumentException</code> if <code>source</code> equals
<code>null</code>.
<p>Even if inconsistent values for relative and absolute coordinates
are passed to the constructor, a <code>MouseWheelEvent</code> instance
is still created and no exception is thrown.

@param source         the <code>Component</code> that originated the event
@param id             the integer value that identifies the event
@param when           a long value that gives the time when the event occurred
@param modifiers      the modifier keys down during event
                      (shift, ctrl, alt, meta)
@param x              the horizontal <code>x</code> coordinate for the
                      mouse location
@param y              the vertical <code>y</code> coordinate for the
                      mouse location
@param xAbs           the absolute horizontal <code>x</code> coordinate for
                      the mouse location
@param yAbs           the absolute vertical <code>y</code> coordinate for
                      the mouse location
@param clickCount     the number of mouse clicks associated with the event
@param popupTrigger   a boolean value, <code>true</code> if this event is a trigger
                      for a popup-menu
@param scrollType     the type of scrolling which should take place in
                      response to this event;  valid values are
                      <code>WHEEL_UNIT_SCROLL</code> and
                      <code>WHEEL_BLOCK_SCROLL</code>
@param  scrollAmount  for scrollType <code>WHEEL_UNIT_SCROLL</code>,
                      the number of units to be scrolled
@param wheelRotation  the integer number of \"clicks\" by which the mouse wheel
                      was rotated
@param preciseWheelRotation the double number of \"clicks\" by which the mouse wheel
                      was rotated

@throws IllegalArgumentException if <code>source</code> is null
@see MouseEvent#MouseEvent(java.awt.Component, int, long, int, int, int, int, boolean)
@see MouseEvent#MouseEvent(java.awt.Component, int, long, int, int, int, int, int, int, boolean, int)
@since 1.7
"
      end

      operation 6448642 "getScrollType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of scrolling that should take place in response to this
event.  This is determined by the native platform.  Legal values are:
<ul>
<li> MouseWheelEvent.WHEEL_UNIT_SCROLL
<li> MouseWheelEvent.WHEEL_BLOCK_SCROLL
</ul>

@return either MouseWheelEvent.WHEEL_UNIT_SCROLL or
 MouseWheelEvent.WHEEL_BLOCK_SCROLL, depending on the configuration of
 the native platform.
@see java.awt.Adjustable#getUnitIncrement
@see java.awt.Adjustable#getBlockIncrement
@see javax.swing.Scrollable#getScrollableUnitIncrement
@see javax.swing.Scrollable#getScrollableBlockIncrement
"
      end

      operation 6448770 "getScrollAmount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of units that should be scrolled per
click of mouse wheel rotation.
Only valid if <code>getScrollType</code> returns
<code>MouseWheelEvent.WHEEL_UNIT_SCROLL</code>

@return number of units to scroll, or an undefined value if
 <code>getScrollType</code> returns
 <code>MouseWheelEvent.WHEEL_BLOCK_SCROLL</code>
@see #getScrollType
"
      end

      operation 6448898 "getWheelRotation"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of \"clicks\" the mouse wheel was rotated, as an integer.
A partial rotation may occur if the mouse supports a high-resolution wheel.
In this case, the method returns zero until a full \"click\" has been accumulated.

@return negative values if the mouse wheel was rotated up/away from
the user, and positive values if the mouse wheel was rotated down/
towards the user
@see #getPreciseWheelRotation
"
      end

      operation 6449026 "getPreciseWheelRotation"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of \"clicks\" the mouse wheel was rotated, as a double.
A partial rotation may occur if the mouse supports a high-resolution wheel.
In this case, the return value will include a fractional \"click\".

@return negative values if the mouse wheel was rotated up or away from
the user, and positive values if the mouse wheel was rotated down or
towards the user
@see #getWheelRotation
@since 1.7
"
      end

      operation 6449154 "getUnitsToScroll"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a convenience method to aid in the implementation of
the common-case MouseWheelListener - to scroll a ScrollPane or
JScrollPane by an amount which conforms to the platform settings.
(Note, however, that <code>ScrollPane</code> and
<code>JScrollPane</code> already have this functionality built in.)
<P>
This method returns the number of units to scroll when scroll type is
MouseWheelEvent.WHEEL_UNIT_SCROLL, and should only be called if
<code>getScrollType</code> returns MouseWheelEvent.WHEEL_UNIT_SCROLL.
<P>
Direction of scroll, amount of wheel movement,
and platform settings for wheel scrolling are all accounted for.
This method does not and cannot take into account value of the
Adjustable/Scrollable unit increment, as this will vary among
scrolling components.
<P>
A simplified example of how this method might be used in a
listener:
<pre>
 mouseWheelMoved(MouseWheelEvent event) {
     ScrollPane sp = getScrollPaneFromSomewhere();
     Adjustable adj = sp.getVAdjustable()
     if (MouseWheelEvent.getScrollType() == WHEEL_UNIT_SCROLL) {
         int totalScrollAmount =
             event.getUnitsToScroll() *
             adj.getUnitIncrement();
         adj.setValue(adj.getValue() + totalScrollAmount);
     }
 }
</pre>

@return the number of units to scroll based on the direction and amount
 of mouse wheel rotation, and on the wheel scrolling settings of the
 native platform
@see #getScrollType
@see #getScrollAmount
@see MouseWheelListener
@see java.awt.Adjustable
@see java.awt.Adjustable#getUnitIncrement
@see javax.swing.Scrollable
@see javax.swing.Scrollable#getScrollableUnitIncrement
@see java.awt.ScrollPane
@see java.awt.ScrollPane#setWheelScrollingEnabled
@see javax.swing.JScrollPane
@see javax.swing.JScrollPane#setWheelScrollingEnabled
"
      end

      operation 6449282 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter string identifying this event.
This method is useful for event-logging and for debugging.

@return a string identifying the event and its attributes
"
      end
    end

    class 346242 "ComponentEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A low-level event which indicates that a component moved, changed
size, or changed visibility (also, the root class for the other
component-level events).
<P>
Component events are provided for notification purposes ONLY;
The AWT will automatically handle component moves and resizes
internally so that GUI layout works properly regardless of
whether a program is receiving these events or not.
<P>
In addition to serving as the base class for other component-related
events (InputEvent, FocusEvent, WindowEvent, ContainerEvent),
this class defines the events that indicate changes in
a component's size, position, or visibility.
<P>
This low-level event is generated by a component object (such as a
List) when the component is moved, resized, rendered invisible, or made
visible again. The event is passed to every <code>ComponentListener</code>
or <code>ComponentAdapter</code> object which registered to receive such
events using the component's <code>addComponentListener</code> method.
(<code>ComponentAdapter</code> objects implement the
<code>ComponentListener</code> interface.) Each such listener object
gets this <code>ComponentEvent</code> when the event occurs.
<p>
An unspecified behavior will be caused if the {@code id} parameter
of any particular {@code ComponentEvent} instance is not
in the range from {@code COMPONENT_FIRST} to {@code COMPONENT_LAST}.

@see ComponentAdapter
@see ComponentListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/componentlistener.html\">Tutorial: Writing a Component Listener</a>

@author Carl Quinn
@since 1.1
"
      classrelation 3005698 // <generalisation>
	relation 3005698 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3005698 // <generalisation>
	  b parent class_ref 339202 // AWTEvent
      end

      attribute 1469314 "COMPONENT_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The first number in the range of ids used for component events.

"
      end

      attribute 1469442 "COMPONENT_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 103"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The last number in the range of ids used for component events.

"
      end

      attribute 1469570 "COMPONENT_MOVED"
	class_attribute const_attribute public explicit_type "int"
	init_value " COMPONENT_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This event indicates that the component's position changed.

"
      end

      attribute 1469698 "COMPONENT_RESIZED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 + COMPONENT_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This event indicates that the component's size changed.

"
      end

      attribute 1469826 "COMPONENT_SHOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2 + COMPONENT_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This event indicates that the component was made visible.

"
      end

      attribute 1469954 "COMPONENT_HIDDEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3 + COMPONENT_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This event indicates that the component was rendered invisible.

"
      end

      attribute 1470082 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8101406823902992965L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.1 serialVersionUID

"
      end

      operation 6434178 "ComponentEvent"
	public explicit_return_type ""
	nparams 2
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ComponentEvent</code> object.
<p> This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source The <code>Component</code> that originated the event
@param id     An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link ComponentEvent}
@throws IllegalArgumentException if <code>source</code> is null
@see #getComponent()
@see #getID()
"
      end

      operation 6434306 "getComponent"
	public return_type class_ref 338818 // Component
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the originator of the event.

@return the <code>Component</code> object that originated
the event, or <code>null</code> if the object is not a
<code>Component</code>.
"
      end

      operation 6434434 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter string identifying this event.
This method is useful for event-logging and for debugging.

@return a string identifying the event and its attributes
"
      end
    end

    class 346370 "FocusEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A low-level event which indicates that a Component has gained or lost the
input focus. This low-level event is generated by a Component (such as a
TextField). The event is passed to every <code>FocusListener</code> or
<code>FocusAdapter</code> object which registered to receive such events
using the Component's <code>addFocusListener</code> method. (<code>
FocusAdapter</code> objects implement the <code>FocusListener</code>
interface.) Each such listener object gets this <code>FocusEvent</code> when
the event occurs.
<p>
There are two levels of focus events: permanent and temporary. Permanent
focus change events occur when focus is directly moved from one Component to
another, such as through a call to requestFocus() or as the user uses the
TAB key to traverse Components. Temporary focus change events occur when
focus is temporarily lost for a Component as the indirect result of another
operation, such as Window deactivation or a Scrollbar drag. In this case,
the original focus state will automatically be restored once that operation
is finished, or, for the case of Window deactivation, when the Window is
reactivated. Both permanent and temporary focus events are delivered using
the FOCUS_GAINED and FOCUS_LOST event ids; the level may be distinguished in
the event using the isTemporary() method.
<p>
An unspecified behavior will be caused if the {@code id} parameter
of any particular {@code FocusEvent} instance is not
in the range from {@code FOCUS_FIRST} to {@code FOCUS_LAST}.

@see FocusAdapter
@see FocusListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html\">Tutorial: Writing a Focus Listener</a>

@author Carl Quinn
@author Amy Fowler
@since 1.1
"
      classrelation 3006210 // <generalisation>
	relation 3006210 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3006210 // <generalisation>
	  b parent class_ref 346242 // ComponentEvent
      end

      attribute 1470850 "FOCUS_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1004"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The first number in the range of ids used for focus events.

"
      end

      attribute 1470978 "FOCUS_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1005"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The last number in the range of ids used for focus events.

"
      end

      attribute 1471106 "FOCUS_GAINED"
	class_attribute const_attribute public explicit_type "int"
	init_value " FOCUS_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This event indicates that the Component is now the focus owner.

Event.GOT_FOCUS"
      end

      attribute 1471234 "FOCUS_LOST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 + FOCUS_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This event indicates that the Component is no longer the focus owner.

Event.LOST_FOCUS"
      end

      attribute 1471362 "temporary"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A focus event can have two different levels, permanent and temporary.
It will be set to true if some operation takes away the focus
temporarily and intends on getting it back once the event is completed.
Otherwise it will be set to false.

@serial
@see #isTemporary

"
      end

      classrelation 3006338 // opposite (<unidirectional association>)
	relation 3006338 --->
	  a role_name "opposite" package
	    comment "
The other Component involved in this focus change. For a FOCUS_GAINED
event, this is the Component that lost focus. For a FOCUS_LOST event,
this is the Component that gained focus. If this focus change occurs
with a native application, a Java application in a different VM, or with
no other Component, then the opposite Component is null.

@see #getOppositeComponent
@since 1.4

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3006338 // opposite (<unidirectional association>)
	  b parent class_ref 338818 // Component
      end

      attribute 1471490 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 523753786457416396L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.1 serialVersionUID

"
      end

      operation 6435330 "FocusEvent"
	public explicit_return_type ""
	nparams 4
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param inout name "temporary" explicit_type "boolean"
	  param inout name "opposite" type class_ref 338818 // Component
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FocusEvent</code> object with the
specified temporary state and opposite <code>Component</code>.
The opposite <code>Component</code> is the other
<code>Component</code> involved in this focus change.
For a <code>FOCUS_GAINED</code> event, this is the
<code>Component</code> that lost focus. For a
<code>FOCUS_LOST</code> event, this is the <code>Component</code>
that gained focus. If this focus change occurs with a native
application, with a Java application in a different VM,
or with no other <code>Component</code>, then the opposite
<code>Component</code> is <code>null</code>.
<p> This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source     The <code>Component</code> that originated the event
@param id         An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link FocusEvent}
@param temporary  Equals <code>true</code> if the focus change is temporary;
                  <code>false</code> otherwise
@param opposite   The other Component involved in the focus change,
                  or <code>null</code>
@throws IllegalArgumentException if <code>source</code> equals {@code null}
@see #getSource()
@see #getID()
@see #isTemporary()
@see #getOppositeComponent()
@since 1.4
"
      end

      operation 6435458 "FocusEvent"
	public explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param inout name "temporary" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FocusEvent</code> object and identifies
whether or not the change is temporary.
<p> This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source    The <code>Component</code> that originated the event
@param id        An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link FocusEvent}
@param temporary Equals <code>true</code> if the focus change is temporary;
                 <code>false</code> otherwise
@throws IllegalArgumentException if <code>source</code> equals {@code null}
@see #getSource()
@see #getID()
@see #isTemporary()
"
      end

      operation 6435586 "FocusEvent"
	public explicit_return_type ""
	nparams 2
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FocusEvent</code> object and identifies it
as a permanent change in focus.
<p> This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source    The <code>Component</code> that originated the event
@param id        An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link FocusEvent}
@throws IllegalArgumentException if <code>source</code> equals {@code null}
@see #getSource()
@see #getID()
"
      end

      operation 6435714 "isTemporary"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Identifies the focus change event as temporary or permanent.

@return <code>true</code> if the focus change is temporary;
        <code>false</code> otherwise
"
      end

      operation 6435842 "getOppositeComponent"
	public return_type class_ref 338818 // Component
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the other Component involved in this focus change. For a
FOCUS_GAINED event, this is the Component that lost focus. For a
FOCUS_LOST event, this is the Component that gained focus. If this
focus change occurs with a native application, with a Java application
in a different VM or context, or with no other Component, then null is
returned.

@return the other Component involved in the focus change, or null
@since 1.4
"
      end

      operation 6435970 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter string identifying this event.
This method is useful for event-logging and for debugging.

@return a string identifying the event and its attributes
"
      end
    end

    class 346498 "KeyEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An event which indicates that a keystroke occurred in a component.
<p>
This low-level event is generated by a component object (such as a text
field) when a key is pressed, released, or typed.
The event is passed to every <code>KeyListener</code>
or <code>KeyAdapter</code> object which registered to receive such
events using the component's <code>addKeyListener</code> method.
(<code>KeyAdapter</code> objects implement the
<code>KeyListener</code> interface.)  Each such listener object
gets this <code>KeyEvent</code> when the event occurs.
<p>
<em>\"Key typed\" events</em> are higher-level and generally do not depend on
the platform or keyboard layout.  They are generated when a Unicode character
is entered, and are the preferred way to find out about character input.
In the simplest case, a key typed event is produced by a single key press
(e.g., 'a').  Often, however, characters are produced by series of key
presses (e.g., 'shift' + 'a'), and the mapping from key pressed events to
key typed events may be many-to-one or many-to-many.  Key releases are not
usually necessary to generate a key typed event, but there are some cases
where the key typed event is not generated until a key is released (e.g.,
entering ASCII sequences via the Alt-Numpad method in Windows).
No key typed events are generated for keys that don't generate Unicode
characters (e.g., action keys, modifier keys, etc.).
<p>
The getKeyChar method always returns a valid Unicode character or
CHAR_UNDEFINED.  Character input is reported by KEY_TYPED events:
KEY_PRESSED and KEY_RELEASED events are not necessarily associated
with character input.  Therefore, the result of the getKeyChar method
is guaranteed to be meaningful only for KEY_TYPED events.
<p>
For key pressed and key released events, the getKeyCode method returns
the event's keyCode.  For key typed events, the getKeyCode method
always returns {@code VK_UNDEFINED}. The {@code getExtendedKeyCode} method
may also be used with many international keyboard layouts.

<p>
<em>\"Key pressed\" and \"key released\" events</em> are lower-level and depend
on the platform and keyboard layout. They are generated whenever a key is
pressed or released, and are the only way to find out about keys that don't
generate character input (e.g., action keys, modifier keys, etc.). The key
being pressed or released is indicated by the {@code getKeyCode} and {@code getExtendedKeyCode}
methods, which return a virtual key code.

<p>
<em>Virtual key codes</em> are used to report which keyboard key has
been pressed, rather than a character generated by the combination
of one or more keystrokes (such as \"A\", which comes from shift and \"a\").

<p>
For example, pressing the Shift key will cause a KEY_PRESSED event
with a VK_SHIFT keyCode, while pressing the 'a' key will result in
a VK_A keyCode.  After the 'a' key is released, a KEY_RELEASED event
will be fired with VK_A. Separately, a KEY_TYPED event with a keyChar
value of 'A' is generated.

<p>
Pressing and releasing a key on the keyboard results in the generating
the following key events (in order):
<PRE>
   {@code KEY_PRESSED}
   {@code KEY_TYPED} (is only generated if a valid Unicode character could be generated.)
   {@code KEY_RELEASED}
</PRE>

But in some cases (e.g. auto-repeat or input method is activated) the order
could be different (and platform dependent).

<p>
Notes:
<ul>
<li>Key combinations which do not result in Unicode characters, such as action
keys like F1 and the HELP key, do not generate KEY_TYPED events.
<li>Not all keyboards or systems are capable of generating all
virtual key codes.  No attempt is made in Java to generate these keys
artificially.
<li>Virtual key codes do not identify a physical key: they depend on the
platform and keyboard layout. For example, the key that generates VK_Q
when using a U.S. keyboard layout will generate VK_A when using a French
keyboard layout.
<li>The key that generates {@code VK_Q} when using a U.S. keyboard layout also
generates a unique code for Russian or Hebrew layout. There is no a
{@code VK_} constant for these and many other codes in various layouts. These codes
may be obtained by using {@code getExtendedKeyCode} and are used whenever
a {@code VK_} constant is used.
<li>Not all characters have a keycode associated with them.  For example,
there is no keycode for the question mark because there is no keyboard
for which it appears on the primary layer.
<li>In order to support the platform-independent handling of action keys,
the Java platform uses a few additional virtual key constants for functions
that would otherwise have to be recognized by interpreting virtual key codes
and modifiers. For example, for Japanese Windows keyboards, VK_ALL_CANDIDATES
is returned instead of VK_CONVERT with the ALT modifier.
<li>As specified in <a href=\"../doc-files/FocusSpec.html\">Focus Specification</a>
key events are dispatched to the focus owner by default.
</ul>

<p>
WARNING: Aside from those keys that are defined by the Java language
(VK_ENTER, VK_BACK_SPACE, and VK_TAB), do not rely on the values of the VK_
constants.  Sun reserves the right to change these values as needed
to accommodate a wider range of keyboards in the future.
<p>
An unspecified behavior will be caused if the {@code id} parameter
of any particular {@code KeyEvent} instance is not
in the range from {@code KEY_FIRST} to {@code KEY_LAST}.

@author Carl Quinn
@author Amy Fowler
@author Norbert Lindenberg

@see KeyAdapter
@see KeyListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/keylistener.html\">Tutorial: Writing a Key Listener</a>

@since 1.1
"
      classrelation 3008770 // <generalisation>
	relation 3008770 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3008770 // <generalisation>
	  b parent class_ref 352386 // InputEvent
      end

      attribute 1478786 "isProxyActive"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Stores the state of native event dispatching system
- true, if when the event was created event proxying
        mechanism was active
- false, if it was inactive
Used in Component.dispatchEventImpl to correctly dispatch
events when proxy is active

"
      end

      attribute 1478914 "KEY_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 400"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The first number in the range of ids used for key events.

"
      end

      attribute 1479042 "KEY_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 402"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The last number in the range of ids used for key events.

"
      end

      attribute 1479170 "KEY_TYPED"
	class_attribute const_attribute public explicit_type "int"
	init_value " KEY_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The \"key typed\" event.  This event is generated when a character is
entered.  In the simplest case, it is produced by a single key press.
Often, however, characters are produced by series of key presses, and
the mapping from key pressed events to key typed events may be
many-to-one or many-to-many.

"
      end

      attribute 1479298 "KEY_PRESSED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 + KEY_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The \"key pressed\" event. This event is generated when a key
is pushed down.

Event.KEY_PRESS"
      end

      attribute 1479426 "KEY_RELEASED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2 + KEY_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The \"key released\" event. This event is generated when a key
is let up.

Event.KEY_RELEASE"
      end

      attribute 1479554 "VK_ENTER"
	class_attribute const_attribute public explicit_type "int"
	init_value " '\\n'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Virtual key codes. 
"
      end

      attribute 1479682 "VK_BACK_SPACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " '\\b'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1479810 "VK_TAB"
	class_attribute const_attribute public explicit_type "int"
	init_value " '\\t'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1479938 "VK_CANCEL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x03"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1480066 "VK_CLEAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0C"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1480194 "VK_SHIFT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1480322 "VK_CONTROL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1480450 "VK_ALT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1480578 "VK_PAUSE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1480706 "VK_CAPS_LOCK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1480834 "VK_ESCAPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x1B"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1480962 "VK_SPACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1481090 "VK_PAGE_UP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x21"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1481218 "VK_PAGE_DOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x22"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1481346 "VK_END"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x23"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1481474 "VK_HOME"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x24"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1481602 "VK_LEFT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x25"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the non-numpad <b>left</b> arrow key.
@see #VK_KP_LEFT

"
      end

      attribute 1481730 "VK_UP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x26"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the non-numpad <b>up</b> arrow key.
@see #VK_KP_UP

"
      end

      attribute 1481858 "VK_RIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x27"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the non-numpad <b>right</b> arrow key.
@see #VK_KP_RIGHT

"
      end

      attribute 1481986 "VK_DOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x28"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the non-numpad <b>down</b> arrow key.
@see #VK_KP_DOWN

"
      end

      attribute 1482114 "VK_COMMA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x2C"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the comma key, \",\"

"
      end

      attribute 1482242 "VK_MINUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x2D"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the minus key, \"-\"
@since 1.2

"
      end

      attribute 1482370 "VK_PERIOD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x2E"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the period key, \".\"

"
      end

      attribute 1482498 "VK_SLASH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x2F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the forward slash key, \"/\"

"
      end

      attribute 1482626 "VK_0"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x30"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " VK_0 thru VK_9 are the same as ASCII '0' thru '9' (0x30 - 0x39) 
"
      end

      attribute 1482754 "VK_1"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x31"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1482882 "VK_2"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1483010 "VK_3"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x33"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1483138 "VK_4"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x34"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1483266 "VK_5"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x35"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1483394 "VK_6"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x36"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1483522 "VK_7"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x37"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1483650 "VK_8"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x38"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1483778 "VK_9"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x39"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1483906 "VK_SEMICOLON"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x3B"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the semicolon key, \";\"

"
      end

      attribute 1484034 "VK_EQUALS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x3D"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the equals key, \"=\"

"
      end

      attribute 1484162 "VK_A"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x41"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " VK_A thru VK_Z are the same as ASCII 'A' thru 'Z' (0x41 - 0x5A) 
"
      end

      attribute 1484290 "VK_B"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x42"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1484418 "VK_C"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x43"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1484546 "VK_D"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x44"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1484674 "VK_E"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x45"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1484802 "VK_F"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x46"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1484930 "VK_G"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x47"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1485058 "VK_H"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x48"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1485186 "VK_I"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x49"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1485314 "VK_J"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4A"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1485442 "VK_K"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4B"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1485570 "VK_L"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4C"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1485698 "VK_M"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4D"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1485826 "VK_N"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4E"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1485954 "VK_O"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1486082 "VK_P"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x50"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1486210 "VK_Q"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x51"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1486338 "VK_R"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x52"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1486466 "VK_S"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x53"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1486594 "VK_T"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x54"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1486722 "VK_U"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x55"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1486850 "VK_V"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x56"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1486978 "VK_W"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x57"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1487106 "VK_X"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x58"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1487234 "VK_Y"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x59"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1487362 "VK_Z"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x5A"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1487490 "VK_OPEN_BRACKET"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x5B"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the open bracket key, \"[\"

"
      end

      attribute 1487618 "VK_BACK_SLASH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x5C"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the back slash key, \"\\\"

"
      end

      attribute 1487746 "VK_CLOSE_BRACKET"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x5D"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the close bracket key, \"]\"

"
      end

      attribute 1487874 "VK_NUMPAD0"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x60"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1488002 "VK_NUMPAD1"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x61"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1488130 "VK_NUMPAD2"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x62"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1488258 "VK_NUMPAD3"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x63"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1488386 "VK_NUMPAD4"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x64"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1488514 "VK_NUMPAD5"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x65"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1488642 "VK_NUMPAD6"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x66"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1488770 "VK_NUMPAD7"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x67"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1488898 "VK_NUMPAD8"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x68"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1489026 "VK_NUMPAD9"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x69"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1489154 "VK_MULTIPLY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6A"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1489282 "VK_ADD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6B"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1489410 "VK_SEPARATER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6C"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant is obsolete, and is included only for backwards
compatibility.
@see #VK_SEPARATOR

"
      end

      attribute 1489538 "VK_SEPARATOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " VK_SEPARATER"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Numpad Separator key.
@since 1.4

"
      end

      attribute 1489666 "VK_SUBTRACT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6D"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1489794 "VK_DECIMAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6E"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1489922 "VK_DIVIDE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x6F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1490050 "VK_DELETE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x7F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ASCII DEL "
      end

      attribute 1490178 "VK_NUM_LOCK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x90"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1490306 "VK_SCROLL_LOCK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x91"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1490434 "VK_F1"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x70"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the F1 function key. 
"
      end

      attribute 1490562 "VK_F2"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x71"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the F2 function key. 
"
      end

      attribute 1490690 "VK_F3"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x72"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the F3 function key. 
"
      end

      attribute 1490818 "VK_F4"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x73"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the F4 function key. 
"
      end

      attribute 1490946 "VK_F5"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x74"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the F5 function key. 
"
      end

      attribute 1491074 "VK_F6"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x75"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the F6 function key. 
"
      end

      attribute 1491202 "VK_F7"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x76"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the F7 function key. 
"
      end

      attribute 1491330 "VK_F8"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x77"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the F8 function key. 
"
      end

      attribute 1491458 "VK_F9"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x78"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the F9 function key. 
"
      end

      attribute 1491586 "VK_F10"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x79"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the F10 function key. 
"
      end

      attribute 1491714 "VK_F11"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x7A"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the F11 function key. 
"
      end

      attribute 1491842 "VK_F12"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x7B"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the F12 function key. 
"
      end

      attribute 1491970 "VK_F13"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xF000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the F13 function key.
@since 1.2

 F13 - F24 are used on IBM 3270 keyboard; use random range for constants. 
"
      end

      attribute 1492098 "VK_F14"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xF001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the F14 function key.
@since 1.2

"
      end

      attribute 1492226 "VK_F15"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xF002"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the F15 function key.
@since 1.2

"
      end

      attribute 1492354 "VK_F16"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xF003"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the F16 function key.
@since 1.2

"
      end

      attribute 1492482 "VK_F17"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xF004"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the F17 function key.
@since 1.2

"
      end

      attribute 1492610 "VK_F18"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xF005"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the F18 function key.
@since 1.2

"
      end

      attribute 1492738 "VK_F19"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xF006"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the F19 function key.
@since 1.2

"
      end

      attribute 1492866 "VK_F20"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xF007"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the F20 function key.
@since 1.2

"
      end

      attribute 1492994 "VK_F21"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xF008"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the F21 function key.
@since 1.2

"
      end

      attribute 1493122 "VK_F22"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xF009"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the F22 function key.
@since 1.2

"
      end

      attribute 1493250 "VK_F23"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xF00A"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the F23 function key.
@since 1.2

"
      end

      attribute 1493378 "VK_F24"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xF00B"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the F24 function key.
@since 1.2

"
      end

      attribute 1493506 "VK_PRINTSCREEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x9A"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1493634 "VK_INSERT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x9B"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1493762 "VK_HELP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x9C"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1493890 "VK_META"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x9D"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1494018 "VK_BACK_QUOTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xC0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1494146 "VK_QUOTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xDE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1494274 "VK_KP_UP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the numeric keypad <b>up</b> arrow key.
@see #VK_UP
@since 1.2

"
      end

      attribute 1494402 "VK_KP_DOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the numeric keypad <b>down</b> arrow key.
@see #VK_DOWN
@since 1.2

"
      end

      attribute 1494530 "VK_KP_LEFT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the numeric keypad <b>left</b> arrow key.
@see #VK_LEFT
@since 1.2

"
      end

      attribute 1494658 "VK_KP_RIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the numeric keypad <b>right</b> arrow key.
@see #VK_RIGHT
@since 1.2

"
      end

      attribute 1494786 "VK_DEAD_GRAVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x80"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " For European keyboards 
 @since 1.2 
"
      end

      attribute 1494914 "VK_DEAD_ACUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x81"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1495042 "VK_DEAD_CIRCUMFLEX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x82"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1495170 "VK_DEAD_TILDE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x83"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1495298 "VK_DEAD_MACRON"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x84"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1495426 "VK_DEAD_BREVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x85"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1495554 "VK_DEAD_ABOVEDOT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x86"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1495682 "VK_DEAD_DIAERESIS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x87"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1495810 "VK_DEAD_ABOVERING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x88"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1495938 "VK_DEAD_DOUBLEACUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x89"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1496066 "VK_DEAD_CARON"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8a"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1496194 "VK_DEAD_CEDILLA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8b"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1496322 "VK_DEAD_OGONEK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8c"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1496450 "VK_DEAD_IOTA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8d"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1496578 "VK_DEAD_VOICED_SOUND"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8e"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1496706 "VK_DEAD_SEMIVOICED_SOUND"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1496834 "VK_AMPERSAND"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x96"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1496962 "VK_ASTERISK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x97"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1497090 "VK_QUOTEDBL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x98"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1497218 "VK_LESS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x99"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1497346 "VK_GREATER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xa0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1497474 "VK_BRACELEFT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xa1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1497602 "VK_BRACERIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xa2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1497730 "VK_AT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0200"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the \"@\" key.
@since 1.2

"
      end

      attribute 1497858 "VK_COLON"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0201"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the \":\" key.
@since 1.2

"
      end

      attribute 1497986 "VK_CIRCUMFLEX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0202"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the \"^\" key.
@since 1.2

"
      end

      attribute 1498114 "VK_DOLLAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0203"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the \"$\" key.
@since 1.2

"
      end

      attribute 1498242 "VK_EURO_SIGN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0204"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Euro currency sign key.
@since 1.2

"
      end

      attribute 1498370 "VK_EXCLAMATION_MARK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0205"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the \"!\" key.
@since 1.2

"
      end

      attribute 1498498 "VK_INVERTED_EXCLAMATION_MARK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0206"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the inverted exclamation mark key.
@since 1.2

"
      end

      attribute 1498626 "VK_LEFT_PARENTHESIS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0207"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the \"(\" key.
@since 1.2

"
      end

      attribute 1498754 "VK_NUMBER_SIGN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0208"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the \"#\" key.
@since 1.2

"
      end

      attribute 1498882 "VK_PLUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0209"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the \"+\" key.
@since 1.2

"
      end

      attribute 1499010 "VK_RIGHT_PARENTHESIS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x020A"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the \")\" key.
@since 1.2

"
      end

      attribute 1499138 "VK_UNDERSCORE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x020B"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the \"_\" key.
@since 1.2

"
      end

      attribute 1499266 "VK_WINDOWS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x020C"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Microsoft Windows \"Windows\" key.
It is used for both the left and right version of the key.
@see #getKeyLocation()
@since 1.5

"
      end

      attribute 1499394 "VK_CONTEXT_MENU"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x020D"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Microsoft Windows Context Menu key.
@since 1.5

"
      end

      attribute 1499522 "VK_FINAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0018"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " for input method support on Asian Keyboards 
 not clear what this means - listed in Microsoft Windows API 
"
      end

      attribute 1499650 "VK_CONVERT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x001C"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the Convert function key. 
 Japanese PC 106 keyboard, Japanese Solaris keyboard: henkan 
"
      end

      attribute 1499778 "VK_NONCONVERT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x001D"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the Don't Convert function key. 
 Japanese PC 106 keyboard: muhenkan 
"
      end

      attribute 1499906 "VK_ACCEPT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x001E"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant for the Accept or Commit function key. 
 Japanese Solaris keyboard: kakutei 
"
      end

      attribute 1500034 "VK_MODECHANGE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x001F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " not clear what this means - listed in Microsoft Windows API 
"
      end

      attribute 1500162 "VK_KANA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0015"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " replaced by VK_KANA_LOCK for Microsoft Windows and Solaris;
might still be used on other platforms 
"
      end

      attribute 1500290 "VK_KANJI"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0019"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " replaced by VK_INPUT_METHOD_ON_OFF for Microsoft Windows and Solaris;
might still be used for other platforms 
"
      end

      attribute 1500418 "VK_ALPHANUMERIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00F0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Alphanumeric function key.
@since 1.2

 Japanese PC 106 keyboard: eisuu 
"
      end

      attribute 1500546 "VK_KATAKANA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00F1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Katakana function key.
@since 1.2

 Japanese PC 106 keyboard: katakana 
"
      end

      attribute 1500674 "VK_HIRAGANA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00F2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Hiragana function key.
@since 1.2

 Japanese PC 106 keyboard: hiragana 
"
      end

      attribute 1500802 "VK_FULL_WIDTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00F3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Full-Width Characters function key.
@since 1.2

 Japanese PC 106 keyboard: zenkaku 
"
      end

      attribute 1500930 "VK_HALF_WIDTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00F4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Half-Width Characters function key.
@since 1.2

 Japanese PC 106 keyboard: hankaku 
"
      end

      attribute 1501058 "VK_ROMAN_CHARACTERS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00F5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Roman Characters function key.
@since 1.2

 Japanese PC 106 keyboard: roumaji 
"
      end

      attribute 1501186 "VK_ALL_CANDIDATES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the All Candidates function key.
@since 1.2

 Japanese PC 106 keyboard - VK_CONVERT + ALT: zenkouho 
"
      end

      attribute 1501314 "VK_PREVIOUS_CANDIDATE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0101"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Previous Candidate function key.
@since 1.2

 Japanese PC 106 keyboard - VK_CONVERT + SHIFT: maekouho 
"
      end

      attribute 1501442 "VK_CODE_INPUT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0102"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Code Input function key.
@since 1.2

 Japanese PC 106 keyboard - VK_ALPHANUMERIC + ALT: kanji bangou 
"
      end

      attribute 1501570 "VK_JAPANESE_KATAKANA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0103"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Japanese-Katakana function key.
This key switches to a Japanese input method and selects its Katakana input mode.
@since 1.2

 Japanese Macintosh keyboard - VK_JAPANESE_HIRAGANA + SHIFT 
"
      end

      attribute 1501698 "VK_JAPANESE_HIRAGANA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0104"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Japanese-Hiragana function key.
This key switches to a Japanese input method and selects its Hiragana input mode.
@since 1.2

 Japanese Macintosh keyboard 
"
      end

      attribute 1501826 "VK_JAPANESE_ROMAN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0105"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Japanese-Roman function key.
This key switches to a Japanese input method and selects its Roman-Direct input mode.
@since 1.2

 Japanese Macintosh keyboard 
"
      end

      attribute 1501954 "VK_KANA_LOCK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0106"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the locking Kana function key.
This key locks the keyboard into a Kana layout.
@since 1.3

 Japanese PC 106 keyboard with special Windows driver - eisuu + Control; Japanese Solaris keyboard: kana 
"
      end

      attribute 1502082 "VK_INPUT_METHOD_ON_OFF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0107"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the input method on/off key.
@since 1.3

 Japanese PC 106 keyboard: kanji. Japanese Solaris keyboard: nihongo 
"
      end

      attribute 1502210 "VK_CUT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xFFD1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " for Sun keyboards 
 @since 1.2 
"
      end

      attribute 1502338 "VK_COPY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xFFCD"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1502466 "VK_PASTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xFFCF"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1502594 "VK_UNDO"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xFFCB"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1502722 "VK_AGAIN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xFFC9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1502850 "VK_FIND"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xFFD0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1502978 "VK_PROPS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xFFCA"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1503106 "VK_STOP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xFFC8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @since 1.2 
"
      end

      attribute 1503234 "VK_COMPOSE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xFF20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Compose function key.
@since 1.2

"
      end

      attribute 1503362 "VK_ALT_GRAPH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xFF7E"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the AltGraph function key.
@since 1.2

"
      end

      attribute 1503490 "VK_BEGIN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xFF58"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the Begin key.
@since 1.5

"
      end

      attribute 1503618 "VK_UNDEFINED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This value is used to indicate that the keyCode is unknown.
KEY_TYPED events do not have a keyCode value; this value
is used instead.

"
      end

      attribute 1503746 "CHAR_UNDEFINED"
	class_attribute const_attribute public explicit_type "char"
	init_value " 0xFFFF"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "KEY_PRESSED and KEY_RELEASED events which do not map to a
valid Unicode character use this for the keyChar value.

"
      end

      attribute 1503874 "KEY_LOCATION_UNKNOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that the keyLocation is indeterminate
or not relevant.
<code>KEY_TYPED</code> events do not have a keyLocation; this value
is used instead.
@since 1.4

"
      end

      attribute 1504002 "KEY_LOCATION_STANDARD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that the key pressed or released
is not distinguished as the left or right version of a key,
and did not originate on the numeric keypad (or did not
originate with a virtual key corresponding to the numeric
keypad).
@since 1.4

"
      end

      attribute 1504130 "KEY_LOCATION_LEFT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that the key pressed or released is in
the left key location (there is more than one possible location
for this key).  Example: the left shift key.
@since 1.4

"
      end

      attribute 1504258 "KEY_LOCATION_RIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that the key pressed or released is in
the right key location (there is more than one possible location
for this key).  Example: the right shift key.
@since 1.4

"
      end

      attribute 1504386 "KEY_LOCATION_NUMPAD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that the key event originated on the
numeric keypad or with a virtual key corresponding to the
numeric keypad.
@since 1.4

"
      end

      attribute 1504514 "keyCode"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The unique value assigned to each of the keys on the
keyboard.  There is a common set of key codes that
can be fired by most keyboards.
The symbolic name for a key code should be used rather
than the code value itself.

@serial
@see #getKeyCode()
@see #setKeyCode(int)

"
      end

      attribute 1504642 "keyChar"
	package explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<code>keyChar</code> is a valid unicode character
that is fired by a key or a key combination on
a keyboard.

@serial
@see #getKeyChar()
@see #setKeyChar(char)

"
      end

      attribute 1504770 "keyLocation"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The location of the key on the keyboard.

Some keys occur more than once on a keyboard, e.g. the left and
right shift keys.  Additionally, some keys occur on the numeric
keypad.  This variable is used to distinguish such keys.

The only legal values are <code>KEY_LOCATION_UNKNOWN</code>,
<code>KEY_LOCATION_STANDARD</code>, <code>KEY_LOCATION_LEFT</code>,
<code>KEY_LOCATION_RIGHT</code>, and <code>KEY_LOCATION_NUMPAD</code>.

@serial
@see #getKeyLocation()

"
      end

      attribute 1504898 "rawCode"
	private explicit_type "long"
	init_value " 0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "set from native code.
"
      end

      attribute 1505026 "primaryLevelUnicode"
	private explicit_type "long"
	init_value " 0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1505154 "scancode"
	private explicit_type "long"
	init_value " 0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " for MS Windows only"
      end

      attribute 1505282 "extendedKeyCode"
	private explicit_type "long"
	init_value " 0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1505410 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2352130953028126954L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.1 serialVersionUID

"
      end

      extra_member 152962 "initialization"
	
	cpp "" ""
	java "  static {
        /* ensure that the necessary native libraries are loaded */
        NativeLibLoader.loadLibraries();
        if (!GraphicsEnvironment.isHeadless()) {
            initIDs();
        }

        AWTAccessor.setKeyEventAccessor(
            new AWTAccessor.KeyEventAccessor() {
                public void setRawCode(KeyEvent ev, long rawCode) {
                    ev.rawCode = rawCode;
                }

                public void setPrimaryLevelUnicode(KeyEvent ev,
                                                   long primaryLevelUnicode) {
                    ev.primaryLevelUnicode = primaryLevelUnicode;
                }

                public void setExtendedKeyCode(KeyEvent ev,
                                               long extendedKeyCode) {
                    ev.extendedKeyCode = extendedKeyCode;
                }

                public Component getOriginalSource( KeyEvent ev ) {
                    return ev.originalSource;
                }
            });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6443138 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Initialize JNI field and method IDs for fields that may be
accessed from C.
"
      end

      classrelation 3008898 // originalSource (<unidirectional association>)
	relation 3008898 --->
	  a role_name "originalSource" private
	    comment "
The original event source.

Event source can be changed during processing, but in some cases
we need to be able to obtain original source.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3008898 // originalSource (<unidirectional association>)
	  b parent class_ref 338818 // Component
      end

      operation 6443266 "KeyEvent"
	private explicit_return_type ""
	nparams 8
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param in name "when" explicit_type "long"
	  param in name "modifiers" explicit_type "int"
	  param in name "keyCode" explicit_type "int"
	  param in name "keyChar" explicit_type "char"
	  param in name "keyLocation" explicit_type "int"
	  param inout name "isProxyActive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6443394 "KeyEvent"
	public explicit_return_type ""
	nparams 7
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param in name "when" explicit_type "long"
	  param in name "modifiers" explicit_type "int"
	  param in name "keyCode" explicit_type "int"
	  param in name "keyChar" explicit_type "char"
	  param in name "keyLocation" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>KeyEvent</code> object.
<p>This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source    The <code>Component</code> that originated the event
@param id              An integer indicating the type of event.
                 For information on allowable values, see
                 the class description for {@link KeyEvent}
@param when      A long integer that specifies the time the event
                 occurred.
                    Passing negative or zero value
                    is not recommended
@param modifiers The modifier keys down during event (shift, ctrl,
                 alt, meta).
                    Passing negative value
                    is not recommended.
                    Zero value means that no modifiers were passed.
                 Use either an extended _DOWN_MASK or old _MASK modifiers,
                 however do not mix models in the one event.
                 The extended modifiers are preferred for using
@param keyCode   The integer code for an actual key, or VK_UNDEFINED
                 (for a key-typed event)
@param keyChar   The Unicode character generated by this event, or
                 CHAR_UNDEFINED (for key-pressed and key-released
                 events which do not map to a valid Unicode character)
@param keyLocation  Identifies the key location.  The only legal
       values are <code>KEY_LOCATION_UNKNOWN</code>,
       <code>KEY_LOCATION_STANDARD</code>, <code>KEY_LOCATION_LEFT</code>,
       <code>KEY_LOCATION_RIGHT</code>, and <code>KEY_LOCATION_NUMPAD</code>.
@throws IllegalArgumentException
    if <code>id</code> is <code>KEY_TYPED</code> and
      <code>keyChar</code> is <code>CHAR_UNDEFINED</code>;
    or if <code>id</code> is <code>KEY_TYPED</code> and
      <code>keyCode</code> is not <code>VK_UNDEFINED</code>;
    or if <code>id</code> is <code>KEY_TYPED</code> and
      <code>keyLocation</code> is not <code>KEY_LOCATION_UNKNOWN</code>;
    or if <code>keyLocation</code> is not one of the legal
      values enumerated above.
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
@see #getWhen()
@see #getModifiers()
@see #getKeyCode()
@see #getKeyChar()
@see #getKeyLocation()
@since 1.4
"
      end

      operation 6443522 "KeyEvent"
	public explicit_return_type ""
	nparams 6
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param in name "when" explicit_type "long"
	  param in name "modifiers" explicit_type "int"
	  param in name "keyCode" explicit_type "int"
	  param in name "keyChar" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>KeyEvent</code> object.
<p> This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source    The <code>Component</code> that originated the event
@param id              An integer indicating the type of event.
                 For information on allowable values, see
                 the class description for {@link KeyEvent}
@param when      A long integer that specifies the time the event
                 occurred.
                    Passing negative or zero value
                    is not recommended
@param modifiers The modifier keys down during event (shift, ctrl,
                 alt, meta).
                    Passing negative value
                    is not recommended.
                    Zero value means that no modifiers were passed.
                 Use either an extended _DOWN_MASK or old _MASK modifiers,
                 however do not mix models in the one event.
                 The extended modifiers are preferred for using
@param keyCode   The integer code for an actual key, or VK_UNDEFINED
                 (for a key-typed event)
@param keyChar   The Unicode character generated by this event, or
                 CHAR_UNDEFINED (for key-pressed and key-released
                 events which do not map to a valid Unicode character)
@throws IllegalArgumentException  if <code>id</code> is
    <code>KEY_TYPED</code> and <code>keyChar</code> is
    <code>CHAR_UNDEFINED</code>; or if <code>id</code> is
    <code>KEY_TYPED</code> and <code>keyCode</code> is not
    <code>VK_UNDEFINED</code>
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
@see #getWhen()
@see #getModifiers()
@see #getKeyCode()
@see #getKeyChar()
"
      end

      operation 6443650 "KeyEvent"
	public explicit_return_type ""
	nparams 5
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param in name "when" explicit_type "long"
	  param in name "modifiers" explicit_type "int"
	  param in name "keyCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "@deprecated as of JDK1.1
"
      end

      operation 6443778 "getKeyCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the integer keyCode associated with the key in this event.

@return the integer code for an actual key on the keyboard.
        (For <code>KEY_TYPED</code> events, the keyCode is
        <code>VK_UNDEFINED</code>.)
"
      end

      operation 6443906 "setKeyCode"
	public explicit_return_type "void"
	nparams 1
	  param in name "keyCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the keyCode value to indicate a physical key.

@param keyCode an integer corresponding to an actual key on the keyboard.
"
      end

      operation 6444034 "getKeyChar"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character associated with the key in this event.
For example, the <code>KEY_TYPED</code> event for shift + \"a\"
returns the value for \"A\".
<p>
<code>KEY_PRESSED</code> and <code>KEY_RELEASED</code> events
are not intended for reporting of character input.  Therefore,
the values returned by this method are guaranteed to be
meaningful only for <code>KEY_TYPED</code> events.

@return the Unicode character defined for this key event.
        If no valid Unicode character exists for this key event,
        <code>CHAR_UNDEFINED</code> is returned.
"
      end

      operation 6444162 "setKeyChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "keyChar" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the keyChar value to indicate a logical character.

@param keyChar a char corresponding to to the combination of keystrokes
               that make up this event.
"
      end

      operation 6444290 "setModifiers"
	public explicit_return_type "void"
	nparams 1
	  param in name "modifiers" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Set the modifiers to indicate additional keys that were held down
(e.g. shift, ctrl, alt, meta) defined as part of InputEvent.
<p>
NOTE:  use of this method is not recommended, because many AWT
implementations do not recognize modifier changes.  This is
especially true for <code>KEY_TYPED</code> events where the shift
modifier is changed.

@param modifiers an integer combination of the modifier constants.
@see InputEvent
@deprecated as of JDK1.1.4
"
      end

      operation 6444418 "getKeyLocation"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the location of the key that originated this key event.

Some keys occur more than once on a keyboard, e.g. the left and
right shift keys.  Additionally, some keys occur on the numeric
keypad.  This provides a way of distinguishing such keys.

@return the location of the key that was pressed or released.
        Always returns <code>KEY_LOCATION_UNKNOWN</code> for
        <code>KEY_TYPED</code> events.
@since 1.4
"
      end

      operation 6444546 "getKeyText"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "keyCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String describing the keyCode, such as \"HOME\", \"F1\" or \"A\".
These strings can be localized by changing the awt.properties file.

@return a string containing a text description for a physical key,
        identified by its keyCode
"
      end

      operation 6444674 "getKeyModifiersText"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "modifiers" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> describing the modifier key(s),
such as \"Shift\", or \"Ctrl+Shift\".  These strings can be
localized by changing the <code>awt.properties</code> file.
<p>
Note that <code>InputEvent.ALT_MASK</code> and
<code>InputEvent.BUTTON2_MASK</code> have the same value,
so the string \"Alt\" is returned for both modifiers.  Likewise,
<code>InputEvent.META_MASK</code> and
<code>InputEvent.BUTTON3_MASK</code> have the same value,
so the string \"Meta\" is returned for both modifiers.

@return string a text description of the combination of modifier
               keys that were held down during the event
@see InputEvent#getModifiersExText(int)
"
      end

      operation 6444802 "isActionKey"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the key in this event is an \"action\" key.
Typically an action key does not fire a unicode character and is
not a modifier key.

@return <code>true</code> if the key is an \"action\" key,
        <code>false</code> otherwise
"
      end

      operation 6444930 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter string identifying this event.
This method is useful for event logging and for debugging.

@return a string identifying the event and its attributes
"
      end

      operation 6445058 "getExtendedKeyCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an extended key code for the event.
The extended key code is a unique id assigned to  a key on the keyboard
just like {@code keyCode}. However, unlike {@code keyCode}, this value depends on the
current keyboard layout. For instance, pressing the left topmost letter key
in a common English layout produces the same value as {@code keyCode}, {@code VK_Q}.
Pressing the same key in a regular Russian layout gives another code, unique for the
letter \"Cyrillic I short\".

@since 1.7

"
      end

      operation 6445186 "getExtendedKeyCodeForChar"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an extended key code for a unicode character.

@return for a unicode character with a corresponding {@code VK_} constant -- this
  {@code VK_} constant; for a character appearing on the primary
  level of a known keyboard layout -- a unique integer.
  If a character does not appear on the primary level of a known keyboard,
  {@code VK_UNDEFINED} is returned.

@since 1.7

"
      end

      operation 6445314 "setNewModifiers"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets new modifiers by the old ones. The key modifiers
override overlaping mouse modifiers.
"
      end

      operation 6445442 "setOldModifiers"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets old modifiers by the new ones.
"
      end

      operation 6445570 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets new modifiers by the old ones. The key modifiers
override overlaping mouse modifiers.
@serial
"
      end
    end

    class 346626 "MouseEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An event which indicates that a mouse action occurred in a component.
A mouse action is considered to occur in a particular component if and only
if the mouse cursor is over the unobscured part of the component's bounds
when the action happens.
For lightweight components, such as Swing's components, mouse events
are only dispatched to the component if the mouse event type has been
enabled on the component. A mouse event type is enabled by adding the
appropriate mouse-based {@code EventListener} to the component
({@link MouseListener} or {@link MouseMotionListener}), or by invoking
{@link Component#enableEvents(long)} with the appropriate mask parameter
({@code AWTEvent.MOUSE_EVENT_MASK} or {@code AWTEvent.MOUSE_MOTION_EVENT_MASK}).
If the mouse event type has not been enabled on the component, the
corresponding mouse events are dispatched to the first ancestor that
has enabled the mouse event type.
<p>
For example, if a {@code MouseListener} has been added to a component, or
{@code enableEvents(AWTEvent.MOUSE_EVENT_MASK)} has been invoked, then all
the events defined by {@code MouseListener} are dispatched to the component.
On the other hand, if a {@code MouseMotionListener} has not been added and
{@code enableEvents} has not been invoked with
{@code AWTEvent.MOUSE_MOTION_EVENT_MASK}, then mouse motion events are not
dispatched to the component. Instead the mouse motion events are
dispatched to the first ancestors that has enabled mouse motion
events.
<P>
This low-level event is generated by a component object for:
<ul>
<li>Mouse Events
    <ul>
    <li>a mouse button is pressed
    <li>a mouse button is released
    <li>a mouse button is clicked (pressed and released)
    <li>the mouse cursor enters the unobscured part of component's geometry
    <li>the mouse cursor exits the unobscured part of component's geometry
    </ul>
<li> Mouse Motion Events
    <ul>
    <li>the mouse is moved
    <li>the mouse is dragged
    </ul>
</ul>
<P>
A <code>MouseEvent</code> object is passed to every
<code>MouseListener</code>
or <code>MouseAdapter</code> object which is registered to receive
the \"interesting\" mouse events using the component's
<code>addMouseListener</code> method.
(<code>MouseAdapter</code> objects implement the
<code>MouseListener</code> interface.) Each such listener object
gets a <code>MouseEvent</code> containing the mouse event.
<P>
A <code>MouseEvent</code> object is also passed to every
<code>MouseMotionListener</code> or
<code>MouseMotionAdapter</code> object which is registered to receive
mouse motion events using the component's
<code>addMouseMotionListener</code>
method. (<code>MouseMotionAdapter</code> objects implement the
<code>MouseMotionListener</code> interface.) Each such listener object
gets a <code>MouseEvent</code> containing the mouse motion event.
<P>
When a mouse button is clicked, events are generated and sent to the
registered <code>MouseListener</code>s.
The state of modal keys can be retrieved using {@link InputEvent#getModifiers}
and {@link InputEvent#getModifiersEx}.
The button mask returned by {@link InputEvent#getModifiers} reflects
only the button that changed state, not the current state of all buttons.
(Note: Due to overlap in the values of ALT_MASK/BUTTON2_MASK and
META_MASK/BUTTON3_MASK, this is not always true for mouse events involving
modifier keys).
To get the state of all buttons and modifier keys, use
{@link InputEvent#getModifiersEx}.
The button which has changed state is returned by {@link MouseEvent#getButton}
<P>
For example, if the first mouse button is pressed, events are sent in the
following order:
<PRE>
   <b   >id           </b   >   <b   >modifiers   </b   > <b   >button </b   >
   <code>MOUSE_PRESSED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
   <code>MOUSE_RELEASED</code>: <code>BUTTON1_MASK</code> <code>BUTTON1</code>
   <code>MOUSE_CLICKED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
</PRE>
When multiple mouse buttons are pressed, each press, release, and click
results in a separate event.
<P>
For example, if the user presses <b>button 1</b> followed by
<b>button 2</b>, and then releases them in the same order,
the following sequence of events is generated:
<PRE>
   <b   >id           </b   >   <b   >modifiers   </b   > <b   >button </b   >
   <code>MOUSE_PRESSED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
   <code>MOUSE_PRESSED</code>:  <code>BUTTON2_MASK</code> <code>BUTTON2</code>
   <code>MOUSE_RELEASED</code>: <code>BUTTON1_MASK</code> <code>BUTTON1</code>
   <code>MOUSE_CLICKED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
   <code>MOUSE_RELEASED</code>: <code>BUTTON2_MASK</code> <code>BUTTON2</code>
   <code>MOUSE_CLICKED</code>:  <code>BUTTON2_MASK</code> <code>BUTTON2</code>
</PRE>
If <b>button 2</b> is released first, the
<code>MOUSE_RELEASED</code>/<code>MOUSE_CLICKED</code> pair
for <code>BUTTON2_MASK</code> arrives first,
followed by the pair for <code>BUTTON1_MASK</code>.
<p>
Some extra mouse buttons are added to extend the standard set of buttons
represented by the following constants:{@code BUTTON1}, {@code BUTTON2}, and {@code BUTTON3}.
Extra buttons have no assigned {@code BUTTONx}
constants as well as their button masks have no assigned {@code BUTTONx_DOWN_MASK}
constants. Nevertheless, ordinal numbers starting from 4 may be
used as button numbers (button ids). Values obtained by the
{@link InputEvent#getMaskForButton(int) getMaskForButton(button)} method may be used
as button masks.
<p>
{@code MOUSE_DRAGGED} events are delivered to the {@code Component}
in which the mouse button was pressed until the mouse button is released
(regardless of whether the mouse position is within the bounds of the
{@code Component}).  Due to platform-dependent Drag&amp;Drop implementations,
{@code MOUSE_DRAGGED} events may not be delivered during a native
Drag&amp;Drop operation.

In a multi-screen environment mouse drag events are delivered to the
<code>Component</code> even if the mouse position is outside the bounds of the
<code>GraphicsConfiguration</code> associated with that
<code>Component</code>. However, the reported position for mouse drag events
in this case may differ from the actual mouse position:
<ul>
<li>In a multi-screen environment without a virtual device:
<br>
The reported coordinates for mouse drag events are clipped to fit within the
bounds of the <code>GraphicsConfiguration</code> associated with
the <code>Component</code>.
<li>In a multi-screen environment with a virtual device:
<br>
The reported coordinates for mouse drag events are clipped to fit within the
bounds of the virtual device associated with the <code>Component</code>.
</ul>
<p>
An unspecified behavior will be caused if the {@code id} parameter
of any particular {@code MouseEvent} instance is not
in the range from {@code MOUSE_FIRST} to {@code MOUSE_LAST}-1
({@code MOUSE_WHEEL} is not acceptable).

@author Carl Quinn

@see MouseAdapter
@see MouseListener
@see MouseMotionAdapter
@see MouseMotionListener
@see MouseWheelListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/mouselistener.html\">Tutorial: Writing a Mouse Listener</a>
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/mousemotionlistener.html\">Tutorial: Writing a Mouse Motion Listener</a>

@since 1.1
"
      classrelation 3009026 // <generalisation>
	relation 3009026 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3009026 // <generalisation>
	  b parent class_ref 352386 // InputEvent
      end

      attribute 1505538 "MOUSE_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 500"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The first number in the range of ids used for mouse events.

"
      end

      attribute 1505666 "MOUSE_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 507"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The last number in the range of ids used for mouse events.

"
      end

      attribute 1505794 "MOUSE_CLICKED"
	class_attribute const_attribute public explicit_type "int"
	init_value " MOUSE_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The \"mouse clicked\" event. This <code>MouseEvent</code>
occurs when a mouse button is pressed and released.

"
      end

      attribute 1505922 "MOUSE_PRESSED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 + MOUSE_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The \"mouse pressed\" event. This <code>MouseEvent</code>
occurs when a mouse button is pushed down.

Event.MOUSE_DOWN"
      end

      attribute 1506050 "MOUSE_RELEASED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2 + MOUSE_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The \"mouse released\" event. This <code>MouseEvent</code>
occurs when a mouse button is let up.

Event.MOUSE_UP"
      end

      attribute 1506178 "MOUSE_MOVED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3 + MOUSE_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The \"mouse moved\" event. This <code>MouseEvent</code>
occurs when the mouse position changes.

Event.MOUSE_MOVE"
      end

      attribute 1506306 "MOUSE_ENTERED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4 + MOUSE_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The \"mouse entered\" event. This <code>MouseEvent</code>
occurs when the mouse cursor enters the unobscured part of component's
geometry.

Event.MOUSE_ENTER"
      end

      attribute 1506434 "MOUSE_EXITED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5 + MOUSE_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The \"mouse exited\" event. This <code>MouseEvent</code>
occurs when the mouse cursor exits the unobscured part of component's
geometry.

Event.MOUSE_EXIT"
      end

      attribute 1506562 "MOUSE_DRAGGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6 + MOUSE_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The \"mouse dragged\" event. This <code>MouseEvent</code>
occurs when the mouse position changes while a mouse button is pressed.

Event.MOUSE_DRAG"
      end

      attribute 1506690 "MOUSE_WHEEL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7 + MOUSE_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The \"mouse wheel\" event.  This is the only <code>MouseWheelEvent</code>.
It occurs when a mouse equipped with a wheel has its wheel rotated.
@since 1.4

"
      end

      attribute 1506818 "NOBUTTON"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates no mouse buttons; used by {@link #getButton}.
@since 1.4

"
      end

      attribute 1506946 "BUTTON1"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates mouse button #1; used by {@link #getButton}.
@since 1.4

"
      end

      attribute 1507074 "BUTTON2"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates mouse button #2; used by {@link #getButton}.
@since 1.4

"
      end

      attribute 1507202 "BUTTON3"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates mouse button #3; used by {@link #getButton}.
@since 1.4

"
      end

      attribute 1507330 "x"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The mouse event's x coordinate.
The x value is relative to the component that fired the event.

@serial
@see #getX()

"
      end

      attribute 1507458 "y"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The mouse event's y coordinate.
The y value is relative to the component that fired the event.

@serial
@see #getY()

"
      end

      attribute 1507586 "xAbs"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The mouse event's x absolute coordinate.
In a virtual device multi-screen environment in which the
desktop area could span multiple physical screen devices,
this coordinate is relative to the virtual coordinate system.
Otherwise, this coordinate is relative to the coordinate system
associated with the Component's GraphicsConfiguration.

@serial

"
      end

      attribute 1507714 "yAbs"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The mouse event's y absolute coordinate.
In a virtual device multi-screen environment in which the
desktop area could span multiple physical screen devices,
this coordinate is relative to the virtual coordinate system.
Otherwise, this coordinate is relative to the coordinate system
associated with the Component's GraphicsConfiguration.

@serial

"
      end

      attribute 1507842 "clickCount"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates the number of quick consecutive clicks of
a mouse button.
clickCount will be valid for only three mouse events :<BR>
<code>MOUSE_CLICKED</code>,
<code>MOUSE_PRESSED</code> and
<code>MOUSE_RELEASED</code>.
For the above, the <code>clickCount</code> will be at least 1.
For all other events the count will be 0.

@serial
@see #getClickCount()

"
      end

      attribute 1507970 "button"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates which, if any, of the mouse buttons has changed state.

The valid values are ranged from 0 to the value returned by the
{@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()} method.
This range already includes constants {@code NOBUTTON}, {@code BUTTON1},
{@code BUTTON2}, and {@code BUTTON3}
if these buttons are present. So it is allowed to use these constants too.
For example, for a mouse with two buttons this field may contain the following values:
<ul>
<li> 0 ({@code NOBUTTON})
<li> 1 ({@code BUTTON1})
<li> 2 ({@code BUTTON2})
</ul>
If a mouse has 5 buttons, this field may contain the following values:
<ul>
<li> 0 ({@code NOBUTTON})
<li> 1 ({@code BUTTON1})
<li> 2 ({@code BUTTON2})
<li> 3 ({@code BUTTON3})
<li> 4
<li> 5
</ul>
If support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled()} disabled by Java
then the field may not contain the value larger than {@code BUTTON3}.
@serial
@see #getButton()
@see java.awt.Toolkit#areExtraMouseButtonsEnabled()

"
      end

      attribute 1508098 "popupTrigger"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A property used to indicate whether a Popup Menu
should appear  with a certain gestures.
If <code>popupTrigger</code> = <code>false</code>,
no popup menu should appear.  If it is <code>true</code>
then a popup menu should appear.

@serial
@see java.awt.PopupMenu
@see #isPopupTrigger()

"
      end

      attribute 1508226 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -991214153494842848L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.1 serialVersionUID

"
      end

      attribute 1508354 "cachedNumberOfButtons"
	class_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A number of buttons available on the mouse at the {@code Toolkit} machinery startup.

"
      end

      extra_member 153090 "initialization"
	
	cpp "" ""
	java "  static {
        /* ensure that the necessary native libraries are loaded */
        NativeLibLoader.loadLibraries();
        if (!GraphicsEnvironment.isHeadless()) {
            initIDs();
        }
        final Toolkit tk = Toolkit.getDefaultToolkit();
        if (tk instanceof SunToolkit) {
            cachedNumberOfButtons = ((SunToolkit)tk).getNumberOfButtons();
        } else {
            //It's expected that some toolkits (Headless,
            //whatever besides SunToolkit) could also operate.
            cachedNumberOfButtons = 3;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6445698 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Initialize JNI field and method IDs for fields that may be
 accessed from C.
"
      end

      operation 6445826 "getLocationOnScreen"
	public return_type class_ref 323714 // Point
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute x, y position of the event.
In a virtual device multi-screen environment in which the
desktop area could span multiple physical screen devices,
these coordinates are relative to the virtual coordinate system.
Otherwise, these coordinates are relative to the coordinate system
associated with the Component's GraphicsConfiguration.

@return a <code>Point</code> object containing the absolute  x
 and y coordinates.

@see java.awt.GraphicsConfiguration
@since 1.6
"
      end

      operation 6445954 "getXOnScreen"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute horizontal x position of the event.
In a virtual device multi-screen environment in which the
desktop area could span multiple physical screen devices,
this coordinate is relative to the virtual coordinate system.
Otherwise, this coordinate is relative to the coordinate system
associated with the Component's GraphicsConfiguration.

@return x  an integer indicating absolute horizontal position.

@see java.awt.GraphicsConfiguration
@since 1.6
"
      end

      operation 6446082 "getYOnScreen"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute vertical y position of the event.
In a virtual device multi-screen environment in which the
desktop area could span multiple physical screen devices,
this coordinate is relative to the virtual coordinate system.
Otherwise, this coordinate is relative to the coordinate system
associated with the Component's GraphicsConfiguration.

@return y  an integer indicating absolute vertical position.

@see java.awt.GraphicsConfiguration
@since 1.6
"
      end

      operation 6446210 "MouseEvent"
	public explicit_return_type ""
	nparams 9
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param in name "when" explicit_type "long"
	  param in name "modifiers" explicit_type "int"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "clickCount" explicit_type "int"
	  param inout name "popupTrigger" explicit_type "boolean"
	  param in name "button" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>MouseEvent</code> object with the
specified source component,
type, time, modifiers, coordinates, click count, popupTrigger flag,
and button number.
<p>
Creating an invalid event (such
as by using more than one of the old _MASKs, or modifier/button
values which don't match) results in unspecified behavior.
An invocation of the form
<tt>MouseEvent(source, id, when, modifiers, x, y, clickCount, popupTrigger, button)</tt>
behaves in exactly the same way as the invocation
<tt> {@link #MouseEvent(Component, int, long, int, int, int,
int, int, int, boolean, int) MouseEvent}(source, id, when, modifiers,
x, y, xAbs, yAbs, clickCount, popupTrigger, button)</tt>
where xAbs and yAbs defines as source's location on screen plus
relative coordinates x and y.
xAbs and yAbs are set to zero if the source is not showing.
This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source       The <code>Component</code> that originated the event
@param id              An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link MouseEvent}
@param when         A long integer that gives the time the event occurred.
                    Passing negative or zero value
                    is not recommended
@param modifiers    a modifier mask describing the modifier keys and mouse
                    buttons (for example, shift, ctrl, alt, and meta) that
                    are down during the event.
                    Only extended modifiers are allowed to be used as a
                    value for this parameter (see the {@link InputEvent#getModifiersEx}
                    class for the description of extended modifiers).
                    Passing negative parameter
                    is not recommended.
                    Zero value means that no modifiers were passed
@param x            The horizontal x coordinate for the mouse location.
                      It is allowed to pass negative values
@param y            The vertical y coordinate for the mouse location.
                      It is allowed to pass negative values
@param clickCount   The number of mouse clicks associated with event.
                      Passing negative value
                      is not recommended
@param popupTrigger A boolean that equals {@code true} if this event
                    is a trigger for a popup menu
@param button       An integer that indicates, which of the mouse buttons has
                    changed its state.
The following rules are applied to this parameter:
<ul>
<li>If support for the extended mouse buttons is
{@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java
then it is allowed to create {@code MouseEvent} objects only with the standard buttons:
{@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, and
{@code BUTTON3}.
<li> If support for the extended mouse buttons is
{@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java
then it is allowed to create {@code MouseEvent} objects with
the standard buttons.
In case the support for extended mouse buttons is
{@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java, then
in addition to the standard buttons, {@code MouseEvent} objects can be created
using buttons from the range starting from 4 to
{@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}
if the mouse has more than three buttons.
</ul>
@throws IllegalArgumentException if {@code button} is less then zero
@throws IllegalArgumentException if <code>source</code> is null
@throws IllegalArgumentException if {@code button} is greater then BUTTON3 and the support for extended mouse buttons is
                                 {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java
@throws IllegalArgumentException if {@code button} is greater then the
                                 {@link java.awt.MouseInfo#getNumberOfButtons() current number of buttons} and the support
                                 for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled}
                                 by Java
@throws IllegalArgumentException if an invalid <code>button</code>
           value is passed in
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
@see #getWhen()
@see #getModifiers()
@see #getX()
@see #getY()
@see #getClickCount()
@see #isPopupTrigger()
@see #getButton()
@since 1.4
"
      end

      operation 6446338 "MouseEvent"
	public explicit_return_type ""
	nparams 8
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param in name "when" explicit_type "long"
	  param in name "modifiers" explicit_type "int"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "clickCount" explicit_type "int"
	  param inout name "popupTrigger" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>MouseEvent</code> object with the
specified source component,
type, modifiers, coordinates, click count, and popupTrigger flag.
An invocation of the form
<tt>MouseEvent(source, id, when, modifiers, x, y, clickCount, popupTrigger)</tt>
behaves in exactly the same way as the invocation
<tt> {@link #MouseEvent(Component, int, long, int, int, int,
int, int, int, boolean, int) MouseEvent}(source, id, when, modifiers,
x, y, xAbs, yAbs, clickCount, popupTrigger, MouseEvent.NOBUTTON)</tt>
where xAbs and yAbs defines as source's location on screen plus
relative coordinates x and y.
xAbs and yAbs are set to zero if the source is not showing.
This method throws an <code>IllegalArgumentException</code>
if <code>source</code> is <code>null</code>.

@param source       The <code>Component</code> that originated the event
@param id              An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link MouseEvent}
@param when         A long integer that gives the time the event occurred.
                    Passing negative or zero value
                    is not recommended
@param modifiers    a modifier mask describing the modifier keys and mouse
                    buttons (for example, shift, ctrl, alt, and meta) that
                    are down during the event.
                    Only extended modifiers are allowed to be used as a
                    value for this parameter (see the {@link InputEvent#getModifiersEx}
                    class for the description of extended modifiers).
                    Passing negative parameter
                    is not recommended.
                    Zero value means that no modifiers were passed
@param x            The horizontal x coordinate for the mouse location.
                      It is allowed to pass negative values
@param y            The vertical y coordinate for the mouse location.
                      It is allowed to pass negative values
@param clickCount   The number of mouse clicks associated with event.
                      Passing negative value
                      is not recommended
@param popupTrigger A boolean that equals {@code true} if this event
                    is a trigger for a popup menu
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
@see #getWhen()
@see #getModifiers()
@see #getX()
@see #getY()
@see #getClickCount()
@see #isPopupTrigger()
"
      end

      attribute 1508482 "shouldExcludeButtonFromExtModifiers"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " if the button is an extra button and it is released or clicked then in Xsystem its state
is not modified. Exclude this button number from ExtModifiers mask.
"
      end

      operation 6446466 "getModifiersEx"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 6446594 "MouseEvent"
	public explicit_return_type ""
	nparams 11
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param in name "when" explicit_type "long"
	  param in name "modifiers" explicit_type "int"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "xAbs" explicit_type "int"
	  param in name "yAbs" explicit_type "int"
	  param in name "clickCount" explicit_type "int"
	  param inout name "popupTrigger" explicit_type "boolean"
	  param in name "button" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>MouseEvent</code> object with the
specified source component,
type, time, modifiers, coordinates, absolute coordinates, click count, popupTrigger flag,
and button number.
<p>
Creating an invalid event (such
as by using more than one of the old _MASKs, or modifier/button
values which don't match) results in unspecified behavior.
Even if inconsistent values for relative and absolute coordinates are
passed to the constructor, the mouse event instance is still
created and no exception is thrown.
This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source       The <code>Component</code> that originated the event
@param id              An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link MouseEvent}
@param when         A long integer that gives the time the event occurred.
                    Passing negative or zero value
                    is not recommended
@param modifiers    a modifier mask describing the modifier keys and mouse
                    buttons (for example, shift, ctrl, alt, and meta) that
                    are down during the event.
                    Only extended modifiers are allowed to be used as a
                    value for this parameter (see the {@link InputEvent#getModifiersEx}
                    class for the description of extended modifiers).
                    Passing negative parameter
                    is not recommended.
                    Zero value means that no modifiers were passed
@param x            The horizontal x coordinate for the mouse location.
                      It is allowed to pass negative values
@param y            The vertical y coordinate for the mouse location.
                      It is allowed to pass negative values
@param xAbs           The absolute horizontal x coordinate for the mouse location
                      It is allowed to pass negative values
@param yAbs           The absolute vertical y coordinate for the mouse location
                      It is allowed to pass negative values
@param clickCount   The number of mouse clicks associated with event.
                      Passing negative value
                      is not recommended
@param popupTrigger A boolean that equals {@code true} if this event
                    is a trigger for a popup menu
@param button       An integer that indicates, which of the mouse buttons has
                    changed its state.
The following rules are applied to this parameter:
<ul>
<li>If support for the extended mouse buttons is
{@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java
then it is allowed to create {@code MouseEvent} objects only with the standard buttons:
{@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, and
{@code BUTTON3}.
<li> If support for the extended mouse buttons is
{@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java
then it is allowed to create {@code MouseEvent} objects with
the standard buttons.
In case the support for extended mouse buttons is
{@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java, then
in addition to the standard buttons, {@code MouseEvent} objects can be created
using buttons from the range starting from 4 to
{@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}
if the mouse has more than three buttons.
</ul>
@throws IllegalArgumentException if {@code button} is less then zero
@throws IllegalArgumentException if <code>source</code> is null
@throws IllegalArgumentException if {@code button} is greater then BUTTON3 and the support for extended mouse buttons is
                                 {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java
@throws IllegalArgumentException if {@code button} is greater then the
                                 {@link java.awt.MouseInfo#getNumberOfButtons() current number of buttons} and the support
                                 for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled}
                                 by Java
@throws IllegalArgumentException if an invalid <code>button</code>
           value is passed in
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
@see #getWhen()
@see #getModifiers()
@see #getX()
@see #getY()
@see #getXOnScreen()
@see #getYOnScreen()
@see #getClickCount()
@see #isPopupTrigger()
@see #getButton()
@see #button
@see Toolkit#areExtraMouseButtonsEnabled()
@see java.awt.MouseInfo#getNumberOfButtons()
@see InputEvent#getMaskForButton(int)
@since 1.6
"
      end

      operation 6446722 "getX"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the horizontal x position of the event relative to the
source component.

@return x  an integer indicating horizontal position relative to
           the component
"
      end

      operation 6446850 "getY"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the vertical y position of the event relative to the
source component.

@return y  an integer indicating vertical position relative to
           the component
"
      end

      operation 6446978 "getPoint"
	public return_type class_ref 323714 // Point
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the x,y position of the event relative to the source component.

@return a <code>Point</code> object containing the x and y coordinates
        relative to the source component

"
      end

      operation 6447106 "translatePoint"
	public explicit_return_type "void"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the event's coordinates to a new position
by adding specified <code>x</code> (horizontal) and <code>y</code>
(vertical) offsets.

@param x the horizontal x value to add to the current x
         coordinate position
@param y the vertical y value to add to the current y
coordinate position
"
      end

      operation 6447234 "getClickCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of mouse clicks associated with this event.

@return integer value for the number of clicks
"
      end

      operation 6447362 "getButton"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns which, if any, of the mouse buttons has changed state.
The returned value is ranged
from 0 to the {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}
value.
The returned value includes at least the following constants:
<ul>
<li> {@code NOBUTTON}
<li> {@code BUTTON1}
<li> {@code BUTTON2}
<li> {@code BUTTON3}
</ul>
It is allowed to use those constants to compare with the returned button number in the application.
For example,
<pre>
if (anEvent.getButton() == MouseEvent.BUTTON1) {
</pre>
In particular, for a mouse with one, two, or three buttons this method may return the following values:
<ul>
<li> 0 ({@code NOBUTTON})
<li> 1 ({@code BUTTON1})
<li> 2 ({@code BUTTON2})
<li> 3 ({@code BUTTON3})
</ul>
Button numbers greater then {@code BUTTON3} have no constant identifier. So if a mouse with five buttons is
installed, this method may return the following values:
<ul>
<li> 0 ({@code NOBUTTON})
<li> 1 ({@code BUTTON1})
<li> 2 ({@code BUTTON2})
<li> 3 ({@code BUTTON3})
<li> 4
<li> 5
</ul>
<p>
Note: If support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java
then the AWT event subsystem does not produce mouse events for the extended mouse
buttons. So it is not expected that this method returns anything except {@code NOBUTTON}, {@code BUTTON1},
{@code BUTTON2}, {@code BUTTON3}.

@return one of the values from 0 to {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}
        if support for the extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java.
        That range includes {@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, {@code BUTTON3};
        <br>
        {@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2} or {@code BUTTON3}
        if support for the extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java
@since 1.4
@see Toolkit#areExtraMouseButtonsEnabled()
@see java.awt.MouseInfo#getNumberOfButtons()
@see #MouseEvent(Component, int, long, int, int, int, int, int, int, boolean, int)
@see InputEvent#getMaskForButton(int)
"
      end

      operation 6447490 "isPopupTrigger"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not this mouse event is the popup menu
trigger event for the platform.
<p><b>Note</b>: Popup menus are triggered differently
on different systems. Therefore, <code>isPopupTrigger</code>
should be checked in both <code>mousePressed</code>
and <code>mouseReleased</code>
for proper cross-platform functionality.

@return boolean, true if this event is the popup menu trigger
        for this platform
"
      end

      operation 6447618 "getMouseModifiersText"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "modifiers" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> instance describing the modifier keys and
mouse buttons that were down during the event, such as \"Shift\",
or \"Ctrl+Shift\". These strings can be localized by changing
the <code>awt.properties</code> file.
<p>
Note that the <code>InputEvent.ALT_MASK</code> and
<code>InputEvent.BUTTON2_MASK</code> have equal values,
so the \"Alt\" string is returned for both modifiers.  Likewise,
the <code>InputEvent.META_MASK</code> and
<code>InputEvent.BUTTON3_MASK</code> have equal values,
so the \"Meta\" string is returned for both modifiers.
<p>
Note that passing negative parameter is incorrect,
and will cause the returning an unspecified string.
Zero parameter means that no modifiers were passed and will
cause the returning an empty string.
<p>
@param modifiers A modifier mask describing the modifier keys and
                 mouse buttons that were down during the event
@return string   string text description of the combination of modifier
                 keys and mouse buttons that were down during the event
@see InputEvent#getModifiersExText(int)
@since 1.4
"
      end

      operation 6447746 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter string identifying this event.
This method is useful for event-logging and for debugging.

@return a string identifying the event and its attributes
"
      end

      operation 6447874 "setNewModifiers"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets new modifiers by the old ones.
Also sets button.
"
      end

      operation 6448002 "setOldModifiers"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets old modifiers by the new ones.
"
      end

      operation 6448130 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets new modifiers by the old ones.
@serial
"
      end
    end

    class 346754 "InputMethodEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Input method events contain information about text that is being
composed using an input method. Whenever the text changes, the
input method sends an event. If the text component that's currently
using the input method is an active client, the event is dispatched
to that component. Otherwise, it is dispatched to a separate
composition window.

<p>
The text included with the input method event consists of two parts:
committed text and composed text. Either part may be empty. The two
parts together replace any uncommitted composed text sent in previous events,
or the currently selected committed text.
Committed text should be integrated into the text component's persistent
data, it will not be sent again. Composed text may be sent repeatedly,
with changes to reflect the user's editing operations. Committed text
always precedes composed text.

@author JavaSoft Asia/Pacific
@since 1.2
"
      classrelation 3007106 // <generalisation>
	relation 3007106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3007106 // <generalisation>
	  b parent class_ref 339202 // AWTEvent
      end

      attribute 1476098 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4727190874778922661L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serial Version ID.

"
      end

      attribute 1476226 "INPUT_METHOD_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Marks the first integer id for the range of input method event ids.

"
      end

      attribute 1476354 "INPUT_METHOD_TEXT_CHANGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " INPUT_METHOD_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The event type indicating changed input method text. This event is
generated by input methods while processing input.

"
      end

      attribute 1476482 "CARET_POSITION_CHANGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " INPUT_METHOD_FIRST + 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The event type indicating a changed insertion point in input method text.
This event is
generated by input methods while processing input if only the caret changed.

"
      end

      attribute 1476610 "INPUT_METHOD_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " INPUT_METHOD_FIRST + 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Marks the last integer id for the range of input method event ids.

"
      end

      attribute 1476738 "when"
	package explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The time stamp that indicates when the event was created.

@serial
@see #getWhen
@since 1.4

"
      end

      classrelation 3007234 // text (<unidirectional association>)
	relation 3007234 --->
	  a role_name "text" private
	    comment " Text object
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3007234 // text (<unidirectional association>)
	  b parent class_ref 472962 // AttributedCharacterIterator
      end

      attribute 1476866 "committedCharacterCount"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3007362 // caret (<unidirectional association>)
	relation 3007362 --->
	  a role_name "caret" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3007362 // caret (<unidirectional association>)
	  b parent class_ref 886914 // TextHitInfo
      end

      classrelation 3007490 // visiblePosition (<unidirectional association>)
	relation 3007490 --->
	  a role_name "visiblePosition" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3007490 // visiblePosition (<unidirectional association>)
	  b parent class_ref 886914 // TextHitInfo
      end

      operation 6439298 "InputMethodEvent"
	public explicit_return_type ""
	nparams 7
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param in name "when" explicit_type "long"
	  param inout name "text" type class_ref 472962 // AttributedCharacterIterator
	  param in name "committedCharacterCount" explicit_type "int"
	  param inout name "caret" type class_ref 886914 // TextHitInfo
	  param inout name "visiblePosition" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InputMethodEvent</code> with the specified
source component, type, time, text, caret, and visiblePosition.
<p>
The offsets of caret and visiblePosition are relative to the current
composed text; that is, the composed text within <code>text</code>
if this is an <code>INPUT_METHOD_TEXT_CHANGED</code> event,
the composed text within the <code>text</code> of the
preceding <code>INPUT_METHOD_TEXT_CHANGED</code> event otherwise.
<p>Note that passing in an invalid <code>id</code> results in
unspecified behavior. This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source the object where the event originated
@param id the event type
@param when a long integer that specifies the time the event occurred
@param text the combined committed and composed text,
     committed text first; must be <code>null</code>
     when the event type is <code>CARET_POSITION_CHANGED</code>;
     may be <code>null</code> for
     <code>INPUT_METHOD_TEXT_CHANGED</code> if there's no
     committed or composed text
@param committedCharacterCount the number of committed
     characters in the text
@param caret the caret (a.k.a. insertion point);
     <code>null</code> if there's no caret within current
     composed text
@param visiblePosition the position that's most important
     to be visible; <code>null</code> if there's no
     recommendation for a visible position within current
     composed text
@throws IllegalArgumentException if <code>id</code> is not
     in the range
     <code>INPUT_METHOD_FIRST</code>..<code>INPUT_METHOD_LAST</code>;
     or if id is <code>CARET_POSITION_CHANGED</code> and
     <code>text</code> is not <code>null</code>;
     or if <code>committedCharacterCount</code> is not in the range
     <code>0</code>..<code>(text.getEndIndex() - text.getBeginIndex())</code>
@throws IllegalArgumentException if <code>source</code> is null

@since 1.4
"
      end

      operation 6439426 "InputMethodEvent"
	public explicit_return_type ""
	nparams 6
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param inout name "text" type class_ref 472962 // AttributedCharacterIterator
	  param in name "committedCharacterCount" explicit_type "int"
	  param inout name "caret" type class_ref 886914 // TextHitInfo
	  param inout name "visiblePosition" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InputMethodEvent</code> with the specified
source component, type, text, caret, and visiblePosition.
<p>
The offsets of caret and visiblePosition are relative to the current
composed text; that is, the composed text within <code>text</code>
if this is an <code>INPUT_METHOD_TEXT_CHANGED</code> event,
the composed text within the <code>text</code> of the
preceding <code>INPUT_METHOD_TEXT_CHANGED</code> event otherwise.
The time stamp for this event is initialized by invoking
{@link java.awt.EventQueue#getMostRecentEventTime()}.
<p>Note that passing in an invalid <code>id</code> results in
unspecified behavior. This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source the object where the event originated
@param id the event type
@param text the combined committed and composed text,
     committed text first; must be <code>null</code>
     when the event type is <code>CARET_POSITION_CHANGED</code>;
     may be <code>null</code> for
     <code>INPUT_METHOD_TEXT_CHANGED</code> if there's no
     committed or composed text
@param committedCharacterCount the number of committed
     characters in the text
@param caret the caret (a.k.a. insertion point);
     <code>null</code> if there's no caret within current
     composed text
@param visiblePosition the position that's most important
     to be visible; <code>null</code> if there's no
     recommendation for a visible position within current
     composed text
@throws IllegalArgumentException if <code>id</code> is not
     in the range
     <code>INPUT_METHOD_FIRST</code>..<code>INPUT_METHOD_LAST</code>;
     or if id is <code>CARET_POSITION_CHANGED</code> and
     <code>text</code> is not <code>null</code>;
     or if <code>committedCharacterCount</code> is not in the range
     <code>0</code>..<code>(text.getEndIndex() - text.getBeginIndex())</code>
@throws IllegalArgumentException if <code>source</code> is null
"
      end

      operation 6439554 "InputMethodEvent"
	public explicit_return_type ""
	nparams 4
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param inout name "caret" type class_ref 886914 // TextHitInfo
	  param inout name "visiblePosition" type class_ref 886914 // TextHitInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InputMethodEvent</code> with the
specified source component, type, caret, and visiblePosition.
The text is set to <code>null</code>,
<code>committedCharacterCount</code> to 0.
<p>
The offsets of <code>caret</code> and <code>visiblePosition</code>
are relative to the current composed text; that is,
the composed text within the <code>text</code> of the
preceding <code>INPUT_METHOD_TEXT_CHANGED</code> event if the
event being constructed as a <code>CARET_POSITION_CHANGED</code> event.
For an <code>INPUT_METHOD_TEXT_CHANGED</code> event without text,
<code>caret</code> and <code>visiblePosition</code> must be
<code>null</code>.
The time stamp for this event is initialized by invoking
{@link java.awt.EventQueue#getMostRecentEventTime()}.
<p>Note that passing in an invalid <code>id</code> results in
unspecified behavior. This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source the object where the event originated
@param id the event type
@param caret the caret (a.k.a. insertion point);
     <code>null</code> if there's no caret within current
     composed text
@param visiblePosition the position that's most important
     to be visible; <code>null</code> if there's no
     recommendation for a visible position within current
     composed text
@throws IllegalArgumentException if <code>id</code> is not
     in the range
     <code>INPUT_METHOD_FIRST</code>..<code>INPUT_METHOD_LAST</code>
@throws IllegalArgumentException if <code>source</code> is null
"
      end

      operation 6439682 "getText"
	public return_type class_ref 472962 // AttributedCharacterIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the combined committed and composed text.
Characters from index 0 to index <code>getCommittedCharacterCount() - 1</code> are committed
text, the remaining characters are composed text.

@return the text.
Always null for CARET_POSITION_CHANGED;
may be null for INPUT_METHOD_TEXT_CHANGED if there's no composed or committed text.
"
      end

      operation 6439810 "getCommittedCharacterCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of committed characters in the text.
"
      end

      operation 6439938 "getCaret"
	public return_type class_ref 886914 // TextHitInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the caret.
<p>
The offset of the caret is relative to the current
composed text; that is, the composed text within getText()
if this is an <code>INPUT_METHOD_TEXT_CHANGED</code> event,
the composed text within getText() of the
preceding <code>INPUT_METHOD_TEXT_CHANGED</code> event otherwise.

@return the caret (a.k.a. insertion point).
Null if there's no caret within current composed text.
"
      end

      operation 6440066 "getVisiblePosition"
	public return_type class_ref 886914 // TextHitInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the position that's most important to be visible.
<p>
The offset of the visible position is relative to the current
composed text; that is, the composed text within getText()
if this is an <code>INPUT_METHOD_TEXT_CHANGED</code> event,
the composed text within getText() of the
preceding <code>INPUT_METHOD_TEXT_CHANGED</code> event otherwise.

@return the position that's most important to be visible.
Null if there's no recommendation for a visible position within current composed text.
"
      end

      operation 6440194 "consume"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Consumes this event so that it will not be processed
in the default manner by the source which originated it.
"
      end

      operation 6440322 "isConsumed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not this event has been consumed.
@see #consume
"
      end

      operation 6440450 "getWhen"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the time stamp of when this event occurred.

@return this event's timestamp
@since 1.4
"
      end

      operation 6440578 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter string identifying this event.
This method is useful for event-logging and for debugging.
It contains the event ID in text form, the characters of the
committed and composed text
separated by \"+\", the number of committed characters,
the caret, and the visible position.

@return a string identifying the event and its attributes
"
      end

      operation 6440706 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the <code>when</code> field if it is not present in the
object input stream. In that case, the field will be initialized by
invoking {@link java.awt.EventQueue#getMostRecentEventTime()}.
"
      end

      operation 6440834 "getMostRecentEventTimeForSource"
	class_operation private explicit_return_type "long"
	nparams 1
	  param inout name "source" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the most recent event time in the {@code EventQueue} which the {@code source}
belongs to.

@param source the source of the event
@exception  IllegalArgumentException  if source is null.
@return most recent event time in the {@code EventQueue}
"
      end
    end

    class 346882 "HierarchyEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An event which indicates a change to the <code>Component</code>
hierarchy to which <code>Component</code> belongs.
<ul>
<li>Hierarchy Change Events (HierarchyListener)
    <ul>
    <li> addition of an ancestor
    <li> removal of an ancestor
    <li> hierarchy made displayable
    <li> hierarchy made undisplayable
    <li> hierarchy shown on the screen (both visible and displayable)
    <li> hierarchy hidden on the screen (either invisible or undisplayable)
    </ul>
<li>Ancestor Reshape Events (HierarchyBoundsListener)
    <ul>
    <li> an ancestor was resized
    <li> an ancestor was moved
    </ul>
</ul>
<p>
Hierarchy events are provided for notification purposes ONLY.
The AWT will automatically handle changes to the hierarchy internally so
that GUI layout and displayability works properly regardless of whether a
program is receiving these events or not.
<p>
This event is generated by a Container object (such as a Panel) when the
Container is added, removed, moved, or resized, and passed down the
hierarchy. It is also generated by a Component object when that object's
<code>addNotify</code>, <code>removeNotify</code>, <code>show</code>, or
<code>hide</code> method is called. The {@code ANCESTOR_MOVED} and
{@code ANCESTOR_RESIZED}
events are dispatched to every <code>HierarchyBoundsListener</code> or
<code>HierarchyBoundsAdapter</code> object which registered to receive
such events using the Component's <code>addHierarchyBoundsListener</code>
method. (<code>HierarchyBoundsAdapter</code> objects implement the <code>
HierarchyBoundsListener</code> interface.) The {@code HIERARCHY_CHANGED} events are
dispatched to every <code>HierarchyListener</code> object which registered
to receive such events using the Component's <code>addHierarchyListener
</code> method. Each such listener object gets this <code>HierarchyEvent
</code> when the event occurs.
<p>
An unspecified behavior will be caused if the {@code id} parameter
of any particular {@code HierarchyEvent} instance is not
in the range from {@code HIERARCHY_FIRST} to {@code HIERARCHY_LAST}.
<br>
The {@code changeFlags} parameter of any {@code HierarchyEvent} instance takes one of the following
values:
<ul>
<li> {@code HierarchyEvent.PARENT_CHANGED}
<li> {@code HierarchyEvent.DISPLAYABILITY_CHANGED}
<li> {@code HierarchyEvent.SHOWING_CHANGED}
</ul>
Assigning the value different from listed above will cause unspecified behavior.

@author      David Mendenhall
@see         HierarchyListener
@see         HierarchyBoundsAdapter
@see         HierarchyBoundsListener
@since       1.3
"
      classrelation 3006594 // <generalisation>
	relation 3006594 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3006594 // <generalisation>
	  b parent class_ref 339202 // AWTEvent
      end

      attribute 1471618 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5337576970038043990L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "serialVersionUID

"
      end

      attribute 1471746 "HIERARCHY_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1400"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Marks the first integer id for the range of hierarchy event ids.

 1300 used by sun.awt.windows.ModalityEvent"
      end

      attribute 1471874 "HIERARCHY_CHANGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " HIERARCHY_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The event id indicating that modification was made to the
entire hierarchy tree.

"
      end

      attribute 1472002 "ANCESTOR_MOVED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 + HIERARCHY_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The event id indicating an ancestor-Container was moved.

"
      end

      attribute 1472130 "ANCESTOR_RESIZED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2 + HIERARCHY_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The event id indicating an ancestor-Container was resized.

"
      end

      attribute 1472258 "HIERARCHY_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " ANCESTOR_RESIZED"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Marks the last integer id for the range of ancestor event ids.

"
      end

      attribute 1472386 "PARENT_CHANGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A change flag indicates that the <code>HIERARCHY_CHANGED</code> event
was generated by a reparenting operation.

"
      end

      attribute 1472514 "DISPLAYABILITY_CHANGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A change flag indicates that the <code>HIERARCHY_CHANGED</code> event
was generated due to the changing of the hierarchy displayability.
To discern the
current displayability of the hierarchy, call the
<code>Component.isDisplayable</code> method. Displayability changes occur
in response to explicit or implicit calls of the
<code>Component.addNotify</code> and
<code>Component.removeNotify</code> methods.

@see java.awt.Component#isDisplayable()
@see java.awt.Component#addNotify()
@see java.awt.Component#removeNotify()

"
      end

      attribute 1472642 "SHOWING_CHANGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A change flag indicates that the <code>HIERARCHY_CHANGED</code> event
was generated due to the changing of the hierarchy showing state.
To discern the
current showing state of the hierarchy, call the
<code>Component.isShowing</code> method. Showing state changes occur
when either the displayability or visibility of the
hierarchy occurs. Visibility changes occur in response to explicit
or implicit calls of the <code>Component.show</code> and
<code>Component.hide</code> methods.

@see java.awt.Component#isShowing()
@see java.awt.Component#addNotify()
@see java.awt.Component#removeNotify()
@see java.awt.Component#show()
@see java.awt.Component#hide()

"
      end

      classrelation 3006722 // changed (<unidirectional association>)
	relation 3006722 --->
	  a role_name "changed" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3006722 // changed (<unidirectional association>)
	  b parent class_ref 338818 // Component
      end

      classrelation 3006850 // changedParent (<unidirectional association>)
	relation 3006850 --->
	  a role_name "changedParent" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3006850 // changedParent (<unidirectional association>)
	  b parent class_ref 338690 // Container
      end

      attribute 1472770 "changeFlags"
	package explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6436354 "HierarchyEvent"
	public explicit_return_type ""
	nparams 4
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param inout name "changed" type class_ref 338818 // Component
	  param inout name "changedParent" type class_ref 338690 // Container
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>HierarchyEvent</code> object to identify a
change in the <code>Component</code> hierarchy.
<p>This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source          The <code>Component</code> object that
                       originated the event
@param id              An integer indicating the type of event.
                       For information on allowable values, see
                       the class description for {@link HierarchyEvent}
@param changed         The <code>Component</code> at the top of
                       the hierarchy which was changed
@param changedParent   The parent of the <code>changed</code> component.
                       This
                       may be the parent before or after the
                       change, depending on the type of change
@throws IllegalArgumentException if <code>source</code> is {@code null}
@see #getSource()
@see #getID()
@see #getChanged()
@see #getChangedParent()
"
      end

      operation 6436482 "HierarchyEvent"
	public explicit_return_type ""
	nparams 5
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param inout name "changed" type class_ref 338818 // Component
	  param inout name "changedParent" type class_ref 338690 // Container
	  param in name "changeFlags" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>HierarchyEvent</code> object to identify
a change in the <code>Component</code> hierarchy.
<p> This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source          The <code>Component</code> object that
                       originated the event
@param id              An integer indicating the type of event.
                       For information on allowable values, see
                       the class description for {@link HierarchyEvent}
@param changed         The <code>Component</code> at the top
                       of the hierarchy which was changed
@param changedParent   The parent of the <code>changed</code> component.
                       This
                       may be the parent before or after the
                       change, depending on the type of change
@param changeFlags     A bitmask which indicates the type(s) of
                       the <code>HIERARCHY_CHANGED</code> events
                       represented in this event object.
                       For information on allowable values, see
                       the class description for {@link HierarchyEvent}
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
@see #getChanged()
@see #getChangedParent()
@see #getChangeFlags()
"
      end

      operation 6436610 "getComponent"
	public return_type class_ref 338818 // Component
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the originator of the event.

@return the <code>Component</code> object that originated
the event, or <code>null</code> if the object is not a
<code>Component</code>.
"
      end

      operation 6436738 "getChanged"
	public return_type class_ref 338818 // Component
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Component at the top of the hierarchy which was
changed.

@return the changed Component
"
      end

      operation 6436866 "getChangedParent"
	public return_type class_ref 338690 // Container
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent of the Component returned by <code>
getChanged()</code>. For a HIERARCHY_CHANGED event where the
change was of type PARENT_CHANGED via a call to <code>
Container.add</code>, the parent returned is the parent
after the add operation. For a HIERARCHY_CHANGED event where
the change was of type PARENT_CHANGED via a call to <code>
Container.remove</code>, the parent returned is the parent
before the remove operation. For all other events and types,
the parent returned is the parent during the operation.

@return the parent of the changed Component
"
      end

      operation 6436994 "getChangeFlags"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a bitmask which indicates the type(s) of
HIERARCHY_CHANGED events represented in this event object.
The bits have been bitwise-ored together.

@return the bitmask, or 0 if this is not an HIERARCHY_CHANGED
event
"
      end

      operation 6437122 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter string identifying this event.
This method is useful for event-logging and for debugging.

@return a string identifying the event and its attributes
"
      end
    end

    class 350082 "ContainerListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving container events.
The class that is interested in processing a container event
either implements this interface (and all the methods it
contains) or extends the abstract <code>ContainerAdapter</code> class
(overriding only the methods of interest).
The listener object created from that class is then registered with a
component using the component's <code>addContainerListener</code>
method. When the container's contents change because a component
has been added or removed, the relevant method in the listener object
is invoked, and the <code>ContainerEvent</code> is passed to it.
<P>
Container events are provided for notification purposes ONLY;
The AWT will automatically handle add and remove operations
internally so the program works properly regardless of
whether the program registers a {@code ContainerListener} or not.

@see ContainerAdapter
@see ContainerEvent
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/containerlistener.html\">Tutorial: Writing a Container Listener</a>

@author Tim Prinzing
@author Amy Fowler
@since 1.1
"
      classrelation 608002 // <generalisation>
	relation 608002 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 608002 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 1962754 "componentAdded"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 350338 // ContainerEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a component has been added to the container.
"
      end

      operation 1962882 "componentRemoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 350338 // ContainerEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a component has been removed from the container.
"
      end
    end

    class 350338 "ContainerEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A low-level event which indicates that a container's contents
changed because a component was added or removed.
<P>
Container events are provided for notification purposes ONLY;
The AWT will automatically handle changes to the containers
contents internally so that the program works properly regardless of
whether the program is receiving these events or not.
<P>
This low-level event is generated by a container object (such as a
Panel) when a component is added to it or removed from it.
The event is passed to every <code>ContainerListener</code>
or <code>ContainerAdapter</code> object which registered to receive such
events using the component's <code>addContainerListener</code> method.
(<code>ContainerAdapter</code> objects implement the
<code>ContainerListener</code> interface.) Each such listener object
gets this <code>ContainerEvent</code> when the event occurs.
<p>
An unspecified behavior will be caused if the {@code id} parameter
of any particular {@code ContainerEvent} instance is not
in the range from {@code CONTAINER_FIRST} to {@code CONTAINER_LAST}.

@see ContainerAdapter
@see ContainerListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/containerlistener.html\">Tutorial: Writing a Container Listener</a>

@author Tim Prinzing
@author Amy Fowler
@since 1.1
"
      classrelation 3005954 // <generalisation>
	relation 3005954 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3005954 // <generalisation>
	  b parent class_ref 346242 // ComponentEvent
      end

      attribute 1470210 "CONTAINER_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 300"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The first number in the range of ids used for container events.

"
      end

      attribute 1470338 "CONTAINER_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 301"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The last number in the range of ids used for container events.

"
      end

      attribute 1470466 "COMPONENT_ADDED"
	class_attribute const_attribute public explicit_type "int"
	init_value " CONTAINER_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This event indicates that a component was added to the container.

"
      end

      attribute 1470594 "COMPONENT_REMOVED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 + CONTAINER_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This event indicates that a component was removed from the container.

"
      end

      classrelation 3006082 // child (<unidirectional association>)
	relation 3006082 --->
	  a role_name "child" package
	    comment "
The non-null component that is being added or
removed from the Container.

@serial
@see #getChild()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3006082 // child (<unidirectional association>)
	  b parent class_ref 338818 // Component
      end

      attribute 1470722 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4114942250539772041L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.1 serialVersionUID

"
      end

      operation 6434818 "ContainerEvent"
	public explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param inout name "child" type class_ref 338818 // Component
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ContainerEvent</code> object.
<p> This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source The <code>Component</code> object (container)
              that originated the event
@param id     An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link ContainerEvent}
@param child  the component that was added or removed
@throws IllegalArgumentException if <code>source</code> is null
@see #getContainer()
@see #getID()
@see #getChild()
"
      end

      operation 6434946 "getContainer"
	public return_type class_ref 338690 // Container
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the originator of the event.

@return the <code>Container</code> object that originated
the event, or <code>null</code> if the object is not a
<code>Container</code>.
"
      end

      operation 6435074 "getChild"
	public return_type class_ref 338818 // Component
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the component that was affected by the event.

@return the Component object that was added or removed
"
      end

      operation 6435202 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter string identifying this event.
This method is useful for event-logging and for debugging.

@return a string identifying the event and its attributes
"
      end
    end

    class 351234 "AWTEventListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving notification of events
dispatched to objects that are instances of Component or
MenuComponent or their subclasses.  Unlike the other EventListeners
in this package, AWTEventListeners passively observe events
being dispatched in the AWT, system-wide.  Most applications
should never use this class; applications which might use
AWTEventListeners include event recorders for automated testing,
and facilities such as the Java Accessibility package.
<p>
The class that is interested in monitoring AWT events
implements this interface, and the object created with that
class is registered with the Toolkit, using the Toolkit's
<code>addAWTEventListener</code> method.  When an event is
dispatched anywhere in the AWT, that object's
<code>eventDispatched</code> method is invoked.

@see java.awt.AWTEvent
@see java.awt.Toolkit#addAWTEventListener
@see java.awt.Toolkit#removeAWTEventListener

@author Fred Ecks
@since 1.2
"
      classrelation 608386 // <generalisation>
	relation 608386 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 608386 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 1966466 "eventDispatched"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 339202 // AWTEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when an event is dispatched in the AWT.
"
      end
    end

    class 352386 "InputEvent"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The root event class for all component-level input events.

Input events are delivered to listeners before they are
processed normally by the source where they originated.
This allows listeners and component subclasses to \"consume\"
the event so that the source will not process them in their
default manner.  For example, consuming mousePressed events
on a Button component will prevent the Button from being
activated.

@author Carl Quinn

@see KeyEvent
@see KeyAdapter
@see MouseEvent
@see MouseAdapter
@see MouseMotionAdapter

@since 1.1
"
      classrelation 3006978 // <generalisation>
	relation 3006978 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3006978 // <generalisation>
	  b parent class_ref 346242 // ComponentEvent
      end

      attribute 1472898 "logger"
	class_attribute const_attribute private explicit_type "PlatformLogger"
	init_value " PlatformLogger.getLogger(\"java.awt.event.InputEvent\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1473026 "SHIFT_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " Event.SHIFT_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Shift key modifier constant.
It is recommended that SHIFT_DOWN_MASK be used instead.

"
      end

      attribute 1473154 "CTRL_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " Event.CTRL_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Control key modifier constant.
It is recommended that CTRL_DOWN_MASK be used instead.

"
      end

      attribute 1473282 "META_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " Event.META_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Meta key modifier constant.
It is recommended that META_DOWN_MASK be used instead.

"
      end

      attribute 1473410 "ALT_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " Event.ALT_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Alt key modifier constant.
It is recommended that ALT_DOWN_MASK be used instead.

"
      end

      attribute 1473538 "ALT_GRAPH_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The AltGraph key modifier constant.

"
      end

      attribute 1473666 "BUTTON1_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Mouse Button1 modifier constant.
It is recommended that BUTTON1_DOWN_MASK be used instead.

"
      end

      attribute 1473794 "BUTTON2_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " Event.ALT_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Mouse Button2 modifier constant.
It is recommended that BUTTON2_DOWN_MASK be used instead.
Note that BUTTON2_MASK has the same value as ALT_MASK.

"
      end

      attribute 1473922 "BUTTON3_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " Event.META_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Mouse Button3 modifier constant.
It is recommended that BUTTON3_DOWN_MASK be used instead.
Note that BUTTON3_MASK has the same value as META_MASK.

"
      end

      attribute 1474050 "SHIFT_DOWN_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Shift key extended modifier constant.
@since 1.4

"
      end

      attribute 1474178 "CTRL_DOWN_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Control key extended modifier constant.
@since 1.4

"
      end

      attribute 1474306 "META_DOWN_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Meta key extended modifier constant.
@since 1.4

"
      end

      attribute 1474434 "ALT_DOWN_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Alt key extended modifier constant.
@since 1.4

"
      end

      attribute 1474562 "BUTTON1_DOWN_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Mouse Button1 extended modifier constant.
@since 1.4

"
      end

      attribute 1474690 "BUTTON2_DOWN_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Mouse Button2 extended modifier constant.
@since 1.4

"
      end

      attribute 1474818 "BUTTON3_DOWN_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Mouse Button3 extended modifier constant.
@since 1.4

"
      end

      attribute 1474946 "ALT_GRAPH_DOWN_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The AltGraph key extended modifier constant.
@since 1.4

"
      end

      attribute 1475074 "BUTTON_DOWN_MASK"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " new int [] { BUTTON1_DOWN_MASK,
                                                               BUTTON2_DOWN_MASK,
                                                               BUTTON3_DOWN_MASK,
                                                               1<<14, //4th phisical button (this is not a wheel!)
                                                               1<<15, //(this is not a wheel!)
                                                               1<<16,
                                                               1<<17,
                                                               1<<18,
                                                               1<<19,
                                                               1<<20,
                                                               1<<21,
                                                               1<<22,
                                                               1<<23,
                                                               1<<24,
                                                               1<<25,
                                                               1<<26,
                                                               1<<27,
                                                               1<<28,
                                                               1<<29,
                                                               1<<30}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An array of extended modifiers for additional buttons.
@see getButtonDownMasks
There are twenty buttons fit into 4byte space.
one more bit is reserved for FIRST_HIGH_BIT.
@since 7.0

"
      end

      operation 6437250 "getButtonDownMasks"
	class_operation private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A method to access an array of extended modifiers for additional buttons.
@since 7.0
"
      end

      operation 6437378 "getMaskForButton"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "button" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A method to obtain a mask for any existing mouse button.
The returned mask may be used for different purposes. Following are some of them:
<ul>
<li> {@link java.awt.Robot#mousePress(int) mousePress(buttons)} and
     {@link java.awt.Robot#mouseRelease(int) mouseRelease(buttons)}
<li> as a {@code modifiers} parameter when creating a new {@link MouseEvent} instance
<li> to check {@link MouseEvent#getModifiersEx() modifiersEx} of existing {@code MouseEvent}
</ul>
@param button is a number to represent a button starting from 1.
For example,
<pre>
int button = InputEvent.getMaskForButton(1);
</pre>
will have the same meaning as
<pre>
int button = InputEvent.getMaskForButton(MouseEvent.BUTTON1);
</pre>
because {@link MouseEvent#BUTTON1 MouseEvent.BUTTON1} equals to 1.
If a mouse has three enabled buttons(see {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()})
then the values from the left column passed into the method will return
corresponding values from the right column:
<PRE>
   <b>button </b>   <b>returned mask</b>
   {@link MouseEvent#BUTTON1 BUTTON1}  {@link MouseEvent#BUTTON1_DOWN_MASK BUTTON1_DOWN_MASK}
   {@link MouseEvent#BUTTON2 BUTTON2}  {@link MouseEvent#BUTTON2_DOWN_MASK BUTTON2_DOWN_MASK}
   {@link MouseEvent#BUTTON3 BUTTON3}  {@link MouseEvent#BUTTON3_DOWN_MASK BUTTON3_DOWN_MASK}
</PRE>
If a mouse has more than three enabled buttons then more values
are admissible (4, 5, etc.). There is no assigned constants for these extended buttons.
The button masks for the extra buttons returned by this method have no assigned names like the
first three button masks.
<p>
This method has the following implementation restriction.
It returns masks for a limited number of buttons only. The maximum number is
implementation dependent and may vary.
This limit is defined by the relevant number
of buttons that may hypothetically exist on the mouse but it is greater than the
{@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}.
<p>
@throws IllegalArgumentException if {@code button} is less than zero or greater than the number
        of button masks reserved for buttons
@since 7.0
@see java.awt.MouseInfo#getNumberOfButtons()
@see Toolkit#areExtraMouseButtonsEnabled()
@see MouseEvent#getModifiers()
@see MouseEvent#getModifiersEx()
"
      end

      attribute 1475202 "FIRST_HIGH_BIT"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1 << 31"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " the constant below MUST be updated if any extra modifier
 bits are to be added!
 in fact, it is undesirable to add modifier bits
 to the same field as this may break applications
 see bug# 5066958
"
      end

      attribute 1475330 "JDK_1_3_MODIFIERS"
	class_attribute const_attribute package explicit_type "int"
	init_value " SHIFT_DOWN_MASK - 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1475458 "HIGH_MODIFIERS"
	class_attribute const_attribute package explicit_type "int"
	init_value " ~( FIRST_HIGH_BIT - 1 )"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1475586 "when"
	package explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The input event's Time stamp in UTC format.  The time stamp
indicates when the input event was created.

@serial
@see #getWhen()

"
      end

      attribute 1475714 "modifiers"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The state of the modifier mask at the time the input
event was fired.

@serial
@see #getModifiers()
@see #getModifiersEx()
@see java.awt.event.KeyEvent
@see java.awt.event.MouseEvent

"
      end

      attribute 1475842 "canAccessSystemClipboard"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A flag that indicates that this instance can be used to access
the system clipboard.

"
      end

      extra_member 152706 "initialization"
	
	cpp "" ""
	java "  static {
        /* ensure that the necessary native libraries are loaded */
        NativeLibLoader.loadLibraries();
        if (!GraphicsEnvironment.isHeadless()) {
            initIDs();
        }
        AWTAccessor.setInputEventAccessor(
            new AWTAccessor.InputEventAccessor() {
                public int[] getButtonDownMasks() {
                    return InputEvent.getButtonDownMasks();
                }
            });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6437506 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Initialize JNI field and method IDs for fields that may be
accessed from C.
"
      end

      operation 6437634 "InputEvent"
	package explicit_return_type ""
	nparams 4
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param in name "when" explicit_type "long"
	  param in name "modifiers" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InputEvent object with the specified source component,
modifiers, and type.
<p> This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source the object where the event originated
@param id           the integer that identifies the event type.
                    It is allowed to pass as parameter any value that
                    allowed for some subclass of {@code InputEvent} class.
                    Passing in the value different from those values result
                    in unspecified behavior
@param when         a long int that gives the time the event occurred.
                    Passing negative or zero value
                    is not recommended
@param modifiers    a modifier mask describing the modifier keys and mouse
                    buttons (for example, shift, ctrl, alt, and meta) that
                    are down during the event.
                    Only extended modifiers are allowed to be used as a
                    value for this parameter (see the {@link InputEvent#getModifiersEx}
                    class for the description of extended modifiers).
                    Passing negative parameter
                    is not recommended.
                    Zero value means that no modifiers were passed
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
@see #getWhen()
@see #getModifiers()
"
      end

      operation 6437762 "canAccessSystemClipboard"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6437890 "isShiftDown"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not the Shift modifier is down on this event.
"
      end

      operation 6438018 "isControlDown"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not the Control modifier is down on this event.
"
      end

      operation 6438146 "isMetaDown"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not the Meta modifier is down on this event.
"
      end

      operation 6438274 "isAltDown"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not the Alt modifier is down on this event.
"
      end

      operation 6438402 "isAltGraphDown"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not the AltGraph modifier is down on this event.
"
      end

      operation 6438530 "getWhen"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the difference in milliseconds between the timestamp of when this event occurred and
midnight, January 1, 1970 UTC.
"
      end

      operation 6438658 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the modifier mask for this event.
"
      end

      operation 6438786 "getModifiersEx"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the extended modifier mask for this event.
<P>
Extended modifiers are the modifiers that ends with the _DOWN_MASK suffix,
such as ALT_DOWN_MASK, BUTTON1_DOWN_MASK, and others.
<P>
Extended modifiers represent the state of all modal keys,
such as ALT, CTRL, META, and the mouse buttons just after
the event occurred.
<P>
For example, if the user presses <b>button 1</b> followed by
<b>button 2</b>, and then releases them in the same order,
the following sequence of events is generated:
<PRE>
   <code>MOUSE_PRESSED</code>:  <code>BUTTON1_DOWN_MASK</code>
   <code>MOUSE_PRESSED</code>:  <code>BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK</code>
   <code>MOUSE_RELEASED</code>: <code>BUTTON2_DOWN_MASK</code>
   <code>MOUSE_CLICKED</code>:  <code>BUTTON2_DOWN_MASK</code>
   <code>MOUSE_RELEASED</code>:
   <code>MOUSE_CLICKED</code>:
</PRE>
<P>
It is not recommended to compare the return value of this method
using <code>==</code> because new modifiers can be added in the future.
For example, the appropriate way to check that SHIFT and BUTTON1 are
down, but CTRL is up is demonstrated by the following code:
<PRE>
   int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK;
   int offmask = CTRL_DOWN_MASK;
   if ((event.getModifiersEx() &amp; (onmask | offmask)) == onmask) {
       ...
   }
</PRE>
The above code will work even if new modifiers are added.

@since 1.4
"
      end

      operation 6438914 "consume"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Consumes this event so that it will not be processed
in the default manner by the source which originated it.
"
      end

      operation 6439042 "isConsumed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not this event has been consumed.
@see #consume
"
      end

      attribute 1475970 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -2482525981698309786L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " state serialization compatibility with JDK 1.1
"
      end

      operation 6439170 "getModifiersExText"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "modifiers" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String describing the extended modifier keys and
mouse buttons, such as \"Shift\", \"Button1\", or \"Ctrl+Shift\".
These strings can be localized by changing the
<code>awt.properties</code> file.
<p>
Note that passing negative parameter is incorrect,
and will cause the returning an unspecified string.
Zero parameter means that no modifiers were passed and will
cause the returning an empty string.

@param modifiers a modifier mask describing the extended
               modifier keys and mouse buttons for the event
@return a text description of the combination of extended
        modifier keys and mouse buttons that were held down
        during the event.
@since 1.4
"
      end
    end

    class 354306 "ActionListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving action events.
The class that is interested in processing an action event
implements this interface, and the object created with that
class is registered with a component, using the component's
<code>addActionListener</code> method. When the action event
occurs, that object's <code>actionPerformed</code> method is
invoked.

@see ActionEvent
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/actionlistener.html\">How to Write an Action Listener</a>

@author Carl Quinn
@since 1.1
"
      classrelation 611586 // <generalisation>
	relation 611586 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 611586 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 1978626 "actionPerformed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 354434 // ActionEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when an action occurs.
"
      end
    end

    class 354434 "ActionEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A semantic event which indicates that a component-defined action occurred.
This high-level event is generated by a component (such as a
<code>Button</code>) when
the component-specific action occurs (such as being pressed).
The event is passed to every <code>ActionListener</code> object
that registered to receive such events using the component's
<code>addActionListener</code> method.
<p>
<b>Note:</b> To invoke an <code>ActionEvent</code> on a
<code>Button</code> using the keyboard, use the Space bar.
<P>
The object that implements the <code>ActionListener</code> interface
gets this <code>ActionEvent</code> when the event occurs. The listener
is therefore spared the details of processing individual mouse movements
and mouse clicks, and can instead process a \"meaningful\" (semantic)
event like \"button pressed\".
<p>
An unspecified behavior will be caused if the {@code id} parameter
of any particular {@code ActionEvent} instance is not
in the range from {@code ACTION_FIRST} to {@code ACTION_LAST}.

@see ActionListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/actionlistener.html\">Tutorial: How to Write an Action Listener</a>

@author Carl Quinn
@since 1.1
"
      classrelation 3004802 // <generalisation>
	relation 3004802 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3004802 // <generalisation>
	  b parent class_ref 339202 // AWTEvent
      end

      attribute 1466242 "SHIFT_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " Event.SHIFT_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The shift modifier. An indicator that the shift key was held
down during the event.

"
      end

      attribute 1466370 "CTRL_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " Event.CTRL_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The control modifier. An indicator that the control key was held
down during the event.

"
      end

      attribute 1466498 "META_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " Event.META_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The meta modifier. An indicator that the meta key was held
down during the event.

"
      end

      attribute 1466626 "ALT_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " Event.ALT_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The alt modifier. An indicator that the alt key was held
down during the event.

"
      end

      attribute 1466754 "ACTION_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The first number in the range of ids used for action events.

"
      end

      attribute 1466882 "ACTION_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The last number in the range of ids used for action events.

"
      end

      attribute 1467010 "ACTION_PERFORMED"
	class_attribute const_attribute public explicit_type "int"
	init_value " ACTION_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This event id indicates that a meaningful action occurred.

Event.ACTION_EVENT"
      end

      classrelation 3004930 // actionCommand (<unidirectional association>)
	relation 3004930 --->
	  a role_name "actionCommand" package
	    comment "
The nonlocalized string that gives more details
of what actually caused the event.
This information is very specific to the component
that fired it.

@serial
@see #getActionCommand

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3004930 // actionCommand (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1467138 "when"
	package explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Timestamp of when this event occurred. Because an ActionEvent is a high-
level, semantic event, the timestamp is typically the same as an
underlying InputEvent.

@serial
@see #getWhen

"
      end

      attribute 1467266 "modifiers"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This represents the key modifier that was selected,
and is used to determine the state of the selected key.
If no modifier has been selected it will default to
zero.

@serial
@see #getModifiers

"
      end

      attribute 1467394 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7671078796273832149L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.1 serialVersionUID

"
      end

      operation 6431746 "ActionEvent"
	public explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 129538 // Object
	  param in name "id" explicit_type "int"
	  param inout name "command" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ActionEvent</code> object.
<p>
This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.
A <code>null</code> <code>command</code> string is legal,
but not recommended.

@param source  The object that originated the event
@param id      An integer that identifies the event.
                    For information on allowable values, see
                    the class description for {@link ActionEvent}
@param command A string that may specify a command (possibly one
               of several) associated with the event
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
@see #getActionCommand()
"
      end

      operation 6431874 "ActionEvent"
	public explicit_return_type ""
	nparams 4
	  param inout name "source" type class_ref 129538 // Object
	  param in name "id" explicit_type "int"
	  param inout name "command" type class_ref 128130 // String
	  param in name "modifiers" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ActionEvent</code> object with modifier keys.
<p>
This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.
A <code>null</code> <code>command</code> string is legal,
but not recommended.

@param source  The object that originated the event
@param id      An integer that identifies the event.
                    For information on allowable values, see
                    the class description for {@link ActionEvent}
@param command A string that may specify a command (possibly one
               of several) associated with the event
@param modifiers The modifier keys down during event
                 (shift, ctrl, alt, meta).
                 Passing negative parameter is not recommended.
                 Zero value means that no modifiers were passed
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
@see #getActionCommand()
@see #getModifiers()
"
      end

      operation 6432002 "ActionEvent"
	public explicit_return_type ""
	nparams 5
	  param inout name "source" type class_ref 129538 // Object
	  param in name "id" explicit_type "int"
	  param inout name "command" type class_ref 128130 // String
	  param in name "when" explicit_type "long"
	  param in name "modifiers" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ActionEvent</code> object with the specified
modifier keys and timestamp.
<p>
This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.
A <code>null</code> <code>command</code> string is legal,
but not recommended.

@param source    The object that originated the event
@param id      An integer that identifies the event.
                    For information on allowable values, see
                    the class description for {@link ActionEvent}
@param command A string that may specify a command (possibly one
               of several) associated with the event
@param modifiers The modifier keys down during event
                 (shift, ctrl, alt, meta).
                 Passing negative parameter is not recommended.
                 Zero value means that no modifiers were passed
@param when   A long that gives the time the event occurred.
              Passing negative or zero value
              is not recommended
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
@see #getActionCommand()
@see #getModifiers()
@see #getWhen()

@since 1.4
"
      end

      operation 6432130 "getActionCommand"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the command string associated with this action.
This string allows a \"modal\" component to specify one of several
commands, depending on its state. For example, a single button might
toggle between \"show details\" and \"hide details\". The source object
and the event would be the same in each case, but the command string
would identify the intended action.
<p>
Note that if a <code>null</code> command string was passed
to the constructor for this <code>ActionEvent</code>, this
this method returns <code>null</code>.

@return the string identifying the command for this event
"
      end

      operation 6432258 "getWhen"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the timestamp of when this event occurred. Because an
ActionEvent is a high-level, semantic event, the timestamp is typically
the same as an underlying InputEvent.

@return this event's timestamp
@since 1.4
"
      end

      operation 6432386 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the modifier keys held down during this action event.

@return the bitwise-or of the modifier constants
"
      end

      operation 6432514 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter string identifying this action event.
This method is useful for event-logging and for debugging.

@return a string identifying the event and its associated command
"
      end
    end

    class 365698 "MouseAdapter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract adapter class for receiving mouse events.
The methods in this class are empty. This class exists as
convenience for creating listener objects.
<P>
Mouse events let you track when a mouse is pressed, released, clicked,
moved, dragged, when it enters a component, when it exits and
when a mouse wheel is moved.
<P>
Extend this class to create a {@code MouseEvent}
(including drag and motion events) or/and {@code MouseWheelEvent}
listener and override the methods for the events of interest. (If you implement the
{@code MouseListener},
{@code MouseMotionListener}
interface, you have to define all of
the methods in it. This abstract class defines null methods for them
all, so you can only have to define methods for events you care about.)
<P>
Create a listener object using the extended class and then register it with
a component using the component's {@code addMouseListener}
{@code addMouseMotionListener}, {@code addMouseWheelListener}
methods.
The relevant method in the listener object is invoked  and the {@code MouseEvent}
or {@code MouseWheelEvent}  is passed to it in following cases:
<ul>
<li>when a mouse button is pressed, released, or clicked (pressed and  released)
<li>when the mouse cursor enters or exits the component
<li>when the mouse wheel rotated, or mouse moved or dragged
</ul>

@author Carl Quinn
@author Andrei Dmitriev

@see MouseEvent
@see MouseWheelEvent
@see MouseListener
@see MouseMotionListener
@see MouseWheelListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/mouselistener.html\">Tutorial: Writing a Mouse Listener</a>

@since 1.1
"
      classrelation 645506 // <realization>
	relation 645506 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 645506 // <realization>
	  b parent class_ref 342530 // MouseListener
      end

      classrelation 645762 // <realization>
	relation 645762 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 645762 // <realization>
	  b parent class_ref 342786 // MouseWheelListener
      end

      classrelation 646018 // <realization>
	relation 646018 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 646018 // <realization>
	  b parent class_ref 342658 // MouseMotionListener
      end

      operation 2042754 "mouseClicked"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 2042882 "mousePressed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 2043010 "mouseReleased"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 2043138 "mouseEntered"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 2043266 "mouseExited"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 2043394 "mouseWheelMoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 345858 // MouseWheelEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.6
"
      end

      operation 2043522 "mouseDragged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.6
"
      end

      operation 2043650 "mouseMoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.6
"
      end
    end

    class 389506 "ItemListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving item events.
The class that is interested in processing an item event
implements this interface. The object created with that
class is then registered with a component using the
component's <code>addItemListener</code> method. When an
item-selection event occurs, the listener object's
<code>itemStateChanged</code> method is invoked.

@author Amy Fowler

@see java.awt.ItemSelectable
@see ItemEvent
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/itemlistener.html\">Tutorial: Writing an Item Listener</a>

@since 1.1
"
      classrelation 700162 // <generalisation>
	relation 700162 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 700162 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 2210818 "itemStateChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 390658 // ItemEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when an item has been selected or deselected by the user.
The code written for this method performs the operations
that need to occur when an item is selected (or deselected).
"
      end
    end

    class 390146 "KeyAdapter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract adapter class for receiving keyboard events.
The methods in this class are empty. This class exists as
convenience for creating listener objects.
<P>
Extend this class to create a <code>KeyEvent</code> listener
and override the methods for the events of interest. (If you implement the
<code>KeyListener</code> interface, you have to define all of
the methods in it. This abstract class defines null methods for them
all, so you can only have to define methods for events you care about.)
<P>
Create a listener object using the extended class and then register it with
a component using the component's <code>addKeyListener</code>
method. When a key is pressed, released, or typed,
the relevant method in the listener object is invoked,
and the <code>KeyEvent</code> is passed to it.

@author Carl Quinn

@see KeyEvent
@see KeyListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/keylistener.html\">Tutorial: Writing a Key Listener</a>

@since 1.1
"
      classrelation 699650 // <realization>
	relation 699650 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 699650 // <realization>
	  b parent class_ref 342402 // KeyListener
      end

      operation 2209666 "keyTyped"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346498 // KeyEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a key has been typed.
This event occurs when a key press is followed by a key release.
"
      end

      operation 2209794 "keyPressed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346498 // KeyEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a key has been pressed.
"
      end

      operation 2209922 "keyReleased"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346498 // KeyEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a key has been released.
"
      end
    end

    class 390658 "ItemEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A semantic event which indicates that an item was selected or deselected.
This high-level event is generated by an ItemSelectable object (such as a
List) when an item is selected or deselected by the user.
The event is passed to every <code>ItemListener</code> object which
registered to receive such events using the component's
<code>addItemListener</code> method.
<P>
The object that implements the <code>ItemListener</code> interface gets
this <code>ItemEvent</code> when the event occurs. The listener is
spared the details of processing individual mouse movements and mouse
clicks, and can instead process a \"meaningful\" (semantic) event like
\"item selected\" or \"item deselected\".
<p>
An unspecified behavior will be caused if the {@code id} parameter
of any particular {@code ItemEvent} instance is not
in the range from {@code ITEM_FIRST} to {@code ITEM_LAST}.
<p>
The {@code stateChange} of any {@code ItemEvent} instance takes one of the following
values:
                    <ul>
                    <li> {@code ItemEvent.SELECTED}
                    <li> {@code ItemEvent.DESELECTED}
                    </ul>
Assigning the value different from listed above will cause an unspecified behavior.

@author Carl Quinn

@see java.awt.ItemSelectable
@see ItemListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/itemlistener.html\">Tutorial: Writing an Item Listener</a>

@since 1.1
"
      classrelation 3008514 // <generalisation>
	relation 3008514 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3008514 // <generalisation>
	  b parent class_ref 339202 // AWTEvent
      end

      attribute 1477890 "ITEM_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 701"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The first number in the range of ids used for item events.

"
      end

      attribute 1478018 "ITEM_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 701"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The last number in the range of ids used for item events.

"
      end

      attribute 1478146 "ITEM_STATE_CHANGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " ITEM_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This event id indicates that an item's state changed.

Event.LIST_SELECT"
      end

      attribute 1478274 "SELECTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This state-change value indicates that an item was selected.

"
      end

      attribute 1478402 "DESELECTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This state-change-value indicates that a selected item was deselected.

"
      end

      classrelation 3008642 // item (<unidirectional association>)
	relation 3008642 --->
	  a role_name "item" package
	    comment "
The item whose selection state has changed.

@serial
@see #getItem()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3008642 // item (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1478530 "stateChange"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<code>stateChange</code> indicates whether the <code>item</code>
was selected or deselected.

@serial
@see #getStateChange()

"
      end

      attribute 1478658 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -608708132447206933L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.1 serialVersionUID

"
      end

      operation 6442498 "ItemEvent"
	public explicit_return_type ""
	nparams 4
	  param inout name "source" type class_ref 391298 // ItemSelectable
	  param in name "id" explicit_type "int"
	  param inout name "item" type class_ref 129538 // Object
	  param in name "stateChange" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ItemEvent</code> object.
<p> This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source The <code>ItemSelectable</code> object
              that originated the event
@param id           The integer that identifies the event type.
                    For information on allowable values, see
                    the class description for {@link ItemEvent}
@param item   An object -- the item affected by the event
@param stateChange  An integer that indicates whether the item was
              selected or deselected.
                    For information on allowable values, see
                    the class description for {@link ItemEvent}
@throws IllegalArgumentException if <code>source</code> is null
@see #getItemSelectable()
@see #getID()
@see #getStateChange()
"
      end

      operation 6442626 "getItemSelectable"
	public return_type class_ref 391298 // ItemSelectable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the originator of the event.

@return the ItemSelectable object that originated the event.
"
      end

      operation 6442754 "getItem"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the item affected by the event.

@return the item (object) that was affected by the event
"
      end

      operation 6442882 "getStateChange"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of state change (selected or deselected).

@return an integer that indicates whether the item was selected
        or deselected

@see #SELECTED
@see #DESELECTED
"
      end

      operation 6443010 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter string identifying this item event.
This method is useful for event-logging and for debugging.

@return a string identifying the event and its attributes
"
      end
    end

    class 395010 "MouseMotionAdapter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract adapter class for receiving mouse motion events.
The methods in this class are empty. This class exists as
convenience for creating listener objects.
<P>
Mouse motion events occur when a mouse is moved or dragged.
(Many such events will be generated in a normal program.
To track clicks and other mouse events, use the MouseAdapter.)
<P>
Extend this class to create a <code>MouseEvent</code> listener
and override the methods for the events of interest. (If you implement the
<code>MouseMotionListener</code> interface, you have to define all of
the methods in it. This abstract class defines null methods for them
all, so you can only have to define methods for events you care about.)
<P>
Create a listener object using the extended class and then register it with
a component using the component's <code>addMouseMotionListener</code>
method. When the mouse is moved or dragged, the relevant method in the
listener object is invoked and the <code>MouseEvent</code> is passed to it.

@author Amy Fowler

@see MouseEvent
@see MouseMotionListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/mousemotionlistener.html\">Tutorial: Writing a Mouse Motion Listener</a>

@since 1.1
"
      classrelation 714754 // <realization>
	relation 714754 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 714754 // <realization>
	  b parent class_ref 342658 // MouseMotionListener
      end

      operation 2259330 "mouseDragged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a mouse button is pressed on a component and then
dragged.  Mouse drag events will continue to be delivered to
the component where the first originated until the mouse button is
released (regardless of whether the mouse position is within the
bounds of the component).
"
      end

      operation 2259458 "mouseMoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346626 // MouseEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the mouse button has been moved on a component
(with no buttons no down).
"
      end
    end

    class 422914 "WindowFocusListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving <code>WindowEvents</code>, including
<code>WINDOW_GAINED_FOCUS</code> and <code>WINDOW_LOST_FOCUS</code> events.
The class that is interested in processing a <code>WindowEvent</code>
either implements this interface (and
all the methods it contains) or extends the abstract
<code>WindowAdapter</code> class (overriding only the methods of interest).
The listener object created from that class is then registered with a
<code>Window</code>
using the <code>Window</code>'s <code>addWindowFocusListener</code> method.
When the <code>Window</code>'s
status changes by virtue of it being opened, closed, activated, deactivated,
iconified, or deiconified, or by focus being transfered into or out of the
<code>Window</code>, the relevant method in the listener object is invoked,
and the <code>WindowEvent</code> is passed to it.

@author David Mendenhall

@see WindowAdapter
@see WindowEvent
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/windowlistener.html\">Tutorial: Writing a Window Listener</a>

@since 1.4
"
      classrelation 801794 // <generalisation>
	relation 801794 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 801794 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 2499074 "windowGainedFocus"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the Window is set to be the focused Window, which means
that the Window, or one of its subcomponents, will receive keyboard
events.
"
      end

      operation 2499202 "windowLostFocus"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the Window is no longer the focused Window, which means
that keyboard events will no longer be delivered to the Window or any of
its subcomponents.
"
      end
    end

    class 423938 "WindowEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A low-level event that indicates that a window has changed its status. This
low-level event is generated by a Window object when it is opened, closed,
activated, deactivated, iconified, or deiconified, or when focus is
transfered into or out of the Window.
<P>
The event is passed to every <code>WindowListener</code>
or <code>WindowAdapter</code> object which registered to receive such
events using the window's <code>addWindowListener</code> method.
(<code>WindowAdapter</code> objects implement the
<code>WindowListener</code> interface.) Each such listener object
gets this <code>WindowEvent</code> when the event occurs.
<p>
An unspecified behavior will be caused if the {@code id} parameter
of any particular {@code WindowEvent} instance is not
in the range from {@code WINDOW_FIRST} to {@code WINDOW_LAST}.

@author Carl Quinn
@author Amy Fowler

@see WindowAdapter
@see WindowListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/windowlistener.html\">Tutorial: Writing a Window Listener</a>

@since JDK1.1
"
      classrelation 3009666 // <generalisation>
	relation 3009666 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3009666 // <generalisation>
	  b parent class_ref 346242 // ComponentEvent
      end

      attribute 1510658 "WINDOW_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 200"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The first number in the range of ids used for window events.

"
      end

      attribute 1510786 "WINDOW_OPENED"
	class_attribute const_attribute public explicit_type "int"
	init_value " WINDOW_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The window opened event.  This event is delivered only
the first time a window is made visible.

 200"
      end

      attribute 1510914 "WINDOW_CLOSING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 + WINDOW_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The \"window is closing\" event. This event is delivered when
the user attempts to close the window from the window's system menu.
If the program does not explicitly hide or dispose the window
while processing this event, the window close operation will be
cancelled.

Event.WINDOW_DESTROY"
      end

      attribute 1511042 "WINDOW_CLOSED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2 + WINDOW_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The window closed event. This event is delivered after the displayable
window has been closed as the result of a call to dispose.
@see java.awt.Component#isDisplayable
@see Window#dispose

"
      end

      attribute 1511170 "WINDOW_ICONIFIED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3 + WINDOW_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The window iconified event. This event is delivered when
the window has been changed from a normal to a minimized state.
For many platforms, a minimized window is displayed as
the icon specified in the window's iconImage property.
@see java.awt.Frame#setIconImage

Event.WINDOW_ICONIFY"
      end

      attribute 1511298 "WINDOW_DEICONIFIED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4 + WINDOW_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The window deiconified event type. This event is delivered when
the window has been changed from a minimized to a normal state.

Event.WINDOW_DEICONIFY"
      end

      attribute 1511426 "WINDOW_ACTIVATED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5 + WINDOW_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The window-activated event type. This event is delivered when the Window
becomes the active Window. Only a Frame or a Dialog can be the active
Window. The native windowing system may denote the active Window or its
children with special decorations, such as a highlighted title bar. The
active Window is always either the focused Window, or the first Frame or
Dialog that is an owner of the focused Window.

"
      end

      attribute 1511554 "WINDOW_DEACTIVATED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6 + WINDOW_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The window-deactivated event type. This event is delivered when the
Window is no longer the active Window. Only a Frame or a Dialog can be
the active Window. The native windowing system may denote the active
Window or its children with special decorations, such as a highlighted
title bar. The active Window is always either the focused Window, or the
first Frame or Dialog that is an owner of the focused Window.

"
      end

      attribute 1511682 "WINDOW_GAINED_FOCUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7 + WINDOW_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The window-gained-focus event type. This event is delivered when the
Window becomes the focused Window, which means that the Window, or one
of its subcomponents, will receive keyboard events.

"
      end

      attribute 1511810 "WINDOW_LOST_FOCUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8 + WINDOW_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The window-lost-focus event type. This event is delivered when a Window
is no longer the focused Window, which means keyboard events will no
longer be delivered to the Window or any of its subcomponents.

"
      end

      attribute 1511938 "WINDOW_STATE_CHANGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 9 + WINDOW_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The window-state-changed event type.  This event is delivered
when a Window's state is changed by virtue of it being
iconified, maximized etc.
@since 1.4

"
      end

      attribute 1512066 "WINDOW_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " WINDOW_STATE_CHANGED"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The last number in the range of ids used for window events.

"
      end

      classrelation 3009794 // opposite (<unidirectional association>)
	relation 3009794 --->
	  a role_name "opposite" package
	    comment "
The other Window involved in this focus or activation change. For a
WINDOW_ACTIVATED or WINDOW_GAINED_FOCUS event, this is the Window that
lost activation or focus. For a WINDOW_DEACTIVATED or WINDOW_LOST_FOCUS
event, this is the Window that gained activation or focus. For any other
type of WindowEvent, or if the focus or activation change occurs with a
native application, a Java application in a different VM, or with no
other Window, null is returned.

@see #getOppositeWindow
@since 1.4

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3009794 // opposite (<unidirectional association>)
	  b parent class_ref 347394 // Window
      end

      attribute 1512194 "oldState"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "TBS

"
      end

      attribute 1512322 "newState"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1512450 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1567959133147912127L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.1 serialVersionUID

"
      end

      operation 6450306 "WindowEvent"
	public explicit_return_type ""
	nparams 5
	  param inout name "source" type class_ref 347394 // Window
	  param in name "id" explicit_type "int"
	  param inout name "opposite" type class_ref 347394 // Window
	  param in name "oldState" explicit_type "int"
	  param in name "newState" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>WindowEvent</code> object.
<p>This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source    The <code>Window</code> object
                   that originated the event
@param id        An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link WindowEvent}
@param opposite  The other window involved in the focus or activation
                     change, or <code>null</code>
@param oldState  Previous state of the window for window state change event.
                 See {@code #getOldState()} for allowable values
@param newState  New state of the window for window state change event.
                 See {@code #getNewState()} for allowable values
@throws IllegalArgumentException if <code>source</code> is null
@see #getWindow()
@see #getID()
@see #getOppositeWindow()
@see #getOldState()
@see #getNewState()
@since 1.4
"
      end

      operation 6450434 "WindowEvent"
	public explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 347394 // Window
	  param in name "id" explicit_type "int"
	  param inout name "opposite" type class_ref 347394 // Window
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>WindowEvent</code> object with the
specified opposite <code>Window</code>. The opposite
<code>Window</code> is the other <code>Window</code>
involved in this focus or activation change.
For a <code>WINDOW_ACTIVATED</code> or
<code>WINDOW_GAINED_FOCUS</code> event, this is the
<code>Window</code> that lost activation or focus.
For a <code>WINDOW_DEACTIVATED</code> or
<code>WINDOW_LOST_FOCUS</code> event, this is the
<code>Window</code> that gained activation or focus.
If this focus change occurs with a native application, with a
Java application in a different VM, or with no other
<code>Window</code>, then the opposite Window is <code>null</code>.
<p>This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source     The <code>Window</code> object that
                  originated the event
@param id        An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link WindowEvent}.
                 It is expected that this constructor will not
                 be used for other then
                 {@code WINDOW_ACTIVATED},{@code WINDOW_DEACTIVATED},
                 {@code WINDOW_GAINED_FOCUS}, or {@code WINDOW_LOST_FOCUS}.
                 {@code WindowEvent} types,
                 because the opposite <code>Window</code> of other event types
                 will always be {@code null}.
@param opposite   The other <code>Window</code> involved in the
                  focus or activation change, or <code>null</code>
@throws IllegalArgumentException if <code>source</code> is null
@see #getWindow()
@see #getID()
@see #getOppositeWindow()
@since 1.4
"
      end

      operation 6450562 "WindowEvent"
	public explicit_return_type ""
	nparams 4
	  param inout name "source" type class_ref 347394 // Window
	  param in name "id" explicit_type "int"
	  param in name "oldState" explicit_type "int"
	  param in name "newState" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>WindowEvent</code> object with the specified
previous and new window states.
<p>This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source    The <code>Window</code> object
                 that originated the event
@param id        An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link WindowEvent}.
                 It is expected that this constructor will not
                 be used for other then
                 {@code WINDOW_STATE_CHANGED}
                 {@code WindowEvent}
                 types, because the previous and new window
                 states are meaningless for other event types.
@param oldState  An integer representing the previous window state.
                 See {@code #getOldState()} for allowable values
@param newState  An integer representing the new window state.
                 See {@code #getNewState()} for allowable values
@throws IllegalArgumentException if <code>source</code> is null
@see #getWindow()
@see #getID()
@see #getOldState()
@see #getNewState()
@since 1.4
"
      end

      operation 6450690 "WindowEvent"
	public explicit_return_type ""
	nparams 2
	  param inout name "source" type class_ref 347394 // Window
	  param in name "id" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>WindowEvent</code> object.
<p>This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source The <code>Window</code> object that originated the event
@param id     An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link WindowEvent}.
@throws IllegalArgumentException if <code>source</code> is null
@see #getWindow()
@see #getID()
"
      end

      operation 6450818 "getWindow"
	public return_type class_ref 347394 // Window
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the originator of the event.

@return the Window object that originated the event
"
      end

      operation 6450946 "getOppositeWindow"
	public return_type class_ref 347394 // Window
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the other Window involved in this focus or activation change.
For a WINDOW_ACTIVATED or WINDOW_GAINED_FOCUS event, this is the Window
that lost activation or focus. For a WINDOW_DEACTIVATED or
WINDOW_LOST_FOCUS event, this is the Window that gained activation or
focus. For any other type of WindowEvent, or if the focus or activation
change occurs with a native application, with a Java application in a
different VM or context, or with no other Window, null is returned.

@return the other Window involved in the focus or activation change, or
        null
@since 1.4
"
      end

      operation 6451074 "getOldState"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For <code>WINDOW_STATE_CHANGED</code> events returns the
previous state of the window. The state is
represented as a bitwise mask.
<ul>
<li><code>NORMAL</code>
<br>Indicates that no state bits are set.
<li><code>ICONIFIED</code>
<li><code>MAXIMIZED_HORIZ</code>
<li><code>MAXIMIZED_VERT</code>
<li><code>MAXIMIZED_BOTH</code>
<br>Concatenates <code>MAXIMIZED_HORIZ</code>
and <code>MAXIMIZED_VERT</code>.
</ul>

@return a bitwise mask of the previous window state
@see java.awt.Frame#getExtendedState()
@since 1.4
"
      end

      operation 6451202 "getNewState"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For <code>WINDOW_STATE_CHANGED</code> events returns the
new state of the window. The state is
represented as a bitwise mask.
<ul>
<li><code>NORMAL</code>
<br>Indicates that no state bits are set.
<li><code>ICONIFIED</code>
<li><code>MAXIMIZED_HORIZ</code>
<li><code>MAXIMIZED_VERT</code>
<li><code>MAXIMIZED_BOTH</code>
<br>Concatenates <code>MAXIMIZED_HORIZ</code>
and <code>MAXIMIZED_VERT</code>.
</ul>

@return a bitwise mask of the new window state
@see java.awt.Frame#getExtendedState()
@since 1.4
"
      end

      operation 6451330 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter string identifying this event.
This method is useful for event-logging and for debugging.

@return a string identifying the event and its attributes
"
      end
    end

    class 433794 "WindowListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving window events.
The class that is interested in processing a window event
either implements this interface (and all the methods it
contains) or extends the abstract <code>WindowAdapter</code> class
(overriding only the methods of interest).
The listener object created from that class is then registered with a
Window using the window's <code>addWindowListener</code>
method. When the window's status changes by virtue of being opened,
closed, activated or deactivated, iconified or deiconified,
the relevant method in the listener object is invoked, and the
<code>WindowEvent</code> is passed to it.

@author Carl Quinn

@see WindowAdapter
@see WindowEvent
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/windowlistener.html\">Tutorial: How to Write Window Listeners</a>

@since 1.1
"
      classrelation 822786 // <generalisation>
	relation 822786 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 822786 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 2586370 "windowOpened"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked the first time a window is made visible.
"
      end

      operation 2586498 "windowClosing"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the user attempts to close the window
from the window's system menu.
"
      end

      operation 2586626 "windowClosed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a window has been closed as the result
of calling dispose on the window.
"
      end

      operation 2586754 "windowIconified"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a window is changed from a normal to a
minimized state. For many platforms, a minimized window
is displayed as the icon specified in the window's
iconImage property.
@see java.awt.Frame#setIconImage
"
      end

      operation 2586882 "windowDeiconified"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a window is changed from a minimized
to a normal state.
"
      end

      operation 2587010 "windowActivated"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the Window is set to be the active Window. Only a Frame or
a Dialog can be the active Window. The native windowing system may
denote the active Window or its children with special decorations, such
as a highlighted title bar. The active Window is always either the
focused Window, or the first Frame or Dialog that is an owner of the
focused Window.
"
      end

      operation 2587138 "windowDeactivated"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a Window is no longer the active Window. Only a Frame or a
Dialog can be the active Window. The native windowing system may denote
the active Window or its children with special decorations, such as a
highlighted title bar. The active Window is always either the focused
Window, or the first Frame or Dialog that is an owner of the focused
Window.
"
      end
    end

    class 440194 "ComponentAdapter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract adapter class for receiving component events.
The methods in this class are empty. This class exists as
convenience for creating listener objects.
<P>
Extend this class to create a <code>ComponentEvent</code> listener
and override the methods for the events of interest. (If you implement the
<code>ComponentListener</code> interface, you have to define all of
the methods in it. This abstract class defines null methods for them
all, so you can only have to define methods for events you care about.)
<P>
Create a listener object using your class and then register it with a
component using the component's <code>addComponentListener</code>
method. When the component's size, location, or visibility
changes, the relevant method in the listener object is invoked,
and the <code>ComponentEvent</code> is passed to it.

@see ComponentEvent
@see ComponentListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/componentlistener.html\">Tutorial: Writing a Component Listener</a>

@author Carl Quinn
@since 1.1
"
      classrelation 845058 // <realization>
	relation 845058 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 845058 // <realization>
	  b parent class_ref 341890 // ComponentListener
      end

      operation 2632706 "componentResized"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346242 // ComponentEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the component's size changes.
"
      end

      operation 2632834 "componentMoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346242 // ComponentEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the component's position changes.
"
      end

      operation 2632962 "componentShown"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346242 // ComponentEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the component has been made visible.
"
      end

      operation 2633090 "componentHidden"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346242 // ComponentEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the component has been made invisible.
"
      end
    end

    class 442754 "FocusAdapter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract adapter class for receiving keyboard focus events.
The methods in this class are empty. This class exists as
convenience for creating listener objects.
<P>
Extend this class to create a <code>FocusEvent</code> listener
and override the methods for the events of interest. (If you implement the
<code>FocusListener</code> interface, you have to define all of
the methods in it. This abstract class defines null methods for them
all, so you can only have to define methods for events you care about.)
<P>
Create a listener object using the extended class and then register it with
a component using the component's <code>addFocusListener</code>
method. When the component gains or loses the keyboard focus,
the relevant method in the listener object is invoked,
and the <code>FocusEvent</code> is passed to it.

@see FocusEvent
@see FocusListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html\">Tutorial: Writing a Focus Listener</a>

@author Carl Quinn
@since 1.1
"
      classrelation 853378 // <realization>
	relation 853378 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 853378 // <realization>
	  b parent class_ref 342018 // FocusListener
      end

      operation 2647298 "focusGained"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346370 // FocusEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a component gains the keyboard focus.
"
      end

      operation 2647426 "focusLost"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346370 // FocusEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a component loses the keyboard focus.
"
      end
    end

    class 469378 "WindowStateListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving window state events.
<p>
The class that is interested in processing a window state event
either implements this interface (and all the methods it contains)
or extends the abstract <code>WindowAdapter</code> class
(overriding only the methods of interest).
<p>
The listener object created from that class is then registered with
a window using the <code>Window</code>'s
<code>addWindowStateListener</code> method.  When the window's
state changes by virtue of being iconified, maximized etc., the
<code>windowStateChanged</code> method in the listener object is
invoked, and the <code>WindowEvent</code> is passed to it.

@see java.awt.event.WindowAdapter
@see java.awt.event.WindowEvent

@since 1.4
"
      classrelation 949250 // <generalisation>
	relation 949250 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 949250 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 2877186 "windowStateChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when window state is changed.
"
      end
    end

    class 477570 "WindowAdapter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract adapter class for receiving window events.
The methods in this class are empty. This class exists as
convenience for creating listener objects.
<P>
Extend this class to create a <code>WindowEvent</code> listener
and override the methods for the events of interest. (If you implement the
<code>WindowListener</code> interface, you have to define all of
the methods in it. This abstract class defines null methods for them
all, so you can only have to define methods for events you care about.)
<P>
Create a listener object using the extended class and then register it with
a Window using the window's <code>addWindowListener</code>
method. When the window's status changes by virtue of being opened,
closed, activated or deactivated, iconified or deiconified,
the relevant method in the listener
object is invoked, and the <code>WindowEvent</code> is passed to it.

@see WindowEvent
@see WindowListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/windowlistener.html\">Tutorial: Writing a Window Listener</a>

@author Carl Quinn
@author Amy Fowler
@author David Mendenhall
@since 1.1
"
      classrelation 949122 // <realization>
	relation 949122 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 949122 // <realization>
	  b parent class_ref 433794 // WindowListener
      end

      classrelation 949378 // <realization>
	relation 949378 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 949378 // <realization>
	  b parent class_ref 469378 // WindowStateListener
      end

      classrelation 949506 // <realization>
	relation 949506 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 949506 // <realization>
	  b parent class_ref 422914 // WindowFocusListener
      end

      operation 2877314 "windowOpened"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a window has been opened.
"
      end

      operation 2877442 "windowClosing"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a window is in the process of being closed.
The close operation can be overridden at this point.
"
      end

      operation 2877570 "windowClosed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a window has been closed.
"
      end

      operation 2877698 "windowIconified"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a window is iconified.
"
      end

      operation 2877826 "windowDeiconified"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a window is de-iconified.
"
      end

      operation 2877954 "windowActivated"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a window is activated.
"
      end

      operation 2878082 "windowDeactivated"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a window is de-activated.
"
      end

      operation 2878210 "windowStateChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a window state is changed.
@since 1.4
"
      end

      operation 2878338 "windowGainedFocus"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the Window is set to be the focused Window, which means
that the Window, or one of its subcomponents, will receive keyboard
events.

@since 1.4
"
      end

      operation 2878466 "windowLostFocus"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 423938 // WindowEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the Window is no longer the focused Window, which means
that keyboard events will no longer be delivered to the Window or any of
its subcomponents.

@since 1.4
"
      end
    end

    class 856066 "AdjustmentListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving adjustment events.

@author Amy Fowler
@since 1.1
"
      classrelation 2883586 // <generalisation>
	relation 2883586 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2883586 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 6077058 "adjustmentValueChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 857090 // AdjustmentEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the value of the adjustable has changed.
"
      end
    end

    class 857090 "AdjustmentEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The adjustment event emitted by Adjustable objects like
{@link java.awt.Scrollbar} and {@link java.awt.ScrollPane}.
When the user changes the value of the scrolling component,
it receives an instance of {@code AdjustmentEvent}.
<p>
An unspecified behavior will be caused if the {@code id} parameter
of any particular {@code AdjustmentEvent} instance is not
in the range from {@code ADJUSTMENT_FIRST} to {@code ADJUSTMENT_LAST}.
<p>
The {@code type} of any {@code AdjustmentEvent} instance takes one of the following
values:
                    <ul>
                    <li> {@code UNIT_INCREMENT}
                    <li> {@code UNIT_DECREMENT}
                    <li> {@code BLOCK_INCREMENT}
                    <li> {@code BLOCK_DECREMENT}
                    <li> {@code TRACK}
                    </ul>
Assigning the value different from listed above will cause an unspecified behavior.
@see java.awt.Adjustable
@see AdjustmentListener

@author Amy Fowler
@since 1.1
"
      classrelation 3005058 // <generalisation>
	relation 3005058 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3005058 // <generalisation>
	  b parent class_ref 339202 // AWTEvent
      end

      attribute 1467522 "ADJUSTMENT_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 601"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Marks the first integer id for the range of adjustment event ids.

"
      end

      attribute 1467650 "ADJUSTMENT_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 601"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Marks the last integer id for the range of adjustment event ids.

"
      end

      attribute 1467778 "ADJUSTMENT_VALUE_CHANGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " ADJUSTMENT_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The adjustment value changed event.

Event.SCROLL_LINE_UP"
      end

      attribute 1467906 "UNIT_INCREMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The unit increment adjustment type.

"
      end

      attribute 1468034 "UNIT_DECREMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The unit decrement adjustment type.

"
      end

      attribute 1468162 "BLOCK_DECREMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The block decrement adjustment type.

"
      end

      attribute 1468290 "BLOCK_INCREMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The block increment adjustment type.

"
      end

      attribute 1468418 "TRACK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The absolute tracking adjustment type.

"
      end

      classrelation 3005186 // adjustable (<unidirectional association>)
	relation 3005186 --->
	  a role_name "adjustable" package
	    comment "
The adjustable object that fired the event.

@serial
@see #getAdjustable

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3005186 // adjustable (<unidirectional association>)
	  b parent class_ref 855938 // Adjustable
      end

      attribute 1468546 "value"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<code>value</code> will contain the new value of the
adjustable object.  This value will always be  in a
range associated adjustable object.

@serial
@see #getValue

"
      end

      attribute 1468674 "adjustmentType"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The <code>adjustmentType</code> describes how the adjustable
object value has changed.
This value can be increased/decreased by a block or unit amount
where the block is associated with page increments/decrements,
and a unit is associated with line increments/decrements.

@serial
@see #getAdjustmentType

"
      end

      attribute 1468802 "isAdjusting"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The <code>isAdjusting</code> is true if the event is one
of the series of multiple adjustment events.

@since 1.4
@serial
@see #getValueIsAdjusting

"
      end

      attribute 1468930 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5700290645205279921L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.1 serialVersionUID

"
      end

      operation 6432642 "AdjustmentEvent"
	public explicit_return_type ""
	nparams 4
	  param inout name "source" type class_ref 855938 // Adjustable
	  param in name "id" explicit_type "int"
	  param in name "type" explicit_type "int"
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>AdjustmentEvent</code> object with the
specified <code>Adjustable</code> source, event type,
adjustment type, and value.
<p> This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source The <code>Adjustable</code> object where the
              event originated
@param id     An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link AdjustmentEvent}
@param type   An integer indicating the adjustment type.
                    For information on allowable values, see
                    the class description for {@link AdjustmentEvent}
@param value  The current value of the adjustment
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
@see #getAdjustmentType()
@see #getValue()
"
      end

      operation 6432770 "AdjustmentEvent"
	public explicit_return_type ""
	nparams 5
	  param inout name "source" type class_ref 855938 // Adjustable
	  param in name "id" explicit_type "int"
	  param in name "type" explicit_type "int"
	  param in name "value" explicit_type "int"
	  param inout name "isAdjusting" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>AdjustmentEvent</code> object with the
specified Adjustable source, event type, adjustment type, and value.
<p> This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source The <code>Adjustable</code> object where the
              event originated
@param id     An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link AdjustmentEvent}
@param type   An integer indicating the adjustment type.
                    For information on allowable values, see
                    the class description for {@link AdjustmentEvent}
@param value  The current value of the adjustment
@param isAdjusting A boolean that equals <code>true</code> if the event is one
              of a series of multiple adjusting events,
              otherwise <code>false</code>
@throws IllegalArgumentException if <code>source</code> is null
@since 1.4
@see #getSource()
@see #getID()
@see #getAdjustmentType()
@see #getValue()
@see #getValueIsAdjusting()
"
      end

      operation 6432898 "getAdjustable"
	public return_type class_ref 855938 // Adjustable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Adjustable</code> object where this event originated.

@return the <code>Adjustable</code> object where this event originated
"
      end

      operation 6433026 "getValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value in the adjustment event.

@return the current value in the adjustment event
"
      end

      operation 6433154 "getAdjustmentType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of adjustment which caused the value changed
event.  It will have one of the following values:
<ul>
<li>{@link #UNIT_INCREMENT}
<li>{@link #UNIT_DECREMENT}
<li>{@link #BLOCK_INCREMENT}
<li>{@link #BLOCK_DECREMENT}
<li>{@link #TRACK}
</ul>
@return one of the adjustment values listed above
"
      end

      operation 6433282 "getValueIsAdjusting"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this is one of multiple
adjustment events.

@return <code>true</code> if this is one of multiple
        adjustment events, otherwise returns <code>false</code>
@since 1.4
"
      end

      operation 6433410 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 857218 "TextListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The listener interface for receiving text events.

The class that is interested in processing a text event
implements this interface. The object created with that
class is then registered with a component using the
component's <code>addTextListener</code> method. When the
component's text changes, the listener object's
<code>textValueChanged</code> method is invoked.

@author Georges Saab

@see TextEvent

@since 1.1
"
      classrelation 2883842 // <generalisation>
	relation 2883842 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2883842 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 6077186 "textValueChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 857346 // TextEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the value of the text has changed.
The code written for this method performs the operations
that need to occur when text changes.
"
      end
    end

    class 857346 "TextEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A semantic event which indicates that an object's text changed.
This high-level event is generated by an object (such as a TextComponent)
when its text changes. The event is passed to
every <code>TextListener</code> object which registered to receive such
events using the component's <code>addTextListener</code> method.
<P>
The object that implements the <code>TextListener</code> interface gets
this <code>TextEvent</code> when the event occurs. The listener is
spared the details of processing individual mouse movements and key strokes
Instead, it can process a \"meaningful\" (semantic) event like \"text changed\".
<p>
An unspecified behavior will be caused if the {@code id} parameter
of any particular {@code TextEvent} instance is not
in the range from {@code TEXT_FIRST} to {@code TEXT_LAST}.

@author Georges Saab

@see java.awt.TextComponent
@see TextListener

@since 1.1
"
      classrelation 3009538 // <generalisation>
	relation 3009538 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3009538 // <generalisation>
	  b parent class_ref 339202 // AWTEvent
      end

      attribute 1510146 "TEXT_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 900"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The first number in the range of ids used for text events.

"
      end

      attribute 1510274 "TEXT_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 900"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The last number in the range of ids used for text events.

"
      end

      attribute 1510402 "TEXT_VALUE_CHANGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " TEXT_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This event id indicates that object's text changed.

"
      end

      attribute 1510530 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6269902291250941179L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.1 serialVersionUID

"
      end

      operation 6450050 "TextEvent"
	public explicit_return_type ""
	nparams 2
	  param inout name "source" type class_ref 129538 // Object
	  param in name "id" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>TextEvent</code> object.
<p> This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source The (<code>TextComponent</code>) object that
              originated the event
@param id     An integer that identifies the event type.
                    For information on allowable values, see
                    the class description for {@link TextEvent}
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
"
      end

      operation 6450178 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter string identifying this text event.
This method is useful for event-logging and for debugging.

@return a string identifying the event and its attributes
"
      end
    end

    class 864898 "PaintEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The component-level paint event.
This event is a special type which is used to ensure that
paint/update method calls are serialized along with the other
events delivered from the event queue.  This event is not
designed to be used with the Event Listener model; programs
should continue to override paint/update methods in order
render themselves properly.
<p>
An unspecified behavior will be caused if the {@code id} parameter
of any particular {@code PaintEvent} instance is not
in the range from {@code PAINT_FIRST} to {@code PAINT_LAST}.

@author Amy Fowler
@since 1.1
"
      classrelation 3009282 // <generalisation>
	relation 3009282 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3009282 // <generalisation>
	  b parent class_ref 346242 // ComponentEvent
      end

      attribute 1509506 "PAINT_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 800"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Marks the first integer id for the range of paint event ids.

"
      end

      attribute 1509634 "PAINT_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 801"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Marks the last integer id for the range of paint event ids.

"
      end

      attribute 1509762 "PAINT"
	class_attribute const_attribute public explicit_type "int"
	init_value " PAINT_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The paint event type.

"
      end

      attribute 1509890 "UPDATE"
	class_attribute const_attribute public explicit_type "int"
	init_value " PAINT_FIRST + 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The update event type.

801"
      end

      classrelation 3009410 // updateRect (<unidirectional association>)
	relation 3009410 --->
	  a role_name "updateRect" package
	    comment "
This is the rectangle that represents the area on the source
component that requires a repaint.
This rectangle should be non null.

@serial
@see java.awt.Rectangle
@see #setUpdateRect(Rectangle)
@see #getUpdateRect()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3009410 // updateRect (<unidirectional association>)
	  b parent class_ref 314114 // Rectangle
      end

      attribute 1510018 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1267492026433337593L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.1 serialVersionUID

"
      end

      operation 6449538 "PaintEvent"
	public explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 338818 // Component
	  param in name "id" explicit_type "int"
	  param inout name "updateRect" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>PaintEvent</code> object with the specified
source component and type.
<p> This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source     The object where the event originated
@param id           The integer that identifies the event type.
                    For information on allowable values, see
                    the class description for {@link PaintEvent}
@param updateRect The rectangle area which needs to be repainted
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
@see #getUpdateRect()
"
      end

      operation 6449666 "getUpdateRect"
	public return_type class_ref 314114 // Rectangle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the rectangle representing the area which needs to be
repainted in response to this event.
"
      end

      operation 6449794 "setUpdateRect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "updateRect" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the rectangle representing the area which needs to be
repainted in response to this event.
@param updateRect the rectangle area which needs to be repainted
"
      end

      operation 6449922 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 886402 "AWTEventListenerProxy"
      visibility public 
      nactuals 1
      actual class class_ref 886530 // EventListenerProxy
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class which extends the {@code EventListenerProxy}
specifically for adding an {@code AWTEventListener}
for a specific event mask.
Instances of this class can be added as {@code AWTEventListener}s
to a {@code Toolkit} object.
<p>
The {@code getAWTEventListeners} method of {@code Toolkit}
can return a mixture of {@code AWTEventListener}
and {@code AWTEventListenerProxy} objects.

@see java.awt.Toolkit
@see java.util.EventListenerProxy
@since 1.4
"
      classrelation 3005442 // <realization>
	relation 3005442 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3005442 // <realization>
	  b parent class_ref 886530 // EventListenerProxy
      end

      classrelation 3005570 // <realization>
	relation 3005570 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3005570 // <realization>
	  b parent class_ref 351234 // AWTEventListener
      end

      attribute 1469186 "eventMask"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6433794 "AWTEventListenerProxy"
	public explicit_return_type ""
	nparams 2
	  param in name "eventMask" explicit_type "long"
	  param inout name "listener" type class_ref 351234 // AWTEventListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor which binds the {@code AWTEventListener}
to a specific event mask.

@param eventMask  the bitmap of event types to receive
@param listener   the listener object
"
      end

      operation 6433922 "eventDispatched"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 339202 // AWTEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forwards the AWT event to the listener delegate.

@param event  the AWT event
"
      end

      operation 6434050 "getEventMask"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the event mask associated with the listener.

@return the event mask associated with the listener
"
      end
    end

    class 886658 "ContainerAdapter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract adapter class for receiving container events.
The methods in this class are empty. This class exists as
convenience for creating listener objects.
<P>
Extend this class to create a <code>ContainerEvent</code> listener
and override the methods for the events of interest. (If you implement the
<code>ContainerListener</code> interface, you have to define all of
the methods in it. This abstract class defines null methods for them
all, so you can only have to define methods for events you care about.)
<P>
Create a listener object using the extended class and then register it with
a component using the component's <code>addContainerListener</code>
method. When the container's contents change because a component has
been added or removed, the relevant method in the listener object is invoked,
and the <code>ContainerEvent</code> is passed to it.

@see ContainerEvent
@see ContainerListener
@see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/containerlistener.html\">Tutorial: Writing a Container Listener</a>

@author Amy Fowler
@since 1.1
"
      classrelation 3005826 // <realization>
	relation 3005826 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3005826 // <realization>
	  b parent class_ref 350082 // ContainerListener
      end

      operation 6434562 "componentAdded"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 350338 // ContainerEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a component has been added to the container.
"
      end

      operation 6434690 "componentRemoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 350338 // ContainerEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a component has been removed from the container.
"
      end
    end

    class 886786 "HierarchyBoundsAdapter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract adapter class for receiving ancestor moved and resized events.
The methods in this class are empty. This class exists as a
convenience for creating listener objects.
<p>
Extend this class and override the method for the event of interest. (If
you implement the <code>HierarchyBoundsListener</code> interface, you have
to define both methods in it. This abstract class defines null methods for
them both, so you only have to define the method for the event you care
about.)
<p>
Create a listener object using your class and then register it with a
Component using the Component's <code>addHierarchyBoundsListener</code>
method. When the hierarchy to which the Component belongs changes by
resize or movement of an ancestor, the relevant method in the listener
object is invoked, and the <code>HierarchyEvent</code> is passed to it.

@author      David Mendenhall
@see         HierarchyBoundsListener
@see         HierarchyEvent
@since       1.3
"
      classrelation 3006466 // <realization>
	relation 3006466 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3006466 // <realization>
	  b parent class_ref 342274 // HierarchyBoundsListener
      end

      operation 6436098 "ancestorMoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346882 // HierarchyEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when an ancestor of the source is moved.
"
      end

      operation 6436226 "ancestorResized"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 346882 // HierarchyEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when an ancestor of the source is resized.
"
      end
    end

    class 887042 "InvocationEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An event which executes the <code>run()</code> method on a <code>Runnable
</code> when dispatched by the AWT event dispatcher thread. This class can
be used as a reference implementation of <code>ActiveEvent</code> rather
than declaring a new class and defining <code>dispatch()</code>.<p>

Instances of this class are placed on the <code>EventQueue</code> by calls
to <code>invokeLater</code> and <code>invokeAndWait</code>. Client code
can use this fact to write replacement functions for <code>invokeLater
</code> and <code>invokeAndWait</code> without writing special-case code
in any <code>AWTEventListener</code> objects.
<p>
An unspecified behavior will be caused if the {@code id} parameter
of any particular {@code InvocationEvent} instance is not
in the range from {@code INVOCATION_FIRST} to {@code INVOCATION_LAST}.

@author      Fred Ecks
@author      David Mendenhall

@see         java.awt.ActiveEvent
@see         java.awt.EventQueue#invokeLater
@see         java.awt.EventQueue#invokeAndWait
@see         AWTEventListener

@since       1.2
"
      classrelation 3007618 // <generalisation>
	relation 3007618 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3007618 // <generalisation>
	  b parent class_ref 339202 // AWTEvent
      end

      classrelation 3007746 // <realization>
	relation 3007746 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3007746 // <realization>
	  b parent class_ref 855810 // ActiveEvent
      end

      extra_member 152834 "initialization"
	
	cpp "" ""
	java "  static {
        AWTAccessor.setInvocationEventAccessor(new AWTAccessor.InvocationEventAccessor() {
            @Override
            public void dispose(InvocationEvent invocationEvent) {
                invocationEvent.finishedDispatching(false);
            }
        });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 1476994 "INVOCATION_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1200"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Marks the first integer id for the range of invocation event ids.

"
      end

      attribute 1477122 "INVOCATION_DEFAULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " INVOCATION_FIRST"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The default id for all InvocationEvents.

"
      end

      attribute 1477250 "INVOCATION_LAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " INVOCATION_DEFAULT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Marks the last integer id for the range of invocation event ids.

"
      end

      classrelation 3007874 // runnable (<unidirectional association>)
	relation 3007874 --->
	  a role_name "runnable" protected
	    comment "
The Runnable whose run() method will be called.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3007874 // runnable (<unidirectional association>)
	  b parent class_ref 128770 // Runnable
      end

      classrelation 3008002 // notifier (<unidirectional association>)
	relation 3008002 --->
	  a role_name "notifier" volatile protected
	    comment "
The (potentially null) Object whose notifyAll() method will be called
immediately after the Runnable.run() method has returned or thrown an exception
or after the event was disposed.

@see #isDispatched

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3008002 // notifier (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3008130 // listener (<unidirectional association>)
	relation 3008130 --->
	  a role_name "listener" const_relation private
	    comment "
The (potentially null) Runnable whose run() method will be called
immediately after the event was dispatched or disposed.

@see #isDispatched
@since 1.8

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3008130 // listener (<unidirectional association>)
	  b parent class_ref 128770 // Runnable
      end

      attribute 1477378 "dispatched"
	volatile private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates whether the <code>run()</code> method of the <code>runnable</code>
was executed or not.

@see #isDispatched
@since 1.7

"
      end

      attribute 1477506 "catchExceptions"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set to true if dispatch() catches Throwable and stores it in the
exception instance variable. If false, Throwables are propagated up
to the EventDispatchThread's dispatch loop.

"
      end

      classrelation 3008258 // exception (<unidirectional association>)
	relation 3008258 --->
	  a role_name "exception" init_value " null" private
	    comment "
The (potentially null) Exception thrown during execution of the
Runnable.run() method. This variable will also be null if a particular
instance does not catch exceptions.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3008258 // exception (<unidirectional association>)
	  b parent class_ref 132226 // Exception
      end

      classrelation 3008386 // throwable (<unidirectional association>)
	relation 3008386 --->
	  a role_name "throwable" init_value " null" private
	    comment "
The (potentially null) Throwable thrown during execution of the
Runnable.run() method. This variable will also be null if a particular
instance does not catch exceptions.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3008386 // throwable (<unidirectional association>)
	  b parent class_ref 129922 // Throwable
      end

      attribute 1477634 "when"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The timestamp of when this event occurred.

@serial
@see #getWhen

"
      end

      attribute 1477762 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 436056344909459450L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.1 serialVersionUID.

"
      end

      operation 6440962 "InvocationEvent"
	public explicit_return_type ""
	nparams 2
	  param inout name "source" type class_ref 129538 // Object
	  param inout name "runnable" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InvocationEvent</code> with the specified
source which will execute the runnable's <code>run</code>
method when dispatched.
<p>This is a convenience constructor.  An invocation of the form
<tt>InvocationEvent(source, runnable)</tt>
behaves in exactly the same way as the invocation of
<tt>{@link #InvocationEvent(Object, Runnable, Object, boolean) InvocationEvent}(source, runnable, null, false)</tt>.
<p> This method throws an <code>IllegalArgumentException</code>
if <code>source</code> is <code>null</code>.

@param source    The <code>Object</code> that originated the event
@param runnable  The <code>Runnable</code> whose <code>run</code>
                 method will be executed
@throws IllegalArgumentException if <code>source</code> is null

@see #getSource()
@see #InvocationEvent(Object, Runnable, Object, boolean)
"
      end

      operation 6441090 "InvocationEvent"
	public explicit_return_type ""
	nparams 4
	  param inout name "source" type class_ref 129538 // Object
	  param inout name "runnable" type class_ref 128770 // Runnable
	  param inout name "notifier" type class_ref 129538 // Object
	  param inout name "catchThrowables" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InvocationEvent</code> with the specified
source which will execute the runnable's <code>run</code>
method when dispatched.  If notifier is non-<code>null</code>,
<code>notifyAll()</code> will be called on it
immediately after <code>run</code> has returned or thrown an exception.
<p>An invocation of the form <tt>InvocationEvent(source,
runnable, notifier, catchThrowables)</tt>
behaves in exactly the same way as the invocation of
<tt>{@link #InvocationEvent(Object, int, Runnable, Object, boolean) InvocationEvent}(source, InvocationEvent.INVOCATION_DEFAULT, runnable, notifier, catchThrowables)</tt>.
<p>This method throws an <code>IllegalArgumentException</code>
if <code>source</code> is <code>null</code>.

@param source            The <code>Object</code> that originated
                         the event
@param runnable          The <code>Runnable</code> whose
                         <code>run</code> method will be
                         executed
@param notifier          The {@code Object} whose <code>notifyAll</code>
                         method will be called after
                         <code>Runnable.run</code> has returned or
                         thrown an exception or after the event was
                         disposed
@param catchThrowables   Specifies whether <code>dispatch</code>
                         should catch Throwable when executing
                         the <code>Runnable</code>'s <code>run</code>
                         method, or should instead propagate those
                         Throwables to the EventDispatchThread's
                         dispatch loop
@throws IllegalArgumentException if <code>source</code> is null

@see #getSource()
@see     #InvocationEvent(Object, int, Runnable, Object, boolean)
"
      end

      operation 6441218 "InvocationEvent"
	public explicit_return_type ""
	nparams 4
	  param inout name "source" type class_ref 129538 // Object
	  param inout name "runnable" type class_ref 128770 // Runnable
	  param inout name "listener" type class_ref 128770 // Runnable
	  param inout name "catchThrowables" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InvocationEvent</code> with the specified
source which will execute the runnable's <code>run</code>
method when dispatched.  If listener is non-<code>null</code>,
<code>listener.run()</code> will be called immediately after
<code>run</code> has returned, thrown an exception or the event
was disposed.
<p>This method throws an <code>IllegalArgumentException</code>
if <code>source</code> is <code>null</code>.

@param source            The <code>Object</code> that originated
                         the event
@param runnable          The <code>Runnable</code> whose
                         <code>run</code> method will be
                         executed
@param listener          The <code>Runnable</code>Runnable whose
                         <code>run()</code> method will be called
                         after the {@code InvocationEvent}
                         was dispatched or disposed
@param catchThrowables   Specifies whether <code>dispatch</code>
                         should catch Throwable when executing
                         the <code>Runnable</code>'s <code>run</code>
                         method, or should instead propagate those
                         Throwables to the EventDispatchThread's
                         dispatch loop
@throws IllegalArgumentException if <code>source</code> is null
"
      end

      operation 6441346 "InvocationEvent"
	protected explicit_return_type ""
	nparams 5
	  param inout name "source" type class_ref 129538 // Object
	  param in name "id" explicit_type "int"
	  param inout name "runnable" type class_ref 128770 // Runnable
	  param inout name "notifier" type class_ref 129538 // Object
	  param inout name "catchThrowables" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InvocationEvent</code> with the specified
source and ID which will execute the runnable's <code>run</code>
method when dispatched.  If notifier is non-<code>null</code>,
<code>notifyAll</code> will be called on it immediately after
<code>run</code> has returned or thrown an exception.
<p>This method throws an
<code>IllegalArgumentException</code> if <code>source</code>
is <code>null</code>.

@param source            The <code>Object</code> that originated
                         the event
@param id     An integer indicating the type of event.
                    For information on allowable values, see
                    the class description for {@link InvocationEvent}
@param runnable          The <code>Runnable</code> whose
                         <code>run</code> method will be executed
@param notifier          The <code>Object</code> whose <code>notifyAll</code>
                         method will be called after
                         <code>Runnable.run</code> has returned or
                         thrown an exception or after the event was
                         disposed
@param catchThrowables   Specifies whether <code>dispatch</code>
                         should catch Throwable when executing the
                         <code>Runnable</code>'s <code>run</code>
                         method, or should instead propagate those
                         Throwables to the EventDispatchThread's
                         dispatch loop
@throws IllegalArgumentException if <code>source</code> is null
@see #getSource()
@see #getID()
"
      end

      operation 6441474 "InvocationEvent"
	private explicit_return_type ""
	nparams 6
	  param inout name "source" type class_ref 129538 // Object
	  param in name "id" explicit_type "int"
	  param inout name "runnable" type class_ref 128770 // Runnable
	  param inout name "notifier" type class_ref 129538 // Object
	  param inout name "listener" type class_ref 128770 // Runnable
	  param inout name "catchThrowables" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6441602 "dispatch"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the Runnable's <code>run()</code> method and notifies the
notifier (if any) when <code>run()</code> has returned or thrown an exception.

@see #isDispatched
"
      end

      operation 6441730 "getException"
	public return_type class_ref 132226 // Exception
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns any Exception caught while executing the Runnable's <code>run()
</code> method.

@return  A reference to the Exception if one was thrown; null if no
         Exception was thrown or if this InvocationEvent does not
         catch exceptions
"
      end

      operation 6441858 "getThrowable"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns any Throwable caught while executing the Runnable's <code>run()
</code> method.

@return  A reference to the Throwable if one was thrown; null if no
         Throwable was thrown or if this InvocationEvent does not
         catch Throwables
@since 1.5
"
      end

      operation 6441986 "getWhen"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the timestamp of when this event occurred.

@return this event's timestamp
@since 1.4
"
      end

      operation 6442114 "isDispatched"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if the event is dispatched or any exception is
thrown while dispatching, {@code false} otherwise. The method should
be called by a waiting thread that calls the {@code notifier.wait()} method.
Since spurious wakeups are possible (as explained in {@link Object#wait()}),
this method should be used in a waiting loop to ensure that the event
got dispatched:
<pre>
    while (!event.isDispatched()) {
        notifier.wait();
    }
</pre>
If the waiting thread wakes up without dispatching the event,
the {@code isDispatched()} method returns {@code false}, and
the {@code while} loop executes once more, thus, causing
the awakened thread to revert to the waiting mode.
<p>
If the {@code notifier.notifyAll()} happens before the waiting thread
enters the {@code notifier.wait()} method, the {@code while} loop ensures
that the waiting thread will not enter the {@code notifier.wait()} method.
Otherwise, there is no guarantee that the waiting thread will ever be woken
from the wait.

@return {@code true} if the event has been dispatched, or any exception
has been thrown while dispatching, {@code false} otherwise
@see #dispatch
@see #notifier
@see #catchExceptions
@since 1.7
"
      end

      operation 6442242 "finishedDispatching"
	private explicit_return_type "void"
	nparams 1
	  param inout name "dispatched" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the event was dispatched or disposed
@param dispatched true if the event was dispatched
                  false if the event was disposed
"
      end

      operation 6442370 "paramString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter string identifying this event.
This method is useful for event-logging and for debugging.

@return  A string identifying the event and its attributes
"
      end
    end

    class 887170 "NativeLibLoader"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 6449410 "loadLibraries"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is copied from java.awt.Toolkit since we need the library
loaded in sun.awt.image also:

WARNING: This is a temporary workaround for a problem in the
way the AWT loads native libraries. A number of classes in this
package (sun.awt.image) have a native method, initIDs(),
which initializes
the JNI field and method ids used in the native portion of
their implementation.

Since the use and storage of these ids is done by the
implementation libraries, the implementation of these method is
provided by the particular AWT implementations (for example,
 \"Toolkit\"s/Peer), such as Motif, Microsoft Windows, or Tiny. The
problem is that this means that the native libraries must be
loaded by the java.* classes, which do not necessarily know the
names of the libraries to load. A better way of doing this
would be to provide a separate library which defines java.awt.*
initIDs, and exports the relevant symbols out to the
implementation libraries.

For now, we know it's done by the implementation, and we assume
that the name of the library is \"awt\".  -br.
"
      end
    end
  end

  deploymentview 141954 "event"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 271618 "ComponentListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 341890 // ComponentListener
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 271746 "FocusListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 342018 // FocusListener
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 272002 "ContainerListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 350082 // ContainerListener
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 272258 "AWTEventListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
import java.awt.AWTEvent;
${definition}"
      associated_elems
	class_ref 351234 // AWTEventListener
      end
      comment "Copyright (c) 1998, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 272642 "ActionListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 354306 // ActionListener
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 275714 "MouseListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 342530 // MouseListener
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 275842 "MouseWheelListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 342786 // MouseWheelListener
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 275970 "MouseMotionListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 342658 // MouseMotionListener
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 276098 "MouseAdapter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 365698 // MouseAdapter
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 284930 "KeyListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 342402 // KeyListener
      end
      comment "Copyright (c) 1996, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 285570 "KeyAdapter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 390146 // KeyAdapter
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 285698 "ItemListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 389506 // ItemListener
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 287234 "MouseMotionAdapter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 395010 // MouseMotionAdapter
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 295426 "WindowFocusListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 422914 // WindowFocusListener
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 300162 "WindowListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 433794 // WindowListener
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 300674 "HierarchyListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 342146 // HierarchyListener
      end
      comment "Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 302466 "ComponentAdapter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 440194 // ComponentAdapter
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 303234 "FocusAdapter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 442754 // FocusAdapter
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 316930 "WindowStateListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 469378 // WindowStateListener
      end
      comment "Copyright (c) 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 317058 "WindowAdapter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 477570 // WindowAdapter
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 616706 "AdjustmentListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 856066 // AdjustmentListener
      end
      comment "Copyright (c) 1996, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 616834 "TextListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 857218 // TextListener
      end
      comment "Copyright (c) 1996, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 616962 "InputMethodListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 342914 // InputMethodListener
      end
      comment "Copyright (c) 1997, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 617090 "HierarchyBoundsListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 342274 // HierarchyBoundsListener
      end
      comment "Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 636418 "ActionEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.AWTEvent;
import java.awt.Event;
import java.lang.annotation.Native;
${definition}"
      associated_elems
	class_ref 354434 // ActionEvent
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 636546 "AdjustmentEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Adjustable;
import java.awt.AWTEvent;
import java.lang.annotation.Native;
${definition}"
      associated_elems
	class_ref 857090 // AdjustmentEvent
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 636802 "AWTEventListenerProxy"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListenerProxy;
import java.awt.AWTEvent;
${definition}"
      associated_elems
	class_ref 886402 // AWTEventListenerProxy
      end
      comment "Copyright (c) 2001, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 636930 "ComponentEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.AWTEvent;
import java.awt.Component;
import java.awt.Rectangle;
import java.lang.annotation.Native;
${definition}"
      associated_elems
	class_ref 346242 // ComponentEvent
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 637058 "ContainerAdapter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 886658 // ContainerAdapter
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 637186 "ContainerEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Container;
import java.awt.Component;
${definition}"
      associated_elems
	class_ref 350338 // ContainerEvent
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 637314 "FocusEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Component;
import sun.awt.AppContext;
import sun.awt.SunToolkit;
${definition}"
      associated_elems
	class_ref 346370 // FocusEvent
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 637442 "HierarchyBoundsAdapter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 886786 // HierarchyBoundsAdapter
      end
      comment "Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 637570 "HierarchyEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.AWTEvent;
import java.awt.Component;
import java.awt.Container;
${definition}"
      associated_elems
	class_ref 346882 // HierarchyEvent
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 637698 "InputEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Event;
import java.awt.Component;
import java.awt.GraphicsEnvironment;
import java.awt.Toolkit;
import java.util.Arrays;
import sun.awt.AWTAccessor;
import sun.util.logging.PlatformLogger;
import sun.security.util.SecurityConstants;
${definition}"
      associated_elems
	class_ref 352386 // InputEvent
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 637826 "InputMethodEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.awt.AWTAccessor;
import sun.awt.AppContext;
import sun.awt.SunToolkit;
import java.awt.AWTEvent;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.font.TextHitInfo;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.text.AttributedCharacterIterator;
import java.text.CharacterIterator;
import java.lang.annotation.Native;
${definition}"
      associated_elems
	class_ref 346754 // InputMethodEvent
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 637954 "InvocationEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.awt.AWTAccessor;
import java.awt.ActiveEvent;
import java.awt.AWTEvent;
${definition}"
      associated_elems
	class_ref 887042 // InvocationEvent
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 638082 "ItemEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.AWTEvent;
import java.awt.ItemSelectable;
${definition}"
      associated_elems
	class_ref 390658 // ItemEvent
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 638210 "KeyEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Component;
import java.awt.GraphicsEnvironment;
import java.awt.Toolkit;
import java.io.IOException;
import java.io.ObjectInputStream;
import sun.awt.AWTAccessor;
${definition}"
      associated_elems
	class_ref 346498 // KeyEvent
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 638338 "MouseEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Component;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.awt.Toolkit;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.awt.IllegalComponentStateException;
import java.awt.MouseInfo;
import sun.awt.SunToolkit;
${definition}"
      associated_elems
	class_ref 346626 // MouseEvent
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 638466 "MouseWheelEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Component;
import java.lang.annotation.Native;
${definition}"
      associated_elems
	class_ref 345858 // MouseWheelEvent
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 638594 "NativeLibLoader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 887170 // NativeLibLoader
      end
      comment "Copyright (c) 1998, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 638722 "PaintEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Component;
import java.awt.Rectangle;
${definition}"
      associated_elems
	class_ref 864898 // PaintEvent
      end
      comment "Copyright (c) 1996, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 638850 "TextEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.AWTEvent;
${definition}"
      associated_elems
	class_ref 857346 // TextEvent
      end
      comment "Copyright (c) 1996, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 638978 "WindowEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Window;
import java.lang.annotation.Native;
import sun.awt.AppContext;
import sun.awt.SunToolkit;
${definition}"
      associated_elems
	class_ref 423938 // WindowEvent
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
