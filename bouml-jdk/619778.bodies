class BitArray
!!!3959426.java!!!	BitArray()
        this(32);
!!!3959554.java!!!	BitArray(in size : int)
        if (size < 32) size = 32;
        _bitSize = size;
        _intSize = (_bitSize >>> 5) + 1;
        _bits = new int[_intSize + 1];
!!!3959682.java!!!	BitArray(in size : int, inout bits : int [[]])
        if (size < 32) size = 32;
        _bitSize = size;
        _intSize = (_bitSize >>> 5) + 1;
        _bits = bits;
!!!3959810.java!!!	setMask(in mask : int) : void
        _mask = mask;
!!!3959938.java!!!	getMask() : int
        return(_mask);
!!!3960066.java!!!	size() : int
        return(_bitSize);
!!!3960194.java!!!	getBit(in bit : int) : boolean
        if (DEBUG_ASSERTIONS) {
            if (bit >= _bitSize) {
                throw new Error(
                             "Programmer's assertion in  BitArray.getBit");
            }
        }

        return((_bits[bit>>>5] & _masks[bit%32]) != 0);
!!!3960322.java!!!	getNextBit(in startBit : int) : int
        for (int i = (startBit >>> 5) ; i<=_intSize; i++) {
            int bits = _bits[i];
            if (bits != 0) {
                for (int b = (startBit % 32); b<32; b++) {
                    if ((bits & _masks[b]) != 0) {
                        return((i << 5) + b);
                    }
                }
            }
            startBit = 0;
        }
        return(DTMAxisIterator.END);
!!!3960450.java!!!	getBitNumber(in pos : int) : int

        // Return last node if position we're looking for is the same
        if (pos == _pos) return(_node);

        // Start from beginning of position we're looking for is before
        // the point where we left off the last time.
        if (pos < _pos) {
            _int = _bit = _pos = 0;
        }

        // Scan through the bit array - skip integers that have no bits set
        for ( ; _int <= _intSize; _int++) {
            int bits = _bits[_int];
            if (bits != 0) { // Any bits set?
                for ( ; _bit < 32; _bit++) {
                    if ((bits & _masks[_bit]) != 0) {
                        if (++_pos == pos) {
                            _node = ((_int << 5) + _bit) - 1;
                            return (_node);
                        }
                    }
                }
                _bit = 0;
            }
        }
        return(0);
!!!3960578.java!!!	data() : int
        return(_bits);
!!!3960706.java!!!	setBit(in bit : int) : void
        if (DEBUG_ASSERTIONS) {
            if (bit >= _bitSize) {
                throw new Error(
                             "Programmer's assertion in  BitArray.getBit");
            }
        }

        if (bit >= _bitSize) return;
        final int i = (bit >>> 5);
        if (i < _first) _first = i;
        if (i > _last) _last = i;
        _bits[i] |= _masks[bit % 32];
!!!3960834.java!!!	merge(inout other : BitArray) : BitArray
        // Take other array's bits if we have node set
        if (_last == -1) {
            _bits = other._bits;
        }
        // Only merge if other array has any bits set
        else if (other._last != -1) {
            int start = (_first < other._first) ? _first : other._first;
            int stop  = (_last > other._last) ? _last : other._last;

            // Merge these bits into other array if other array is larger
            if (other._intSize > _intSize) {
                if (stop > _intSize) stop = _intSize;
                for (int i=start; i<=stop; i++)
                    other._bits[i] |= _bits[i];
                _bits = other._bits;
            }
            // Merge other bits into this array if this arrai is large/equal.
            else {
                if (stop > other._intSize) stop = other._intSize;
                for (int i=start; i<=stop; i++)
                    _bits[i] |= other._bits[i];
            }
        }
        return(this);
!!!3960962.java!!!	resize(in newSize : int) : void
        if (newSize > _bitSize) {
            _intSize = (newSize >>> 5) + 1;
            final int[] newBits = new int[_intSize + 1];
            System.arraycopy(_bits, 0, newBits, 0, (_bitSize>>>5) + 1);
            _bits = newBits;
            _bitSize = newSize;
        }
!!!3961090.java!!!	cloneArray() : BitArray
        return(new BitArray(_intSize, _bits));
!!!3961218.java!!!	writeExternal(inout out : ObjectOutput) : void
        out.writeInt(_bitSize);
        out.writeInt(_mask);
        out.writeObject(_bits);
        out.flush();
!!!3961346.java!!!	readExternal(inout in : ObjectInput) : void
        _bitSize = in.readInt();
        _intSize = (_bitSize >>> 5) + 1;
        _mask    = in.readInt();
        _bits    = (int[])in.readObject();
