class MinguoChronology
!!!8493058.java!!!	getId() : String
        return "Minguo";
!!!8493186.java!!!	getCalendarType() : String
        return "roc";
!!!8493314.java!!!	date(inout era : Era, in yearOfEra : int, in month : int, in dayOfMonth : int) : MinguoDate
        return date(prolepticYear(era, yearOfEra), month, dayOfMonth);
!!!8493442.java!!!	date(in prolepticYear : int, in month : int, in dayOfMonth : int) : MinguoDate
        return new MinguoDate(LocalDate.of(prolepticYear + YEARS_DIFFERENCE, month, dayOfMonth));
!!!8493570.java!!!	dateYearDay(inout era : Era, in yearOfEra : int, in dayOfYear : int) : MinguoDate
        return dateYearDay(prolepticYear(era, yearOfEra), dayOfYear);
!!!8493698.java!!!	dateYearDay(in prolepticYear : int, in dayOfYear : int) : MinguoDate
        return new MinguoDate(LocalDate.ofYearDay(prolepticYear + YEARS_DIFFERENCE, dayOfYear));
!!!8493826.java!!!	dateEpochDay(in epochDay : long) : MinguoDate
        return new MinguoDate(LocalDate.ofEpochDay(epochDay));
!!!8493954.java!!!	dateNow() : MinguoDate
        return dateNow(Clock.systemDefaultZone());
!!!8494082.java!!!	dateNow(inout zone : ZoneId) : MinguoDate
        return dateNow(Clock.system(zone));
!!!8494210.java!!!	dateNow(inout clock : Clock) : MinguoDate
        return date(LocalDate.now(clock));
!!!8494338.java!!!	date(inout temporal : TemporalAccessor) : MinguoDate
        if (temporal instanceof MinguoDate) {
            return (MinguoDate) temporal;
        }
        return new MinguoDate(LocalDate.from(temporal));
!!!8494466.java!!!	localDateTime(inout temporal : TemporalAccessor) : ChronoLocalDateTime
        return (ChronoLocalDateTime<MinguoDate>)super.localDateTime(temporal);
!!!8494594.java!!!	zonedDateTime(inout temporal : TemporalAccessor) : ChronoZonedDateTime
        return (ChronoZonedDateTime<MinguoDate>)super.zonedDateTime(temporal);
!!!8494722.java!!!	zonedDateTime(inout instant : Instant, inout zone : ZoneId) : ChronoZonedDateTime
        return (ChronoZonedDateTime<MinguoDate>)super.zonedDateTime(instant, zone);
!!!8494850.java!!!	isLeapYear(in prolepticYear : long) : boolean
        return IsoChronology.INSTANCE.isLeapYear(prolepticYear + YEARS_DIFFERENCE);
!!!8494978.java!!!	prolepticYear(inout era : Era, in yearOfEra : int) : int
        if (era instanceof MinguoEra == false) {
            throw new ClassCastException("Era must be MinguoEra");
        }
        return (era == MinguoEra.ROC ? yearOfEra : 1 - yearOfEra);
!!!8495106.java!!!	eraOf(in eraValue : int) : MinguoEra
        return MinguoEra.of(eraValue);
!!!8495234.java!!!	eras() : List
        return Arrays.<Era>asList(MinguoEra.values());
!!!8495362.java!!!	range(inout field : ChronoField) : ValueRange
        switch (field) {
            case PROLEPTIC_MONTH: {
                ValueRange range = PROLEPTIC_MONTH.range();
                return ValueRange.of(range.getMinimum() - YEARS_DIFFERENCE * 12L, range.getMaximum() - YEARS_DIFFERENCE * 12L);
            }
            case YEAR_OF_ERA: {
                ValueRange range = YEAR.range();
                return ValueRange.of(1, range.getMaximum() - YEARS_DIFFERENCE, -range.getMinimum() + 1 + YEARS_DIFFERENCE);
            }
            case YEAR: {
                ValueRange range = YEAR.range();
                return ValueRange.of(range.getMinimum() - YEARS_DIFFERENCE, range.getMaximum() - YEARS_DIFFERENCE);
            }
        }
        return field.range();
!!!8495490.java!!!	resolveDate(inout fieldValues : Map, inout resolverStyle : ResolverStyle) : MinguoDate
        return (MinguoDate) super.resolveDate(fieldValues, resolverStyle);
!!!8495618.java!!!	writeReplace() : Object
        return super.writeReplace();
!!!8495746.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
