class CachedXPathAPI
!!!5758210.java!!!	CachedXPathAPI()
    xpathSupport = new XPathContext();
!!!5758338.java!!!	CachedXPathAPI(inout priorXPathAPI : CachedXPathAPI)
    xpathSupport = priorXPathAPI.xpathSupport;
!!!5758466.java!!!	getXPathContext() : XPathContext
    return this.xpathSupport;
!!!5758594.java!!!	selectSingleNode(inout contextNode : Node, inout str : String) : Node
    return selectSingleNode(contextNode, str, contextNode);
!!!5758722.java!!!	selectSingleNode(inout contextNode : Node, inout str : String, inout namespaceNode : Node) : Node

    // Have the XObject return its result as a NodeSetDTM.
    NodeIterator nl = selectNodeIterator(contextNode, str, namespaceNode);

    // Return the first node, or null
    return nl.nextNode();
!!!5758850.java!!!	selectNodeIterator(inout contextNode : Node, inout str : String) : NodeIterator
    return selectNodeIterator(contextNode, str, contextNode);
!!!5758978.java!!!	selectNodeIterator(inout contextNode : Node, inout str : String, inout namespaceNode : Node) : NodeIterator

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Have the XObject return its result as a NodeSetDTM.
    return list.nodeset();
!!!5759106.java!!!	selectNodeList(inout contextNode : Node, inout str : String) : NodeList
    return selectNodeList(contextNode, str, contextNode);
!!!5759234.java!!!	selectNodeList(inout contextNode : Node, inout str : String, inout namespaceNode : Node) : NodeList

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Return a NodeList.
    return list.nodelist();
!!!5759362.java!!!	eval(inout contextNode : Node, inout str : String) : XObject
    return eval(contextNode, str, contextNode);
!!!5759490.java!!!	eval(inout contextNode : Node, inout str : String, inout namespaceNode : Node) : XObject

    // Since we don't have a XML Parser involved here, install some default support
    // for things like namespaces, etc.
    // (Changed from: XPathContext xpathSupport = new XPathContext();
    //    because XPathContext is weak in a number of areas... perhaps
    //    XPathContext should be done away with.)

    // Create an object to resolve namespace prefixes.
    // XPath namespaces are resolved from the input context node's document element
    // if it is a root node, or else the current context node (for lack of a better
    // resolution space, given the simplicity of this sample code).
    PrefixResolverDefault prefixResolver = new PrefixResolverDefault(
      (namespaceNode.getNodeType() == Node.DOCUMENT_NODE)
      ? ((Document) namespaceNode).getDocumentElement() : namespaceNode);

    // Create the XPath object.
    XPath xpath = new XPath(str, null, prefixResolver, XPath.SELECT, null);

    // Execute the XPath, and have it return the result
    // return xpath.execute(xpathSupport, contextNode, prefixResolver);
    int ctxtNode = xpathSupport.getDTMHandleFromNode(contextNode);

    return xpath.execute(xpathSupport, ctxtNode, prefixResolver);
!!!5759618.java!!!	eval(inout contextNode : Node, inout str : String, inout prefixResolver : PrefixResolver) : XObject

    // Since we don't have a XML Parser involved here, install some default support
    // for things like namespaces, etc.
    // (Changed from: XPathContext xpathSupport = new XPathContext();
    //    because XPathContext is weak in a number of areas... perhaps
    //    XPathContext should be done away with.)
    // Create the XPath object.
    XPath xpath = new XPath(str, null, prefixResolver, XPath.SELECT, null);

    // Execute the XPath, and have it return the result
    XPathContext xpathSupport = new XPathContext();
    int ctxtNode = xpathSupport.getDTMHandleFromNode(contextNode);

    return xpath.execute(xpathSupport, ctxtNode, prefixResolver);
