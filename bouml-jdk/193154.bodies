class ObjectStreamField
!!!6901122.java!!!	ObjectStreamField(inout name : String, inout type : Class)
        this(name, type, false);
!!!6901250.java!!!	ObjectStreamField(inout name : String, inout type : Class, inout unshared : boolean)
        if (name == null) {
            throw new NullPointerException();
        }
        this.name = name;
        this.type = type;
        this.unshared = unshared;
        signature = getClassSignature(type).intern();
        field = null;
!!!6901378.java!!!	ObjectStreamField(inout name : String, inout signature : String, inout unshared : boolean)
        if (name == null) {
            throw new NullPointerException();
        }
        this.name = name;
        this.signature = signature.intern();
        this.unshared = unshared;
        field = null;

        switch (signature.charAt(0)) {
            case 'Z': type = Boolean.TYPE; break;
            case 'B': type = Byte.TYPE; break;
            case 'C': type = Character.TYPE; break;
            case 'S': type = Short.TYPE; break;
            case 'I': type = Integer.TYPE; break;
            case 'J': type = Long.TYPE; break;
            case 'F': type = Float.TYPE; break;
            case 'D': type = Double.TYPE; break;
            case 'L':
            case '[': type = Object.class; break;
            default: throw new IllegalArgumentException("illegal signature");
        }
!!!6901506.java!!!	ObjectStreamField(inout field : Field, inout unshared : boolean, inout showType : boolean)
        this.field = field;
        this.unshared = unshared;
        name = field.getName();
        Class<?> ftype = field.getType();
        type = (showType || ftype.isPrimitive()) ? ftype : Object.class;
        signature = getClassSignature(ftype).intern();
!!!6901634.java!!!	getName() : String
        return name;
!!!6901762.java!!!	getType() : Class
        if (System.getSecurityManager() != null) {
            Class<?> caller = Reflection.getCallerClass();
            if (ReflectUtil.needsPackageAccessCheck(caller.getClassLoader(), type.getClassLoader())) {
                ReflectUtil.checkPackageAccess(type);
            }
        }
        return type;
!!!6901890.java!!!	getTypeCode() : char
        return signature.charAt(0);
!!!6902018.java!!!	getTypeString() : String
        return isPrimitive() ? null : signature;
!!!6902146.java!!!	getOffset() : int
        return offset;
!!!6902274.java!!!	setOffset(in offset : int) : void
        this.offset = offset;
!!!6902402.java!!!	isPrimitive() : boolean
        char tcode = signature.charAt(0);
        return ((tcode != 'L') && (tcode != '['));
!!!6902530.java!!!	isUnshared() : boolean
        return unshared;
!!!6902658.java!!!	compareTo(inout obj : Object) : int
        ObjectStreamField other = (ObjectStreamField) obj;
        boolean isPrim = isPrimitive();
        if (isPrim != other.isPrimitive()) {
            return isPrim ? -1 : 1;
        }
        return name.compareTo(other.name);
!!!6902786.java!!!	toString() : String
        return signature + ' ' + name;
!!!6902914.java!!!	getField() : Field
        return field;
!!!6903042.java!!!	getSignature() : String
        return signature;
!!!6903170.java!!!	getClassSignature(inout cl : Class) : String
        StringBuilder sbuf = new StringBuilder();
        while (cl.isArray()) {
            sbuf.append('[');
            cl = cl.getComponentType();
        }
        if (cl.isPrimitive()) {
            if (cl == Integer.TYPE) {
                sbuf.append('I');
            } else if (cl == Byte.TYPE) {
                sbuf.append('B');
            } else if (cl == Long.TYPE) {
                sbuf.append('J');
            } else if (cl == Float.TYPE) {
                sbuf.append('F');
            } else if (cl == Double.TYPE) {
                sbuf.append('D');
            } else if (cl == Short.TYPE) {
                sbuf.append('S');
            } else if (cl == Character.TYPE) {
                sbuf.append('C');
            } else if (cl == Boolean.TYPE) {
                sbuf.append('Z');
            } else if (cl == Void.TYPE) {
                sbuf.append('V');
            } else {
                throw new InternalError();
            }
        } else {
            sbuf.append('L' + cl.getName().replace('.', '/') + ';');
        }
        return sbuf.toString();
