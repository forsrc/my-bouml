class AutoPreferredGapSpring
!!!10531842.java!!!	AutoPreferredGapSpring()
            this.pref = PREFERRED_SIZE;
            this.max = PREFERRED_SIZE;
            this.type = ComponentPlacement.RELATED;
!!!10531970.java!!!	AutoPreferredGapSpring(in pref : int, in max : int)
            this.pref = pref;
            this.max = max;
!!!10532098.java!!!	AutoPreferredGapSpring(inout type : ComponentPlacement, in pref : int, in max : int)
            this.type = type;
            this.pref = pref;
            this.max = max;
            this.userCreated = true;
!!!10532226.java!!!	setSource(inout source : GroupLayout::ComponentSpring) : void
            this.source = source;
!!!10532354.java!!!	setSources(inout sources : List) : void
            this.sources = new ArrayList<ComponentSpring>(sources);
!!!10532482.java!!!	setUserCreated(inout userCreated : boolean) : void
            this.userCreated = userCreated;
!!!10532610.java!!!	getUserCreated() : boolean
            return userCreated;
!!!10532738.java!!!	unset() : void
            lastSize = getSize();
            super.unset();
            size = 0;
!!!10532866.java!!!	reset() : void
            size = 0;
            sources = null;
            source = null;
            matches = null;
!!!10532994.java!!!	calculatePadding(in axis : int) : void
            size = UNSET;
            int maxPadding = UNSET;
            if (matches != null) {
                LayoutStyle p = getLayoutStyle0();
                int position;
                if (axis == HORIZONTAL) {
                    if (isLeftToRight()) {
                        position = SwingConstants.EAST;
                    } else {
                        position = SwingConstants.WEST;
                    }
                } else {
                    position = SwingConstants.SOUTH;
                }
                for (int i = matches.size() - 1; i >= 0; i--) {
                    AutoPreferredGapMatch match = matches.get(i);
                    maxPadding = Math.max(maxPadding,
                            calculatePadding(p, position, match.source,
                            match.target));
                }
            }
            if (size == UNSET) {
                size = 0;
            }
            if (maxPadding == UNSET) {
                maxPadding = 0;
            }
            if (lastSize != UNSET) {
                size += Math.min(maxPadding, lastSize);
            }
!!!10533122.java!!!	calculatePadding(inout p : LayoutStyle, in position : int, inout source : GroupLayout::ComponentSpring, inout target : GroupLayout::ComponentSpring) : int
            int delta = target.getOrigin() - (source.getOrigin() +
                    source.getSize());
            if (delta >= 0) {
                int padding;
                if ((source.getComponent() instanceof JComponent) &&
                        (target.getComponent() instanceof JComponent)) {
                    padding = p.getPreferredGap(
                            (JComponent)source.getComponent(),
                            (JComponent)target.getComponent(), type, position,
                            host);
                } else {
                    padding = 10;
                }
                if (padding > delta) {
                    size = Math.max(size, padding - delta);
                }
                return padding;
            }
            return 0;
!!!10533250.java!!!	addTarget(inout spring : GroupLayout::ComponentSpring, in axis : int) : void
            int oAxis = (axis == HORIZONTAL) ? VERTICAL : HORIZONTAL;
            if (source != null) {
                if (areParallelSiblings(source.getComponent(),
                        spring.getComponent(), oAxis)) {
                    addValidTarget(source, spring);
                }
            } else {
                Component component = spring.getComponent();
                for (int counter = sources.size() - 1; counter >= 0;
                         counter--){
                    ComponentSpring source = sources.get(counter);
                    if (areParallelSiblings(source.getComponent(),
                            component, oAxis)) {
                        addValidTarget(source, spring);
                    }
                }
            }
!!!10533378.java!!!	addValidTarget(inout source : GroupLayout::ComponentSpring, inout target : GroupLayout::ComponentSpring) : void
            if (matches == null) {
                matches = new ArrayList<AutoPreferredGapMatch>(1);
            }
            matches.add(new AutoPreferredGapMatch(source, target));
!!!10533506.java!!!	calculateMinimumSize(in axis : int) : int
            return size;
!!!10533634.java!!!	calculatePreferredSize(in axis : int) : int
            if (pref == PREFERRED_SIZE || pref == DEFAULT_SIZE) {
                return size;
            }
            return Math.max(size, pref);
!!!10533762.java!!!	calculateMaximumSize(in axis : int) : int
            if (max >= 0) {
                return Math.max(getPreferredSize(axis), max);
            }
            return size;
!!!10533890.java!!!	getMatchDescription() : String
            return (matches == null) ? "" : matches.toString();
!!!10534018.java!!!	toString() : String
            return super.toString() + getMatchDescription();
!!!10534146.java!!!	willHaveZeroSize(inout treatAutopaddingAsZeroSized : boolean) : boolean
            return treatAutopaddingAsZeroSized;
