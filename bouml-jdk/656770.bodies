class DocumentFragmentImpl
!!!4271362.java!!!	DocumentFragmentImpl(inout ownerDoc : CoreDocumentImpl)
        super(ownerDoc);
!!!4271618.java!!!	getNodeType() : short
        return Node.DOCUMENT_FRAGMENT_NODE;
!!!4271746.java!!!	getNodeName() : String
        return "#document-fragment";
!!!4271874.java!!!	normalize() : void
        // No need to normalize if already normalized.
        if (isNormalized()) {
            return;
        }
        if (needsSyncChildren()) {
            synchronizeChildren();
        }
        ChildNode kid, next;

        for (kid = firstChild; kid != null; kid = next) {
            next = kid.nextSibling;

            // If kid is a text node, we need to check for one of two
            // conditions:
            //   1) There is an adjacent text node
            //   2) There is no adjacent text node, but kid is
            //      an empty text node.
            if ( kid.getNodeType() == Node.TEXT_NODE )
            {
                // If an adjacent text node, merge it with kid
                if ( next!=null && next.getNodeType() == Node.TEXT_NODE )
                {
                    ((Text)kid).appendData(next.getNodeValue());
                    removeChild( next );
                    next = kid; // Don't advance; there might be another.
                }
                else
                {
                    // If kid is empty, remove it
                    if ( kid.getNodeValue() == null || kid.getNodeValue().length() == 0 ) {
                        removeChild( kid );
                    }
                }
            }

            kid.normalize();
        }

        isNormalized(true);
