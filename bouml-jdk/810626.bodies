class OneStepIterator
!!!5843586.java!!!	OneStepIterator(inout compiler : Compiler, in opPos : int, in analysis : int)
    super(compiler, opPos, analysis);
    int firstStepPos = OpMap.getFirstChildPos(opPos);

    m_axis = WalkerFactory.getAxisFromStep(compiler, firstStepPos);

!!!5843714.java!!!	OneStepIterator(inout iterator : DTMAxisIterator, in axis : int)
    super(null);

    m_iterator = iterator;
    m_axis = axis;
    int whatToShow = DTMFilter.SHOW_ALL;
    initNodeTest(whatToShow);
!!!5843842.java!!!	setRoot(in context : int, inout environment : Object) : void
    super.setRoot(context, environment);
    if(m_axis > -1)
      m_iterator = m_cdtm.getAxisIterator(m_axis);
    m_iterator.setStartNode(m_context);
!!!5843970.java!!!	detach() : void
    if(m_allowDetach)
    {
      if(m_axis > -1)
        m_iterator = null;

      // Always call the superclass detach last!
      super.detach();
    }
!!!5844098.java!!!	getNextNode() : int
    return m_lastFetched = m_iterator.next();
!!!5844226.java!!!	clone() : Object
    // Do not access the location path itterator during this operation!

    OneStepIterator clone = (OneStepIterator) super.clone();

    if(m_iterator != null)
    {
      clone.m_iterator = m_iterator.cloneIterator();
    }
    return clone;
!!!5844354.java!!!	cloneWithReset() : DTMIterator

    OneStepIterator clone = (OneStepIterator) super.cloneWithReset();
    clone.m_iterator = m_iterator;

    return clone;
!!!5844482.java!!!	isReverseAxes() : boolean
    return m_iterator.isReverse();
!!!5844610.java!!!	getProximityPosition(in predicateIndex : int) : int
    if(!isReverseAxes())
      return super.getProximityPosition(predicateIndex);

    // A negative predicate index seems to occur with
    // (preceding-sibling::*|following-sibling::*)/ancestor::*[position()]/*[position()]
    // -sb
    if(predicateIndex < 0)
      return -1;

    if (m_proximityPositions[predicateIndex] <= 0)
    {
      XPathContext xctxt = getXPathContext();
      try
      {
        OneStepIterator clone = (OneStepIterator) this.clone();

        int root = getRoot();
        xctxt.pushCurrentNode(root);
        clone.setRoot(root, xctxt);

        // clone.setPredicateCount(predicateIndex);
        clone.m_predCount = predicateIndex;

        // Count 'em all
        int count = 1;
        int next;

        while (DTM.NULL != (next = clone.nextNode()))
        {
          count++;
        }

        m_proximityPositions[predicateIndex] += count;
      }
      catch (CloneNotSupportedException cnse)
      {

        // can't happen
      }
      finally
      {
        xctxt.popCurrentNode();
      }
    }

    return m_proximityPositions[predicateIndex];
!!!5844738.java!!!	getLength() : int
    if(!isReverseAxes())
      return super.getLength();

    // Tell if this is being called from within a predicate.
    boolean isPredicateTest = (this == m_execContext.getSubContextList());

    // And get how many total predicates are part of this step.
    int predCount = getPredicateCount();

    // If we have already calculated the length, and the current predicate
    // is the first predicate, then return the length.  We don't cache
    // the anything but the length of the list to the first predicate.
    if (-1 != m_length && isPredicateTest && m_predicateIndex < 1)
       return m_length;

    int count = 0;

    XPathContext xctxt = getXPathContext();
    try
    {
      OneStepIterator clone = (OneStepIterator) this.cloneWithReset();

      int root = getRoot();
      xctxt.pushCurrentNode(root);
      clone.setRoot(root, xctxt);

      clone.m_predCount = m_predicateIndex;

      int next;

      while (DTM.NULL != (next = clone.nextNode()))
      {
        count++;
      }
    }
    catch (CloneNotSupportedException cnse)
    {
       // can't happen
    }
    finally
    {
      xctxt.popCurrentNode();
    }
    if (isPredicateTest && m_predicateIndex < 1)
      m_length = count;

    return count;
!!!5844866.java!!!	countProximityPosition(in i : int) : void
    if(!isReverseAxes())
      super.countProximityPosition(i);
    else if (i < m_proximityPositions.length)
      m_proximityPositions[i]--;
!!!5844994.java!!!	reset() : void

    super.reset();
    if(null != m_iterator)
      m_iterator.reset();
!!!5845122.java!!!	getAxis() : int
    return m_axis;
!!!5845250.java!!!	deepEquals(inout expr : Expression) : boolean
        if(!super.deepEquals(expr))
                return false;

        if(m_axis != ((OneStepIterator)expr).m_axis)
                return false;

        return true;
