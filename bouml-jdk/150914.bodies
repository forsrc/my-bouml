class EncapsOutputStream
!!!232834.java!!!	EncapsOutputStream(inout orb : ORB)
        // GIOP version 1.2 with no fragmentation, big endian,
        // UTF8 for char data and UTF-16 for wide char data;
        this(orb, GIOPVersion.V1_2);
!!!232962.java!!!	EncapsOutputStream(inout orb : ORB, inout version : GIOPVersion)
        this(orb, version, false);
!!!233090.java!!!	EncapsOutputStream(inout orb : ORB, inout isLittleEndian : boolean)
        this(orb, GIOPVersion.V1_2, isLittleEndian);
!!!233218.java!!!	EncapsOutputStream(inout orb : ORB, inout version : GIOPVersion, inout isLittleEndian : boolean)
        super(orb, version, Message.CDR_ENC_VERSION, isLittleEndian,
              BufferManagerFactory.newBufferManagerWrite(
                                        BufferManagerFactory.GROW,
                                        Message.CDR_ENC_VERSION,
                                        orb),
              ORBConstants.STREAM_FORMAT_VERSION_1,
              usePooledByteBuffers);
!!!233346.java!!!	create_input_stream() : InputStream
        freeInternalCaches();

        return  EncapsInputStreamFactory.newEncapsInputStream(orb(),
                getByteBuffer(),
                getSize(),
                isLittleEndian(),
                getGIOPVersion());
!!!233474.java!!!	createCharCTBConverter() : CodeSetConversion::CTBConverter
        return CodeSetConversion.impl().getCTBConverter(OSFCodeSetRegistry.ISO_8859_1);
!!!233602.java!!!	createWCharCTBConverter() : CodeSetConversion::CTBConverter
        if (getGIOPVersion().equals(GIOPVersion.V1_0))
            throw wrapper.wcharDataInGiop10(CompletionStatus.COMPLETED_MAYBE);

        // In the case of GIOP 1.1, we take the byte order of the stream and don't
        // use byte order markers since we're limited to a 2 byte fixed width encoding.
        if (getGIOPVersion().equals(GIOPVersion.V1_1))
            return CodeSetConversion.impl().getCTBConverter(OSFCodeSetRegistry.UTF_16,
                                                            isLittleEndian(),
                                                            false);

        // Assume anything else meets GIOP 1.2 requirements
        //
        // Use byte order markers?  If not, use big endian in GIOP 1.2.
        // (formal 00-11-03 15.3.16)

        boolean useBOM = ((ORB)orb()).getORBData().useByteOrderMarkersInEncapsulations();

        return CodeSetConversion.impl().getCTBConverter(OSFCodeSetRegistry.UTF_16,
                                                        false,
                                                        useBOM);
