class RowSetMetaDataImpl
!!!10371074.java!!!	checkColRange(in col : int) : void
        if (col <= 0 || col > colCount) {
            throw new SQLException("Invalid column index :"+col);
        }
!!!10371202.java!!!	checkColType(in SQLType : int) : void
        try {
            Class<?> c = java.sql.Types.class;
            Field[] publicFields = c.getFields();
            int fieldValue = 0;
            for (int i = 0; i < publicFields.length; i++) {
                fieldValue = publicFields[i].getInt(c);
                if (fieldValue == SQLType) {
                    return;
                 }
            }
        } catch (Exception e) {
            throw new SQLException(e.getMessage());
        }
        throw new SQLException("Invalid SQL type for column");
!!!10371330.java!!!	setColumnCount(in columnCount : int) : void

        if (columnCount <= 0) {
            throw new SQLException("Invalid column count. Cannot be less " +
                "or equal to zero");
            }

       colCount = columnCount;

       // If the colCount is Integer.MAX_VALUE,
       // we do not initialize the colInfo object.
       // even if we try to initialize the colCount with
       // colCount = Integer.MAx_VALUE-1, the colInfo
       // initialization fails throwing an ERROR
       // OutOfMemory Exception. So we do not initialize
       // colInfo at Integer.MAX_VALUE. This is to pass TCK.

       if(!(colCount == Integer.MAX_VALUE)) {
            colInfo = new ColInfo[colCount + 1];

           for (int i=1; i <= colCount; i++) {
                 colInfo[i] = new ColInfo();
           }
       }


!!!10371458.java!!!	setAutoIncrement(in columnIndex : int, inout property : boolean) : void
        checkColRange(columnIndex);
        colInfo[columnIndex].autoIncrement = property;
!!!10371586.java!!!	setCaseSensitive(in columnIndex : int, inout property : boolean) : void
        checkColRange(columnIndex);
        colInfo[columnIndex].caseSensitive = property;
!!!10371714.java!!!	setSearchable(in columnIndex : int, inout property : boolean) : void
        checkColRange(columnIndex);
        colInfo[columnIndex].searchable = property;
!!!10371842.java!!!	setCurrency(in columnIndex : int, inout property : boolean) : void
        checkColRange(columnIndex);
        colInfo[columnIndex].currency = property;
!!!10371970.java!!!	setNullable(in columnIndex : int, in property : int) : void
        if ((property < ResultSetMetaData.columnNoNulls) ||
            property > ResultSetMetaData.columnNullableUnknown) {
                throw new SQLException("Invalid nullable constant set. Must be " +
                    "either columnNoNulls, columnNullable or columnNullableUnknown");
        }
        checkColRange(columnIndex);
        colInfo[columnIndex].nullable = property;
!!!10372098.java!!!	setSigned(in columnIndex : int, inout property : boolean) : void
        checkColRange(columnIndex);
        colInfo[columnIndex].signed = property;
!!!10372226.java!!!	setColumnDisplaySize(in columnIndex : int, in size : int) : void
        if (size < 0) {
            throw new SQLException("Invalid column display size. Cannot be less " +
                "than zero");
        }
        checkColRange(columnIndex);
        colInfo[columnIndex].columnDisplaySize = size;
!!!10372354.java!!!	setColumnLabel(in columnIndex : int, inout label : String) : void
        checkColRange(columnIndex);
        if (label != null) {
            colInfo[columnIndex].columnLabel = label;
        } else {
            colInfo[columnIndex].columnLabel = "";
        }
!!!10372482.java!!!	setColumnName(in columnIndex : int, inout columnName : String) : void
        checkColRange(columnIndex);
        if (columnName != null) {
            colInfo[columnIndex].columnName = columnName;
        } else {
            colInfo[columnIndex].columnName = "";
        }
!!!10372610.java!!!	setSchemaName(in columnIndex : int, inout schemaName : String) : void
        checkColRange(columnIndex);
        if (schemaName != null ) {
            colInfo[columnIndex].schemaName = schemaName;
        } else {
            colInfo[columnIndex].schemaName = "";
        }
!!!10372738.java!!!	setPrecision(in columnIndex : int, in precision : int) : void

        if (precision < 0) {
            throw new SQLException("Invalid precision value. Cannot be less " +
                "than zero");
        }
        checkColRange(columnIndex);
        colInfo[columnIndex].colPrecision = precision;
!!!10372866.java!!!	setScale(in columnIndex : int, in scale : int) : void
        if (scale < 0) {
            throw new SQLException("Invalid scale size. Cannot be less " +
                "than zero");
        }
        checkColRange(columnIndex);
        colInfo[columnIndex].colScale = scale;
!!!10372994.java!!!	setTableName(in columnIndex : int, inout tableName : String) : void
        checkColRange(columnIndex);
        if (tableName != null) {
            colInfo[columnIndex].tableName = tableName;
        } else {
            colInfo[columnIndex].tableName = "";
        }
!!!10373122.java!!!	setCatalogName(in columnIndex : int, inout catalogName : String) : void
        checkColRange(columnIndex);
        if (catalogName != null)
            colInfo[columnIndex].catName = catalogName;
        else
            colInfo[columnIndex].catName = "";
!!!10373250.java!!!	setColumnType(in columnIndex : int, in SQLType : int) : void
        // examine java.sql.Type reflectively, loop on the fields and check
        // this. Separate out into a private method
        checkColType(SQLType);
        checkColRange(columnIndex);
        colInfo[columnIndex].colType = SQLType;
!!!10373378.java!!!	setColumnTypeName(in columnIndex : int, inout typeName : String) : void
        checkColRange(columnIndex);
        if (typeName != null) {
            colInfo[columnIndex].colTypeName = typeName;
        } else {
            colInfo[columnIndex].colTypeName = "";
        }
!!!10373506.java!!!	getColumnCount() : int
        return colCount;
!!!10373634.java!!!	isAutoIncrement(in columnIndex : int) : boolean
        checkColRange(columnIndex);
        return colInfo[columnIndex].autoIncrement;
!!!10373762.java!!!	isCaseSensitive(in columnIndex : int) : boolean
        checkColRange(columnIndex);
        return colInfo[columnIndex].caseSensitive;
!!!10373890.java!!!	isSearchable(in columnIndex : int) : boolean
        checkColRange(columnIndex);
        return colInfo[columnIndex].searchable;
!!!10374018.java!!!	isCurrency(in columnIndex : int) : boolean
        checkColRange(columnIndex);
        return colInfo[columnIndex].currency;
!!!10374146.java!!!	isNullable(in columnIndex : int) : int
        checkColRange(columnIndex);
        return colInfo[columnIndex].nullable;
!!!10374274.java!!!	isSigned(in columnIndex : int) : boolean
        checkColRange(columnIndex);
        return colInfo[columnIndex].signed;
!!!10374402.java!!!	getColumnDisplaySize(in columnIndex : int) : int
        checkColRange(columnIndex);
        return colInfo[columnIndex].columnDisplaySize;
!!!10374530.java!!!	getColumnLabel(in columnIndex : int) : String
        checkColRange(columnIndex);
        return colInfo[columnIndex].columnLabel;
!!!10374658.java!!!	getColumnName(in columnIndex : int) : String
        checkColRange(columnIndex);
        return colInfo[columnIndex].columnName;
!!!10374786.java!!!	getSchemaName(in columnIndex : int) : String
        checkColRange(columnIndex);
        String str ="";
        if(colInfo[columnIndex].schemaName == null){
        } else {
              str = colInfo[columnIndex].schemaName;
        }
        return str;
!!!10374914.java!!!	getPrecision(in columnIndex : int) : int
        checkColRange(columnIndex);
        return colInfo[columnIndex].colPrecision;
!!!10375042.java!!!	getScale(in columnIndex : int) : int
        checkColRange(columnIndex);
        return colInfo[columnIndex].colScale;
!!!10375170.java!!!	getTableName(in columnIndex : int) : String
        checkColRange(columnIndex);
        return colInfo[columnIndex].tableName;
!!!10375298.java!!!	getCatalogName(in columnIndex : int) : String
        checkColRange(columnIndex);
        String str ="";
        if(colInfo[columnIndex].catName == null){
        } else {
           str = colInfo[columnIndex].catName;
        }
        return str;
!!!10375426.java!!!	getColumnType(in columnIndex : int) : int
        checkColRange(columnIndex);
        return colInfo[columnIndex].colType;
!!!10375554.java!!!	getColumnTypeName(in columnIndex : int) : String
        checkColRange(columnIndex);
        return colInfo[columnIndex].colTypeName;
!!!10375682.java!!!	isReadOnly(in columnIndex : int) : boolean
        checkColRange(columnIndex);
        return colInfo[columnIndex].readOnly;
!!!10375810.java!!!	isWritable(in columnIndex : int) : boolean
        checkColRange(columnIndex);
        return colInfo[columnIndex].writable;
!!!10375938.java!!!	isDefinitelyWritable(in columnIndex : int) : boolean
        checkColRange(columnIndex);
        return true;
!!!10376066.java!!!	getColumnClassName(in columnIndex : int) : String
        String className = String.class.getName();

        int sqlType = getColumnType(columnIndex);

        switch (sqlType) {

        case Types.NUMERIC:
        case Types.DECIMAL:
            className = java.math.BigDecimal.class.getName();
            break;

        case Types.BIT:
            className = java.lang.Boolean.class.getName();
            break;

        case Types.TINYINT:
            className = java.lang.Byte.class.getName();
            break;

        case Types.SMALLINT:
            className = java.lang.Short.class.getName();
            break;

        case Types.INTEGER:
            className = java.lang.Integer.class.getName();
            break;

        case Types.BIGINT:
            className = java.lang.Long.class.getName();
            break;

        case Types.REAL:
            className = java.lang.Float.class.getName();
            break;

        case Types.FLOAT:
        case Types.DOUBLE:
            className = java.lang.Double.class.getName();
            break;

        case Types.BINARY:
        case Types.VARBINARY:
        case Types.LONGVARBINARY:
            className = "byte[]";
            break;

        case Types.DATE:
            className = java.sql.Date.class.getName();
            break;

        case Types.TIME:
            className = java.sql.Time.class.getName();
            break;

        case Types.TIMESTAMP:
            className = java.sql.Timestamp.class.getName();
            break;

        case Types.BLOB:
            className = java.sql.Blob.class.getName();
            break;

        case Types.CLOB:
            className = java.sql.Clob.class.getName();
            break;
        }

        return className;
!!!10376194.java!!!	unwrap(inout iface : Class) : T

        if(isWrapperFor(iface)) {
            return iface.cast(this);
        } else {
            throw new SQLException("unwrap failed for:"+ iface);
        }
!!!10376322.java!!!	isWrapperFor(inout interfaces : Class) : boolean
        return interfaces.isInstance(this);
