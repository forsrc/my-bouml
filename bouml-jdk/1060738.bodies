class LENIENT
!!!8533634.java!!!	LENIENT(inout k : String, inout v : String, inout child : DateTimeFormatterBuilder::PrefixTree)
                super(k, v, child);
!!!8533762.java!!!	newNode(inout k : String, inout v : String, inout child : DateTimeFormatterBuilder::PrefixTree) : DateTimeFormatterBuilder::PrefixTree::CI
                return new LENIENT(k, v, child);
!!!8533890.java!!!	isLenientChar(in c : char) : boolean
                return c == ' ' || c == '_' || c == '/';
!!!8534018.java!!!	toKey(inout k : String) : String
                for (int i = 0; i < k.length(); i++) {
                    if (isLenientChar(k.charAt(i))) {
                        StringBuilder sb = new StringBuilder(k.length());
                        sb.append(k, 0, i);
                        i++;
                        while (i < k.length()) {
                            if (!isLenientChar(k.charAt(i))) {
                                sb.append(k.charAt(i));
                            }
                            i++;
                        }
                        return sb.toString();
                    }
                }
                return k;
!!!8534146.java!!!	match(inout text : CharSequence, inout pos : ParsePosition) : String
                int off = pos.getIndex();
                int end = text.length();
                int len = key.length();
                int koff = 0;
                while (koff < len && off < end) {
                    if (isLenientChar(text.charAt(off))) {
                        off++;
                        continue;
                    }
                    if (!isEqual(key.charAt(koff++), text.charAt(off++))) {
                        return null;
                    }
                }
                if (koff != len) {
                    return null;
                }
                if (child != null && off != end) {
                    int off0 = off;
                    while (off0 < end && isLenientChar(text.charAt(off0))) {
                        off0++;
                    }
                    if (off0 < end) {
                        PrefixTree c = child;
                        do {
                            if (isEqual(c.c0, text.charAt(off0))) {
                                pos.setIndex(off0);
                                String found = c.match(text, pos);
                                if (found != null) {
                                    return found;
                                }
                                break;
                            }
                            c = c.sibling;
                        } while (c != null);
                    }
                }
                pos.setIndex(off);
                return value;
