class BoundMethodHandle
!!!7158402.java!!!	BoundMethodHandle(inout type : MethodType, inout form : LambdaForm)
        super(type, form);
        assert(speciesData() == speciesData(form));
!!!7158530.java!!!	bindSingle(inout type : MethodType, inout form : LambdaForm, inout xtype : BasicType, inout x : Object) : BoundMethodHandle
        // for some type signatures, there exist pre-defined concrete BMH classes
        try {
            switch (xtype) {
            case L_TYPE:
                return bindSingle(type, form, x);  // Use known fast path.
            case I_TYPE:
                return (BoundMethodHandle) SpeciesData.EMPTY.extendWith(I_TYPE).constructor().invokeBasic(type, form, ValueConversions.widenSubword(x));
            case J_TYPE:
                return (BoundMethodHandle) SpeciesData.EMPTY.extendWith(J_TYPE).constructor().invokeBasic(type, form, (long) x);
            case F_TYPE:
                return (BoundMethodHandle) SpeciesData.EMPTY.extendWith(F_TYPE).constructor().invokeBasic(type, form, (float) x);
            case D_TYPE:
                return (BoundMethodHandle) SpeciesData.EMPTY.extendWith(D_TYPE).constructor().invokeBasic(type, form, (double) x);
            default : throw newInternalError("unexpected xtype: " + xtype);
            }
        } catch (Throwable t) {
            throw newInternalError(t);
        }
!!!7158658.java!!!	editor() : LambdaFormEditor
        return form.editor();
!!!7158786.java!!!	bindSingle(inout type : MethodType, inout form : LambdaForm, inout x : Object) : BoundMethodHandle
        return Species_L.make(type, form, x);
!!!7158914.java!!!	bindArgumentL(in pos : int, inout value : Object) : BoundMethodHandle
        return editor().bindArgumentL(this, pos, value);
!!!7159042.java!!!	bindArgumentI(in pos : int, in value : int) : BoundMethodHandle
        return editor().bindArgumentI(this, pos, value);
!!!7159170.java!!!	bindArgumentJ(in pos : int, in value : long) : BoundMethodHandle
        return editor().bindArgumentJ(this, pos, value);
!!!7159298.java!!!	bindArgumentF(in pos : int, in value : float) : BoundMethodHandle
        return editor().bindArgumentF(this, pos, value);
!!!7159426.java!!!	bindArgumentD(in pos : int, in value : double) : BoundMethodHandle
        return editor().bindArgumentD(this, pos, value);
!!!7159554.java!!!	rebind() : BoundMethodHandle
        if (!tooComplex()) {
            return this;
        }
        return makeReinvoker(this);
!!!7159682.java!!!	tooComplex() : boolean
        return (fieldCount() > FIELD_COUNT_THRESHOLD ||
                form.expressionCount() > FORM_EXPRESSION_THRESHOLD);
!!!7159810.java!!!	makeReinvoker(inout target : MethodHandle) : BoundMethodHandle
        LambdaForm form = DelegatingMethodHandle.makeReinvokerForm(
                target, MethodTypeForm.LF_REBIND,
                Species_L.SPECIES_DATA, Species_L.SPECIES_DATA.getterFunction(0));
        return Species_L.make(target.type(), form, target);
!!!7160066.java!!!	speciesData(inout form : LambdaForm) : BoundMethodHandle::SpeciesData
        Object c = form.names[0].constraint;
        if (c instanceof SpeciesData)
            return (SpeciesData) c;
        // if there is no BMH constraint, then use the null constraint
        return SpeciesData.EMPTY;
!!!7160322.java!!!	internalProperties() : Object
        return "\n& BMH="+internalValues();
!!!7160450.java!!!	internalValues() : Object
        Object[] boundValues = new Object[speciesData().fieldCount()];
        for (int i = 0; i < boundValues.length; ++i) {
            boundValues[i] = arg(i);
        }
        return Arrays.asList(boundValues);
!!!7160578.java!!!	arg(in i : int) : Object
        try {
            switch (speciesData().fieldType(i)) {
            case L_TYPE: return          speciesData().getters[i].invokeBasic(this);
            case I_TYPE: return (int)    speciesData().getters[i].invokeBasic(this);
            case J_TYPE: return (long)   speciesData().getters[i].invokeBasic(this);
            case F_TYPE: return (float)  speciesData().getters[i].invokeBasic(this);
            case D_TYPE: return (double) speciesData().getters[i].invokeBasic(this);
            }
        } catch (Throwable ex) {
            throw newInternalError(ex);
        }
        throw new InternalError("unexpected type: " + speciesData().typeChars+"."+i);
!!!7164802.java!!!	getSpeciesData(inout types : String) : BoundMethodHandle::SpeciesData
        return SpeciesData.get(types);
!!!7166722.java!!!	checkCache(in size : int, inout types : String) : BoundMethodHandle::SpeciesData
        int idx = size - 1;
        SpeciesData data = SPECIES_DATA_CACHE[idx];
        if (data != null)  return data;
        SPECIES_DATA_CACHE[idx] = data = getSpeciesData(types);
        return data;
!!!7166850.java!!!	speciesData_L() : BoundMethodHandle::SpeciesData
 return checkCache(1, "L");
!!!7166978.java!!!	speciesData_LL() : BoundMethodHandle::SpeciesData
 return checkCache(2, "LL");
!!!7167106.java!!!	speciesData_LLL() : BoundMethodHandle::SpeciesData
 return checkCache(3, "LLL");
!!!7167234.java!!!	speciesData_LLLL() : BoundMethodHandle::SpeciesData
 return checkCache(4, "LLLL");
!!!7167362.java!!!	speciesData_LLLLL() : BoundMethodHandle::SpeciesData
 return checkCache(5, "LLLLL");
