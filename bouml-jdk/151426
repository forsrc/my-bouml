format 222
"datatransfer" // jdk1.8::java::awt::datatransfer
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/awt/datatransfer/"
  java_package "java.awt.datatransfer"
  classview 147458 "datatransfer"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 352002 "Transferable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the interface for classes that can be used to provide data
for a transfer operation.
<p>
For information on using data transfer with Swing, see
<a href=\"https://docs.oracle.com/javase/tutorial/uiswing/dnd/index.html\">
How to Use Drag and Drop and Data Transfer</a>,
a section in <em>The Java Tutorial</em>, for more information.

@author      Amy Fowler
"
      operation 1973634 "getTransferDataFlavors"
	public return_type class_ref 352130 // DataFlavor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of DataFlavor objects indicating the flavors the data
can be provided in.  The array should be ordered according to preference
for providing the data (from most richly descriptive to least descriptive).
@return an array of data flavors in which this data can be transferred
"
      end

      operation 1973762 "isDataFlavorSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "flavor" type class_ref 352130 // DataFlavor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not the specified data flavor is supported for
this object.
@param flavor the requested flavor for the data
@return boolean indicating whether or not the data flavor is supported
"
      end

      operation 1973890 "getTransferData"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "flavor" type class_ref 352130 // DataFlavor
	nexceptions 2
	  exception class_ref 353282 // UnsupportedFlavorException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object which represents the data to be transferred.  The class
of the object returned is defined by the representation class of the flavor.

@param flavor the requested flavor for the data
@see DataFlavor#getRepresentationClass
@exception IOException                if the data is no longer available
             in the requested flavor.
@exception UnsupportedFlavorException if the requested data flavor is
             not supported.
"
      end
    end

    class 352130 "DataFlavor"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code DataFlavor} provides meta information about data. {@code DataFlavor}
is typically used to access data on the clipboard, or during
a drag and drop operation.
<p>
An instance of {@code DataFlavor} encapsulates a content type as
defined in <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>
and <a href=\"http://www.ietf.org/rfc/rfc2046.txt\">RFC 2046</a>.
A content type is typically referred to as a MIME type.
<p>
A content type consists of a media type (referred
to as the primary type), a subtype, and optional parameters. See
<a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>
for details on the syntax of a MIME type.
<p>
The JRE data transfer implementation interprets the parameter &quot;class&quot;
of a MIME type as <B>a representation class</b>.
The representation class reflects the class of the object being
transferred. In other words, the representation class is the type of
object returned by {@link Transferable#getTransferData}.
For example, the MIME type of {@link #imageFlavor} is
{@code \"image/x-java-image;class=java.awt.Image\"},
the primary type is {@code image}, the subtype is
{@code x-java-image}, and the representation class is
{@code java.awt.Image}. When {@code getTransferData} is invoked
with a {@code DataFlavor} of {@code imageFlavor}, an instance of
{@code java.awt.Image} is returned.
It's important to note that {@code DataFlavor} does no error checking
against the representation class. It is up to consumers of
{@code DataFlavor}, such as {@code Transferable}, to honor the representation
class.
<br>
Note, if you do not specify a representation class when
creating a {@code DataFlavor}, the default
representation class is used. See appropriate documentation for
{@code DataFlavor}'s constructors.
<p>
Also, {@code DataFlavor} instances with the &quot;text&quot; primary
MIME type may have a &quot;charset&quot; parameter. Refer to
<a href=\"http://www.ietf.org/rfc/rfc2046.txt\">RFC 2046</a> and
{@link #selectBestTextFlavor} for details on &quot;text&quot; MIME types
and the &quot;charset&quot; parameter.
<p>
Equality of {@code DataFlavors} is determined by the primary type,
subtype, and representation class. Refer to {@link #equals(DataFlavor)} for
details. When determining equality, any optional parameters are ignored.
For example, the following produces two {@code DataFlavors} that
are considered identical:
<pre>
  DataFlavor flavor1 = new DataFlavor(Object.class, &quot;X-test/test; class=&lt;java.lang.Object&gt;; foo=bar&quot;);
  DataFlavor flavor2 = new DataFlavor(Object.class, &quot;X-test/test; class=&lt;java.lang.Object&gt;; x=y&quot;);
  // The following returns true.
  flavor1.equals(flavor2);
</pre>
As mentioned, {@code flavor1} and {@code flavor2} are considered identical.
As such, asking a {@code Transferable} for either {@code DataFlavor} returns
the same results.
<p>
For more information on the using data transfer with Swing see
the <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/dnd/index.html\">
How to Use Drag and Drop and Data Transfer</a>,
section in <em>Java Tutorial</em>.

@author      Blake Sullivan
@author      Laurence P. G. Cable
@author      Jeff Dunn
"
      classrelation 2990594 // <realization>
	relation 2990594 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2990594 // <realization>
	  b parent class_ref 172162 // Externalizable
      end

      classrelation 2990722 // <realization>
	relation 2990722 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2990722 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 1459714 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8367026044764648243L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 2990850 // ioInputStreamClass (<unidirectional association>)
	relation 2990850 --->
	  a role_name "ioInputStreamClass" init_value " InputStream.class" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<InputStream> ${name}${value};
"
	    classrelation_ref 2990850 // ioInputStreamClass (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      operation 6389762 "tryToLoadClass"
	class_operation protected return_type class_ref 130818 // Class
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "fallback" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to load a class from: the bootstrap loader, the system loader,
the context loader (if one is present) and finally the loader specified.

@param className the name of the class to be loaded
@param fallback the fallback loader
@return the class loaded
@exception ClassNotFoundException if class is not found
"
      end

      operation 6389890 "createConstant"
	class_operation private return_type class_ref 352130 // DataFlavor
	nparams 2
	  param inout name "rc" type class_ref 130818 // Class
	  param inout name "prn" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "private initializer
"
      end

      operation 6390018 "createConstant"
	class_operation private return_type class_ref 352130 // DataFlavor
	nparams 2
	  param inout name "mt" type class_ref 128130 // String
	  param inout name "prn" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "private initializer
"
      end

      operation 6390146 "initHtmlDataFlavor"
	class_operation private return_type class_ref 352130 // DataFlavor
	nparams 1
	  param inout name "htmlFlavorType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "private initializer
"
      end

      classrelation 2990978 // stringFlavor (<unidirectional association>)
	relation 2990978 --->
	  a role_name "stringFlavor" init_value " createConstant(java.lang.String.class, \"Unicode String\")" class_relation const_relation public
	    comment "
The <code>DataFlavor</code> representing a Java Unicode String class,
where:
<pre>
    representationClass = java.lang.String
    mimeType           = \"application/x-java-serialized-object\"
</pre>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2990978 // stringFlavor (<unidirectional association>)
	  b parent class_ref 352130 // DataFlavor
      end

      classrelation 2991106 // imageFlavor (<unidirectional association>)
	relation 2991106 --->
	  a role_name "imageFlavor" init_value " createConstant(\"image/x-java-image; class=java.awt.Image\", \"Image\")" class_relation const_relation public
	    comment "
The <code>DataFlavor</code> representing a Java Image class,
where:
<pre>
    representationClass = java.awt.Image
    mimeType            = \"image/x-java-image\"
</pre>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2991106 // imageFlavor (<unidirectional association>)
	  b parent class_ref 352130 // DataFlavor
      end

      classrelation 2991234 // plainTextFlavor (<unidirectional association>)
	relation 2991234 --->
	  a role_name "plainTextFlavor" init_value " createConstant(\"text/plain; charset=unicode; class=java.io.InputStream\", \"Plain Text\")" class_relation const_relation public
	    comment "
The <code>DataFlavor</code> representing plain text with Unicode
encoding, where:
<pre>
    representationClass = InputStream
    mimeType            = \"text/plain; charset=unicode\"
</pre>
This <code>DataFlavor</code> has been <b>deprecated</b> because
(1) Its representation is an InputStream, an 8-bit based representation,
while Unicode is a 16-bit character set; and (2) The charset \"unicode\"
is not well-defined. \"unicode\" implies a particular platform's
implementation of Unicode, not a cross-platform implementation.

@deprecated as of 1.3. Use <code>DataFlavor.getReaderForText(Transferable)</code>
            instead of <code>Transferable.getTransferData(DataFlavor.plainTextFlavor)</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Deprecated
"
	    classrelation_ref 2991234 // plainTextFlavor (<unidirectional association>)
	  b parent class_ref 352130 // DataFlavor
      end

      classrelation 2991362 // javaSerializedObjectMimeType (<unidirectional association>)
	relation 2991362 --->
	  a role_name "javaSerializedObjectMimeType" init_value " \"application/x-java-serialized-object\"" class_relation const_relation public
	    comment "
A MIME Content-Type of application/x-java-serialized-object represents
a graph of Java object(s) that have been made persistent.

The representation class associated with this <code>DataFlavor</code>
identifies the Java type of an object returned as a reference
from an invocation <code>java.awt.datatransfer.getTransferData</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2991362 // javaSerializedObjectMimeType (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2991490 // javaFileListFlavor (<unidirectional association>)
	relation 2991490 --->
	  a role_name "javaFileListFlavor" init_value " createConstant(\"application/x-java-file-list;class=java.util.List\", null)" class_relation const_relation public
	    comment "
To transfer a list of files to/from Java (and the underlying
platform) a <code>DataFlavor</code> of this type/subtype and
representation class of <code>java.util.List</code> is used.
Each element of the list is required/guaranteed to be of type
<code>java.io.File</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2991490 // javaFileListFlavor (<unidirectional association>)
	  b parent class_ref 352130 // DataFlavor
      end

      classrelation 2991618 // javaJVMLocalObjectMimeType (<unidirectional association>)
	relation 2991618 --->
	  a role_name "javaJVMLocalObjectMimeType" init_value " \"application/x-java-jvm-local-objectref\"" class_relation const_relation public
	    comment "
To transfer a reference to an arbitrary Java object reference that
has no associated MIME Content-type, across a <code>Transferable</code>
interface WITHIN THE SAME JVM, a <code>DataFlavor</code>
with this type/subtype is used, with a <code>representationClass</code>
equal to the type of the class/interface being passed across the
<code>Transferable</code>.
<p>
The object reference returned from
<code>Transferable.getTransferData</code> for a <code>DataFlavor</code>
with this MIME Content-Type is required to be
an instance of the representation Class of the <code>DataFlavor</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2991618 // javaJVMLocalObjectMimeType (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2991746 // javaRemoteObjectMimeType (<unidirectional association>)
	relation 2991746 --->
	  a role_name "javaRemoteObjectMimeType" init_value " \"application/x-java-remote-object\"" class_relation const_relation public
	    comment "
In order to pass a live link to a Remote object via a Drag and Drop
<code>ACTION_LINK</code> operation a Mime Content Type of
application/x-java-remote-object should be used,
where the representation class of the <code>DataFlavor</code>
represents the type of the <code>Remote</code> interface to be
transferred.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2991746 // javaRemoteObjectMimeType (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2991874 // selectionHtmlFlavor (<unidirectional association>)
	relation 2991874 --->
	  a role_name "selectionHtmlFlavor" init_value " initHtmlDataFlavor(\"selection\")" class_relation public
	    comment "
Represents a piece of an HTML markup. The markup consists of the part
selected on the source side. Therefore some tags in the markup may be
unpaired. If the flavor is used to represent the data in
a {@link Transferable} instance, no additional changes will be made.
This DataFlavor instance represents the same HTML markup as DataFlavor
instances which content MIME type does not contain document parameter
and representation class is the String class.
<pre>
    representationClass = String
    mimeType           = \"text/html\"
</pre>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2991874 // selectionHtmlFlavor (<unidirectional association>)
	  b parent class_ref 352130 // DataFlavor
      end

      classrelation 2992002 // fragmentHtmlFlavor (<unidirectional association>)
	relation 2992002 --->
	  a role_name "fragmentHtmlFlavor" init_value " initHtmlDataFlavor(\"fragment\")" class_relation public
	    comment "
Represents a piece of an HTML markup. If possible, the markup received
from a native system is supplemented with pair tags to be
a well-formed HTML markup. If the flavor is used to represent the data in
a {@link Transferable} instance, no additional changes will be made.
<pre>
    representationClass = String
    mimeType           = \"text/html\"
</pre>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2992002 // fragmentHtmlFlavor (<unidirectional association>)
	  b parent class_ref 352130 // DataFlavor
      end

      classrelation 2992130 // allHtmlFlavor (<unidirectional association>)
	relation 2992130 --->
	  a role_name "allHtmlFlavor" init_value " initHtmlDataFlavor(\"all\")" class_relation public
	    comment "
Represents a piece of an HTML markup. If possible, the markup
received from a native system is supplemented with additional
tags to make up a well-formed HTML document. If the flavor is used to
represent the data in a {@link Transferable} instance,
no additional changes will be made.
<pre>
    representationClass = String
    mimeType           = \"text/html\"
</pre>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2992130 // allHtmlFlavor (<unidirectional association>)
	  b parent class_ref 352130 // DataFlavor
      end

      operation 6390274 "DataFlavor"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>DataFlavor</code>.  This constructor is
provided only for the purpose of supporting the
<code>Externalizable</code> interface.  It is not
intended for public (client) use.

@since 1.2
"
      end

      operation 6390402 "DataFlavor"
	private explicit_return_type ""
	nparams 5
	  param inout name "primaryType" type class_ref 128130 // String
	  param inout name "subType" type class_ref 128130 // String
	  param inout name "params" type class_ref 883586 // MimeTypeParameterList
	  param inout name "representationClass" type class_ref 130818 // Class
	  param inout name "humanPresentableName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a fully specified <code>DataFlavor</code>.

@exception NullPointerException if either <code>primaryType</code>,
           <code>subType</code> or <code>representationClass</code> is null
"
      end

      operation 6390530 "DataFlavor"
	public explicit_return_type ""
	nparams 2
	  param inout name "representationClass" type class_ref 130818 // Class
	  param inout name "humanPresentableName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>DataFlavor</code> that represents a Java class.
<p>
The returned <code>DataFlavor</code> will have the following
characteristics:
<pre>
   representationClass = representationClass
   mimeType            = application/x-java-serialized-object
</pre>
@param representationClass the class used to transfer data in this flavor
@param humanPresentableName the human-readable string used to identify
                this flavor; if this parameter is <code>null</code>
                then the value of the the MIME Content Type is used
@exception NullPointerException if <code>representationClass</code> is null
"
      end

      operation 6390658 "DataFlavor"
	public explicit_return_type ""
	nparams 2
	  param inout name "mimeType" type class_ref 128130 // String
	  param inout name "humanPresentableName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>DataFlavor</code> that represents a
<code>MimeType</code>.
<p>
The returned <code>DataFlavor</code> will have the following
characteristics:
<p>
If the <code>mimeType</code> is
\"application/x-java-serialized-object; class=&lt;representation class&gt;\",
the result is the same as calling
<code>new DataFlavor(Class:forName(&lt;representation class&gt;)</code>.
<p>
Otherwise:
<pre>
    representationClass = InputStream
    mimeType            = mimeType
</pre>
@param mimeType the string used to identify the MIME type for this flavor;
                if the the <code>mimeType</code> does not specify a
                \"class=\" parameter, or if the class is not successfully
                loaded, then an <code>IllegalArgumentException</code>
                is thrown
@param humanPresentableName the human-readable string used to identify
                this flavor; if this parameter is <code>null</code>
                then the value of the the MIME Content Type is used
@exception IllegalArgumentException if <code>mimeType</code> is
                invalid or if the class is not successfully loaded
@exception NullPointerException if <code>mimeType</code> is null
"
      end

      operation 6390786 "DataFlavor"
	public explicit_return_type ""
	nparams 3
	  param inout name "mimeType" type class_ref 128130 // String
	  param inout name "humanPresentableName" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>DataFlavor</code> that represents a
<code>MimeType</code>.
<p>
The returned <code>DataFlavor</code> will have the following
characteristics:
<p>
If the mimeType is
\"application/x-java-serialized-object; class=&lt;representation class&gt;\",
the result is the same as calling
<code>new DataFlavor(Class:forName(&lt;representation class&gt;)</code>.
<p>
Otherwise:
<pre>
    representationClass = InputStream
    mimeType            = mimeType
</pre>
@param mimeType the string used to identify the MIME type for this flavor
@param humanPresentableName the human-readable string used to
         identify this flavor
@param classLoader the class loader to use
@exception ClassNotFoundException if the class is not loaded
@exception IllegalArgumentException if <code>mimeType</code> is
                invalid
@exception NullPointerException if <code>mimeType</code> is null
"
      end

      operation 6390914 "DataFlavor"
	public explicit_return_type ""
	nparams 1
	  param inout name "mimeType" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>DataFlavor</code> from a <code>mimeType</code> string.
The string can specify a \"class=&lt;fully specified Java class name&gt;\"
parameter to create a <code>DataFlavor</code> with the desired
representation class. If the string does not contain \"class=\" parameter,
<code>java.io.InputStream</code> is used as default.

@param mimeType the string used to identify the MIME type for this flavor;
                if the class specified by \"class=\" parameter is not
                successfully loaded, then an
                <code>ClassNotFoundException</code> is thrown
@exception ClassNotFoundException if the class is not loaded
@exception IllegalArgumentException if <code>mimeType</code> is
                invalid
@exception NullPointerException if <code>mimeType</code> is null
"
      end

      operation 6391042 "initialize"
	private explicit_return_type "void"
	nparams 3
	  param inout name "mimeType" type class_ref 128130 // String
	  param inout name "humanPresentableName" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	nexceptions 2
	  exception class_ref 883714 // MimeTypeParseException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Common initialization code called from various constructors.

@param mimeType the MIME Content Type (must have a class= param)
@param humanPresentableName the human Presentable Name or
                <code>null</code>
@param classLoader the fallback class loader to resolve against

@throws MimeTypeParseException
@throws ClassNotFoundException
@throws  NullPointerException if <code>mimeType</code> is null

@see #tryToLoadClass
"
      end

      operation 6391170 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "String representation of this <code>DataFlavor</code> and its
parameters. The resulting <code>String</code> contains the name of
the <code>DataFlavor</code> class, this flavor's MIME type, and its
representation class. If this flavor has a primary MIME type of \"text\",
supports the charset parameter, and has an encoded representation, the
flavor's charset is also included. See <code>selectBestTextFlavor</code>
for a list of text flavors which support the charset parameter.

@return  string representation of this <code>DataFlavor</code>
@see #selectBestTextFlavor
"
      end

      operation 6391298 "paramString"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6391426 "getTextPlainUnicodeFlavor"
	class_operation public return_type class_ref 352130 // DataFlavor
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>DataFlavor</code> representing plain text with Unicode
encoding, where:
<pre>
    representationClass = java.io.InputStream
    mimeType            = \"text/plain;
                           charset=&lt;platform default Unicode encoding&gt;\"
</pre>
Sun's implementation for Microsoft Windows uses the encoding <code>utf-16le</code>.
Sun's implementation for Solaris and Linux uses the encoding
<code>iso-10646-ucs-2</code>.

@return a <code>DataFlavor</code> representing plain text
   with Unicode encoding
@since 1.3
"
      end

      operation 6391554 "selectBestTextFlavor"
	class_operation public return_type class_ref 352130 // DataFlavor
	nparams 1
	  param inout name "availableFlavors" type class_ref 352130 // DataFlavor
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Selects the best text <code>DataFlavor</code> from an array of <code>
DataFlavor</code>s. Only <code>DataFlavor.stringFlavor</code>, and
equivalent flavors, and flavors that have a primary MIME type of \"text\",
are considered for selection.
<p>
Flavors are first sorted by their MIME types in the following order:
<ul>
<li>\"text/sgml\"
<li>\"text/xml\"
<li>\"text/html\"
<li>\"text/rtf\"
<li>\"text/enriched\"
<li>\"text/richtext\"
<li>\"text/uri-list\"
<li>\"text/tab-separated-values\"
<li>\"text/t140\"
<li>\"text/rfc822-headers\"
<li>\"text/parityfec\"
<li>\"text/directory\"
<li>\"text/css\"
<li>\"text/calendar\"
<li>\"application/x-java-serialized-object\"
<li>\"text/plain\"
<li>\"text/&lt;other&gt;\"
</ul>
<p>For example, \"text/sgml\" will be selected over
\"text/html\", and <code>DataFlavor.stringFlavor</code> will be chosen
over <code>DataFlavor.plainTextFlavor</code>.
<p>
If two or more flavors share the best MIME type in the array, then that
MIME type will be checked to see if it supports the charset parameter.
<p>
The following MIME types support, or are treated as though they support,
the charset parameter:
<ul>
<li>\"text/sgml\"
<li>\"text/xml\"
<li>\"text/html\"
<li>\"text/enriched\"
<li>\"text/richtext\"
<li>\"text/uri-list\"
<li>\"text/directory\"
<li>\"text/css\"
<li>\"text/calendar\"
<li>\"application/x-java-serialized-object\"
<li>\"text/plain\"
</ul>
The following MIME types do not support, or are treated as though they
do not support, the charset parameter:
<ul>
<li>\"text/rtf\"
<li>\"text/tab-separated-values\"
<li>\"text/t140\"
<li>\"text/rfc822-headers\"
<li>\"text/parityfec\"
</ul>
For \"text/&lt;other&gt;\" MIME types, the first time the JRE needs to
determine whether the MIME type supports the charset parameter, it will
check whether the parameter is explicitly listed in an arbitrarily
chosen <code>DataFlavor</code> which uses that MIME type. If so, the JRE
will assume from that point on that the MIME type supports the charset
parameter and will not check again. If the parameter is not explicitly
listed, the JRE will assume from that point on that the MIME type does
not support the charset parameter and will not check again. Because
this check is performed on an arbitrarily chosen
<code>DataFlavor</code>, developers must ensure that all
<code>DataFlavor</code>s with a \"text/&lt;other&gt;\" MIME type specify
the charset parameter if it is supported by that MIME type. Developers
should never rely on the JRE to substitute the platform's default
charset for a \"text/&lt;other&gt;\" DataFlavor. Failure to adhere to this
restriction will lead to undefined behavior.
<p>
If the best MIME type in the array does not support the charset
parameter, the flavors which share that MIME type will then be sorted by
their representation classes in the following order:
<code>java.io.InputStream</code>, <code>java.nio.ByteBuffer</code>,
<code>[B</code>, &lt;all others&gt;.
<p>
If two or more flavors share the best representation class, or if no
flavor has one of the three specified representations, then one of those
flavors will be chosen non-deterministically.
<p>
If the best MIME type in the array does support the charset parameter,
the flavors which share that MIME type will then be sorted by their
representation classes in the following order:
<code>java.io.Reader</code>, <code>java.lang.String</code>,
<code>java.nio.CharBuffer</code>, <code>[C</code>, &lt;all others&gt;.
<p>
If two or more flavors share the best representation class, and that
representation is one of the four explicitly listed, then one of those
flavors will be chosen non-deterministically. If, however, no flavor has
one of the four specified representations, the flavors will then be
sorted by their charsets. Unicode charsets, such as \"UTF-16\", \"UTF-8\",
\"UTF-16BE\", \"UTF-16LE\", and their aliases, are considered best. After
them, the platform default charset and its aliases are selected.
\"US-ASCII\" and its aliases are worst. All other charsets are chosen in
alphabetical order, but only charsets supported by this implementation
of the Java platform will be considered.
<p>
If two or more flavors share the best charset, the flavors will then
again be sorted by their representation classes in the following order:
<code>java.io.InputStream</code>, <code>java.nio.ByteBuffer</code>,
<code>[B</code>, &lt;all others&gt;.
<p>
If two or more flavors share the best representation class, or if no
flavor has one of the three specified representations, then one of those
flavors will be chosen non-deterministically.

@param availableFlavors an array of available <code>DataFlavor</code>s
@return the best (highest fidelity) flavor according to the rules
        specified above, or <code>null</code>,
        if <code>availableFlavors</code> is <code>null</code>,
        has zero length, or contains no text flavors
@since 1.3
"
      end

      classrelation 2992258 // textFlavorComparator (<unidirectional association>)
	relation 2992258 --->
	  a role_name "textFlavorComparator" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<DataFlavor> ${name}${value};
"
	    classrelation_ref 2992258 // textFlavorComparator (<unidirectional association>)
	  b parent class_ref 184962 // Comparator
      end

      class 883842 "TextFlavorComparator"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 6391682 "compare"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "obj1" type class_ref 129538 // Object
	    param inout name "obj2" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Compares two <code>DataFlavor</code> objects. Returns a negative
integer, zero, or a positive integer as the first
<code>DataFlavor</code> is worse than, equal to, or better than the
second.
<p>
<code>DataFlavor</code>s are ordered according to the rules outlined
for <code>selectBestTextFlavor</code>.

@param obj1 the first <code>DataFlavor</code> to be compared
@param obj2 the second <code>DataFlavor</code> to be compared
@return a negative integer, zero, or a positive integer as the first
        argument is worse, equal to, or better than the second
@throws ClassCastException if either of the arguments is not an
        instance of <code>DataFlavor</code>
@throws NullPointerException if either of the arguments is
        <code>null</code>

@see #selectBestTextFlavor
"
	end
      end

      operation 6391810 "getReaderForText"
	public return_type class_ref 407298 // Reader
	nparams 1
	  param inout name "transferable" type class_ref 352002 // Transferable
	nexceptions 2
	  exception class_ref 353282 // UnsupportedFlavorException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a Reader for a text flavor, decoded, if necessary, for the expected
charset (encoding). The supported representation classes are
<code>java.io.Reader</code>, <code>java.lang.String</code>,
<code>java.nio.CharBuffer</code>, <code>[C</code>,
<code>java.io.InputStream</code>, <code>java.nio.ByteBuffer</code>,
and <code>[B</code>.
<p>
Because text flavors which do not support the charset parameter are
encoded in a non-standard format, this method should not be called for
such flavors. However, in order to maintain backward-compatibility,
if this method is called for such a flavor, this method will treat the
flavor as though it supports the charset parameter and attempt to
decode it accordingly. See <code>selectBestTextFlavor</code> for a list
of text flavors which do not support the charset parameter.

@param transferable the <code>Transferable</code> whose data will be
       requested in this flavor

@return a <code>Reader</code> to read the <code>Transferable</code>'s
        data

@exception IllegalArgumentException if the representation class
           is not one of the seven listed above
@exception IllegalArgumentException if the <code>Transferable</code>
           has <code>null</code> data
@exception NullPointerException if the <code>Transferable</code> is
           <code>null</code>
@exception UnsupportedEncodingException if this flavor's representation
           is <code>java.io.InputStream</code>,
           <code>java.nio.ByteBuffer</code>, or <code>[B</code> and
           this flavor's encoding is not supported by this
           implementation of the Java platform
@exception UnsupportedFlavorException if the <code>Transferable</code>
           does not support this flavor
@exception IOException if the data cannot be read because of an
           I/O error
@see #selectBestTextFlavor
@since 1.3
"
      end

      operation 6391938 "getMimeType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the MIME type string for this <code>DataFlavor</code>.
@return the MIME type string for this flavor
"
      end

      operation 6392066 "getRepresentationClass"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Class</code> which objects supporting this
<code>DataFlavor</code> will return when this <code>DataFlavor</code>
is requested.
@return the <code>Class</code> which objects supporting this
<code>DataFlavor</code> will return when this <code>DataFlavor</code>
is requested
"
      end

      operation 6392194 "getHumanPresentableName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the human presentable name for the data format that this
<code>DataFlavor</code> represents.  This name would be localized
for different countries.
@return the human presentable name for the data format that this
   <code>DataFlavor</code> represents
"
      end

      operation 6392322 "getPrimaryType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the primary MIME type for this <code>DataFlavor</code>.
@return the primary MIME type of this <code>DataFlavor</code>
"
      end

      operation 6392450 "getSubType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sub MIME type of this <code>DataFlavor</code>.
@return the Sub MIME type of this <code>DataFlavor</code>
"
      end

      operation 6392578 "getParameter"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "paramName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the human presentable name for this <code>DataFlavor</code>
if <code>paramName</code> equals \"humanPresentableName\".  Otherwise
returns the MIME type value associated with <code>paramName</code>.

@param paramName the parameter name requested
@return the value of the name parameter, or <code>null</code>
 if there is no associated value
"
      end

      operation 6392706 "setHumanPresentableName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "humanPresentableName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the human presentable name for the data format that this
<code>DataFlavor</code> represents. This name would be localized
for different countries.
@param humanPresentableName the new human presentable name
"
      end

      operation 6392834 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
<p>
The equals comparison for the {@code DataFlavor} class is implemented
as follows: Two <code>DataFlavor</code>s are considered equal if and
only if their MIME primary type and subtype and representation class are
equal. Additionally, if the primary type is \"text\", the subtype denotes
a text flavor which supports the charset parameter, and the
representation class is not <code>java.io.Reader</code>,
<code>java.lang.String</code>, <code>java.nio.CharBuffer</code>, or
<code>[C</code>, the <code>charset</code> parameter must also be equal.
If a charset is not explicitly specified for one or both
<code>DataFlavor</code>s, the platform default encoding is assumed. See
<code>selectBestTextFlavor</code> for a list of text flavors which
support the charset parameter.

@param o the <code>Object</code> to compare with <code>this</code>
@return <code>true</code> if <code>that</code> is equivalent to this
        <code>DataFlavor</code>; <code>false</code> otherwise
@see #selectBestTextFlavor
"
      end

      operation 6392962 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 352130 // DataFlavor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method has the same behavior as {@link #equals(Object)}.
The only difference being that it takes a {@code DataFlavor} instance
as a parameter.

@param that the <code>DataFlavor</code> to compare with
       <code>this</code>
@return <code>true</code> if <code>that</code> is equivalent to this
        <code>DataFlavor</code>; <code>false</code> otherwise
@see #selectBestTextFlavor
"
      end

      operation 6393090 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Compares only the <code>mimeType</code> against the passed in
<code>String</code> and <code>representationClass</code> is
not considered in the comparison.

If <code>representationClass</code> needs to be compared, then
<code>equals(new DataFlavor(s))</code> may be used.
@deprecated As inconsistent with <code>hashCode()</code> contract,
            use <code>isMimeTypeEqual(String)</code> instead.
@param s the {@code mimeType} to compare.
@return true if the String (MimeType) is equal; false otherwise or if
        {@code s} is {@code null}
"
      end

      operation 6393218 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns hash code for this <code>DataFlavor</code>.
For two equal <code>DataFlavor</code>s, hash codes are equal.
For the <code>String</code>
that matches <code>DataFlavor.equals(String)</code>, it is not
guaranteed that <code>DataFlavor</code>'s hash code is equal
to the hash code of the <code>String</code>.

@return a hash code for this <code>DataFlavor</code>
"
      end

      operation 6393346 "match"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 352130 // DataFlavor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Identical to {@link #equals(DataFlavor)}.

@param that the <code>DataFlavor</code> to compare with
       <code>this</code>
@return <code>true</code> if <code>that</code> is equivalent to this
        <code>DataFlavor</code>; <code>false</code> otherwise
@see #selectBestTextFlavor
@since 1.3
"
      end

      operation 6393474 "isMimeTypeEqual"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "mimeType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the string representation of the MIME type passed in
is equivalent to the MIME type of this <code>DataFlavor</code>.
Parameters are not included in the comparison.

@param mimeType the string representation of the MIME type
@return true if the string representation of the MIME type passed in is
        equivalent to the MIME type of this <code>DataFlavor</code>;
        false otherwise
@throws NullPointerException if mimeType is <code>null</code>
"
      end

      operation 6393602 "isMimeTypeEqual"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "dataFlavor" type class_ref 352130 // DataFlavor
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the <code>mimeType</code> of two <code>DataFlavor</code>
objects. No parameters are considered.

@param dataFlavor the <code>DataFlavor</code> to be compared
@return true if the <code>MimeType</code>s are equal,
 otherwise false
"
      end

      operation 6393730 "isMimeTypeEqual"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "mtype" type class_ref 884098 // MimeType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the <code>mimeType</code> of two <code>DataFlavor</code>
objects.  No parameters are considered.

@return true if the <code>MimeType</code>s are equal,
 otherwise false
"
      end

      operation 6393858 "isStandardTextRepresentationClass"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the representation class is one of the standard text
representation classes.

@return true if the representation class is one of the standard text
             representation classes, otherwise false
"
      end

      operation 6393986 "isMimeTypeSerializedObject"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does the <code>DataFlavor</code> represent a serialized object?
"
      end

      operation 6394114 "getDefaultRepresentationClass"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6394242 "getDefaultRepresentationClassAsString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6394370 "isRepresentationClassInputStream"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does the <code>DataFlavor</code> represent a
<code>java.io.InputStream</code>?
"
      end

      operation 6394498 "isRepresentationClassReader"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the representation class for this
<code>DataFlavor</code> is <code>java.io.Reader</code> or a subclass
thereof.

@since 1.4
"
      end

      operation 6394626 "isRepresentationClassCharBuffer"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the representation class for this
<code>DataFlavor</code> is <code>java.nio.CharBuffer</code> or a
subclass thereof.

@since 1.4
"
      end

      operation 6394754 "isRepresentationClassByteBuffer"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the representation class for this
<code>DataFlavor</code> is <code>java.nio.ByteBuffer</code> or a
subclass thereof.

@since 1.4
"
      end

      operation 6394882 "isRepresentationClassSerializable"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the representation class can be serialized.
@return true if the representation class can be serialized
"
      end

      operation 6395010 "isRepresentationClassRemote"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the representation class is <code>Remote</code>.
@return true if the representation class is <code>Remote</code>
"
      end

      operation 6395138 "isFlavorSerializedObjectType"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the <code>DataFlavor</code> specified represents
a serialized object.
@return true if the <code>DataFlavor</code> specified represents
  a Serialized Object
"
      end

      operation 6395266 "isFlavorRemoteObjectType"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the <code>DataFlavor</code> specified represents
a remote object.
@return true if the <code>DataFlavor</code> specified represents
 a Remote Object
"
      end

      operation 6395394 "isFlavorJavaFileListType"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the <code>DataFlavor</code> specified represents
a list of file objects.
@return true if the <code>DataFlavor</code> specified represents
  a List of File objects
"
      end

      operation 6395522 "isFlavorTextType"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this <code>DataFlavor</code> is a valid text flavor for
this implementation of the Java platform. Only flavors equivalent to
<code>DataFlavor.stringFlavor</code> and <code>DataFlavor</code>s with
a primary MIME type of \"text\" can be valid text flavors.
<p>
If this flavor supports the charset parameter, it must be equivalent to
<code>DataFlavor.stringFlavor</code>, or its representation must be
<code>java.io.Reader</code>, <code>java.lang.String</code>,
<code>java.nio.CharBuffer</code>, <code>[C</code>,
<code>java.io.InputStream</code>, <code>java.nio.ByteBuffer</code>, or
<code>[B</code>. If the representation is
<code>java.io.InputStream</code>, <code>java.nio.ByteBuffer</code>, or
<code>[B</code>, then this flavor's <code>charset</code> parameter must
be supported by this implementation of the Java platform. If a charset
is not specified, then the platform default charset, which is always
supported, is assumed.
<p>
If this flavor does not support the charset parameter, its
representation must be <code>java.io.InputStream</code>,
<code>java.nio.ByteBuffer</code>, or <code>[B</code>.
<p>
See <code>selectBestTextFlavor</code> for a list of text flavors which
support the charset parameter.

@return <code>true</code> if this <code>DataFlavor</code> is a valid
        text flavor as described above; <code>false</code> otherwise
@see #selectBestTextFlavor
@since 1.4
"
      end

      operation 6395650 "writeExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "os" type class_ref 174082 // ObjectOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes this <code>DataFlavor</code>.
"
      end

      operation 6395778 "readExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "is" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Restores this <code>DataFlavor</code> from a Serialized state.
"
      end

      operation 6395906 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 129794 // CloneNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a clone of this <code>DataFlavor</code>.
@return a clone of this <code>DataFlavor</code>
"
      end

      operation 6396034 "normalizeMimeTypeParameter"
	protected return_type class_ref 128130 // String
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "parameterValue" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment " clone()

Called on <code>DataFlavor</code> for every MIME Type parameter
to allow <code>DataFlavor</code> subclasses to handle special
parameters like the text/plain <code>charset</code>
parameters, whose values are case insensitive.  (MIME type parameter
values are supposed to be case sensitive.
<p>
This method is called for each parameter name/value pair and should
return the normalized representation of the <code>parameterValue</code>.

This method is never invoked by this implementation from 1.1 onwards.

@deprecated
"
      end

      operation 6396162 "normalizeMimeType"
	protected return_type class_ref 128130 // String
	nparams 1
	  param inout name "mimeType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Called for each MIME type string to give <code>DataFlavor</code> subtypes
the opportunity to change how the normalization of MIME types is
accomplished.  One possible use would be to add default
parameter/value pairs in cases where none are present in the MIME
type string passed in.

This method is never invoked by this implementation from 1.1 onwards.

@deprecated
"
      end

      attribute 1459842 "atom"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "fields

 placeholder for caching any platform-specific data for flavor 
"
      end

      classrelation 2992514 // mimeType (<unidirectional association>)
	relation 2992514 --->
	  a role_name "mimeType" package
	    comment " Mime Type of DataFlavor 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2992514 // mimeType (<unidirectional association>)
	  b parent class_ref 884098 // MimeType
      end

      classrelation 2992642 // humanPresentableName (<unidirectional association>)
	relation 2992642 --->
	  a role_name "humanPresentableName" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2992642 // humanPresentableName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2992770 // representationClass (<unidirectional association>)
	relation 2992770 --->
	  a role_name "representationClass" private
	    comment " Java class of objects this DataFlavor represents *
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 2992770 // representationClass (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end
    end

    class 352514 "Clipboard"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class that implements a mechanism to transfer data using
cut/copy/paste operations.
<p>
{@link FlavorListener}s may be registered on an instance of the
Clipboard class to be notified about changes to the set of
{@link DataFlavor}s available on this clipboard (see
{@link #addFlavorListener}).

@see java.awt.Toolkit#getSystemClipboard
@see java.awt.Toolkit#getSystemSelection

@author      Amy Fowler
@author      Alexander Gerasimov
"
      classrelation 2990082 // name (<unidirectional association>)
	relation 2990082 --->
	  a role_name "name" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2990082 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2990210 // owner (<unidirectional association>)
	relation 2990210 --->
	  a role_name "owner" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2990210 // owner (<unidirectional association>)
	  b parent class_ref 403202 // ClipboardOwner
      end

      classrelation 2990338 // contents (<unidirectional association>)
	relation 2990338 --->
	  a role_name "contents" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2990338 // contents (<unidirectional association>)
	  b parent class_ref 352002 // Transferable
      end

      attribute 1459586 "flavorListeners"
	private explicit_type "EventListenerAggregate"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An aggregate of flavor listeners registered on this local clipboard.

@since 1.5

"
      end

      classrelation 2990466 // currentDataFlavors (<unidirectional association>)
	relation 2990466 --->
	  a role_name "currentDataFlavors" private
	    comment "
A set of <code>DataFlavor</code>s that is available on
this local clipboard. It is used for tracking changes
of <code>DataFlavor</code>s available on this clipboard.

@since 1.5

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<DataFlavor> ${name}${value};
"
	    classrelation_ref 2990466 // currentDataFlavors (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      operation 6388226 "Clipboard"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a clipboard object.

@see java.awt.Toolkit#getSystemClipboard
"
      end

      operation 6388354 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this clipboard object.

@see java.awt.Toolkit#getSystemClipboard
"
      end

      operation 6388482 "setContents"
	public explicit_return_type "void"
	nparams 2
	  param inout name "contents" type class_ref 352002 // Transferable
	  param inout name "owner" type class_ref 403202 // ClipboardOwner
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current contents of the clipboard to the specified
transferable object and registers the specified clipboard owner
as the owner of the new contents.
<p>
If there is an existing owner different from the argument
<code>owner</code>, that owner is notified that it no longer
holds ownership of the clipboard contents via an invocation
of <code>ClipboardOwner.lostOwnership()</code> on that owner.
An implementation of <code>setContents()</code> is free not
to invoke <code>lostOwnership()</code> directly from this method.
For example, <code>lostOwnership()</code> may be invoked later on
a different thread. The same applies to <code>FlavorListener</code>s
registered on this clipboard.
<p>
The method throws <code>IllegalStateException</code> if the clipboard
is currently unavailable. For example, on some platforms, the system
clipboard is unavailable while it is accessed by another application.

@param contents the transferable object representing the
                clipboard content
@param owner the object which owns the clipboard content
@throws IllegalStateException if the clipboard is currently unavailable
@see java.awt.Toolkit#getSystemClipboard
"
      end

      operation 6388610 "getContents"
	public return_type class_ref 352002 // Transferable
	nparams 1
	  param inout name "requestor" type class_ref 129538 // Object
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a transferable object representing the current contents
of the clipboard.  If the clipboard currently has no contents,
it returns <code>null</code>. The parameter Object requestor is
not currently used.  The method throws
<code>IllegalStateException</code> if the clipboard is currently
unavailable.  For example, on some platforms, the system clipboard is
unavailable while it is accessed by another application.

@param requestor the object requesting the clip data  (not used)
@return the current transferable object on the clipboard
@throws IllegalStateException if the clipboard is currently unavailable
@see java.awt.Toolkit#getSystemClipboard
"
      end

      operation 6388738 "getAvailableDataFlavors"
	public return_type class_ref 352130 // DataFlavor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>DataFlavor</code>s in which the current
contents of this clipboard can be provided. If there are no
<code>DataFlavor</code>s available, this method returns a zero-length
array.

@return an array of <code>DataFlavor</code>s in which the current
        contents of this clipboard can be provided

@throws IllegalStateException if this clipboard is currently unavailable

@since 1.5
"
      end

      operation 6388866 "isDataFlavorAvailable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "flavor" type class_ref 352130 // DataFlavor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not the current contents of this clipboard can be
provided in the specified <code>DataFlavor</code>.

@param flavor the requested <code>DataFlavor</code> for the contents

@return <code>true</code> if the current contents of this clipboard
        can be provided in the specified <code>DataFlavor</code>;
        <code>false</code> otherwise

@throws NullPointerException if <code>flavor</code> is <code>null</code>
@throws IllegalStateException if this clipboard is currently unavailable

@since 1.5
"
      end

      operation 6388994 "getData"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "flavor" type class_ref 352130 // DataFlavor
	nexceptions 2
	  exception class_ref 353282 // UnsupportedFlavorException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object representing the current contents of this clipboard
in the specified <code>DataFlavor</code>.
The class of the object returned is defined by the representation
class of <code>flavor</code>.

@param flavor the requested <code>DataFlavor</code> for the contents

@return an object representing the current contents of this clipboard
        in the specified <code>DataFlavor</code>

@throws NullPointerException if <code>flavor</code> is <code>null</code>
@throws IllegalStateException if this clipboard is currently unavailable
@throws UnsupportedFlavorException if the requested <code>DataFlavor</code>
        is not available
@throws IOException if the data in the requested <code>DataFlavor</code>
        can not be retrieved

@see DataFlavor#getRepresentationClass

@since 1.5
"
      end

      operation 6389122 "addFlavorListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 883458 // FlavorListener
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the specified <code>FlavorListener</code> to receive
<code>FlavorEvent</code>s from this clipboard.
If <code>listener</code> is <code>null</code>, no exception
is thrown and no action is performed.

@param listener the listener to be added

@see #removeFlavorListener
@see #getFlavorListeners
@see FlavorListener
@see FlavorEvent
@since 1.5
"
      end

      operation 6389250 "removeFlavorListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 883458 // FlavorListener
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified <code>FlavorListener</code> so that it no longer
receives <code>FlavorEvent</code>s from this <code>Clipboard</code>.
This method performs no function, nor does it throw an exception, if
the listener specified by the argument was not previously added to this
<code>Clipboard</code>.
If <code>listener</code> is <code>null</code>, no exception
is thrown and no action is performed.

@param listener the listener to be removed

@see #addFlavorListener
@see #getFlavorListeners
@see FlavorListener
@see FlavorEvent
@since 1.5
"
      end

      operation 6389378 "getFlavorListeners"
	public return_type class_ref 883458 // FlavorListener
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all the <code>FlavorListener</code>s currently
registered on this <code>Clipboard</code>.

@return all of this clipboard's <code>FlavorListener</code>s or an empty
        array if no listeners are currently registered
@see #addFlavorListener
@see #removeFlavorListener
@see FlavorListener
@see FlavorEvent
@since 1.5
"
      end

      operation 6389506 "fireFlavorsChanged"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks change of the <code>DataFlavor</code>s and, if necessary,
notifies all listeners that have registered interest for notification
on <code>FlavorEvent</code>s.

@since 1.5
"
      end

      operation 6389634 "getAvailableDataFlavorSet"
	private return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<DataFlavor> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a set of <code>DataFlavor</code>s currently available
on this clipboard.

@return a set of <code>DataFlavor</code>s currently available
        on this clipboard

@since 1.5
"
      end
    end

    class 353282 "UnsupportedFlavorException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that the requested data is not supported in this flavor.
@see Transferable#getTransferData

@author      Amy Fowler
"
      classrelation 2997506 // <generalisation>
	relation 2997506 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2997506 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 1460610 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5383814944251665601L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.1 serialVersionUID

"
      end

      operation 6406786 "UnsupportedFlavorException"
	public explicit_return_type ""
	nparams 1
	  param inout name "flavor" type class_ref 352130 // DataFlavor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an UnsupportedFlavorException.

@param flavor the flavor object which caused the exception. May
       be <code>null</code>.
"
      end
    end

    class 353794 "FlavorMap"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A two-way Map between \"natives\" (Strings), which correspond to platform-
specific data formats, and \"flavors\" (DataFlavors), which correspond to
platform-independent MIME types. FlavorMaps need not be symmetric, but
typically are.


@since 1.2
"
      operation 6396546 "getNativesForFlavors"
	public return_type class_ref 130178 // Map
	nparams 1
	  param inout name "flavors" type class_ref 352130 // DataFlavor
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<DataFlavor,String> ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Map</code> of the specified <code>DataFlavor</code>s to
their corresponding <code>String</code> native. The returned
<code>Map</code> is a modifiable copy of this <code>FlavorMap</code>'s
internal data. Client code is free to modify the <code>Map</code>
without affecting this object.

@param flavors an array of <code>DataFlavor</code>s which will be the
       key set of the returned <code>Map</code>. If <code>null</code> is
       specified, a mapping of all <code>DataFlavor</code>s currently
       known to this <code>FlavorMap</code> to their corresponding
       <code>String</code> natives will be returned.
@return a <code>java.util.Map</code> of <code>DataFlavor</code>s to
        <code>String</code> natives
"
      end

      operation 6396674 "getFlavorsForNatives"
	public return_type class_ref 130178 // Map
	nparams 1
	  param inout name "natives" type class_ref 128130 // String
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,DataFlavor> ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Map</code> of the specified <code>String</code> natives
to their corresponding <code>DataFlavor</code>. The returned
<code>Map</code> is a modifiable copy of this <code>FlavorMap</code>'s
internal data. Client code is free to modify the <code>Map</code>
without affecting this object.

@param natives an array of <code>String</code>s which will be the
       key set of the returned <code>Map</code>. If <code>null</code> is
       specified, a mapping of all <code>String</code> natives currently
       known to this <code>FlavorMap</code> to their corresponding
       <code>DataFlavor</code>s will be returned.
@return a <code>java.util.Map</code> of <code>String</code> natives to
        <code>DataFlavor</code>s
"
      end
    end

    class 403202 "ClipboardOwner"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the interface for classes that will provide data to
a clipboard. An instance of this interface becomes the owner
of the contents of a clipboard (clipboard owner) if it is
passed as an argument to
{@link java.awt.datatransfer.Clipboard#setContents} method of
the clipboard and this method returns successfully.
The instance remains the clipboard owner until another application
or another object within this application asserts ownership
of this clipboard.

@see java.awt.datatransfer.Clipboard

@author      Amy Fowler
"
      operation 2336642 "lostOwnership"
	public explicit_return_type "void"
	nparams 2
	  param inout name "clipboard" type class_ref 352514 // Clipboard
	  param inout name "contents" type class_ref 352002 // Transferable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies this object that it is no longer the clipboard owner.
This method will be called when another application or another
object within this application asserts ownership of the clipboard.

@param clipboard the clipboard that is no longer owned
@param contents the contents which this owner had placed on the clipboard
"
      end
    end

    class 883458 "FlavorListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines an object which listens for {@link FlavorEvent}s.

@author Alexander Gerasimov
@since 1.5
"
      classrelation 2993026 // <generalisation>
	relation 2993026 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2993026 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 6396418 "flavorsChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 884226 // FlavorEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when the target {@link Clipboard} of the listener
has changed its available {@link DataFlavor}s.
<p>
Some notifications may be redundant &#151; they are not
caused by a change of the set of DataFlavors available
on the clipboard.
For example, if the clipboard subsystem supposes that
the system clipboard's contents has been changed but it
can't ascertain whether its DataFlavors have been changed
because of some exceptional condition when accessing the
clipboard, the notification is sent to ensure from omitting
a significant notification. Ordinarily, those redundant
notifications should be occasional.

@param e  a <code>FlavorEvent</code> object
"
      end
    end

    class 883586 "MimeTypeParameterList"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that encapsulates the parameter list of a MimeType
as defined in RFC 2045 and 2046.

@author jeff.dunn@eng.sun.com
"
      classrelation 2994050 // <realization>
	relation 2994050 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2994050 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      operation 6399874 "MimeTypeParameterList"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 6400002 "MimeTypeParameterList"
	public explicit_return_type ""
	nparams 1
	  param inout name "rawdata" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 883714 // MimeTypeParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6400130 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6400258 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "thatObject" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " hashCode()

Two parameter lists are considered equal if they have exactly
the same set of parameter names and associated values. The
order of the parameters is not considered.
"
      end

      operation 6400386 "parse"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "rawdata" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 883714 // MimeTypeParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " equals()

A routine for parsing the parameter list out of a String.
"
      end

      operation 6400514 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "return the number of name-value pairs in this list.
"
      end

      operation 6400642 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not this list is empty.
"
      end

      operation 6400770 "get"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the value associated with the given name, or null if there
is no current association.
"
      end

      operation 6400898 "set"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the value to be associated with the given name, replacing
any previous association.
"
      end

      operation 6401026 "remove"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove any value associated with the given name.
"
      end

      operation 6401154 "getNames"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve an enumeration of all the names in this list.
"
      end

      operation 6401282 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6401410 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return a clone of this object
"
      end

      classrelation 2994178 // parameters (<unidirectional association>)
	relation 2994178 --->
	  a role_name "parameters" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String> ${name}${value};
"
	    classrelation_ref 2994178 // parameters (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      operation 6401538 "isTokenChar"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    below here be scary parsing related things

Determine whether or not a given character belongs to a legal token.
"
      end

      operation 6401666 "skipWhiteSpace"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "rawdata" type class_ref 128130 // String
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "return the index of the first non white space character in
rawdata at or after index i.
"
      end

      operation 6401794 "quote"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A routine that knows how and when to quote and escape the given value.
"
      end

      operation 6401922 "unquote"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A routine that knows how to strip the quotes and escape sequences from the given value.
"
      end

      classrelation 2994306 // TSPECIALS (<unidirectional association>)
	relation 2994306 --->
	  a role_name "TSPECIALS" init_value " \"()<>@,;:\\\\\\\"/[]?=\"" class_relation const_relation private
	    comment "
A string that holds all the special chars.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2994306 // TSPECIALS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end
    end

    class 883714 "MimeTypeParseException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "   A class to encapsulate MimeType parsing related exceptions

@serial exclude
@since 1.3
"
      classrelation 2994434 // <generalisation>
	relation 2994434 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2994434 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 1460098 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5604407764691570741L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " use serialVersionUID from JDK 1.2.2 for interoperability
"
      end

      operation 6402050 "MimeTypeParseException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a MimeTypeParseException with no specified detail message.
"
      end

      operation 6402178 "MimeTypeParseException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a MimeTypeParseException with the specified detail message.

@param   s   the detail message.
"
      end
    end

    class 884098 "MimeType"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A Multipurpose Internet Mail Extension (MIME) type, as defined
in RFC 2045 and 2046.

THIS IS *NOT* - REPEAT *NOT* - A PUBLIC CLASS! DataFlavor IS
THE PUBLIC INTERFACE, AND THIS IS PROVIDED AS A ***PRIVATE***
(THAT IS AS IN *NOT* PUBLIC) HELPER CLASS!
"
      classrelation 2993282 // <realization>
	relation 2993282 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2993282 // <realization>
	  b parent class_ref 172162 // Externalizable
      end

      classrelation 2993410 // <realization>
	relation 2993410 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2993410 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 1459970 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -6568722458793895906L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "serialization support

"
      end

      operation 6397058 "MimeType"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for externalization; this constructor should not be
called directly by an application, since the result will be an
uninitialized, immutable <code>MimeType</code> object.
"
      end

      operation 6397186 "MimeType"
	public explicit_return_type ""
	nparams 1
	  param inout name "rawdata" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 883714 // MimeTypeParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Builds a <code>MimeType</code> from a <code>String</code>.

@param rawdata text used to initialize the <code>MimeType</code>
@throws NullPointerException if <code>rawdata</code> is null
"
      end

      operation 6397314 "MimeType"
	public explicit_return_type ""
	nparams 2
	  param inout name "primary" type class_ref 128130 // String
	  param inout name "sub" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 883714 // MimeTypeParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Builds a <code>MimeType</code> with the given primary and sub
type but has an empty parameter list.

@param primary the primary type of this <code>MimeType</code>
@param sub the subtype of this <code>MimeType</code>
@throws NullPointerException if either <code>primary</code> or
        <code>sub</code> is null
"
      end

      operation 6397442 "MimeType"
	public explicit_return_type ""
	nparams 3
	  param inout name "primary" type class_ref 128130 // String
	  param inout name "sub" type class_ref 128130 // String
	  param inout name "mtpl" type class_ref 883586 // MimeTypeParameterList
	nexceptions 1
	  exception class_ref 883714 // MimeTypeParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Builds a <code>MimeType</code> with a pre-defined
and valid (or empty) parameter list.

@param primary the primary type of this <code>MimeType</code>
@param sub the subtype of this <code>MimeType</code>
@param mtpl the requested parameter list
@throws NullPointerException if either <code>primary</code>,
        <code>sub</code> or <code>mtpl</code> is null
"
      end

      operation 6397570 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6397698 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "thatObject" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " hashCode()

<code>MimeType</code>s are equal if their primary types,
subtypes, and  parameters are all equal. No default values
are taken into account.
@param thatObject the object to be evaluated as a
   <code>MimeType</code>
@return <code>true</code> if <code>thatObject</code> is
   a <code>MimeType</code>; otherwise returns <code>false</code>
"
      end

      operation 6397826 "parse"
	private explicit_return_type "void"
	nparams 1
	  param inout name "rawdata" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 883714 // MimeTypeParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " equals()

A routine for parsing the MIME type out of a String.

@throws NullPointerException if <code>rawdata</code> is null
"
      end

      operation 6397954 "getPrimaryType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the primary type of this object.
"
      end

      operation 6398082 "getSubType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the sub type of this object.
"
      end

      operation 6398210 "getParameters"
	public return_type class_ref 883586 // MimeTypeParameterList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve a copy of this object's parameter list.
"
      end

      operation 6398338 "getParameter"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the value associated with the given name, or null if there
is no current association.
"
      end

      operation 6398466 "setParameter"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the value to be associated with the given name, replacing
any previous association.

@throw IllegalArgumentException if parameter or value is illegal
"
      end

      operation 6398594 "removeParameter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove any value associated with the given name.

@throw IllegalArgumentExcpetion if parameter may not be deleted
"
      end

      operation 6398722 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the String representation of this object.
"
      end

      operation 6398850 "getBaseType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a String representation of this object
without the parameter list.
"
      end

      operation 6398978 "match"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "type" type class_ref 884098 // MimeType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the primary type and the
subtype of this object are the same as the specified
<code>type</code>; otherwise returns <code>false</code>.

@param type the type to compare to <code>this</code>'s type
@return <code>true</code> if the primary type and the
   subtype of this object are the same as the
   specified <code>type</code>; otherwise returns
   <code>false</code>
"
      end

      operation 6399106 "match"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "rawdata" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 883714 // MimeTypeParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the primary type and the
subtype of this object are the same as the content type
described in <code>rawdata</code>; otherwise returns
<code>false</code>.

@param rawdata the raw data to be examined
@return <code>true</code> if the primary type and the
   subtype of this object are the same as the content type
   described in <code>rawdata</code>; otherwise returns
   <code>false</code>; if <code>rawdata</code> is
   <code>null</code>, returns <code>false</code>
"
      end

      operation 6399234 "writeExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174082 // ObjectOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The object implements the writeExternal method to save its contents
by calling the methods of DataOutput for its primitive values or
calling the writeObject method of ObjectOutput for objects, strings
and arrays.
@exception IOException Includes any I/O exceptions that may occur
"
      end

      operation 6399362 "readExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The object implements the readExternal method to restore its
contents by calling the methods of DataInput for primitive
types and readObject for objects, strings and arrays.  The
readExternal method must read the values in the same sequence
and with the same types as were written by writeExternal.
@exception ClassNotFoundException If the class for an object being
             restored cannot be found.
"
      end

      operation 6399490 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a clone of this object.
@return a clone of this object
"
      end

      classrelation 2993538 // primaryType (<unidirectional association>)
	relation 2993538 --->
	  a role_name "primaryType" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2993538 // primaryType (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2993666 // subType (<unidirectional association>)
	relation 2993666 --->
	  a role_name "subType" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2993666 // subType (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2993794 // parameters (<unidirectional association>)
	relation 2993794 --->
	  a role_name "parameters" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2993794 // parameters (<unidirectional association>)
	  b parent class_ref 883586 // MimeTypeParameterList
      end

      operation 6399618 "isTokenChar"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    below here be scary parsing related things

Determines whether or not a given character belongs to a legal token.
"
      end

      operation 6399746 "isValidToken"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not a given string is a legal token.

@throws NullPointerException if <code>s</code> is null
"
      end

      classrelation 2993922 // TSPECIALS (<unidirectional association>)
	relation 2993922 --->
	  a role_name "TSPECIALS" init_value " \"()<>@,;:\\\\\\\"/[]?=\"" class_relation const_relation private
	    comment "
A string that holds all the special chars.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2993922 // TSPECIALS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end
    end

    class 884226 "FlavorEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>FlavorEvent</code> is used to notify interested parties
that available {@link DataFlavor}s have changed in the
{@link Clipboard} (the event source).

@see FlavorListener

@author Alexander Gerasimov
@since 1.5
"
      classrelation 2992898 // <generalisation>
	relation 2992898 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2992898 // <generalisation>
	  b parent class_ref 525698 // EventObject
      end

      operation 6396290 "FlavorEvent"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 352514 // Clipboard
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FlavorEvent</code> object.

@param source  the <code>Clipboard</code> that is the source of the event

@throws IllegalArgumentException if the {@code source} is {@code null}
"
      end
    end

    class 884354 "FlavorTable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A FlavorMap which relaxes the traditional 1-to-1 restriction of a Map. A
flavor is permitted to map to any number of natives, and likewise a native
is permitted to map to any number of flavors. FlavorTables need not be
symmetric, but typically are.

@author David Mendenhall

@since 1.4
"
      classrelation 2993154 // <generalisation>
	relation 2993154 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2993154 // <generalisation>
	  b parent class_ref 353794 // FlavorMap
      end

      operation 6396802 "getNativesForFlavor"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "flav" type class_ref 352130 // DataFlavor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>List</code> of <code>String</code> natives to which the
specified <code>DataFlavor</code> corresponds. The <code>List</code>
will be sorted from best native to worst. That is, the first native will
best reflect data in the specified flavor to the underlying native
platform. The returned <code>List</code> is a modifiable copy of this
<code>FlavorTable</code>'s internal data. Client code is free to modify
the <code>List</code> without affecting this object.

@param flav the <code>DataFlavor</code> whose corresponding natives
       should be returned. If <code>null</code> is specified, all
       natives currently known to this <code>FlavorTable</code> are
       returned in a non-deterministic order.
@return a <code>java.util.List</code> of <code>java.lang.String</code>
        objects which are platform-specific representations of platform-
        specific data formats
"
      end

      operation 6396930 "getFlavorsForNative"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "nat" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<DataFlavor> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>List</code> of <code>DataFlavor</code>s to which the
specified <code>String</code> corresponds. The <code>List</code> will be
sorted from best <code>DataFlavor</code> to worst. That is, the first
<code>DataFlavor</code> will best reflect data in the specified
native to a Java application. The returned <code>List</code> is a
modifiable copy of this <code>FlavorTable</code>'s internal data.
Client code is free to modify the <code>List</code> without affecting
this object.

@param nat the native whose corresponding <code>DataFlavor</code>s
       should be returned. If <code>null</code> is specified, all
       <code>DataFlavor</code>s currently known to this
       <code>FlavorTable</code> are returned in a non-deterministic
       order.
@return a <code>java.util.List</code> of <code>DataFlavor</code>
        objects into which platform-specific data in the specified,
        platform-specific native can be translated
"
      end
    end

    class 884482 "StringSelection"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>Transferable</code> which implements the capability required
to transfer a <code>String</code>.

This <code>Transferable</code> properly supports
<code>DataFlavor.stringFlavor</code>
and all equivalent flavors. Support for
<code>DataFlavor.plainTextFlavor</code>
and all equivalent flavors is <b>deprecated</b>. No other
<code>DataFlavor</code>s are supported.

@see java.awt.datatransfer.DataFlavor#stringFlavor
@see java.awt.datatransfer.DataFlavor#plainTextFlavor
"
      classrelation 2994562 // <realization>
	relation 2994562 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2994562 // <realization>
	  b parent class_ref 352002 // Transferable
      end

      classrelation 2994690 // <realization>
	relation 2994690 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2994690 // <realization>
	  b parent class_ref 403202 // ClipboardOwner
      end

      attribute 1460226 "STRING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1460354 "PLAIN_TEXT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 2994818 // flavors (<unidirectional association>)
	relation 2994818 --->
	  a role_name "flavors" multiplicity "[]" init_value " {
        DataFlavor.stringFlavor,
        DataFlavor.plainTextFlavor // deprecated
    }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2994818 // flavors (<unidirectional association>)
	  b parent class_ref 352130 // DataFlavor
      end

      classrelation 2994946 // data (<unidirectional association>)
	relation 2994946 --->
	  a role_name "data" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2994946 // data (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 6402306 "StringSelection"
	public explicit_return_type ""
	nparams 1
	  param inout name "data" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Transferable</code> capable of transferring
the specified <code>String</code>.
"
      end

      operation 6402434 "getTransferDataFlavors"
	public return_type class_ref 352130 // DataFlavor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of flavors in which this <code>Transferable</code>
can provide the data. <code>DataFlavor.stringFlavor</code>
is properly supported.
Support for <code>DataFlavor.plainTextFlavor</code> is
<b>deprecated</b>.

@return an array of length two, whose elements are <code>DataFlavor.
        stringFlavor</code> and <code>DataFlavor.plainTextFlavor</code>
"
      end

      operation 6402562 "isDataFlavorSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "flavor" type class_ref 352130 // DataFlavor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the requested flavor is supported by this
<code>Transferable</code>.

@param flavor the requested flavor for the data
@return true if <code>flavor</code> is equal to
  <code>DataFlavor.stringFlavor</code> or
  <code>DataFlavor.plainTextFlavor</code>; false if <code>flavor</code>
  is not one of the above flavors
@throws NullPointerException if flavor is <code>null</code>
"
      end

      operation 6402690 "getTransferData"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "flavor" type class_ref 352130 // DataFlavor
	nexceptions 2
	  exception class_ref 353282 // UnsupportedFlavorException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Transferable</code>'s data in the requested
<code>DataFlavor</code> if possible. If the desired flavor is
<code>DataFlavor.stringFlavor</code>, or an equivalent flavor,
the <code>String</code> representing the selection is
returned. If the desired flavor is
<code>DataFlavor.plainTextFlavor</code>,
or an equivalent flavor, a <code>Reader</code> is returned.
<b>Note:</b> The behavior of this method for
<code>DataFlavor.plainTextFlavor</code>
and equivalent <code>DataFlavor</code>s is inconsistent with the
definition of <code>DataFlavor.plainTextFlavor</code>.

@param flavor the requested flavor for the data
@return the data in the requested flavor, as outlined above
@throws UnsupportedFlavorException if the requested data flavor is
        not equivalent to either <code>DataFlavor.stringFlavor</code>
        or <code>DataFlavor.plainTextFlavor</code>
@throws IOException if an IOException occurs while retrieving the data.
        By default, StringSelection never throws this exception, but a
        subclass may.
@throws NullPointerException if flavor is <code>null</code>
@see java.io.Reader
"
      end

      operation 6402818 "lostOwnership"
	public explicit_return_type "void"
	nparams 2
	  param inout name "clipboard" type class_ref 352514 // Clipboard
	  param inout name "contents" type class_ref 352002 // Transferable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 884610 "SystemFlavorMap"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The SystemFlavorMap is a configurable map between \"natives\" (Strings), which
correspond to platform-specific data formats, and \"flavors\" (DataFlavors),
which correspond to platform-independent MIME types. This mapping is used
by the data transfer subsystem to transfer data between Java and native
applications, and between Java applications in separate VMs.
<p>

@since 1.2
"
      classrelation 2995074 // <realization>
	relation 2995074 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2995074 // <realization>
	  b parent class_ref 353794 // FlavorMap
      end

      classrelation 2995202 // <realization>
	relation 2995202 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2995202 // <realization>
	  b parent class_ref 884354 // FlavorTable
      end

      classrelation 2995330 // JavaMIME (<unidirectional association>)
	relation 2995330 --->
	  a role_name "JavaMIME" init_value " \"JAVA_DATAFLAVOR:\"" class_relation private
	    comment "
Constant prefix used to tag Java types converted to native platform
type.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2995330 // JavaMIME (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2995458 // FLAVOR_MAP_KEY (<unidirectional association>)
	relation 2995458 --->
	  a role_name "FLAVOR_MAP_KEY" init_value " new Object()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2995458 // FLAVOR_MAP_KEY (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 2995586 // keyValueSeparators (<unidirectional association>)
	relation 2995586 --->
	  a role_name "keyValueSeparators" init_value " \"=: \\t\\r\\n\\f\"" class_relation const_relation private
	    comment "
Copied from java.util.Properties.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2995586 // keyValueSeparators (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2995714 // strictKeyValueSeparators (<unidirectional association>)
	relation 2995714 --->
	  a role_name "strictKeyValueSeparators" init_value " \"=:\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2995714 // strictKeyValueSeparators (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2995842 // whiteSpaceChars (<unidirectional association>)
	relation 2995842 --->
	  a role_name "whiteSpaceChars" init_value " \" \\t\\r\\n\\f\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2995842 // whiteSpaceChars (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2995970 // UNICODE_TEXT_CLASSES (<unidirectional association>)
	relation 2995970 --->
	  a role_name "UNICODE_TEXT_CLASSES" multiplicity "[]" init_value " {
        \"java.io.Reader\", \"java.lang.String\", \"java.nio.CharBuffer\", \"\\\"[C\\\"\"
    }" class_relation const_relation private
	    comment "
The list of valid, decoded text flavor representation classes, in order
from best to worst.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2995970 // UNICODE_TEXT_CLASSES (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2996098 // ENCODED_TEXT_CLASSES (<unidirectional association>)
	relation 2996098 --->
	  a role_name "ENCODED_TEXT_CLASSES" multiplicity "[]" init_value " {
        \"java.io.InputStream\", \"java.nio.ByteBuffer\", \"\\\"[B\\\"\"
    }" class_relation const_relation private
	    comment "
The list of valid, encoded text flavor representation classes, in order
from best to worst.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2996098 // ENCODED_TEXT_CLASSES (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2996226 // TEXT_PLAIN_BASE_TYPE (<unidirectional association>)
	relation 2996226 --->
	  a role_name "TEXT_PLAIN_BASE_TYPE" init_value " \"text/plain\"" class_relation const_relation private
	    comment "
A String representing text/plain MIME type.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2996226 // TEXT_PLAIN_BASE_TYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2996354 // HTML_TEXT_BASE_TYPE (<unidirectional association>)
	relation 2996354 --->
	  a role_name "HTML_TEXT_BASE_TYPE" init_value " \"text/html\"" class_relation const_relation private
	    comment "
A String representing text/html MIME type.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2996354 // HTML_TEXT_BASE_TYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2996482 // nativeToFlavor (<unidirectional association>)
	relation 2996482 --->
	  a role_name "nativeToFlavor" init_value " new HashMap<>()" const_relation private
	    comment "
Maps native Strings to Lists of DataFlavors (or base type Strings for
text DataFlavors).
Do not use the field directly, use getNativeToFlavor() instead.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, LinkedHashSet<DataFlavor>> ${name}${value};
"
	    classrelation_ref 2996482 // nativeToFlavor (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 6402946 "getNativeToFlavor"
	private return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, LinkedHashSet<DataFlavor>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accessor to nativeToFlavor map.  Since we use lazy initialization we must
use this accessor instead of direct access to the field which may not be
initialized yet.  This method will initialize the field if needed.

@return nativeToFlavor
"
      end

      classrelation 2996610 // flavorToNative (<unidirectional association>)
	relation 2996610 --->
	  a role_name "flavorToNative" init_value " new HashMap<>()" const_relation private
	    comment "
Maps DataFlavors (or base type Strings for text DataFlavors) to Lists of
native Strings.
Do not use the field directly, use getFlavorToNative() instead.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<DataFlavor, LinkedHashSet<String>> ${name}${value};
"
	    classrelation_ref 2996610 // flavorToNative (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 6403074 "getFlavorToNative"
	private return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<DataFlavor, LinkedHashSet<String>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accessor to flavorToNative map.  Since we use lazy initialization we must
use this accessor instead of direct access to the field which may not be
initialized yet.  This method will initialize the field if needed.

@return flavorToNative
"
      end

      classrelation 2996738 // textTypeToNative (<unidirectional association>)
	relation 2996738 --->
	  a role_name "textTypeToNative" init_value " new HashMap<>()" private
	    comment "
Maps a text DataFlavor primary mime-type to the native. Used only to store
standard mappings registered in the flavormap.properties
Do not use this field directly, use getTextTypeToNative() instead.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, LinkedHashSet<String>> ${name}${value};
"
	    classrelation_ref 2996738 // textTypeToNative (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      attribute 1460482 "isMapInitialized"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Shows if the object has been initialized.

"
      end

      operation 6403202 "getTextTypeToNative"
	private return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, LinkedHashSet<String>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An accessor to textTypeToNative map.  Since we use lazy initialization we
must use this accessor instead of direct access to the field which may not
be initialized yet. This method will initialize the field if needed.

@return textTypeToNative
"
      end

      class 884738 "SoftCache"
	visibility private 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 2997378 // cache (<unidirectional association>)
	  relation 2997378 --->
	    a role_name "cache" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K, SoftReference<LinkedHashSet<V>>> ${name}${value};
"
	      classrelation_ref 2997378 // cache (<unidirectional association>)
	    b parent class_ref 130178 // Map
	end

	operation 6406402 "put"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "value" type class_ref 884866 // LinkedHashSet
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6406530 "remove"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6406658 "check"
	  cpp_inline public return_type class_ref 884866 // LinkedHashSet
	  nparams 1
	    param inout name "key" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 2996866 // nativesForFlavorCache (<unidirectional association>)
	relation 2996866 --->
	  a role_name "nativesForFlavorCache" init_value " new SoftCache<>()" const_relation private
	    comment "
Caches the result of getNativesForFlavor(). Maps DataFlavors to
SoftReferences which reference LinkedHashSet of String natives.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<DataFlavor, String> ${name}${value};
"
	    classrelation_ref 2996866 // nativesForFlavorCache (<unidirectional association>)
	  b parent class_ref 884738 // SoftCache
      end

      classrelation 2996994 // flavorsForNativeCache (<unidirectional association>)
	relation 2996994 --->
	  a role_name "flavorsForNativeCache" init_value " new SoftCache<>()" const_relation private
	    comment "
Caches the result getFlavorsForNative(). Maps String natives to
SoftReferences which reference LinkedHashSet of DataFlavors.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, DataFlavor> ${name}${value};
"
	    classrelation_ref 2996994 // flavorsForNativeCache (<unidirectional association>)
	  b parent class_ref 884738 // SoftCache
      end

      classrelation 2997122 // disabledMappingGenerationKeys (<unidirectional association>)
	relation 2997122 --->
	  a role_name "disabledMappingGenerationKeys" init_value " new HashSet<>()" private
	    comment "
Dynamic mapping generation used for text mappings should not be applied
to the DataFlavors and String natives for which the mappings have been
explicitly specified with setFlavorsForNative() or
setNativesForFlavor(). This keeps all such keys.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 2997122 // disabledMappingGenerationKeys (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      operation 6403330 "getDefaultFlavorMap"
	class_operation public return_type class_ref 353794 // FlavorMap
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default FlavorMap for this thread's ClassLoader.
"
      end

      operation 6403458 "SystemFlavorMap"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6403586 "initSystemFlavorMap"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a SystemFlavorMap by reading flavormap.properties and
AWT.DnD.flavorMapFileURL.
For thread-safety must be called under lock on this.
"
      end

      operation 6403714 "parseAndStoreReader"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 141314 // BufferedReader
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copied code from java.util.Properties. Parsing the data ourselves is the
only way to handle duplicate keys and values.
"
      end

      operation 6403842 "continueLine"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "line" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copied from java.util.Properties.
"
      end

      operation 6403970 "loadConvert"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "theString" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copied from java.util.Properties.
"
      end

      operation 6404098 "store"
	private explicit_return_type "void"
	nparams 3
	  param inout name "hashed" explicit_type "H"
	  param inout name "listed" explicit_type "L"
	  param inout name "map" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<H, L> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<H, LinkedHashSet<L>> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stores the listed object under the specified hash key in map. Unlike a
standard map, the listed object will not replace any object already at
the appropriate Map location, but rather will be appended to a List
stored in that location.
"
      end

      operation 6404226 "nativeToFlavorLookup"
	private return_type class_ref 884866 // LinkedHashSet
	nparams 1
	  param inout name "nat" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<DataFlavor> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Semantically equivalent to 'nativeToFlavor.get(nat)'. This method
handles the case where 'nat' is not found in 'nativeToFlavor'. In that
case, a new DataFlavor is synthesized, stored, and returned, if and
only if the specified native is encoded as a Java MIME type.
"
      end

      operation 6404354 "flavorToNativeLookup"
	private return_type class_ref 884866 // LinkedHashSet
	nparams 2
	  param in name "flav" type class_ref 352130 // DataFlavor
	  param in name "synthesize" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Semantically equivalent to 'flavorToNative.get(flav)'. This method
handles the case where 'flav' is not found in 'flavorToNative' depending
on the value of passes 'synthesize' parameter. If 'synthesize' is
SYNTHESIZE_IF_NOT_FOUND a native is synthesized, stored, and returned by
encoding the DataFlavor's MIME type. Otherwise an empty List is returned
and 'flavorToNative' remains unaffected.
"
      end

      operation 6404482 "getNativesForFlavor"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "flav" type class_ref 352130 // DataFlavor
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a <code>List</code> of <code>String</code> natives to which the
specified <code>DataFlavor</code> can be translated by the data transfer
subsystem. The <code>List</code> will be sorted from best native to
worst. That is, the first native will best reflect data in the specified
flavor to the underlying native platform.
<p>
If the specified <code>DataFlavor</code> is previously unknown to the
data transfer subsystem and the data transfer subsystem is unable to
translate this <code>DataFlavor</code> to any existing native, then
invoking this method will establish a
mapping in both directions between the specified <code>DataFlavor</code>
and an encoded version of its MIME type as its native.

@param flav the <code>DataFlavor</code> whose corresponding natives
       should be returned. If <code>null</code> is specified, all
       natives currently known to the data transfer subsystem are
       returned in a non-deterministic order.
@return a <code>java.util.List</code> of <code>java.lang.String</code>
        objects which are platform-specific representations of platform-
        specific data formats

@see #encodeDataFlavor
@since 1.4
"
      end

      operation 6404610 "getFlavorsForNative"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "nat" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<DataFlavor> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a <code>List</code> of <code>DataFlavor</code>s to which the
specified <code>String</code> native can be translated by the data
transfer subsystem. The <code>List</code> will be sorted from best
<code>DataFlavor</code> to worst. That is, the first
<code>DataFlavor</code> will best reflect data in the specified
native to a Java application.
<p>
If the specified native is previously unknown to the data transfer
subsystem, and that native has been properly encoded, then invoking this
method will establish a mapping in both directions between the specified
native and a <code>DataFlavor</code> whose MIME type is a decoded
version of the native.
<p>
If the specified native is not a properly encoded native and the
mappings for this native have not been altered with
<code>setFlavorsForNative</code>, then the contents of the
<code>List</code> is platform dependent, but <code>null</code>
cannot be returned.

@param nat the native whose corresponding <code>DataFlavor</code>s
       should be returned. If <code>null</code> is specified, all
       <code>DataFlavor</code>s currently known to the data transfer
       subsystem are returned in a non-deterministic order.
@return a <code>java.util.List</code> of <code>DataFlavor</code>
        objects into which platform-specific data in the specified,
        platform-specific native can be translated

@see #encodeJavaMIMEType
@since 1.4
"
      end

      operation 6404738 "convertMimeTypeToDataFlavors"
	class_operation private return_type class_ref 192258 // Set
	nparams 1
	  param in name "baseType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<DataFlavor> ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 2997250 // htmlDocumntTypes (<unidirectional association>)
	relation 2997250 --->
	  a role_name "htmlDocumntTypes" multiplicity "[]" init_value "
            new String [] {\"all\", \"selection\", \"fragment\"}" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2997250 // htmlDocumntTypes (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 6404866 "handleHtmlMimeTypes"
	class_operation private return_type class_ref 884866 // LinkedHashSet
	nparams 2
	  param inout name "baseType" type class_ref 128130 // String
	  param inout name "mimeType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6404994 "getNativesForFlavors"
	public return_type class_ref 130178 // Map
	nparams 1
	  param inout name "flavors" type class_ref 352130 // DataFlavor
	multiplicity "[]"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<DataFlavor,String> ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a <code>Map</code> of the specified <code>DataFlavor</code>s to
their most preferred <code>String</code> native. Each native value will
be the same as the first native in the List returned by
<code>getNativesForFlavor</code> for the specified flavor.
<p>
If a specified <code>DataFlavor</code> is previously unknown to the
data transfer subsystem, then invoking this method will establish a
mapping in both directions between the specified <code>DataFlavor</code>
and an encoded version of its MIME type as its native.

@param flavors an array of <code>DataFlavor</code>s which will be the
       key set of the returned <code>Map</code>. If <code>null</code> is
       specified, a mapping of all <code>DataFlavor</code>s known to the
       data transfer subsystem to their most preferred
       <code>String</code> natives will be returned.
@return a <code>java.util.Map</code> of <code>DataFlavor</code>s to
        <code>String</code> natives

@see #getNativesForFlavor
@see #encodeDataFlavor
"
      end

      operation 6405122 "getFlavorsForNatives"
	public return_type class_ref 130178 // Map
	nparams 1
	  param inout name "natives" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,DataFlavor> ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a <code>Map</code> of the specified <code>String</code> natives
to their most preferred <code>DataFlavor</code>. Each
<code>DataFlavor</code> value will be the same as the first
<code>DataFlavor</code> in the List returned by
<code>getFlavorsForNative</code> for the specified native.
<p>
If a specified native is previously unknown to the data transfer
subsystem, and that native has been properly encoded, then invoking this
method will establish a mapping in both directions between the specified
native and a <code>DataFlavor</code> whose MIME type is a decoded
version of the native.

@param natives an array of <code>String</code>s which will be the
       key set of the returned <code>Map</code>. If <code>null</code> is
       specified, a mapping of all supported <code>String</code> natives
       to their most preferred <code>DataFlavor</code>s will be
       returned.
@return a <code>java.util.Map</code> of <code>String</code> natives to
        <code>DataFlavor</code>s

@see #getFlavorsForNative
@see #encodeJavaMIMEType
"
      end

      operation 6405250 "addUnencodedNativeForFlavor"
	public explicit_return_type "void"
	nparams 2
	  param inout name "flav" type class_ref 352130 // DataFlavor
	  param inout name "nat" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a mapping from the specified <code>DataFlavor</code> (and all
<code>DataFlavor</code>s equal to the specified <code>DataFlavor</code>)
to the specified <code>String</code> native.
Unlike <code>getNativesForFlavor</code>, the mapping will only be
established in one direction, and the native will not be encoded. To
establish a two-way mapping, call
<code>addFlavorForUnencodedNative</code> as well. The new mapping will
be of lower priority than any existing mapping.
This method has no effect if a mapping from the specified or equal
<code>DataFlavor</code> to the specified <code>String</code> native
already exists.

@param flav the <code>DataFlavor</code> key for the mapping
@param nat the <code>String</code> native value for the mapping
@throws NullPointerException if flav or nat is <code>null</code>

@see #addFlavorForUnencodedNative
@since 1.4
"
      end

      operation 6405378 "setNativesForFlavor"
	public explicit_return_type "void"
	nparams 2
	  param inout name "flav" type class_ref 352130 // DataFlavor
	  param inout name "natives" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Discards the current mappings for the specified <code>DataFlavor</code>
and all <code>DataFlavor</code>s equal to the specified
<code>DataFlavor</code>, and creates new mappings to the
specified <code>String</code> natives.
Unlike <code>getNativesForFlavor</code>, the mappings will only be
established in one direction, and the natives will not be encoded. To
establish two-way mappings, call <code>setFlavorsForNative</code>
as well. The first native in the array will represent the highest
priority mapping. Subsequent natives will represent mappings of
decreasing priority.
<p>
If the array contains several elements that reference equal
<code>String</code> natives, this method will establish new mappings
for the first of those elements and ignore the rest of them.
<p>
It is recommended that client code not reset mappings established by the
data transfer subsystem. This method should only be used for
application-level mappings.

@param flav the <code>DataFlavor</code> key for the mappings
@param natives the <code>String</code> native values for the mappings
@throws NullPointerException if flav or natives is <code>null</code>
        or if natives contains <code>null</code> elements

@see #setFlavorsForNative
@since 1.4
"
      end

      operation 6405506 "addFlavorForUnencodedNative"
	public explicit_return_type "void"
	nparams 2
	  param inout name "nat" type class_ref 128130 // String
	  param inout name "flav" type class_ref 352130 // DataFlavor
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a mapping from a single <code>String</code> native to a single
<code>DataFlavor</code>. Unlike <code>getFlavorsForNative</code>, the
mapping will only be established in one direction, and the native will
not be encoded. To establish a two-way mapping, call
<code>addUnencodedNativeForFlavor</code> as well. The new mapping will
be of lower priority than any existing mapping.
This method has no effect if a mapping from the specified
<code>String</code> native to the specified or equal
<code>DataFlavor</code> already exists.

@param nat the <code>String</code> native key for the mapping
@param flav the <code>DataFlavor</code> value for the mapping
@throws NullPointerException if nat or flav is <code>null</code>

@see #addUnencodedNativeForFlavor
@since 1.4
"
      end

      operation 6405634 "setFlavorsForNative"
	public explicit_return_type "void"
	nparams 2
	  param inout name "nat" type class_ref 128130 // String
	  param inout name "flavors" type class_ref 352130 // DataFlavor
	multiplicity "[]"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Discards the current mappings for the specified <code>String</code>
native, and creates new mappings to the specified
<code>DataFlavor</code>s. Unlike <code>getFlavorsForNative</code>, the
mappings will only be established in one direction, and the natives need
not be encoded. To establish two-way mappings, call
<code>setNativesForFlavor</code> as well. The first
<code>DataFlavor</code> in the array will represent the highest priority
mapping. Subsequent <code>DataFlavor</code>s will represent mappings of
decreasing priority.
<p>
If the array contains several elements that reference equal
<code>DataFlavor</code>s, this method will establish new mappings
for the first of those elements and ignore the rest of them.
<p>
It is recommended that client code not reset mappings established by the
data transfer subsystem. This method should only be used for
application-level mappings.

@param nat the <code>String</code> native key for the mappings
@param flavors the <code>DataFlavor</code> values for the mappings
@throws NullPointerException if nat or flavors is <code>null</code>
        or if flavors contains <code>null</code> elements

@see #setNativesForFlavor
@since 1.4
"
      end

      operation 6405762 "encodeJavaMIMEType"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "mimeType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes a MIME type for use as a <code>String</code> native. The format
of an encoded representation of a MIME type is implementation-dependent.
The only restrictions are:
<ul>
<li>The encoded representation is <code>null</code> if and only if the
MIME type <code>String</code> is <code>null</code>.</li>
<li>The encoded representations for two non-<code>null</code> MIME type
<code>String</code>s are equal if and only if these <code>String</code>s
are equal according to <code>String.equals(Object)</code>.</li>
</ul>
<p>
The reference implementation of this method returns the specified MIME
type <code>String</code> prefixed with <code>JAVA_DATAFLAVOR:</code>.

@param mimeType the MIME type to encode
@return the encoded <code>String</code>, or <code>null</code> if
        mimeType is <code>null</code>
"
      end

      operation 6405890 "encodeDataFlavor"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "flav" type class_ref 352130 // DataFlavor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes a <code>DataFlavor</code> for use as a <code>String</code>
native. The format of an encoded <code>DataFlavor</code> is
implementation-dependent. The only restrictions are:
<ul>
<li>The encoded representation is <code>null</code> if and only if the
specified <code>DataFlavor</code> is <code>null</code> or its MIME type
<code>String</code> is <code>null</code>.</li>
<li>The encoded representations for two non-<code>null</code>
<code>DataFlavor</code>s with non-<code>null</code> MIME type
<code>String</code>s are equal if and only if the MIME type
<code>String</code>s of these <code>DataFlavor</code>s are equal
according to <code>String.equals(Object)</code>.</li>
</ul>
<p>
The reference implementation of this method returns the MIME type
<code>String</code> of the specified <code>DataFlavor</code> prefixed
with <code>JAVA_DATAFLAVOR:</code>.

@param flav the <code>DataFlavor</code> to encode
@return the encoded <code>String</code>, or <code>null</code> if
        flav is <code>null</code> or has a <code>null</code> MIME type
"
      end

      operation 6406018 "isJavaMIMEType"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the specified <code>String</code> is an encoded Java
MIME type.

@param str the <code>String</code> to test
@return <code>true</code> if the <code>String</code> is encoded;
        <code>false</code> otherwise
"
      end

      operation 6406146 "decodeJavaMIMEType"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "nat" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes a <code>String</code> native for use as a Java MIME type.

@param nat the <code>String</code> to decode
@return the decoded Java MIME type, or <code>null</code> if nat is not
        an encoded <code>String</code> native
"
      end

      operation 6406274 "decodeDataFlavor"
	class_operation public return_type class_ref 352130 // DataFlavor
	nparams 1
	  param inout name "nat" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes a <code>String</code> native for use as a
<code>DataFlavor</code>.

@param nat the <code>String</code> to decode
@return the decoded <code>DataFlavor</code>, or <code>null</code> if
        nat is not an encoded <code>String</code> native
"
      end
    end
  end

  deploymentview 142082 "datatransfer"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 272386 "Transferable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 352002 // Transferable
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 289794 "ClipboardOwner"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 403202 // ClipboardOwner
      end
      comment "Copyright (c) 1996, 2002, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 632066 "Clipboard"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.EventQueue;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import java.io.IOException;
import sun.awt.EventListenerAggregate;
${definition}"
      associated_elems
	class_ref 352514 // Clipboard
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 632194 "DataFlavor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.awt.datatransfer.DataTransferer;
import sun.reflect.misc.ReflectUtil;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.Externalizable;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.OptionalDataException;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Objects;
import static sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION;
${definition}"
      associated_elems
	class_ref 352130 // DataFlavor
      end
      comment "Copyright (c) 1996, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 632322 "FlavorEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventObject;
${definition}"
      associated_elems
	class_ref 884226 // FlavorEvent
      end
      comment "Copyright (c) 2003, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 632450 "FlavorListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_elems
	class_ref 883458 // FlavorListener
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 632578 "FlavorMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
${definition}"
      associated_elems
	class_ref 353794 // FlavorMap
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 632706 "FlavorTable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 884354 // FlavorTable
      end
      comment "Copyright (c) 2000, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 632834 "MimeType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Externalizable;
import java.io.ObjectOutput;
import java.io.ObjectInput;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Locale;
${definition}"
      associated_elems
	class_ref 884098 // MimeType
      end
      comment "Copyright (c) 1997, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 632962 "MimeTypeParameterList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 883586 // MimeTypeParameterList
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 633090 "MimeTypeParseException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 883714 // MimeTypeParseException
      end
      comment "Copyright (c) 1997, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 633218 "StringSelection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_elems
	class_ref 884482 // StringSelection
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 633346 "SystemFlavorMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Toolkit;
import java.lang.ref.SoftReference;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.io.IOException;
import java.net.URL;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import sun.awt.AppContext;
import sun.awt.datatransfer.DataTransferer;
${definition}"
      associated_elems
	class_ref 884610 // SystemFlavorMap
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 633474 "UnsupportedFlavorException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 353282 // UnsupportedFlavorException
      end
      comment "Copyright (c) 1996, 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
