class Parser
!!!4939138.java!!!	Parser(inout format : String, inout value : String)
            this.format = format;
            this.value = value;
            this.flen = format.length();
            this.vlen = value.length();
!!!4939266.java!!!	parse() : void
            while (fidx < flen) {
                char fch = format.charAt(fidx++);

                if (fch != '%') { // not a meta character
                    skip(fch);
                    continue;
                }

                // seen meta character. we don't do error check against the format
                switch (format.charAt(fidx++)) {
                    case 'Y' : // year
                        parseAndSetYear(4);
                        break;

                    case 'M' : // month
                        setMonth(parseInt(2, 2));
                        break;

                    case 'D' : // days
                        setDay(parseInt(2, 2));
                        break;

                    case 'h' : // hours
                        setHour(parseInt(2, 2), false);
                        break;

                    case 'm' : // minutes
                        setMinute(parseInt(2, 2));
                        break;

                    case 's' : // parse seconds.
                        setSecond(parseInt(2, 2));

                        if (peek() == '.') {
                            setFractionalSecond(parseBigDecimal());
                        }
                        break;

                    case 'z' : // time zone. missing, 'Z', or [+-]nn:nn
                        char vch = peek();
                        if (vch == 'Z') {
                            vidx++;
                            setTimezone(0);
                        } else if (vch == '+' || vch == '-') {
                            vidx++;
                            int h = parseInt(2, 2);
                            skip(':');
                            int m = parseInt(2, 2);
                            setTimezone((h * 60 + m) * (vch == '+' ? 1 : -1));
                        }

                        break;

                    default :
                        // illegal meta character. impossible.
                        throw new InternalError();
                }
            }

            if (vidx != vlen) {
                // some tokens are left in the input
                throw new IllegalArgumentException(value); //,vidx);
            }
            testHour();
!!!4939394.java!!!	peek() : char
            if (vidx == vlen) {
                return (char) -1;
            }
            return value.charAt(vidx);
!!!4939522.java!!!	read() : char
            if (vidx == vlen) {
                throw new IllegalArgumentException(value); //,vidx);
            }
            return value.charAt(vidx++);
!!!4939650.java!!!	skip(in ch : char) : void
            if (read() != ch) {
                throw new IllegalArgumentException(value); //,vidx-1);
            }
!!!4939778.java!!!	parseInt(in minDigits : int, in maxDigits : int) : int

            int n = 0;
            char ch;
            int vstart = vidx;
            while (isDigit(ch=peek()) && (vidx - vstart) <= maxDigits) {
                vidx++;
                n = n*10 + ch-'0';
            }
            if ((vidx - vstart) < minDigits) {
                // we are expecting more digits
                throw new IllegalArgumentException(value); //,vidx);
            }

            return n;
!!!4939906.java!!!	parseAndSetYear(in minDigits : int) : void
            int vstart = vidx;
            int n = 0;
            boolean neg = false;

            // skip leading negative, if it exists
            if (peek() == '-') {
                vidx++;
                neg = true;
            }
            while(true) {
                char ch = peek();
                if(!isDigit(ch))
                    break;
                vidx++;
                n = n*10 + ch-'0';
            }

            if ((vidx - vstart) < minDigits) {
                // we are expecting more digits
                throw new IllegalArgumentException(value); //,vidx);
            }

            if(vidx-vstart<7) {
                // definitely int only. I don't know the exact # of digits that can be in int,
                // but as long as we can catch (0-9999) range, that should be enough.
                if(neg)     n = -n;
                year = n;
                eon = null;
            } else {
                setYear(new BigInteger(value.substring(vstart, vidx)));
            }
!!!4940034.java!!!	parseBigDecimal() : BigDecimal
            int vstart = vidx;

            if (peek() == '.') {
                vidx++;
            } else {
                throw new IllegalArgumentException(value);
            }
            while (isDigit(peek())) {
                vidx++;
            }
            return new BigDecimal(value.substring(vstart, vidx));
