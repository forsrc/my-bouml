class LocalClientRequestDispatcherBase
!!!1379970.java!!!	LocalClientRequestDispatcherBase(inout orb : ORB, in scid : int, inout ior : IOR)
        this.orb = orb ;

        TaggedProfile prof = ior.getProfile() ;
        servantIsLocal = orb.getORBData().isLocalOptimizationAllowed() &&
            prof.isLocal();

        ObjectKeyTemplate oktemp = prof.getObjectKeyTemplate() ;
        this.scid = oktemp.getSubcontractId() ;
        RequestDispatcherRegistry sreg = orb.getRequestDispatcherRegistry() ;
        oaf = sreg.getObjectAdapterFactory( scid ) ;
        oaid = oktemp.getObjectAdapterId() ;
        ObjectId oid = prof.getObjectId() ;
        objectId = oid.getId() ;
!!!1380098.java!!!	getObjectId() : byte
        return objectId ;
!!!1380226.java!!!	is_local(inout self : Object) : boolean
        return false;
!!!1380354.java!!!	useLocalInvocation(inout self : Object) : boolean
        if (isNextCallValid.get() == Boolean.TRUE)
            return servantIsLocal ;
        else
            isNextCallValid.set( Boolean.TRUE ) ;

        return false ;
!!!1380482.java!!!	checkForCompatibleServant(inout so : ServantObject, inout expectedType : Class) : boolean
        if (so == null)
            return false ;

        // Normally, this test will never fail.  However, if the servant
        // and the stub were loaded in different class loaders, this test
        // will fail.
        if (!expectedType.isInstance( so.servant )) {
            isNextCallValid.set( Boolean.FALSE ) ;

            // When servant_preinvoke returns null, the stub will
            // recursively re-invoke itself.  Thus, the next call made from
            // the stub is another useLocalInvocation call.
            return false ;
        }

        return true ;
