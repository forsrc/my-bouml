class ByteBufferAsCharBufferL
!!!7608450.java!!!	ByteBufferAsCharBufferL(inout bb : ByteBuffer)
   // package-private

        super(-1, 0,
              bb.remaining() >> 1,
              bb.remaining() >> 1);
        this.bb = bb;
        // enforce limit == capacity
        int cap = this.capacity();
        this.limit(cap);
        int pos = this.position();
        assert (pos <= cap);
        offset = pos;



!!!7608578.java!!!	ByteBufferAsCharBufferL(inout bb : ByteBuffer, in mark : int, in pos : int, in lim : int, in cap : int, in off : int)

        super(mark, pos, lim, cap);
        this.bb = bb;
        offset = off;



!!!7608706.java!!!	slice() : CharBuffer
        int pos = this.position();
        int lim = this.limit();
        assert (pos <= lim);
        int rem = (pos <= lim ? lim - pos : 0);
        int off = (pos << 1) + offset;
        assert (off >= 0);
        return new ByteBufferAsCharBufferL(bb, -1, 0, rem, rem, off);
!!!7608834.java!!!	duplicate() : CharBuffer
        return new ByteBufferAsCharBufferL(bb,
                                                    this.markValue(),
                                                    this.position(),
                                                    this.limit(),
                                                    this.capacity(),
                                                    offset);
!!!7608962.java!!!	asReadOnlyBuffer() : CharBuffer

        return new ByteBufferAsCharBufferRL(bb,
                                                 this.markValue(),
                                                 this.position(),
                                                 this.limit(),
                                                 this.capacity(),
                                                 offset);



!!!7609090.java!!!	ix(in i : int) : int
        return (i << 1) + offset;
!!!7609218.java!!!	get() : char
        return Bits.getCharL(bb, ix(nextGetIndex()));
!!!7609346.java!!!	get(in i : int) : char
        return Bits.getCharL(bb, ix(checkIndex(i)));
!!!7609474.java!!!	getUnchecked(in i : int) : char
        return Bits.getCharL(bb, ix(i));
!!!7609602.java!!!	put(in x : char) : CharBuffer

        Bits.putCharL(bb, ix(nextPutIndex()), x);
        return this;



!!!7609730.java!!!	put(in i : int, in x : char) : CharBuffer

        Bits.putCharL(bb, ix(checkIndex(i)), x);
        return this;



!!!7609858.java!!!	compact() : CharBuffer

        int pos = position();
        int lim = limit();
        assert (pos <= lim);
        int rem = (pos <= lim ? lim - pos : 0);

        ByteBuffer db = bb.duplicate();
        db.limit(ix(lim));
        db.position(ix(0));
        ByteBuffer sb = db.slice();
        sb.position(pos << 1);
        sb.compact();
        position(rem);
        limit(capacity());
        discardMark();
        return this;



!!!7609986.java!!!	isDirect() : boolean
        return bb.isDirect();
!!!7610114.java!!!	isReadOnly() : boolean
        return false;
!!!7610242.java!!!	toString(in start : int, in end : int) : String
        if ((end > limit()) || (start > end))
            throw new IndexOutOfBoundsException();
        try {
            int len = end - start;
            char[] ca = new char[len];
            CharBuffer cb = CharBuffer.wrap(ca);
            CharBuffer db = this.duplicate();
            db.position(start);
            db.limit(end);
            cb.put(db);
            return new String(ca);
        } catch (StringIndexOutOfBoundsException x) {
            throw new IndexOutOfBoundsException();
        }
!!!7610370.java!!!	subSequence(in start : int, in end : int) : CharBuffer
        int pos = position();
        int lim = limit();
        assert (pos <= lim);
        pos = (pos <= lim ? pos : lim);
        int len = lim - pos;

        if ((start < 0) || (end > len) || (start > end))
            throw new IndexOutOfBoundsException();
        return new ByteBufferAsCharBufferL(bb,
                                                  -1,
                                                  pos + start,
                                                  pos + end,
                                                  capacity(),
                                                  offset);
!!!7610498.java!!!	order() : ByteOrder




        return ByteOrder.LITTLE_ENDIAN;

