format 222
"prefs" // jdk1.8::java::util::prefs
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/util/prefs/"
  java_package "java.util.prefs"
  classview 176770 "prefs"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1141890 "AbstractPreferences"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class provides a skeletal implementation of the {@link Preferences}
class, greatly easing the task of implementing it.

<p><strong>This class is for <tt>Preferences</tt> implementers only.
Normal users of the <tt>Preferences</tt> facility should have no need to
consult this documentation.  The {@link Preferences} documentation
should suffice.</strong>

<p>Implementors must override the nine abstract service-provider interface
(SPI) methods: {@link #getSpi(String)}, {@link #putSpi(String,String)},
{@link #removeSpi(String)}, {@link #childSpi(String)}, {@link
#removeNodeSpi()}, {@link #keysSpi()}, {@link #childrenNamesSpi()}, {@link
#syncSpi()} and {@link #flushSpi()}.  All of the concrete methods specify
precisely how they are implemented atop these SPI methods.  The implementor
may, at his discretion, override one or more of the concrete methods if the
default implementation is unsatisfactory for any reason, such as
performance.

<p>The SPI methods fall into three groups concerning exception
behavior. The <tt>getSpi</tt> method should never throw exceptions, but it
doesn't really matter, as any exception thrown by this method will be
intercepted by {@link #get(String,String)}, which will return the specified
default value to the caller.  The <tt>removeNodeSpi, keysSpi,
childrenNamesSpi, syncSpi</tt> and <tt>flushSpi</tt> methods are specified
to throw {@link BackingStoreException}, and the implementation is required
to throw this checked exception if it is unable to perform the operation.
The exception propagates outward, causing the corresponding API method
to fail.

<p>The remaining SPI methods {@link #putSpi(String,String)}, {@link
#removeSpi(String)} and {@link #childSpi(String)} have more complicated
exception behavior.  They are not specified to throw
<tt>BackingStoreException</tt>, as they can generally obey their contracts
even if the backing store is unavailable.  This is true because they return
no information and their effects are not required to become permanent until
a subsequent call to {@link Preferences#flush()} or
{@link Preferences#sync()}. Generally speaking, these SPI methods should not
throw exceptions.  In some implementations, there may be circumstances
under which these calls cannot even enqueue the requested operation for
later processing.  Even under these circumstances it is generally better to
simply ignore the invocation and return, rather than throwing an
exception.  Under these circumstances, however, all subsequent invocations
of <tt>flush()</tt> and <tt>sync</tt> should return <tt>false</tt>, as
returning <tt>true</tt> would imply that all previous operations had
successfully been made permanent.

<p>There is one circumstance under which <tt>putSpi, removeSpi and
childSpi</tt> <i>should</i> throw an exception: if the caller lacks
sufficient privileges on the underlying operating system to perform the
requested operation.  This will, for instance, occur on most systems
if a non-privileged user attempts to modify system preferences.
(The required privileges will vary from implementation to
implementation.  On some implementations, they are the right to modify the
contents of some directory in the file system; on others they are the right
to modify contents of some key in a registry.)  Under any of these
circumstances, it would generally be undesirable to let the program
continue executing as if these operations would become permanent at a later
time.  While implementations are not required to throw an exception under
these circumstances, they are encouraged to do so.  A {@link
SecurityException} would be appropriate.

<p>Most of the SPI methods require the implementation to read or write
information at a preferences node.  The implementor should beware of the
fact that another VM may have concurrently deleted this node from the
backing store.  It is the implementation's responsibility to recreate the
node if it has been deleted.

<p>Implementation note: In Sun's default <tt>Preferences</tt>
implementations, the user's identity is inherited from the underlying
operating system and does not change for the lifetime of the virtual
machine.  It is recognized that server-side <tt>Preferences</tt>
implementations may have the user identity change from request to request,
implicitly passed to <tt>Preferences</tt> methods via the use of a
static {@link ThreadLocal} instance.  Authors of such implementations are
<i>strongly</i> encouraged to determine the user at the time preferences
are accessed (for example by the {@link #get(String,String)} or {@link
#put(String,String)} method) rather than permanently associating a user
with each <tt>Preferences</tt> instance.  The latter behavior conflicts
with normal <tt>Preferences</tt> usage and would lead to great confusion.

@author  Josh Bloch
@see     Preferences
@since   1.4
"
      classrelation 3687042 // <generalisation>
	relation 3687042 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3687042 // <generalisation>
	  b parent class_ref 1142018 // Preferences
      end

      classrelation 3687170 // name (<unidirectional association>)
	relation 3687170 --->
	  a role_name "name" const_relation private
	    comment "
Our name relative to parent.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3687170 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3687298 // absolutePath (<unidirectional association>)
	relation 3687298 --->
	  a role_name "absolutePath" const_relation private
	    comment "
Our absolute path name.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3687298 // absolutePath (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3687426 // parent (<unidirectional association>)
	relation 3687426 --->
	  a role_name "parent" const_relation package
	    comment "
Our parent node.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3687426 // parent (<unidirectional association>)
	  b parent class_ref 1141890 // AbstractPreferences
      end

      classrelation 3687554 // root (<unidirectional association>)
	relation 3687554 --->
	  a role_name "root" const_relation private
	    comment "
Our root node.

 Relative to this node"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3687554 // root (<unidirectional association>)
	  b parent class_ref 1141890 // AbstractPreferences
      end

      attribute 2193666 "newNode"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This field should be <tt>true</tt> if this node did not exist in the
backing store prior to the creation of this object.  The field
is initialized to false, but may be set to true by a subclass
constructor (and should not be modified thereafter).  This field
indicates whether a node change event should be fired when
creation is complete.

"
      end

      classrelation 3687682 // kidCache (<unidirectional association>)
	relation 3687682 --->
	  a role_name "kidCache" init_value " new HashMap<>()" private
	    comment "
All known unremoved children of this node.  (This \"cache\" is consulted
prior to calling childSpi() or getChild().

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, AbstractPreferences> ${name}${value};
"
	    classrelation_ref 3687682 // kidCache (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      attribute 2193794 "removed"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This field is used to keep track of whether or not this node has
been removed.  Once it's set to true, it will never be reset to false.

"
      end

      classrelation 3687810 // prefListeners (<unidirectional association>)
	relation 3687810 --->
	  a role_name "prefListeners" multiplicity "[]" init_value "
        new PreferenceChangeListener[0]" private
	    comment "
Registered preference change listeners.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3687810 // prefListeners (<unidirectional association>)
	  b parent class_ref 1142402 // PreferenceChangeListener
      end

      classrelation 3687938 // nodeListeners (<unidirectional association>)
	relation 3687938 --->
	  a role_name "nodeListeners" multiplicity "[]" init_value " new NodeChangeListener[0]" private
	    comment "
Registered node change listeners.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3687938 // nodeListeners (<unidirectional association>)
	  b parent class_ref 1142530 // NodeChangeListener
      end

      classrelation 3688066 // lock (<unidirectional association>)
	relation 3688066 --->
	  a role_name "lock" init_value " new Object()" const_relation protected
	    comment "
An object whose monitor is used to lock this node.  This object
is used in preference to the node itself to reduce the likelihood of
intentional or unintentional denial of service due to a locked node.
To avoid deadlock, a node is <i>never</i> locked by a thread that
holds a lock on a descendant of that node.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3688066 // lock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 9416066 "AbstractPreferences"
	protected explicit_return_type ""
	nparams 2
	  param inout name "parent" type class_ref 1141890 // AbstractPreferences
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a preference node with the specified parent and the specified
name relative to its parent.

@param parent the parent of this preference node, or null if this
              is the root.
@param name the name of this preference node, relative to its parent,
            or <tt>\"\"</tt> if this is the root.
@throws IllegalArgumentException if <tt>name</tt> contains a slash
         (<tt>'/'</tt>),  or <tt>parent</tt> is <tt>null</tt> and
         name isn't <tt>\"\"</tt>.
"
      end

      operation 9416194 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>put</tt> method as per the specification in
{@link Preferences#put(String,String)}.

<p>This implementation checks that the key and value are legal,
obtains this preference node's lock, checks that the node
has not been removed, invokes {@link #putSpi(String,String)}, and if
there are any preference change listeners, enqueues a notification
event for processing by the event dispatch thread.

@param key key with which the specified value is to be associated.
@param value value to be associated with the specified key.
@throws NullPointerException if key or value is <tt>null</tt>.
@throws IllegalArgumentException if <tt>key.length()</tt> exceeds
      <tt>MAX_KEY_LENGTH</tt> or if <tt>value.length</tt> exceeds
      <tt>MAX_VALUE_LENGTH</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9416322 "get"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "def" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>get</tt> method as per the specification in
{@link Preferences#get(String,String)}.

<p>This implementation first checks to see if <tt>key</tt> is
<tt>null</tt> throwing a <tt>NullPointerException</tt> if this is
the case.  Then it obtains this preference node's lock,
checks that the node has not been removed, invokes {@link
#getSpi(String)}, and returns the result, unless the <tt>getSpi</tt>
invocation returns <tt>null</tt> or throws an exception, in which case
this invocation returns <tt>def</tt>.

@param key key whose associated value is to be returned.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>.
@return the value associated with <tt>key</tt>, or <tt>def</tt>
        if no value is associated with <tt>key</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if key is <tt>null</tt>.  (A
        <tt>null</tt> default <i>is</i> permitted.)
"
      end

      operation 9416450 "remove"
	public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>remove(String)</tt> method as per the specification
in {@link Preferences#remove(String)}.

<p>This implementation obtains this preference node's lock,
checks that the node has not been removed, invokes
{@link #removeSpi(String)} and if there are any preference
change listeners, enqueues a notification event for processing by the
event dispatch thread.

@param key key whose mapping is to be removed from the preference node.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException {@inheritDoc}.
"
      end

      operation 9416578 "clear"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>clear</tt> method as per the specification in
{@link Preferences#clear()}.

<p>This implementation obtains this preference node's lock,
invokes {@link #keys()} to obtain an array of keys, and
iterates over the array invoking {@link #remove(String)} on each key.

@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9416706 "putInt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>putInt</tt> method as per the specification in
{@link Preferences#putInt(String,int)}.

<p>This implementation translates <tt>value</tt> to a string with
{@link Integer#toString(int)} and invokes {@link #put(String,String)}
on the result.

@param key key with which the string form of value is to be associated.
@param value value whose string form is to be associated with key.
@throws NullPointerException if key is <tt>null</tt>.
@throws IllegalArgumentException if <tt>key.length()</tt> exceeds
        <tt>MAX_KEY_LENGTH</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9416834 "getInt"
	public explicit_return_type "int"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "def" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>getInt</tt> method as per the specification in
{@link Preferences#getInt(String,int)}.

<p>This implementation invokes {@link #get(String,String) <tt>get(key,
null)</tt>}.  If the return value is non-null, the implementation
attempts to translate it to an <tt>int</tt> with
{@link Integer#parseInt(String)}.  If the attempt succeeds, the return
value is returned by this method.  Otherwise, <tt>def</tt> is returned.

@param key key whose associated value is to be returned as an int.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>
       or the associated value cannot be interpreted as an int.
@return the int value represented by the string associated with
        <tt>key</tt> in this preference node, or <tt>def</tt> if the
        associated value does not exist or cannot be interpreted as
        an int.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
"
      end

      operation 9416962 "putLong"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>putLong</tt> method as per the specification in
{@link Preferences#putLong(String,long)}.

<p>This implementation translates <tt>value</tt> to a string with
{@link Long#toString(long)} and invokes {@link #put(String,String)}
on the result.

@param key key with which the string form of value is to be associated.
@param value value whose string form is to be associated with key.
@throws NullPointerException if key is <tt>null</tt>.
@throws IllegalArgumentException if <tt>key.length()</tt> exceeds
        <tt>MAX_KEY_LENGTH</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9417090 "getLong"
	public explicit_return_type "long"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "def" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>getLong</tt> method as per the specification in
{@link Preferences#getLong(String,long)}.

<p>This implementation invokes {@link #get(String,String) <tt>get(key,
null)</tt>}.  If the return value is non-null, the implementation
attempts to translate it to a <tt>long</tt> with
{@link Long#parseLong(String)}.  If the attempt succeeds, the return
value is returned by this method.  Otherwise, <tt>def</tt> is returned.

@param key key whose associated value is to be returned as a long.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>
       or the associated value cannot be interpreted as a long.
@return the long value represented by the string associated with
        <tt>key</tt> in this preference node, or <tt>def</tt> if the
        associated value does not exist or cannot be interpreted as
        a long.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
"
      end

      operation 9417218 "putBoolean"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>putBoolean</tt> method as per the specification in
{@link Preferences#putBoolean(String,boolean)}.

<p>This implementation translates <tt>value</tt> to a string with
{@link String#valueOf(boolean)} and invokes {@link #put(String,String)}
on the result.

@param key key with which the string form of value is to be associated.
@param value value whose string form is to be associated with key.
@throws NullPointerException if key is <tt>null</tt>.
@throws IllegalArgumentException if <tt>key.length()</tt> exceeds
        <tt>MAX_KEY_LENGTH</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9417346 "getBoolean"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "def" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>getBoolean</tt> method as per the specification in
{@link Preferences#getBoolean(String,boolean)}.

<p>This implementation invokes {@link #get(String,String) <tt>get(key,
null)</tt>}.  If the return value is non-null, it is compared with
<tt>\"true\"</tt> using {@link String#equalsIgnoreCase(String)}.  If the
comparison returns <tt>true</tt>, this invocation returns
<tt>true</tt>.  Otherwise, the original return value is compared with
<tt>\"false\"</tt>, again using {@link String#equalsIgnoreCase(String)}.
If the comparison returns <tt>true</tt>, this invocation returns
<tt>false</tt>.  Otherwise, this invocation returns <tt>def</tt>.

@param key key whose associated value is to be returned as a boolean.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>
       or the associated value cannot be interpreted as a boolean.
@return the boolean value represented by the string associated with
        <tt>key</tt> in this preference node, or <tt>def</tt> if the
        associated value does not exist or cannot be interpreted as
        a boolean.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
"
      end

      operation 9417474 "putFloat"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "value" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>putFloat</tt> method as per the specification in
{@link Preferences#putFloat(String,float)}.

<p>This implementation translates <tt>value</tt> to a string with
{@link Float#toString(float)} and invokes {@link #put(String,String)}
on the result.

@param key key with which the string form of value is to be associated.
@param value value whose string form is to be associated with key.
@throws NullPointerException if key is <tt>null</tt>.
@throws IllegalArgumentException if <tt>key.length()</tt> exceeds
        <tt>MAX_KEY_LENGTH</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9417602 "getFloat"
	public explicit_return_type "float"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "def" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>getFloat</tt> method as per the specification in
{@link Preferences#getFloat(String,float)}.

<p>This implementation invokes {@link #get(String,String) <tt>get(key,
null)</tt>}.  If the return value is non-null, the implementation
attempts to translate it to an <tt>float</tt> with
{@link Float#parseFloat(String)}.  If the attempt succeeds, the return
value is returned by this method.  Otherwise, <tt>def</tt> is returned.

@param key key whose associated value is to be returned as a float.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>
       or the associated value cannot be interpreted as a float.
@return the float value represented by the string associated with
        <tt>key</tt> in this preference node, or <tt>def</tt> if the
        associated value does not exist or cannot be interpreted as
        a float.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
"
      end

      operation 9417730 "putDouble"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "value" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>putDouble</tt> method as per the specification in
{@link Preferences#putDouble(String,double)}.

<p>This implementation translates <tt>value</tt> to a string with
{@link Double#toString(double)} and invokes {@link #put(String,String)}
on the result.

@param key key with which the string form of value is to be associated.
@param value value whose string form is to be associated with key.
@throws NullPointerException if key is <tt>null</tt>.
@throws IllegalArgumentException if <tt>key.length()</tt> exceeds
        <tt>MAX_KEY_LENGTH</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9417858 "getDouble"
	public explicit_return_type "double"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "def" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>getDouble</tt> method as per the specification in
{@link Preferences#getDouble(String,double)}.

<p>This implementation invokes {@link #get(String,String) <tt>get(key,
null)</tt>}.  If the return value is non-null, the implementation
attempts to translate it to an <tt>double</tt> with
{@link Double#parseDouble(String)}.  If the attempt succeeds, the return
value is returned by this method.  Otherwise, <tt>def</tt> is returned.

@param key key whose associated value is to be returned as a double.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>
       or the associated value cannot be interpreted as a double.
@return the double value represented by the string associated with
        <tt>key</tt> in this preference node, or <tt>def</tt> if the
        associated value does not exist or cannot be interpreted as
        a double.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
"
      end

      operation 9417986 "putByteArray"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>putByteArray</tt> method as per the specification in
{@link Preferences#putByteArray(String,byte[])}.

@param key key with which the string form of value is to be associated.
@param value value whose string form is to be associated with key.
@throws NullPointerException if key or value is <tt>null</tt>.
@throws IllegalArgumentException if key.length() exceeds MAX_KEY_LENGTH
        or if value.length exceeds MAX_VALUE_LENGTH*3/4.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9418114 "getByteArray"
	public explicit_return_type "byte"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "def" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>getByteArray</tt> method as per the specification in
{@link Preferences#getByteArray(String,byte[])}.

@param key key whose associated value is to be returned as a byte array.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>
       or the associated value cannot be interpreted as a byte array.
@return the byte array value represented by the string associated with
        <tt>key</tt> in this preference node, or <tt>def</tt> if the
        associated value does not exist or cannot be interpreted as
        a byte array.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.  (A
        <tt>null</tt> value for <tt>def</tt> <i>is</i> permitted.)
"
      end

      operation 9418242 "keys"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>keys</tt> method as per the specification in
{@link Preferences#keys()}.

<p>This implementation obtains this preference node's lock, checks that
the node has not been removed and invokes {@link #keysSpi()}.

@return an array of the keys that have an associated value in this
        preference node.
@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9418370 "childrenNames"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>children</tt> method as per the specification in
{@link Preferences#childrenNames()}.

<p>This implementation obtains this preference node's lock, checks that
the node has not been removed, constructs a <tt>TreeSet</tt> initialized
to the names of children already cached (the children in this node's
\"child-cache\"), invokes {@link #childrenNamesSpi()}, and adds all of the
returned child-names into the set.  The elements of the tree set are
dumped into a <tt>String</tt> array using the <tt>toArray</tt> method,
and this array is returned.

@return the names of the children of this preference node.
@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #cachedChildren()
"
      end

      classrelation 3688194 // EMPTY_STRING_ARRAY (<unidirectional association>)
	relation 3688194 --->
	  a role_name "EMPTY_STRING_ARRAY" multiplicity "[]" init_value " new String[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3688194 // EMPTY_STRING_ARRAY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9418498 "cachedChildren"
	protected return_type class_ref 1141890 // AbstractPreferences
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all known unremoved children of this node.

@return all known unremoved children of this node.
"
      end

      classrelation 3688322 // EMPTY_ABSTRACT_PREFS_ARRAY (<unidirectional association>)
	relation 3688322 --->
	  a role_name "EMPTY_ABSTRACT_PREFS_ARRAY" multiplicity "[]" init_value " new AbstractPreferences[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3688322 // EMPTY_ABSTRACT_PREFS_ARRAY (<unidirectional association>)
	  b parent class_ref 1141890 // AbstractPreferences
      end

      operation 9418626 "parent"
	public return_type class_ref 1142018 // Preferences
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>parent</tt> method as per the specification in
{@link Preferences#parent()}.

<p>This implementation obtains this preference node's lock, checks that
the node has not been removed and returns the parent value that was
passed to this node's constructor.

@return the parent of this preference node.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9418754 "node"
	public return_type class_ref 1142018 // Preferences
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>node</tt> method as per the specification in
{@link Preferences#node(String)}.

<p>This implementation obtains this preference node's lock and checks
that the node has not been removed.  If <tt>path</tt> is <tt>\"\"</tt>,
this node is returned; if <tt>path</tt> is <tt>\"/\"</tt>, this node's
root is returned.  If the first character in <tt>path</tt> is
not <tt>'/'</tt>, the implementation breaks <tt>path</tt> into
tokens and recursively traverses the path from this node to the
named node, \"consuming\" a name and a slash from <tt>path</tt> at
each step of the traversal.  At each step, the current node is locked
and the node's child-cache is checked for the named node.  If it is
not found, the name is checked to make sure its length does not
exceed <tt>MAX_NAME_LENGTH</tt>.  Then the {@link #childSpi(String)}
method is invoked, and the result stored in this node's child-cache.
If the newly created <tt>Preferences</tt> object's {@link #newNode}
field is <tt>true</tt> and there are any node change listeners,
a notification event is enqueued for processing by the event dispatch
thread.

<p>When there are no more tokens, the last value found in the
child-cache or returned by <tt>childSpi</tt> is returned by this
method.  If during the traversal, two <tt>\"/\"</tt> tokens occur
consecutively, or the final token is <tt>\"/\"</tt> (rather than a name),
an appropriate <tt>IllegalArgumentException</tt> is thrown.

<p> If the first character of <tt>path</tt> is <tt>'/'</tt>
(indicating an absolute path name) this preference node's
lock is dropped prior to breaking <tt>path</tt> into tokens, and
this method recursively traverses the path starting from the root
(rather than starting from this node).  The traversal is otherwise
identical to the one described for relative path names.  Dropping
the lock on this node prior to commencing the traversal at the root
node is essential to avoid the possibility of deadlock, as per the
{@link #lock locking invariant}.

@param path the path name of the preference node to return.
@return the specified preference node.
@throws IllegalArgumentException if the path name is invalid (i.e.,
        it contains multiple consecutive slash characters, or ends
        with a slash character and is more than one character long).
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9418882 "node"
	private return_type class_ref 1142018 // Preferences
	nparams 1
	  param inout name "path" type class_ref 380418 // StringTokenizer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "tokenizer contains <name> {'/' <name>}*
"
      end

      operation 9419010 "nodeExists"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>nodeExists</tt> method as per the specification in
{@link Preferences#nodeExists(String)}.

<p>This implementation is very similar to {@link #node(String)},
except that {@link #getChild(String)} is used instead of {@link
#childSpi(String)}.

@param path the path name of the node whose existence is to be checked.
@return true if the specified node exists.
@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
@throws IllegalArgumentException if the path name is invalid (i.e.,
        it contains multiple consecutive slash characters, or ends
        with a slash character and is more than one character long).
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method and
        <tt>pathname</tt> is not the empty string (<tt>\"\"</tt>).
"
      end

      operation 9419138 "nodeExists"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 380418 // StringTokenizer
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "tokenizer contains <name> {'/' <name>}*
"
      end

      operation 9419266 "removeNode"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Implements the <tt>removeNode()</tt> method as per the specification in
{@link Preferences#removeNode()}.

<p>This implementation checks to see that this node is the root; if so,
it throws an appropriate exception.  Then, it locks this node's parent,
and calls a recursive helper method that traverses the subtree rooted at
this node.  The recursive method locks the node on which it was called,
checks that it has not already been removed, and then ensures that all
of its children are cached: The {@link #childrenNamesSpi()} method is
invoked and each returned child name is checked for containment in the
child-cache.  If a child is not already cached, the {@link
#childSpi(String)} method is invoked to create a <tt>Preferences</tt>
instance for it, and this instance is put into the child-cache.  Then
the helper method calls itself recursively on each node contained in its
child-cache.  Next, it invokes {@link #removeNodeSpi()}, marks itself
as removed, and removes itself from its parent's child-cache.  Finally,
if there are any node change listeners, it enqueues a notification
event for processing by the event dispatch thread.

<p>Note that the helper method is always invoked with all ancestors up
to the \"closest non-removed ancestor\" locked.

@throws IllegalStateException if this node (or an ancestor) has already
        been removed with the {@link #removeNode()} method.
@throws UnsupportedOperationException if this method is invoked on
        the root node.
@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
"
      end

      operation 9419394 "removeNode2"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called with locks on all nodes on path from parent of \"removal root\"
to this (including the former but excluding the latter).
"
      end

      operation 9419522 "name"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>name</tt> method as per the specification in
{@link Preferences#name()}.

<p>This implementation merely returns the name that was
passed to this node's constructor.

@return this preference node's name, relative to its parent.
"
      end

      operation 9419650 "absolutePath"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>absolutePath</tt> method as per the specification in
{@link Preferences#absolutePath()}.

<p>This implementation merely returns the absolute path name that
was computed at the time that this node was constructed (based on
the name that was passed to this node's constructor, and the names
that were passed to this node's ancestors' constructors).

@return this preference node's absolute path name.
"
      end

      operation 9419778 "isUserNode"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>isUserNode</tt> method as per the specification in
{@link Preferences#isUserNode()}.

<p>This implementation compares this node's root node (which is stored
in a private field) with the value returned by
{@link Preferences#userRoot()}.  If the two object references are
identical, this method returns true.

@return <tt>true</tt> if this preference node is in the user
        preference tree, <tt>false</tt> if it's in the system
        preference tree.
"
      end

      operation 9419906 "addPreferenceChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pcl" type class_ref 1142402 // PreferenceChangeListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9420034 "removePreferenceChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pcl" type class_ref 1142402 // PreferenceChangeListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9420162 "addNodeChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ncl" type class_ref 1142530 // NodeChangeListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9420290 "removeNodeChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ncl" type class_ref 1142530 // NodeChangeListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9420418 "putSpi"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " \"SPI\" METHODS

Put the given key-value association into this preference node.  It is
guaranteed that <tt>key</tt> and <tt>value</tt> are non-null and of
legal length.  Also, it is guaranteed that this node has not been
removed.  (The implementor needn't check for any of these things.)

<p>This method is invoked with the lock on this node held.
@param key the key
@param value the value
"
      end

      operation 9420546 "getSpi"
	abstract protected return_type class_ref 128130 // String
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the value associated with the specified key at this preference
node, or <tt>null</tt> if there is no association for this key, or the
association cannot be determined at this time.  It is guaranteed that
<tt>key</tt> is non-null.  Also, it is guaranteed that this node has
not been removed.  (The implementor needn't check for either of these
things.)

<p> Generally speaking, this method should not throw an exception
under any circumstances.  If, however, if it does throw an exception,
the exception will be intercepted and treated as a <tt>null</tt>
return value.

<p>This method is invoked with the lock on this node held.

@param key the key
@return the value associated with the specified key at this preference
         node, or <tt>null</tt> if there is no association for this
         key, or the association cannot be determined at this time.
"
      end

      operation 9420674 "removeSpi"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove the association (if any) for the specified key at this
preference node.  It is guaranteed that <tt>key</tt> is non-null.
Also, it is guaranteed that this node has not been removed.
(The implementor needn't check for either of these things.)

<p>This method is invoked with the lock on this node held.
@param key the key
"
      end

      operation 9420802 "removeNodeSpi"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes this preference node, invalidating it and any preferences that
it contains.  The named child will have no descendants at the time this
invocation is made (i.e., the {@link Preferences#removeNode()} method
invokes this method repeatedly in a bottom-up fashion, removing each of
a node's descendants before removing the node itself).

<p>This method is invoked with the lock held on this node and its
parent (and all ancestors that are being removed as a
result of a single invocation to {@link Preferences#removeNode()}).

<p>The removal of a node needn't become persistent until the
<tt>flush</tt> method is invoked on this node (or an ancestor).

<p>If this node throws a <tt>BackingStoreException</tt>, the exception
will propagate out beyond the enclosing {@link #removeNode()}
invocation.

@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
"
      end

      operation 9420930 "keysSpi"
	abstract protected return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all of the keys that have an associated value in this
preference node.  (The returned array will be of size zero if
this node has no preferences.)  It is guaranteed that this node has not
been removed.

<p>This method is invoked with the lock on this node held.

<p>If this node throws a <tt>BackingStoreException</tt>, the exception
will propagate out beyond the enclosing {@link #keys()} invocation.

@return an array of the keys that have an associated value in this
        preference node.
@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
"
      end

      operation 9421058 "childrenNamesSpi"
	abstract protected return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the names of the children of this preference node.  (The
returned array will be of size zero if this node has no children.)
This method need not return the names of any nodes already cached,
but may do so without harm.

<p>This method is invoked with the lock on this node held.

<p>If this node throws a <tt>BackingStoreException</tt>, the exception
will propagate out beyond the enclosing {@link #childrenNames()}
invocation.

@return an array containing the names of the children of this
        preference node.
@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
"
      end

      operation 9421186 "getChild"
	protected return_type class_ref 1141890 // AbstractPreferences
	nparams 1
	  param inout name "nodeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the named child if it exists, or <tt>null</tt> if it does not.
It is guaranteed that <tt>nodeName</tt> is non-null, non-empty,
does not contain the slash character ('/'), and is no longer than
{@link #MAX_NAME_LENGTH} characters.  Also, it is guaranteed
that this node has not been removed.  (The implementor needn't check
for any of these things if he chooses to override this method.)

<p>Finally, it is guaranteed that the named node has not been returned
by a previous invocation of this method or {@link #childSpi} after the
last time that it was removed.  In other words, a cached value will
always be used in preference to invoking this method.  (The implementor
needn't maintain his own cache of previously returned children if he
chooses to override this method.)

<p>This implementation obtains this preference node's lock, invokes
{@link #childrenNames()} to get an array of the names of this node's
children, and iterates over the array comparing the name of each child
with the specified node name.  If a child node has the correct name,
the {@link #childSpi(String)} method is invoked and the resulting
node is returned.  If the iteration completes without finding the
specified name, <tt>null</tt> is returned.

@param nodeName name of the child to be searched for.
@return the named child if it exists, or null if it does not.
@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
"
      end

      operation 9421314 "childSpi"
	abstract protected return_type class_ref 1141890 // AbstractPreferences
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the named child of this preference node, creating it if it does
not already exist.  It is guaranteed that <tt>name</tt> is non-null,
non-empty, does not contain the slash character ('/'), and is no longer
than {@link #MAX_NAME_LENGTH} characters.  Also, it is guaranteed that
this node has not been removed.  (The implementor needn't check for any
of these things.)

<p>Finally, it is guaranteed that the named node has not been returned
by a previous invocation of this method or {@link #getChild(String)}
after the last time that it was removed.  In other words, a cached
value will always be used in preference to invoking this method.
Subclasses need not maintain their own cache of previously returned
children.

<p>The implementer must ensure that the returned node has not been
removed.  If a like-named child of this node was previously removed, the
implementer must return a newly constructed <tt>AbstractPreferences</tt>
node; once removed, an <tt>AbstractPreferences</tt> node
cannot be \"resuscitated.\"

<p>If this method causes a node to be created, this node is not
guaranteed to be persistent until the <tt>flush</tt> method is
invoked on this node or one of its ancestors (or descendants).

<p>This method is invoked with the lock on this node held.

@param name The name of the child node to return, relative to
       this preference node.
@return The named child node.
"
      end

      operation 9421442 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute path name of this preferences node.
"
      end

      operation 9421570 "sync"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>sync</tt> method as per the specification in
{@link Preferences#sync()}.

<p>This implementation calls a recursive helper method that locks this
node, invokes syncSpi() on it, unlocks this node, and recursively
invokes this method on each \"cached child.\"  A cached child is a child
of this node that has been created in this VM and not subsequently
removed.  In effect, this method does a depth first traversal of the
\"cached subtree\" rooted at this node, calling syncSpi() on each node in
the subTree while only that node is locked. Note that syncSpi() is
invoked top-down.

@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #flush()
"
      end

      operation 9421698 "sync2"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9421826 "syncSpi"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is invoked with this node locked.  The contract of this
method is to synchronize any cached preferences stored at this node
with any stored in the backing store.  (It is perfectly possible that
this node does not exist on the backing store, either because it has
been deleted by another VM, or because it has not yet been created.)
Note that this method should <i>not</i> synchronize the preferences in
any subnodes of this node.  If the backing store naturally syncs an
entire subtree at once, the implementer is encouraged to override
sync(), rather than merely overriding this method.

<p>If this node throws a <tt>BackingStoreException</tt>, the exception
will propagate out beyond the enclosing {@link #sync()} invocation.

@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
"
      end

      operation 9421954 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>flush</tt> method as per the specification in
{@link Preferences#flush()}.

<p>This implementation calls a recursive helper method that locks this
node, invokes flushSpi() on it, unlocks this node, and recursively
invokes this method on each \"cached child.\"  A cached child is a child
of this node that has been created in this VM and not subsequently
removed.  In effect, this method does a depth first traversal of the
\"cached subtree\" rooted at this node, calling flushSpi() on each node in
the subTree while only that node is locked. Note that flushSpi() is
invoked top-down.

<p> If this method is invoked on a node that has been removed with
the {@link #removeNode()} method, flushSpi() is invoked on this node,
but not on others.

@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
@see #flush()
"
      end

      operation 9422082 "flush2"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9422210 "flushSpi"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is invoked with this node locked.  The contract of this
method is to force any cached changes in the contents of this
preference node to the backing store, guaranteeing their persistence.
(It is perfectly possible that this node does not exist on the backing
store, either because it has been deleted by another VM, or because it
has not yet been created.)  Note that this method should <i>not</i>
flush the preferences in any subnodes of this node.  If the backing
store naturally flushes an entire subtree at once, the implementer is
encouraged to override flush(), rather than merely overriding this
method.

<p>If this node throws a <tt>BackingStoreException</tt>, the exception
will propagate out beyond the enclosing {@link #flush()} invocation.

@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
"
      end

      operation 9422338 "isRemoved"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> iff this node (or an ancestor) has been
removed with the {@link #removeNode()} method.  This method
locks this node prior to returning the contents of the private
field used to track this state.

@return <tt>true</tt> iff this node (or an ancestor) has been
      removed with the {@link #removeNode()} method.
"
      end

      classrelation 3688450 // eventQueue (<unidirectional association>)
	relation 3688450 --->
	  a role_name "eventQueue" init_value " new LinkedList<>()" class_relation const_relation private
	    comment "
Queue of pending notification events.  When a preference or node
change event for which there are one or more listeners occurs,
it is placed on this queue and the queue is notified.  A background
thread waits on this queue and delivers the events.  This decouples
event delivery from preference activity, greatly simplifying
locking and reducing opportunity for deadlock.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<EventObject> ${name}${value};
"
	    classrelation_ref 3688450 // eventQueue (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      class 1142786 "NodeAddedEvent"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3688834 // <generalisation>
	  relation 3688834 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3688834 // <generalisation>
	    b parent class_ref 1142914 // NodeChangeEvent
	end

	attribute 2194050 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -6743557530157328528L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9423106 "NodeAddedEvent"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "parent" type class_ref 1142018 // Preferences
	    param inout name "child" type class_ref 1142018 // Preferences
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1143042 "NodeRemovedEvent"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3688962 // <generalisation>
	  relation 3688962 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3688962 // <generalisation>
	    b parent class_ref 1142914 // NodeChangeEvent
	end

	attribute 2194178 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 8735497392918824837L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9423234 "NodeRemovedEvent"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "parent" type class_ref 1142018 // Preferences
	    param inout name "child" type class_ref 1142018 // Preferences
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1143170 "EventDispatchThread"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3689090 // <generalisation>
	  relation 3689090 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3689090 // <generalisation>
	    b parent class_ref 128642 // Thread
	end

	operation 9423362 "run"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3689218 // eventDispatchThread (<unidirectional association>)
	relation 3689218 --->
	  a role_name "eventDispatchThread" init_value " null" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3689218 // eventDispatchThread (<unidirectional association>)
	  b parent class_ref 128642 // Thread
      end

      operation 9423490 "startEventDispatchThreadIfNecessary"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method starts the event dispatch thread the first time it
is called.  The event dispatch thread will be started only
if someone registers a listener.
"
      end

      operation 9423618 "prefListeners"
	package return_type class_ref 1142402 // PreferenceChangeListener
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this node's preference/node change listeners.  Even though
we're using a copy-on-write lists, we use synchronized accessors to
ensure information transmission from the writing thread to the
reading thread.
"
      end

      operation 9423746 "nodeListeners"
	package return_type class_ref 1142530 // NodeChangeListener
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9423874 "enqueuePreferenceChangeEvent"
	private explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "newValue" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enqueue a preference change event for delivery to registered
preference change listeners unless there are no registered
listeners.  Invoked with this.lock held.
"
      end

      operation 9424002 "enqueueNodeAddedEvent"
	private explicit_return_type "void"
	nparams 1
	  param inout name "child" type class_ref 1142018 // Preferences
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enqueue a \"node added\" event for delivery to registered node change
listeners unless there are no registered listeners.  Invoked with
this.lock held.
"
      end

      operation 9424130 "enqueueNodeRemovedEvent"
	private explicit_return_type "void"
	nparams 1
	  param inout name "child" type class_ref 1142018 // Preferences
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enqueue a \"node removed\" event for delivery to registered node change
listeners unless there are no registered listeners.  Invoked with
this.lock held.
"
      end

      operation 9424258 "exportNode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "os" type class_ref 151298 // OutputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>exportNode</tt> method as per the specification in
{@link Preferences#exportNode(OutputStream)}.

@param os the output stream on which to emit the XML document.
@throws IOException if writing to the specified output stream
        results in an <tt>IOException</tt>.
@throws BackingStoreException if preference data cannot be read from
        backing store.
"
      end

      operation 9424386 "exportSubtree"
	public explicit_return_type "void"
	nparams 1
	  param inout name "os" type class_ref 151298 // OutputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the <tt>exportSubtree</tt> method as per the specification in
{@link Preferences#exportSubtree(OutputStream)}.

@param os the output stream on which to emit the XML document.
@throws IOException if writing to the specified output stream
        results in an <tt>IOException</tt>.
@throws BackingStoreException if preference data cannot be read from
        backing store.
"
      end
    end

    class 1142018 "Preferences"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A node in a hierarchical collection of preference data.  This class
allows applications to store and retrieve user and system
preference and configuration data.  This data is stored
persistently in an implementation-dependent backing store.  Typical
implementations include flat files, OS-specific registries,
directory servers and SQL databases.  The user of this class needn't
be concerned with details of the backing store.

<p>There are two separate trees of preference nodes, one for user
preferences and one for system preferences.  Each user has a separate user
preference tree, and all users in a given system share the same system
preference tree.  The precise description of \"user\" and \"system\" will vary
from implementation to implementation.  Typical information stored in the
user preference tree might include font choice, color choice, or preferred
window location and size for a particular application.  Typical information
stored in the system preference tree might include installation
configuration data for an application.

<p>Nodes in a preference tree are named in a similar fashion to
directories in a hierarchical file system.   Every node in a preference
tree has a <i>node name</i> (which is not necessarily unique),
a unique <i>absolute path name</i>, and a path name <i>relative</i> to each
ancestor including itself.

<p>The root node has a node name of the empty string (\"\").  Every other
node has an arbitrary node name, specified at the time it is created.  The
only restrictions on this name are that it cannot be the empty string, and
it cannot contain the slash character ('/').

<p>The root node has an absolute path name of <tt>\"/\"</tt>.  Children of
the root node have absolute path names of <tt>\"/\" + </tt><i>&lt;node
name&gt;</i>.  All other nodes have absolute path names of <i>&lt;parent's
absolute path name&gt;</i><tt> + \"/\" + </tt><i>&lt;node name&gt;</i>.
Note that all absolute path names begin with the slash character.

<p>A node <i>n</i>'s path name relative to its ancestor <i>a</i>
is simply the string that must be appended to <i>a</i>'s absolute path name
in order to form <i>n</i>'s absolute path name, with the initial slash
character (if present) removed.  Note that:
<ul>
<li>No relative path names begin with the slash character.
<li>Every node's path name relative to itself is the empty string.
<li>Every node's path name relative to its parent is its node name (except
for the root node, which does not have a parent).
<li>Every node's path name relative to the root is its absolute path name
with the initial slash character removed.
</ul>

<p>Note finally that:
<ul>
<li>No path name contains multiple consecutive slash characters.
<li>No path name with the exception of the root's absolute path name
ends in the slash character.
<li>Any string that conforms to these two rules is a valid path name.
</ul>

<p>All of the methods that modify preferences data are permitted to operate
asynchronously; they may return immediately, and changes will eventually
propagate to the persistent backing store with an implementation-dependent
delay.  The <tt>flush</tt> method may be used to synchronously force
updates to the backing store.  Normal termination of the Java Virtual
Machine will <i>not</i> result in the loss of pending updates -- an explicit
<tt>flush</tt> invocation is <i>not</i> required upon termination to ensure
that pending updates are made persistent.

<p>All of the methods that read preferences from a <tt>Preferences</tt>
object require the invoker to provide a default value.  The default value is
returned if no value has been previously set <i>or if the backing store is
unavailable</i>.  The intent is to allow applications to operate, albeit
with slightly degraded functionality, even if the backing store becomes
unavailable.  Several methods, like <tt>flush</tt>, have semantics that
prevent them from operating if the backing store is unavailable.  Ordinary
applications should have no need to invoke any of these methods, which can
be identified by the fact that they are declared to throw {@link
BackingStoreException}.

<p>The methods in this class may be invoked concurrently by multiple threads
in a single JVM without the need for external synchronization, and the
results will be equivalent to some serial execution.  If this class is used
concurrently <i>by multiple JVMs</i> that store their preference data in
the same backing store, the data store will not be corrupted, but no
other guarantees are made concerning the consistency of the preference
data.

<p>This class contains an export/import facility, allowing preferences
to be \"exported\" to an XML document, and XML documents representing
preferences to be \"imported\" back into the system.  This facility
may be used to back up all or part of a preference tree, and
subsequently restore from the backup.

<p>The XML document has the following DOCTYPE declaration:
<pre>{@code
<!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\">
}</pre>
Note that the system URI (http://java.sun.com/dtd/preferences.dtd) is
<i>not</i> accessed when exporting or importing preferences; it merely
serves as a string to uniquely identify the DTD, which is:
<pre>{@code
   <?xml version=\"1.0\" encoding=\"UTF-8\"?>

   <!-- DTD for a Preferences tree. -->

   <!-- The preferences element is at the root of an XML document
        representing a Preferences tree. -->
   <!ELEMENT preferences (root)>

   <!-- The preferences element contains an optional version attribute,
         which specifies version of DTD. -->
   <!ATTLIST preferences EXTERNAL_XML_VERSION CDATA \"0.0\" >

   <!-- The root element has a map representing the root's preferences
        (if any), and one node for each child of the root (if any). -->
   <!ELEMENT root (map, node*) >

   <!-- Additionally, the root contains a type attribute, which
        specifies whether it's the system or user root. -->
   <!ATTLIST root
             type (system|user) #REQUIRED >

   <!-- Each node has a map representing its preferences (if any),
        and one node for each child (if any). -->
   <!ELEMENT node (map, node*) >

   <!-- Additionally, each node has a name attribute -->
   <!ATTLIST node
             name CDATA #REQUIRED >

   <!-- A map represents the preferences stored at a node (if any). -->
   <!ELEMENT map (entry*) >

   <!-- An entry represents a single preference, which is simply
         a key-value pair. -->
   <!ELEMENT entry EMPTY >
   <!ATTLIST entry
             key   CDATA #REQUIRED
             value CDATA #REQUIRED >
}</pre>

Every <tt>Preferences</tt> implementation must have an associated {@link
PreferencesFactory} implementation.  Every Java(TM) SE implementation must provide
some means of specifying which <tt>PreferencesFactory</tt> implementation
is used to generate the root preferences nodes.  This allows the
administrator to replace the default preferences implementation with an
alternative implementation.

<p>Implementation note: In Sun's JRE, the <tt>PreferencesFactory</tt>
implementation is located as follows:

<ol>

<li><p>If the system property
<tt>java.util.prefs.PreferencesFactory</tt> is defined, then it is
taken to be the fully-qualified name of a class implementing the
<tt>PreferencesFactory</tt> interface.  The class is loaded and
instantiated; if this process fails then an unspecified error is
thrown.</p></li>

<li><p> If a <tt>PreferencesFactory</tt> implementation class file
has been installed in a jar file that is visible to the
{@link java.lang.ClassLoader#getSystemClassLoader system class loader},
and that jar file contains a provider-configuration file named
<tt>java.util.prefs.PreferencesFactory</tt> in the resource
directory <tt>META-INF/services</tt>, then the first class name
specified in that file is taken.  If more than one such jar file is
provided, the first one found will be used.  The class is loaded
and instantiated; if this process fails then an unspecified error
is thrown.  </p></li>

<li><p>Finally, if neither the above-mentioned system property nor
an extension jar file is provided, then the system-wide default
<tt>PreferencesFactory</tt> implementation for the underlying
platform is loaded and instantiated.</p></li>

</ol>

@author  Josh Bloch
@since   1.4
"
      classrelation 3686786 // factory (<unidirectional association>)
	relation 3686786 --->
	  a role_name "factory" init_value " factory()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3686786 // factory (<unidirectional association>)
	  b parent class_ref 1142146 // PreferencesFactory
      end

      operation 9410562 "factory"
	class_operation private return_type class_ref 1142146 // PreferencesFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9410690 "factory1"
	class_operation private return_type class_ref 1142146 // PreferencesFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2193282 "MAX_KEY_LENGTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 80"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Maximum length of string allowed as a key (80 characters).

"
      end

      attribute 2193410 "MAX_VALUE_LENGTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8*1024"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Maximum length of string allowed as a value (8192 characters).

"
      end

      attribute 2193538 "MAX_NAME_LENGTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 80"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Maximum length of a node name (80 characters).

"
      end

      operation 9410818 "userNodeForPackage"
	class_operation public return_type class_ref 1142018 // Preferences
	nparams 1
	  param inout name "c" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the preference node from the calling user's preference tree
that is associated (by convention) with the specified class's package.
The convention is as follows: the absolute path name of the node is the
fully qualified package name, preceded by a slash (<tt>'/'</tt>), and
with each period (<tt>'.'</tt>) replaced by a slash.  For example the
absolute path name of the node associated with the class
<tt>com.acme.widget.Foo</tt> is <tt>/com/acme/widget</tt>.

<p>This convention does not apply to the unnamed package, whose
associated preference node is <tt>&lt;unnamed&gt;</tt>.  This node
is not intended for long term use, but for convenience in the early
development of programs that do not yet belong to a package, and
for \"throwaway\" programs.  <i>Valuable data should not be stored
at this node as it is shared by all programs that use it.</i>

<p>A class <tt>Foo</tt> wishing to access preferences pertaining to its
package can obtain a preference node as follows: <pre>
   static Preferences prefs = Preferences.userNodeForPackage(Foo.class);
</pre>
This idiom obviates the need for using a string to describe the
preferences node and decreases the likelihood of a run-time failure.
(If the class name is misspelled, it will typically result in a
compile-time error.)

<p>Invoking this method will result in the creation of the returned
node and its ancestors if they do not already exist.  If the returned
node did not exist prior to this call, this node and any ancestors that
were created by this call are not guaranteed to become permanent until
the <tt>flush</tt> method is called on the returned node (or one of its
ancestors or descendants).

@param c the class for whose package a user preference node is desired.
@return the user preference node associated with the package of which
        <tt>c</tt> is a member.
@throws NullPointerException if <tt>c</tt> is <tt>null</tt>.
@throws SecurityException if a security manager is present and
        it denies <tt>RuntimePermission(\"preferences\")</tt>.
@see    RuntimePermission
"
      end

      operation 9410946 "systemNodeForPackage"
	class_operation public return_type class_ref 1142018 // Preferences
	nparams 1
	  param inout name "c" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the preference node from the system preference tree that is
associated (by convention) with the specified class's package.  The
convention is as follows: the absolute path name of the node is the
fully qualified package name, preceded by a slash (<tt>'/'</tt>), and
with each period (<tt>'.'</tt>) replaced by a slash.  For example the
absolute path name of the node associated with the class
<tt>com.acme.widget.Foo</tt> is <tt>/com/acme/widget</tt>.

<p>This convention does not apply to the unnamed package, whose
associated preference node is <tt>&lt;unnamed&gt;</tt>.  This node
is not intended for long term use, but for convenience in the early
development of programs that do not yet belong to a package, and
for \"throwaway\" programs.  <i>Valuable data should not be stored
at this node as it is shared by all programs that use it.</i>

<p>A class <tt>Foo</tt> wishing to access preferences pertaining to its
package can obtain a preference node as follows: <pre>
 static Preferences prefs = Preferences.systemNodeForPackage(Foo.class);
</pre>
This idiom obviates the need for using a string to describe the
preferences node and decreases the likelihood of a run-time failure.
(If the class name is misspelled, it will typically result in a
compile-time error.)

<p>Invoking this method will result in the creation of the returned
node and its ancestors if they do not already exist.  If the returned
node did not exist prior to this call, this node and any ancestors that
were created by this call are not guaranteed to become permanent until
the <tt>flush</tt> method is called on the returned node (or one of its
ancestors or descendants).

@param c the class for whose package a system preference node is desired.
@return the system preference node associated with the package of which
        <tt>c</tt> is a member.
@throws NullPointerException if <tt>c</tt> is <tt>null</tt>.
@throws SecurityException if a security manager is present and
        it denies <tt>RuntimePermission(\"preferences\")</tt>.
@see    RuntimePermission
"
      end

      operation 9411074 "nodeName"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "c" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute path name of the node corresponding to the package
of the specified object.

@throws IllegalArgumentException if the package has node preferences
        node associated with it.
"
      end

      classrelation 3686914 // prefsPerm (<unidirectional association>)
	relation 3686914 --->
	  a role_name "prefsPerm" init_value " new RuntimePermission(\"preferences\")" class_relation private
	    comment "
This permission object represents the permission required to get
access to the user or system root (which in turn allows for all
other operations).

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3686914 // prefsPerm (<unidirectional association>)
	  b parent class_ref 257538 // Permission
      end

      operation 9411202 "userRoot"
	class_operation public return_type class_ref 1142018 // Preferences
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root preference node for the calling user.

@return the root preference node for the calling user.
@throws SecurityException If a security manager is present and
        it denies <tt>RuntimePermission(\"preferences\")</tt>.
@see    RuntimePermission
"
      end

      operation 9411330 "systemRoot"
	class_operation public return_type class_ref 1142018 // Preferences
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root preference node for the system.

@return the root preference node for the system.
@throws SecurityException If a security manager is present and
        it denies <tt>RuntimePermission(\"preferences\")</tt>.
@see    RuntimePermission
"
      end

      operation 9411458 "Preferences"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole constructor. (For invocation by subclass constructors, typically
implicit.)
"
      end

      operation 9411586 "put"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the specified value with the specified key in this
preference node.

@param key key with which the specified value is to be associated.
@param value value to be associated with the specified key.
@throws NullPointerException if key or value is <tt>null</tt>.
@throws IllegalArgumentException if <tt>key.length()</tt> exceeds
      <tt>MAX_KEY_LENGTH</tt> or if <tt>value.length</tt> exceeds
      <tt>MAX_VALUE_LENGTH</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9411714 "get"
	abstract public return_type class_ref 128130 // String
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "def" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value associated with the specified key in this preference
node.  Returns the specified default if there is no value associated
with the key, or the backing store is inaccessible.

<p>Some implementations may store default values in their backing
stores.  If there is no value associated with the specified key
but there is such a <i>stored default</i>, it is returned in
preference to the specified default.

@param key key whose associated value is to be returned.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>.
@return the value associated with <tt>key</tt>, or <tt>def</tt>
        if no value is associated with <tt>key</tt>, or the backing
        store is inaccessible.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.  (A
        <tt>null</tt> value for <tt>def</tt> <i>is</i> permitted.)
"
      end

      operation 9411842 "remove"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the value associated with the specified key in this preference
node, if any.

<p>If this implementation supports <i>stored defaults</i>, and there is
such a default for the specified preference, the stored default will be
\"exposed\" by this call, in the sense that it will be returned
by a succeeding call to <tt>get</tt>.

@param key key whose mapping is to be removed from the preference node.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9411970 "clear"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the preferences (key-value associations) in this
preference node.  This call has no effect on any descendants
of this node.

<p>If this implementation supports <i>stored defaults</i>, and this
node in the preferences hierarchy contains any such defaults,
the stored defaults will be \"exposed\" by this call, in the sense that
they will be returned by succeeding calls to <tt>get</tt>.

@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #removeNode()
"
      end

      operation 9412098 "putInt"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "value" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates a string representing the specified int value with the
specified key in this preference node.  The associated string is the
one that would be returned if the int value were passed to
{@link Integer#toString(int)}.  This method is intended for use in
conjunction with {@link #getInt}.

@param key key with which the string form of value is to be associated.
@param value value whose string form is to be associated with key.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
@throws IllegalArgumentException if <tt>key.length()</tt> exceeds
        <tt>MAX_KEY_LENGTH</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #getInt(String,int)
"
      end

      operation 9412226 "getInt"
	abstract public explicit_return_type "int"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "def" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the int value represented by the string associated with the
specified key in this preference node.  The string is converted to
an integer as by {@link Integer#parseInt(String)}.  Returns the
specified default if there is no value associated with the key,
the backing store is inaccessible, or if
<tt>Integer.parseInt(String)</tt> would throw a {@link
NumberFormatException} if the associated value were passed.  This
method is intended for use in conjunction with {@link #putInt}.

<p>If the implementation supports <i>stored defaults</i> and such a
default exists, is accessible, and could be converted to an int
with <tt>Integer.parseInt</tt>, this int is returned in preference to
the specified default.

@param key key whose associated value is to be returned as an int.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>
       or the associated value cannot be interpreted as an int,
       or the backing store is inaccessible.
@return the int value represented by the string associated with
        <tt>key</tt> in this preference node, or <tt>def</tt> if the
        associated value does not exist or cannot be interpreted as
        an int.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
@see #putInt(String,int)
@see #get(String,String)
"
      end

      operation 9412354 "putLong"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "value" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates a string representing the specified long value with the
specified key in this preference node.  The associated string is the
one that would be returned if the long value were passed to
{@link Long#toString(long)}.  This method is intended for use in
conjunction with {@link #getLong}.

@param key key with which the string form of value is to be associated.
@param value value whose string form is to be associated with key.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
@throws IllegalArgumentException if <tt>key.length()</tt> exceeds
        <tt>MAX_KEY_LENGTH</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #getLong(String,long)
"
      end

      operation 9412482 "getLong"
	abstract public explicit_return_type "long"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "def" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the long value represented by the string associated with the
specified key in this preference node.  The string is converted to
a long as by {@link Long#parseLong(String)}.  Returns the
specified default if there is no value associated with the key,
the backing store is inaccessible, or if
<tt>Long.parseLong(String)</tt> would throw a {@link
NumberFormatException} if the associated value were passed.  This
method is intended for use in conjunction with {@link #putLong}.

<p>If the implementation supports <i>stored defaults</i> and such a
default exists, is accessible, and could be converted to a long
with <tt>Long.parseLong</tt>, this long is returned in preference to
the specified default.

@param key key whose associated value is to be returned as a long.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>
       or the associated value cannot be interpreted as a long,
       or the backing store is inaccessible.
@return the long value represented by the string associated with
        <tt>key</tt> in this preference node, or <tt>def</tt> if the
        associated value does not exist or cannot be interpreted as
        a long.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
@see #putLong(String,long)
@see #get(String,String)
"
      end

      operation 9412610 "putBoolean"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates a string representing the specified boolean value with the
specified key in this preference node.  The associated string is
<tt>\"true\"</tt> if the value is true, and <tt>\"false\"</tt> if it is
false.  This method is intended for use in conjunction with
{@link #getBoolean}.

@param key key with which the string form of value is to be associated.
@param value value whose string form is to be associated with key.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
@throws IllegalArgumentException if <tt>key.length()</tt> exceeds
        <tt>MAX_KEY_LENGTH</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #getBoolean(String,boolean)
@see #get(String,String)
"
      end

      operation 9412738 "getBoolean"
	abstract public explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "def" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the boolean value represented by the string associated with the
specified key in this preference node.  Valid strings
are <tt>\"true\"</tt>, which represents true, and <tt>\"false\"</tt>, which
represents false.  Case is ignored, so, for example, <tt>\"TRUE\"</tt>
and <tt>\"False\"</tt> are also valid.  This method is intended for use in
conjunction with {@link #putBoolean}.

<p>Returns the specified default if there is no value
associated with the key, the backing store is inaccessible, or if the
associated value is something other than <tt>\"true\"</tt> or
<tt>\"false\"</tt>, ignoring case.

<p>If the implementation supports <i>stored defaults</i> and such a
default exists and is accessible, it is used in preference to the
specified default, unless the stored default is something other than
<tt>\"true\"</tt> or <tt>\"false\"</tt>, ignoring case, in which case the
specified default is used.

@param key key whose associated value is to be returned as a boolean.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>
       or the associated value cannot be interpreted as a boolean,
       or the backing store is inaccessible.
@return the boolean value represented by the string associated with
        <tt>key</tt> in this preference node, or <tt>def</tt> if the
        associated value does not exist or cannot be interpreted as
        a boolean.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
@see #get(String,String)
@see #putBoolean(String,boolean)
"
      end

      operation 9412866 "putFloat"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "value" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates a string representing the specified float value with the
specified key in this preference node.  The associated string is the
one that would be returned if the float value were passed to
{@link Float#toString(float)}.  This method is intended for use in
conjunction with {@link #getFloat}.

@param key key with which the string form of value is to be associated.
@param value value whose string form is to be associated with key.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
@throws IllegalArgumentException if <tt>key.length()</tt> exceeds
        <tt>MAX_KEY_LENGTH</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #getFloat(String,float)
"
      end

      operation 9412994 "getFloat"
	abstract public explicit_return_type "float"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "def" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the float value represented by the string associated with the
specified key in this preference node.  The string is converted to an
integer as by {@link Float#parseFloat(String)}.  Returns the specified
default if there is no value associated with the key, the backing store
is inaccessible, or if <tt>Float.parseFloat(String)</tt> would throw a
{@link NumberFormatException} if the associated value were passed.
This method is intended for use in conjunction with {@link #putFloat}.

<p>If the implementation supports <i>stored defaults</i> and such a
default exists, is accessible, and could be converted to a float
with <tt>Float.parseFloat</tt>, this float is returned in preference to
the specified default.

@param key key whose associated value is to be returned as a float.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>
       or the associated value cannot be interpreted as a float,
       or the backing store is inaccessible.
@return the float value represented by the string associated with
        <tt>key</tt> in this preference node, or <tt>def</tt> if the
        associated value does not exist or cannot be interpreted as
        a float.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
@see #putFloat(String,float)
@see #get(String,String)
"
      end

      operation 9413122 "putDouble"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "value" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates a string representing the specified double value with the
specified key in this preference node.  The associated string is the
one that would be returned if the double value were passed to
{@link Double#toString(double)}.  This method is intended for use in
conjunction with {@link #getDouble}.

@param key key with which the string form of value is to be associated.
@param value value whose string form is to be associated with key.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
@throws IllegalArgumentException if <tt>key.length()</tt> exceeds
        <tt>MAX_KEY_LENGTH</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #getDouble(String,double)
"
      end

      operation 9413250 "getDouble"
	abstract public explicit_return_type "double"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param in name "def" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the double value represented by the string associated with the
specified key in this preference node.  The string is converted to an
integer as by {@link Double#parseDouble(String)}.  Returns the specified
default if there is no value associated with the key, the backing store
is inaccessible, or if <tt>Double.parseDouble(String)</tt> would throw a
{@link NumberFormatException} if the associated value were passed.
This method is intended for use in conjunction with {@link #putDouble}.

<p>If the implementation supports <i>stored defaults</i> and such a
default exists, is accessible, and could be converted to a double
with <tt>Double.parseDouble</tt>, this double is returned in preference
to the specified default.

@param key key whose associated value is to be returned as a double.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>
       or the associated value cannot be interpreted as a double,
       or the backing store is inaccessible.
@return the double value represented by the string associated with
        <tt>key</tt> in this preference node, or <tt>def</tt> if the
        associated value does not exist or cannot be interpreted as
        a double.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
@see #putDouble(String,double)
@see #get(String,String)
"
      end

      operation 9413378 "putByteArray"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" explicit_type "byte"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates a string representing the specified byte array with the
specified key in this preference node.  The associated string is
the <i>Base64</i> encoding of the byte array, as defined in <a
href=http://www.ietf.org/rfc/rfc2045.txt>RFC 2045</a>, Section 6.8,
with one minor change: the string will consist solely of characters
from the <i>Base64 Alphabet</i>; it will not contain any newline
characters.  Note that the maximum length of the byte array is limited
to three quarters of <tt>MAX_VALUE_LENGTH</tt> so that the length
of the Base64 encoded String does not exceed <tt>MAX_VALUE_LENGTH</tt>.
This method is intended for use in conjunction with
{@link #getByteArray}.

@param key key with which the string form of value is to be associated.
@param value value whose string form is to be associated with key.
@throws NullPointerException if key or value is <tt>null</tt>.
@throws IllegalArgumentException if key.length() exceeds MAX_KEY_LENGTH
        or if value.length exceeds MAX_VALUE_LENGTH*3/4.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #getByteArray(String,byte[])
@see #get(String,String)
"
      end

      operation 9413506 "getByteArray"
	abstract public explicit_return_type "byte"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "def" explicit_type "byte"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the byte array value represented by the string associated with
the specified key in this preference node.  Valid strings are
<i>Base64</i> encoded binary data, as defined in <a
href=http://www.ietf.org/rfc/rfc2045.txt>RFC 2045</a>, Section 6.8,
with one minor change: the string must consist solely of characters
from the <i>Base64 Alphabet</i>; no newline characters or
extraneous characters are permitted.  This method is intended for use
in conjunction with {@link #putByteArray}.

<p>Returns the specified default if there is no value
associated with the key, the backing store is inaccessible, or if the
associated value is not a valid Base64 encoded byte array
(as defined above).

<p>If the implementation supports <i>stored defaults</i> and such a
default exists and is accessible, it is used in preference to the
specified default, unless the stored default is not a valid Base64
encoded byte array (as defined above), in which case the
specified default is used.

@param key key whose associated value is to be returned as a byte array.
@param def the value to be returned in the event that this
       preference node has no value associated with <tt>key</tt>
       or the associated value cannot be interpreted as a byte array,
       or the backing store is inaccessible.
@return the byte array value represented by the string associated with
        <tt>key</tt> in this preference node, or <tt>def</tt> if the
        associated value does not exist or cannot be interpreted as
        a byte array.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@throws NullPointerException if <tt>key</tt> is <tt>null</tt>.  (A
        <tt>null</tt> value for <tt>def</tt> <i>is</i> permitted.)
@see #get(String,String)
@see #putByteArray(String,byte[])
"
      end

      operation 9413634 "keys"
	abstract public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all of the keys that have an associated value in this
preference node.  (The returned array will be of size zero if
this node has no preferences.)

<p>If the implementation supports <i>stored defaults</i> and there
are any such defaults at this node that have not been overridden,
by explicit preferences, the defaults are returned in the array in
addition to any explicit preferences.

@return an array of the keys that have an associated value in this
        preference node.
@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9413762 "childrenNames"
	abstract public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the names of the children of this preference node, relative to
this node.  (The returned array will be of size zero if this node has
no children.)

@return the names of the children of this preference node.
@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9413890 "parent"
	abstract public return_type class_ref 1142018 // Preferences
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent of this preference node, or <tt>null</tt> if this is
the root.

@return the parent of this preference node.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9414018 "node"
	abstract public return_type class_ref 1142018 // Preferences
	nparams 1
	  param inout name "pathName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the named preference node in the same tree as this node,
creating it and any of its ancestors if they do not already exist.
Accepts a relative or absolute path name.  Relative path names
(which do not begin with the slash character <tt>('/')</tt>) are
interpreted relative to this preference node.

<p>If the returned node did not exist prior to this call, this node and
any ancestors that were created by this call are not guaranteed
to become permanent until the <tt>flush</tt> method is called on
the returned node (or one of its ancestors or descendants).

@param pathName the path name of the preference node to return.
@return the specified preference node.
@throws IllegalArgumentException if the path name is invalid (i.e.,
        it contains multiple consecutive slash characters, or ends
        with a slash character and is more than one character long).
@throws NullPointerException if path name is <tt>null</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #flush()
"
      end

      operation 9414146 "nodeExists"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "pathName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the named preference node exists in the same tree
as this node.  Relative path names (which do not begin with the slash
character <tt>('/')</tt>) are interpreted relative to this preference
node.

<p>If this node (or an ancestor) has already been removed with the
{@link #removeNode()} method, it <i>is</i> legal to invoke this method,
but only with the path name <tt>\"\"</tt>; the invocation will return
<tt>false</tt>.  Thus, the idiom <tt>p.nodeExists(\"\")</tt> may be
used to test whether <tt>p</tt> has been removed.

@param pathName the path name of the node whose existence
       is to be checked.
@return true if the specified node exists.
@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
@throws IllegalArgumentException if the path name is invalid (i.e.,
        it contains multiple consecutive slash characters, or ends
        with a slash character and is more than one character long).
@throws NullPointerException if path name is <tt>null</tt>.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method and
        <tt>pathName</tt> is not the empty string (<tt>\"\"</tt>).
"
      end

      operation 9414274 "removeNode"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes this preference node and all of its descendants, invalidating
any preferences contained in the removed nodes.  Once a node has been
removed, attempting any method other than {@link #name()},
{@link #absolutePath()}, {@link #isUserNode()}, {@link #flush()} or
{@link #node(String) nodeExists(\"\")} on the corresponding
<tt>Preferences</tt> instance will fail with an
<tt>IllegalStateException</tt>.  (The methods defined on {@link Object}
can still be invoked on a node after it has been removed; they will not
throw <tt>IllegalStateException</tt>.)

<p>The removal is not guaranteed to be persistent until the
<tt>flush</tt> method is called on this node (or an ancestor).

<p>If this implementation supports <i>stored defaults</i>, removing a
node exposes any stored defaults at or below this node.  Thus, a
subsequent call to <tt>nodeExists</tt> on this node's path name may
return <tt>true</tt>, and a subsequent call to <tt>node</tt> on this
path name may return a (different) <tt>Preferences</tt> instance
representing a non-empty collection of preferences and/or children.

@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
@throws IllegalStateException if this node (or an ancestor) has already
        been removed with the {@link #removeNode()} method.
@throws UnsupportedOperationException if this method is invoked on
        the root node.
@see #flush()
"
      end

      operation 9414402 "name"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this preference node's name, relative to its parent.

@return this preference node's name, relative to its parent.
"
      end

      operation 9414530 "absolutePath"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this preference node's absolute path name.

@return this preference node's absolute path name.
"
      end

      operation 9414658 "isUserNode"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this preference node is in the user
preference tree, <tt>false</tt> if it's in the system preference tree.

@return <tt>true</tt> if this preference node is in the user
        preference tree, <tt>false</tt> if it's in the system
        preference tree.
"
      end

      operation 9414786 "toString"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this preferences node,
as if computed by the expression:<tt>(this.isUserNode() ? \"User\" :
\"System\") + \" Preference Node: \" + this.absolutePath()</tt>.
"
      end

      operation 9414914 "flush"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forces any changes in the contents of this preference node and its
descendants to the persistent store.  Once this method returns
successfully, it is safe to assume that all changes made in the
subtree rooted at this node prior to the method invocation have become
permanent.

<p>Implementations are free to flush changes into the persistent store
at any time.  They do not need to wait for this method to be called.

<p>When a flush occurs on a newly created node, it is made persistent,
as are any ancestors (and descendants) that have yet to be made
persistent.  Note however that any preference value changes in
ancestors are <i>not</i> guaranteed to be made persistent.

<p> If this method is invoked on a node that has been removed with
the {@link #removeNode()} method, flushSpi() is invoked on this node,
but not on others.

@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
@see    #sync()
"
      end

      operation 9415042 "sync"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that future reads from this preference node and its
descendants reflect any changes that were committed to the persistent
store (from any VM) prior to the <tt>sync</tt> invocation.  As a
side-effect, forces any changes in the contents of this preference node
and its descendants to the persistent store, as if the <tt>flush</tt>
method had been invoked on this node.

@throws BackingStoreException if this operation cannot be completed
        due to a failure in the backing store, or inability to
        communicate with it.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see    #flush()
"
      end

      operation 9415170 "addPreferenceChangeListener"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "pcl" type class_ref 1142402 // PreferenceChangeListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the specified listener to receive <i>preference change
events</i> for this preference node.  A preference change event is
generated when a preference is added to this node, removed from this
node, or when the value associated with a preference is changed.
(Preference change events are <i>not</i> generated by the {@link
#removeNode()} method, which generates a <i>node change event</i>.
Preference change events <i>are</i> generated by the <tt>clear</tt>
method.)

<p>Events are only guaranteed for changes made within the same JVM
as the registered listener, though some implementations may generate
events for changes made outside this JVM.  Events may be generated
before the changes have been made persistent.  Events are not generated
when preferences are modified in descendants of this node; a caller
desiring such events must register with each descendant.

@param pcl The preference change listener to add.
@throws NullPointerException if <tt>pcl</tt> is null.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #removePreferenceChangeListener(PreferenceChangeListener)
@see #addNodeChangeListener(NodeChangeListener)
"
      end

      operation 9415298 "removePreferenceChangeListener"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "pcl" type class_ref 1142402 // PreferenceChangeListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified preference change listener, so it no longer
receives preference change events.

@param pcl The preference change listener to remove.
@throws IllegalArgumentException if <tt>pcl</tt> was not a registered
        preference change listener on this node.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #addPreferenceChangeListener(PreferenceChangeListener)
"
      end

      operation 9415426 "addNodeChangeListener"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "ncl" type class_ref 1142530 // NodeChangeListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the specified listener to receive <i>node change events</i>
for this node.  A node change event is generated when a child node is
added to or removed from this node.  (A single {@link #removeNode()}
invocation results in multiple <i>node change events</i>, one for every
node in the subtree rooted at the removed node.)

<p>Events are only guaranteed for changes made within the same JVM
as the registered listener, though some implementations may generate
events for changes made outside this JVM.  Events may be generated
before the changes have become permanent.  Events are not generated
when indirect descendants of this node are added or removed; a
caller desiring such events must register with each descendant.

<p>Few guarantees can be made regarding node creation.  Because nodes
are created implicitly upon access, it may not be feasible for an
implementation to determine whether a child node existed in the backing
store prior to access (for example, because the backing store is
unreachable or cached information is out of date).  Under these
circumstances, implementations are neither required to generate node
change events nor prohibited from doing so.

@param ncl The <tt>NodeChangeListener</tt> to add.
@throws NullPointerException if <tt>ncl</tt> is null.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #removeNodeChangeListener(NodeChangeListener)
@see #addPreferenceChangeListener(PreferenceChangeListener)
"
      end

      operation 9415554 "removeNodeChangeListener"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "ncl" type class_ref 1142530 // NodeChangeListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified <tt>NodeChangeListener</tt>, so it no longer
receives change events.

@param ncl The <tt>NodeChangeListener</tt> to remove.
@throws IllegalArgumentException if <tt>ncl</tt> was not a registered
        <tt>NodeChangeListener</tt> on this node.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see #addNodeChangeListener(NodeChangeListener)
"
      end

      operation 9415682 "exportNode"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "os" type class_ref 151298 // OutputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emits on the specified output stream an XML document representing all
of the preferences contained in this node (but not its descendants).
This XML document is, in effect, an offline backup of the node.

<p>The XML document will have the following DOCTYPE declaration:
<pre>{@code
<!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\">
}</pre>
The UTF-8 character encoding will be used.

<p>This method is an exception to the general rule that the results of
concurrently executing multiple methods in this class yields
results equivalent to some serial execution.  If the preferences
at this node are modified concurrently with an invocation of this
method, the exported preferences comprise a \"fuzzy snapshot\" of the
preferences contained in the node; some of the concurrent modifications
may be reflected in the exported data while others may not.

@param os the output stream on which to emit the XML document.
@throws IOException if writing to the specified output stream
        results in an <tt>IOException</tt>.
@throws BackingStoreException if preference data cannot be read from
        backing store.
@see    #importPreferences(InputStream)
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
"
      end

      operation 9415810 "exportSubtree"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "os" type class_ref 151298 // OutputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 1142274 // BackingStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emits an XML document representing all of the preferences contained
in this node and all of its descendants.  This XML document is, in
effect, an offline backup of the subtree rooted at the node.

<p>The XML document will have the following DOCTYPE declaration:
<pre>{@code
<!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\">
}</pre>
The UTF-8 character encoding will be used.

<p>This method is an exception to the general rule that the results of
concurrently executing multiple methods in this class yields
results equivalent to some serial execution.  If the preferences
or nodes in the subtree rooted at this node are modified concurrently
with an invocation of this method, the exported preferences comprise a
\"fuzzy snapshot\" of the subtree; some of the concurrent modifications
may be reflected in the exported data while others may not.

@param os the output stream on which to emit the XML document.
@throws IOException if writing to the specified output stream
        results in an <tt>IOException</tt>.
@throws BackingStoreException if preference data cannot be read from
        backing store.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link #removeNode()} method.
@see    #importPreferences(InputStream)
@see    #exportNode(OutputStream)
"
      end

      operation 9415938 "importPreferences"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "is" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 1142658 // InvalidPreferencesFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Imports all of the preferences represented by the XML document on the
specified input stream.  The document may represent user preferences or
system preferences.  If it represents user preferences, the preferences
will be imported into the calling user's preference tree (even if they
originally came from a different user's preference tree).  If any of
the preferences described by the document inhabit preference nodes that
do not exist, the nodes will be created.

<p>The XML document must have the following DOCTYPE declaration:
<pre>{@code
<!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\">
}</pre>
(This method is designed for use in conjunction with
{@link #exportNode(OutputStream)} and
{@link #exportSubtree(OutputStream)}.

<p>This method is an exception to the general rule that the results of
concurrently executing multiple methods in this class yields
results equivalent to some serial execution.  The method behaves
as if implemented on top of the other public methods in this class,
notably {@link #node(String)} and {@link #put(String, String)}.

@param is the input stream from which to read the XML document.
@throws IOException if reading from the specified input stream
        results in an <tt>IOException</tt>.
@throws InvalidPreferencesFormatException Data on input stream does not
        constitute a valid XML document with the mandated document type.
@throws SecurityException If a security manager is present and
        it denies <tt>RuntimePermission(\"preferences\")</tt>.
@see    RuntimePermission
"
      end
    end

    class 1142146 "PreferencesFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A factory object that generates Preferences objects.  Providers of
new {@link Preferences} implementations should provide corresponding
<tt>PreferencesFactory</tt> implementations so that the new
<tt>Preferences</tt> implementation can be installed in place of the
platform-specific default implementation.

<p><strong>This class is for <tt>Preferences</tt> implementers only.
Normal users of the <tt>Preferences</tt> facility should have no need to
consult this documentation.</strong>

@author  Josh Bloch
@see     Preferences
@since   1.4
"
      operation 9431170 "systemRoot"
	public return_type class_ref 1142018 // Preferences
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the system root preference node.  (Multiple calls on this
method will return the same object reference.)
@return the system root preference node
"
      end

      operation 9431298 "userRoot"
	public return_type class_ref 1142018 // Preferences
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the user root preference node corresponding to the calling
user.  In a server, the returned value will typically depend on
some implicit client-context.
@return the user root preference node corresponding to the calling
user
"
      end
    end

    class 1142274 "BackingStoreException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown to indicate that a preferences operation could not complete because
of a failure in the backing store, or a failure to contact the backing
store.

@author  Josh Bloch
@since   1.4
"
      classrelation 3689346 // <generalisation>
	relation 3689346 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3689346 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      operation 9424514 "BackingStoreException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a BackingStoreException with the specified detail message.

@param s the detail message.
"
      end

      operation 9424642 "BackingStoreException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a BackingStoreException with the specified cause.

@param cause the cause
"
      end

      attribute 2194306 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 859796500401108469L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1142402 "PreferenceChangeListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A listener for receiving preference change events.

@author  Josh Bloch
@see Preferences
@see PreferenceChangeEvent
@see NodeChangeListener
@since   1.4
"
      classrelation 3693186 // <generalisation>
	relation 3693186 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3693186 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 9433090 "preferenceChange"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evt" type class_ref 1144194 // PreferenceChangeEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets called when a preference is added, removed or when
its value is changed.
<p>
@param evt A PreferenceChangeEvent object describing the event source
         and the preference that has changed.
"
      end
    end

    class 1142530 "NodeChangeListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A listener for receiving preference node change events.

@author  Josh Bloch
@see     Preferences
@see     NodeChangeEvent
@see     PreferenceChangeListener
@since   1.4
"
      classrelation 3692674 // <generalisation>
	relation 3692674 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3692674 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 9432066 "childAdded"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evt" type class_ref 1142914 // NodeChangeEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets called when a child node is added.

@param evt A node change event object describing the parent
           and child node.
"
      end

      operation 9432194 "childRemoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evt" type class_ref 1142914 // NodeChangeEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets called when a child node is removed.

@param evt A node change event object describing the parent
           and child node.
"
      end
    end

    class 1142658 "InvalidPreferencesFormatException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown to indicate that an operation could not complete because
the input did not conform to the appropriate XML document type
for a collection of preferences, as per the {@link Preferences}
specification.

@author  Josh Bloch
@see     Preferences
@since   1.4
"
      classrelation 3692546 // <generalisation>
	relation 3692546 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3692546 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      operation 9431682 "InvalidPreferencesFormatException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InvalidPreferencesFormatException with the specified
cause.

@param  cause the cause (which is saved for later retrieval by the
        {@link Throwable#getCause()} method).
"
      end

      operation 9431810 "InvalidPreferencesFormatException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InvalidPreferencesFormatException with the specified
detail message.

@param   message   the detail message. The detail message is saved for
         later retrieval by the {@link Throwable#getMessage()} method.
"
      end

      operation 9431938 "InvalidPreferencesFormatException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InvalidPreferencesFormatException with the specified
detail message and cause.

@param  message   the detail message. The detail message is saved for
        later retrieval by the {@link Throwable#getMessage()} method.
@param  cause the cause (which is saved for later retrieval by the
        {@link Throwable#getCause()} method).
"
      end

      attribute 2197634 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -791715184232119669L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1142914 "NodeChangeEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An event emitted by a <tt>Preferences</tt> node to indicate that
a child of that node has been added or removed.<p>

Note, that although NodeChangeEvent inherits Serializable interface from
java.util.EventObject, it is not intended to be Serializable. Appropriate
serialization methods are implemented to throw NotSerializableException.

@author  Josh Bloch
@see     Preferences
@see     NodeChangeListener
@see     PreferenceChangeEvent
@since   1.4
@serial  exclude
"
      classrelation 3688578 // <generalisation>
	relation 3688578 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3688578 // <generalisation>
	  b parent class_ref 525698 // EventObject
      end

      classrelation 3688706 // child (<unidirectional association>)
	relation 3688706 --->
	  a role_name "child" private
	    comment "
The node that was added or removed.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3688706 // child (<unidirectional association>)
	  b parent class_ref 1142018 // Preferences
      end

      operation 9422466 "NodeChangeEvent"
	public explicit_return_type ""
	nparams 2
	  param inout name "parent" type class_ref 1142018 // Preferences
	  param inout name "child" type class_ref 1142018 // Preferences
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>NodeChangeEvent</code> instance.

@param parent  The parent of the node that was added or removed.
@param child   The node that was added or removed.
"
      end

      operation 9422594 "getParent"
	public return_type class_ref 1142018 // Preferences
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent of the node that was added or removed.

@return  The parent Preferences node whose child was added or removed
"
      end

      operation 9422722 "getChild"
	public return_type class_ref 1142018 // Preferences
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the node that was added or removed.

@return  The node that was added or removed.
"
      end

      operation 9422850 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 925442 // NotSerializableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws NotSerializableException, since NodeChangeEvent objects are not
intended to be serializable.
"
      end

      operation 9422978 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 925442 // NotSerializableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws NotSerializableException, since NodeChangeEvent objects are not
intended to be serializable.
"
      end

      attribute 2193922 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8068949086596572957L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Defined so that this class isn't flagged as a potential problem when
 searches for missing serialVersionUID fields are done.
"
      end
    end

    class 1143298 "Base64"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Static methods for translating Base64 encoded strings to byte arrays
and vice-versa.

@author  Josh Bloch
@see     Preferences
@since   1.4
"
      operation 9424770 "byteArrayToBase64"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param inout name "a" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the specified byte array into a Base64 string as per
Preferences.put(byte[]).
"
      end

      operation 9424898 "byteArrayToAltBase64"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param inout name "a" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the specified byte array into an \"alternate representation\"
Base64 string.  This non-standard variant uses an alphabet that does
not contain the uppercase alphabetic characters, which makes it
suitable for use in situations where case-folding occurs.
"
      end

      operation 9425026 "byteArrayToBase64"
	class_operation private return_type class_ref 128130 // String
	nparams 2
	  param inout name "a" explicit_type "byte"
	multiplicity "[]"
	  param inout name "alternate" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2194434 "intToBase64"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " {
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
        'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
        'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This array is a lookup table that translates 6-bit positive integer
index values into their \"Base64 Alphabet\" equivalents as specified
in Table 1 of RFC 2045.

"
      end

      attribute 2194562 "intToAltBase64"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " {
        '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', ',', '-', '.', ':',
        ';', '<', '>', '@', '[', ']', '^',  '`', '_', '{', '|', '}', '~',
        'a', 'b', 'c', 'd', 'e', 'f', 'g',  'h', 'i', 'j', 'k', 'l', 'm',
        'n', 'o', 'p', 'q', 'r', 's', 't',  'u', 'v', 'w', 'x', 'y', 'z',
        '0', '1', '2', '3', '4', '5', '6',  '7', '8', '9', '+', '?'
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This array is a lookup table that translates 6-bit positive integer
index values into their \"Alternate Base64 Alphabet\" equivalents.
This is NOT the real Base64 Alphabet as per in Table 1 of RFC 2045.
This alternate alphabet does not use the capital letters.  It is
designed for use in environments where \"case folding\" occurs.

"
      end

      operation 9425154 "base64ToByteArray"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the specified Base64 string (as per Preferences.get(byte[]))
into a byte array.

@throw IllegalArgumentException if <tt>s</tt> is not a valid Base64
       string.
"
      end

      operation 9425282 "altBase64ToByteArray"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the specified \"alternate representation\" Base64 string
into a byte array.

@throw IllegalArgumentException or ArrayOutOfBoundsException
       if <tt>s</tt> is not a valid alternate representation
       Base64 string.
"
      end

      operation 9425410 "base64ToByteArray"
	class_operation private explicit_return_type "byte"
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "alternate" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9425538 "base64toInt"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "c" explicit_type "char"
	  param inout name "alphaToInt" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the specified character, which is assumed to be in the
\"Base 64 Alphabet\" into its equivalent 6-bit positive integer.

@throw IllegalArgumentException or ArrayOutOfBoundsException if
       c is not in the Base64 Alphabet.
"
      end

      attribute 2194690 "base64ToInt"
	class_attribute const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value " {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54,
        55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4,
        5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34,
        35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This array is a lookup table that translates unicode characters
drawn from the \"Base64 Alphabet\" (as specified in Table 1 of RFC 2045)
into their 6-bit positive integer equivalents.  Characters that
are not in the Base64 alphabet but fall within the bounds of the
array are translated to -1.

"
      end

      attribute 2194818 "altBase64ToInt"
	class_attribute const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value " {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1,
        2, 3, 4, 5, 6, 7, 8, -1, 62, 9, 10, 11, -1 , 52, 53, 54, 55, 56, 57,
        58, 59, 60, 61, 12, 13, 14, -1, 15, 63, 16, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 17, -1, 18, 19, 21, 20, 26, 27, 28, 29, 30, 31, 32, 33,
        34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
        51, 22, 23, 24, 25
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This array is the analogue of base64ToInt, but for the nonstandard
variant that avoids the use of uppercase alphabetic characters.

"
      end

      operation 9425666 "main"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "args" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1143426 "FileSystemPreferences"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Preferences implementation for Unix.  Preferences are stored in the file
system, with one directory per preferences node.  All of the preferences
at each node are stored in a single file.  Atomic file system operations
(e.g. File.renameTo) are used to ensure integrity.  An in-memory cache of
the \"explored\" portion of the tree is maintained for performance, and
written back to the disk periodically.  File-locking is used to ensure
reasonable behavior when multiple VMs are running at the same time.
(The file lock is obtained only for sync(), flush() and removeNode().)

@author  Josh Bloch
@see     Preferences
@since   1.4
"
      classrelation 3689474 // <generalisation>
	relation 3689474 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3689474 // <generalisation>
	  b parent class_ref 1141890 // AbstractPreferences
      end

      attribute 2194946 "SYNC_INTERVAL"
	class_attribute const_attribute private explicit_type "int"
	init_value " Math.max(1,
        Integer.parseInt(
            AccessController.doPrivileged(
                new sun.security.action.GetPropertyAction(
                    \"java.util.prefs.syncInterval\", \"30\"))))"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sync interval in seconds.

"
      end

      operation 9425794 "getLogger"
	class_operation private explicit_return_type "PlatformLogger"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns logger for error messages. Backing store exceptions are logged at
WARNING level.
"
      end

      classrelation 3689602 // systemRootDir (<unidirectional association>)
	relation 3689602 --->
	  a role_name "systemRootDir" class_relation private
	    comment "
Directory for system preferences.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3689602 // systemRootDir (<unidirectional association>)
	  b parent class_ref 131970 // File
      end

      attribute 2195074 "isSystemRootWritable"
	class_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag, indicating whether systemRoot  directory is writable

"
      end

      classrelation 3689730 // userRootDir (<unidirectional association>)
	relation 3689730 --->
	  a role_name "userRootDir" class_relation private
	    comment "
Directory for user preferences.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3689730 // userRootDir (<unidirectional association>)
	  b parent class_ref 131970 // File
      end

      attribute 2195202 "isUserRootWritable"
	class_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag, indicating whether userRoot  directory is writable

"
      end

      classrelation 3689858 // userRoot (<unidirectional association>)
	relation 3689858 --->
	  a role_name "userRoot" init_value " null" class_relation package
	    comment "
The user root.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3689858 // userRoot (<unidirectional association>)
	  b parent class_ref 1142018 // Preferences
      end

      operation 9425922 "getUserRoot"
	class_operation package return_type class_ref 1142018 // Preferences
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9426050 "setupUserRoot"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3689986 // systemRoot (<unidirectional association>)
	relation 3689986 --->
	  a role_name "systemRoot" class_relation package
	    comment "
The system root.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3689986 // systemRoot (<unidirectional association>)
	  b parent class_ref 1142018 // Preferences
      end

      operation 9426178 "getSystemRoot"
	class_operation package return_type class_ref 1142018 // Preferences
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9426306 "setupSystemRoot"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2195330 "USER_READ_WRITE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0600"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unix user write/read permission

"
      end

      attribute 2195458 "USER_RW_ALL_READ"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0644"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2195586 "USER_RWX_ALL_RX"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0755"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2195714 "USER_RWX"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0700"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3690114 // userLockFile (<unidirectional association>)
	relation 3690114 --->
	  a role_name "userLockFile" class_relation package
	    comment "
The lock file for the user tree.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3690114 // userLockFile (<unidirectional association>)
	  b parent class_ref 131970 // File
      end

      classrelation 3690242 // systemLockFile (<unidirectional association>)
	relation 3690242 --->
	  a role_name "systemLockFile" class_relation package
	    comment "
The lock file for the system tree.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3690242 // systemLockFile (<unidirectional association>)
	  b parent class_ref 131970 // File
      end

      attribute 2195842 "userRootLockHandle"
	class_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unix lock handle for userRoot.
Zero, if unlocked.

"
      end

      attribute 2195970 "systemRootLockHandle"
	class_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unix lock handle for systemRoot.
Zero, if unlocked.

"
      end

      classrelation 3690370 // dir (<unidirectional association>)
	relation 3690370 --->
	  a role_name "dir" const_relation private
	    comment "
The directory representing this preference node.  There is no guarantee
that this directory exits, as another VM can delete it at any time
that it (the other VM) holds the file-lock.  While the root node cannot
be deleted, it may not yet have been created, or the underlying
directory could have been deleted accidentally.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3690370 // dir (<unidirectional association>)
	  b parent class_ref 131970 // File
      end

      classrelation 3690498 // prefsFile (<unidirectional association>)
	relation 3690498 --->
	  a role_name "prefsFile" const_relation private
	    comment "
The file representing this preference node's preferences.
The file format is undocumented, and subject to change
from release to release, but I'm sure that you can figure
it out if you try real hard.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3690498 // prefsFile (<unidirectional association>)
	  b parent class_ref 131970 // File
      end

      classrelation 3690626 // tmpFile (<unidirectional association>)
	relation 3690626 --->
	  a role_name "tmpFile" const_relation private
	    comment "
A temporary file used for saving changes to preferences.  As part of
the sync operation, changes are first saved into this file, and then
atomically renamed to prefsFile.  This results in an atomic state
change from one valid set of preferences to another.  The
the file-lock is held for the duration of this transformation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3690626 // tmpFile (<unidirectional association>)
	  b parent class_ref 131970 // File
      end

      classrelation 3690754 // userRootModFile (<unidirectional association>)
	relation 3690754 --->
	  a role_name "userRootModFile" class_relation private
	    comment "
File, which keeps track of global modifications of userRoot.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3690754 // userRootModFile (<unidirectional association>)
	  b parent class_ref 131970 // File
      end

      attribute 2196098 "isUserRootModified"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag, which indicated whether userRoot was modified by another VM

"
      end

      attribute 2196226 "userRootModTime"
	class_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Keeps track of userRoot modification time. This time is reset to
zero after UNIX reboot, and is increased by 1 second each time
userRoot is modified.

"
      end

      classrelation 3690882 // systemRootModFile (<unidirectional association>)
	relation 3690882 --->
	  a role_name "systemRootModFile" class_relation private
	    comment "
File, which keeps track of global modifications of systemRoot

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3690882 // systemRootModFile (<unidirectional association>)
	  b parent class_ref 131970 // File
      end

      attribute 2196354 "isSystemRootModified"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag, which indicates whether systemRoot was modified by another VM

"
      end

      attribute 2196482 "systemRootModTime"
	class_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Keeps track of systemRoot modification time. This time is reset to
zero after system reboot, and is increased by 1 second each time
systemRoot is modified.

"
      end

      classrelation 3691010 // prefsCache (<unidirectional association>)
	relation 3691010 --->
	  a role_name "prefsCache" init_value " null" private
	    comment "
Locally cached preferences for this node (includes uncommitted
changes).  This map is initialized with from disk when the first get or
put operation occurs on this node.  It is synchronized with the
corresponding disk file (prefsFile) by the sync operation.  The initial
value is read *without* acquiring the file-lock.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String> ${name}${value};
"
	    classrelation_ref 3691010 // prefsCache (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      attribute 2196610 "lastSyncTime"
	private explicit_type "long"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The last modification time of the file backing this node at the time
that prefCache was last synchronized (or initially read).  This
value is set *before* reading the file, so it's conservative; the
actual timestamp could be (slightly) higher.  A value of zero indicates
that we were unable to initialize prefsCache from the disk, or
have not yet attempted to do so.  (If prefsCache is non-null, it
indicates the former; if it's null, the latter.)

"
      end

      attribute 2196738 "EAGAIN"
	class_attribute const_attribute private explicit_type "int"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unix error code for locked file.

"
      end

      attribute 2196866 "EACCES"
	class_attribute const_attribute private explicit_type "int"
	init_value " 13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unix error code for denied access.

"
      end

      attribute 2196994 "LOCK_HANDLE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Used to interpret results of native functions 
"
      end

      attribute 2197122 "ERROR_CODE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 1143554 "Change"
	abstract visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 9426434 "replay"
	  abstract package explicit_return_type "void"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reapplies the change to prefsCache.
"
	end
      end

      classrelation 3691138 // changeLog (<unidirectional association>)
	relation 3691138 --->
	  a role_name "changeLog" init_value " new ArrayList<>()" const_relation package
	    comment "
A list of all uncommitted preference changes.  The elements in this
list are of type PrefChange.  If this node is concurrently modified on
disk by another VM, the two sets of changes are merged when this node
is sync'ed by overwriting our prefsCache with the preference map last
written out to disk (by the other VM), and then replaying this change
log against that map.  The resulting map is then written back
to the disk.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Change> ${name}${value};
"
	    classrelation_ref 3691138 // changeLog (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      class 1143682 "Put"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3691266 // <generalisation>
	  relation 3691266 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3691266 // <generalisation>
	    b parent class_ref 1143554 // Change
	end

	classrelation 3691394 // key (<unidirectional association>)
	  relation 3691394 --->
	    a role_name "key" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3691394 // key (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3691522 // value (<unidirectional association>)
	  relation 3691522 --->
	    a role_name "value" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3691522 // value (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 9426562 "Put"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "key" type class_ref 128130 // String
	    param inout name "value" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9426690 "replay"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1143810 "Remove"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3691650 // <generalisation>
	  relation 3691650 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3691650 // <generalisation>
	    b parent class_ref 1143554 // Change
	end

	classrelation 3691778 // key (<unidirectional association>)
	  relation 3691778 --->
	    a role_name "key" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3691778 // key (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 9426818 "Remove"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "key" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9426946 "replay"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1143938 "NodeCreate"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3691906 // <generalisation>
	  relation 3691906 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3691906 // <generalisation>
	    b parent class_ref 1143554 // Change
	end

	operation 9427074 "replay"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Performs no action, but the presence of this object in changeLog
will force the node and its ancestors to be made permanent at the
next sync.
"
	end
      end

      classrelation 3692034 // nodeCreate (<unidirectional association>)
	relation 3692034 --->
	  a role_name "nodeCreate" init_value " null" package
	    comment "
NodeCreate object for this node.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3692034 // nodeCreate (<unidirectional association>)
	  b parent class_ref 1143938 // NodeCreate
      end

      operation 9427202 "replayChanges"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replay changeLog against prefsCache.
"
      end

      classrelation 3692162 // syncTimer (<unidirectional association>)
	relation 3692162 --->
	  a role_name "syncTimer" init_value " new Timer(true)" class_relation private
	    comment " Daemon Thread"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3692162 // syncTimer (<unidirectional association>)
	  b parent class_ref 882690 // Timer
      end

      extra_member 178434 "initialization"
	
	cpp "" ""
	java "  static {
        // Add periodic timer task to periodically sync cached prefs
        syncTimer.schedule(new TimerTask() {
            public void run() {
                syncWorld();
            }
        }, SYNC_INTERVAL*1000, SYNC_INTERVAL*1000);

        // Add shutdown hook to flush cached prefs on normal termination
        AccessController.doPrivileged(new PrivilegedAction<Void>() {
            public Void run() {
                Runtime.getRuntime().addShutdownHook(new Thread() {
                    public void run() {
                        syncTimer.cancel();
                        syncWorld();
                    }
                });
                return null;
            }
        });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 9427330 "syncWorld"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2197250 "isUserNode"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9427458 "FileSystemPreferences"
	private explicit_return_type ""
	nparams 1
	  param inout name "user" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Special constructor for roots (both user and system).  This constructor
will only be called twice, by the static initializer.
"
      end

      operation 9427586 "FileSystemPreferences"
	private explicit_return_type ""
	nparams 2
	  param inout name "parent" type class_ref 1143426 // FileSystemPreferences
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new FileSystemPreferences instance with the specified
parent node and name.  This constructor, called from childSpi,
is used to make every node except for the two //roots.
"
      end

      operation 9427714 "isUserNode"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9427842 "putSpi"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9427970 "getSpi"
	protected return_type class_ref 128130 // String
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9428098 "removeSpi"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9428226 "initCacheIfNecessary"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize prefsCache if it has yet to be initialized.  When this method
returns, prefsCache will be non-null.  If the data was successfully
read from the file, lastSyncTime will be updated.  If prefsCache was
null, but it was impossible to read the file (because it didn't
exist or for any other reason) prefsCache will be initialized to an
empty, modifiable Map, and lastSyncTime remain zero.
"
      end

      operation 9428354 "loadCache"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempt to load prefsCache from the backing store.  If the attempt
succeeds, lastSyncTime will be updated (the new value will typically
correspond to the data loaded into the map, but it may be less,
if another VM is updating this node concurrently).  If the attempt
fails, a BackingStoreException is thrown and both prefsCache and
lastSyncTime are unaffected by the call.
"
      end

      operation 9428482 "writeBackCache"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempt to write back prefsCache to the backing store.  If the attempt
succeeds, lastSyncTime will be updated (the new value will correspond
exactly to the data thust written back, as we hold the file lock, which
prevents a concurrent write.  If the attempt fails, a
BackingStoreException is thrown and both the backing store (prefsFile)
and lastSyncTime will be unaffected by this call.  This call will
NEVER leave prefsFile in a corrupt state.
"
      end

      operation 9428610 "keysSpi"
	protected return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9428738 "childrenNamesSpi"
	protected return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3692290 // EMPTY_STRING_ARRAY (<unidirectional association>)
	relation 3692290 --->
	  a role_name "EMPTY_STRING_ARRAY" multiplicity "[]" init_value " new String[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3692290 // EMPTY_STRING_ARRAY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9428866 "childSpi"
	protected return_type class_ref 1141890 // AbstractPreferences
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9428994 "removeNode"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9429122 "removeNodeSpi"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called with file lock held (in addition to node locks).
"
      end

      operation 9429250 "sync"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9429378 "syncSpi"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9429506 "syncSpiPrivileged"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9429634 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9429762 "flushSpi"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9429890 "isDirChar"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified character is appropriate for use in
Unix directory names.  A character is appropriate if it's a printable
ASCII character (> 0x1f && < 0x7f) and unequal to slash ('/', 0x2f),
dot ('.', 0x2e), or underscore ('_', 0x5f).
"
      end

      operation 9430018 "dirName"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "nodeName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the directory name corresponding to the specified node name.
Generally, this is just the node name.  If the node name includes
inappropriate characters (as per isDirChar) it is translated to Base64.
with the underscore  character ('_', 0x5f) prepended.
"
      end

      operation 9430146 "byteArray"
	class_operation private explicit_return_type "byte"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translate a string into a byte array by translating each character
into two bytes, high-byte first (\"big-endian\").
"
      end

      operation 9430274 "nodeName"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "dirName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the node name corresponding to the specified directory name.
(Inverts the transformation of dirName(String).
"
      end

      operation 9430402 "lockFile"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "shared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Try to acquire the appropriate file lock (user or system).  If
the initial attempt fails, several more attempts are made using
an exponential backoff strategy.  If all attempts fail, this method
returns false.
@throws SecurityException if file access denied.
"
      end

      operation 9430530 "checkLockFile0ErrorCode"
	private explicit_return_type "void"
	nparams 1
	  param in name "errorCode" explicit_type "int"
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if unlockFile0() returned an error. Throws a SecurityException,
if access denied. Logs a warning otherwise.
"
      end

      operation 9430658 "lockFile0"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "fileName" type class_ref 128130 // String
	  param in name "permission" explicit_type "int"
	  param inout name "shared" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
	comment "Locks file using UNIX file locking.
@param fileName Absolute file name of the lock file.
@return Returns a lock handle, used to unlock the file.
"
      end

      operation 9430786 "unlockFile0"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "lockHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
	comment "Unlocks file previously locked by lockFile0().
@param lockHandle Handle to the file lock.
@return Returns zero if OK, UNIX error code if failure.
"
      end

      operation 9430914 "chmod"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "fileName" type class_ref 128130 // String
	  param in name "permission" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Changes UNIX file permissions.
"
      end

      attribute 2197378 "INIT_SLEEP_TIME"
	class_attribute private explicit_type "int"
	init_value " 50"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Initial time between lock attempts, in ms.  The time is doubled
after each failing attempt (except the first).

"
      end

      attribute 2197506 "MAX_ATTEMPTS"
	class_attribute private explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Maximum number of lock attempts.

"
      end

      operation 9431042 "unlockFile"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Release the the appropriate file lock (user or system).
@throws SecurityException if file access denied.
"
      end
    end

    class 1144066 "FileSystemPreferencesFactory"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Factory for FileSystemPreferences.  This class allows FileSystemPreferences
to be installed as the Preferences implementations via the
java.util.prefs.PreferencesFactory system property.

@author  Josh Bloch
@see     FileSystemPreferences
@see     Preferences
@since   1.4
"
      classrelation 3692418 // <realization>
	relation 3692418 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3692418 // <realization>
	  b parent class_ref 1142146 // PreferencesFactory
      end

      operation 9431426 "userRoot"
	public return_type class_ref 1142018 // Preferences
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9431554 "systemRoot"
	public return_type class_ref 1142018 // Preferences
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1144194 "PreferenceChangeEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An event emitted by a <tt>Preferences</tt> node to indicate that
a preference has been added, removed or has had its value changed.<p>

Note, that although PreferenceChangeEvent inherits Serializable interface
from EventObject, it is not intended to be Serializable. Appropriate
serialization methods are implemented to throw NotSerializableException.

@author  Josh Bloch
@see Preferences
@see PreferenceChangeListener
@see NodeChangeEvent
@since   1.4
@serial exclude
"
      classrelation 3692802 // <generalisation>
	relation 3692802 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3692802 // <generalisation>
	  b parent class_ref 525698 // EventObject
      end

      classrelation 3692930 // key (<unidirectional association>)
	relation 3692930 --->
	  a role_name "key" private
	    comment "
Key of the preference that changed.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3692930 // key (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3693058 // newValue (<unidirectional association>)
	relation 3693058 --->
	  a role_name "newValue" private
	    comment "
New value for preference, or <tt>null</tt> if it was removed.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3693058 // newValue (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9432322 "PreferenceChangeEvent"
	public explicit_return_type ""
	nparams 3
	  param inout name "node" type class_ref 1142018 // Preferences
	  param inout name "key" type class_ref 128130 // String
	  param inout name "newValue" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>PreferenceChangeEvent</code> instance.

@param node  The Preferences node that emitted the event.
@param key  The key of the preference that was changed.
@param newValue  The new value of the preference, or <tt>null</tt>
                 if the preference is being removed.
"
      end

      operation 9432450 "getNode"
	public return_type class_ref 1142018 // Preferences
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the preference node that emitted the event.

@return  The preference node that emitted the event.
"
      end

      operation 9432578 "getKey"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the key of the preference that was changed.

@return  The key of the preference that was changed.
"
      end

      operation 9432706 "getNewValue"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the new value for the preference.

@return  The new value for the preference, or <tt>null</tt> if the
         preference was removed.
"
      end

      operation 9432834 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 925442 // NotSerializableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws NotSerializableException, since NodeChangeEvent objects
are not intended to be serializable.
"
      end

      operation 9432962 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 925442 // NotSerializableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws NotSerializableException, since PreferenceChangeEvent objects
are not intended to be serializable.
"
      end

      attribute 2197762 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 793724513368024975L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Defined so that this class isn't flagged as a potential problem when
 searches for missing serialVersionUID fields are done.
"
      end
    end

    class 1144322 "XmlSupport"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "XML Support for java.util.prefs. Methods to import and export preference
nodes and subtrees.

@author  Josh Bloch and Mark Reinhold
@see     Preferences
@since   1.4
"
      classrelation 3693314 // PREFS_DTD_URI (<unidirectional association>)
	relation 3693314 --->
	  a role_name "PREFS_DTD_URI" init_value "
        \"http://java.sun.com/dtd/preferences.dtd\"" class_relation const_relation private
	    comment " The required DTD URI for exported preferences
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3693314 // PREFS_DTD_URI (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3693442 // PREFS_DTD (<unidirectional association>)
	relation 3693442 --->
	  a role_name "PREFS_DTD" init_value "
        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\" +

        \"<!-- DTD for preferences -->\"               +

        \"<!ELEMENT preferences (root) >\"             +
        \"<!ATTLIST preferences\"                      +
        \" EXTERNAL_XML_VERSION CDATA \\\"0.0\\\"  >\"     +

        \"<!ELEMENT root (map, node*) >\"              +
        \"<!ATTLIST root\"                             +
        \"          type (system|user) #REQUIRED >\"   +

        \"<!ELEMENT node (map, node*) >\"              +
        \"<!ATTLIST node\"                             +
        \"          name CDATA #REQUIRED >\"           +

        \"<!ELEMENT map (entry*) >\"                   +
        \"<!ATTLIST map\"                              +
        \"  MAP_XML_VERSION CDATA \\\"0.0\\\"  >\"         +
        \"<!ELEMENT entry EMPTY >\"                    +
        \"<!ATTLIST entry\"                            +
        \"          key CDATA #REQUIRED\"              +
        \"          value CDATA #REQUIRED >\"          " class_relation const_relation private
	    comment " The actual DTD corresponding to the URI
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3693442 // PREFS_DTD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3693570 // EXTERNAL_XML_VERSION (<unidirectional association>)
	relation 3693570 --->
	  a role_name "EXTERNAL_XML_VERSION" init_value " \"1.0\"" class_relation const_relation private
	    comment "
Version number for the format exported preferences files.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3693570 // EXTERNAL_XML_VERSION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3693698 // MAP_XML_VERSION (<unidirectional association>)
	relation 3693698 --->
	  a role_name "MAP_XML_VERSION" init_value " \"1.0\"" class_relation const_relation private
	    comment "
Version number for the internal map files.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3693698 // MAP_XML_VERSION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9433218 "export"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "os" type class_ref 151298 // OutputStream
	  param in name "p" type class_ref 1142018 // Preferences
	  param inout name "subTree" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, final ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Export the specified preferences node and, if subTree is true, all
subnodes, to the specified output stream.  Preferences are exported as
an XML document conforming to the definition in the Preferences spec.

@throws IOException if writing to the specified output stream
        results in an <tt>IOException</tt>.
@throws BackingStoreException if preference data cannot be read from
        backing store.
@throws IllegalStateException if this node (or an ancestor) has been
        removed with the {@link Preferences#removeNode()} method.
"
      end

      operation 9433346 "putPreferencesInXml"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "elt" type class_ref 648194 // Element
	  param inout name "doc" type class_ref 378626 // Document
	  param inout name "prefs" type class_ref 1142018 // Preferences
	  param inout name "subTree" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1142274 // BackingStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put the preferences in the specified Preferences node into the
specified XML element which is assumed to represent a node
in the specified XML document which is assumed to conform to
PREFS_DTD.  If subTree is true, create children of the specified
XML node conforming to all of the children of the specified
Preferences node and recurse.

@throws BackingStoreException if it is not possible to read
        the preferences or children out of the specified
        preferences node.
"
      end

      operation 9433474 "importPreferences"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "is" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 1142658 // InvalidPreferencesFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Import preferences from the specified input stream, which is assumed
to contain an XML document in the format described in the Preferences
spec.

@throws IOException if reading from the specified output stream
        results in an <tt>IOException</tt>.
@throws InvalidPreferencesFormatException Data on input stream does not
        constitute a valid XML document with the mandated document type.
"
      end

      operation 9433602 "createPrefsDoc"
	class_operation private return_type class_ref 378626 // Document
	nparams 1
	  param inout name "qname" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new prefs XML document.
"
      end

      operation 9433730 "loadPrefsDoc"
	class_operation private return_type class_ref 378626 // Document
	nparams 1
	  param inout name "in" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 379266 // SAXException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load an XML document from specified input stream, which must
have the requisite DTD URI.
"
      end

      operation 9433858 "writeDoc"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "doc" type class_ref 378626 // Document
	  param inout name "out" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write XML document to the specified output stream.
"
      end

      operation 9433986 "ImportSubtree"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "prefsNode" type class_ref 1142018 // Preferences
	  param inout name "xmlNode" type class_ref 648194 // Element
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Recursively traverse the specified preferences node and store
the described preferences into the system or current user
preferences tree, as appropriate.
"
      end

      operation 9434114 "ImportPrefs"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "prefsNode" type class_ref 1142018 // Preferences
	  param inout name "map" type class_ref 648194 // Element
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Import the preferences described by the specified XML element
(a map from a preferences document) into the specified
preferences node.
"
      end

      operation 9434242 "exportMap"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "os" type class_ref 151298 // OutputStream
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String, String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Export the specified Map<String,String> to a map document on
the specified OutputStream as per the prefs DTD.  This is used
as the internal (undocumented) format for FileSystemPrefs.

@throws IOException if writing to the specified output stream
        results in an <tt>IOException</tt>.
"
      end

      operation 9434370 "importMap"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "is" type class_ref 146434 // InputStream
	  param inout name "m" type class_ref 130178 // Map
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 1142658 // InvalidPreferencesFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String, String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Import Map from the specified input stream, which is assumed
to contain a map document as per the prefs DTD.  This is used
as the internal (undocumented) format for FileSystemPrefs.  The
key-value pairs specified in the XML document will be put into
the specified Map.  (If this Map is empty, it will contain exactly
the key-value pairs int the XML-document when this method returns.)

@throws IOException if reading from the specified output stream
        results in an <tt>IOException</tt>.
@throws InvalidPreferencesFormatException Data on input stream does not
        constitute a valid XML document with the mandated document type.
"
      end

      class 1144450 "Resolver"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3693826 // <realization>
	  relation 3693826 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3693826 // <realization>
	    b parent class_ref 619138 // EntityResolver
	end

	operation 9434498 "resolveEntity"
	  public return_type class_ref 606594 // InputSource
	  nparams 2
	    param inout name "pid" type class_ref 128130 // String
	    param inout name "sid" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 379266 // SAXException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1144578 "EH"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3693954 // <realization>
	  relation 3693954 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3693954 // <realization>
	    b parent class_ref 618114 // ErrorHandler
	end

	operation 9434626 "error"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "x" type class_ref 618242 // SAXParseException
	  nexceptions 1
	    exception class_ref 379266 // SAXException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9434754 "fatalError"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "x" type class_ref 618242 // SAXParseException
	  nexceptions 1
	    exception class_ref 379266 // SAXException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9434882 "warning"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "x" type class_ref 618242 // SAXParseException
	  nexceptions 1
	    exception class_ref 379266 // SAXException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end
  end

  deploymentview 171394 "prefs"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 823298 "Preferences"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.security.AccessController;
import java.security.Permission;
import java.security.PrivilegedAction;
import java.util.Iterator;
import java.util.ServiceLoader;
import java.util.ServiceConfigurationError;
import java.lang.RuntimePermission;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Float;
import java.lang.Double;
${definition}"
      associated_elems
	class_ref 1142018 // Preferences
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 823426 "NodeChangeEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.NotSerializableException;
${definition}"
      associated_elems
	class_ref 1142914 // NodeChangeEvent
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 823554 "AbstractPreferences"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.io.*;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Float;
import java.lang.Double;
${definition}"
      associated_elems
	class_ref 1141890 // AbstractPreferences
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 823682 "BackingStoreException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.NotSerializableException;
${definition}"
      associated_elems
	class_ref 1142274 // BackingStoreException
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 823810 "Base64"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1143298 // Base64
      end
      comment "Copyright (c) 2000, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 823938 "FileSystemPreferences"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.io.*;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.security.PrivilegedExceptionAction;
import java.security.PrivilegedActionException;
import sun.util.logging.PlatformLogger;
${definition}"
      associated_elems
	class_ref 1143426 // FileSystemPreferences
      end
      comment "Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 824066 "PreferencesFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 1142146 // PreferencesFactory
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 824194 "FileSystemPreferencesFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1144066 // FileSystemPreferencesFactory
      end
      comment "Copyright (c) 2000, 2002, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 824322 "InvalidPreferencesFormatException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.NotSerializableException;
${definition}"
      associated_elems
	class_ref 1142658 // InvalidPreferencesFormatException
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 824450 "NodeChangeListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1142530 // NodeChangeListener
      end
      comment "Copyright (c) 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 824578 "PreferenceChangeEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.NotSerializableException;
${definition}"
      associated_elems
	class_ref 1144194 // PreferenceChangeEvent
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 824706 "PreferenceChangeListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1142402 // PreferenceChangeListener
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 824834 "XmlSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.io.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import org.xml.sax.*;
import org.w3c.dom.*;
${definition}"
      associated_elems
	class_ref 1144322 // XmlSupport
      end
      comment "Copyright (c) 2002, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
