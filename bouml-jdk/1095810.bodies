class TreeMap
!!!8938370.java!!!	TreeMap()
        comparator = null;
!!!8938498.java!!!	TreeMap(inout comparator : Comparator)
        this.comparator = comparator;
!!!8938626.java!!!	TreeMap(inout m : Map)
        comparator = null;
        putAll(m);
!!!8938754.java!!!	TreeMap(inout m : SortedMap)
        comparator = m.comparator();
        try {
            buildFromSorted(m.size(), m.entrySet().iterator(), null, null);
        } catch (java.io.IOException cannotHappen) {
        } catch (ClassNotFoundException cannotHappen) {
        }
!!!8938882.java!!!	size() : int
        return size;
!!!8939010.java!!!	containsKey(inout key : Object) : boolean
        return getEntry(key) != null;
!!!8939138.java!!!	containsValue(inout value : Object) : boolean
        for (Entry<K,V> e = getFirstEntry(); e != null; e = successor(e))
            if (valEquals(value, e.value))
                return true;
        return false;
!!!8939266.java!!!	get(inout key : Object) : V
        Entry<K,V> p = getEntry(key);
        return (p==null ? null : p.value);
!!!8939394.java!!!	comparator() : Comparator
        return comparator;
!!!8939522.java!!!	firstKey() : K
        return key(getFirstEntry());
!!!8939650.java!!!	lastKey() : K
        return key(getLastEntry());
!!!8939778.java!!!	putAll(inout map : Map) : void
        int mapSize = map.size();
        if (size==0 && mapSize!=0 && map instanceof SortedMap) {
            Comparator<?> c = ((SortedMap<?,?>)map).comparator();
            if (c == comparator || (c != null && c.equals(comparator))) {
                ++modCount;
                try {
                    buildFromSorted(mapSize, map.entrySet().iterator(),
                                    null, null);
                } catch (java.io.IOException cannotHappen) {
                } catch (ClassNotFoundException cannotHappen) {
                }
                return;
            }
        }
        super.putAll(map);
!!!8939906.java!!!	getEntry(inout key : Object) : Map::Entry
        // Offload comparator-based version for sake of performance
        if (comparator != null)
            return getEntryUsingComparator(key);
        if (key == null)
            throw new NullPointerException();
        @SuppressWarnings("unchecked")
            Comparable<? super K> k = (Comparable<? super K>) key;
        Entry<K,V> p = root;
        while (p != null) {
            int cmp = k.compareTo(p.key);
            if (cmp < 0)
                p = p.left;
            else if (cmp > 0)
                p = p.right;
            else
                return p;
        }
        return null;
!!!8940034.java!!!	getEntryUsingComparator(inout key : Object) : Map::Entry
        @SuppressWarnings("unchecked")
            K k = (K) key;
        Comparator<? super K> cpr = comparator;
        if (cpr != null) {
            Entry<K,V> p = root;
            while (p != null) {
                int cmp = cpr.compare(k, p.key);
                if (cmp < 0)
                    p = p.left;
                else if (cmp > 0)
                    p = p.right;
                else
                    return p;
            }
        }
        return null;
!!!8940162.java!!!	getCeilingEntry(inout key : K) : Map::Entry
        Entry<K,V> p = root;
        while (p != null) {
            int cmp = compare(key, p.key);
            if (cmp < 0) {
                if (p.left != null)
                    p = p.left;
                else
                    return p;
            } else if (cmp > 0) {
                if (p.right != null) {
                    p = p.right;
                } else {
                    Entry<K,V> parent = p.parent;
                    Entry<K,V> ch = p;
                    while (parent != null && ch == parent.right) {
                        ch = parent;
                        parent = parent.parent;
                    }
                    return parent;
                }
            } else
                return p;
        }
        return null;
!!!8940290.java!!!	getFloorEntry(inout key : K) : Map::Entry
        Entry<K,V> p = root;
        while (p != null) {
            int cmp = compare(key, p.key);
            if (cmp > 0) {
                if (p.right != null)
                    p = p.right;
                else
                    return p;
            } else if (cmp < 0) {
                if (p.left != null) {
                    p = p.left;
                } else {
                    Entry<K,V> parent = p.parent;
                    Entry<K,V> ch = p;
                    while (parent != null && ch == parent.left) {
                        ch = parent;
                        parent = parent.parent;
                    }
                    return parent;
                }
            } else
                return p;

        }
        return null;
!!!8940418.java!!!	getHigherEntry(inout key : K) : Map::Entry
        Entry<K,V> p = root;
        while (p != null) {
            int cmp = compare(key, p.key);
            if (cmp < 0) {
                if (p.left != null)
                    p = p.left;
                else
                    return p;
            } else {
                if (p.right != null) {
                    p = p.right;
                } else {
                    Entry<K,V> parent = p.parent;
                    Entry<K,V> ch = p;
                    while (parent != null && ch == parent.right) {
                        ch = parent;
                        parent = parent.parent;
                    }
                    return parent;
                }
            }
        }
        return null;
!!!8940546.java!!!	getLowerEntry(inout key : K) : Map::Entry
        Entry<K,V> p = root;
        while (p != null) {
            int cmp = compare(key, p.key);
            if (cmp > 0) {
                if (p.right != null)
                    p = p.right;
                else
                    return p;
            } else {
                if (p.left != null) {
                    p = p.left;
                } else {
                    Entry<K,V> parent = p.parent;
                    Entry<K,V> ch = p;
                    while (parent != null && ch == parent.left) {
                        ch = parent;
                        parent = parent.parent;
                    }
                    return parent;
                }
            }
        }
        return null;
!!!8940674.java!!!	put(inout key : K, inout value : V) : V
        Entry<K,V> t = root;
        if (t == null) {
            compare(key, key); // type (and possibly null) check

            root = new Entry<>(key, value, null);
            size = 1;
            modCount++;
            return null;
        }
        int cmp;
        Entry<K,V> parent;
        // split comparator and comparable paths
        Comparator<? super K> cpr = comparator;
        if (cpr != null) {
            do {
                parent = t;
                cmp = cpr.compare(key, t.key);
                if (cmp < 0)
                    t = t.left;
                else if (cmp > 0)
                    t = t.right;
                else
                    return t.setValue(value);
            } while (t != null);
        }
        else {
            if (key == null)
                throw new NullPointerException();
            @SuppressWarnings("unchecked")
                Comparable<? super K> k = (Comparable<? super K>) key;
            do {
                parent = t;
                cmp = k.compareTo(t.key);
                if (cmp < 0)
                    t = t.left;
                else if (cmp > 0)
                    t = t.right;
                else
                    return t.setValue(value);
            } while (t != null);
        }
        Entry<K,V> e = new Entry<>(key, value, parent);
        if (cmp < 0)
            parent.left = e;
        else
            parent.right = e;
        fixAfterInsertion(e);
        size++;
        modCount++;
        return null;
!!!8940802.java!!!	remove(inout key : Object) : V
        Entry<K,V> p = getEntry(key);
        if (p == null)
            return null;

        V oldValue = p.value;
        deleteEntry(p);
        return oldValue;
!!!8940930.java!!!	clear() : void
        modCount++;
        size = 0;
        root = null;
!!!8941058.java!!!	clone() : Object
        TreeMap<?,?> clone;
        try {
            clone = (TreeMap<?,?>) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new InternalError(e);
        }

        // Put clone into "virgin" state (except for comparator)
        clone.root = null;
        clone.size = 0;
        clone.modCount = 0;
        clone.entrySet = null;
        clone.navigableKeySet = null;
        clone.descendingMap = null;

        // Initialize clone with our mappings
        try {
            clone.buildFromSorted(size, entrySet().iterator(), null, null);
        } catch (java.io.IOException cannotHappen) {
        } catch (ClassNotFoundException cannotHappen) {
        }

        return clone;
!!!8941186.java!!!	firstEntry() : Map::Entry
        return exportEntry(getFirstEntry());
!!!8941314.java!!!	lastEntry() : Map::Entry
        return exportEntry(getLastEntry());
!!!8941442.java!!!	pollFirstEntry() : Map::Entry
        Entry<K,V> p = getFirstEntry();
        Map.Entry<K,V> result = exportEntry(p);
        if (p != null)
            deleteEntry(p);
        return result;
!!!8941570.java!!!	pollLastEntry() : Map::Entry
        Entry<K,V> p = getLastEntry();
        Map.Entry<K,V> result = exportEntry(p);
        if (p != null)
            deleteEntry(p);
        return result;
!!!8941698.java!!!	lowerEntry(inout key : K) : Map::Entry
        return exportEntry(getLowerEntry(key));
!!!8941826.java!!!	lowerKey(inout key : K) : K
        return keyOrNull(getLowerEntry(key));
!!!8941954.java!!!	floorEntry(inout key : K) : Map::Entry
        return exportEntry(getFloorEntry(key));
!!!8942082.java!!!	floorKey(inout key : K) : K
        return keyOrNull(getFloorEntry(key));
!!!8942210.java!!!	ceilingEntry(inout key : K) : Map::Entry
        return exportEntry(getCeilingEntry(key));
!!!8942338.java!!!	ceilingKey(inout key : K) : K
        return keyOrNull(getCeilingEntry(key));
!!!8942466.java!!!	higherEntry(inout key : K) : Map::Entry
        return exportEntry(getHigherEntry(key));
!!!8942594.java!!!	higherKey(inout key : K) : K
        return keyOrNull(getHigherEntry(key));
!!!8942722.java!!!	keySet() : Set
        return navigableKeySet();
!!!8942850.java!!!	navigableKeySet() : NavigableSet
        KeySet<K> nks = navigableKeySet;
        return (nks != null) ? nks : (navigableKeySet = new KeySet<>(this));
!!!8942978.java!!!	descendingKeySet() : NavigableSet
        return descendingMap().navigableKeySet();
!!!8943106.java!!!	values() : Collection
        Collection<V> vs = values;
        if (vs == null) {
            vs = new Values();
            values = vs;
        }
        return vs;
!!!8943234.java!!!	entrySet() : Set
        EntrySet es = entrySet;
        return (es != null) ? es : (entrySet = new EntrySet());
!!!8943362.java!!!	descendingMap() : NavigableMap
        NavigableMap<K, V> km = descendingMap;
        return (km != null) ? km :
            (descendingMap = new DescendingSubMap<>(this,
                                                    true, null, true,
                                                    true, null, true));
!!!8943490.java!!!	subMap(inout fromKey : K, inout fromInclusive : boolean, inout toKey : K, inout toInclusive : boolean) : NavigableMap
        return new AscendingSubMap<>(this,
                                     false, fromKey, fromInclusive,
                                     false, toKey,   toInclusive);
!!!8943618.java!!!	headMap(inout toKey : K, inout inclusive : boolean) : NavigableMap
        return new AscendingSubMap<>(this,
                                     true,  null,  true,
                                     false, toKey, inclusive);
!!!8943746.java!!!	tailMap(inout fromKey : K, inout inclusive : boolean) : NavigableMap
        return new AscendingSubMap<>(this,
                                     false, fromKey, inclusive,
                                     true,  null,    true);
!!!8943874.java!!!	subMap(inout fromKey : K, inout toKey : K) : SortedMap
        return subMap(fromKey, true, toKey, false);
!!!8944002.java!!!	headMap(inout toKey : K) : SortedMap
        return headMap(toKey, false);
!!!8944130.java!!!	tailMap(inout fromKey : K) : SortedMap
        return tailMap(fromKey, true);
!!!8944258.java!!!	replace(inout key : K, inout oldValue : V, inout newValue : V) : boolean
        Entry<K,V> p = getEntry(key);
        if (p!=null && Objects.equals(oldValue, p.value)) {
            p.value = newValue;
            return true;
        }
        return false;
!!!8944386.java!!!	replace(inout key : K, inout value : V) : V
        Entry<K,V> p = getEntry(key);
        if (p!=null) {
            V oldValue = p.value;
            p.value = value;
            return oldValue;
        }
        return null;
!!!8944514.java!!!	forEach(inout action : BiConsumer) : void
        Objects.requireNonNull(action);
        int expectedModCount = modCount;
        for (Entry<K, V> e = getFirstEntry(); e != null; e = successor(e)) {
            action.accept(e.key, e.value);

            if (expectedModCount != modCount) {
                throw new ConcurrentModificationException();
            }
        }
!!!8944642.java!!!	replaceAll(inout function : BiFunction) : void
        Objects.requireNonNull(function);
        int expectedModCount = modCount;

        for (Entry<K, V> e = getFirstEntry(); e != null; e = successor(e)) {
            e.value = function.apply(e.key, e.value);

            if (expectedModCount != modCount) {
                throw new ConcurrentModificationException();
            }
        }
!!!8946306.java!!!	keyIterator() : Iterator
        return new KeyIterator(getFirstEntry());
!!!8946434.java!!!	descendingKeyIterator() : Iterator
        return new DescendingKeyIterator(getLastEntry());
!!!8951554.java!!!	compare(inout k1 : Object, inout k2 : Object) : int
        return comparator==null ? ((Comparable<? super K>)k1).compareTo((K)k2)
            : comparator.compare((K)k1, (K)k2);
!!!8951682.java!!!	valEquals(inout o1 : Object, inout o2 : Object) : boolean
        return (o1==null ? o2==null : o1.equals(o2));
!!!8951810.java!!!	exportEntry(inout e : Map::Entry) : Map::Entry
        return (e == null) ? null :
            new AbstractMap.SimpleImmutableEntry<>(e);
!!!8951938.java!!!	keyOrNull(inout e : Map::Entry) : K
        return (e == null) ? null : e.key;
!!!8952066.java!!!	key(inout e : Map::Entry) : K
        if (e==null)
            throw new NoSuchElementException();
        return e.key;
