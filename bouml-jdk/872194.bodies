class Menu
!!!6281346.java!!!	Menu()
        this("", false);
!!!6281474.java!!!	Menu(inout label : String)
        this(label, false);
!!!6281602.java!!!	Menu(inout label : String, inout tearOff : boolean)
        super(label);
        this.tearOff = tearOff;
!!!6281730.java!!!	constructComponentName() : String
        synchronized (Menu.class) {
            return base + nameCounter++;
        }
!!!6281858.java!!!	addNotify() : void
        synchronized (getTreeLock()) {
            if (peer == null)
                peer = Toolkit.getDefaultToolkit().createMenu(this);
            int nitems = getItemCount();
            for (int i = 0 ; i < nitems ; i++) {
                MenuItem mi = getItem(i);
                mi.parent = this;
                mi.addNotify();
            }
        }
!!!6281986.java!!!	removeNotify() : void
        synchronized (getTreeLock()) {
            int nitems = getItemCount();
            for (int i = 0 ; i < nitems ; i++) {
                getItem(i).removeNotify();
            }
            super.removeNotify();
        }
!!!6282114.java!!!	isTearOff() : boolean
        return tearOff;
!!!6282242.java!!!	getItemCount() : int
        return countItems();
!!!6282370.java!!!	countItems() : int
        return countItemsImpl();
!!!6282498.java!!!	countItemsImpl() : int
        return items.size();
!!!6282626.java!!!	getItem(in index : int) : MenuItem
        return getItemImpl(index);
!!!6282754.java!!!	getItemImpl(in index : int) : MenuItem
        return (MenuItem)items.elementAt(index);
!!!6282882.java!!!	add(inout mi : MenuItem) : MenuItem
        synchronized (getTreeLock()) {
            if (mi.parent != null) {
                mi.parent.remove(mi);
            }
            items.addElement(mi);
            mi.parent = this;
            MenuPeer peer = (MenuPeer)this.peer;
            if (peer != null) {
                mi.addNotify();
                peer.addItem(mi);
            }
            return mi;
        }
!!!6283010.java!!!	add(inout label : String) : void
        add(new MenuItem(label));
!!!6283138.java!!!	insert(inout menuitem : MenuItem, in index : int) : void
        synchronized (getTreeLock()) {
            if (index < 0) {
                throw new IllegalArgumentException("index less than zero.");
            }

            int nitems = getItemCount();
            Vector<MenuItem> tempItems = new Vector<>();

            /* Remove the item at index, nitems-index times
               storing them in a temporary vector in the
               order they appear on the menu.
            */
            for (int i = index ; i < nitems; i++) {
                tempItems.addElement(getItem(index));
                remove(index);
            }

            add(menuitem);

            /* Add the removed items back to the menu, they are
               already in the correct order in the temp vector.
            */
            for (int i = 0; i < tempItems.size()  ; i++) {
                add(tempItems.elementAt(i));
            }
        }
!!!6283266.java!!!	insert(inout label : String, in index : int) : void
        insert(new MenuItem(label), index);
!!!6283394.java!!!	addSeparator() : void
        add("-");
!!!6283522.java!!!	insertSeparator(in index : int) : void
        synchronized (getTreeLock()) {
            if (index < 0) {
                throw new IllegalArgumentException("index less than zero.");
            }

            int nitems = getItemCount();
            Vector<MenuItem> tempItems = new Vector<>();

            /* Remove the item at index, nitems-index times
               storing them in a temporary vector in the
               order they appear on the menu.
            */
            for (int i = index ; i < nitems; i++) {
                tempItems.addElement(getItem(index));
                remove(index);
            }

            addSeparator();

            /* Add the removed items back to the menu, they are
               already in the correct order in the temp vector.
            */
            for (int i = 0; i < tempItems.size()  ; i++) {
                add(tempItems.elementAt(i));
            }
        }
!!!6283650.java!!!	remove(in index : int) : void
        synchronized (getTreeLock()) {
            MenuItem mi = getItem(index);
            items.removeElementAt(index);
            MenuPeer peer = (MenuPeer)this.peer;
            if (peer != null) {
                peer.delItem(index);
                mi.removeNotify();
                mi.parent = null;
            }
        }
!!!6283778.java!!!	remove(inout item : MenuComponent) : void
        synchronized (getTreeLock()) {
            int index = items.indexOf(item);
            if (index >= 0) {
                remove(index);
            }
        }
!!!6283906.java!!!	removeAll() : void
        synchronized (getTreeLock()) {
            int nitems = getItemCount();
            for (int i = nitems-1 ; i >= 0 ; i--) {
                remove(i);
            }
        }
!!!6284034.java!!!	handleShortcut(inout e : KeyEvent) : boolean
        int nitems = getItemCount();
        for (int i = 0 ; i < nitems ; i++) {
            MenuItem mi = getItem(i);
            if (mi.handleShortcut(e)) {
                return true;
            }
        }
        return false;
!!!6284162.java!!!	getShortcutMenuItem(inout s : MenuShortcut) : MenuItem
        int nitems = getItemCount();
        for (int i = 0 ; i < nitems ; i++) {
            MenuItem mi = getItem(i).getShortcutMenuItem(s);
            if (mi != null) {
                return mi;
            }
        }
        return null;
!!!6284290.java!!!	shortcuts() : Enumeration
        Vector<MenuShortcut> shortcuts = new Vector<>();
        int nitems = getItemCount();
        for (int i = 0 ; i < nitems ; i++) {
            MenuItem mi = getItem(i);
            if (mi instanceof Menu) {
                Enumeration<MenuShortcut> e = ((Menu)mi).shortcuts();
                while (e.hasMoreElements()) {
                    shortcuts.addElement(e.nextElement());
                }
            } else {
                MenuShortcut ms = mi.getShortcut();
                if (ms != null) {
                    shortcuts.addElement(ms);
                }
            }
        }
        return shortcuts.elements();
!!!6284418.java!!!	deleteShortcut(inout s : MenuShortcut) : void
        int nitems = getItemCount();
        for (int i = 0 ; i < nitems ; i++) {
            getItem(i).deleteShortcut(s);
        }
!!!6284546.java!!!	writeObject(inout s : ObjectOutputStream) : void
      s.defaultWriteObject();
!!!6284674.java!!!	readObject(inout s : ObjectInputStream) : void
      // HeadlessException will be thrown from MenuComponent's readObject
      s.defaultReadObject();
      for(int i = 0; i < items.size(); i++) {
        MenuItem item = (MenuItem)items.elementAt(i);
        item.parent = this;
      }
!!!6284802.java!!!	paramString() : String
        String str = ",tearOff=" + tearOff+",isHelpMenu=" + isHelpMenu;
        return super.paramString() + str;
!!!6285058.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTMenu();
        }
        return accessibleContext;
!!!6285186.java!!!	getAccessibleChildIndex(inout child : MenuComponent) : int
        return items.indexOf(child);
