class DirectFloatBufferRS
!!!7700610.java!!!	DirectFloatBufferRS(inout db : DirectBuffer, in mark : int, in pos : int, in lim : int, in cap : int, in off : int)








        super(db, mark, pos, lim, cap, off);

!!!7700738.java!!!	slice() : FloatBuffer
        int pos = this.position();
        int lim = this.limit();
        assert (pos <= lim);
        int rem = (pos <= lim ? lim - pos : 0);
        int off = (pos << 2);
        assert (off >= 0);
        return new DirectFloatBufferRS(this, -1, 0, rem, rem, off);
!!!7700866.java!!!	duplicate() : FloatBuffer
        return new DirectFloatBufferRS(this,
                                              this.markValue(),
                                              this.position(),
                                              this.limit(),
                                              this.capacity(),
                                              0);
!!!7700994.java!!!	asReadOnlyBuffer() : FloatBuffer








        return duplicate();

!!!7701122.java!!!	put(in x : float) : FloatBuffer




        throw new ReadOnlyBufferException();

!!!7701250.java!!!	put(in i : int, in x : float) : FloatBuffer




        throw new ReadOnlyBufferException();

!!!7701378.java!!!	put(inout src : FloatBuffer) : FloatBuffer




































        throw new ReadOnlyBufferException();

!!!7701506.java!!!	put(inout src : float [[]], in offset : int, in length : int) : FloatBuffer




























        throw new ReadOnlyBufferException();

!!!7701634.java!!!	compact() : FloatBuffer












        throw new ReadOnlyBufferException();

!!!7701762.java!!!	isDirect() : boolean
        return true;
!!!7701890.java!!!	isReadOnly() : boolean
        return true;
!!!7702018.java!!!	order() : ByteOrder

        return ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN)
                ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);





