class ZoneView
!!!11710338.java!!!	ZoneView(inout elem : Element, in axis : int)
        super(elem, axis);
        loadedZones = new Vector<View>();
!!!11710466.java!!!	getMaximumZoneSize() : int
        return maxZoneSize;
!!!11710594.java!!!	setMaximumZoneSize(in size : int) : void
        maxZoneSize = size;
!!!11710722.java!!!	getMaxZonesLoaded() : int
        return maxZonesLoaded;
!!!11710850.java!!!	setMaxZonesLoaded(in mzl : int) : void
        if (mzl < 1) {
            throw new IllegalArgumentException("ZoneView.setMaxZonesLoaded must be greater than 0.");
        }
        maxZonesLoaded = mzl;
        unloadOldZones();
!!!11710978.java!!!	zoneWasLoaded(inout zone : View) : void
        //System.out.println("loading: " + zone.getStartOffset() + "," + zone.getEndOffset());
        loadedZones.addElement(zone);
        unloadOldZones();
!!!11711106.java!!!	unloadOldZones() : void
        while (loadedZones.size() > getMaxZonesLoaded()) {
            View zone = loadedZones.elementAt(0);
            loadedZones.removeElementAt(0);
            unloadZone(zone);
        }
!!!11711234.java!!!	unloadZone(inout zone : View) : void
        //System.out.println("unloading: " + zone.getStartOffset() + "," + zone.getEndOffset());
        zone.removeAll();
!!!11711362.java!!!	isZoneLoaded(inout zone : View) : boolean
        return (zone.getViewCount() > 0);
!!!11711490.java!!!	createZone(in p0 : int, in p1 : int) : View
        Document doc = getDocument();
        View zone;
        try {
            zone = new Zone(getElement(),
                            doc.createPosition(p0),
                            doc.createPosition(p1));
        } catch (BadLocationException ble) {
            // this should puke in some way.
            throw new StateInvariantError(ble.getMessage());
        }
        return zone;
!!!11711618.java!!!	loadChildren(inout f : ViewFactory) : void
        // build the first zone.
        Document doc = getDocument();
        int offs0 = getStartOffset();
        int offs1 = getEndOffset();
        append(createZone(offs0, offs1));
        handleInsert(offs0, offs1 - offs0);
!!!11711746.java!!!	getViewIndexAtPosition(in pos : int) : int
        // PENDING(prinz) this could be done as a binary
        // search, and probably should be.
        int n = getViewCount();
        if (pos == getEndOffset()) {
            return n - 1;
        }
        for(int i = 0; i < n; i++) {
            View v = getView(i);
            if(pos >= v.getStartOffset() &&
               pos < v.getEndOffset()) {
                return i;
            }
        }
        return -1;
!!!11711874.java!!!	handleInsert(in pos : int, in length : int) : void
        int index = getViewIndex(pos, Position.Bias.Forward);
        View v = getView(index);
        int offs0 = v.getStartOffset();
        int offs1 = v.getEndOffset();
        if ((offs1 - offs0) > maxZoneSize) {
            splitZone(index, offs0, offs1);
        }
!!!11712002.java!!!	handleRemove(in pos : int, in length : int) : void
        // IMPLEMENT
!!!11712130.java!!!	splitZone(in index : int, in offs0 : int, in offs1 : int) : void
        // divide the old zone into a new set of bins
        Element elem = getElement();
        Document doc = elem.getDocument();
        Vector<View> zones = new Vector<View>();
        int offs = offs0;
        do {
            offs0 = offs;
            offs = Math.min(getDesiredZoneEnd(offs0), offs1);
            zones.addElement(createZone(offs0, offs));
        } while (offs < offs1);
        View oldZone = getView(index);
        View[] newZones = new View[zones.size()];
        zones.copyInto(newZones);
        replace(index, 1, newZones);
!!!11712258.java!!!	getDesiredZoneEnd(in pos : int) : int
        Element elem = getElement();
        int index = elem.getElementIndex(pos + (maxZoneSize / 2));
        Element child = elem.getElement(index);
        int offs0 = child.getStartOffset();
        int offs1 = child.getEndOffset();
        if ((offs1 - pos) > maxZoneSize) {
            if (offs0 > pos) {
                return offs0;
            }
        }
        return offs1;
!!!11712386.java!!!	updateChildren(inout ec : DocumentEvent::ElementChange, inout e : DocumentEvent, inout f : ViewFactory) : boolean
        return false;
!!!11712514.java!!!	insertUpdate(inout changes : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
        handleInsert(changes.getOffset(), changes.getLength());
        super.insertUpdate(changes, a, f);
!!!11712642.java!!!	removeUpdate(inout changes : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
        handleRemove(changes.getOffset(), changes.getLength());
        super.removeUpdate(changes, a, f);
