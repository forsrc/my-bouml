class Activatable
!!!7883138.java!!!	Activatable(inout location : String, inout data : MarshalledObject, inout restart : boolean, in port : int)
        super();
        id = exportObject(this, location, data, restart, port);
!!!7883266.java!!!	Activatable(inout location : String, inout data : MarshalledObject, inout restart : boolean, in port : int, inout csf : RMIClientSocketFactory, inout ssf : RMIServerSocketFactory)
        super();
        id = exportObject(this, location, data, restart, port, csf, ssf);
!!!7883394.java!!!	Activatable(inout id : ActivationID, in port : int)
        super();
        this.id = id;
        exportObject(this, id, port);
!!!7883522.java!!!	Activatable(inout id : ActivationID, in port : int, inout csf : RMIClientSocketFactory, inout ssf : RMIServerSocketFactory)
        super();
        this.id = id;
        exportObject(this, id, port, csf, ssf);
!!!7883650.java!!!	getID() : ActivationID
        return id;
!!!7883778.java!!!	register(inout desc : ActivationDesc) : Remote
        // register object with activator.
        ActivationID id =
            ActivationGroup.getSystem().registerObject(desc);
        return sun.rmi.server.ActivatableRef.getStub(desc, id);
!!!7883906.java!!!	inactive(inout id : ActivationID) : boolean
        return ActivationGroup.currentGroup().inactiveObject(id);
!!!7884034.java!!!	unregister(inout id : ActivationID) : void
        ActivationGroup.getSystem().unregisterObject(id);
!!!7884162.java!!!	exportObject(inout obj : Remote, inout location : String, inout data : MarshalledObject, inout restart : boolean, in port : int) : ActivationID
        return exportObject(obj, location, data, restart, port, null, null);
!!!7884290.java!!!	exportObject(inout obj : Remote, inout location : String, inout data : MarshalledObject, inout restart : boolean, in port : int, inout csf : RMIClientSocketFactory, inout ssf : RMIServerSocketFactory) : ActivationID
        ActivationDesc desc = new ActivationDesc(obj.getClass().getName(),
                                                 location, data, restart);
        /*
         * Register descriptor.
         */
        ActivationSystem system =  ActivationGroup.getSystem();
        ActivationID id = system.registerObject(desc);

        /*
         * Export object.
         */
        try {
            exportObject(obj, id, port, csf, ssf);
        } catch (RemoteException e) {
            /*
             * Attempt to unregister activation descriptor because export
             * failed and register/export should be atomic (see 4323621).
             */
            try {
                system.unregisterObject(id);
            } catch (Exception ex) {
            }
            /*
             * Report original exception.
             */
            throw e;
        }

        /*
         * This call can't fail (it is a local call, and the only possible
         * exception, thrown if the group is inactive, will not be thrown
         * because the group is not inactive).
         */
        ActivationGroup.currentGroup().activeObject(id, obj);

        return id;
!!!7884418.java!!!	exportObject(inout obj : Remote, inout id : ActivationID, in port : int) : Remote
        return exportObject(obj, new ActivatableServerRef(id, port));
!!!7884546.java!!!	exportObject(inout obj : Remote, inout id : ActivationID, in port : int, inout csf : RMIClientSocketFactory, inout ssf : RMIServerSocketFactory) : Remote
        return exportObject(obj, new ActivatableServerRef(id, port, csf, ssf));
!!!7884674.java!!!	unexportObject(inout obj : Remote, inout force : boolean) : boolean
        return sun.rmi.transport.ObjectTable.unexportObject(obj, force);
!!!7884802.java!!!	exportObject(inout obj : Remote, inout sref : ActivatableServerRef) : Remote
        // if obj extends Activatable, set its ref.
        if (obj instanceof Activatable) {
            ((Activatable) obj).ref = sref;

        }
        return sref.exportObject(obj, null, false);
