class SimpleMethodHandle
!!!7297666.java!!!	SimpleMethodHandle(inout type : MethodType, inout form : LambdaForm)
        super(type, form);
!!!7297794.java!!!	make(inout type : MethodType, inout form : LambdaForm) : BoundMethodHandle
        return new SimpleMethodHandle(type, form);
!!!7297922.java!!!	speciesData() : BoundMethodHandle::SpeciesData
            return SPECIES_DATA;
!!!7298050.java!!!	copyWith(inout mt : MethodType, inout lf : LambdaForm) : BoundMethodHandle
        return make(mt, lf);
!!!7298178.java!!!	internalProperties() : String
        return "\n& Class="+getClass().getSimpleName();
!!!7298306.java!!!	fieldCount() : int
        return 0;
!!!7298434.java!!!	copyWithExtendL(inout mt : MethodType, inout lf : LambdaForm, inout narg : Object) : BoundMethodHandle
        return BoundMethodHandle.bindSingle(mt, lf, narg); // Use known fast path.
!!!7298562.java!!!	copyWithExtendI(inout mt : MethodType, inout lf : LambdaForm, in narg : int) : BoundMethodHandle
        try {
            return (BoundMethodHandle) SPECIES_DATA.extendWith(I_TYPE).constructor().invokeBasic(mt, lf, narg);
        } catch (Throwable ex) {
            throw uncaughtException(ex);
        }
!!!7298690.java!!!	copyWithExtendJ(inout mt : MethodType, inout lf : LambdaForm, in narg : long) : BoundMethodHandle
        try {
            return (BoundMethodHandle) SPECIES_DATA.extendWith(J_TYPE).constructor().invokeBasic(mt, lf, narg);
        } catch (Throwable ex) {
            throw uncaughtException(ex);
        }
!!!7298818.java!!!	copyWithExtendF(inout mt : MethodType, inout lf : LambdaForm, in narg : float) : BoundMethodHandle
        try {
            return (BoundMethodHandle) SPECIES_DATA.extendWith(F_TYPE).constructor().invokeBasic(mt, lf, narg);
        } catch (Throwable ex) {
            throw uncaughtException(ex);
        }
!!!7298946.java!!!	copyWithExtendD(inout mt : MethodType, inout lf : LambdaForm, in narg : double) : BoundMethodHandle
        try {
            return (BoundMethodHandle) SPECIES_DATA.extendWith(D_TYPE).constructor().invokeBasic(mt, lf, narg);
        } catch (Throwable ex) {
            throw uncaughtException(ex);
        }
