format 222
"lib" // jdk1.8::com::sun::org::apache::xalan::internal::lib
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/org/apache/xalan/internal/lib/"
  java_package "com.sun.org.apache.xalan.internal.lib"
  classview 156802 "lib"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 583810 "ExsltBase"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The base class for some EXSLT extension classes.
It contains common utility methods to be used by the sub-classes.
"
      operation 3640834 "toString"
	class_operation protected return_type class_ref 128130 // String
	nparams 1
	  param inout name "n" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the string value of a Node

@param n The Node.
@return The string value of the Node
"
      end

      operation 3640962 "toNumber"
	class_operation protected explicit_return_type "double"
	nparams 1
	  param inout name "n" type class_ref 317570 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert the string value of a Node to a number.
Return NaN if the string is not a valid number.

@param n The Node.
@return The number value of the Node
"
      end
    end

    class 583938 "ExsltCommon"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class contains EXSLT common extension functions.
It is accessed by specifying a namespace URI as follows:
<pre>
   xmlns:exslt=\"http://exslt.org/common\"
</pre>

The documentation for each function has been copied from the relevant
EXSLT Implementer page.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>
@xsl.usage general
"
      operation 3641090 "objectType"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The exsl:object-type function returns a string giving the type of the object passed
as the argument. The possible object types are: 'string', 'number', 'boolean',
'node-set', 'RTF', or 'external'.

Most XSLT object types can be coerced to each other without error. However, there are
certain coercions that raise errors, most importantly treating anything other than a
node set as a node set. Authors of utilities such as named templates or user-defined
extension functions may wish to give some flexibility in the parameter and argument values
that are accepted by the utility; the exsl:object-type function enables them to do so.

The Xalan extensions MethodResolver converts 'object-type' to 'objectType'.

@param obj The object to be typed.
@return objectType 'string', 'number', 'boolean', 'node-set', 'RTF', or 'external'.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>
"
      end

      operation 3641218 "nodeSet"
	class_operation public return_type class_ref 584066 // NodeSet
	nparams 2
	  param inout name "myProcessor" type class_ref 582914 // ExpressionContext
	  param inout name "rtf" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The exsl:node-set function converts a result tree fragment (which is what you get
when you use the content of xsl:variable rather than its select attribute to give
a variable value) into a node set. This enables you to process the XML that you create
within a variable, and therefore do multi-step processing.

You can also use this function to turn a string into a text node, which is helpful
if you want to pass a string to a function that only accepts a node set.

The Xalan extensions MethodResolver converts 'node-set' to 'nodeSet'.

@param myProcessor is passed in by the Xalan extension processor
@param rtf The result tree fragment to be converted to a node-set.

@return node-set with the contents of the result tree fragment.

Note: Already implemented in the xalan namespace as nodeset.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>
"
      end
    end

    class 584194 "ExsltDatetime"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class contains EXSLT dates and times extension functions.
It is accessed by specifying a namespace URI as follows:
<pre>
   xmlns:datetime=\"http://exslt.org/dates-and-times\"
</pre>

The documentation for each function has been copied from the relevant
EXSLT Implementer page.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>
@xsl.usage general
"
      classrelation 1183490 // dt (<unidirectional association>)
	relation 1183490 --->
	  a role_name "dt" init_value " \"yyyy-MM-dd'T'HH:mm:ss\"" class_relation const_relation package
	    comment " Datetime formats (era and zone handled separately).
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1183490 // dt (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1183618 // d (<unidirectional association>)
	relation 1183618 --->
	  a role_name "d" init_value " \"yyyy-MM-dd\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1183618 // d (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1183746 // gym (<unidirectional association>)
	relation 1183746 --->
	  a role_name "gym" init_value " \"yyyy-MM\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1183746 // gym (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1183874 // gy (<unidirectional association>)
	relation 1183874 --->
	  a role_name "gy" init_value " \"yyyy\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1183874 // gy (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1184002 // gmd (<unidirectional association>)
	relation 1184002 --->
	  a role_name "gmd" init_value " \"--MM-dd\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1184002 // gmd (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1184130 // gm (<unidirectional association>)
	relation 1184130 --->
	  a role_name "gm" init_value " \"--MM--\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1184130 // gm (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1184258 // gd (<unidirectional association>)
	relation 1184258 --->
	  a role_name "gd" init_value " \"---dd\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1184258 // gd (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1184386 // t (<unidirectional association>)
	relation 1184386 --->
	  a role_name "t" init_value " \"HH:mm:ss\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1184386 // t (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1184514 // EMPTY_STR (<unidirectional association>)
	relation 1184514 --->
	  a role_name "EMPTY_STR" init_value " \"\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1184514 // EMPTY_STR (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 3641346 "dateTime"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:date-time function returns the current date and time as a date/time string.
The date/time string that's returned must be a string in the format defined as the
lexical representation of xs:dateTime in
<a href=\"http://www.w3.org/TR/xmlschema-2/#dateTime\">[3.2.7 dateTime]</a> of
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The date/time format is basically CCYY-MM-DDThh:mm:ss, although implementers should consult
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a> and
<a href=\"http://www.iso.ch/markete/8601.pdf\">[ISO 8601]</a> for details.
The date/time string format must include a time zone, either a Z to indicate Coordinated
Universal Time or a + or - followed by the difference between the difference from UTC
represented as hh:mm.
"
      end

      operation 3641474 "formatDigits"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param in name "q" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Represent the hours and minutes with two-digit strings.
@param q hrs or minutes.
@return two-digit String representation of hrs or minutes.
"
      end

      operation 3641602 "date"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:date function returns the date specified in the date/time string given
as the argument. If no argument is given, then the current local date/time, as
returned by date:date-time is used as a default argument.
The date/time string that's returned must be a string in the format defined as the
lexical representation of xs:dateTime in
<a href=\"http://www.w3.org/TR/xmlschema-2/#dateTime\">[3.2.7 dateTime]</a> of
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
If the argument is not in either of these formats, date:date returns an empty string ('').
The date/time format is basically CCYY-MM-DDThh:mm:ss, although implementers should consult
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a> and
<a href=\"http://www.iso.ch/markete/8601.pdf\">[ISO 8601]</a> for details.
The date is returned as a string with a lexical representation as defined for xs:date in
[3.2.9 date] of [XML Schema Part 2: Datatypes]. The date format is basically CCYY-MM-DD,
although implementers should consult [XML Schema Part 2: Datatypes] and [ISO 8601] for details.
If no argument is given or the argument date/time specifies a time zone, then the date string
format must include a time zone, either a Z to indicate Coordinated Universal Time or a + or -
followed by the difference between the difference from UTC represented as hh:mm. If an argument
is specified and it does not specify a time zone, then the date string format must not include
a time zone.
"
      end

      operation 3641730 "date"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3641858 "time"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "timeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:time function returns the time specified in the date/time string given
as the argument. If no argument is given, then the current local date/time, as
returned by date:date-time is used as a default argument.
The date/time string that's returned must be a string in the format defined as the
lexical representation of xs:dateTime in
<a href=\"http://www.w3.org/TR/xmlschema-2/#dateTime\">[3.2.7 dateTime]</a> of
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
If the argument string is not in this format, date:time returns an empty string ('').
The date/time format is basically CCYY-MM-DDThh:mm:ss, although implementers should consult
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a> and
<a href=\"http://www.iso.ch/markete/8601.pdf\">[ISO 8601]</a> for details.
The date is returned as a string with a lexical representation as defined for xs:time in
<a href=\"http://www.w3.org/TR/xmlschema-2/#time\">[3.2.8 time]</a> of [XML Schema Part 2: Datatypes].
The time format is basically hh:mm:ss, although implementers should consult [XML Schema Part 2:
Datatypes] and [ISO 8601] for details.
If no argument is given or the argument date/time specifies a time zone, then the time string
format must include a time zone, either a Z to indicate Coordinated Universal Time or a + or -
followed by the difference between the difference from UTC represented as hh:mm. If an argument
is specified and it does not specify a time zone, then the time string format must not include
a time zone.
"
      end

      operation 3641986 "time"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3642114 "year"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:year function returns the year of a date as a number. If no
argument is given, then the current local date/time, as returned by
date:date-time is used as a default argument.
The date/time string specified as the first argument must be a right-truncated
string in the format defined as the lexical representation of xs:dateTime in one
of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
  xs:dateTime (CCYY-MM-DDThh:mm:ss)
  xs:date (CCYY-MM-DD)
  xs:gYearMonth (CCYY-MM)
  xs:gYear (CCYY)
If the date/time string is not in one of these formats, then NaN is returned.
"
      end

      operation 3642242 "year"
	class_operation public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3642370 "monthInYear"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:month-in-year function returns the month of a date as a number. If no argument
is given, then the current local date/time, as returned by date:date-time is used
as a default argument.
The date/time string specified as the first argument is a left or right-truncated
string in the format defined as the lexical representation of xs:dateTime in one of
the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
   xs:dateTime (CCYY-MM-DDThh:mm:ss)
   xs:date (CCYY-MM-DD)
   xs:gYearMonth (CCYY-MM)
   xs:gMonth (--MM--)
   xs:gMonthDay (--MM-DD)
If the date/time string is not in one of these formats, then NaN is returned.
"
      end

      operation 3642498 "monthInYear"
	class_operation public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3642626 "weekInYear"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:week-in-year function returns the week of the year as a number. If no argument
is given, then the current local date/time, as returned by date:date-time is used as the
default argument. For the purposes of numbering, counting follows ISO 8601: week 1 in a year
is the week containing the first Thursday of the year, with new weeks beginning on a Monday.
The date/time string specified as the argument is a right-truncated string in the format
defined as the lexical representation of xs:dateTime in one of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>. The
permitted formats are as follows:
   xs:dateTime (CCYY-MM-DDThh:mm:ss)
   xs:date (CCYY-MM-DD)
If the date/time string is not in one of these formats, then NaN is returned.
"
      end

      operation 3642754 "weekInYear"
	class_operation public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3642882 "dayInYear"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:day-in-year function returns the day of a date in a year
as a number. If no argument is given, then the current local
date/time, as returned by date:date-time is used the default argument.
The date/time string specified as the argument is a right-truncated
string in the format defined as the lexical representation of xs:dateTime
in one of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
    xs:dateTime (CCYY-MM-DDThh:mm:ss)
    xs:date (CCYY-MM-DD)
If the date/time string is not in one of these formats, then NaN is returned.
"
      end

      operation 3643010 "dayInYear"
	class_operation public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3643138 "dayInMonth"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:day-in-month function returns the day of a date as a number.
If no argument is given, then the current local date/time, as returned
by date:date-time is used the default argument.
The date/time string specified as the argument is a left or right-truncated
string in the format defined as the lexical representation of xs:dateTime
in one of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
     xs:dateTime (CCYY-MM-DDThh:mm:ss)
     xs:date (CCYY-MM-DD)
     xs:gMonthDay (--MM-DD)
     xs:gDay (---DD)
If the date/time string is not in one of these formats, then NaN is returned.
"
      end

      operation 3643266 "dayInMonth"
	class_operation public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3643394 "dayOfWeekInMonth"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:day-of-week-in-month function returns the day-of-the-week
in a month of a date as a number (e.g. 3 for the 3rd Tuesday in May).
If no argument is given, then the current local date/time, as returned
by date:date-time is used the default argument.
The date/time string specified as the argument is a right-truncated string
in the format defined as the lexical representation of xs:dateTime in one
of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
     xs:dateTime (CCYY-MM-DDThh:mm:ss)
     xs:date (CCYY-MM-DD)
If the date/time string is not in one of these formats, then NaN is returned.
"
      end

      operation 3643522 "dayOfWeekInMonth"
	class_operation public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3643650 "dayInWeek"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:day-in-week function returns the day of the week given in a
date as a number. If no argument is given, then the current local date/time,
as returned by date:date-time is used the default argument.
The date/time string specified as the argument is a right-truncated string
in the format defined as the lexical representation of xs:dateTime in one
of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
     xs:dateTime (CCYY-MM-DDThh:mm:ss)
     xs:date (CCYY-MM-DD)
If the date/time string is not in one of these formats, then NaN is returned.
The numbering of days of the week starts at 1 for Sunday, 2 for Monday and so on up to 7 for Saturday.
"
      end

      operation 3643778 "dayInWeek"
	class_operation public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3643906 "hourInDay"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:hour-in-day function returns the hour of the day as a number.
If no argument is given, then the current local date/time, as returned
by date:date-time is used the default argument.
The date/time string specified as the argument is a right-truncated
string  in the format defined as the lexical representation of xs:dateTime
in one of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
    xs:dateTime (CCYY-MM-DDThh:mm:ss)
    xs:time (hh:mm:ss)
If the date/time string is not in one of these formats, then NaN is returned.
"
      end

      operation 3644034 "hourInDay"
	class_operation public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3644162 "minuteInHour"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:minute-in-hour function returns the minute of the hour
as a number. If no argument is given, then the current local
date/time, as returned by date:date-time is used the default argument.
The date/time string specified as the argument is a right-truncated
string in the format defined as the lexical representation of xs:dateTime
in one of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
     xs:dateTime (CCYY-MM-DDThh:mm:ss)
     xs:time (hh:mm:ss)
If the date/time string is not in one of these formats, then NaN is returned.
"
      end

      operation 3644290 "minuteInHour"
	class_operation public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3644418 "secondInMinute"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:second-in-minute function returns the second of the minute
as a number. If no argument is given, then the current local
date/time, as returned by date:date-time is used the default argument.
The date/time string specified as the argument is a right-truncated
string in the format defined as the lexical representation of xs:dateTime
in one of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
     xs:dateTime (CCYY-MM-DDThh:mm:ss)
     xs:time (hh:mm:ss)
If the date/time string is not in one of these formats, then NaN is returned.
"
      end

      operation 3644546 "secondInMinute"
	class_operation public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3644674 "leapYear"
	class_operation public return_type class_ref 583298 // XObject
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:leap-year function returns true if the year given in a date
is a leap year. If no argument is given, then the current local
date/time, as returned by date:date-time is used as a default argument.
The date/time string specified as the first argument must be a
right-truncated string in the format defined as the lexical representation
of xs:dateTime in one of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
   xs:dateTime (CCYY-MM-DDThh:mm:ss)
   xs:date (CCYY-MM-DD)
   xs:gYearMonth (CCYY-MM)
   xs:gYear (CCYY)
If the date/time string is not in one of these formats, then NaN is returned.
"
      end

      operation 3644802 "leapYear"
	class_operation public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3644930 "monthName"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:month-name function returns the full name of the month of a date.
If no argument is given, then the current local date/time, as returned by
date:date-time is used the default argument.
The date/time string specified as the argument is a left or right-truncated
string in the format defined as the lexical representation of xs:dateTime in
 one of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
   xs:dateTime (CCYY-MM-DDThh:mm:ss)
   xs:date (CCYY-MM-DD)
   xs:gYearMonth (CCYY-MM)
   xs:gMonth (--MM--)
If the date/time string is not in one of these formats, then an empty string ('')
is returned.
The result is an English month name: one of 'January', 'February', 'March',
'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November'
or 'December'.
"
      end

      operation 3645058 "monthName"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3645186 "monthAbbreviation"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:month-abbreviation function returns the abbreviation of the month of
a date. If no argument is given, then the current local date/time, as returned
by date:date-time is used the default argument.
The date/time string specified as the argument is a left or right-truncated
string in the format defined as the lexical representation of xs:dateTime in
one of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
   xs:dateTime (CCYY-MM-DDThh:mm:ss)
   xs:date (CCYY-MM-DD)
   xs:gYearMonth (CCYY-MM)
   xs:gMonth (--MM--)
If the date/time string is not in one of these formats, then an empty string ('')
is returned.
The result is a three-letter English month abbreviation: one of 'Jan', 'Feb', 'Mar',
'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov' or 'Dec'.
An implementation of this extension function in the EXSLT date namespace must conform
to the behaviour described in this document.
"
      end

      operation 3645314 "monthAbbreviation"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3645442 "dayName"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:day-name function returns the full name of the day of the week
of a date.  If no argument is given, then the current local date/time,
as returned by date:date-time is used the default argument.
The date/time string specified as the argument is a left or right-truncated
string in the format defined as the lexical representation of xs:dateTime
in one of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
    xs:dateTime (CCYY-MM-DDThh:mm:ss)
    xs:date (CCYY-MM-DD)
If the date/time string is not in one of these formats, then the empty string ('')
is returned.
The result is an English day name: one of 'Sunday', 'Monday', 'Tuesday', 'Wednesday',
'Thursday' or 'Friday'.
An implementation of this extension function in the EXSLT date namespace must conform
to the behaviour described in this document.
"
      end

      operation 3645570 "dayName"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3645698 "dayAbbreviation"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "datetimeIn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:day-abbreviation function returns the abbreviation of the day
of the week of a date. If no argument is given, then the current local
date/time, as returned  by date:date-time is used the default argument.
The date/time string specified as the argument is a left or right-truncated
string in the format defined as the lexical representation of xs:dateTime
in one of the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
    xs:dateTime (CCYY-MM-DDThh:mm:ss)
    xs:date (CCYY-MM-DD)
If the date/time string is not in one of these formats, then the empty string
('') is returned.
The result is a three-letter English day abbreviation: one of 'Sun', 'Mon', 'Tue',
'Wed', 'Thu' or 'Fri'.
An implementation of this extension function in the EXSLT date namespace must conform
to the behaviour described in this document.
"
      end

      operation 3645826 "dayAbbreviation"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above.
"
      end

      operation 3645954 "getEraDatetimeZone"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "in" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array with the 3 components that a datetime input string
may contain: - (for BC era), datetime, and zone. If the zone is not
valid, return null for that component.
"
      end

      operation 3646082 "getZoneStart"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "datetime" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the start of zone information if the input ends
with 'Z' or +/-hh:mm. If a zone string is not
found, return -1; if the zone string is invalid,
return -2.
"
      end

      operation 3646210 "testFormats"
	class_operation private return_type class_ref 521474 // Date
	nparams 2
	  param inout name "in" type class_ref 128130 // String
	  param inout name "formats" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempt to parse an input string with the allowed formats, returning
null if none of the formats work.
"
      end

      operation 3646338 "getNumber"
	class_operation private explicit_return_type "double"
	nparams 3
	  param inout name "in" type class_ref 128130 // String
	  param inout name "formats" type class_ref 128130 // String
	multiplicity "[]"
	  param in name "calField" explicit_type "int"
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse the input string and return the corresponding calendar field
number.
"
      end

      operation 3646466 "getNameOrAbbrev"
	class_operation private return_type class_ref 128130 // String
	nparams 3
	  param inout name "in" type class_ref 128130 // String
	  param inout name "formatsIn" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "formatOut" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the full name or abbreviation of the month or day.
"
      end

      operation 3646594 "getNameOrAbbrev"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "format" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the full name or abbreviation for the current month or day
(no input string).
"
      end

      operation 3646722 "formatDate"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "dateTime" type class_ref 128130 // String
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The date:format-date function formats a date/time according to a pattern.
<p>
The first argument to date:format-date specifies the date/time to be
formatted. It must be right or left-truncated date/time strings in one of
the formats defined in
<a href=\"http://www.w3.org/TR/xmlschema-2/\">[XML Schema Part 2: Datatypes]</a>.
The permitted formats are as follows:
<ul>
<li>xs:dateTime (CCYY-MM-DDThh:mm:ss)
<li>xs:date (CCYY-MM-DD)
<li>xs:time (hh:mm:ss)
<li>xs:gYearMonth (CCYY-MM)
<li>xs:gYear (CCYY)
<li>xs:gMonthDay (--MM-DD)
<li>xs:gMonth (--MM--)
<li>xs:gDay (---DD)
</ul>
The second argument is a string that gives the format pattern used to
format the date. The format pattern must be in the syntax specified by
the JDK 1.1 SimpleDateFormat class. The format pattern string is
interpreted as described for the JDK 1.1 SimpleDateFormat class.
<p>
If the date/time format is right-truncated (i.e. in a format other than
xs:time, or xs:dateTime) then any missing components are assumed to be as
follows: if no month is specified, it is given a month of 01; if no day
is specified, it is given a day of 01; if no time is specified, it is
given a time of 00:00:00.
<p>
If the date/time format is left-truncated (i.e. xs:time, xs:gMonthDay,
xs:gMonth or xs:gDay) and the format pattern has a token that uses a
component that is missing from the date/time format used, then that token
is replaced with an empty string ('') within the result.

The author is Helg Bredow (helg.bredow@kalido.com)
"
      end

      operation 3646850 "strip"
	class_operation private return_type class_ref 128130 // String
	nparams 2
	  param inout name "symbols" type class_ref 128130 // String
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Strips occurrences of the given character from a date format pattern.
@param symbols list of symbols to strip.
@param pattern
@return
"
      end
    end

    class 584322 "ExsltDynamic"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class contains EXSLT dynamic extension functions.

It is accessed by specifying a namespace URI as follows:
<pre>
   xmlns:dyn=\"http://exslt.org/dynamic\"
</pre>
The documentation for each function has been copied from the relevant
EXSLT Implementer page.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>

@xsl.usage general
"
      classrelation 1184642 // <generalisation>
	relation 1184642 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1184642 // <generalisation>
	  b parent class_ref 583810 // ExsltBase
      end

      classrelation 1184770 // EXSL_URI (<unidirectional association>)
	relation 1184770 --->
	  a role_name "EXSL_URI" init_value " \"http://exslt.org/common\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1184770 // EXSL_URI (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 3646978 "max"
	class_operation public explicit_return_type "double"
	nparams 3
	  param inout name "myContext" type class_ref 582914 // ExpressionContext
	  param inout name "nl" type class_ref 333058 // NodeList
	  param inout name "expr" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 584450 // SAXNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The dyn:max function calculates the maximum value for the nodes passed as
the first argument, where the value of each node is calculated dynamically
using an XPath expression passed as a string as the second argument.
<p>
The expressions are evaluated relative to the nodes passed as the first argument.
In other words, the value for each node is calculated by evaluating the XPath
expression with all context information being the same as that for the call to
the dyn:max function itself, except for the following:
<p>
<ul>
 <li>the context node is the node whose value is being calculated.</li>
 <li>the context position is the position of the node within the node set passed as
  the first argument to the dyn:max function, arranged in document order.</li>
 <li>the context size is the number of nodes passed as the first argument to the
  dyn:max function.</li>
</ul>
<p>
The dyn:max function returns the maximum of these values, calculated in exactly
the same way as for math:max.
<p>
If the expression string passed as the second argument is an invalid XPath
expression (including an empty string), this function returns NaN.
<p>
This function must take a second argument. To calculate the maximum of a set of
nodes based on their string values, you should use the math:max function.

@param myContext The ExpressionContext passed by the extension processor
@param nl The node set
@param expr The expression string

@return The maximum evaluation value
"
      end

      operation 3647106 "min"
	class_operation public explicit_return_type "double"
	nparams 3
	  param inout name "myContext" type class_ref 582914 // ExpressionContext
	  param inout name "nl" type class_ref 333058 // NodeList
	  param inout name "expr" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 584450 // SAXNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The dyn:min function calculates the minimum value for the nodes passed as the
first argument, where the value of each node is calculated dynamically using
an XPath expression passed as a string as the second argument.
<p>
The expressions are evaluated relative to the nodes passed as the first argument.
In other words, the value for each node is calculated by evaluating the XPath
expression with all context information being the same as that for the call to
the dyn:min function itself, except for the following:
<p>
<ul>
 <li>the context node is the node whose value is being calculated.</li>
 <li>the context position is the position of the node within the node set passed
   as the first argument to the dyn:min function, arranged in document order.</li>
 <li>the context size is the number of nodes passed as the first argument to the
   dyn:min function.</li>
</ul>
<p>
The dyn:min function returns the minimum of these values, calculated in exactly
the same way as for math:min.
<p>
If the expression string passed as the second argument is an invalid XPath expression
(including an empty string), this function returns NaN.
<p>
This function must take a second argument. To calculate the minimum of a set of
nodes based on their string values, you should use the math:min function.

@param myContext The ExpressionContext passed by the extension processor
@param nl The node set
@param expr The expression string

@return The minimum evaluation value
"
      end

      operation 3647234 "sum"
	class_operation public explicit_return_type "double"
	nparams 3
	  param inout name "myContext" type class_ref 582914 // ExpressionContext
	  param inout name "nl" type class_ref 333058 // NodeList
	  param inout name "expr" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 584450 // SAXNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The dyn:sum function calculates the sum for the nodes passed as the first argument,
where the value of each node is calculated dynamically using an XPath expression
passed as a string as the second argument.
<p>
The expressions are evaluated relative to the nodes passed as the first argument.
In other words, the value for each node is calculated by evaluating the XPath
expression with all context information being the same as that for the call to
the dyn:sum function itself, except for the following:
<p>
<ul>
 <li>the context node is the node whose value is being calculated.</li>
 <li>the context position is the position of the node within the node set passed as
   the first argument to the dyn:sum function, arranged in document order.</li>
 <li>the context size is the number of nodes passed as the first argument to the
   dyn:sum function.</li>
</ul>
<p>
The dyn:sum function returns the sumimum of these values, calculated in exactly
the same way as for sum.
<p>
If the expression string passed as the second argument is an invalid XPath
expression (including an empty string), this function returns NaN.
<p>
This function must take a second argument. To calculate the sumimum of a set of
nodes based on their string values, you should use the sum function.

@param myContext The ExpressionContext passed by the extension processor
@param nl The node set
@param expr The expression string

@return The sum of the evaluation value on each node
"
      end

      operation 3647362 "map"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 3
	  param inout name "myContext" type class_ref 582914 // ExpressionContext
	  param inout name "nl" type class_ref 333058 // NodeList
	  param inout name "expr" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 584450 // SAXNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The dyn:map function evaluates the expression passed as the second argument for
each of the nodes passed as the first argument, and returns a node set of those values.
<p>
The expressions are evaluated relative to the nodes passed as the first argument.
In other words, the value for each node is calculated by evaluating the XPath
expression with all context information being the same as that for the call to
the dyn:map function itself, except for the following:
<p>
<ul>
 <li>The context node is the node whose value is being calculated.</li>
 <li>the context position is the position of the node within the node set passed
   as the first argument to the dyn:map function, arranged in document order.</li>
 <li>the context size is the number of nodes passed as the first argument to the
   dyn:map function.</li>
</ul>
<p>
If the expression string passed as the second argument is an invalid XPath
expression (including an empty string), this function returns an empty node set.
<p>
If the XPath expression evaluates as a node set, the dyn:map function returns
the union of the node sets returned by evaluating the expression for each of the
nodes in the first argument. Note that this may mean that the node set resulting
from the call to the dyn:map function contains a different number of nodes from
the number in the node set passed as the first argument to the function.
<p>
If the XPath expression evaluates as a number, the dyn:map function returns a
node set containing one exsl:number element (namespace http://exslt.org/common)
for each node in the node set passed as the first argument to the dyn:map function,
in document order. The string value of each exsl:number element is the same as
the result of converting the number resulting from evaluating the expression to
a string as with the number function, with the exception that Infinity results
in an exsl:number holding the highest number the implementation can store, and
-Infinity results in an exsl:number holding the lowest number the implementation
can store.
<p>
If the XPath expression evaluates as a boolean, the dyn:map function returns a
node set containing one exsl:boolean element (namespace http://exslt.org/common)
for each node in the node set passed as the first argument to the dyn:map function,
in document order. The string value of each exsl:boolean element is 'true' if the
expression evaluates as true for the node, and '' if the expression evaluates as
false.
<p>
Otherwise, the dyn:map function returns a node set containing one exsl:string
element (namespace http://exslt.org/common) for each node in the node set passed
as the first argument to the dyn:map function, in document order. The string
value of each exsl:string element is the same as the result of converting the
result of evaluating the expression for the relevant node to a string as with
the string function.

@param myContext The ExpressionContext passed by the extension processor
@param nl The node set
@param expr The expression string

@return The node set after evaluation
"
      end

      operation 3647490 "evaluate"
	class_operation public return_type class_ref 583298 // XObject
	nparams 2
	  param inout name "myContext" type class_ref 582914 // ExpressionContext
	  param inout name "xpathExpr" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 584450 // SAXNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The dyn:evaluate function evaluates a string as an XPath expression and returns
the resulting value, which might be a boolean, number, string, node set, result
tree fragment or external object. The sole argument is the string to be evaluated.
<p>
If the expression string passed as the second argument is an invalid XPath
expression (including an empty string), this function returns an empty node set.
<p>
You should only use this function if the expression must be constructed dynamically,
otherwise it is much more efficient to use the expression literally.

@param myContext The ExpressionContext passed by the extension processor
@param xpathExpr The XPath expression string

@return The evaluation result
"
      end

      operation 3647618 "closure"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 3
	  param inout name "myContext" type class_ref 582914 // ExpressionContext
	  param inout name "nl" type class_ref 333058 // NodeList
	  param inout name "expr" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 584450 // SAXNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The dyn:closure function creates a node set resulting from transitive closure of
evaluating the expression passed as the second argument on each of the nodes passed
as the first argument, then on the node set resulting from that and so on until no
more nodes are found. For example:
<pre>
 dyn:closure(., '*')
</pre>
returns all the descendant elements of the node (its element children, their
children, their children's children and so on).
<p>
The expression is thus evaluated several times, each with a different node set
acting as the context of the expression. The first time the expression is
evaluated, the context node set is the first argument passed to the dyn:closure
function. In other words, the node set for each node is calculated by evaluating
the XPath expression with all context information being the same as that for
the call to the dyn:closure function itself, except for the following:
<p>
<ul>
 <li>the context node is the node whose value is being calculated.</li>
 <li>the context position is the position of the node within the node set passed
   as the first argument to the dyn:closure function, arranged in document order.</li>
 <li>the context size is the number of nodes passed as the first argument to the
   dyn:closure function.</li>
 <li>the current node is the node whose value is being calculated.</li>
</ul>
<p>
The result for a particular iteration is the union of the node sets resulting
from evaluting the expression for each of the nodes in the source node set for
that iteration. This result is then used as the source node set for the next
iteration, and so on. The result of the function as a whole is the union of
the node sets generated by each iteration.
<p>
If the expression string passed as the second argument is an invalid XPath
expression (including an empty string) or an expression that does not return a
node set, this function returns an empty node set.

@param myContext The ExpressionContext passed by the extension processor
@param nl The node set
@param expr The expression string

@return The node set after evaluation
"
      end
    end

    class 584578 "ExsltMath"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class contains EXSLT math extension functions.
It is accessed by specifying a namespace URI as follows:
<pre>
   xmlns:math=\"http://exslt.org/math\"
</pre>

The documentation for each function has been copied from the relevant
EXSLT Implementer page.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>

@xsl.usage general
"
      classrelation 1184898 // <generalisation>
	relation 1184898 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1184898 // <generalisation>
	  b parent class_ref 583810 // ExsltBase
      end

      classrelation 1185026 // PI (<unidirectional association>)
	relation 1185026 --->
	  a role_name "PI" init_value " \"3.1415926535897932384626433832795028841971693993751\"" class_relation private
	    comment " Constants
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1185026 // PI (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1185154 // E (<unidirectional association>)
	relation 1185154 --->
	  a role_name "E" init_value " \"2.71828182845904523536028747135266249775724709369996\"" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1185154 // E (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1185282 // SQRRT2 (<unidirectional association>)
	relation 1185282 --->
	  a role_name "SQRRT2" init_value " \"1.41421356237309504880168872420969807856967187537694\"" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1185282 // SQRRT2 (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1185410 // LN2 (<unidirectional association>)
	relation 1185410 --->
	  a role_name "LN2" init_value " \"0.69314718055994530941723212145817656807550013436025\"" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1185410 // LN2 (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1185538 // LN10 (<unidirectional association>)
	relation 1185538 --->
	  a role_name "LN10" init_value " \"2.302585092994046\"" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1185538 // LN10 (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1185666 // LOG2E (<unidirectional association>)
	relation 1185666 --->
	  a role_name "LOG2E" init_value " \"1.4426950408889633\"" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1185666 // LOG2E (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1185794 // SQRT1_2 (<unidirectional association>)
	relation 1185794 --->
	  a role_name "SQRT1_2" init_value " \"0.7071067811865476\"" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1185794 // SQRT1_2 (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 3647746 "max"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "nl" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:max function returns the maximum value of the nodes passed as the argument.
The maximum value is defined as follows. The node set passed as an argument is sorted
in descending order as it would be by xsl:sort with a data type of number. The maximum
is the result of converting the string value of the first node in this sorted list to
a number using the number function.
<p>
If the node set is empty, or if the result of converting the string values of any of the
nodes to a number is NaN, then NaN is returned.

@param nl The NodeList for the node-set to be evaluated.

@return the maximum value found, NaN if any node cannot be converted to a number.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>
"
      end

      operation 3647874 "min"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "nl" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:min function returns the minimum value of the nodes passed as the argument.
The minimum value is defined as follows. The node set passed as an argument is sorted
in ascending order as it would be by xsl:sort with a data type of number. The minimum
is the result of converting the string value of the first node in this sorted list to
a number using the number function.
<p>
If the node set is empty, or if the result of converting the string values of any of
the nodes to a number is NaN, then NaN is returned.

@param nl The NodeList for the node-set to be evaluated.

@return the minimum value found, NaN if any node cannot be converted to a number.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>
"
      end

      operation 3648002 "highest"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 1
	  param inout name "nl" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:highest function returns the nodes in the node set whose value is the maximum
value for the node set. The maximum value for the node set is the same as the value as
calculated by math:max. A node has this maximum value if the result of converting its
string value to a number as if by the number function is equal to the maximum value,
where the equality comparison is defined as a numerical comparison using the = operator.
<p>
If any of the nodes in the node set has a non-numeric value, the math:max function will
return NaN. The definition numeric comparisons entails that NaN != NaN. Therefore if any
of the nodes in the node set has a non-numeric value, math:highest will return an empty
node set.

@param nl The NodeList for the node-set to be evaluated.

@return node-set with nodes containing the maximum value found, an empty node-set
if any node cannot be converted to a number.
"
      end

      operation 3648130 "lowest"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 1
	  param inout name "nl" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:lowest function returns the nodes in the node set whose value is the minimum value
for the node set. The minimum value for the node set is the same as the value as calculated
by math:min. A node has this minimum value if the result of converting its string value to
a number as if by the number function is equal to the minimum value, where the equality
comparison is defined as a numerical comparison using the = operator.
<p>
If any of the nodes in the node set has a non-numeric value, the math:min function will return
NaN. The definition numeric comparisons entails that NaN != NaN. Therefore if any of the nodes
in the node set has a non-numeric value, math:lowest will return an empty node set.

@param nl The NodeList for the node-set to be evaluated.

@return node-set with nodes containing the minimum value found, an empty node-set
if any node cannot be converted to a number.

"
      end

      operation 3648258 "abs"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "num" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:abs function returns the absolute value of a number.

@param num A number
@return The absolute value of the number
"
      end

      operation 3648386 "acos"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "num" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:acos function returns the arccosine value of a number.

@param num A number
@return The arccosine value of the number
"
      end

      operation 3648514 "asin"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "num" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:asin function returns the arcsine value of a number.

@param num A number
@return The arcsine value of the number
"
      end

      operation 3648642 "atan"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "num" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:atan function returns the arctangent value of a number.

@param num A number
@return The arctangent value of the number
"
      end

      operation 3648770 "atan2"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "num1" explicit_type "double"
	  param in name "num2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:atan2 function returns the angle ( in radians ) from the X axis to a point (y,x).

@param num1 The X axis value
@param num2 The Y axis value
@return The angle (in radians) from the X axis to a point (y,x)
"
      end

      operation 3648898 "cos"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "num" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:cos function returns cosine of the passed argument.

@param num A number
@return The cosine value of the number
"
      end

      operation 3649026 "exp"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "num" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:exp function returns e (the base of natural logarithms) raised to a power.

@param num A number
@return The value of e raised to the given power
"
      end

      operation 3649154 "log"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "num" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:log function returns the natural logarithm of a number.

@param num A number
@return The natural logarithm of the number
"
      end

      operation 3649282 "power"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "num1" explicit_type "double"
	  param in name "num2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:power function returns the value of a base expression taken to a specified power.

@param num1 The base
@param num2 The power
@return The value of the base expression taken to the specified power
"
      end

      operation 3649410 "random"
	class_operation public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:random function returns a random number from 0 to 1.

@return A random double from 0 to 1
"
      end

      operation 3649538 "sin"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "num" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:sin function returns the sine of the number.

@param num A number
@return The sine value of the number
"
      end

      operation 3649666 "sqrt"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "num" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:sqrt function returns the square root of a number.

@param num A number
@return The square root of the number
"
      end

      operation 3649794 "tan"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "num" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:tan function returns the tangent of the number passed as an argument.

@param num A number
@return The tangent value of the number
"
      end

      operation 3649922 "constant"
	class_operation public explicit_return_type "double"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "precision" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The math:constant function returns the specified constant to a set precision.
The possible constants are:
<pre>
 PI
 E
 SQRRT2
 LN2
 LN10
 LOG2E
 SQRT1_2
</pre>
@param name The name of the constant
@param precision The precision
@return The value of the specified constant to the given precision
"
      end
    end

    class 584706 "ExsltSets"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class contains EXSLT set extension functions.
It is accessed by specifying a namespace URI as follows:
<pre>
   xmlns:set=\"http://exslt.org/sets\"
</pre>

The documentation for each function has been copied from the relevant
EXSLT Implementer page.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>
@xsl.usage general
"
      classrelation 1185922 // <generalisation>
	relation 1185922 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1185922 // <generalisation>
	  b parent class_ref 583810 // ExsltBase
      end

      operation 3650050 "leading"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 2
	  param inout name "nl1" type class_ref 333058 // NodeList
	  param inout name "nl2" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The set:leading function returns the nodes in the node set passed as the first argument that
precede, in document order, the first node in the node set passed as the second argument. If
the first node in the second node set is not contained in the first node set, then an empty
node set is returned. If the second node set is empty, then the first node set is returned.

@param nl1 NodeList for first node-set.
@param nl2 NodeList for second node-set.
@return a NodeList containing the nodes in nl1 that precede in document order the first
node in nl2; an empty node-set if the first node in nl2 is not in nl1; all of nl1 if nl2
is empty.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>
"
      end

      operation 3650178 "trailing"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 2
	  param inout name "nl1" type class_ref 333058 // NodeList
	  param inout name "nl2" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The set:trailing function returns the nodes in the node set passed as the first argument that
follow, in document order, the first node in the node set passed as the second argument. If
the first node in the second node set is not contained in the first node set, then an empty
node set is returned. If the second node set is empty, then the first node set is returned.

@param nl1 NodeList for first node-set.
@param nl2 NodeList for second node-set.
@return a NodeList containing the nodes in nl1 that follow in document order the first
node in nl2; an empty node-set if the first node in nl2 is not in nl1; all of nl1 if nl2
is empty.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>
"
      end

      operation 3650306 "intersection"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 2
	  param inout name "nl1" type class_ref 333058 // NodeList
	  param inout name "nl2" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The set:intersection function returns a node set comprising the nodes that are within
both the node sets passed as arguments to it.

@param nl1 NodeList for first node-set.
@param nl2 NodeList for second node-set.
@return a NodeList containing the nodes in nl1 that are also
in nl2.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>
"
      end

      operation 3650434 "difference"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 2
	  param inout name "nl1" type class_ref 333058 // NodeList
	  param inout name "nl2" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The set:difference function returns the difference between two node sets - those nodes that
are in the node set passed as the first argument that are not in the node set passed as the
second argument.

@param nl1 NodeList for first node-set.
@param nl2 NodeList for second node-set.
@return a NodeList containing the nodes in nl1 that are not in nl2.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>
"
      end

      operation 3650562 "distinct"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 1
	  param inout name "nl" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The set:distinct function returns a subset of the nodes contained in the node-set NS passed
as the first argument. Specifically, it selects a node N if there is no node in NS that has
the same string value as N, and that precedes N in document order.

@param nl NodeList for the node-set.
@return a NodeList with nodes from nl containing distinct string values.
In other words, if more than one node in nl contains the same string value,
only include the first such node found.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>
"
      end

      operation 3650690 "hasSameNode"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "nl1" type class_ref 333058 // NodeList
	  param inout name "nl2" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The set:has-same-node function returns true if the node set passed as the first argument shares
any nodes with the node set passed as the second argument. If there are no nodes that are in both
node sets, then it returns false.

The Xalan extensions MethodResolver converts 'has-same-node' to 'hasSameNode'.

Note: Not to be confused with hasSameNodes in the Xalan namespace, which returns true if
the two node sets contain the exactly the same nodes (perhaps in a different order),
otherwise false.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>
"
      end
    end

    class 584834 "ExsltStrings"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class contains EXSLT strings extension functions.

It is accessed by specifying a namespace URI as follows:
<pre>
   xmlns:str=\"http://exslt.org/strings\"
</pre>
The documentation for each function has been copied from the relevant
EXSLT Implementer page.

@see <a href=\"http://www.exslt.org/\">EXSLT</a>

@xsl.usage general
"
      classrelation 1186050 // <generalisation>
	relation 1186050 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1186050 // <generalisation>
	  b parent class_ref 583810 // ExsltBase
      end

      classrelation 1186178 // JDK_DEFAULT_DOM (<unidirectional association>)
	relation 1186178 --->
	  a role_name "JDK_DEFAULT_DOM" init_value " \"com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1186178 // JDK_DEFAULT_DOM (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 3650818 "align"
	class_operation public return_type class_ref 128130 // String
	nparams 3
	  param inout name "targetStr" type class_ref 128130 // String
	  param inout name "paddingStr" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The str:align function aligns a string within another string.
<p>
The first argument gives the target string to be aligned. The second argument gives
the padding string within which it is to be aligned.
<p>
If the target string is shorter than the padding string then a range of characters
in the padding string are repaced with those in the target string. Which characters
are replaced depends on the value of the third argument, which gives the type of
alignment. It can be one of 'left', 'right' or 'center'. If no third argument is
given or if it is not one of these values, then it defaults to left alignment.
<p>
With left alignment, the range of characters replaced by the target string begins
with the first character in the padding string. With right alignment, the range of
characters replaced by the target string ends with the last character in the padding
string. With center alignment, the range of characters replaced by the target string
is in the middle of the padding string, such that either the number of unreplaced
characters on either side of the range is the same or there is one less on the left
than there is on the right.
<p>
If the target string is longer than the padding string, then it is truncated to be
the same length as the padding string and returned.

@param targetStr The target string
@param paddingStr The padding string
@param type The type of alignment

@return The string after alignment
"
      end

      operation 3650946 "align"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "targetStr" type class_ref 128130 // String
	  param inout name "paddingStr" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above
"
      end

      operation 3651074 "concat"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "nl" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The str:concat function takes a node set and returns the concatenation of the
string values of the nodes in that node set. If the node set is empty, it returns
an empty string.

@param nl A node set
@return The concatenation of the string values of the nodes in that node set
"
      end

      operation 3651202 "padding"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param in name "length" explicit_type "double"
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The str:padding function creates a padding string of a certain length.
The first argument gives the length of the padding string to be created.
The second argument gives a string to be used to create the padding. This
string is repeated as many times as is necessary to create a string of the
length specified by the first argument; if the string is more than a character
long, it may have to be truncated to produce the required length. If no second
argument is specified, it defaults to a space (' '). If the second argument is
an empty string, str:padding returns an empty string.

@param length The length of the padding string to be created
@param pattern The string to be used as pattern

@return A padding string of the given length
"
      end

      operation 3651330 "padding"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "length" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above
"
      end

      operation 3651458 "split"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 2
	  param inout name "str" type class_ref 128130 // String
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The str:split function splits up a string and returns a node set of token
elements, each containing one token from the string.
<p>
The first argument is the string to be split. The second argument is a pattern
string. The string given by the first argument is split at any occurrence of
this pattern. For example:
<pre>
str:split('a, simple, list', ', ') gives the node set consisting of:

<token>a</token>
<token>simple</token>
<token>list</token>
</pre>
If the second argument is omitted, the default is the string '&#x20;' (i.e. a space).

@param str The string to be split
@param pattern The pattern

@return A node set of split tokens
"
      end

      operation 3651586 "split"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above
"
      end

      operation 3651714 "tokenize"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 2
	  param inout name "toTokenize" type class_ref 128130 // String
	  param inout name "delims" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The str:tokenize function splits up a string and returns a node set of token
elements, each containing one token from the string.
<p>
The first argument is the string to be tokenized. The second argument is a
string consisting of a number of characters. Each character in this string is
taken as a delimiting character. The string given by the first argument is split
at any occurrence of any of these characters. For example:
<pre>
str:tokenize('2001-06-03T11:40:23', '-T:') gives the node set consisting of:

<token>2001</token>
<token>06</token>
<token>03</token>
<token>11</token>
<token>40</token>
<token>23</token>
</pre>
If the second argument is omitted, the default is the string '&#x9;&#xA;&#xD;&#x20;'
(i.e. whitespace characters).
<p>
If the second argument is an empty string, the function returns a set of token
elements, each of which holds a single character.
<p>
Note: This one is different from the tokenize extension function in the Xalan
namespace. The one in Xalan returns a set of Text nodes, while this one wraps
the Text nodes inside the token Element nodes.

@param toTokenize The string to be tokenized
@param delims The delimiter string

@return A node set of split token elements
"
      end

      operation 3651842 "tokenize"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 1
	  param inout name "toTokenize" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See above
"
      end

      operation 3651970 "getDocument"
	class_operation private return_type class_ref 378626 // Document
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return an instance of DOM Document
"
      end
    end

    class 584962 "Extensions"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class contains many of the Xalan-supplied extensions.
It is accessed by specifying a namespace URI as follows:
<pre>
   xmlns:xalan=\"http://xml.apache.org/xalan\"
</pre>
@xsl.usage general
"
      classrelation 1186306 // JDK_DEFAULT_DOM (<unidirectional association>)
	relation 1186306 --->
	  a role_name "JDK_DEFAULT_DOM" init_value " \"com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1186306 // JDK_DEFAULT_DOM (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 3652098 "Extensions"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor Extensions

"
      end

      operation 3652226 "nodeset"
	class_operation public return_type class_ref 584066 // NodeSet
	nparams 2
	  param inout name "myProcessor" type class_ref 582914 // ExpressionContext
	  param inout name "rtf" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Make sure class cannot be instantiated

This method is an extension that implements as a Xalan extension
the node-set function also found in xt and saxon.
If the argument is a Result Tree Fragment, then <code>nodeset</code>
returns a node-set consisting of a single root node as described in
section 11.1 of the XSLT 1.0 Recommendation.  If the argument is a
node-set, <code>nodeset</code> returns a node-set.  If the argument
is a string, number, or boolean, then <code>nodeset</code> returns
a node-set consisting of a single root node with a single text node
child that is the result of calling the XPath string() function on the
passed parameter.  If the argument is anything else, then a node-set
is returned consisting of a single root node with a single text node
child that is the result of calling the java <code>toString()</code>
method on the passed argument.
Most of the
actual work here is done in <code>MethodResolver</code> and
<code>XRTreeFrag</code>.
@param myProcessor Context passed by the extension processor
@param rtf Argument in the stylesheet to the nodeset extension function

NEEDSDOC ($objectName$) @return
"
      end

      operation 3652354 "intersection"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 2
	  param inout name "nl1" type class_ref 333058 // NodeList
	  param inout name "nl2" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the intersection of two node-sets.

@param nl1 NodeList for first node-set
@param nl2 NodeList for second node-set
@return a NodeList containing the nodes in nl1 that are also in nl2

Note: The usage of this extension function in the xalan namespace
is deprecated. Please use the same function in the EXSLT sets extension
(http://exslt.org/sets).
"
      end

      operation 3652482 "difference"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 2
	  param inout name "nl1" type class_ref 333058 // NodeList
	  param inout name "nl2" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the difference between two node-sets.

@param nl1 NodeList for first node-set
@param nl2 NodeList for second node-set
@return a NodeList containing the nodes in nl1 that are not in nl2

Note: The usage of this extension function in the xalan namespace
is deprecated. Please use the same function in the EXSLT sets extension
(http://exslt.org/sets).
"
      end

      operation 3652610 "distinct"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 1
	  param inout name "nl" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns node-set containing distinct string values.

@param nl NodeList for node-set
@return a NodeList with nodes from nl containing distinct string values.
In other words, if more than one node in nl contains the same string value,
only include the first such node found.

Note: The usage of this extension function in the xalan namespace
is deprecated. Please use the same function in the EXSLT sets extension
(http://exslt.org/sets).
"
      end

      operation 3652738 "hasSameNodes"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "nl1" type class_ref 333058 // NodeList
	  param inout name "nl2" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if both node-sets contain the same set of nodes.

@param nl1 NodeList for first node-set
@param nl2 NodeList for second node-set
@return true if nl1 and nl2 contain exactly the same set of nodes.
"
      end

      operation 3652866 "evaluate"
	class_operation public return_type class_ref 583298 // XObject
	nparams 2
	  param inout name "myContext" type class_ref 582914 // ExpressionContext
	  param inout name "xpathExpr" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 584450 // SAXNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of evaluating the argument as a string containing
an XPath expression.  Used where the XPath expression is not known until
run-time.  The expression is evaluated as if the run-time value of the
argument appeared in place of the evaluate function call at compile time.

@param myContext an <code>ExpressionContext</code> passed in by the
                 extension mechanism.  This must be an XPathContext.
@param xpathExpr The XPath expression to be evaluated.
@return the XObject resulting from evaluating the XPath

@throws SAXNotSupportedException

Note: The usage of this extension function in the xalan namespace
is deprecated. Please use the same function in the EXSLT dynamic extension
(http://exslt.org/dynamic).
"
      end

      operation 3652994 "tokenize"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 2
	  param inout name "toTokenize" type class_ref 128130 // String
	  param inout name "delims" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a NodeSet containing one text node for each token in the first argument.
Delimiters are specified in the second argument.
Tokens are determined by a call to <code>StringTokenizer</code>.
If the first argument is an empty string or contains only delimiters, the result
will be an empty NodeSet.

Contributed to XalanJ1 by <a href=\"mailto:benoit.cerrina@writeme.com\">Benoit Cerrina</a>.

@param toTokenize The string to be split into text tokens.
@param delims The delimiters to use.
@return a NodeSet as described above.
"
      end

      operation 3653122 "tokenize"
	class_operation public return_type class_ref 333058 // NodeList
	nparams 1
	  param inout name "toTokenize" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a NodeSet containing one text node for each token in the first argument.
Delimiters are whitespace.  That is, the delimiters that are used are tab (&#x09),
linefeed (&#x0A), return (&#x0D), and space (&#x20).
Tokens are determined by a call to <code>StringTokenizer</code>.
If the first argument is an empty string or contains only delimiters, the result
will be an empty NodeSet.

Contributed to XalanJ1 by <a href=\"mailto:benoit.cerrina@writeme.com\">Benoit Cerrina</a>.

@param toTokenize The string to be split into text tokens.
@return a NodeSet as described above.
"
      end

      operation 3653250 "checkEnvironment"
	class_operation public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "myContext" type class_ref 582914 // ExpressionContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a Node of basic debugging information from the
EnvironmentCheck utility about the Java environment.

<p>Simply calls the {@link com.sun.org.apache.xalan.internal.xslt.EnvironmentCheck}
utility to grab info about the Java environment and CLASSPATH,
etc., and then returns the resulting Node.  Stylesheets can
then maniuplate this data or simply xsl:copy-of the Node.  Note
that we first attempt to load the more advanced
org.apache.env.Which utility by reflection; only if that fails
to we still use the internal version.  Which is available from
<a href=\"http://xml.apache.org/commons/\">http://xml.apache.org/commons/</a>.</p>

<p>We throw a WrappedRuntimeException in the unlikely case
that reading information from the environment throws us an
exception. (Is this really the best thing to do?)</p>

@param myContext an <code>ExpressionContext</code> passed in by the
                 extension mechanism.  This must be an XPathContext.
@return a Node as described above.
"
      end

      operation 3653378 "checkEnvironmentUsingWhich"
	class_operation private return_type class_ref 317570 // Node
	nparams 2
	  param inout name "myContext" type class_ref 582914 // ExpressionContext
	  param inout name "factoryDocument" type class_ref 378626 // Document
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private worker method to attempt to use org.apache.env.Which.

@param myContext an <code>ExpressionContext</code> passed in by the
                 extension mechanism.  This must be an XPathContext.
@param factoryDocument providing createElement services, etc.
@return a Node with environment info; null if any error
"
      end

      operation 3653506 "getDocument"
	class_operation private return_type class_ref 378626 // Document
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return an instance of DOM Document
"
      end
    end

    class 585090 "NodeInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>NodeInfo</code> defines a set of XSLT extension functions to be
used from stylesheets.

@author <a href=\"mailto:ovidiu@cup.hp.com\">Ovidiu Predescu</a>
@since May 24, 2001
"
      operation 3653634 "systemId"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "context" type class_ref 582914 // ExpressionContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>systemId</code> returns the system id of the current
context node.

@param context an <code>ExpressionContext</code> value
@return a <code>String</code> value
"
      end

      operation 3653762 "systemId"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "nodeList" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>systemId</code> returns the system id of the node passed as
argument. If a node set is passed as argument, the system id of
the first node in the set is returned.

@param nodeList a <code>NodeList</code> value
@return a <code>String</code> value
"
      end

      operation 3653890 "publicId"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "context" type class_ref 582914 // ExpressionContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>publicId</code> returns the public identifier of the current
context node.

Xalan does not currently record this value, and will return null.

@param context an <code>ExpressionContext</code> value
@return a <code>String</code> value
"
      end

      operation 3654018 "publicId"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "nodeList" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>publicId</code> returns the public identifier of the node passed as
argument. If a node set is passed as argument, the public identifier of
the first node in the set is returned.

Xalan does not currently record this value, and will return null.

@param nodeList a <code>NodeList</code> value
@return a <code>String</code> value
"
      end

      operation 3654146 "lineNumber"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "context" type class_ref 582914 // ExpressionContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>lineNumber</code> returns the line number of the current
context node.

NOTE: Xalan does not normally record location information for each node.
To obtain it, you must set the custom TrAX attribute
\"http://xml.apache.org/xalan/features/source_location\"
true in the TransformerFactory before generating the Transformer and executing
the stylesheet. Storage cost per node will be noticably increased in this mode.

@param context an <code>ExpressionContext</code> value
@return an <code>int</code> value. This may be -1 to indicate that the
line number is not known.
"
      end

      operation 3654274 "lineNumber"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "nodeList" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>lineNumber</code> returns the line number of the node
passed as argument. If a node set is passed as argument, the line
number of the first node in the set is returned.

NOTE: Xalan does not normally record location information for each node.
To obtain it, you must set the custom TrAX attribute
\"http://xml.apache.org/xalan/features/source_location\"
true in the TransformerFactory before generating the Transformer and executing
the stylesheet. Storage cost per node will be noticably increased in this mode.

@param nodeList a <code>NodeList</code> value
@return an <code>int</code> value. This may be -1 to indicate that the
line number is not known.
"
      end

      operation 3654402 "columnNumber"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "context" type class_ref 582914 // ExpressionContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>columnNumber</code> returns the column number of the
current context node.

NOTE: Xalan does not normally record location information for each node.
To obtain it, you must set the custom TrAX attribute
\"http://xml.apache.org/xalan/features/source_location\"
true in the TransformerFactory before generating the Transformer and executing
the stylesheet. Storage cost per node will be noticably increased in this mode.

@param context an <code>ExpressionContext</code> value
@return an <code>int</code> value. This may be -1 to indicate that the
column number is not known.
"
      end

      operation 3654530 "columnNumber"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "nodeList" type class_ref 333058 // NodeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>columnNumber</code> returns the column number of the node
passed as argument. If a node set is passed as argument, the line
number of the first node in the set is returned.

NOTE: Xalan does not normally record location information for each node.
To obtain it, you must set the custom TrAX attribute
\"http://xml.apache.org/xalan/features/source_location\"
true in the TransformerFactory before generating the Transformer and executing
the stylesheet. Storage cost per node will be noticably increased in this mode.

@param nodeList a <code>NodeList</code> value
@return an <code>int</code> value. This may be -1 to indicate that the
column number is not known.
"
      end
    end
  end

  deploymentview 150018 "lib"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 400514 "ExsltBase"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
${definition}"
      associated_elems
	class_ref 583810 // ExsltBase
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: ExsltBase.java,v 1.1.2.1 2005/08/01 02:08:51 jeffsuttor Exp $
"
    end

    artifact 400642 "ExsltCommon"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xalan.internal.extensions.ExpressionContext;
import com.sun.org.apache.xml.internal.dtm.DTMIterator;
import com.sun.org.apache.xml.internal.dtm.ref.DTMNodeIterator;
import com.sun.org.apache.xpath.internal.NodeSet;
${definition}"
      associated_elems
	class_ref 583938 // ExsltCommon
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: ExsltCommon.java,v 1.2.4.1 2005/09/15 02:45:24 jeffsuttor Exp $
"
    end

    artifact 400770 "ExsltDatetime"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import com.sun.org.apache.xpath.internal.objects.XBoolean;
import com.sun.org.apache.xpath.internal.objects.XNumber;
import com.sun.org.apache.xpath.internal.objects.XObject;
${definition}"
      associated_elems
	class_ref 584194 // ExsltDatetime
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: ExsltDatetime.java,v 1.2.4.1 2005/09/10 18:50:49 jeffsuttor Exp $
"
    end

    artifact 400898 "ExsltDynamic"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.TransformerException;
import com.sun.org.apache.xalan.internal.extensions.ExpressionContext;
import com.sun.org.apache.xalan.internal.res.XSLMessages;
import com.sun.org.apache.xalan.internal.res.XSLTErrorResources;
import com.sun.org.apache.xpath.internal.NodeSet;
import com.sun.org.apache.xpath.internal.NodeSetDTM;
import com.sun.org.apache.xpath.internal.XPath;
import com.sun.org.apache.xpath.internal.XPathContext;
import com.sun.org.apache.xpath.internal.objects.XBoolean;
import com.sun.org.apache.xpath.internal.objects.XNodeSet;
import com.sun.org.apache.xpath.internal.objects.XNumber;
import com.sun.org.apache.xpath.internal.objects.XObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
import org.xml.sax.SAXNotSupportedException;
${definition}"
      associated_elems
	class_ref 584322 // ExsltDynamic
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: ExsltDynamic.java,v 1.1.2.1 2005/08/01 02:08:51 jeffsuttor Exp $
"
    end

    artifact 401026 "ExsltMath"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xpath.internal.NodeSet;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
${definition}"
      associated_elems
	class_ref 584578 // ExsltMath
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: ExsltMath.java,v 1.1.2.1 2005/08/01 02:08:50 jeffsuttor Exp $
"
    end

    artifact 401154 "ExsltSets"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.utils.DOMHelper;
import com.sun.org.apache.xpath.internal.NodeSet;
import java.util.HashMap;
import java.util.Map;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
${definition}"
      associated_elems
	class_ref 584706 // ExsltSets
      end
      comment "Copyright (c) 2005, 2015, Oracle and/or its affiliates. All rights reserved.


Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: ExsltSets.java,v 1.1.2.1 2005/08/01 02:08:50 jeffsuttor Exp $
"
    end

    artifact 401282 "ExsltStrings"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.StringTokenizer;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;
import com.sun.org.apache.xpath.internal.NodeSet;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
${definition}"
      associated_elems
	class_ref 584834 // ExsltStrings
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: ExsltStrings.java,v 1.1.2.1 2005/08/01 02:08:48 jeffsuttor Exp $
"
    end

    artifact 401410 "Extensions"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xalan.internal.extensions.ExpressionContext;
import com.sun.org.apache.xalan.internal.utils.ObjectFactory;
import com.sun.org.apache.xalan.internal.xslt.EnvironmentCheck;
import com.sun.org.apache.xpath.internal.NodeSet;
import com.sun.org.apache.xpath.internal.objects.XBoolean;
import com.sun.org.apache.xpath.internal.objects.XNumber;
import com.sun.org.apache.xpath.internal.objects.XObject;
import java.util.Hashtable;
import java.util.Map;
import java.util.StringTokenizer;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
import org.w3c.dom.traversal.NodeIterator;
import org.xml.sax.SAXNotSupportedException;
${definition}"
      associated_elems
	class_ref 584962 // Extensions
      end
      comment "Copyright (c) 2005, 2015, Oracle and/or its affiliates. All rights reserved.


Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: Extensions.java,v 1.2.4.1 2005/09/10 18:53:32 jeffsuttor Exp $
"
    end

    artifact 401538 "NodeInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.SourceLocator;
import com.sun.org.apache.xalan.internal.extensions.ExpressionContext;
import com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
${definition}"
      associated_elems
	class_ref 585090 // NodeInfo
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: NodeInfo.java,v 1.2.4.1 2005/09/10 18:54:37 jeffsuttor Exp $
"
    end
  end
end
