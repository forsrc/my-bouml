class ChildTraverser
!!!4019458.java!!!	getNextIndexed(in axisRoot : int, in nextPotential : int, in expandedTypeID : int) : int

      int nsIndex = m_expandedNameTable.getNamespaceID(expandedTypeID);
      int lnIndex = m_expandedNameTable.getLocalNameID(expandedTypeID);

      for (; ; )
      {
        int nextID = findElementFromIndex(nsIndex, lnIndex, nextPotential);

        if (NOTPROCESSED != nextID)
        {
          int parentID = m_parent.elementAt(nextID);

          // Is it a child?
          if(parentID == axisRoot)
            return nextID;

          // If the parent occured before the subtree root, then
          // we know it is past the child axis.
          if(parentID < axisRoot)
              return NULL;

          // Otherwise, it could be a descendant below the subtree root
          // children, or it could be after the subtree root.  So we have
          // to climb up until the parent is less than the subtree root, in
          // which case we return NULL, or until it is equal to the subtree
          // root, in which case we continue to look.
          do
          {
            parentID = m_parent.elementAt(parentID);
            if(parentID < axisRoot)
              return NULL;
          }
            while(parentID > axisRoot);

          // System.out.println("Found node via index: "+first);
          nextPotential = nextID+1;
          continue;
        }

        nextNode();

        if(!(m_nextsib.elementAt(axisRoot) == NOTPROCESSED))
          break;
      }

      return DTM.NULL;
!!!4019586.java!!!	first(in context : int) : int
      return getFirstChild(context);
!!!4019714.java!!!	first(in context : int, in expandedTypeID : int) : int
      if(true)
      {
        int identity = makeNodeIdentity(context);

        int firstMatch = getNextIndexed(identity, _firstch(identity),
                                 expandedTypeID);

        return makeNodeHandle(firstMatch);
      }
      else
      {
                                // %REVIEW% Dead code. Eliminate?
        for (int current = _firstch(makeNodeIdentity(context));
             DTM.NULL != current;
             current = _nextsib(current))
        {
          if (m_exptype.elementAt(current) == expandedTypeID)
              return makeNodeHandle(current);
        }
        return NULL;
      }
!!!4019842.java!!!	next(in context : int, in current : int) : int
      return getNextSibling(current);
!!!4019970.java!!!	next(in context : int, in current : int, in expandedTypeID : int) : int
                        // Process in Identifier space
      for (current = _nextsib(makeNodeIdentity(current));
           DTM.NULL != current;
           current = _nextsib(current))
      {
        if (m_exptype.elementAt(current) == expandedTypeID)
            return makeNodeHandle(current);
      }

      return NULL;
