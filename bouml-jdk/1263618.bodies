class BorderFactory
!!!10415618.java!!!	createLineBorder(inout color : Color) : Border
        return new LineBorder(color, 1);
!!!10415746.java!!!	createLineBorder(inout color : Color, in thickness : int) : Border
        return new LineBorder(color, thickness);
!!!10415874.java!!!	createLineBorder(inout color : Color, in thickness : int, inout rounded : boolean) : Border
        return new LineBorder(color, thickness, rounded);
!!!10416002.java!!!	createRaisedBevelBorder() : Border
        return createSharedBevel(BevelBorder.RAISED);
!!!10416130.java!!!	createLoweredBevelBorder() : Border
        return createSharedBevel(BevelBorder.LOWERED);
!!!10416258.java!!!	createBevelBorder(in type : int) : Border
        return createSharedBevel(type);
!!!10416386.java!!!	createBevelBorder(in type : int, inout highlight : Color, inout shadow : Color) : Border
        return new BevelBorder(type, highlight, shadow);
!!!10416514.java!!!	createBevelBorder(in type : int, inout highlightOuter : Color, inout highlightInner : Color, inout shadowOuter : Color, inout shadowInner : Color) : Border
        return new BevelBorder(type, highlightOuter, highlightInner,
                                        shadowOuter, shadowInner);
!!!10416642.java!!!	createSharedBevel(in type : int) : Border
        if(type == BevelBorder.RAISED) {
            return sharedRaisedBevel;
        } else if(type == BevelBorder.LOWERED) {
            return sharedLoweredBevel;
        }
        return null;
!!!10416770.java!!!	createRaisedSoftBevelBorder() : Border
        if (sharedSoftRaisedBevel == null) {
            sharedSoftRaisedBevel = new SoftBevelBorder(BevelBorder.RAISED);
        }
        return sharedSoftRaisedBevel;
!!!10416898.java!!!	createLoweredSoftBevelBorder() : Border
        if (sharedSoftLoweredBevel == null) {
            sharedSoftLoweredBevel = new SoftBevelBorder(BevelBorder.LOWERED);
        }
        return sharedSoftLoweredBevel;
!!!10417026.java!!!	createSoftBevelBorder(in type : int) : Border
        if (type == BevelBorder.RAISED) {
            return createRaisedSoftBevelBorder();
        }
        if (type == BevelBorder.LOWERED) {
            return createLoweredSoftBevelBorder();
        }
        return null;
!!!10417154.java!!!	createSoftBevelBorder(in type : int, inout highlight : Color, inout shadow : Color) : Border
        return new SoftBevelBorder(type, highlight, shadow);
!!!10417282.java!!!	createSoftBevelBorder(in type : int, inout highlightOuter : Color, inout highlightInner : Color, inout shadowOuter : Color, inout shadowInner : Color) : Border
        return new SoftBevelBorder(type, highlightOuter, highlightInner, shadowOuter, shadowInner);
!!!10417410.java!!!	createEtchedBorder() : Border
        return sharedEtchedBorder;
!!!10417538.java!!!	createEtchedBorder(inout highlight : Color, inout shadow : Color) : Border
        return new EtchedBorder(highlight, shadow);
!!!10417666.java!!!	createEtchedBorder(in type : int) : Border
        switch (type) {
        case EtchedBorder.RAISED:
            if (sharedRaisedEtchedBorder == null) {
                sharedRaisedEtchedBorder = new EtchedBorder
                                           (EtchedBorder.RAISED);
            }
            return sharedRaisedEtchedBorder;
        case EtchedBorder.LOWERED:
            return sharedEtchedBorder;
        default:
            throw new IllegalArgumentException("type must be one of EtchedBorder.RAISED or EtchedBorder.LOWERED");
        }
!!!10417794.java!!!	createEtchedBorder(in type : int, inout highlight : Color, inout shadow : Color) : Border
        return new EtchedBorder(type, highlight, shadow);
!!!10417922.java!!!	createTitledBorder(inout title : String) : TitledBorder
        return new TitledBorder(title);
!!!10418050.java!!!	createTitledBorder(inout border : Border) : TitledBorder
        return new TitledBorder(border);
!!!10418178.java!!!	createTitledBorder(inout border : Border, inout title : String) : TitledBorder
        return new TitledBorder(border, title);
!!!10418306.java!!!	createTitledBorder(inout border : Border, inout title : String, in titleJustification : int, in titlePosition : int) : TitledBorder
        return new TitledBorder(border, title, titleJustification,
                        titlePosition);
!!!10418434.java!!!	createTitledBorder(inout border : Border, inout title : String, in titleJustification : int, in titlePosition : int, inout titleFont : Font) : TitledBorder
        return new TitledBorder(border, title, titleJustification,
                        titlePosition, titleFont);
!!!10418562.java!!!	createTitledBorder(inout border : Border, inout title : String, in titleJustification : int, in titlePosition : int, inout titleFont : Font, inout titleColor : Color) : TitledBorder
        return new TitledBorder(border, title, titleJustification,
                        titlePosition, titleFont, titleColor);
!!!10418690.java!!!	createEmptyBorder() : Border
        return emptyBorder;
!!!10418818.java!!!	createEmptyBorder(in top : int, in left : int, in bottom : int, in right : int) : Border
        return new EmptyBorder(top, left, bottom, right);
!!!10418946.java!!!	createCompoundBorder() : CompoundBorder
        return new CompoundBorder();
!!!10419074.java!!!	createCompoundBorder(inout outsideBorder : Border, inout insideBorder : Border) : CompoundBorder
        return new CompoundBorder(outsideBorder, insideBorder);
!!!10419202.java!!!	createMatteBorder(in top : int, in left : int, in bottom : int, in right : int, inout color : Color) : MatteBorder
        return new MatteBorder(top, left, bottom, right, color);
!!!10419330.java!!!	createMatteBorder(in top : int, in left : int, in bottom : int, in right : int, inout tileIcon : Icon) : MatteBorder
        return new MatteBorder(top, left, bottom, right, tileIcon);
!!!10419458.java!!!	createStrokeBorder(inout stroke : BasicStroke) : Border
        return new StrokeBorder(stroke);
!!!10419586.java!!!	createStrokeBorder(inout stroke : BasicStroke, inout paint : Paint) : Border
        return new StrokeBorder(stroke, paint);
!!!10419714.java!!!	createDashedBorder(inout paint : Paint) : Border
        return createDashedBorder(paint, 1.0f, 1.0f, 1.0f, false);
!!!10419842.java!!!	createDashedBorder(inout paint : Paint, in length : float, in spacing : float) : Border
        return createDashedBorder(paint, 1.0f, length, spacing, false);
!!!10419970.java!!!	createDashedBorder(inout paint : Paint, in thickness : float, in length : float, in spacing : float, inout rounded : boolean) : Border
        boolean shared = !rounded && (paint == null) && (thickness == 1.0f) && (length == 1.0f) && (spacing == 1.0f);
        if (shared && (sharedDashedBorder != null)) {
            return sharedDashedBorder;
        }
        if (thickness < 1.0f) {
            throw new IllegalArgumentException("thickness is less than 1");
        }
        if (length < 1.0f) {
            throw new IllegalArgumentException("length is less than 1");
        }
        if (spacing < 0.0f) {
            throw new IllegalArgumentException("spacing is less than 0");
        }
        int cap = rounded ? BasicStroke.CAP_ROUND : BasicStroke.CAP_SQUARE;
        int join = rounded ? BasicStroke.JOIN_ROUND : BasicStroke.JOIN_MITER;
        float[] array = { thickness * (length - 1.0f), thickness * (spacing + 1.0f) };
        Border border = createStrokeBorder(new BasicStroke(thickness, cap, join, thickness * 2.0f, array, 0.0f), paint);
        if (shared) {
            sharedDashedBorder = border;
        }
        return border;
