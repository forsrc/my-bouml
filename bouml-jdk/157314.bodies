class DynAnyCollectionImpl
!!!298370.java!!!	DynAnyCollectionImpl()
        this(null, (Any)null, false);
!!!298498.java!!!	DynAnyCollectionImpl(inout orb : ORB, inout any : Any, inout copyValue : boolean)
        super(orb, any, copyValue);
!!!298626.java!!!	DynAnyCollectionImpl(inout orb : ORB, inout typeCode : TypeCode)
        super(orb, typeCode);
!!!298754.java!!!	createDefaultComponentAt(in i : int, inout contentType : TypeCode) : void
        try {
            components[i] = DynAnyUtil.createMostDerivedDynAny(contentType, orb);
        } catch (InconsistentTypeCode itc) { // impossible
        }
        // get a hold of the default initialized Any without copying
        anys[i] = getAny(components[i]);
!!!298882.java!!!	getContentType() : TypeCode
        try {
            return any.type().content_type();
        } catch (BadKind badKind) { // impossible
            return null;
        }
!!!299010.java!!!	getBound() : int
        try {
            return any.type().length();
        } catch (BadKind badKind) { // impossible
            return 0;
        }
!!!299138.java!!!	get_elements() : Any
        if (status == STATUS_DESTROYED) {
            throw wrapper.dynAnyDestroyed() ;
        }
        return (checkInitComponents() ? anys : null);
!!!299394.java!!!	set_elements(inout value : Any [[]]) : void
        if (status == STATUS_DESTROYED) {
            throw wrapper.dynAnyDestroyed() ;
        }
        checkValue(value);

        components = new DynAny[value.length];
        anys = value;

        // We know that this is of kind tk_sequence or tk_array
        TypeCode expectedTypeCode = getContentType();
        for (int i=0; i<value.length; i++) {
            if (value[i] != null) {
                if (! value[i].type().equal(expectedTypeCode)) {
                    clearData();
                    // _REVISIT_ More info
                    throw new TypeMismatch();
                }
                try {
                    // Creates the appropriate subtype without copying the Any
                    components[i] = DynAnyUtil.createMostDerivedDynAny(value[i], orb, false);
                    //System.out.println(this + " created component " + components[i]);
                } catch (InconsistentTypeCode itc) {
                    throw new InvalidValue();
                }
            } else {
                clearData();
                // _REVISIT_ More info
                throw new InvalidValue();
            }
        }
        index = (value.length == 0 ? NO_INDEX : 0);
        // Other representations are invalidated by this operation
        representations = REPRESENTATION_COMPONENTS;
!!!299522.java!!!	get_elements_as_dyn_any() : DynAny
        if (status == STATUS_DESTROYED) {
            throw wrapper.dynAnyDestroyed() ;
        }
        return (checkInitComponents() ? components : null);
!!!299650.java!!!	set_elements_as_dyn_any(inout value : DynAny [[]]) : void
        if (status == STATUS_DESTROYED) {
            throw wrapper.dynAnyDestroyed() ;
        }
        checkValue(value);

        components = (value == null ? emptyComponents : value);
        anys = new Any[value.length];

        // We know that this is of kind tk_sequence or tk_array
        TypeCode expectedTypeCode = getContentType();
        for (int i=0; i<value.length; i++) {
            if (value[i] != null) {
                if (! value[i].type().equal(expectedTypeCode)) {
                    clearData();
                    // _REVISIT_ More info
                    throw new TypeMismatch();
                }
                anys[i] = getAny(value[i]);
            } else {
                clearData();
                // _REVISIT_ More info
                throw new InvalidValue();
            }
        }
        index = (value.length == 0 ? NO_INDEX : 0);
        // Other representations are invalidated by this operation
        representations = REPRESENTATION_COMPONENTS;
