class AbstractTask
!!!9483394.java!!!	AbstractTask(inout helper : PipelineHelper, inout spliterator : Spliterator)
        super(null);
        this.helper = helper;
        this.spliterator = spliterator;
        this.targetSize = 0L;
!!!9483522.java!!!	AbstractTask(inout parent : K, inout spliterator : Spliterator)
        super(parent);
        this.spliterator = spliterator;
        this.helper = parent.helper;
        this.targetSize = parent.targetSize;
!!!9483906.java!!!	suggestTargetSize(in sizeEstimate : long) : long
        long est = sizeEstimate / LEAF_TARGET;
        return est > 0L ? est : 1L;
!!!9484034.java!!!	getTargetSize(in sizeEstimate : long) : long
        long s;
        return ((s = targetSize) != 0 ? s :
                (targetSize = suggestTargetSize(sizeEstimate)));
!!!9484162.java!!!	getRawResult() : R
        return localResult;
!!!9484290.java!!!	setRawResult(inout result : R) : void
        if (result != null)
            throw new IllegalStateException();
!!!9484418.java!!!	getLocalResult() : R
        return localResult;
!!!9484546.java!!!	setLocalResult(inout localResult : R) : void
        this.localResult = localResult;
!!!9484674.java!!!	isLeaf() : boolean
        return leftChild == null;
!!!9484802.java!!!	isRoot() : boolean
        return getParent() == null;
!!!9484930.java!!!	getParent() : K
        return (K) getCompleter();
!!!9485058.java!!!	compute() : void
        Spliterator<P_IN> rs = spliterator, ls; // right, left spliterators
        long sizeEstimate = rs.estimateSize();
        long sizeThreshold = getTargetSize(sizeEstimate);
        boolean forkRight = false;
        @SuppressWarnings("unchecked") K task = (K) this;
        while (sizeEstimate > sizeThreshold && (ls = rs.trySplit()) != null) {
            K leftChild, rightChild, taskToFork;
            task.leftChild  = leftChild = task.makeChild(ls);
            task.rightChild = rightChild = task.makeChild(rs);
            task.setPendingCount(1);
            if (forkRight) {
                forkRight = false;
                rs = ls;
                task = leftChild;
                taskToFork = rightChild;
            }
            else {
                forkRight = true;
                task = rightChild;
                taskToFork = leftChild;
            }
            taskToFork.fork();
            sizeEstimate = rs.estimateSize();
        }
        task.setLocalResult(task.doLeaf());
        task.tryComplete();
!!!9485186.java!!!	onCompletion(inout caller : CountedCompleter) : void
        spliterator = null;
        leftChild = rightChild = null;
!!!9485314.java!!!	isLeftmostNode() : boolean
        @SuppressWarnings("unchecked")
        K node = (K) this;
        while (node != null) {
            K parent = node.getParent();
            if (parent != null && parent.leftChild != node)
                return false;
            node = parent;
        }
        return true;
