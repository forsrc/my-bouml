class LookAndFeel
!!!2070402.java!!!	installColors(inout c : JComponent, inout defaultBgName : String, inout defaultFgName : String) : void
        Color bg = c.getBackground();
        if (bg == null || bg instanceof UIResource) {
            c.setBackground(UIManager.getColor(defaultBgName));
        }

        Color fg = c.getForeground();
        if (fg == null || fg instanceof UIResource) {
            c.setForeground(UIManager.getColor(defaultFgName));
        }
!!!2070530.java!!!	installColorsAndFont(inout c : JComponent, inout defaultBgName : String, inout defaultFgName : String, inout defaultFontName : String) : void
        Font f = c.getFont();
        if (f == null || f instanceof UIResource) {
            c.setFont(UIManager.getFont(defaultFontName));
        }

        installColors(c, defaultBgName, defaultFgName);
!!!2070658.java!!!	installBorder(inout c : JComponent, inout defaultBorderName : String) : void
        Border b = c.getBorder();
        if (b == null || b instanceof UIResource) {
            c.setBorder(UIManager.getBorder(defaultBorderName));
        }
!!!2070786.java!!!	uninstallBorder(inout c : JComponent) : void
        if (c.getBorder() instanceof UIResource) {
            c.setBorder(null);
        }
!!!2070914.java!!!	installProperty(inout c : JComponent, inout propertyName : String, inout propertyValue : Object) : void
        // this is a special case because the JPasswordField's ancestor hierarchy
        // includes a class outside of javax.swing, thus we cannot call setUIProperty
        // directly.
        if (SunToolkit.isInstanceOf(c, "javax.swing.JPasswordField")) {
            if (!((JPasswordField)c).customSetUIProperty(propertyName, propertyValue)) {
                c.setUIProperty(propertyName, propertyValue);
            }
        } else {
            c.setUIProperty(propertyName, propertyValue);
        }
!!!2071042.java!!!	makeKeyBindings(inout keyBindingList : Object [[]]) : JTextComponent::KeyBinding
        JTextComponent.KeyBinding[] rv = new JTextComponent.KeyBinding[keyBindingList.length / 2];

        for(int i = 0; i < rv.length; i ++) {
            Object o = keyBindingList[2 * i];
            KeyStroke keystroke = (o instanceof KeyStroke)
                ? (KeyStroke) o
                : KeyStroke.getKeyStroke((String) o);
            String action = (String) keyBindingList[2 * i + 1];
            rv[i] = new JTextComponent.KeyBinding(keystroke, action);
        }

        return rv;
!!!2071170.java!!!	makeInputMap(inout keys : Object [[]]) : InputMap
        InputMap retMap = new InputMapUIResource();
        loadKeyBindings(retMap, keys);
        return retMap;
!!!2071298.java!!!	makeComponentInputMap(inout c : JComponent, inout keys : Object [[]]) : ComponentInputMap
        ComponentInputMap retMap = new ComponentInputMapUIResource(c);
        loadKeyBindings(retMap, keys);
        return retMap;
!!!2071426.java!!!	loadKeyBindings(inout retMap : InputMap, inout keys : Object [[]]) : void
        if (keys != null) {
            for (int counter = 0, maxCounter = keys.length;
                 counter < maxCounter; counter++) {
                Object keyStrokeO = keys[counter++];
                KeyStroke ks = (keyStrokeO instanceof KeyStroke) ?
                                (KeyStroke)keyStrokeO :
                                KeyStroke.getKeyStroke((String)keyStrokeO);
                retMap.put(ks, keys[counter]);
            }
        }
!!!2071554.java!!!	makeIcon(in baseClass : Class, in gifFile : String) : Object
        return SwingUtilities2.makeIcon(baseClass, baseClass, gifFile);
!!!2071682.java!!!	getLayoutStyle() : LayoutStyle
        return DefaultLayoutStyle.getInstance();
!!!2071810.java!!!	provideErrorFeedback(inout component : Component) : void
        Toolkit toolkit = null;
        if (component != null) {
            toolkit = component.getToolkit();
        } else {
            toolkit = Toolkit.getDefaultToolkit();
        }
        toolkit.beep();
!!!2071938.java!!!	getDesktopPropertyValue(inout systemPropertyName : String, inout fallbackValue : Object) : Object
        Object value = Toolkit.getDefaultToolkit().getDesktopProperty(systemPropertyName);
        if (value == null) {
            return fallbackValue;
        } else if (value instanceof Color) {
            return new ColorUIResource((Color)value);
        } else if (value instanceof Font) {
            return new FontUIResource((Font)value);
        }
        return value;
!!!2072066.java!!!	getDisabledIcon(inout component : JComponent, inout icon : Icon) : Icon
        if (icon instanceof ImageIcon) {
            return new ImageIconUIResource(GrayFilter.
                   createDisabledImage(((ImageIcon)icon).getImage()));
        }
        return null;
!!!2072194.java!!!	getDisabledSelectedIcon(inout component : JComponent, inout icon : Icon) : Icon
        return getDisabledIcon(component, icon);
!!!2072706.java!!!	getSupportsWindowDecorations() : boolean
        return false;
!!!2073346.java!!!	getDefaults() : UIDefaults
        return null;
!!!2073474.java!!!	toString() : String
        return "[" + getDescription() + " - " + getClass().getName() + "]";
