class JPEGHuffmanTable
!!!9676802.java!!!	JPEGHuffmanTable(inout lengths : short [[]], inout values : short [[]])
        if (lengths == null || values == null ||
            lengths.length == 0 || values.length == 0 ||
            lengths.length > 16 || values.length > 256) {
            throw new IllegalArgumentException("Illegal lengths or values");
        }
        for (int i = 0; i<lengths.length; i++) {
            if (lengths[i] < 0) {
                throw new IllegalArgumentException("lengths["+i+"] < 0");
            }
        }
        for (int i = 0; i<values.length; i++) {
            if (values[i] < 0) {
                throw new IllegalArgumentException("values["+i+"] < 0");
            }
        }
        this.lengths = Arrays.copyOf(lengths, lengths.length);
        this.values = Arrays.copyOf(values, values.length);
        validate();
!!!9676930.java!!!	validate() : void
        int sumOfLengths = 0;
        for (int i=0; i<lengths.length; i++) {
            sumOfLengths += lengths[i];
        }
        if (sumOfLengths != values.length) {
            throw new IllegalArgumentException("lengths do not correspond " +
                                               "to length of value table");
        }
!!!9677058.java!!!	JPEGHuffmanTable(inout lengths : short [[]], inout values : short [[]], inout copy : boolean)
        if (copy) {
            this.lengths = Arrays.copyOf(lengths, lengths.length);
            this.values = Arrays.copyOf(values, values.length);
        } else {
            this.lengths = lengths;
            this.values = values;
        }
!!!9677186.java!!!	getLengths() : short
        return Arrays.copyOf(lengths, lengths.length);
!!!9677314.java!!!	getValues() : short
        return Arrays.copyOf(values, values.length);
!!!9677442.java!!!	toString() : String
        String ls = System.getProperty("line.separator", "\n");
        StringBuilder sb = new StringBuilder("JPEGHuffmanTable");
        sb.append(ls).append("lengths:");
        for (int i=0; i<lengths.length; i++) {
            sb.append(" ").append(lengths[i]);
        }
        sb.append(ls).append("values:");
        for (int i=0; i<values.length; i++) {
            sb.append(" ").append(values[i]);
        }
        return sb.toString();
