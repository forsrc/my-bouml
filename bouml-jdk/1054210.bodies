class YearMonth
!!!8415234.java!!!	now() : YearMonth
        return now(Clock.systemDefaultZone());
!!!8415362.java!!!	now(inout zone : ZoneId) : YearMonth
        return now(Clock.system(zone));
!!!8415490.java!!!	now(inout clock : Clock) : YearMonth
        final LocalDate now = LocalDate.now(clock);  // called once
        return YearMonth.of(now.getYear(), now.getMonth());
!!!8415618.java!!!	of(in year : int, inout month : Month) : YearMonth
        Objects.requireNonNull(month, "month");
        return of(year, month.getValue());
!!!8415746.java!!!	of(in year : int, in month : int) : YearMonth
        YEAR.checkValidValue(year);
        MONTH_OF_YEAR.checkValidValue(month);
        return new YearMonth(year, month);
!!!8415874.java!!!	from(inout temporal : TemporalAccessor) : YearMonth
        if (temporal instanceof YearMonth) {
            return (YearMonth) temporal;
        }
        Objects.requireNonNull(temporal, "temporal");
        try {
            if (IsoChronology.INSTANCE.equals(Chronology.from(temporal)) == false) {
                temporal = LocalDate.from(temporal);
            }
            return of(temporal.get(YEAR), temporal.get(MONTH_OF_YEAR));
        } catch (DateTimeException ex) {
            throw new DateTimeException("Unable to obtain YearMonth from TemporalAccessor: " +
                    temporal + " of type " + temporal.getClass().getName(), ex);
        }
!!!8416002.java!!!	parse(inout text : CharSequence) : YearMonth
        return parse(text, PARSER);
!!!8416130.java!!!	parse(inout text : CharSequence, inout formatter : DateTimeFormatter) : YearMonth
        Objects.requireNonNull(formatter, "formatter");
        return formatter.parse(text, YearMonth::from);
!!!8416258.java!!!	YearMonth(in year : int, in month : int)
        this.year = year;
        this.month = month;
!!!8416386.java!!!	with(in newYear : int, in newMonth : int) : YearMonth
        if (year == newYear && month == newMonth) {
            return this;
        }
        return new YearMonth(newYear, newMonth);
!!!8416514.java!!!	isSupported(inout field : TemporalField) : boolean
        if (field instanceof ChronoField) {
            return field == YEAR || field == MONTH_OF_YEAR ||
                    field == PROLEPTIC_MONTH || field == YEAR_OF_ERA || field == ERA;
        }
        return field != null && field.isSupportedBy(this);
!!!8416642.java!!!	isSupported(inout unit : TemporalUnit) : boolean
        if (unit instanceof ChronoUnit) {
            return unit == MONTHS || unit == YEARS || unit == DECADES || unit == CENTURIES || unit == MILLENNIA || unit == ERAS;
        }
        return unit != null && unit.isSupportedBy(this);
!!!8416770.java!!!	range(inout field : TemporalField) : ValueRange
        if (field == YEAR_OF_ERA) {
            return (getYear() <= 0 ? ValueRange.of(1, Year.MAX_VALUE + 1) : ValueRange.of(1, Year.MAX_VALUE));
        }
        return Temporal.super.range(field);
!!!8416898.java!!!	get(inout field : TemporalField) : int
        return range(field).checkValidIntValue(getLong(field), field);
!!!8417026.java!!!	getLong(inout field : TemporalField) : long
        if (field instanceof ChronoField) {
            switch ((ChronoField) field) {
                case MONTH_OF_YEAR: return month;
                case PROLEPTIC_MONTH: return getProlepticMonth();
                case YEAR_OF_ERA: return (year < 1 ? 1 - year : year);
                case YEAR: return year;
                case ERA: return (year < 1 ? 0 : 1);
            }
            throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
        }
        return field.getFrom(this);
!!!8417154.java!!!	getProlepticMonth() : long
        return (year * 12L + month - 1);
!!!8417282.java!!!	getYear() : int
        return year;
!!!8417410.java!!!	getMonthValue() : int
        return month;
!!!8417538.java!!!	getMonth() : Month
        return Month.of(month);
!!!8417666.java!!!	isLeapYear() : boolean
        return IsoChronology.INSTANCE.isLeapYear(year);
!!!8417794.java!!!	isValidDay(in dayOfMonth : int) : boolean
        return dayOfMonth >= 1 && dayOfMonth <= lengthOfMonth();
!!!8417922.java!!!	lengthOfMonth() : int
        return getMonth().length(isLeapYear());
!!!8418050.java!!!	lengthOfYear() : int
        return (isLeapYear() ? 366 : 365);
!!!8418178.java!!!	with(inout adjuster : TemporalAdjuster) : YearMonth
        return (YearMonth) adjuster.adjustInto(this);
!!!8418306.java!!!	with(inout field : TemporalField, in newValue : long) : YearMonth
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            f.checkValidValue(newValue);
            switch (f) {
                case MONTH_OF_YEAR: return withMonth((int) newValue);
                case PROLEPTIC_MONTH: return plusMonths(newValue - getProlepticMonth());
                case YEAR_OF_ERA: return withYear((int) (year < 1 ? 1 - newValue : newValue));
                case YEAR: return withYear((int) newValue);
                case ERA: return (getLong(ERA) == newValue ? this : withYear(1 - year));
            }
            throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
        }
        return field.adjustInto(this, newValue);
!!!8418434.java!!!	withYear(in year : int) : YearMonth
        YEAR.checkValidValue(year);
        return with(year, month);
!!!8418562.java!!!	withMonth(in month : int) : YearMonth
        MONTH_OF_YEAR.checkValidValue(month);
        return with(year, month);
!!!8418690.java!!!	plus(inout amountToAdd : TemporalAmount) : YearMonth
        return (YearMonth) amountToAdd.addTo(this);
!!!8418818.java!!!	plus(in amountToAdd : long, inout unit : TemporalUnit) : YearMonth
        if (unit instanceof ChronoUnit) {
            switch ((ChronoUnit) unit) {
                case MONTHS: return plusMonths(amountToAdd);
                case YEARS: return plusYears(amountToAdd);
                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));
                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));
                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));
                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));
            }
            throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
        }
        return unit.addTo(this, amountToAdd);
!!!8418946.java!!!	plusYears(in yearsToAdd : long) : YearMonth
        if (yearsToAdd == 0) {
            return this;
        }
        int newYear = YEAR.checkValidIntValue(year + yearsToAdd);  // safe overflow
        return with(newYear, month);
!!!8419074.java!!!	plusMonths(in monthsToAdd : long) : YearMonth
        if (monthsToAdd == 0) {
            return this;
        }
        long monthCount = year * 12L + (month - 1);
        long calcMonths = monthCount + monthsToAdd;  // safe overflow
        int newYear = YEAR.checkValidIntValue(Math.floorDiv(calcMonths, 12));
        int newMonth = (int)Math.floorMod(calcMonths, 12) + 1;
        return with(newYear, newMonth);
!!!8419202.java!!!	minus(inout amountToSubtract : TemporalAmount) : YearMonth
        return (YearMonth) amountToSubtract.subtractFrom(this);
!!!8419330.java!!!	minus(in amountToSubtract : long, inout unit : TemporalUnit) : YearMonth
        return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));
!!!8419458.java!!!	minusYears(in yearsToSubtract : long) : YearMonth
        return (yearsToSubtract == Long.MIN_VALUE ? plusYears(Long.MAX_VALUE).plusYears(1) : plusYears(-yearsToSubtract));
!!!8419586.java!!!	minusMonths(in monthsToSubtract : long) : YearMonth
        return (monthsToSubtract == Long.MIN_VALUE ? plusMonths(Long.MAX_VALUE).plusMonths(1) : plusMonths(-monthsToSubtract));
!!!8419714.java!!!	query(inout query : TemporalQuery) : R
        if (query == TemporalQueries.chronology()) {
            return (R) IsoChronology.INSTANCE;
        } else if (query == TemporalQueries.precision()) {
            return (R) MONTHS;
        }
        return Temporal.super.query(query);
!!!8419842.java!!!	adjustInto(inout temporal : Temporal) : Temporal
        if (Chronology.from(temporal).equals(IsoChronology.INSTANCE) == false) {
            throw new DateTimeException("Adjustment only supported on ISO date-time");
        }
        return temporal.with(PROLEPTIC_MONTH, getProlepticMonth());
!!!8419970.java!!!	until(inout endExclusive : Temporal, inout unit : TemporalUnit) : long
        YearMonth end = YearMonth.from(endExclusive);
        if (unit instanceof ChronoUnit) {
            long monthsUntil = end.getProlepticMonth() - getProlepticMonth();  // no overflow
            switch ((ChronoUnit) unit) {
                case MONTHS: return monthsUntil;
                case YEARS: return monthsUntil / 12;
                case DECADES: return monthsUntil / 120;
                case CENTURIES: return monthsUntil / 1200;
                case MILLENNIA: return monthsUntil / 12000;
                case ERAS: return end.getLong(ERA) - getLong(ERA);
            }
            throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
        }
        return unit.between(this, end);
!!!8420098.java!!!	format(inout formatter : DateTimeFormatter) : String
        Objects.requireNonNull(formatter, "formatter");
        return formatter.format(this);
!!!8420226.java!!!	atDay(in dayOfMonth : int) : LocalDate
        return LocalDate.of(year, month, dayOfMonth);
!!!8420354.java!!!	atEndOfMonth() : LocalDate
        return LocalDate.of(year, month, lengthOfMonth());
!!!8420482.java!!!	compareTo(inout other : YearMonth) : int
        int cmp = (year - other.year);
        if (cmp == 0) {
            cmp = (month - other.month);
        }
        return cmp;
!!!8420610.java!!!	isAfter(inout other : YearMonth) : boolean
        return compareTo(other) > 0;
!!!8420738.java!!!	isBefore(inout other : YearMonth) : boolean
        return compareTo(other) < 0;
!!!8420866.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj instanceof YearMonth) {
            YearMonth other = (YearMonth) obj;
            return year == other.year && month == other.month;
        }
        return false;
!!!8420994.java!!!	hashCode() : int
        return year ^ (month << 27);
!!!8421122.java!!!	toString() : String
        int absYear = Math.abs(year);
        StringBuilder buf = new StringBuilder(9);
        if (absYear < 1000) {
            if (year < 0) {
                buf.append(year - 10000).deleteCharAt(1);
            } else {
                buf.append(year + 10000).deleteCharAt(0);
            }
        } else {
            buf.append(year);
        }
        return buf.append(month < 10 ? "-0" : "-")
            .append(month)
            .toString();
!!!8421250.java!!!	writeReplace() : Object
        return new Ser(Ser.YEAR_MONTH_TYPE, this);
!!!8421378.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8421506.java!!!	writeExternal(inout out : DataOutput) : void
        out.writeInt(year);
        out.writeByte(month);
!!!8421634.java!!!	readExternal(inout in : DataInput) : YearMonth
        int year = in.readInt();
        byte month = in.readByte();
        return YearMonth.of(year, month);
