class HijrahChronology
!!!8465154.java!!!	registerVariants() : void
        for (String name : calendarProperties.stringPropertyNames()) {
            if (name.startsWith(PROP_PREFIX)) {
                String id = name.substring(PROP_PREFIX.length());
                if (id.indexOf('.') >= 0) {
                    continue;   // no name or not a simple name of a calendar
                }
                if (id.equals(INSTANCE.getId())) {
                    continue;           // do not duplicate the default
                }
                try {
                    // Create and register the variant
                    HijrahChronology chrono = new HijrahChronology(id);
                    AbstractChronology.registerChrono(chrono);
                } catch (DateTimeException ex) {
                    // Log error and continue
                    PlatformLogger logger = PlatformLogger.getLogger("java.time.chrono");
                    logger.severe("Unable to initialize Hijrah calendar: " + id, ex);
                }
            }
        }
!!!8465282.java!!!	HijrahChronology(inout id : String)
        if (id.isEmpty()) {
            throw new IllegalArgumentException("calendar id is empty");
        }
        String propName = PROP_PREFIX + id + PROP_TYPE_SUFFIX;
        String calType = calendarProperties.getProperty(propName);
        if (calType == null || calType.isEmpty()) {
            throw new DateTimeException("calendarType is missing or empty for: " + propName);
        }
        this.typeId = id;
        this.calendarType = calType;
!!!8465410.java!!!	checkCalendarInit() : void
        // Keep this short so it can be inlined for performance
        if (initComplete == false) {
            loadCalendarData();
            initComplete = true;
        }
!!!8465538.java!!!	getId() : String
        return typeId;
!!!8465666.java!!!	getCalendarType() : String
        return calendarType;
!!!8465794.java!!!	date(inout era : Era, in yearOfEra : int, in month : int, in dayOfMonth : int) : HijrahDate
        return date(prolepticYear(era, yearOfEra), month, dayOfMonth);
!!!8465922.java!!!	date(in prolepticYear : int, in month : int, in dayOfMonth : int) : HijrahDate
        return HijrahDate.of(this, prolepticYear, month, dayOfMonth);
!!!8466050.java!!!	dateYearDay(inout era : Era, in yearOfEra : int, in dayOfYear : int) : HijrahDate
        return dateYearDay(prolepticYear(era, yearOfEra), dayOfYear);
!!!8466178.java!!!	dateYearDay(in prolepticYear : int, in dayOfYear : int) : HijrahDate
        HijrahDate date = HijrahDate.of(this, prolepticYear, 1, 1);
        if (dayOfYear > date.lengthOfYear()) {
            throw new DateTimeException("Invalid dayOfYear: " + dayOfYear);
        }
        return date.plusDays(dayOfYear - 1);
!!!8466306.java!!!	dateEpochDay(in epochDay : long) : HijrahDate
        return HijrahDate.ofEpochDay(this, epochDay);
!!!8466434.java!!!	dateNow() : HijrahDate
        return dateNow(Clock.systemDefaultZone());
!!!8466562.java!!!	dateNow(inout zone : ZoneId) : HijrahDate
        return dateNow(Clock.system(zone));
!!!8466690.java!!!	dateNow(inout clock : Clock) : HijrahDate
        return date(LocalDate.now(clock));
!!!8466818.java!!!	date(inout temporal : TemporalAccessor) : HijrahDate
        if (temporal instanceof HijrahDate) {
            return (HijrahDate) temporal;
        }
        return HijrahDate.ofEpochDay(this, temporal.getLong(EPOCH_DAY));
!!!8466946.java!!!	localDateTime(inout temporal : TemporalAccessor) : ChronoLocalDateTime
        return (ChronoLocalDateTime<HijrahDate>) super.localDateTime(temporal);
!!!8467074.java!!!	zonedDateTime(inout temporal : TemporalAccessor) : ChronoZonedDateTime
        return (ChronoZonedDateTime<HijrahDate>) super.zonedDateTime(temporal);
!!!8467202.java!!!	zonedDateTime(inout instant : Instant, inout zone : ZoneId) : ChronoZonedDateTime
        return (ChronoZonedDateTime<HijrahDate>) super.zonedDateTime(instant, zone);
!!!8467330.java!!!	isLeapYear(in prolepticYear : long) : boolean
        checkCalendarInit();
        if (prolepticYear < getMinimumYear() || prolepticYear > getMaximumYear()) {
            return false;
        }
        int len = getYearLength((int) prolepticYear);
        return (len > 354);
!!!8467458.java!!!	prolepticYear(inout era : Era, in yearOfEra : int) : int
        if (era instanceof HijrahEra == false) {
            throw new ClassCastException("Era must be HijrahEra");
        }
        return yearOfEra;
!!!8467586.java!!!	eraOf(in eraValue : int) : HijrahEra
        switch (eraValue) {
            case 1:
                return HijrahEra.AH;
            default:
                throw new DateTimeException("invalid Hijrah era");
        }
!!!8467714.java!!!	eras() : List
        return Arrays.<Era>asList(HijrahEra.values());
!!!8467842.java!!!	range(inout field : ChronoField) : ValueRange
        checkCalendarInit();
        if (field instanceof ChronoField) {
            ChronoField f = field;
            switch (f) {
                case DAY_OF_MONTH:
                    return ValueRange.of(1, 1, getMinimumMonthLength(), getMaximumMonthLength());
                case DAY_OF_YEAR:
                    return ValueRange.of(1, getMaximumDayOfYear());
                case ALIGNED_WEEK_OF_MONTH:
                    return ValueRange.of(1, 5);
                case YEAR:
                case YEAR_OF_ERA:
                    return ValueRange.of(getMinimumYear(), getMaximumYear());
                case ERA:
                    return ValueRange.of(1, 1);
                default:
                    return field.range();
            }
        }
        return field.range();
!!!8467970.java!!!	resolveDate(inout fieldValues : Map, inout resolverStyle : ResolverStyle) : HijrahDate
        return (HijrahDate) super.resolveDate(fieldValues, resolverStyle);
!!!8468098.java!!!	checkValidYear(in prolepticYear : long) : int
        if (prolepticYear < getMinimumYear() || prolepticYear > getMaximumYear()) {
            throw new DateTimeException("Invalid Hijrah year: " + prolepticYear);
        }
        return (int) prolepticYear;
!!!8468226.java!!!	checkValidDayOfYear(in dayOfYear : int) : void
        if (dayOfYear < 1 || dayOfYear > getMaximumDayOfYear()) {
            throw new DateTimeException("Invalid Hijrah day of year: " + dayOfYear);
        }
!!!8468354.java!!!	checkValidMonth(in month : int) : void
        if (month < 1 || month > 12) {
            throw new DateTimeException("Invalid Hijrah month: " + month);
        }
!!!8468482.java!!!	getHijrahDateInfo(in epochDay : int) : int
        checkCalendarInit();    // ensure that the chronology is initialized
        if (epochDay < minEpochDay || epochDay >= maxEpochDay) {
            throw new DateTimeException("Hijrah date out of range");
        }

        int epochMonth = epochDayToEpochMonth(epochDay);
        int year = epochMonthToYear(epochMonth);
        int month = epochMonthToMonth(epochMonth);
        int day1 = epochMonthToEpochDay(epochMonth);
        int date = epochDay - day1; // epochDay - dayOfEpoch(year, month);

        int dateInfo[] = new int[3];
        dateInfo[0] = year;
        dateInfo[1] = month + 1; // change to 1-based.
        dateInfo[2] = date + 1; // change to 1-based.
        return dateInfo;
!!!8468610.java!!!	getEpochDay(in prolepticYear : int, in monthOfYear : int, in dayOfMonth : int) : long
        checkCalendarInit();    // ensure that the chronology is initialized
        checkValidMonth(monthOfYear);
        int epochMonth = yearToEpochMonth(prolepticYear) + (monthOfYear - 1);
        if (epochMonth < 0 || epochMonth >= hijrahEpochMonthStartDays.length) {
            throw new DateTimeException("Invalid Hijrah date, year: " +
                    prolepticYear +  ", month: " + monthOfYear);
        }
        if (dayOfMonth < 1 || dayOfMonth > getMonthLength(prolepticYear, monthOfYear)) {
            throw new DateTimeException("Invalid Hijrah day of month: " + dayOfMonth);
        }
        return epochMonthToEpochDay(epochMonth) + (dayOfMonth - 1);
!!!8468738.java!!!	getDayOfYear(in prolepticYear : int, in month : int) : int
        return yearMonthToDayOfYear(prolepticYear, (month - 1));
!!!8468866.java!!!	getMonthLength(in prolepticYear : int, in monthOfYear : int) : int
        int epochMonth = yearToEpochMonth(prolepticYear) + (monthOfYear - 1);
        if (epochMonth < 0 || epochMonth >= hijrahEpochMonthStartDays.length) {
            throw new DateTimeException("Invalid Hijrah date, year: " +
                    prolepticYear +  ", month: " + monthOfYear);
        }
        return epochMonthLength(epochMonth);
!!!8468994.java!!!	getYearLength(in prolepticYear : int) : int
        return yearMonthToDayOfYear(prolepticYear, 12);
!!!8469122.java!!!	getMinimumYear() : int
        return epochMonthToYear(0);
!!!8469250.java!!!	getMaximumYear() : int
        return epochMonthToYear(hijrahEpochMonthStartDays.length - 1) - 1;
!!!8469378.java!!!	getMaximumMonthLength() : int
        return maxMonthLength;
!!!8469506.java!!!	getMinimumMonthLength() : int
        return minMonthLength;
!!!8469634.java!!!	getMaximumDayOfYear() : int
        return maxYearLength;
!!!8469762.java!!!	getSmallestMaximumDayOfYear() : int
        return minYearLength;
!!!8469890.java!!!	epochDayToEpochMonth(in epochDay : int) : int
        // binary search
        int ndx = Arrays.binarySearch(hijrahEpochMonthStartDays, epochDay);
        if (ndx < 0) {
            ndx = -ndx - 2;
        }
        return ndx;
!!!8470018.java!!!	epochMonthToYear(in epochMonth : int) : int
        return (epochMonth + hijrahStartEpochMonth) / 12;
!!!8470146.java!!!	yearToEpochMonth(in year : int) : int
        return (year * 12) - hijrahStartEpochMonth;
!!!8470274.java!!!	epochMonthToMonth(in epochMonth : int) : int
        return (epochMonth + hijrahStartEpochMonth) % 12;
!!!8470402.java!!!	epochMonthToEpochDay(in epochMonth : int) : int
        return hijrahEpochMonthStartDays[epochMonth];

!!!8470530.java!!!	yearMonthToDayOfYear(in prolepticYear : int, in month : int) : int
        int epochMonthFirst = yearToEpochMonth(prolepticYear);
        return epochMonthToEpochDay(epochMonthFirst + month)
                - epochMonthToEpochDay(epochMonthFirst);
!!!8470658.java!!!	epochMonthLength(in epochMonth : int) : int
        // The very last entry in the epochMonth table is not the start of a month
        return hijrahEpochMonthStartDays[epochMonth + 1]
                - hijrahEpochMonthStartDays[epochMonth];
!!!8470786.java!!!	readConfigProperties(in resource : String) : Properties
        try {
            return AccessController
                    .doPrivileged((java.security.PrivilegedExceptionAction<Properties>)
                        () -> {
                        String libDir = System.getProperty("java.home") + File.separator + "lib";
                        File file = new File(libDir, resource);
                        Properties props = new Properties();
                        try (InputStream is = new FileInputStream(file)) {
                            props.load(is);
                        }
                        return props;
                    });
        } catch (PrivilegedActionException pax) {
            throw pax.getException();
        }
!!!8470914.java!!!	loadCalendarData() : void
        try {
            String resourceName = calendarProperties.getProperty(PROP_PREFIX + typeId);
            Objects.requireNonNull(resourceName, "Resource missing for calendar: " + PROP_PREFIX + typeId);
            Properties props = readConfigProperties(resourceName);

            Map<Integer, int[]> years = new HashMap<>();
            int minYear = Integer.MAX_VALUE;
            int maxYear = Integer.MIN_VALUE;
            String id = null;
            String type = null;
            String version = null;
            int isoStart = 0;
            for (Map.Entry<Object, Object> entry : props.entrySet()) {
                String key = (String) entry.getKey();
                switch (key) {
                    case KEY_ID:
                        id = (String)entry.getValue();
                        break;
                    case KEY_TYPE:
                        type = (String)entry.getValue();
                        break;
                    case KEY_VERSION:
                        version = (String)entry.getValue();
                        break;
                    case KEY_ISO_START: {
                        int[] ymd = parseYMD((String) entry.getValue());
                        isoStart = (int) LocalDate.of(ymd[0], ymd[1], ymd[2]).toEpochDay();
                        break;
                    }
                    default:
                        try {
                            // Everything else is either a year or invalid
                            int year = Integer.valueOf(key);
                            int[] months = parseMonths((String) entry.getValue());
                            years.put(year, months);
                            maxYear = Math.max(maxYear, year);
                            minYear = Math.min(minYear, year);
                        } catch (NumberFormatException nfe) {
                            throw new IllegalArgumentException("bad key: " + key);
                        }
                }
            }

            if (!getId().equals(id)) {
                throw new IllegalArgumentException("Configuration is for a different calendar: " + id);
            }
            if (!getCalendarType().equals(type)) {
                throw new IllegalArgumentException("Configuration is for a different calendar type: " + type);
            }
            if (version == null || version.isEmpty()) {
                throw new IllegalArgumentException("Configuration does not contain a version");
            }
            if (isoStart == 0) {
                throw new IllegalArgumentException("Configuration does not contain a ISO start date");
            }

            // Now create and validate the array of epochDays indexed by epochMonth
            hijrahStartEpochMonth = minYear * 12;
            minEpochDay = isoStart;
            hijrahEpochMonthStartDays = createEpochMonths(minEpochDay, minYear, maxYear, years);
            maxEpochDay = hijrahEpochMonthStartDays[hijrahEpochMonthStartDays.length - 1];

            // Compute the min and max year length in days.
            for (int year = minYear; year < maxYear; year++) {
                int length = getYearLength(year);
                minYearLength = Math.min(minYearLength, length);
                maxYearLength = Math.max(maxYearLength, length);
            }
        } catch (Exception ex) {
            // Log error and throw a DateTimeException
            PlatformLogger logger = PlatformLogger.getLogger("java.time.chrono");
            logger.severe("Unable to initialize Hijrah calendar proxy: " + typeId, ex);
            throw new DateTimeException("Unable to initialize HijrahCalendar: " + typeId, ex);
        }
!!!8471042.java!!!	createEpochMonths(in epochDay : int, in minYear : int, in maxYear : int, inout years : Map) : int
        // Compute the size for the array of dates
        int numMonths = (maxYear - minYear + 1) * 12 + 1;

        // Initialize the running epochDay as the corresponding ISO Epoch day
        int epochMonth = 0; // index into array of epochMonths
        int[] epochMonths = new int[numMonths];
        minMonthLength = Integer.MAX_VALUE;
        maxMonthLength = Integer.MIN_VALUE;

        // Only whole years are valid, any zero's in the array are illegal
        for (int year = minYear; year <= maxYear; year++) {
            int[] months = years.get(year);// must not be gaps
            for (int month = 0; month < 12; month++) {
                int length = months[month];
                epochMonths[epochMonth++] = epochDay;

                if (length < 29 || length > 32) {
                    throw new IllegalArgumentException("Invalid month length in year: " + minYear);
                }
                epochDay += length;
                minMonthLength = Math.min(minMonthLength, length);
                maxMonthLength = Math.max(maxMonthLength, length);
            }
        }

        // Insert the final epochDay
        epochMonths[epochMonth++] = epochDay;

        if (epochMonth != epochMonths.length) {
            throw new IllegalStateException("Did not fill epochMonths exactly: ndx = " + epochMonth
                    + " should be " + epochMonths.length);
        }

        return epochMonths;
!!!8471170.java!!!	parseMonths(inout line : String) : int
        int[] months = new int[12];
        String[] numbers = line.split("\\s");
        if (numbers.length != 12) {
            throw new IllegalArgumentException("wrong number of months on line: " + Arrays.toString(numbers) + "; count: " + numbers.length);
        }
        for (int i = 0; i < 12; i++) {
            try {
                months[i] = Integer.valueOf(numbers[i]);
            } catch (NumberFormatException nfe) {
                throw new IllegalArgumentException("bad key: " + numbers[i]);
            }
        }
        return months;
!!!8471298.java!!!	parseYMD(inout string : String) : int
        // yyyy-MM-dd
        string = string.trim();
        try {
            if (string.charAt(4) != '-' || string.charAt(7) != '-') {
                throw new IllegalArgumentException("date must be yyyy-MM-dd");
            }
            int[] ymd = new int[3];
            ymd[0] = Integer.valueOf(string.substring(0, 4));
            ymd[1] = Integer.valueOf(string.substring(5, 7));
            ymd[2] = Integer.valueOf(string.substring(8, 10));
            return ymd;
        } catch (NumberFormatException ex) {
            throw new IllegalArgumentException("date must be yyyy-MM-dd", ex);
        }
!!!8471426.java!!!	writeReplace() : Object
        return super.writeReplace();
!!!8471554.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
