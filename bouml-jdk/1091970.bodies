class Spliterators
!!!8908546.java!!!	emptySpliterator() : Spliterator
        return (Spliterator<T>) EMPTY_SPLITERATOR;
!!!8908674.java!!!	emptyIntSpliterator() : Spliterator::OfInt
        return EMPTY_INT_SPLITERATOR;
!!!8908802.java!!!	emptyLongSpliterator() : Spliterator::OfLong
        return EMPTY_LONG_SPLITERATOR;
!!!8908930.java!!!	emptyDoubleSpliterator() : Spliterator::OfDouble
        return EMPTY_DOUBLE_SPLITERATOR;
!!!8909058.java!!!	spliterator(inout array : Object [[]], in additionalCharacteristics : int) : Spliterator
        return new ArraySpliterator<>(Objects.requireNonNull(array),
                                      additionalCharacteristics);
!!!8909186.java!!!	spliterator(inout array : Object [[]], in fromIndex : int, in toIndex : int, in additionalCharacteristics : int) : Spliterator
        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);
        return new ArraySpliterator<>(array, fromIndex, toIndex, additionalCharacteristics);
!!!8909314.java!!!	spliterator(inout array : int [[]], in additionalCharacteristics : int) : Spliterator::OfInt
        return new IntArraySpliterator(Objects.requireNonNull(array), additionalCharacteristics);
!!!8909442.java!!!	spliterator(inout array : int [[]], in fromIndex : int, in toIndex : int, in additionalCharacteristics : int) : Spliterator::OfInt
        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);
        return new IntArraySpliterator(array, fromIndex, toIndex, additionalCharacteristics);
!!!8909570.java!!!	spliterator(inout array : long [[]], in additionalCharacteristics : int) : Spliterator::OfLong
        return new LongArraySpliterator(Objects.requireNonNull(array), additionalCharacteristics);
!!!8909698.java!!!	spliterator(inout array : long [[]], in fromIndex : int, in toIndex : int, in additionalCharacteristics : int) : Spliterator::OfLong
        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);
        return new LongArraySpliterator(array, fromIndex, toIndex, additionalCharacteristics);
!!!8909826.java!!!	spliterator(inout array : double [[]], in additionalCharacteristics : int) : Spliterator::OfDouble
        return new DoubleArraySpliterator(Objects.requireNonNull(array), additionalCharacteristics);
!!!8909954.java!!!	spliterator(inout array : double [[]], in fromIndex : int, in toIndex : int, in additionalCharacteristics : int) : Spliterator::OfDouble
        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);
        return new DoubleArraySpliterator(array, fromIndex, toIndex, additionalCharacteristics);
!!!8910082.java!!!	checkFromToBounds(in arrayLength : int, in origin : int, in fence : int) : void
        if (origin > fence) {
            throw new ArrayIndexOutOfBoundsException(
                    "origin(" + origin + ") > fence(" + fence + ")");
        }
        if (origin < 0) {
            throw new ArrayIndexOutOfBoundsException(origin);
        }
        if (fence > arrayLength) {
            throw new ArrayIndexOutOfBoundsException(fence);
        }
!!!8910210.java!!!	spliterator(inout c : Collection, in characteristics : int) : Spliterator
        return new IteratorSpliterator<>(Objects.requireNonNull(c),
                                         characteristics);
!!!8910338.java!!!	spliterator(inout iterator : Iterator, in size : long, in characteristics : int) : Spliterator
        return new IteratorSpliterator<>(Objects.requireNonNull(iterator), size,
                                         characteristics);
!!!8910466.java!!!	spliteratorUnknownSize(inout iterator : Iterator, in characteristics : int) : Spliterator
        return new IteratorSpliterator<>(Objects.requireNonNull(iterator), characteristics);
!!!8910594.java!!!	spliterator(inout iterator : PrimitiveIterator::OfInt, in size : long, in characteristics : int) : Spliterator::OfInt
        return new IntIteratorSpliterator(Objects.requireNonNull(iterator),
                                          size, characteristics);
!!!8910722.java!!!	spliteratorUnknownSize(inout iterator : PrimitiveIterator::OfInt, in characteristics : int) : Spliterator::OfInt
        return new IntIteratorSpliterator(Objects.requireNonNull(iterator), characteristics);
!!!8910850.java!!!	spliterator(inout iterator : PrimitiveIterator::OfLong, in size : long, in characteristics : int) : Spliterator::OfLong
        return new LongIteratorSpliterator(Objects.requireNonNull(iterator),
                                           size, characteristics);
!!!8910978.java!!!	spliteratorUnknownSize(inout iterator : PrimitiveIterator::OfLong, in characteristics : int) : Spliterator::OfLong
        return new LongIteratorSpliterator(Objects.requireNonNull(iterator), characteristics);
!!!8911106.java!!!	spliterator(inout iterator : PrimitiveIterator::OfDouble, in size : long, in characteristics : int) : Spliterator::OfDouble
        return new DoubleIteratorSpliterator(Objects.requireNonNull(iterator),
                                             size, characteristics);
!!!8911234.java!!!	spliteratorUnknownSize(inout iterator : PrimitiveIterator::OfDouble, in characteristics : int) : Spliterator::OfDouble
        return new DoubleIteratorSpliterator(Objects.requireNonNull(iterator), characteristics);
!!!8911362.java!!!	iterator(inout spliterator : Spliterator) : Iterator
        Objects.requireNonNull(spliterator);
        class Adapter implements Iterator<T>, Consumer<T> {
            boolean valueReady = false;
            T nextElement;

            @Override
            public void accept(T t) {
                valueReady = true;
                nextElement = t;
            }

            @Override
            public boolean hasNext() {
                if (!valueReady)
                    spliterator.tryAdvance(this);
                return valueReady;
            }

            @Override
            public T next() {
                if (!valueReady && !hasNext())
                    throw new NoSuchElementException();
                else {
                    valueReady = false;
                    return nextElement;
                }
            }
        }

        return new Adapter();
!!!8911490.java!!!	iterator(inout spliterator : Spliterator::OfInt) : PrimitiveIterator::OfInt
        Objects.requireNonNull(spliterator);
        class Adapter implements PrimitiveIterator.OfInt, IntConsumer {
            boolean valueReady = false;
            int nextElement;

            @Override
            public void accept(int t) {
                valueReady = true;
                nextElement = t;
            }

            @Override
            public boolean hasNext() {
                if (!valueReady)
                    spliterator.tryAdvance(this);
                return valueReady;
            }

            @Override
            public int nextInt() {
                if (!valueReady && !hasNext())
                    throw new NoSuchElementException();
                else {
                    valueReady = false;
                    return nextElement;
                }
            }
        }

        return new Adapter();
!!!8911618.java!!!	iterator(inout spliterator : Spliterator::OfLong) : PrimitiveIterator::OfLong
        Objects.requireNonNull(spliterator);
        class Adapter implements PrimitiveIterator.OfLong, LongConsumer {
            boolean valueReady = false;
            long nextElement;

            @Override
            public void accept(long t) {
                valueReady = true;
                nextElement = t;
            }

            @Override
            public boolean hasNext() {
                if (!valueReady)
                    spliterator.tryAdvance(this);
                return valueReady;
            }

            @Override
            public long nextLong() {
                if (!valueReady && !hasNext())
                    throw new NoSuchElementException();
                else {
                    valueReady = false;
                    return nextElement;
                }
            }
        }

        return new Adapter();
!!!8911746.java!!!	iterator(inout spliterator : Spliterator::OfDouble) : PrimitiveIterator::OfDouble
        Objects.requireNonNull(spliterator);
        class Adapter implements PrimitiveIterator.OfDouble, DoubleConsumer {
            boolean valueReady = false;
            double nextElement;

            @Override
            public void accept(double t) {
                valueReady = true;
                nextElement = t;
            }

            @Override
            public boolean hasNext() {
                if (!valueReady)
                    spliterator.tryAdvance(this);
                return valueReady;
            }

            @Override
            public double nextDouble() {
                if (!valueReady && !hasNext())
                    throw new NoSuchElementException();
                else {
                    valueReady = false;
                    return nextElement;
                }
            }
        }

        return new Adapter();
