class LogicalView
!!!2569090.java!!!	LogicalView(inout elem : Element)
            super(elem);
!!!2569218.java!!!	getViewIndexAtPosition(in pos : int) : int
            Element elem = getElement();
            if (elem.isLeaf()) {
                return 0;
            }
            return super.getViewIndexAtPosition(pos);
!!!2569346.java!!!	loadChildren(inout f : ViewFactory) : void
            Element elem = getElement();
            if (elem.isLeaf()) {
                View v = new LabelView(elem);
                append(v);
            } else {
                super.loadChildren(f);
            }
!!!2569474.java!!!	getAttributes() : AttributeSet
            View p = getParent();
            return (p != null) ? p.getAttributes() : null;
!!!2569602.java!!!	getPreferredSpan(in axis : int) : float
            float maxpref = 0;
            float pref = 0;
            int n = getViewCount();
            for (int i = 0; i < n; i++) {
                View v = getView(i);
                pref += v.getPreferredSpan(axis);
                if (v.getBreakWeight(axis, 0, Integer.MAX_VALUE) >= ForcedBreakWeight) {
                    maxpref = Math.max(maxpref, pref);
                    pref = 0;
                }
            }
            maxpref = Math.max(maxpref, pref);
            return maxpref;
!!!2569730.java!!!	getMinimumSpan(in axis : int) : float
            float maxmin = 0;
            float min = 0;
            boolean nowrap = false;
            int n = getViewCount();
            for (int i = 0; i < n; i++) {
                View v = getView(i);
                if (v.getBreakWeight(axis, 0, Integer.MAX_VALUE) == BadBreakWeight) {
                    min += v.getPreferredSpan(axis);
                    nowrap = true;
                } else if (nowrap) {
                    maxmin = Math.max(min, maxmin);
                    nowrap = false;
                    min = 0;
                }
                if (v instanceof ComponentView) {
                    maxmin = Math.max(maxmin, v.getMinimumSpan(axis));
                }
            }
            maxmin = Math.max(maxmin, min);
            return maxmin;
!!!2569858.java!!!	forwardUpdateToView(inout v : View, inout e : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
            View parent = v.getParent();
            v.setParent(this);
            super.forwardUpdateToView(v, e, a, f);
            v.setParent(parent);
!!!2569986.java!!!	forwardUpdate(inout ec : DocumentEvent::ElementChange, inout e : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
            // Update the view responsible for the changed element by invocation of
            // super method.
            super.forwardUpdate(ec, e, a, f);
            // Re-calculate the update indexes and update the views followed by
            // the changed place. Note: we update the views only when insertion or
            // removal takes place.
            DocumentEvent.EventType type = e.getType();
            if (type == DocumentEvent.EventType.INSERT ||
                type == DocumentEvent.EventType.REMOVE) {
                firstUpdateIndex = Math.min((lastUpdateIndex + 1), (getViewCount() - 1));
                lastUpdateIndex = Math.max((getViewCount() - 1), 0);
                for (int i = firstUpdateIndex; i <= lastUpdateIndex; i++) {
                    View v = getView(i);
                    if (v != null) {
                        v.updateAfterChange();
                    }
                }
            }
!!!2570242.java!!!	isBefore(in x : int, in y : int, inout alloc : Rectangle) : boolean
            return false;
!!!2570370.java!!!	isAfter(in x : int, in y : int, inout alloc : Rectangle) : boolean
            return false;
!!!2570498.java!!!	getViewAtPoint(in x : int, in y : int, inout alloc : Rectangle) : View
            return null;
