format 222
"acl" // jdk1.8::java::security::acl
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/security/acl/"
  java_package "java.security.acl"
  classview 155010 "acl"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 532226 "AclEntry"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the interface used for representing one entry in an Access
Control List (ACL).<p>

An ACL can be thought of as a data structure with multiple ACL entry
objects. Each ACL entry object contains a set of permissions associated
with a particular principal. (A principal represents an entity such as
an individual user or a group). Additionally, each ACL entry is specified
as being either positive or negative. If positive, the permissions are
to be granted to the associated principal. If negative, the permissions
are to be denied. Each principal can have at most one positive ACL entry
and one negative entry; that is, multiple positive or negative ACL
entries are not allowed for any principal.

Note: ACL entries are by default positive. An entry becomes a
negative entry only if the
{@link #setNegativePermissions() setNegativePermissions}
method is called on it.

@see java.security.acl.Acl

@author      Satish Dharmaraj
"
      classrelation 1052674 // <generalisation>
	relation 1052674 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1052674 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      operation 3254146 "setPrincipal"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "user" type class_ref 510594 // Principal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies the principal for which permissions are granted or denied
by this ACL entry. If a principal was already set for this ACL entry,
false is returned, otherwise true is returned.

@param user the principal to be set for this entry.

@return true if the principal is set, false if there was
already a principal set for this entry.

@see #getPrincipal
"
      end

      operation 3254274 "getPrincipal"
	public return_type class_ref 510594 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the principal for which permissions are granted or denied by
this ACL entry. Returns null if there is no principal set for this
entry yet.

@return the principal associated with this entry.

@see #setPrincipal
"
      end

      operation 3254402 "setNegativePermissions"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this ACL entry to be a negative one. That is, the associated
principal (e.g., a user or a group) will be denied the permission set
specified in the entry.

Note: ACL entries are by default positive. An entry becomes a
negative entry only if this {@code setNegativePermissions}
method is called on it.
"
      end

      operation 3254530 "isNegative"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this is a negative ACL entry (one denying the
associated principal the set of permissions in the entry), false
otherwise.

@return true if this is a negative ACL entry, false if it's not.
"
      end

      operation 3254658 "addPermission"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 532354 // Permission
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified permission to this ACL entry. Note: An entry can
have multiple permissions.

@param permission the permission to be associated with
the principal in this entry.

@return true if the permission was added, false if the
permission was already part of this entry's permission set.
"
      end

      operation 3254786 "removePermission"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 532354 // Permission
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified permission from this ACL entry.

@param permission the permission to be removed from this entry.

@return true if the permission is removed, false if the
permission was not part of this entry's permission set.
"
      end

      operation 3254914 "checkPermission"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 532354 // Permission
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the specified permission is part of the
permission set in this entry.

@param permission the permission to be checked for.

@return true if the permission is part of the
permission set in this entry, false otherwise.
"
      end

      operation 3255042 "permissions"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the permissions in this ACL entry.

@return an enumeration of the permissions in this ACL entry.
"
      end

      operation 3255170 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the contents of this ACL entry.

@return a string representation of the contents.
"
      end

      operation 3255298 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clones this ACL entry.

@return a clone of this ACL entry.
"
      end
    end

    class 532354 "Permission"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents a permission, such as that used to grant
a particular type of access to a resource.

@author Satish Dharmaraj
"
      operation 3302146 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "another" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the object passed matches the permission represented
in this interface.

@param another the Permission object to compare with.

@return true if the Permission objects are equal, false otherwise
"
      end

      operation 3302274 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a string representation of this permission.

@return the string representation of the permission.
"
      end
    end

    class 532738 "Owner"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface for managing owners of Access Control Lists (ACLs) or ACL
configurations. (Note that the Acl interface in the
{@code  java.security.acl} package extends this Owner
interface.) The initial owner Principal should be specified as an
argument to the constructor of the class implementing this interface.

@see java.security.acl.Acl

"
      operation 3257602 "addOwner"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "caller" type class_ref 510594 // Principal
	  param inout name "owner" type class_ref 510594 // Principal
	nexceptions 1
	  exception class_ref 532866 // NotOwnerException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an owner. Only owners can modify ACL contents. The caller
principal must be an owner of the ACL in order to invoke this method.
That is, only an owner can add another owner. The initial owner is
configured at ACL construction time.

@param caller the principal invoking this method. It must be an owner
of the ACL.

@param owner the owner that should be added to the list of owners.

@return true if successful, false if owner is already an owner.
@exception NotOwnerException if the caller principal is not an owner
of the ACL.
"
      end

      operation 3257730 "deleteOwner"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "caller" type class_ref 510594 // Principal
	  param inout name "owner" type class_ref 510594 // Principal
	nexceptions 2
	  exception class_ref 532866 // NotOwnerException
	  exception class_ref 532994 // LastOwnerException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes an owner. If this is the last owner in the ACL, an exception is
raised.<p>

The caller principal must be an owner of the ACL in order to invoke
this method.

@param caller the principal invoking this method. It must be an owner
of the ACL.

@param owner the owner to be removed from the list of owners.

@return true if the owner is removed, false if the owner is not part
of the list of owners.

@exception NotOwnerException if the caller principal is not an owner
of the ACL.

@exception LastOwnerException if there is only one owner left, so that
deleteOwner would leave the ACL owner-less.
"
      end

      operation 3257858 "isOwner"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "owner" type class_ref 510594 // Principal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the given principal is an owner of the ACL.

@param owner the principal to be checked to determine whether or not
it is an owner.

@return true if the passed principal is in the list of owners, false
if not.
"
      end
    end

    class 532866 "NotOwnerException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is an exception that is thrown whenever the modification of an object
(such as an Access Control List) is only allowed to be done by an owner of
the object, but the Principal attempting the modification is not an owner.

@author      Satish Dharmaraj
"
      classrelation 3369986 // <generalisation>
	relation 3369986 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3369986 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 1860738 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5555597911163362399L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8019842 "NotOwnerException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a NotOwnerException.
"
      end
    end

    class 532994 "LastOwnerException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is an exception that is thrown whenever an attempt is made to delete
the last owner of an Access Control List.

@see java.security.acl.Owner#deleteOwner

@author Satish Dharmaraj
"
      classrelation 3369858 // <generalisation>
	relation 3369858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3369858 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 1860610 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5141997548211140359L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8019714 "LastOwnerException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a LastOwnerException.
"
      end
    end

    class 533250 "Acl"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface representing an Access Control List (ACL).  An Access
Control List is a data structure used to guard access to
resources.<p>

An ACL can be thought of as a data structure with multiple ACL
entries.  Each ACL entry, of interface type AclEntry, contains a
set of permissions associated with a particular principal. (A
principal represents an entity such as an individual user or a
group). Additionally, each ACL entry is specified as being either
positive or negative. If positive, the permissions are to be
granted to the associated principal. If negative, the permissions
are to be denied.<p>

The ACL Entries in each ACL observe the following rules:

<ul> <li>Each principal can have at most one positive ACL entry and
one negative entry; that is, multiple positive or negative ACL
entries are not allowed for any principal.  Each entry specifies
the set of permissions that are to be granted (if positive) or
denied (if negative).

<li>If there is no entry for a particular principal, then the
principal is considered to have a null (empty) permission set.

<li>If there is a positive entry that grants a principal a
particular permission, and a negative entry that denies the
principal the same permission, the result is as though the
permission was never granted or denied.

<li>Individual permissions always override permissions of the
group(s) to which the individual belongs. That is, individual
negative permissions (specific denial of permissions) override the
groups' positive permissions. And individual positive permissions
override the groups' negative permissions.

</ul>

The {@code  java.security.acl } package provides the
interfaces to the ACL and related data structures (ACL entries,
groups, permissions, etc.), and the {@code  sun.security.acl }
classes provide a default implementation of the interfaces. For
example, {@code  java.security.acl.Acl } provides the
interface to an ACL and the {@code  sun.security.acl.AclImpl }
class provides the default implementation of the interface.<p>

The {@code  java.security.acl.Acl } interface extends the
{@code  java.security.acl.Owner } interface. The Owner
interface is used to maintain a list of owners for each ACL.  Only
owners are allowed to modify an ACL. For example, only an owner can
call the ACL's {@code addEntry} method to add a new ACL entry
to the ACL.

@see java.security.acl.AclEntry
@see java.security.acl.Owner
@see java.security.acl.Acl#getPermissions

@author Satish Dharmaraj
"
      classrelation 1053954 // <generalisation>
	relation 1053954 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1053954 // <generalisation>
	  b parent class_ref 532738 // Owner
      end

      operation 3258626 "setName"
	public explicit_return_type "void"
	nparams 2
	  param inout name "caller" type class_ref 510594 // Principal
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 532866 // NotOwnerException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of this ACL.

@param caller the principal invoking this method. It must be an
owner of this ACL.

@param name the name to be given to this ACL.

@exception NotOwnerException if the caller principal
is not an owner of this ACL.

@see #getName
"
      end

      operation 3258754 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this ACL.

@return the name of this ACL.

@see #setName
"
      end

      operation 3258882 "addEntry"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "caller" type class_ref 510594 // Principal
	  param inout name "entry" type class_ref 532226 // AclEntry
	nexceptions 1
	  exception class_ref 532866 // NotOwnerException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an ACL entry to this ACL. An entry associates a principal
(e.g., an individual or a group) with a set of
permissions. Each principal can have at most one positive ACL
entry (specifying permissions to be granted to the principal)
and one negative ACL entry (specifying permissions to be
denied). If there is already an ACL entry of the same type
(negative or positive) already in the ACL, false is returned.

@param caller the principal invoking this method. It must be an
owner of this ACL.

@param entry the ACL entry to be added to this ACL.

@return true on success, false if an entry of the same type
(positive or negative) for the same principal is already
present in this ACL.

@exception NotOwnerException if the caller principal
 is not an owner of this ACL.
"
      end

      operation 3259010 "removeEntry"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "caller" type class_ref 510594 // Principal
	  param inout name "entry" type class_ref 532226 // AclEntry
	nexceptions 1
	  exception class_ref 532866 // NotOwnerException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an ACL entry from this ACL.

@param caller the principal invoking this method. It must be an
owner of this ACL.

@param entry the ACL entry to be removed from this ACL.

@return true on success, false if the entry is not part of this ACL.

@exception NotOwnerException if the caller principal is not
an owner of this Acl.
"
      end

      operation 3259138 "getPermissions"
	public return_type class_ref 185986 // Enumeration
	nparams 1
	  param inout name "user" type class_ref 510594 // Principal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration for the set of allowed permissions for the
specified principal (representing an entity such as an individual or
a group). This set of allowed permissions is calculated as
follows:

<ul>

<li>If there is no entry in this Access Control List for the
specified principal, an empty permission set is returned.

<li>Otherwise, the principal's group permission sets are determined.
(A principal can belong to one or more groups, where a group is a
group of principals, represented by the Group interface.)
The group positive permission set is the union of all
the positive permissions of each group that the principal belongs to.
The group negative permission set is the union of all
the negative permissions of each group that the principal belongs to.
If there is a specific permission that occurs in both
the positive permission set and the negative permission set,
it is removed from both.<p>

The individual positive and negative permission sets are also
determined. The positive permission set contains the permissions
specified in the positive ACL entry (if any) for the principal.
Similarly, the negative permission set contains the permissions
specified in the negative ACL entry (if any) for the principal.
The individual positive (or negative) permission set is considered
to be null if there is not a positive (negative) ACL entry for the
principal in this ACL.<p>

The set of permissions granted to the principal is then calculated
using the simple rule that individual permissions always override
the group permissions. That is, the principal's individual negative
permission set (specific denial of permissions) overrides the group
positive permission set, and the principal's individual positive
permission set overrides the group negative permission set.

</ul>

@param user the principal whose permission set is to be returned.

@return the permission set specifying the permissions the principal
is allowed.
"
      end

      operation 3259266 "entries"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<AclEntry> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the entries in this ACL. Each element in
the enumeration is of type AclEntry.

@return an enumeration of the entries in this ACL.
"
      end

      operation 3259394 "checkPermission"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "principal" type class_ref 510594 // Principal
	  param inout name "permission" type class_ref 532354 // Permission
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether or not the specified principal has the specified
permission. If it does, true is returned, otherwise false is returned.

More specifically, this method checks whether the passed permission
is a member of the allowed permission set of the specified principal.
The allowed permission set is determined by the same algorithm as is
used by the {@code getPermissions} method.

@param principal the principal, assumed to be a valid authenticated
Principal.

@param permission the permission to be checked for.

@return true if the principal has the specified permission, false
otherwise.

@see #getPermissions
"
      end

      operation 3259522 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the
ACL contents.

@return a string representation of the ACL contents.
"
      end
    end

    class 533634 "Group"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface is used to represent a group of principals. (A principal
represents an entity such as an individual user or a company). <p>

Note that Group extends Principal. Thus, either a Principal or a Group can
be passed as an argument to methods containing a Principal parameter. For
example, you can add either a Principal or a Group to a Group object by
calling the object's {@code addMember} method, passing it the
Principal or Group.

@author      Satish Dharmaraj
"
      classrelation 1055234 // <generalisation>
	relation 1055234 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1055234 // <generalisation>
	  b parent class_ref 510594 // Principal
      end

      operation 3266050 "addMember"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "user" type class_ref 510594 // Principal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified member to the group.

@param user the principal to add to this group.

@return true if the member was successfully added,
false if the principal was already a member.
"
      end

      operation 3266178 "removeMember"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "user" type class_ref 510594 // Principal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified member from the group.

@param user the principal to remove from this group.

@return true if the principal was removed, or
false if the principal was not a member.
"
      end

      operation 3266306 "isMember"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "member" type class_ref 510594 // Principal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the passed principal is a member of the group.
This method does a recursive search, so if a principal belongs to a
group which is a member of this group, true is returned.

@param member the principal whose membership is to be checked.

@return true if the principal is a member of this group,
false otherwise.
"
      end

      operation 3266434 "members"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Principal> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the members in the group.
The returned objects can be instances of either Principal
or Group (which is a subclass of Principal).

@return an enumeration of the group members.
"
      end
    end

    class 1025794 "AclNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is an exception that is thrown whenever a reference is made to a
non-existent ACL (Access Control List).

@author      Satish Dharmaraj
"
      classrelation 3369730 // <generalisation>
	relation 3369730 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3369730 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 1860482 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5684295034092681791L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8019586 "AclNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AclNotFoundException.
"
      end
    end
  end

  deploymentview 148354 "acl"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 352514 "AclEntry"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.security.Principal;
${definition}"
      associated_elems
	class_ref 532226 // AclEntry
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 352770 "Owner"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.Principal;
${definition}"
      associated_elems
	class_ref 532738 // Owner
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 353026 "Acl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.security.Principal;
${definition}"
      associated_elems
	class_ref 533250 // Acl
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 353666 "Group"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.security.Principal;
${definition}"
      associated_elems
	class_ref 533634 // Group
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 358658 "Permission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 532354 // Permission
      end
      comment "Copyright (c) 1996, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 758530 "AclNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1025794 // AclNotFoundException
      end
      comment "Copyright (c) 1996, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 758658 "LastOwnerException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 532994 // LastOwnerException
      end
      comment "Copyright (c) 1996, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 758786 "NotOwnerException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 532866 // NotOwnerException
      end
      comment "Copyright (c) 1996, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
