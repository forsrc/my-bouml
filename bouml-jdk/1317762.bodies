class Map
!!!11794306.java!!!	Map(inout name : String)
        this.name = name;
!!!11794434.java!!!	getName() : String
        return name;
!!!11794562.java!!!	addArea(inout as : AttributeSet) : void
        if (as == null) {
            return;
        }
        if (areaAttributes == null) {
            areaAttributes = new Vector<AttributeSet>(2);
        }
        areaAttributes.addElement(as.copyAttributes());
!!!11794690.java!!!	removeArea(inout as : AttributeSet) : void
        if (as != null && areaAttributes != null) {
            int numAreas = (areas != null) ? areas.size() : 0;
            for (int counter = areaAttributes.size() - 1; counter >= 0;
                 counter--) {
                if (areaAttributes.elementAt(counter).isEqual(as)){
                    areaAttributes.removeElementAt(counter);
                    if (counter < numAreas) {
                        areas.removeElementAt(counter);
                    }
                }
            }
        }
!!!11794818.java!!!	getAreas() : AttributeSet
        int numAttributes = (areaAttributes != null) ? areaAttributes.size() :
                            0;
        if (numAttributes != 0) {
            AttributeSet[]    retValue = new AttributeSet[numAttributes];

            areaAttributes.copyInto(retValue);
            return retValue;
        }
        return null;
!!!11794946.java!!!	getArea(in x : int, in y : int, in width : int, in height : int) : AttributeSet
        int      numAttributes = (areaAttributes != null) ?
                                 areaAttributes.size() : 0;

        if (numAttributes > 0) {
            int      numAreas = (areas != null) ? areas.size() : 0;

            if (areas == null) {
                areas = new Vector<RegionContainment>(numAttributes);
            }
            for (int counter = 0; counter < numAttributes; counter++) {
                if (counter >= numAreas) {
                    areas.addElement(createRegionContainment
                            (areaAttributes.elementAt(counter)));
                }
                RegionContainment rc = areas.elementAt(counter);
                if (rc != null && rc.contains(x, y, width, height)) {
                    return areaAttributes.elementAt(counter);
                }
            }
        }
        return null;
!!!11795074.java!!!	createRegionContainment(inout attributes : AttributeSet) : Map::RegionContainment
        Object     shape = attributes.getAttribute(HTML.Attribute.SHAPE);

        if (shape == null) {
            shape = "rect";
        }
        if (shape instanceof String) {
            String                shapeString = ((String)shape).toLowerCase();
            RegionContainment     rc = null;

            try {
                if (shapeString.equals("rect")) {
                    rc = new RectangleRegionContainment(attributes);
                }
                else if (shapeString.equals("circle")) {
                    rc = new CircleRegionContainment(attributes);
                }
                else if (shapeString.equals("poly")) {
                    rc = new PolygonRegionContainment(attributes);
                }
                else if (shapeString.equals("default")) {
                    rc = DefaultRegionContainment.sharedInstance();
                }
            } catch (RuntimeException re) {
                // Something wrong with attributes.
                rc = null;
            }
            return rc;
        }
        return null;
!!!11795202.java!!!	extractCoords(inout stringCoords : Object) : int
        if (stringCoords == null || !(stringCoords instanceof String)) {
            return null;
        }

        StringTokenizer    st = new StringTokenizer((String)stringCoords,
                                                    ", \t\n\r");
        int[]              retValue = null;
        int                numCoords = 0;

        while(st.hasMoreElements()) {
            String         token = st.nextToken();
            int            scale;

            if (token.endsWith("%")) {
                scale = -1;
                token = token.substring(0, token.length() - 1);
            }
            else {
                scale = 1;
            }
            try {
                int       intValue = Integer.parseInt(token);

                if (retValue == null) {
                    retValue = new int[4];
                }
                else if(numCoords == retValue.length) {
                    int[]    temp = new int[retValue.length * 2];

                    System.arraycopy(retValue, 0, temp, 0, retValue.length);
                    retValue = temp;
                }
                retValue[numCoords++] = intValue * scale;
            } catch (NumberFormatException nfe) {
                return null;
            }
        }
        if (numCoords > 0 && numCoords != retValue.length) {
            int[]    temp = new int[numCoords];

            System.arraycopy(retValue, 0, temp, 0, numCoords);
            retValue = temp;
        }
        return retValue;
