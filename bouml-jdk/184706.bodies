class Stream
!!!9557122.java!!!	builder() : Stream::Builder
        return new Streams.StreamBuilderImpl<>();
!!!9557250.java!!!	empty() : Stream
        return StreamSupport.stream(Spliterators.<T>emptySpliterator(), false);
!!!9557378.java!!!	of(inout t : T) : Stream
        return StreamSupport.stream(new Streams.StreamBuilderImpl<>(t), false);
!!!9557506.java!!!	of(inout  : T...values) : Stream
        return Arrays.stream(values);
!!!9557634.java!!!	iterate(in seed : T, in f : UnaryOperator) : Stream
        Objects.requireNonNull(f);
        final Iterator<T> iterator = new Iterator<T>() {
            @SuppressWarnings("unchecked")
            T t = (T) Streams.NONE;

            @Override
            public boolean hasNext() {
                return true;
            }

            @Override
            public T next() {
                return t = (t == Streams.NONE) ? seed : f.apply(t);
            }
        };
        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(
                iterator,
                Spliterator.ORDERED | Spliterator.IMMUTABLE), false);
!!!9557762.java!!!	generate(inout s : Supplier) : Stream
        Objects.requireNonNull(s);
        return StreamSupport.stream(
                new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef<>(Long.MAX_VALUE, s), false);
!!!9557890.java!!!	concat(inout a : Stream, inout b : Stream) : Stream
        Objects.requireNonNull(a);
        Objects.requireNonNull(b);

        @SuppressWarnings("unchecked")
        Spliterator<T> split = new Streams.ConcatSpliterator.OfRef<>(
                (Spliterator<T>) a.spliterator(), (Spliterator<T>) b.spliterator());
        Stream<T> stream = StreamSupport.stream(split, a.isParallel() || b.isParallel());
        return stream.onClose(Streams.composedClose(a, b));
