format 222
"tools" // jdk1.8::javax::tools
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/tools/"
  java_package "javax.tools"
  classview 172290 "tools"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 841858 "JavaFileObject"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "File abstraction for tools operating on Java&trade; programming language
source and class files.

<p>All methods in this interface might throw a SecurityException if
a security exception occurs.

<p>Unless explicitly allowed, all methods in this interface might
throw a NullPointerException if given a {@code null} argument.

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@see JavaFileManager
@since 1.6
"
      class 1404034 "Kind"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2614658 "SOURCE"
	  public type class_ref 1404034 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(\".java\"),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Source files written in the Java programming language.  For
example, regular files ending with {@code .java}.
"
	end

	attribute 2614786 "CLASS"
	  public type class_ref 1404034 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(\".class\"),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Class files for the Java Virtual Machine.  For example,
regular files ending with {@code .class}.
"
	end

	attribute 2614914 "HTML"
	  public type class_ref 1404034 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(\".html\"),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "HTML files.  For example, regular files ending with {@code
.html}.
"
	end

	attribute 2615042 "OTHER"
	  public type class_ref 1404034 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(\"\"),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Any other kind.
"
	end

	classrelation 4746882 // extension (<unidirectional association>)
	  relation 4746882 --->
	    a role_name "extension" const_relation public
	      comment "
The extension which (by convention) is normally used for
this kind of file object.  If no convention exists, the
empty string ({@code \"\"}) is used.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4746882 // extension (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 11927426 "Kind"
	  private explicit_return_type ""
	  nparams 1
	    param inout name "extension" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 4746754 // <generalisation>
	relation 4746754 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4746754 // <generalisation>
	  b parent class_ref 1173378 // FileObject
      end

      operation 11927554 "getKind"
	public return_type class_ref 1404034 // Kind
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the kind of this file object.

@return the kind
"
      end

      operation 11927682 "isNameCompatible"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "simpleName" type class_ref 128130 // String
	  param inout name "kind" type class_ref 1404034 // Kind
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this file object is compatible with the specified
simple name and kind.  A simple name is a single identifier
(not qualified) as defined in
<cite>The Java&trade; Language Specification</cite>,
section 6.2 \"Names and Identifiers\".

@param simpleName a simple name of a class
@param kind a kind
@return {@code true} if this file object is compatible; false
otherwise
"
      end

      operation 11927810 "getNestingKind"
	public return_type class_ref 1180418 // NestingKind
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides a hint about the nesting level of the class
represented by this file object.  This method may return
{@link NestingKind#MEMBER} to mean
{@link NestingKind#LOCAL} or {@link NestingKind#ANONYMOUS}.
If the nesting level is not known or this file object does not
represent a class file this method returns {@code null}.

@return the nesting kind, or {@code null} if the nesting kind
is not known
"
      end

      operation 11927938 "getAccessLevel"
	public return_type class_ref 847746 // Modifier
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides a hint about the access level of the class represented
by this file object.  If the access level is not known or if
this file object does not represent a class file this method
returns {@code null}.

@return the access level
"
      end
    end

    class 841986 "Diagnostic"
      visibility public stereotype "interface"
      nformals 1
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface for diagnostics from tools.  A diagnostic usually reports
a problem at a specific position in a source file.  However, not
all diagnostics are associated with a position or a file.

<p>A position is a zero-based character offset from the beginning of
a file.  Negative values (except {@link #NOPOS}) are not valid
positions.

<p>Line and column numbers begin at 1.  Negative values (except
{@link #NOPOS}) and 0 are not valid line or column numbers.

@param <S> the type of source object used by this diagnostic

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      class 852610 "Kind"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2613250 "ERROR"
	  public type class_ref 852610 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Problem which prevents the tool's normal completion.

"
	end

	attribute 2613378 "WARNING"
	  public type class_ref 852610 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Problem which does not usually prevent the tool from
completing normally.

"
	end

	attribute 2613506 "MANDATORY_WARNING"
	  public type class_ref 852610 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Problem similar to a warning, but is mandated by the tool's
specification.  For example, the Java&trade; Language
Specification mandates warnings on certain
unchecked operations and the use of deprecated methods.

"
	end

	attribute 2613634 "NOTE"
	  public type class_ref 852610 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Informative message from the tool.

"
	end

	attribute 2613762 "OTHER"
	  public type class_ref 852610 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Diagnostic which does not fit within the other kinds.

"
	end
      end

      attribute 2613890 "NOPOS"
	class_attribute const_attribute public explicit_type "long"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Used to signal that no position is available.

"
      end

      operation 11919106 "getKind"
	cpp_inline public return_type class_ref 852610 // Kind
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the kind of this diagnostic, for example, error or
warning.
@return the kind of this diagnostic
"
      end

      operation 11919234 "getSource"
	cpp_inline public explicit_return_type "S"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the source object associated with this diagnostic.

@return the source object associated with this diagnostic.
{@code null} if no source object is associated with the
diagnostic.
"
      end

      operation 11919362 "getPosition"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a character offset from the beginning of the source object
associated with this diagnostic that indicates the location of
the problem.  In addition, the following must be true:

<p>{@code getStartPostion() <= getPosition()}
<p>{@code getPosition() <= getEndPosition()}

@return character offset from beginning of source; {@link
#NOPOS} if {@link #getSource()} would return {@code null} or if
no location is suitable
"
      end

      operation 11919490 "getStartPosition"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character offset from the beginning of the file
associated with this diagnostic that indicates the start of the
problem.

@return offset from beginning of file; {@link #NOPOS} if and
only if {@link #getPosition()} returns {@link #NOPOS}
"
      end

      operation 11919618 "getEndPosition"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character offset from the beginning of the file
associated with this diagnostic that indicates the end of the
problem.

@return offset from beginning of file; {@link #NOPOS} if and
only if {@link #getPosition()} returns {@link #NOPOS}
"
      end

      operation 11919746 "getLineNumber"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the line number of the character offset returned by
{@linkplain #getPosition()}.

@return a line number or {@link #NOPOS} if and only if {@link
#getPosition()} returns {@link #NOPOS}
"
      end

      operation 11919874 "getColumnNumber"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the column number of the character offset returned by
{@linkplain #getPosition()}.

@return a column number or {@link #NOPOS} if and only if {@link
#getPosition()} returns {@link #NOPOS}
"
      end

      operation 11920002 "getCode"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a diagnostic code indicating the type of diagnostic.  The
code is implementation-dependent and might be {@code null}.

@return a diagnostic code
"
      end

      operation 11920130 "getMessage"
	cpp_inline public return_type class_ref 128130 // String
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a localized message for the given locale.  The actual
message is implementation-dependent.  If the locale is {@code
null} use the default locale.

@param locale a locale; might be {@code null}
@return a localized message
"
      end
    end

    class 851458 "JavaCompiler"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface to invoke Java&trade; programming language compilers from
programs.

<p>The compiler might generate diagnostics during compilation (for
example, error messages).  If a diagnostic listener is provided,
the diagnostics will be supplied to the listener.  If no listener
is provided, the diagnostics will be formatted in an unspecified
format and written to the default output, which is {@code
System.err} unless otherwise specified.  Even if a diagnostic
listener is supplied, some diagnostics might not fit in a {@code
Diagnostic} and will be written to the default output.

<p>A compiler tool has an associated standard file manager, which
is the file manager that is native to the tool (or built-in).  The
standard file manager can be obtained by calling {@linkplain
#getStandardFileManager getStandardFileManager}.

<p>A compiler tool must function with any file manager as long as
any additional requirements as detailed in the methods below are
met.  If no file manager is provided, the compiler tool will use a
standard file manager such as the one returned by {@linkplain
#getStandardFileManager getStandardFileManager}.

<p>An instance implementing this interface must conform to
<cite>The Java&trade; Language Specification</cite>
and generate class files conforming to
<cite>The Java&trade; Virtual Machine Specification</cite>.
The versions of these
specifications are defined in the {@linkplain Tool} interface.

Additionally, an instance of this interface supporting {@link
javax.lang.model.SourceVersion#RELEASE_6 SourceVersion.RELEASE_6}
or higher must also support {@linkplain javax.annotation.processing
annotation processing}.

<p>The compiler relies on two services: {@linkplain
DiagnosticListener diagnostic listener} and {@linkplain
JavaFileManager file manager}.  Although most classes and
interfaces in this package defines an API for compilers (and
tools in general) the interfaces {@linkplain DiagnosticListener},
{@linkplain JavaFileManager}, {@linkplain FileObject}, and
{@linkplain JavaFileObject} are not intended to be used in
applications.  Instead these interfaces are intended to be
implemented and used to provide customized services for a
compiler and thus defines an SPI for compilers.

<p>There are a number of classes and interfaces in this package
which are designed to ease the implementation of the SPI to
customize the behavior of a compiler:

<dl>
  <dt>{@link StandardJavaFileManager}</dt>
  <dd>

    Every compiler which implements this interface provides a
    standard file manager for operating on regular {@linkplain
    java.io.File files}.  The StandardJavaFileManager interface
    defines additional methods for creating file objects from
    regular files.

    <p>The standard file manager serves two purposes:

    <ul>
      <li>basic building block for customizing how a compiler reads
      and writes files</li>
      <li>sharing between multiple compilation tasks</li>
    </ul>

    <p>Reusing a file manager can potentially reduce overhead of
    scanning the file system and reading jar files.  Although there
    might be no reduction in overhead, a standard file manager must
    work with multiple sequential compilations making the following
    example a recommended coding pattern:

    <pre>
      File[] files1 = ... ; // input for first compilation task
      File[] files2 = ... ; // input for second compilation task

      JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
      StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);

      {@code Iterable<? extends JavaFileObject>} compilationUnits1 =
          fileManager.getJavaFileObjectsFromFiles({@linkplain java.util.Arrays#asList Arrays.asList}(files1));
      compiler.getTask(null, fileManager, null, null, null, compilationUnits1).call();

      {@code Iterable<? extends JavaFileObject>} compilationUnits2 =
          fileManager.getJavaFileObjects(files2); // use alternative method
      // reuse the same file manager to allow caching of jar files
      compiler.getTask(null, fileManager, null, null, null, compilationUnits2).call();

      fileManager.close();</pre>

  </dd>

  <dt>{@link DiagnosticCollector}</dt>
  <dd>
    Used to collect diagnostics in a list, for example:
    <pre>
      {@code Iterable<? extends JavaFileObject>} compilationUnits = ...;
      JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
      {@code DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();}
      StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null);
      compiler.getTask(null, fileManager, diagnostics, null, null, compilationUnits).call();

      for ({@code Diagnostic<? extends JavaFileObject>} diagnostic : diagnostics.getDiagnostics())
          System.out.format(\"Error on line %d in %s%n\",
                            diagnostic.getLineNumber(),
                            diagnostic.getSource().toUri());

      fileManager.close();</pre>
  </dd>

  <dt>
    {@link ForwardingJavaFileManager}, {@link ForwardingFileObject}, and
    {@link ForwardingJavaFileObject}
  </dt>
  <dd>

    Subclassing is not available for overriding the behavior of a
    standard file manager as it is created by calling a method on a
    compiler, not by invoking a constructor.  Instead forwarding
    (or delegation) should be used.  These classes makes it easy to
    forward most calls to a given file manager or file object while
    allowing customizing behavior.  For example, consider how to
    log all calls to {@linkplain JavaFileManager#flush}:

    <pre>
      final {@linkplain java.util.logging.Logger Logger} logger = ...;
      {@code Iterable<? extends JavaFileObject>} compilationUnits = ...;
      JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
      StandardJavaFileManager stdFileManager = compiler.getStandardFileManager(null, null, null);
      JavaFileManager fileManager = new ForwardingJavaFileManager(stdFileManager) {
          public void flush() throws IOException {
              logger.entering(StandardJavaFileManager.class.getName(), \"flush\");
              super.flush();
              logger.exiting(StandardJavaFileManager.class.getName(), \"flush\");
          }
      };
      compiler.getTask(null, fileManager, null, null, null, compilationUnits).call();</pre>
  </dd>

  <dt>{@link SimpleJavaFileObject}</dt>
  <dd>

    This class provides a basic file object implementation which
    can be used as building block for creating file objects.  For
    example, here is how to define a file object which represent
    source code stored in a string:

    <pre>
      /**
       * A file object used to represent source coming from a string.
       {@code *}/
      public class JavaSourceFromString extends SimpleJavaFileObject {
          /**
           * The source code of this \"file\".
           {@code *}/
          final String code;

          /**
           * Constructs a new JavaSourceFromString.
           * {@code @}param name the name of the compilation unit represented by this file object
           * {@code @}param code the source code for the compilation unit represented by this file object
           {@code *}/
          JavaSourceFromString(String name, String code) {
              super({@linkplain java.net.URI#create URI.create}(\"string:///\" + name.replace('.','/') + Kind.SOURCE.extension),
                    Kind.SOURCE);
              this.code = code;
          }

          {@code @}Override
          public CharSequence getCharContent(boolean ignoreEncodingErrors) {
              return code;
          }
      }</pre>
  </dd>
</dl>

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@see DiagnosticListener
@see Diagnostic
@see JavaFileManager
@since 1.6
"
      class 851586 "CompilationTask"
	visibility public stereotype "interface"
	nactuals 1
	actual class class_ref 339330 // Callable
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 2876930 // <realization>
	  relation 2876930 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 2876930 // <realization>
	    b parent class_ref 339330 // Callable
	end

	operation 6040066 "setProcessors"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "processors" type class_ref 184322 // Iterable
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Processor> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets processors (for annotation processing).  This will
bypass the normal discovery mechanism.

@param processors processors (for annotation processing)
@throws IllegalStateException if the task has started
"
	end

	operation 6040194 "setLocale"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "locale" type class_ref 312962 // Locale
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set the locale to be applied when formatting diagnostics and
other localized data.

@param locale the locale to apply; {@code null} means apply no
locale
@throws IllegalStateException if the task has started
"
	end

	operation 6040322 "call"
	  public return_type class_ref 315010 // Boolean
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Performs this compilation task.  The compilation may only
be performed once.  Subsequent calls to this method throw
IllegalStateException.

@return true if and only all the files compiled without errors;
false otherwise

@throws RuntimeException if an unrecoverable error occurred
in a user-supplied component.  The
{@linkplain Throwable#getCause() cause} will be the error
in user code.
@throws IllegalStateException if called more than once
"
	end
      end

      classrelation 2876674 // <generalisation>
	relation 2876674 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2876674 // <generalisation>
	  b parent class_ref 852866 // Tool
      end

      classrelation 2876802 // <generalisation>
	relation 2876802 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2876802 // <generalisation>
	  b parent class_ref 853122 // OptionChecker
      end

      operation 6039682 "getTask"
	public return_type class_ref 851586 // CompilationTask
	nparams 6
	  param inout name "out" type class_ref 428034 // Writer
	  param inout name "fileManager" type class_ref 853250 // JavaFileManager
	  param inout name "diagnosticListener" type class_ref 853378 // DiagnosticListener
	  param inout name "options" type class_ref 184322 // Iterable
	  param inout name "classes" type class_ref 184322 // Iterable
	  param inout name "compilationUnits" type class_ref 184322 // Iterable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? super JavaFileObject> ${p2}, ${t3}<String> ${p3}, ${t4}<String> ${p4}, ${t5}<? extends JavaFileObject> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a future for a compilation task with the given
components and arguments.  The compilation might not have
completed as described in the CompilationTask interface.

<p>If a file manager is provided, it must be able to handle all
locations defined in {@link StandardLocation}.

<p>Note that annotation processing can process both the
compilation units of source code to be compiled, passed with
the {@code compilationUnits} parameter, as well as class
files, whose names are passed with the {@code classes}
parameter.

@param out a Writer for additional output from the compiler;
use {@code System.err} if {@code null}
@param fileManager a file manager; if {@code null} use the
compiler's standard filemanager
@param diagnosticListener a diagnostic listener; if {@code
null} use the compiler's default method for reporting
diagnostics
@param options compiler options, {@code null} means no options
@param classes names of classes to be processed by annotation
processing, {@code null} means no class names
@param compilationUnits the compilation units to compile, {@code
null} means no compilation units
@return an object representing the compilation
@throws RuntimeException if an unrecoverable error
occurred in a user supplied component.  The
{@linkplain Throwable#getCause() cause} will be the error in
user code.
@throws IllegalArgumentException if any of the options are invalid,
or if any of the given compilation units are of other kind than
{@linkplain JavaFileObject.Kind#SOURCE source}
"
      end

      operation 6039810 "getStandardFileManager"
	public return_type class_ref 853506 // StandardJavaFileManager
	nparams 3
	  param inout name "diagnosticListener" type class_ref 853378 // DiagnosticListener
	  param inout name "locale" type class_ref 312962 // Locale
	  param inout name "charset" type class_ref 853634 // Charset
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super JavaFileObject> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a new instance of the standard file manager implementation
for this tool.  The file manager will use the given diagnostic
listener for producing any non-fatal diagnostics.  Fatal errors
will be signaled with the appropriate exceptions.

<p>The standard file manager will be automatically reopened if
it is accessed after calls to {@code flush} or {@code close}.
The standard file manager must be usable with other tools.

@param diagnosticListener a diagnostic listener for non-fatal
diagnostics; if {@code null} use the compiler's default method
for reporting diagnostics
@param locale the locale to apply when formatting diagnostics;
{@code null} means the {@linkplain Locale#getDefault() default locale}.
@param charset the character set used for decoding bytes; if
{@code null} use the platform default
@return the standard file manager
"
      end
    end

    class 852866 "Tool"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Common interface for tools that can be invoked from a program.
A tool is traditionally a command line program such as a compiler.
The set of tools available with a platform is defined by the
vendor.

<p>Tools can be located using {@link
java.util.ServiceLoader#load(Class)}.

@author Neal M Gafter
@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      operation 6039298 "run"
	public explicit_return_type "int"
	nparams 4
	  param inout name "in" type class_ref 146434 // InputStream
	  param inout name "out" type class_ref 151298 // OutputStream
	  param inout name "err" type class_ref 151298 // OutputStream
	  param inout name "" explicit_type "String...arguments"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Run the tool with the given I/O channels and arguments. By
convention a tool returns 0 for success and nonzero for errors.
Any diagnostics generated will be written to either {@code out}
or {@code err} in some unspecified format.

@param in \"standard\" input; use System.in if null
@param out \"standard\" output; use System.out if null
@param err \"standard\" error; use System.err if null
@param arguments arguments to pass to the tool
@return 0 for success; nonzero otherwise
@throws NullPointerException if the array of arguments contains
any {@code null} elements.
"
      end

      operation 6039426 "getSourceVersions"
	public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SourceVersion> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the source versions of the Java&trade; programming language
supported by this tool.
@return a set of supported source versions
"
      end
    end

    class 853122 "OptionChecker"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface for recognizing options.

@author Peter von der Ah&eacute;
@since 1.6
"
      operation 6039554 "isSupportedOption"
	public explicit_return_type "int"
	nparams 1
	  param inout name "option" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the given option is supported and if so, the
number of arguments the option takes.

@param option an option
@return the number of arguments the given option takes or -1 if
the option is not supported
"
      end
    end

    class 853250 "JavaFileManager"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "File manager for tools operating on Java&trade; programming language
source and class files.  In this context, <em>file</em> means an
abstraction of regular files and other sources of data.

<p>When constructing new JavaFileObjects, the file manager must
determine where to create them.  For example, if a file manager
manages regular files on a file system, it would most likely have a
current/working directory to use as default location when creating
or finding files.  A number of hints can be provided to a file
manager as to where to create files.  Any file manager might choose
to ignore these hints.

<p>Some methods in this interface use class names.  Such class
names must be given in the Java Virtual Machine internal form of
fully qualified class and interface names.  For convenience '.'
and '/' are interchangeable.  The internal form is defined in
chapter four of
<cite>The Java&trade; Virtual Machine Specification</cite>.

<blockquote><p>
  <i>Discussion:</i> this means that the names
  \"java/lang.package-info\", \"java/lang/package-info\",
  \"java.lang.package-info\", are valid and equivalent.  Compare to
  binary name as defined in
  <cite>The Java&trade; Language Specification</cite>,
  section 13.1 \"The Form of a Binary\".
</p></blockquote>

<p>The case of names is significant.  All names should be treated
as case-sensitive.  For example, some file systems have
case-insensitive, case-aware file names.  File objects representing
such files should take care to preserve case by using {@link
java.io.File#getCanonicalFile} or similar means.  If the system is
not case-aware, file objects must use other means to preserve case.

<p><em><a name=\"relative_name\">Relative names</a>:</em> some
methods in this interface use relative names.  A relative name is a
non-null, non-empty sequence of path segments separated by '/'.
'.' or '..'  are invalid path segments.  A valid relative name must
match the \"path-rootless\" rule of <a
href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC&nbsp;3986</a>,
section&nbsp;3.3.  Informally, this should be true:

<!-- URI.create(relativeName).normalize().getPath().equals(relativeName) -->
<pre>  URI.{@linkplain java.net.URI#create create}(relativeName).{@linkplain java.net.URI#normalize normalize}().{@linkplain java.net.URI#getPath getPath}().equals(relativeName)</pre>

<p>All methods in this interface might throw a SecurityException.

<p>An object of this interface is not required to support
multi-threaded access, that is, be synchronized.  However, it must
support concurrent access to different file objects created by this
object.

<p><em>Implementation note:</em> a consequence of this requirement
is that a trivial implementation of output to a {@linkplain
java.util.jar.JarOutputStream} is not a sufficient implementation.
That is, rather than creating a JavaFileObject that returns the
JarOutputStream directly, the contents must be cached until closed
and then written to the JarOutputStream.

<p>Unless explicitly allowed, all methods in this interface might
throw a NullPointerException if given a {@code null} argument.

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@see JavaFileObject
@see FileObject
@since 1.6
"
      class 1173506 "Location"
	visibility public stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 11921154 "getName"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the name of this location.

@return a name
"
	end

	operation 11921282 "isOutputLocation"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Determines if this is an output location.  An output
location is a location that is conventionally used for
output.

@return true if this is an output location, false otherwise
"
	end
      end

      classrelation 4745858 // <generalisation>
	relation 4745858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4745858 // <generalisation>
	  b parent class_ref 146562 // Closeable
      end

      classrelation 4745986 // <generalisation>
	relation 4745986 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4745986 // <generalisation>
	  b parent class_ref 151426 // Flushable
      end

      classrelation 4746114 // <generalisation>
	relation 4746114 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4746114 // <generalisation>
	  b parent class_ref 853122 // OptionChecker
      end

      operation 11921410 "getClassLoader"
	public return_type class_ref 129026 // ClassLoader
	nparams 1
	  param inout name "location" type class_ref 1173506 // Location
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a class loader for loading plug-ins from the given
location.  For example, to load annotation processors, a
compiler will request a class loader for the {@link
StandardLocation#ANNOTATION_PROCESSOR_PATH
ANNOTATION_PROCESSOR_PATH} location.

@param location a location
@return a class loader for the given location; or {@code null}
if loading plug-ins from the given location is disabled or if
the location is not known
@throws SecurityException if a class loader can not be created
in the current security context
@throws IllegalStateException if {@link #close} has been called
and this file manager cannot be reopened
"
      end

      operation 11921538 "list"
	public return_type class_ref 184322 // Iterable
	nparams 4
	  param inout name "location" type class_ref 1173506 // Location
	  param inout name "packageName" type class_ref 128130 // String
	  param inout name "kinds" type class_ref 192258 // Set
	  param inout name "recurse" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<JavaFileObject> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<Kind> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Lists all file objects matching the given criteria in the given
location.  List file objects in \"subpackages\" if recurse is
true.

<p>Note: even if the given location is unknown to this file
manager, it may not return {@code null}.  Also, an unknown
location may not cause an exception.

@param location     a location
@param packageName  a package name
@param kinds        return objects only of these kinds
@param recurse      if true include \"subpackages\"
@return an Iterable of file objects matching the given criteria
@throws IOException if an I/O error occurred, or if {@link
#close} has been called and this file manager cannot be
reopened
@throws IllegalStateException if {@link #close} has been called
and this file manager cannot be reopened
"
      end

      operation 11921666 "inferBinaryName"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "location" type class_ref 1173506 // Location
	  param inout name "file" type class_ref 841858 // JavaFileObject
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Infers a binary name of a file object based on a location.  The
binary name returned might not be a valid binary name according to
<cite>The Java&trade; Language Specification</cite>.

@param location a location
@param file a file object
@return a binary name or {@code null} the file object is not
found in the given location
@throws IllegalStateException if {@link #close} has been called
and this file manager cannot be reopened
"
      end

      operation 11921794 "isSameFile"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "a" type class_ref 1173378 // FileObject
	  param inout name "b" type class_ref 1173378 // FileObject
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two file objects and return true if they represent the
same underlying object.

@param a a file object
@param b a file object
@return true if the given file objects represent the same
underlying object

@throws IllegalArgumentException if either of the arguments
were created with another file manager and this file manager
does not support foreign file objects
"
      end

      operation 11921922 "handleOption"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "current" type class_ref 128130 // String
	  param inout name "remaining" type class_ref 132994 // Iterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles one option.  If {@code current} is an option to this
file manager it will consume any arguments to that option from
{@code remaining} and return true, otherwise return false.

@param current current option
@param remaining remaining options
@return true if this option was handled by this file manager,
false otherwise
@throws IllegalArgumentException if this option to this file
manager is used incorrectly
@throws IllegalStateException if {@link #close} has been called
and this file manager cannot be reopened
"
      end

      operation 11922050 "hasLocation"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "location" type class_ref 1173506 // Location
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if a location is known to this file manager.

@param location a location
@return true if the location is known
"
      end

      operation 11922178 "getJavaFileForInput"
	public return_type class_ref 841858 // JavaFileObject
	nparams 3
	  param inout name "location" type class_ref 1173506 // Location
	  param inout name "className" type class_ref 128130 // String
	  param inout name "kind" explicit_type "Kind"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a {@linkplain JavaFileObject file object} for input
representing the specified class of the specified kind in the
given location.

@param location a location
@param className the name of a class
@param kind the kind of file, must be one of {@link
JavaFileObject.Kind#SOURCE SOURCE} or {@link
JavaFileObject.Kind#CLASS CLASS}
@return a file object, might return {@code null} if the
file does not exist
@throws IllegalArgumentException if the location is not known
to this file manager and the file manager does not support
unknown locations, or if the kind is not valid
@throws IOException if an I/O error occurred, or if {@link
#close} has been called and this file manager cannot be
reopened
@throws IllegalStateException if {@link #close} has been called
and this file manager cannot be reopened
"
      end

      operation 11922306 "getJavaFileForOutput"
	public return_type class_ref 841858 // JavaFileObject
	nparams 4
	  param inout name "location" type class_ref 1173506 // Location
	  param inout name "className" type class_ref 128130 // String
	  param inout name "kind" explicit_type "Kind"
	  param inout name "sibling" type class_ref 1173378 // FileObject
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a {@linkplain JavaFileObject file object} for output
representing the specified class of the specified kind in the
given location.

<p>Optionally, this file manager might consider the sibling as
a hint for where to place the output.  The exact semantics of
this hint is unspecified.  The JDK compiler, javac, for
example, will place class files in the same directories as
originating source files unless a class file output directory
is provided.  To facilitate this behavior, javac might provide
the originating source file as sibling when calling this
method.

@param location a location
@param className the name of a class
@param kind the kind of file, must be one of {@link
JavaFileObject.Kind#SOURCE SOURCE} or {@link
JavaFileObject.Kind#CLASS CLASS}
@param sibling a file object to be used as hint for placement;
might be {@code null}
@return a file object for output
@throws IllegalArgumentException if sibling is not known to
this file manager, or if the location is not known to this file
manager and the file manager does not support unknown
locations, or if the kind is not valid
@throws IOException if an I/O error occurred, or if {@link
#close} has been called and this file manager cannot be
reopened
@throws IllegalStateException {@link #close} has been called
and this file manager cannot be reopened
"
      end

      operation 11922434 "getFileForInput"
	public return_type class_ref 1173378 // FileObject
	nparams 3
	  param inout name "location" type class_ref 1173506 // Location
	  param inout name "packageName" type class_ref 128130 // String
	  param inout name "relativeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a {@linkplain FileObject file object} for input
representing the specified <a href=\"JavaFileManager.html#relative_name\">relative
name</a> in the specified package in the given location.

<p>If the returned object represents a {@linkplain
JavaFileObject.Kind#SOURCE source} or {@linkplain
JavaFileObject.Kind#CLASS class} file, it must be an instance
of {@link JavaFileObject}.

<p>Informally, the file object returned by this method is
located in the concatenation of the location, package name, and
relative name.  For example, to locate the properties file
\"resources/compiler.properties\" in the package
\"com.sun.tools.javac\" in the {@linkplain
StandardLocation#SOURCE_PATH SOURCE_PATH} location, this method
might be called like so:

<pre>getFileForInput(SOURCE_PATH, \"com.sun.tools.javac\", \"resources/compiler.properties\");</pre>

<p>If the call was executed on Windows, with SOURCE_PATH set to
<code>\"C:\\Documents&nbsp;and&nbsp;Settings\\UncleBob\\src\\share\\classes\"</code>,
a valid result would be a file object representing the file
<code>\"C:\\Documents&nbsp;and&nbsp;Settings\\UncleBob\\src\\share\\classes\\com\\sun\\tools\\javac\\resources\\compiler.properties\"</code>.

@param location a location
@param packageName a package name
@param relativeName a relative name
@return a file object, might return {@code null} if the file
does not exist
@throws IllegalArgumentException if the location is not known
to this file manager and the file manager does not support
unknown locations, or if {@code relativeName} is not valid
@throws IOException if an I/O error occurred, or if {@link
#close} has been called and this file manager cannot be
reopened
@throws IllegalStateException if {@link #close} has been called
and this file manager cannot be reopened
"
      end

      operation 11922562 "getFileForOutput"
	public return_type class_ref 1173378 // FileObject
	nparams 4
	  param inout name "location" type class_ref 1173506 // Location
	  param inout name "packageName" type class_ref 128130 // String
	  param inout name "relativeName" type class_ref 128130 // String
	  param inout name "sibling" type class_ref 1173378 // FileObject
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a {@linkplain FileObject file object} for output
representing the specified <a href=\"JavaFileManager.html#relative_name\">relative
name</a> in the specified package in the given location.

<p>Optionally, this file manager might consider the sibling as
a hint for where to place the output.  The exact semantics of
this hint is unspecified.  The JDK compiler, javac, for
example, will place class files in the same directories as
originating source files unless a class file output directory
is provided.  To facilitate this behavior, javac might provide
the originating source file as sibling when calling this
method.

<p>If the returned object represents a {@linkplain
JavaFileObject.Kind#SOURCE source} or {@linkplain
JavaFileObject.Kind#CLASS class} file, it must be an instance
of {@link JavaFileObject}.

<p>Informally, the file object returned by this method is
located in the concatenation of the location, package name, and
relative name or next to the sibling argument.  See {@link
#getFileForInput getFileForInput} for an example.

@param location a location
@param packageName a package name
@param relativeName a relative name
@param sibling a file object to be used as hint for placement;
might be {@code null}
@return a file object
@throws IllegalArgumentException if sibling is not known to
this file manager, or if the location is not known to this file
manager and the file manager does not support unknown
locations, or if {@code relativeName} is not valid
@throws IOException if an I/O error occurred, or if {@link
#close} has been called and this file manager cannot be
reopened
@throws IllegalStateException if {@link #close} has been called
and this file manager cannot be reopened
"
      end

      operation 11922690 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes any resources opened for output by this file manager
directly or indirectly.  Flushing a closed file manager has no
effect.

@throws IOException if an I/O error occurred
@see #close
"
      end

      operation 11922818 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases any resources opened by this file manager directly or
indirectly.  This might render this file manager useless and
the effect of subsequent calls to methods on this object or any
objects obtained through this object is undefined unless
explicitly allowed.  However, closing a file manager which has
already been closed has no effect.

@throws IOException if an I/O error occurred
@see #flush
"
      end
    end

    class 853378 "DiagnosticListener"
      visibility public stereotype "interface"
      nformals 1
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface for receiving diagnostics from tools.

@param <S> the type of source objects used by diagnostics received
by this listener

@author Jonathan Gibbons
@author Peter von der Ah&eacute;
@since 1.6
"
      operation 11920258 "report"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "diagnostic" type class_ref 841986 // Diagnostic
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends S> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a problem is found.

@param diagnostic a diagnostic representing the problem that
was found
@throws NullPointerException if the diagnostic argument is
{@code null} and the implementation cannot handle {@code null}
arguments
"
      end
    end

    class 853506 "StandardJavaFileManager"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "File manager based on {@linkplain File java.io.File}.  A common way
to obtain an instance of this class is using {@linkplain
JavaCompiler#getStandardFileManager
getStandardFileManager}, for example:

<pre>
  JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
  {@code DiagnosticCollector<JavaFileObject>} diagnostics =
      new {@code DiagnosticCollector<JavaFileObject>()};
  StandardJavaFileManager fm = compiler.getStandardFileManager(diagnostics, null, null);
</pre>

This file manager creates file objects representing regular
{@linkplain File files},
{@linkplain java.util.zip.ZipEntry zip file entries}, or entries in
similar file system based containers.  Any file object returned
from a file manager implementing this interface must observe the
following behavior:

<ul>
  <li>
    File names need not be canonical.
  </li>
  <li>
    For file objects representing regular files
    <ul>
      <li>
        the method <code>{@linkplain FileObject#delete()}</code>
        is equivalent to <code>{@linkplain File#delete()}</code>,
      </li>
      <li>
        the method <code>{@linkplain FileObject#getLastModified()}</code>
        is equivalent to <code>{@linkplain File#lastModified()}</code>,
      </li>
      <li>
        the methods <code>{@linkplain FileObject#getCharContent(boolean)}</code>,
        <code>{@linkplain FileObject#openInputStream()}</code>, and
        <code>{@linkplain FileObject#openReader(boolean)}</code>
        must succeed if the following would succeed (ignoring
        encoding issues):
        <blockquote>
          <pre>new {@linkplain java.io.FileInputStream#FileInputStream(File) FileInputStream}(new {@linkplain File#File(java.net.URI) File}({@linkplain FileObject fileObject}.{@linkplain FileObject#toUri() toUri}()))</pre>
        </blockquote>
      </li>
      <li>
        and the methods
        <code>{@linkplain FileObject#openOutputStream()}</code>, and
        <code>{@linkplain FileObject#openWriter()}</code> must
        succeed if the following would succeed (ignoring encoding
        issues):
        <blockquote>
          <pre>new {@linkplain java.io.FileOutputStream#FileOutputStream(File) FileOutputStream}(new {@linkplain File#File(java.net.URI) File}({@linkplain FileObject fileObject}.{@linkplain FileObject#toUri() toUri}()))</pre>
        </blockquote>
      </li>
    </ul>
  </li>
  <li>
    The {@linkplain java.net.URI URI} returned from
    <code>{@linkplain FileObject#toUri()}</code>
    <ul>
      <li>
        must be {@linkplain java.net.URI#isAbsolute() absolute} (have a schema), and
      </li>
      <li>
        must have a {@linkplain java.net.URI#normalize() normalized}
        {@linkplain java.net.URI#getPath() path component} which
        can be resolved without any process-specific context such
        as the current directory (file names must be absolute).
      </li>
    </ul>
  </li>
</ul>

According to these rules, the following URIs, for example, are
allowed:
<ul>
  <li>
    <code>file:///C:/Documents%20and%20Settings/UncleBob/BobsApp/Test.java</code>
  </li>
  <li>
    <code>jar:///C:/Documents%20and%20Settings/UncleBob/lib/vendorA.jar!com/vendora/LibraryClass.class</code>
  </li>
</ul>
Whereas these are not (reason in parentheses):
<ul>
  <li>
    <code>file:BobsApp/Test.java</code> (the file name is relative
    and depend on the current directory)
  </li>
  <li>
    <code>jar:lib/vendorA.jar!com/vendora/LibraryClass.class</code>
    (the first half of the path depends on the current directory,
    whereas the component after ! is legal)
  </li>
  <li>
    <code>Test.java</code> (this URI depends on the current
    directory and does not have a schema)
  </li>
  <li>
    <code>jar:///C:/Documents%20and%20Settings/UncleBob/BobsApp/../lib/vendorA.jar!com/vendora/LibraryClass.class</code>
    (the path is not normalized)
  </li>
</ul>

@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 4747522 // <generalisation>
	relation 4747522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4747522 // <generalisation>
	  b parent class_ref 853250 // JavaFileManager
      end

      operation 11930626 "isSameFile"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "a" type class_ref 1173378 // FileObject
	  param inout name "b" type class_ref 1173378 // FileObject
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two file objects and return true if they represent the
same canonical file, zip file entry, or entry in any file
system based container.

@param a a file object
@param b a file object
@return true if the given file objects represent the same
canonical file or zip file entry; false otherwise

@throws IllegalArgumentException if either of the arguments
were created with another file manager implementation
"
      end

      operation 11930754 "getJavaFileObjectsFromFiles"
	public return_type class_ref 184322 // Iterable
	nparams 1
	  param inout name "files" type class_ref 184322 // Iterable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends JavaFileObject> ${name}${(}${t0}<? extends File> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets file objects representing the given files.

@param files a list of files
@return a list of file objects
@throws IllegalArgumentException if the list of files includes
a directory
"
      end

      operation 11930882 "getJavaFileObjects"
	public return_type class_ref 184322 // Iterable
	nparams 1
	  param inout name "" explicit_type "File...files"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends JavaFileObject> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets file objects representing the given files.
Convenience method equivalent to:

<pre>
    getJavaFileObjectsFromFiles({@linkplain java.util.Arrays#asList Arrays.asList}(files))
</pre>

@param files an array of files
@return a list of file objects
@throws IllegalArgumentException if the array of files includes
a directory
@throws NullPointerException if the given array contains null
elements
"
      end

      operation 11931010 "getJavaFileObjectsFromStrings"
	public return_type class_ref 184322 // Iterable
	nparams 1
	  param inout name "names" type class_ref 184322 // Iterable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends JavaFileObject> ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets file objects representing the given file names.

@param names a list of file names
@return a list of file objects
@throws IllegalArgumentException if the list of file names
includes a directory
"
      end

      operation 11931138 "getJavaFileObjects"
	public return_type class_ref 184322 // Iterable
	nparams 1
	  param inout name "" explicit_type "String...names"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends JavaFileObject> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets file objects representing the given file names.
Convenience method equivalent to:

<pre>
    getJavaFileObjectsFromStrings({@linkplain java.util.Arrays#asList Arrays.asList}(names))
</pre>

@param names a list of file names
@return a list of file objects
@throws IllegalArgumentException if the array of file names
includes a directory
@throws NullPointerException if the given array contains null
elements
"
      end

      operation 11931266 "setLocation"
	public explicit_return_type "void"
	nparams 2
	  param inout name "location" type class_ref 1173506 // Location
	  param inout name "path" type class_ref 184322 // Iterable
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends File> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the given path with the given location.  Any
previous value will be discarded.

@param location a location
@param path a list of files, if {@code null} use the default
path for this location
@see #getLocation
@throws IllegalArgumentException if location is an output
location and path does not contain exactly one element
@throws IOException if location is an output location and path
does not represent an existing directory
"
      end

      operation 11931394 "getLocation"
	public return_type class_ref 184322 // Iterable
	nparams 1
	  param inout name "location" type class_ref 1173506 // Location
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends File> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the path associated with the given location.

@param location a location
@return a list of files or {@code null} if this location has no
associated path
@see #setLocation
"
      end
    end

    class 1173378 "FileObject"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "File abstraction for tools.  In this context, <em>file</em> means
an abstraction of regular files and other sources of data.  For
example, a file object can be used to represent regular files,
memory cache, or data in databases.

<p>All methods in this interface might throw a SecurityException if
a security exception occurs.

<p>Unless explicitly allowed, all methods in this interface might
throw a NullPointerException if given a {@code null} argument.

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      operation 11923202 "toUri"
	public return_type class_ref 783874 // URI
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a URI identifying this file object.
@return a URI
"
      end

      operation 11923330 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a user-friendly name for this file object.  The exact
value returned is not specified but implementations should take
care to preserve names as given by the user.  For example, if
the user writes the filename {@code \"BobsApp\\Test.java\"} on
the command line, this method should return {@code
\"BobsApp\\Test.java\"} whereas the {@linkplain #toUri toUri}
method might return {@code
file:///C:/Documents%20and%20Settings/UncleBob/BobsApp/Test.java}.

@return a user-friendly name
"
      end

      operation 11923458 "openInputStream"
	public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an InputStream for this file object.

@return an InputStream
@throws IllegalStateException if this file object was
opened for writing and does not support reading
@throws UnsupportedOperationException if this kind of file
object does not support byte access
@throws IOException if an I/O error occurred
"
      end

      operation 11923586 "openOutputStream"
	public return_type class_ref 151298 // OutputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an OutputStream for this file object.

@return an OutputStream
@throws IllegalStateException if this file object was
opened for reading and does not support writing
@throws UnsupportedOperationException if this kind of
file object does not support byte access
@throws IOException if an I/O error occurred
"
      end

      operation 11923714 "openReader"
	public return_type class_ref 407298 // Reader
	nparams 1
	  param inout name "ignoreEncodingErrors" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a reader for this object.  The returned reader will
replace bytes that cannot be decoded with the default
translation character.  In addition, the reader may report a
diagnostic unless {@code ignoreEncodingErrors} is true.

@param ignoreEncodingErrors ignore encoding errors if true
@return a Reader
@throws IllegalStateException if this file object was
opened for writing and does not support reading
@throws UnsupportedOperationException if this kind of
file object does not support character access
@throws IOException if an I/O error occurred
"
      end

      operation 11923842 "getCharContent"
	public return_type class_ref 429442 // CharSequence
	nparams 1
	  param inout name "ignoreEncodingErrors" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character content of this file object, if available.
Any byte that cannot be decoded will be replaced by the default
translation character.  In addition, a diagnostic may be
reported unless {@code ignoreEncodingErrors} is true.

@param ignoreEncodingErrors ignore encoding errors if true
@return a CharSequence if available; {@code null} otherwise
@throws IllegalStateException if this file object was
opened for writing and does not support reading
@throws UnsupportedOperationException if this kind of
file object does not support character access
@throws IOException if an I/O error occurred
"
      end

      operation 11923970 "openWriter"
	public return_type class_ref 428034 // Writer
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a Writer for this file object.

@return a Writer
@throws IllegalStateException if this file object was
opened for reading and does not support writing
@throws UnsupportedOperationException if this kind of
file object does not support character access
@throws IOException if an I/O error occurred
"
      end

      operation 11924098 "getLastModified"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time this file object was last modified.  The time is
measured in milliseconds since the epoch (00:00:00 GMT, January
1, 1970).

@return the time this file object was last modified; or 0 if
the file object does not exist, if an I/O error occurred, or if
the operation is not supported
"
      end

      operation 11924226 "delete"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes this file object.  In case of errors, returns false.
@return true if and only if this file object is successfully
deleted; false otherwise
"
      end
    end

    class 1403266 "DiagnosticCollector"
      visibility public 
      nformals 1
      formal name "S" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 853378 // DiagnosticListener
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides an easy way to collect diagnostics in a list.

@param <S> the type of source objects used by diagnostics received
by this object

@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 4745218 // <realization>
	relation 4745218 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 4745218 // <realization>
	  b parent class_ref 853378 // DiagnosticListener
      end

      classrelation 4745346 // diagnostics (<unidirectional association>)
	relation 4745346 --->
	  a role_name "diagnostics" init_value "
        Collections.synchronizedList(new ArrayList<Diagnostic<? extends S>>())" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Diagnostic<? extends S>> ${name}${value};
"
	    classrelation_ref 4745346 // diagnostics (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      operation 11920386 "report"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "diagnostic" type class_ref 841986 // Diagnostic
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends S> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11920514 "getDiagnostics"
	cpp_inline public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Diagnostic<? extends S>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a list view of diagnostics collected by this object.

@return a list view of diagnostics
"
      end
    end

    class 1403394 "DocumentationTool"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface to invoke Java&trade; programming language documentation tools from
programs.
"
      classrelation 4745474 // <generalisation>
	relation 4745474 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4745474 // <generalisation>
	  b parent class_ref 852866 // Tool
      end

      classrelation 4745602 // <generalisation>
	relation 4745602 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4745602 // <generalisation>
	  b parent class_ref 853122 // OptionChecker
      end

      class 1403522 "DocumentationTask"
	visibility public stereotype "interface"
	nactuals 1
	actual class class_ref 339330 // Callable
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4745730 // <realization>
	  relation 4745730 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 4745730 // <realization>
	    b parent class_ref 339330 // Callable
	end

	operation 11920898 "setLocale"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "locale" type class_ref 312962 // Locale
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set the locale to be applied when formatting diagnostics and
other localized data.

@param locale the locale to apply; {@code null} means apply no
locale
@throws IllegalStateException if the task has started
"
	end

	operation 11921026 "call"
	  public return_type class_ref 315010 // Boolean
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Performs this documentation task.  The task may only
be performed once.  Subsequent calls to this method throw
IllegalStateException.

@return true if and only all the files were processed without errors;
false otherwise

@throws RuntimeException if an unrecoverable error occurred
in a user-supplied component.  The
{@linkplain Throwable#getCause() cause} will be the error
in user code.

@throws IllegalStateException if called more than once
"
	end
      end

      operation 11920642 "getTask"
	public return_type class_ref 1403522 // DocumentationTask
	nparams 6
	  param inout name "out" type class_ref 428034 // Writer
	  param inout name "fileManager" type class_ref 853250 // JavaFileManager
	  param inout name "diagnosticListener" type class_ref 853378 // DiagnosticListener
	  param inout name "docletClass" type class_ref 130818 // Class
	  param inout name "options" type class_ref 184322 // Iterable
	  param inout name "compilationUnits" type class_ref 184322 // Iterable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? super JavaFileObject> ${p2}, ${t3}<?> ${p3}, ${t4}<String> ${p4}, ${t5}<? extends JavaFileObject> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a future for a documentation task with the given
components and arguments.  The task might not have
completed as described in the DocumentationTask interface.

<p>If a file manager is provided, it must be able to handle all
locations defined in {@link DocumentationTool.Location},
as well as
{@link StandardLocation#SOURCE_PATH},
{@link StandardLocation#CLASS_PATH}, and
{@link StandardLocation#PLATFORM_CLASS_PATH}.

@param out a Writer for additional output from the tool;
use {@code System.err} if {@code null}

@param fileManager a file manager; if {@code null} use the
tool's standard filemanager

@param diagnosticListener a diagnostic listener; if {@code null}
use the tool's default method for reporting diagnostics

@param docletClass a class providing the necessary methods required
of a doclet

@param options documentation tool options and doclet options,
{@code null} means no options

@param compilationUnits the compilation units to compile, {@code
null} means no compilation units

@return an object representing the compilation

@throws RuntimeException if an unrecoverable error
occurred in a user supplied component.  The
{@linkplain Throwable#getCause() cause} will be the error in
user code.

@throws IllegalArgumentException if any of the given
compilation units are of other kind than
{@linkplain JavaFileObject.Kind#SOURCE source}
"
      end

      operation 11920770 "getStandardFileManager"
	public return_type class_ref 853506 // StandardJavaFileManager
	nparams 3
	  param inout name "diagnosticListener" type class_ref 853378 // DiagnosticListener
	  param inout name "locale" type class_ref 312962 // Locale
	  param inout name "charset" type class_ref 853634 // Charset
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super JavaFileObject> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a new instance of the standard file manager implementation
for this tool.  The file manager will use the given diagnostic
listener for producing any non-fatal diagnostics.  Fatal errors
will be signaled with the appropriate exceptions.

<p>The standard file manager will be automatically reopened if
it is accessed after calls to {@code flush} or {@code close}.
The standard file manager must be usable with other tools.

@param diagnosticListener a diagnostic listener for non-fatal
diagnostics; if {@code null} use the compiler's default method
for reporting diagnostics

@param locale the locale to apply when formatting diagnostics;
{@code null} means the {@linkplain Locale#getDefault() default locale}.

@param charset the character set used for decoding bytes; if
{@code null} use the platform default

@return the standard file manager
"
      end

      class 1403650 "Location"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4746242 // <realization>
	  relation 4746242 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 4746242 // <realization>
	    b parent class_ref 1173506 // Location
	end

	attribute 2614018 "DOCUMENTATION_OUTPUT"
	  public type class_ref 1403650 // Location
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Location of new documentation files.

"
	end

	attribute 2614146 "DOCLET_PATH"
	  public type class_ref 1403650 // Location
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Location to search for doclets.

"
	end

	attribute 2614274 "TAGLET_PATH"
	  public type class_ref 1403650 // Location
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Location to search for taglets.
"
	end

	operation 11922946 "getName"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11923074 "isOutputLocation"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 1403778 "ForwardingFileObject"
      visibility public 
      nformals 1
      formal name "F" type "" explicit_default_value ""
        extends class_ref 1173378 // FileObject
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Forwards calls to a given file object.  Subclasses of this class
might override some of these methods and might also provide
additional fields and methods.

@param <F> the kind of file object forwarded to by this object
@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 4746370 // <realization>
	relation 4746370 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4746370 // <realization>
	  b parent class_ref 1173378 // FileObject
      end

      attribute 2614402 "fileObject"
	const_attribute protected explicit_type "F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The file object which all methods are delegated to.

"
      end

      operation 11924354 "ForwardingFileObject"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "fileObject" explicit_type "F"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of ForwardingFileObject.
@param fileObject delegate to this file object
"
      end

      operation 11924482 "toUri"
	cpp_inline public return_type class_ref 783874 // URI
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11924610 "getName"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11924738 "openInputStream"
	cpp_inline public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalStateException {@inheritDoc}
@throws UnsupportedOperationException {@inheritDoc}
@throws IOException {@inheritDoc}
"
      end

      operation 11924866 "openOutputStream"
	cpp_inline public return_type class_ref 151298 // OutputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalStateException {@inheritDoc}
@throws UnsupportedOperationException {@inheritDoc}
@throws IOException {@inheritDoc}
"
      end

      operation 11924994 "openReader"
	cpp_inline public return_type class_ref 407298 // Reader
	nparams 1
	  param inout name "ignoreEncodingErrors" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalStateException {@inheritDoc}
@throws UnsupportedOperationException {@inheritDoc}
@throws IOException {@inheritDoc}
"
      end

      operation 11925122 "getCharContent"
	cpp_inline public return_type class_ref 429442 // CharSequence
	nparams 1
	  param inout name "ignoreEncodingErrors" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalStateException {@inheritDoc}
@throws UnsupportedOperationException {@inheritDoc}
@throws IOException {@inheritDoc}
"
      end

      operation 11925250 "openWriter"
	cpp_inline public return_type class_ref 428034 // Writer
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalStateException {@inheritDoc}
@throws UnsupportedOperationException {@inheritDoc}
@throws IOException {@inheritDoc}
"
      end

      operation 11925378 "getLastModified"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11925506 "delete"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1403906 "ForwardingJavaFileManager"
      visibility public 
      nformals 1
      formal name "M" type "" explicit_default_value ""
        extends class_ref 853250 // JavaFileManager
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Forwards calls to a given file manager.  Subclasses of this class
might override some of these methods and might also provide
additional fields and methods.

@param <M> the kind of file manager forwarded to by this object
@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 4746498 // <realization>
	relation 4746498 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4746498 // <realization>
	  b parent class_ref 853250 // JavaFileManager
      end

      attribute 2614530 "fileManager"
	const_attribute protected explicit_type "M"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The file manager which all methods are delegated to.

"
      end

      operation 11925634 "ForwardingJavaFileManager"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "fileManager" explicit_type "M"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of ForwardingJavaFileManager.
@param fileManager delegate to this file manager
"
      end

      operation 11925762 "getClassLoader"
	cpp_inline public return_type class_ref 129026 // ClassLoader
	nparams 1
	  param inout name "location" type class_ref 1173506 // Location
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws SecurityException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}
"
      end

      operation 11925890 "list"
	cpp_inline public return_type class_ref 184322 // Iterable
	nparams 4
	  param inout name "location" type class_ref 1173506 // Location
	  param inout name "packageName" type class_ref 128130 // String
	  param inout name "kinds" type class_ref 192258 // Set
	  param inout name "recurse" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<JavaFileObject> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<Kind> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IOException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}
"
      end

      operation 11926018 "inferBinaryName"
	cpp_inline public return_type class_ref 128130 // String
	nparams 2
	  param inout name "location" type class_ref 1173506 // Location
	  param inout name "file" type class_ref 841858 // JavaFileObject
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalStateException {@inheritDoc}
"
      end

      operation 11926146 "isSameFile"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param inout name "a" type class_ref 1173378 // FileObject
	  param inout name "b" type class_ref 1173378 // FileObject
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalArgumentException {@inheritDoc}
"
      end

      operation 11926274 "handleOption"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param inout name "current" type class_ref 128130 // String
	  param inout name "remaining" type class_ref 132994 // Iterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalArgumentException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}
"
      end

      operation 11926402 "hasLocation"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "location" type class_ref 1173506 // Location
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11926530 "isSupportedOption"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "option" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11926658 "getJavaFileForInput"
	cpp_inline public return_type class_ref 841858 // JavaFileObject
	nparams 3
	  param inout name "location" type class_ref 1173506 // Location
	  param inout name "className" type class_ref 128130 // String
	  param inout name "kind" type class_ref 1404034 // Kind
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalArgumentException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}
"
      end

      operation 11926786 "getJavaFileForOutput"
	cpp_inline public return_type class_ref 841858 // JavaFileObject
	nparams 4
	  param inout name "location" type class_ref 1173506 // Location
	  param inout name "className" type class_ref 128130 // String
	  param inout name "kind" type class_ref 1404034 // Kind
	  param inout name "sibling" type class_ref 1173378 // FileObject
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalArgumentException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}
"
      end

      operation 11926914 "getFileForInput"
	cpp_inline public return_type class_ref 1173378 // FileObject
	nparams 3
	  param inout name "location" type class_ref 1173506 // Location
	  param inout name "packageName" type class_ref 128130 // String
	  param inout name "relativeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalArgumentException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}
"
      end

      operation 11927042 "getFileForOutput"
	cpp_inline public return_type class_ref 1173378 // FileObject
	nparams 4
	  param inout name "location" type class_ref 1173506 // Location
	  param inout name "packageName" type class_ref 128130 // String
	  param inout name "relativeName" type class_ref 128130 // String
	  param inout name "sibling" type class_ref 1173378 // FileObject
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalArgumentException {@inheritDoc}
@throws IllegalStateException {@inheritDoc}
"
      end

      operation 11927170 "flush"
	cpp_inline public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11927298 "close"
	cpp_inline public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1404162 "ForwardingJavaFileObject"
      visibility public 
      nformals 1
      formal name "F" type "" explicit_default_value ""
        extends class_ref 841858 // JavaFileObject
      nactuals 1
      actual class class_ref 1403778 // ForwardingFileObject
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Forwards calls to a given file object.  Subclasses of this class
might override some of these methods and might also provide
additional fields and methods.

@param <F> the kind of file object forwarded to by this object
@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 4746626 // <realization>
	relation 4746626 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 4746626 // <realization>
	  b parent class_ref 1403778 // ForwardingFileObject
      end

      classrelation 4747010 // <realization>
	relation 4747010 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4747010 // <realization>
	  b parent class_ref 841858 // JavaFileObject
      end

      operation 11928066 "ForwardingJavaFileObject"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "fileObject" explicit_type "F"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of ForwardingJavaFileObject.
@param fileObject delegate to this file object
"
      end

      operation 11928194 "getKind"
	cpp_inline public return_type class_ref 1404034 // Kind
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11928322 "isNameCompatible"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param inout name "simpleName" type class_ref 128130 // String
	  param inout name "kind" type class_ref 1404034 // Kind
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11928450 "getNestingKind"
	cpp_inline public return_type class_ref 1180418 // NestingKind
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11928578 "getAccessLevel"
	cpp_inline public return_type class_ref 847746 // Modifier
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1404290 "SimpleJavaFileObject"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides simple implementations for most methods in JavaFileObject.
This class is designed to be subclassed and used as a basis for
JavaFileObject implementations.  Subclasses can override the
implementation and specification of any method of this class as
long as the general contract of JavaFileObject is obeyed.

@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 4747138 // <realization>
	relation 4747138 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4747138 // <realization>
	  b parent class_ref 841858 // JavaFileObject
      end

      classrelation 4747266 // uri (<unidirectional association>)
	relation 4747266 --->
	  a role_name "uri" const_relation protected
	    comment "
A URI for this file object.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4747266 // uri (<unidirectional association>)
	  b parent class_ref 783874 // URI
      end

      classrelation 4747394 // kind (<unidirectional association>)
	relation 4747394 --->
	  a role_name "kind" const_relation protected
	    comment "
The kind of this file object.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4747394 // kind (<unidirectional association>)
	  b parent class_ref 1404034 // Kind
      end

      operation 11928706 "SimpleJavaFileObject"
	protected explicit_return_type ""
	nparams 2
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "kind" type class_ref 1404034 // Kind
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a SimpleJavaFileObject of the given kind and with the
given URI.

@param uri  the URI for this file object
@param kind the kind of this file object
"
      end

      operation 11928834 "toUri"
	public return_type class_ref 783874 // URI
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11928962 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11929090 "openInputStream"
	public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This implementation always throws {@linkplain
UnsupportedOperationException}.  Subclasses can change this
behavior as long as the contract of {@link FileObject} is
obeyed.
"
      end

      operation 11929218 "openOutputStream"
	public return_type class_ref 151298 // OutputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This implementation always throws {@linkplain
UnsupportedOperationException}.  Subclasses can change this
behavior as long as the contract of {@link FileObject} is
obeyed.
"
      end

      operation 11929346 "openReader"
	public return_type class_ref 407298 // Reader
	nparams 1
	  param inout name "ignoreEncodingErrors" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wraps the result of {@linkplain #getCharContent} in a Reader.
Subclasses can change this behavior as long as the contract of
{@link FileObject} is obeyed.

@param  ignoreEncodingErrors {@inheritDoc}
@return a Reader wrapping the result of getCharContent
@throws IllegalStateException {@inheritDoc}
@throws UnsupportedOperationException {@inheritDoc}
@throws IOException {@inheritDoc}
"
      end

      operation 11929474 "getCharContent"
	public return_type class_ref 429442 // CharSequence
	nparams 1
	  param inout name "ignoreEncodingErrors" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This implementation always throws {@linkplain
UnsupportedOperationException}.  Subclasses can change this
behavior as long as the contract of {@link FileObject} is
obeyed.
"
      end

      operation 11929602 "openWriter"
	public return_type class_ref 428034 // Writer
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wraps the result of openOutputStream in a Writer.  Subclasses
can change this behavior as long as the contract of {@link
FileObject} is obeyed.

@return a Writer wrapping the result of openOutputStream
@throws IllegalStateException {@inheritDoc}
@throws UnsupportedOperationException {@inheritDoc}
@throws IOException {@inheritDoc}
"
      end

      operation 11929730 "getLastModified"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This implementation returns {@code 0L}.  Subclasses can change
this behavior as long as the contract of {@link FileObject} is
obeyed.

@return {@code 0L}
"
      end

      operation 11929858 "delete"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This implementation does nothing.  Subclasses can change this
behavior as long as the contract of {@link FileObject} is
obeyed.

@return {@code false}
"
      end

      operation 11929986 "getKind"
	public return_type class_ref 1404034 // Kind
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return {@code this.kind}
"
      end

      operation 11930114 "isNameCompatible"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "simpleName" type class_ref 128130 // String
	  param inout name "kind" type class_ref 1404034 // Kind
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This implementation compares the path of its URI to the given
simple name.  This method returns true if the given kind is
equal to the kind of this object, and if the path is equal to
{@code simpleName + kind.extension} or if it ends with {@code
\"/\" + simpleName + kind.extension}.

<p>This method calls {@link #getKind} and {@link #toUri} and
does not access the fields {@link #uri} and {@link #kind}
directly.

<p>Subclasses can change this behavior as long as the contract
of {@link JavaFileObject} is obeyed.
"
      end

      operation 11930242 "getNestingKind"
	public return_type class_ref 1180418 // NestingKind
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This implementation returns {@code null}.  Subclasses can
change this behavior as long as the contract of
{@link JavaFileObject} is obeyed.
"
      end

      operation 11930370 "getAccessLevel"
	public return_type class_ref 847746 // Modifier
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This implementation returns {@code null}.  Subclasses can
change this behavior as long as the contract of
{@link JavaFileObject} is obeyed.
"
      end

      operation 11930498 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 1404418 "StandardLocation"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Standard locations of file objects.

@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 4747650 // <realization>
	relation 4747650 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4747650 // <realization>
	  b parent class_ref 1173506 // Location
      end

      attribute 2615170 "CLASS_OUTPUT"
	public type class_ref 1404418 // StandardLocation
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Location of new class files.

"
      end

      attribute 2615298 "SOURCE_OUTPUT"
	public type class_ref 1404418 // StandardLocation
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Location of new source files.

"
      end

      attribute 2615426 "CLASS_PATH"
	public type class_ref 1404418 // StandardLocation
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Location to search for user class files.

"
      end

      attribute 2615554 "SOURCE_PATH"
	public type class_ref 1404418 // StandardLocation
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Location to search for existing source files.

"
      end

      attribute 2615682 "ANNOTATION_PROCESSOR_PATH"
	public type class_ref 1404418 // StandardLocation
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Location to search for annotation processors.

"
      end

      attribute 2615810 "PLATFORM_CLASS_PATH"
	public type class_ref 1404418 // StandardLocation
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Location to search for platform classes.  Sometimes called
the boot class path.

"
      end

      attribute 2615938 "NATIVE_HEADER_OUTPUT"
	public type class_ref 1404418 // StandardLocation
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Location of new native header files.
@since 1.8
"
      end

      operation 11931522 "locationFor"
	class_operation public return_type class_ref 1173506 // Location
	nparams 1
	  param in name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a location object with the given name.  The following
property must hold: {@code locationFor(x) ==
locationFor(y)} if and only if {@code x.equals(y)}.
The returned location will be an output location if and only if
name ends with {@code \"_OUTPUT\"}.

@param name a name
@return a location
"
      end

      classrelation 4747778 // locations (<unidirectional association>)
	relation 4747778 --->
	  a role_name "locations" init_value " new ConcurrentHashMap<String,Location>()" class_relation const_relation private
	    comment "where
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Location> ${name}${value};
"
	    classrelation_ref 4747778 // locations (<unidirectional association>)
	  b parent class_ref 130690 // ConcurrentMap
      end

      operation 11931650 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11931778 "isOutputLocation"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1404546 "ToolProvider"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides methods for locating tool providers, for example,
providers of compilers.  This class complements the
functionality of {@link java.util.ServiceLoader}.

@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 4747906 // propertyName (<unidirectional association>)
	relation 4747906 --->
	  a role_name "propertyName" init_value " \"sun.tools.ToolProvider\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4747906 // propertyName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4748034 // loggerName (<unidirectional association>)
	relation 4748034 --->
	  a role_name "loggerName" init_value " \"javax.tools\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4748034 // loggerName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 11931906 "trace"
	class_operation package explicit_return_type "T"
	nparams 2
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "reason" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Define the system property \"sun.tools.ToolProvider\" to enable
debugging:

    java ... -Dsun.tools.ToolProvider ...
"
      end

      classrelation 4748162 // defaultJavaCompilerName (<unidirectional association>)
	relation 4748162 --->
	  a role_name "defaultJavaCompilerName" init_value " \"com.sun.tools.javac.api.JavacTool\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4748162 // defaultJavaCompilerName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 11932034 "getSystemJavaCompiler"
	class_operation public return_type class_ref 851458 // JavaCompiler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the Java&trade; programming language compiler provided
with this platform.
@return the compiler provided with this platform or
{@code null} if no compiler is provided
"
      end

      classrelation 4748290 // defaultDocumentationToolName (<unidirectional association>)
	relation 4748290 --->
	  a role_name "defaultDocumentationToolName" init_value " \"com.sun.tools.javadoc.api.JavadocTool\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4748290 // defaultDocumentationToolName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 11932162 "getSystemDocumentationTool"
	class_operation public return_type class_ref 1403394 // DocumentationTool
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the Java&trade; programming language documentation tool provided
with this platform.
@return the documentation tool provided with this platform or
{@code null} if no documentation tool is provided
"
      end

      operation 11932290 "getSystemToolClassLoader"
	class_operation public return_type class_ref 129026 // ClassLoader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class loader for tools provided with this platform.
This does not include user-installed tools.  Use the
{@linkplain java.util.ServiceLoader service provider mechanism}
for locating user installed tools.

@return the class loader for tools provided with this platform
or {@code null} if no tools are provided
"
      end

      classrelation 4748418 // instance (<unidirectional association>)
	relation 4748418 --->
	  a role_name "instance" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4748418 // instance (<unidirectional association>)
	  b parent class_ref 1404546 // ToolProvider
      end

      operation 11932418 "instance"
	class_operation private return_type class_ref 1404546 // ToolProvider
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 4748546 // toolClasses (<unidirectional association>)
	relation 4748546 --->
	  a role_name "toolClasses" init_value " new HashMap<String, Reference<Class<?>>>()" private
	    comment " Cache for tool classes.
 Use weak references to avoid keeping classes around unnecessarily
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Reference<Class<?>>> ${name}${value};
"
	    classrelation_ref 4748546 // toolClasses (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 4748674 // refToolClassLoader (<unidirectional association>)
	relation 4748674 --->
	  a role_name "refToolClassLoader" init_value " null" private
	    comment " Cache for tool classloader.
 Use a weak reference to avoid keeping it around unnecessarily
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ClassLoader> ${name}${value};
"
	    classrelation_ref 4748674 // refToolClassLoader (<unidirectional association>)
	  b parent class_ref 131458 // Reference
      end

      operation 11932546 "ToolProvider"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11932674 "getSystemTool"
	private explicit_return_type "T"
	nparams 2
	  param inout name "clazz" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11932802 "getSystemToolClass"
	private return_type class_ref 130818 // Class
	nparams 2
	  param inout name "clazz" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<? extends T> ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 4748802 // defaultToolsLocation (<unidirectional association>)
	relation 4748802 --->
	  a role_name "defaultToolsLocation" multiplicity "[]" init_value " { \"lib\", \"tools.jar\" }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 4748802 // defaultToolsLocation (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 11932930 "findSystemToolClass"
	private return_type class_ref 130818 // Class
	nparams 1
	  param inout name "toolClassName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 253442 // MalformedURLException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 165634 "tools"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 613506 "Tool"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Set;
import java.io.InputStream;
import java.io.OutputStream;
import javax.lang.model.SourceVersion;
${definition}"
      associated_elems
	class_ref 852866 // Tool
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 613634 "OptionChecker"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 853122 // OptionChecker
      end
      comment "Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 613890 "JavaCompiler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.Writer;
import java.nio.charset.Charset;
import java.util.Locale;
import java.util.concurrent.Callable;
import javax.annotation.processing.Processor;
${definition}"
      associated_elems
	class_ref 851458 // JavaCompiler
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 993794 "Diagnostic"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Locale;
${definition}"
      associated_elems
	class_ref 841986 // Diagnostic
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 993922 "DiagnosticListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 853378 // DiagnosticListener
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 994050 "DiagnosticCollector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
${definition}"
      associated_elems
	class_ref 1403266 // DiagnosticCollector
      end
      comment "Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 994178 "JavaFileManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Closeable;
import java.io.Flushable;
import java.io.IOException;
import java.util.Iterator;
import java.util.Set;
import static javax.tools.JavaFileObject.Kind;
${definition}"
      associated_elems
	class_ref 853250 // JavaFileManager
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 994306 "DocumentationTool"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Writer;
import java.nio.charset.Charset;
import java.util.Locale;
import java.util.concurrent.Callable;
import static javax.tools.JavaFileObject.Kind;
${definition}"
      associated_elems
	class_ref 1403394 // DocumentationTool
      end
      comment "Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 994434 "FileObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.net.URI;
${definition}"
      associated_elems
	class_ref 1173378 // FileObject
      end
      comment "Copyright (c) 2006, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 994562 "ForwardingFileObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.net.URI;
${definition}"
      associated_elems
	class_ref 1403778 // ForwardingFileObject
      end
      comment "Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 994690 "ForwardingJavaFileManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.util.Iterator;
import java.util.Set;
import javax.tools.JavaFileObject.Kind;
${definition}"
      associated_elems
	class_ref 1403906 // ForwardingJavaFileManager
      end
      comment "Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 994818 "JavaFileObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.NestingKind;
import javax.lang.model.element.Modifier;
${definition}"
      associated_elems
	class_ref 841858 // JavaFileObject
      end
      comment "Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 994946 "ForwardingJavaFileObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.Modifier;
import javax.lang.model.element.NestingKind;
${definition}"
      associated_elems
	class_ref 1404162 // ForwardingJavaFileObject
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 995074 "SimpleJavaFileObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.net.URI;
import java.nio.CharBuffer;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.NestingKind;
import javax.tools.JavaFileObject.Kind;
${definition}"
      associated_elems
	class_ref 1404290 // SimpleJavaFileObject
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 995202 "StandardJavaFileManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.IOException;
import java.util.*;
${definition}"
      associated_elems
	class_ref 853506 // StandardJavaFileManager
      end
      comment "Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 995330 "StandardLocation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.tools.JavaFileManager.Location;
import java.util.concurrent.*;
${definition}"
      associated_elems
	class_ref 1404418 // StandardLocation
      end
      comment "Copyright (c) 2006, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 995458 "ToolProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.lang.ref.Reference;
import java.lang.ref.WeakReference;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.MalformedURLException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Logger;
import java.util.logging.Level;
import static java.util.logging.Level.*;
${definition}"
      associated_elems
	class_ref 1404546 // ToolProvider
      end
      comment "Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
