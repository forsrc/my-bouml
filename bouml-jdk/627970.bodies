class DescendantTraverser
!!!4020610.java!!!	getFirstPotential(in identity : int) : int
      return identity + 1;
!!!4020738.java!!!	axisHasBeenProcessed(in axisRoot : int) : boolean
      return !(m_nextsib.elementAt(axisRoot) == NOTPROCESSED);
!!!4020866.java!!!	getSubtreeRoot(in handle : int) : int
      return makeNodeIdentity(handle);
!!!4020994.java!!!	isDescendant(in subtreeRootIdentity : int, in identity : int) : boolean
      return _parent(identity) >= subtreeRootIdentity;
!!!4021122.java!!!	isAfterAxis(in axisRoot : int, in identity : int) : boolean
      // %REVIEW% Is there *any* cheaper way to do this?
                        // Yes. In ID space, compare to axisRoot's successor
                        // (next-sib or ancestor's-next-sib). Probably shallower search.
      do
      {
        if(identity == axisRoot)
          return false;
        identity = m_parent.elementAt(identity);
      }
        while(identity >= axisRoot);

      return true;
!!!4021250.java!!!	first(in context : int, in expandedTypeID : int) : int

      if (isIndexed(expandedTypeID))
      {
        int identity = getSubtreeRoot(context);
        int firstPotential = getFirstPotential(identity);

        return makeNodeHandle(getNextIndexed(identity, firstPotential, expandedTypeID));
      }

      return next(context, context, expandedTypeID);
!!!4021378.java!!!	next(in context : int, in current : int) : int

      int subtreeRootIdent = getSubtreeRoot(context);

      for (current = makeNodeIdentity(current) + 1; ; current++)
      {
        int type = _type(current);  // may call nextNode()

        if (!isDescendant(subtreeRootIdent, current))
          return NULL;

        if (ATTRIBUTE_NODE == type || NAMESPACE_NODE == type)
          continue;

        return makeNodeHandle(current);  // make handle.
      }
!!!4021506.java!!!	next(in context : int, in current : int, in expandedTypeID : int) : int

      int subtreeRootIdent = getSubtreeRoot(context);

      current = makeNodeIdentity(current) + 1;

      if (isIndexed(expandedTypeID))
      {
        return makeNodeHandle(getNextIndexed(subtreeRootIdent, current, expandedTypeID));
      }

      for (; ; current++)
      {
        int exptype = _exptype(current);  // may call nextNode()

        if (!isDescendant(subtreeRootIdent, current))
          return NULL;

        if (exptype != expandedTypeID)
          continue;

        return makeNodeHandle(current);  // make handle.
      }
