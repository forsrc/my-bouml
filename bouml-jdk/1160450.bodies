class Nodes
!!!9545218.java!!!	Nodes()
        throw new Error("no instances");
!!!9545346.java!!!	emptyNode(inout shape : StreamShape) : Node
        switch (shape) {
            case REFERENCE:    return (Node<T>) EMPTY_NODE;
            case INT_VALUE:    return (Node<T>) EMPTY_INT_NODE;
            case LONG_VALUE:   return (Node<T>) EMPTY_LONG_NODE;
            case DOUBLE_VALUE: return (Node<T>) EMPTY_DOUBLE_NODE;
            default:
                throw new IllegalStateException("Unknown shape " + shape);
        }
!!!9545474.java!!!	conc(inout shape : StreamShape, inout left : Node, inout right : Node) : Node
        switch (shape) {
            case REFERENCE:
                return new ConcNode<>(left, right);
            case INT_VALUE:
                return (Node<T>) new ConcNode.OfInt((Node.OfInt) left, (Node.OfInt) right);
            case LONG_VALUE:
                return (Node<T>) new ConcNode.OfLong((Node.OfLong) left, (Node.OfLong) right);
            case DOUBLE_VALUE:
                return (Node<T>) new ConcNode.OfDouble((Node.OfDouble) left, (Node.OfDouble) right);
            default:
                throw new IllegalStateException("Unknown shape " + shape);
        }
!!!9545602.java!!!	node(inout array : T [[]]) : Node
        return new ArrayNode<>(array);
!!!9545730.java!!!	node(inout c : Collection) : Node
        return new CollectionNode<>(c);
!!!9545858.java!!!	builder(in exactSizeIfKnown : long, inout generator : IntFunction) : Node::Builder
        return (exactSizeIfKnown >= 0 && exactSizeIfKnown < MAX_ARRAY_SIZE)
               ? new FixedNodeBuilder<>(exactSizeIfKnown, generator)
               : builder();
!!!9545986.java!!!	builder() : Node::Builder
        return new SpinedNodeBuilder<>();
!!!9546114.java!!!	node(inout array : int [[]]) : Node::OfInt
        return new IntArrayNode(array);
!!!9546242.java!!!	intBuilder(in exactSizeIfKnown : long) : Node::Builder::OfInt
        return (exactSizeIfKnown >= 0 && exactSizeIfKnown < MAX_ARRAY_SIZE)
               ? new IntFixedNodeBuilder(exactSizeIfKnown)
               : intBuilder();
!!!9546370.java!!!	intBuilder() : Node::Builder::OfInt
        return new IntSpinedNodeBuilder();
!!!9546498.java!!!	node(in array : long [[]]) : Node::OfLong
        return new LongArrayNode(array);
!!!9546626.java!!!	longBuilder(in exactSizeIfKnown : long) : Node::Builder::OfLong
        return (exactSizeIfKnown >= 0 && exactSizeIfKnown < MAX_ARRAY_SIZE)
               ? new LongFixedNodeBuilder(exactSizeIfKnown)
               : longBuilder();
!!!9546754.java!!!	longBuilder() : Node::Builder::OfLong
        return new LongSpinedNodeBuilder();
!!!9546882.java!!!	node(in array : double [[]]) : Node::OfDouble
        return new DoubleArrayNode(array);
!!!9547010.java!!!	doubleBuilder(in exactSizeIfKnown : long) : Node::Builder::OfDouble
        return (exactSizeIfKnown >= 0 && exactSizeIfKnown < MAX_ARRAY_SIZE)
               ? new DoubleFixedNodeBuilder(exactSizeIfKnown)
               : doubleBuilder();
!!!9547138.java!!!	doubleBuilder() : Node::Builder::OfDouble
        return new DoubleSpinedNodeBuilder();
!!!9547266.java!!!	collect(inout helper : PipelineHelper, inout spliterator : Spliterator, inout flattenTree : boolean, inout generator : IntFunction) : Node
        long size = helper.exactOutputSizeIfKnown(spliterator);
        if (size >= 0 && spliterator.hasCharacteristics(Spliterator.SUBSIZED)) {
            if (size >= MAX_ARRAY_SIZE)
                throw new IllegalArgumentException(BAD_SIZE);
            P_OUT[] array = generator.apply((int) size);
            new SizedCollectorTask.OfRef<>(spliterator, helper, array).invoke();
            return node(array);
        } else {
            Node<P_OUT> node = new CollectorTask.OfRef<>(helper, generator, spliterator).invoke();
            return flattenTree ? flatten(node, generator) : node;
        }
!!!9547394.java!!!	collectInt(inout helper : PipelineHelper, inout spliterator : Spliterator, inout flattenTree : boolean) : Node::OfInt
        long size = helper.exactOutputSizeIfKnown(spliterator);
        if (size >= 0 && spliterator.hasCharacteristics(Spliterator.SUBSIZED)) {
            if (size >= MAX_ARRAY_SIZE)
                throw new IllegalArgumentException(BAD_SIZE);
            int[] array = new int[(int) size];
            new SizedCollectorTask.OfInt<>(spliterator, helper, array).invoke();
            return node(array);
        }
        else {
            Node.OfInt node = new CollectorTask.OfInt<>(helper, spliterator).invoke();
            return flattenTree ? flattenInt(node) : node;
        }
!!!9547522.java!!!	collectLong(inout helper : PipelineHelper, inout spliterator : Spliterator, inout flattenTree : boolean) : Node::OfLong
        long size = helper.exactOutputSizeIfKnown(spliterator);
        if (size >= 0 && spliterator.hasCharacteristics(Spliterator.SUBSIZED)) {
            if (size >= MAX_ARRAY_SIZE)
                throw new IllegalArgumentException(BAD_SIZE);
            long[] array = new long[(int) size];
            new SizedCollectorTask.OfLong<>(spliterator, helper, array).invoke();
            return node(array);
        }
        else {
            Node.OfLong node = new CollectorTask.OfLong<>(helper, spliterator).invoke();
            return flattenTree ? flattenLong(node) : node;
        }
!!!9547650.java!!!	collectDouble(inout helper : PipelineHelper, inout spliterator : Spliterator, inout flattenTree : boolean) : Node::OfDouble
        long size = helper.exactOutputSizeIfKnown(spliterator);
        if (size >= 0 && spliterator.hasCharacteristics(Spliterator.SUBSIZED)) {
            if (size >= MAX_ARRAY_SIZE)
                throw new IllegalArgumentException(BAD_SIZE);
            double[] array = new double[(int) size];
            new SizedCollectorTask.OfDouble<>(spliterator, helper, array).invoke();
            return node(array);
        }
        else {
            Node.OfDouble node = new CollectorTask.OfDouble<>(helper, spliterator).invoke();
            return flattenTree ? flattenDouble(node) : node;
        }
!!!9547778.java!!!	flatten(inout node : Node, inout generator : IntFunction) : Node
        if (node.getChildCount() > 0) {
            long size = node.count();
            if (size >= MAX_ARRAY_SIZE)
                throw new IllegalArgumentException(BAD_SIZE);
            T[] array = generator.apply((int) size);
            new ToArrayTask.OfRef<>(node, array, 0).invoke();
            return node(array);
        } else {
            return node;
        }
!!!9547906.java!!!	flattenInt(inout node : Node::OfInt) : Node::OfInt
        if (node.getChildCount() > 0) {
            long size = node.count();
            if (size >= MAX_ARRAY_SIZE)
                throw new IllegalArgumentException(BAD_SIZE);
            int[] array = new int[(int) size];
            new ToArrayTask.OfInt(node, array, 0).invoke();
            return node(array);
        } else {
            return node;
        }
!!!9548034.java!!!	flattenLong(inout node : Node::OfLong) : Node::OfLong
        if (node.getChildCount() > 0) {
            long size = node.count();
            if (size >= MAX_ARRAY_SIZE)
                throw new IllegalArgumentException(BAD_SIZE);
            long[] array = new long[(int) size];
            new ToArrayTask.OfLong(node, array, 0).invoke();
            return node(array);
        } else {
            return node;
        }
!!!9548162.java!!!	flattenDouble(inout node : Node::OfDouble) : Node::OfDouble
        if (node.getChildCount() > 0) {
            long size = node.count();
            if (size >= MAX_ARRAY_SIZE)
                throw new IllegalArgumentException(BAD_SIZE);
            double[] array = new double[(int) size];
            new ToArrayTask.OfDouble(node, array, 0).invoke();
            return node(array);
        } else {
            return node;
        }
