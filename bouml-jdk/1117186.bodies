class ConcurrentSkipListSet
!!!9136770.java!!!	ConcurrentSkipListSet()
        m = new ConcurrentSkipListMap<E,Object>();
!!!9136898.java!!!	ConcurrentSkipListSet(inout comparator : Comparator)
        m = new ConcurrentSkipListMap<E,Object>(comparator);
!!!9137026.java!!!	ConcurrentSkipListSet(inout c : Collection)
        m = new ConcurrentSkipListMap<E,Object>();
        addAll(c);
!!!9137154.java!!!	ConcurrentSkipListSet(inout s : SortedSet)
        m = new ConcurrentSkipListMap<E,Object>(s.comparator());
        addAll(s);
!!!9137282.java!!!	ConcurrentSkipListSet(inout m : ConcurrentNavigableMap)
        this.m = m;
!!!9137410.java!!!	clone() : ConcurrentSkipListSet
        try {
            @SuppressWarnings("unchecked")
            ConcurrentSkipListSet<E> clone =
                (ConcurrentSkipListSet<E>) super.clone();
            clone.setMap(new ConcurrentSkipListMap<E,Object>(m));
            return clone;
        } catch (CloneNotSupportedException e) {
            throw new InternalError();
        }
!!!9137538.java!!!	size() : int
        return m.size();
!!!9137666.java!!!	isEmpty() : boolean
        return m.isEmpty();
!!!9137794.java!!!	contains(inout o : Object) : boolean
        return m.containsKey(o);
!!!9137922.java!!!	add(inout e : E) : boolean
        return m.putIfAbsent(e, Boolean.TRUE) == null;
!!!9138050.java!!!	remove(inout o : Object) : boolean
        return m.remove(o, Boolean.TRUE);
!!!9138178.java!!!	clear() : void
        m.clear();
!!!9138306.java!!!	iterator() : Iterator
        return m.navigableKeySet().iterator();
!!!9138434.java!!!	descendingIterator() : Iterator
        return m.descendingKeySet().iterator();
!!!9138562.java!!!	equals(inout o : Object) : boolean
        // Override AbstractSet version to avoid calling size()
        if (o == this)
            return true;
        if (!(o instanceof Set))
            return false;
        Collection<?> c = (Collection<?>) o;
        try {
            return containsAll(c) && c.containsAll(this);
        } catch (ClassCastException unused) {
            return false;
        } catch (NullPointerException unused) {
            return false;
        }
!!!9138690.java!!!	removeAll(inout c : Collection) : boolean
        // Override AbstractSet version to avoid unnecessary call to size()
        boolean modified = false;
        for (Object e : c)
            if (remove(e))
                modified = true;
        return modified;
!!!9138818.java!!!	lower(inout e : E) : E
        return m.lowerKey(e);
!!!9138946.java!!!	floor(inout e : E) : E
        return m.floorKey(e);
!!!9139074.java!!!	ceiling(inout e : E) : E
        return m.ceilingKey(e);
!!!9139202.java!!!	higher(inout e : E) : E
        return m.higherKey(e);
!!!9139330.java!!!	pollFirst() : E
        Map.Entry<E,Object> e = m.pollFirstEntry();
        return (e == null) ? null : e.getKey();
!!!9139458.java!!!	pollLast() : E
        Map.Entry<E,Object> e = m.pollLastEntry();
        return (e == null) ? null : e.getKey();
!!!9139586.java!!!	comparator() : Comparator
        return m.comparator();
!!!9139714.java!!!	first() : E
        return m.firstKey();
!!!9139842.java!!!	last() : E
        return m.lastKey();
!!!9139970.java!!!	subSet(inout fromElement : E, inout fromInclusive : boolean, inout toElement : E, inout toInclusive : boolean) : NavigableSet
        return new ConcurrentSkipListSet<E>
            (m.subMap(fromElement, fromInclusive,
                      toElement,   toInclusive));
!!!9140098.java!!!	headSet(inout toElement : E, inout inclusive : boolean) : NavigableSet
        return new ConcurrentSkipListSet<E>(m.headMap(toElement, inclusive));
!!!9140226.java!!!	tailSet(inout fromElement : E, inout inclusive : boolean) : NavigableSet
        return new ConcurrentSkipListSet<E>(m.tailMap(fromElement, inclusive));
!!!9140354.java!!!	subSet(inout fromElement : E, inout toElement : E) : NavigableSet
        return subSet(fromElement, true, toElement, false);
!!!9140482.java!!!	headSet(inout toElement : E) : NavigableSet
        return headSet(toElement, false);
!!!9140610.java!!!	tailSet(inout fromElement : E) : NavigableSet
        return tailSet(fromElement, true);
!!!9140738.java!!!	descendingSet() : NavigableSet
        return new ConcurrentSkipListSet<E>(m.descendingMap());
!!!9140866.java!!!	spliterator() : Spliterator
        if (m instanceof ConcurrentSkipListMap)
            return ((ConcurrentSkipListMap<E,?>)m).keySpliterator();
        else
            return (Spliterator<E>)((ConcurrentSkipListMap.SubMap<E,?>)m).keyIterator();
!!!9140994.java!!!	setMap(inout map : ConcurrentNavigableMap) : void
        UNSAFE.putObjectVolatile(this, mapOffset, map);
