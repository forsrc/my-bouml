class FileOutputStream
!!!6873090.java!!!	FileOutputStream(inout name : String)
        this(name != null ? new File(name) : null, false);
!!!6873218.java!!!	FileOutputStream(inout name : String, inout append : boolean)
        this(name != null ? new File(name) : null, append);
!!!6873346.java!!!	FileOutputStream(inout file : File)
        this(file, false);
!!!6873474.java!!!	FileOutputStream(inout file : File, inout append : boolean)
        String name = (file != null ? file.getPath() : null);
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkWrite(name);
        }
        if (name == null) {
            throw new NullPointerException();
        }
        if (file.isInvalid()) {
            throw new FileNotFoundException("Invalid file path");
        }
        this.fd = new FileDescriptor();
        fd.attach(this);
        this.append = append;
        this.path = name;

        open(name, append);
!!!6873602.java!!!	FileOutputStream(inout fdObj : FileDescriptor)
        SecurityManager security = System.getSecurityManager();
        if (fdObj == null) {
            throw new NullPointerException();
        }
        if (security != null) {
            security.checkWrite(fdObj);
        }
        this.fd = fdObj;
        this.append = false;
        this.path = null;

        fd.attach(this);
!!!6873858.java!!!	open(inout name : String, inout append : boolean) : void
        open0(name, append);
!!!6874114.java!!!	write(in b : int) : void
        write(b, append);
!!!6874370.java!!!	write(inout b : byte [[]]) : void
        writeBytes(b, 0, b.length, append);
!!!6874498.java!!!	write(inout b : byte [[]], in off : int, in len : int) : void
        writeBytes(b, off, len, append);
!!!6874626.java!!!	close() : void
        synchronized (closeLock) {
            if (closed) {
                return;
            }
            closed = true;
        }

        if (channel != null) {
            channel.close();
        }

        fd.closeAll(new Closeable() {
            public void close() throws IOException {
               close0();
           }
        });
!!!6874754.java!!!	getFD() : FileDescriptor
        if (fd != null) {
            return fd;
        }
        throw new IOException();
!!!6874882.java!!!	getChannel() : FileChannel
        synchronized (this) {
            if (channel == null) {
                channel = FileChannelImpl.open(fd, path, false, true, append, this);
            }
            return channel;
        }
!!!6875010.java!!!	finalize() : void
        if (fd != null) {
            if (fd == FileDescriptor.out || fd == FileDescriptor.err) {
                flush();
            } else {
                /* if fd is shared, the references in FileDescriptor
                 * will ensure that finalizer is only called when
                 * safe to do so. All references using the fd have
                 * become unreachable. We can call close()
                 */
                close();
            }
        }
