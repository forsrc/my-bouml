class BasicSpinnerUI
!!!2847490.java!!!	createUI(inout c : JComponent) : ComponentUI
        return new BasicSpinnerUI();
!!!2847618.java!!!	maybeAdd(inout c : Component, inout s : String) : void
        if (c != null) {
            spinner.add(c, s);
        }
!!!2847746.java!!!	installUI(inout c : JComponent) : void
        this.spinner = (JSpinner)c;
        installDefaults();
        installListeners();
        maybeAdd(createNextButton(), "Next");
        maybeAdd(createPreviousButton(), "Previous");
        maybeAdd(createEditor(), "Editor");
        updateEnabledState();
        installKeyboardActions();
!!!2847874.java!!!	uninstallUI(inout c : JComponent) : void
        uninstallDefaults();
        uninstallListeners();
        this.spinner = null;
        c.removeAll();
!!!2848002.java!!!	installListeners() : void
        propertyChangeListener = createPropertyChangeListener();
        spinner.addPropertyChangeListener(propertyChangeListener);
        if (DefaultLookup.getBoolean(spinner, this,
            "Spinner.disableOnBoundaryValues", false)) {
            spinner.addChangeListener(getHandler());
        }
        JComponent editor = spinner.getEditor();
        if (editor != null && editor instanceof JSpinner.DefaultEditor) {
            JTextField tf = ((JSpinner.DefaultEditor)editor).getTextField();
            if (tf != null) {
                tf.addFocusListener(nextButtonHandler);
                tf.addFocusListener(previousButtonHandler);
            }
        }
!!!2848130.java!!!	uninstallListeners() : void
        spinner.removePropertyChangeListener(propertyChangeListener);
        spinner.removeChangeListener(handler);
        JComponent editor = spinner.getEditor();
        removeEditorBorderListener(editor);
        if (editor instanceof JSpinner.DefaultEditor) {
            JTextField tf = ((JSpinner.DefaultEditor)editor).getTextField();
            if (tf != null) {
                tf.removeFocusListener(nextButtonHandler);
                tf.removeFocusListener(previousButtonHandler);
            }
        }
        propertyChangeListener = null;
        handler = null;
!!!2848258.java!!!	installDefaults() : void
        spinner.setLayout(createLayout());
        LookAndFeel.installBorder(spinner, "Spinner.border");
        LookAndFeel.installColorsAndFont(spinner, "Spinner.background", "Spinner.foreground", "Spinner.font");
        LookAndFeel.installProperty(spinner, "opaque", Boolean.TRUE);
!!!2848386.java!!!	uninstallDefaults() : void
        spinner.setLayout(null);
!!!2848514.java!!!	getHandler() : BasicSpinnerUI::Handler
        if (handler == null) {
            handler = new Handler();
        }
        return handler;
!!!2848642.java!!!	installNextButtonListeners(inout c : Component) : void
        installButtonListeners(c, nextButtonHandler);
!!!2848770.java!!!	installPreviousButtonListeners(inout c : Component) : void
        installButtonListeners(c, previousButtonHandler);
!!!2848898.java!!!	installButtonListeners(inout c : Component, inout handler : BasicSpinnerUI::ArrowButtonHandler) : void
        if (c instanceof JButton) {
            ((JButton)c).addActionListener(handler);
        }
        c.addMouseListener(handler);
!!!2849026.java!!!	createLayout() : LayoutManager
        return getHandler();
!!!2849154.java!!!	createPropertyChangeListener() : PropertyChangeListener
        return getHandler();
!!!2849282.java!!!	createPreviousButton() : Component
        Component c = createArrowButton(SwingConstants.SOUTH);
        c.setName("Spinner.previousButton");
        installPreviousButtonListeners(c);
        return c;
!!!2849410.java!!!	createNextButton() : Component
        Component c = createArrowButton(SwingConstants.NORTH);
        c.setName("Spinner.nextButton");
        installNextButtonListeners(c);
        return c;
!!!2849538.java!!!	createArrowButton(in direction : int) : Component
        JButton b = new BasicArrowButton(direction);
        Border buttonBorder = UIManager.getBorder("Spinner.arrowButtonBorder");
        if (buttonBorder instanceof UIResource) {
            // Wrap the border to avoid having the UIResource be replaced by
            // the ButtonUI. This is the opposite of using BorderUIResource.
            b.setBorder(new CompoundBorder(buttonBorder, null));
        } else {
            b.setBorder(buttonBorder);
        }
        b.setInheritsPopupMenu(true);
        return b;
!!!2849666.java!!!	createEditor() : JComponent
        JComponent editor = spinner.getEditor();
        maybeRemoveEditorBorder(editor);
        installEditorBorderListener(editor);
        editor.setInheritsPopupMenu(true);
        updateEditorAlignment(editor);
        return editor;
!!!2849794.java!!!	replaceEditor(inout oldEditor : JComponent, inout newEditor : JComponent) : void
        spinner.remove(oldEditor);
        maybeRemoveEditorBorder(newEditor);
        installEditorBorderListener(newEditor);
        newEditor.setInheritsPopupMenu(true);
        spinner.add(newEditor, "Editor");
!!!2849922.java!!!	updateEditorAlignment(inout editor : JComponent) : void
        if (editor instanceof JSpinner.DefaultEditor) {
            // if editor alignment isn't set in LAF, we get 0 (CENTER) here
            int alignment = UIManager.getInt("Spinner.editorAlignment");
            JTextField text = ((JSpinner.DefaultEditor)editor).getTextField();
            text.setHorizontalAlignment(alignment);
        }
!!!2850050.java!!!	maybeRemoveEditorBorder(inout editor : JComponent) : void
        if (!UIManager.getBoolean("Spinner.editorBorderPainted")) {
            if (editor instanceof JPanel &&
                editor.getBorder() == null &&
                editor.getComponentCount() > 0) {

                editor = (JComponent)editor.getComponent(0);
            }

            if (editor != null && editor.getBorder() instanceof UIResource) {
                editor.setBorder(null);
            }
        }
!!!2850178.java!!!	installEditorBorderListener(inout editor : JComponent) : void
        if (!UIManager.getBoolean("Spinner.editorBorderPainted")) {
            if (editor instanceof JPanel &&
                editor.getBorder() == null &&
                editor.getComponentCount() > 0) {

                editor = (JComponent)editor.getComponent(0);
            }
            if (editor != null &&
                (editor.getBorder() == null ||
                 editor.getBorder() instanceof UIResource)) {
                editor.addPropertyChangeListener(getHandler());
            }
        }
!!!2850306.java!!!	removeEditorBorderListener(inout editor : JComponent) : void
        if (!UIManager.getBoolean("Spinner.editorBorderPainted")) {
            if (editor instanceof JPanel &&
                editor.getComponentCount() > 0) {

                editor = (JComponent)editor.getComponent(0);
            }
            if (editor != null) {
                editor.removePropertyChangeListener(getHandler());
            }
        }
!!!2850434.java!!!	updateEnabledState() : void
        updateEnabledState(spinner, spinner.isEnabled());
!!!2850562.java!!!	updateEnabledState(inout c : Container, inout enabled : boolean) : void
        for (int counter = c.getComponentCount() - 1; counter >= 0;counter--) {
            Component child = c.getComponent(counter);

            if (DefaultLookup.getBoolean(spinner, this,
                "Spinner.disableOnBoundaryValues", false)) {
                SpinnerModel model = spinner.getModel();
                if (child.getName() == "Spinner.nextButton" &&
                    model.getNextValue() == null) {
                    child.setEnabled(false);
                }
                else if (child.getName() == "Spinner.previousButton" &&
                         model.getPreviousValue() == null) {
                    child.setEnabled(false);
                }
                else {
                    child.setEnabled(enabled);
                }
            }
            else {
                child.setEnabled(enabled);
            }
            if (child instanceof Container) {
                updateEnabledState((Container)child, enabled);
            }
        }
!!!2850690.java!!!	installKeyboardActions() : void
        InputMap iMap = getInputMap(JComponent.
                                   WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        SwingUtilities.replaceUIInputMap(spinner, JComponent.
                                         WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,
                                         iMap);

        LazyActionMap.installLazyActionMap(spinner, BasicSpinnerUI.class,
                "Spinner.actionMap");
!!!2850818.java!!!	getInputMap(in condition : int) : InputMap
        if (condition == JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT) {
            return (InputMap)DefaultLookup.get(spinner, this,
                    "Spinner.ancestorInputMap");
        }
        return null;
!!!2850946.java!!!	loadActionMap(inout map : LazyActionMap) : void
        map.put("increment", nextButtonHandler);
        map.put("decrement", previousButtonHandler);
!!!2851074.java!!!	getBaseline(inout c : JComponent, in width : int, in height : int) : int
        super.getBaseline(c, width, height);
        JComponent editor = spinner.getEditor();
        Insets insets = spinner.getInsets();
        width = width - insets.left - insets.right;
        height = height - insets.top - insets.bottom;
        if (width >= 0 && height >= 0) {
            int baseline = editor.getBaseline(width, height);
            if (baseline >= 0) {
                return insets.top + baseline;
            }
        }
        return -1;
!!!2851202.java!!!	getBaselineResizeBehavior(inout c : JComponent) : Component::BaselineResizeBehavior
        super.getBaselineResizeBehavior(c);
        return spinner.getEditor().getBaselineResizeBehavior();
