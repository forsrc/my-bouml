class Level
!!!9377154.java!!!	Level(inout name : String, in value : int)
        this(name, value, null);
!!!9377282.java!!!	Level(inout name : String, in value : int, inout resourceBundleName : String)
        this(name, value, resourceBundleName, true);
!!!9377410.java!!!	Level(inout name : String, in value : int, inout resourceBundleName : String, inout visible : boolean)
        if (name == null) {
            throw new NullPointerException();
        }
        this.name = name;
        this.value = value;
        this.resourceBundleName = resourceBundleName;
        this.localizedLevelName = resourceBundleName == null ? name : null;
        this.cachedLocale = null;
        if (visible) {
            KnownLevel.add(this);
        }
!!!9377538.java!!!	getResourceBundleName() : String
        return resourceBundleName;
!!!9377666.java!!!	getName() : String
        return name;
!!!9377794.java!!!	getLocalizedName() : String
        return getLocalizedLevelName();
!!!9377922.java!!!	getLevelName() : String
        return this.name;
!!!9378050.java!!!	computeLocalizedLevelName(inout newLocale : Locale) : String
        ResourceBundle rb = ResourceBundle.getBundle(resourceBundleName, newLocale);
        final String localizedName = rb.getString(name);

        final boolean isDefaultBundle = defaultBundle.equals(resourceBundleName);
        if (!isDefaultBundle) return localizedName;

        // This is a trick to determine whether the name has been translated
        // or not. If it has not been translated, we need to use Locale.ROOT
        // when calling toUpperCase().
        final Locale rbLocale = rb.getLocale();
        final Locale locale =
                Locale.ROOT.equals(rbLocale)
                || name.equals(localizedName.toUpperCase(Locale.ROOT))
                ? Locale.ROOT : rbLocale;

        // ALL CAPS in a resource bundle's message indicates no translation
        // needed per Oracle translation guideline.  To workaround this
        // in Oracle JDK implementation, convert the localized level name
        // to uppercase for compatibility reason.
        return Locale.ROOT.equals(locale) ? name : localizedName.toUpperCase(locale);
!!!9378178.java!!!	getCachedLocalizedLevelName() : String

        if (localizedLevelName != null) {
            if (cachedLocale != null) {
                if (cachedLocale.equals(Locale.getDefault())) {
                    // OK: our cached value was looked up with the same
                    //     locale. We can use it.
                    return localizedLevelName;
                }
            }
        }

        if (resourceBundleName == null) {
            // No resource bundle: just use the name.
            return name;
        }

        // We need to compute the localized name.
        // Either because it's the first time, or because our cached
        // value is for a different locale. Just return null.
        return null;
!!!9378306.java!!!	getLocalizedLevelName() : String

        // See if we have a cached localized name
        final String cachedLocalizedName = getCachedLocalizedLevelName();
        if (cachedLocalizedName != null) {
            return cachedLocalizedName;
        }

        // No cached localized name or cache invalid.
        // Need to compute the localized name.
        final Locale newLocale = Locale.getDefault();
        try {
            localizedLevelName = computeLocalizedLevelName(newLocale);
        } catch (Exception ex) {
            localizedLevelName = name;
        }
        cachedLocale = newLocale;
        return localizedLevelName;
!!!9378434.java!!!	findLevel(inout name : String) : Level
        if (name == null) {
            throw new NullPointerException();
        }

        KnownLevel level;

        // Look for a known Level with the given non-localized name.
        level = KnownLevel.findByName(name);
        if (level != null) {
            return level.mirroredLevel;
        }

        // Now, check if the given name is an integer.  If so,
        // first look for a Level with the given value and then
        // if necessary create one.
        try {
            int x = Integer.parseInt(name);
            level = KnownLevel.findByValue(x);
            if (level == null) {
                // add new Level
                Level levelObject = new Level(name, x);
                level = KnownLevel.findByValue(x);
            }
            return level.mirroredLevel;
        } catch (NumberFormatException ex) {
            // Not an integer.
            // Drop through.
        }

        level = KnownLevel.findByLocalizedLevelName(name);
        if (level != null) {
            return level.mirroredLevel;
        }

        return null;
!!!9378562.java!!!	toString() : String
        return name;
!!!9378690.java!!!	intValue() : int
        return value;
!!!9378818.java!!!	readResolve() : Object
        KnownLevel o = KnownLevel.matches(this);
        if (o != null) {
            return o.levelObject;
        }

        // Woops.  Whoever sent us this object knows
        // about a new log level.  Add it to our list.
        Level level = new Level(this.name, this.value, this.resourceBundleName);
        return level;
!!!9378946.java!!!	parse(inout name : String) : Level
        // Check that name is not null.
        name.length();

        KnownLevel level;

        // Look for a known Level with the given non-localized name.
        level = KnownLevel.findByName(name);
        if (level != null) {
            return level.levelObject;
        }

        // Now, check if the given name is an integer.  If so,
        // first look for a Level with the given value and then
        // if necessary create one.
        try {
            int x = Integer.parseInt(name);
            level = KnownLevel.findByValue(x);
            if (level == null) {
                // add new Level
                Level levelObject = new Level(name, x);
                level = KnownLevel.findByValue(x);
            }
            return level.levelObject;
        } catch (NumberFormatException ex) {
            // Not an integer.
            // Drop through.
        }

        // Finally, look for a known level with the given localized name,
        // in the current default locale.
        // This is relatively expensive, but not excessively so.
        level = KnownLevel.findByLocalizedLevelName(name);
        if (level != null) {
            return level.levelObject;
        }

        // OK, we've tried everything and failed
        throw new IllegalArgumentException("Bad level \"" + name + "\"");
!!!9379074.java!!!	equals(inout ox : Object) : boolean
        try {
            Level lx = (Level)ox;
            return (lx.value == this.value);
        } catch (Exception ex) {
            return false;
        }
!!!9379202.java!!!	hashCode() : int
        return this.value;
