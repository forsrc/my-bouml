format 222
"im" // jdk1.8::java::awt::im
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/awt/im/"
  java_package "java.awt.im"
  classview 147202 "im"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 345986 "InputMethodRequests"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "InputMethodRequests defines the requests that a text editing component
has to handle in order to work with input methods. The component
can implement this interface itself or use a separate object that
implements it. The object implementing this interface must be returned
from the component's getInputMethodRequests method.

<p>
The text editing component also has to provide an input method event
listener.

<p>
The interface is designed to support one of two input user interfaces:
<ul>
<li><em>on-the-spot</em> input, where the composed text is displayed as part
    of the text component's text body.
<li><em>below-the-spot</em> input, where the composed text is displayed in
    a separate composition window just below the insertion point where
    the text will be inserted when it is committed. Note that, if text is
    selected within the component's text body, this text will be replaced by
    the committed text upon commitment; therefore it is not considered part
    of the context that the text is input into.
</ul>

@see java.awt.Component#getInputMethodRequests
@see java.awt.event.InputMethodListener

@author JavaSoft Asia/Pacific
@since 1.2
"
      operation 6581634 "getTextLocation"
	public return_type class_ref 314114 // Rectangle
	nparams 1
	  param inout name "offset" type class_ref 886914 // TextHitInfo
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the location of a specified offset in the current composed text,
or of the selection in committed text.
This information is, for example, used to position the candidate window
near the composed text, or a composition window near the location
where committed text will be inserted.

<p>
If the component has composed text (because the most recent
InputMethodEvent sent to it contained composed text), then the offset is
relative to the composed text - offset 0 indicates the first character
in the composed text. The location returned should be for this character.

<p>
If the component doesn't have composed text, the offset should be ignored,
and the location returned should reflect the beginning (in line
direction) of the highlight in the last line containing selected text.
For example, for horizontal left-to-right text (such as English), the
location to the left of the left-most character on the last line
containing selected text is returned. For vertical top-to-bottom text,
with lines proceeding from right to left, the location to the top of the
left-most line containing selected text is returned.

<p>
The location is represented as a 0-thickness caret, that is, it has 0
width if the text is drawn horizontally, and 0 height if the text is
drawn vertically. Other text orientations need to be mapped to
horizontal or vertical orientation. The rectangle uses absolute screen
coordinates.

@param offset the offset within the composed text, if there is composed
text; null otherwise
@return a rectangle representing the screen location of the offset
"
      end

      operation 6581762 "getLocationOffset"
	public return_type class_ref 886914 // TextHitInfo
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the offset within the composed text for the specified absolute x
and y coordinates on the screen. This information is used, for example
to handle mouse clicks and the mouse cursor. The offset is relative to
the composed text, so offset 0 indicates the beginning of the composed
text.

<p>
Return null if the location is outside the area occupied by the composed
text.

@param x the absolute x coordinate on screen
@param y the absolute y coordinate on screen
@return a text hit info describing the offset in the composed text.
"
      end

      operation 6581890 "getInsertPositionOffset"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the offset of the insert position in the committed text contained
in the text editing component. This is the offset at which characters
entered through an input method are inserted. This information is used
by an input method, for example, to examine the text surrounding the
insert position.

@return the offset of the insert position
"
      end

      operation 6582018 "getCommittedText"
	public return_type class_ref 472962 // AttributedCharacterIterator
	nparams 3
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	  param inout name "attributes" type class_ref 866050 // Attribute
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an iterator providing access to the entire text and attributes
contained in the text editing component except for uncommitted
text. Uncommitted (composed) text should be ignored for index
calculations and should not be made accessible through the iterator.

<p>
The input method may provide a list of attributes that it is
interested in. In that case, information about other attributes that
the implementor may have need not be made accessible through the
iterator. If the list is null, all available attribute information
should be made accessible.

@param beginIndex the index of the first character
@param endIndex the index of the character following the last character
@param attributes a list of attributes that the input method is
interested in
@return an iterator providing access to the text and its attributes
"
      end

      operation 6582146 "getCommittedTextLength"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the length of the entire text contained in the text
editing component except for uncommitted (composed) text.

@return the length of the text except for uncommitted text
"
      end

      operation 6582274 "cancelLatestCommittedText"
	public return_type class_ref 472962 // AttributedCharacterIterator
	nparams 1
	  param inout name "attributes" type class_ref 866050 // Attribute
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the latest committed text from the text editing component and
removes it from the component's text body.
This is used for the \"Undo Commit\" feature in some input methods, where
the committed text reverts to its previous composed state. The composed
text will be sent to the component using an InputMethodEvent.

<p>
Generally, this feature should only be supported immediately after the
text was committed, not after the user performed other operations on the
text. When the feature is not supported, return null.

<p>
The input method may provide a list of attributes that it is
interested in. In that case, information about other attributes that
the implementor may have need not be made accessible through the
iterator. If the list is null, all available attribute information
should be made accessible.

@param attributes a list of attributes that the input method is
interested in
@return the latest committed text, or null when the \"Undo Commit\"
feature is not supported
"
      end

      operation 6582402 "getSelectedText"
	public return_type class_ref 472962 // AttributedCharacterIterator
	nparams 1
	  param inout name "attributes" type class_ref 866050 // Attribute
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the currently selected text from the text editing component.
This may be used for a variety of purposes.
One of them is the \"Reconvert\" feature in some input methods.
In this case, the input method will typically send an input method event
to replace the selected text with composed text. Depending on the input
method's capabilities, this may be the original composed text for the
selected text, the latest composed text entered anywhere in the text, or
a version of the text that's converted back from the selected text.

<p>
The input method may provide a list of attributes that it is
interested in. In that case, information about other attributes that
the implementor may have need not be made accessible through the
iterator. If the list is null, all available attribute information
should be made accessible.

@param attributes a list of attributes that the input method is
interested in
@return the currently selected text
"
      end
    end

    class 346114 "InputContext"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides methods to control text input facilities such as input
methods and keyboard layouts.
Two methods handle both input methods and keyboard layouts: selectInputMethod
lets a client component select an input method or keyboard layout by locale,
getLocale lets a client component obtain the locale of the current input method
or keyboard layout.
The other methods more specifically support interaction with input methods:
They let client components control the behavior of input methods, and
dispatch events from the client component to the input method.

<p>
By default, one InputContext instance is created per Window instance,
and this input context is shared by all components within the window's
container hierarchy. However, this means that only one text input
operation is possible at any one time within a window, and that the
text needs to be committed when moving the focus from one text component
to another. If this is not desired, text components can create their
own input context instances.

<p>
The Java Platform supports input methods that have been developed in the Java
programming language, using the interfaces in the {@link java.awt.im.spi} package,
and installed into a Java SE Runtime Environment as extensions. Implementations
may also support using the native input methods of the platforms they run on;
however, not all platforms and locales provide input methods. Keyboard layouts
are provided by the host platform.

<p>
Input methods are <em>unavailable</em> if (a) no input method written
in the Java programming language has been installed and (b) the Java Platform implementation
or the underlying platform does not support native input methods. In this case,
input contexts can still be created and used; their behavior is specified with
the individual methods below.

@see java.awt.Component#getInputContext
@see java.awt.Component#enableInputMethods
@author JavaSoft Asia/Pacific
@since 1.2
"
      operation 6579074 "InputContext"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InputContext.
This method is protected so clients cannot instantiate
InputContext directly. Input contexts are obtained by
calling {@link #getInstance}.
"
      end

      operation 6579202 "getInstance"
	class_operation public return_type class_ref 346114 // InputContext
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new InputContext instance.
"
      end

      operation 6579330 "selectInputMethod"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to select an input method or keyboard layout that
supports the given locale, and returns a value indicating whether such
an input method or keyboard layout has been successfully selected. The
following steps are taken until an input method has been selected:

<ul>
<li>
If the currently selected input method or keyboard layout supports the
requested locale, it remains selected.</li>

<li>
If there is no input method or keyboard layout available that supports
the requested locale, the current input method or keyboard layout remains
selected.</li>

<li>
If the user has previously selected an input method or keyboard layout
for the requested locale from the user interface, then the most recently
selected such input method or keyboard layout is reselected.</li>

<li>
Otherwise, an input method or keyboard layout that supports the requested
locale is selected in an implementation dependent way.</li>

</ul>
Before switching away from an input method, any currently uncommitted text
is committed. If no input method or keyboard layout supporting the requested
locale is available, then false is returned.

<p>
Not all host operating systems provide API to determine the locale of
the currently selected native input method or keyboard layout, and to
select a native input method or keyboard layout by locale.
For host operating systems that don't provide such API,
<code>selectInputMethod</code> assumes that native input methods or
keyboard layouts provided by the host operating system support only the
system's default locale.

<p>
A text editing component may call this method, for example, when
the user changes the insertion point, so that the user can
immediately continue typing in the language of the surrounding text.

@param locale The desired new locale.
@return true if the input method or keyboard layout that's active after
        this call supports the desired locale.
@exception NullPointerException if <code>locale</code> is null
"
      end

      operation 6579458 "getLocale"
	public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current locale of the current input method or keyboard
layout.
Returns null if the input context does not have a current input method
or keyboard layout or if the current input method's
{@link java.awt.im.spi.InputMethod#getLocale()} method returns null.

<p>
Not all host operating systems provide API to determine the locale of
the currently selected native input method or keyboard layout.
For host operating systems that don't provide such API,
<code>getLocale</code> assumes that the current locale of all native
input methods or keyboard layouts provided by the host operating system
is the system's default locale.

@return the current locale of the current input method or keyboard layout
@since 1.3
"
      end

      operation 6579586 "setCharacterSubsets"
	public explicit_return_type "void"
	nparams 1
	  param inout name "subsets" type class_ref 895106 // Subset
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subsets of the Unicode character set that input methods of this input
context should be allowed to input. Null may be passed in to
indicate that all characters are allowed. The initial value
is null. The setting applies to the current input method as well
as input methods selected after this call is made. However,
applications cannot rely on this call having the desired effect,
since this setting cannot be passed on to all host input methods -
applications still need to apply their own character validation.
If no input methods are available, then this method has no effect.

@param subsets The subsets of the Unicode character set from which characters may be input
"
      end

      operation 6579714 "setCompositionEnabled"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables or disables the current input method for composition,
depending on the value of the parameter <code>enable</code>.
<p>
An input method that is enabled for composition interprets incoming
events for both composition and control purposes, while a
disabled input method does not interpret events for composition.
Note however that events are passed on to the input method regardless
whether it is enabled or not, and that an input method that is disabled
for composition may still interpret events for control purposes,
including to enable or disable itself for composition.
<p>
For input methods provided by host operating systems, it is not always possible to
determine whether this operation is supported. For example, an input method may enable
composition only for some locales, and do nothing for other locales. For such input
methods, it is possible that this method does not throw
{@link java.lang.UnsupportedOperationException UnsupportedOperationException},
but also does not affect whether composition is enabled.

@param enable whether to enable the current input method for composition
@throws UnsupportedOperationException if there is no current input
method available or the current input method does not support
the enabling/disabling operation
@see #isCompositionEnabled
@since 1.3
"
      end

      operation 6579842 "isCompositionEnabled"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Transient
"
	
	
	
	comment "Determines whether the current input method is enabled for composition.
An input method that is enabled for composition interprets incoming
events for both composition and control purposes, while a
disabled input method does not interpret events for composition.

@return <code>true</code> if the current input method is enabled for
composition; <code>false</code> otherwise
@throws UnsupportedOperationException if there is no current input
method available or the current input method does not support
checking whether it is enabled for composition
@see #setCompositionEnabled
@since 1.3
"
      end

      operation 6579970 "reconvert"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Asks the current input method to reconvert text from the
current client component. The input method obtains the text to
be reconverted from the client component using the
{@link InputMethodRequests#getSelectedText InputMethodRequests.getSelectedText}
method. The other <code>InputMethodRequests</code> methods
must be prepared to deal with further information requests by
the input method. The composed and/or committed text will be
sent to the client component as a sequence of
<code>InputMethodEvent</code>s. If the input method cannot
reconvert the given text, the text is returned as committed
text in an <code>InputMethodEvent</code>.

@throws UnsupportedOperationException if there is no current input
method available or the current input method does not support
the reconversion operation.

@since 1.3
"
      end

      operation 6580098 "dispatchEvent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 339202 // AWTEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dispatches an event to the active input method. Called by AWT.
If no input method is available, then the event will never be consumed.

@param event The event
@exception NullPointerException if <code>event</code> is null
"
      end

      operation 6580226 "removeNotify"
	public explicit_return_type "void"
	nparams 1
	  param inout name "client" type class_ref 338818 // Component
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the input context that a client component has been
removed from its containment hierarchy, or that input method
support has been disabled for the component. This method is
usually called from the client component's
{@link java.awt.Component#removeNotify() Component.removeNotify}
method. Potentially pending input from input methods
for this component is discarded.
If no input methods are available, then this method has no effect.

@param client Client component
@exception NullPointerException if <code>client</code> is null
"
      end

      operation 6580354 "endComposition"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ends any input composition that may currently be going on in this
context. Depending on the platform and possibly user preferences,
this may commit or delete uncommitted text. Any changes to the text
are communicated to the active component using an input method event.
If no input methods are available, then this method has no effect.

<p>
A text editing component may call this in a variety of situations,
for example, when the user moves the insertion point within the text
(but outside the composed text), or when the component's text is
saved to a file or copied to the clipboard.

"
      end

      operation 6580482 "dispose"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases the resources used by this input context.
Called by AWT for the default input context of each Window.
If no input methods are available, then this method
has no effect.
"
      end

      operation 6580610 "getInputMethodControlObject"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a control object from the current input method, or null. A
control object provides methods that control the behavior of the
input method or obtain information from the input method. The type
of the object is an input method specific class. Clients have to
compare the result against known input method control object
classes and cast to the appropriate class to invoke the methods
provided.
<p>
If no input methods are available or the current input method does
not provide an input method control object, then null is returned.

@return A control object from the current input method, or null.
"
      end
    end

    class 881794 "InputMethodHighlight"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An InputMethodHighlight is used to describe the highlight
attributes of text being composed.
The description can be at two levels:
at the abstract level it specifies the conversion state and whether the
text is selected; at the concrete level it specifies style attributes used
to render the highlight.
An InputMethodHighlight must provide the description at the
abstract level; it may or may not provide the description at the concrete
level.
If no concrete style is provided, a renderer should use
{@link java.awt.Toolkit#mapInputMethodHighlight} to map to a concrete style.
<p>
The abstract description consists of three fields: <code>selected</code>,
<code>state</code>, and <code>variation</code>.
<code>selected</code> indicates whether the text range is the one that the
input method is currently working on, for example, the segment for which
conversion candidates are currently shown in a menu.
<code>state</code> represents the conversion state. State values are defined
by the input method framework and should be distinguished in all
mappings from abstract to concrete styles. Currently defined state values
are raw (unconverted) and converted.
These state values are recommended for use before and after the
main conversion step of text composition, say, before and after kana-&gt;kanji
or pinyin-&gt;hanzi conversion.
The <code>variation</code> field allows input methods to express additional
information about the conversion results.
<p>

InputMethodHighlight instances are typically used as attribute values
returned from AttributedCharacterIterator for the INPUT_METHOD_HIGHLIGHT
attribute. They may be wrapped into {@link java.text.Annotation Annotation}
instances to indicate separate text segments.

@see java.text.AttributedCharacterIterator
@since 1.2
"
      attribute 1571970 "RAW_TEXT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the raw text state.

"
      end

      attribute 1572098 "CONVERTED_TEXT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for the converted text state.

"
      end

      classrelation 3034498 // UNSELECTED_RAW_TEXT_HIGHLIGHT (<unidirectional association>)
	relation 3034498 --->
	  a role_name "UNSELECTED_RAW_TEXT_HIGHLIGHT" init_value "
        new InputMethodHighlight(false, RAW_TEXT)" class_relation const_relation public
	    comment "
Constant for the default highlight for unselected raw text.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3034498 // UNSELECTED_RAW_TEXT_HIGHLIGHT (<unidirectional association>)
	  b parent class_ref 881794 // InputMethodHighlight
      end

      classrelation 3034626 // SELECTED_RAW_TEXT_HIGHLIGHT (<unidirectional association>)
	relation 3034626 --->
	  a role_name "SELECTED_RAW_TEXT_HIGHLIGHT" init_value "
        new InputMethodHighlight(true, RAW_TEXT)" class_relation const_relation public
	    comment "
Constant for the default highlight for selected raw text.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3034626 // SELECTED_RAW_TEXT_HIGHLIGHT (<unidirectional association>)
	  b parent class_ref 881794 // InputMethodHighlight
      end

      classrelation 3034754 // UNSELECTED_CONVERTED_TEXT_HIGHLIGHT (<unidirectional association>)
	relation 3034754 --->
	  a role_name "UNSELECTED_CONVERTED_TEXT_HIGHLIGHT" init_value "
        new InputMethodHighlight(false, CONVERTED_TEXT)" class_relation const_relation public
	    comment "
Constant for the default highlight for unselected converted text.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3034754 // UNSELECTED_CONVERTED_TEXT_HIGHLIGHT (<unidirectional association>)
	  b parent class_ref 881794 // InputMethodHighlight
      end

      classrelation 3034882 // SELECTED_CONVERTED_TEXT_HIGHLIGHT (<unidirectional association>)
	relation 3034882 --->
	  a role_name "SELECTED_CONVERTED_TEXT_HIGHLIGHT" init_value "
        new InputMethodHighlight(true, CONVERTED_TEXT)" class_relation const_relation public
	    comment "
Constant for the default highlight for selected converted text.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3034882 // SELECTED_CONVERTED_TEXT_HIGHLIGHT (<unidirectional association>)
	  b parent class_ref 881794 // InputMethodHighlight
      end

      operation 6580738 "InputMethodHighlight"
	public explicit_return_type ""
	nparams 2
	  param inout name "selected" explicit_type "boolean"
	  param in name "state" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an input method highlight record.
The variation is set to 0, the style to null.
@param selected Whether the text range is selected
@param state The conversion state for the text range - RAW_TEXT or CONVERTED_TEXT
@see InputMethodHighlight#RAW_TEXT
@see InputMethodHighlight#CONVERTED_TEXT
@exception IllegalArgumentException if a state other than RAW_TEXT or CONVERTED_TEXT is given
"
      end

      operation 6580866 "InputMethodHighlight"
	public explicit_return_type ""
	nparams 3
	  param inout name "selected" explicit_type "boolean"
	  param in name "state" explicit_type "int"
	  param in name "variation" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an input method highlight record.
The style is set to null.
@param selected Whether the text range is selected
@param state The conversion state for the text range - RAW_TEXT or CONVERTED_TEXT
@param variation The style variation for the text range
@see InputMethodHighlight#RAW_TEXT
@see InputMethodHighlight#CONVERTED_TEXT
@exception IllegalArgumentException if a state other than RAW_TEXT or CONVERTED_TEXT is given
"
      end

      operation 6580994 "InputMethodHighlight"
	public explicit_return_type ""
	nparams 4
	  param inout name "selected" explicit_type "boolean"
	  param in name "state" explicit_type "int"
	  param in name "variation" explicit_type "int"
	  param inout name "style" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<TextAttribute,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an input method highlight record.
The style attributes map provided must be unmodifiable.
@param selected whether the text range is selected
@param state the conversion state for the text range - RAW_TEXT or CONVERTED_TEXT
@param variation the variation for the text range
@param style the rendering style attributes for the text range, or null
@see InputMethodHighlight#RAW_TEXT
@see InputMethodHighlight#CONVERTED_TEXT
@exception IllegalArgumentException if a state other than RAW_TEXT or CONVERTED_TEXT is given
@since 1.3
"
      end

      operation 6581122 "isSelected"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the text range is selected.
"
      end

      operation 6581250 "getState"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the conversion state of the text range.
@return The conversion state for the text range - RAW_TEXT or CONVERTED_TEXT.
@see InputMethodHighlight#RAW_TEXT
@see InputMethodHighlight#CONVERTED_TEXT
"
      end

      operation 6581378 "getVariation"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the variation of the text range.
"
      end

      operation 6581506 "getStyle"
	public return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TextAttribute,?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the rendering style attributes for the text range, or null.
@since 1.3
"
      end

      attribute 1572226 "selected"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1572354 "state"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1572482 "variation"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3035010 // style (<unidirectional association>)
	relation 3035010 --->
	  a role_name "style" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TextAttribute, ?> ${name}${value};
"
	    classrelation_ref 3035010 // style (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end
    end

    class 895234 "InputSubset"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines additional Unicode subsets for use by input methods.  Unlike the
UnicodeBlock subsets defined in the <code>{@link
java.lang.Character.UnicodeBlock}</code> class, these constants do not
directly correspond to Unicode code blocks.

@since   1.2
"
      classrelation 3064706 // <generalisation>
	relation 3064706 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3064706 // <generalisation>
	  b parent class_ref 895106 // Subset
      end

      operation 6596226 "InputSubset"
	private explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3064834 // LATIN (<unidirectional association>)
	relation 3064834 --->
	  a role_name "LATIN" init_value " new InputSubset(\"LATIN\")" class_relation const_relation public
	    comment "
Constant for all Latin characters, including the characters
in the BASIC_LATIN, LATIN_1_SUPPLEMENT, LATIN_EXTENDED_A,
LATIN_EXTENDED_B Unicode character blocks.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3064834 // LATIN (<unidirectional association>)
	  b parent class_ref 895234 // InputSubset
      end

      classrelation 3064962 // LATIN_DIGITS (<unidirectional association>)
	relation 3064962 --->
	  a role_name "LATIN_DIGITS" init_value " new InputSubset(\"LATIN_DIGITS\")" class_relation const_relation public
	    comment "
Constant for the digits included in the BASIC_LATIN Unicode character
block.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3064962 // LATIN_DIGITS (<unidirectional association>)
	  b parent class_ref 895234 // InputSubset
      end

      classrelation 3065090 // TRADITIONAL_HANZI (<unidirectional association>)
	relation 3065090 --->
	  a role_name "TRADITIONAL_HANZI" init_value " new InputSubset(\"TRADITIONAL_HANZI\")" class_relation const_relation public
	    comment "
Constant for all Han characters used in writing Traditional Chinese,
including a subset of the CJK unified ideographs as well as Traditional
Chinese Han characters that may be defined as surrogate characters.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3065090 // TRADITIONAL_HANZI (<unidirectional association>)
	  b parent class_ref 895234 // InputSubset
      end

      classrelation 3065218 // SIMPLIFIED_HANZI (<unidirectional association>)
	relation 3065218 --->
	  a role_name "SIMPLIFIED_HANZI" init_value " new InputSubset(\"SIMPLIFIED_HANZI\")" class_relation const_relation public
	    comment "
Constant for all Han characters used in writing Simplified Chinese,
including a subset of the CJK unified ideographs as well as Simplified
Chinese Han characters that may be defined as surrogate characters.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3065218 // SIMPLIFIED_HANZI (<unidirectional association>)
	  b parent class_ref 895234 // InputSubset
      end

      classrelation 3065346 // KANJI (<unidirectional association>)
	relation 3065346 --->
	  a role_name "KANJI" init_value " new InputSubset(\"KANJI\")" class_relation const_relation public
	    comment "
Constant for all Han characters used in writing Japanese, including a
subset of the CJK unified ideographs as well as Japanese Han characters
that may be defined as surrogate characters.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3065346 // KANJI (<unidirectional association>)
	  b parent class_ref 895234 // InputSubset
      end

      classrelation 3065474 // HANJA (<unidirectional association>)
	relation 3065474 --->
	  a role_name "HANJA" init_value " new InputSubset(\"HANJA\")" class_relation const_relation public
	    comment "
Constant for all Han characters used in writing Korean, including a
subset of the CJK unified ideographs as well as Korean Han characters
that may be defined as surrogate characters.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3065474 // HANJA (<unidirectional association>)
	  b parent class_ref 895234 // InputSubset
      end

      classrelation 3065602 // HALFWIDTH_KATAKANA (<unidirectional association>)
	relation 3065602 --->
	  a role_name "HALFWIDTH_KATAKANA" init_value " new InputSubset(\"HALFWIDTH_KATAKANA\")" class_relation const_relation public
	    comment "
Constant for the halfwidth katakana subset of the Unicode halfwidth and
fullwidth forms character block.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3065602 // HALFWIDTH_KATAKANA (<unidirectional association>)
	  b parent class_ref 895234 // InputSubset
      end

      classrelation 3065730 // FULLWIDTH_LATIN (<unidirectional association>)
	relation 3065730 --->
	  a role_name "FULLWIDTH_LATIN" init_value " new InputSubset(\"FULLWIDTH_LATIN\")" class_relation const_relation public
	    comment "
Constant for the fullwidth ASCII variants subset of the Unicode halfwidth and
fullwidth forms character block.
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3065730 // FULLWIDTH_LATIN (<unidirectional association>)
	  b parent class_ref 895234 // InputSubset
      end

      classrelation 3065858 // FULLWIDTH_DIGITS (<unidirectional association>)
	relation 3065858 --->
	  a role_name "FULLWIDTH_DIGITS" init_value " new InputSubset(\"FULLWIDTH_DIGITS\")" class_relation const_relation public
	    comment "
Constant for the fullwidth digits included in the Unicode halfwidth and
fullwidth forms character block.
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3065858 // FULLWIDTH_DIGITS (<unidirectional association>)
	  b parent class_ref 895234 // InputSubset
      end
    end
  end

  deploymentview 166146 "im"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 644610 "InputContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Component;
import java.util.Locale;
import java.awt.AWTEvent;
import java.beans.Transient;
import java.lang.Character.Subset;
import sun.awt.im.InputMethodContext;
${definition}"
      associated_elems
	class_ref 346114 // InputContext
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 644738 "InputMethodHighlight"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.font.TextAttribute;
import java.util.Map;
${definition}"
      associated_elems
	class_ref 881794 // InputMethodHighlight
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 644866 "InputMethodRequests"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Rectangle;
import java.awt.font.TextHitInfo;
import java.text.AttributedCharacterIterator;
import java.text.AttributedCharacterIterator.Attribute;
${definition}"
      associated_elems
	class_ref 345986 // InputMethodRequests
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 645122 "InputSubset"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 895234 // InputSubset
      end
      comment "Copyright (c) 1998, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end

  package_ref 180994 // spi
end
