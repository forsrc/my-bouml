format 222
"sql" // jdk1.8::java::sql
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/sql/"
  java_package "java.sql"
  classview 175874 "sql"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1037058 "Array"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The mapping in the Java programming language for the SQL type
<code>ARRAY</code>.
By default, an <code>Array</code> value is a transaction-duration
reference to an SQL <code>ARRAY</code> value.  By default, an <code>Array</code>
object is implemented using an SQL LOCATOR(array) internally, which
means that an <code>Array</code> object contains a logical pointer
to the data in the SQL <code>ARRAY</code> value rather
than containing the <code>ARRAY</code> value's data.
<p>
The <code>Array</code> interface provides methods for bringing an SQL
<code>ARRAY</code> value's data to the client as either an array or a
<code>ResultSet</code> object.
If the elements of the SQL <code>ARRAY</code>
are a UDT, they may be custom mapped.  To create a custom mapping,
a programmer must do two things:
<ul>
<li>create a class that implements the {@link SQLData}
interface for the UDT to be custom mapped.
<li>make an entry in a type map that contains
  <ul>
  <li>the fully-qualified SQL type name of the UDT
  <li>the <code>Class</code> object for the class implementing
      <code>SQLData</code>
  </ul>
</ul>
<p>
When a type map with an entry for
the base type is supplied to the methods <code>getArray</code>
and <code>getResultSet</code>, the mapping
it contains will be used to map the elements of the <code>ARRAY</code> value.
If no type map is supplied, which would typically be the case,
the connection's type map is used by default.
If the connection's type map or a type map supplied to a method has no entry
for the base type, the elements are mapped according to the standard mapping.
<p>
All methods on the <code>Array</code> interface must be fully implemented if the
JDBC driver supports the data type.

@since 1.2
"
      operation 8090882 "getBaseTypeName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the SQL type name of the elements in
the array designated by this <code>Array</code> object.
If the elements are a built-in type, it returns
the database-specific type name of the elements.
If the elements are a user-defined type (UDT),
this method returns the fully-qualified SQL type name.

@return a <code>String</code> that is the database-specific
name for a built-in base type; or the fully-qualified SQL type
name for a base type that is a UDT
@exception SQLException if an error occurs while attempting
to access the type name
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8091010 "getBaseType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the JDBC type of the elements in the array designated
by this <code>Array</code> object.

@return a constant from the class {@link java.sql.Types} that is
the type code for the elements in the array designated by this
<code>Array</code> object
@exception SQLException if an error occurs while attempting
to access the base type
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8091138 "getArray"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the contents of the SQL <code>ARRAY</code> value designated
by this
<code>Array</code> object in the form of an array in the Java
programming language. This version of the method <code>getArray</code>
uses the type map associated with the connection for customizations of
the type mappings.
<p>
<strong>Note:</strong> When <code>getArray</code> is used to materialize
a base type that maps to a primitive data type, then it is
implementation-defined whether the array returned is an array of
that primitive data type or an array of <code>Object</code>.

@return an array in the Java programming language that contains
the ordered elements of the SQL <code>ARRAY</code> value
designated by this <code>Array</code> object
@exception SQLException if an error occurs while attempting to
access the array
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8091266 "getArray"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the contents of the SQL <code>ARRAY</code> value designated by this
<code>Array</code> object.
This method uses
the specified <code>map</code> for type map customizations
unless the base type of the array does not match a user-defined
type in <code>map</code>, in which case it
uses the standard mapping. This version of the method
<code>getArray</code> uses either the given type map or the standard mapping;
it never uses the type map associated with the connection.
<p>
<strong>Note:</strong> When <code>getArray</code> is used to materialize
a base type that maps to a primitive data type, then it is
implementation-defined whether the array returned is an array of
that primitive data type or an array of <code>Object</code>.

@param map a <code>java.util.Map</code> object that contains mappings
           of SQL type names to classes in the Java programming language
@return an array in the Java programming language that contains the ordered
        elements of the SQL array designated by this object
@exception SQLException if an error occurs while attempting to
                        access the array
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8091394 "getArray"
	public return_type class_ref 129538 // Object
	nparams 2
	  param in name "index" explicit_type "long"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a slice of the SQL <code>ARRAY</code>
value designated by this <code>Array</code> object, beginning with the
specified <code>index</code> and containing up to <code>count</code>
successive elements of the SQL array.  This method uses the type map
associated with the connection for customizations of the type mappings.
<p>
<strong>Note:</strong> When <code>getArray</code> is used to materialize
a base type that maps to a primitive data type, then it is
implementation-defined whether the array returned is an array of
that primitive data type or an array of <code>Object</code>.

@param index the array index of the first element to retrieve;
             the first element is at index 1
@param count the number of successive SQL array elements to retrieve
@return an array containing up to <code>count</code> consecutive elements
of the SQL array, beginning with element <code>index</code>
@exception SQLException if an error occurs while attempting to
access the array
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8091522 "getArray"
	public return_type class_ref 129538 // Object
	nparams 3
	  param in name "index" explicit_type "long"
	  param in name "count" explicit_type "int"
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String,Class<?>> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retreives a slice of the SQL <code>ARRAY</code> value
designated by this <code>Array</code> object, beginning with the specified
<code>index</code> and containing up to <code>count</code>
successive elements of the SQL array.
<P>
This method uses
the specified <code>map</code> for type map customizations
unless the base type of the array does not match a user-defined
type in <code>map</code>, in which case it
uses the standard mapping. This version of the method
<code>getArray</code> uses either the given type map or the standard mapping;
it never uses the type map associated with the connection.
<p>
<strong>Note:</strong> When <code>getArray</code> is used to materialize
a base type that maps to a primitive data type, then it is
implementation-defined whether the array returned is an array of
that primitive data type or an array of <code>Object</code>.

@param index the array index of the first element to retrieve;
             the first element is at index 1
@param count the number of successive SQL array elements to
retrieve
@param map a <code>java.util.Map</code> object
that contains SQL type names and the classes in
the Java programming language to which they are mapped
@return an array containing up to <code>count</code>
consecutive elements of the SQL <code>ARRAY</code> value designated by this
<code>Array</code> object, beginning with element
<code>index</code>
@exception SQLException if an error occurs while attempting to
access the array
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8091650 "getResultSet"
	public return_type class_ref 1037314 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a result set that contains the elements of the SQL
<code>ARRAY</code> value
designated by this <code>Array</code> object.  If appropriate,
the elements of the array are mapped using the connection's type
map; otherwise, the standard mapping is used.
<p>
The result set contains one row for each array element, with
two columns in each row.  The second column stores the element
value; the first column stores the index into the array for
that element (with the first array element being at index 1).
The rows are in ascending order corresponding to
the order of the indices.

@return a {@link ResultSet} object containing one row for each
of the elements in the array designated by this <code>Array</code>
object, with the rows in ascending order based on the indices.
@exception SQLException if an error occurs while attempting to
access the array
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8091778 "getResultSet"
	public return_type class_ref 1037314 // ResultSet
	nparams 1
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a result set that contains the elements of the SQL
<code>ARRAY</code> value designated by this <code>Array</code> object.
This method uses
the specified <code>map</code> for type map customizations
unless the base type of the array does not match a user-defined
type in <code>map</code>, in which case it
uses the standard mapping. This version of the method
<code>getResultSet</code> uses either the given type map or the standard mapping;
it never uses the type map associated with the connection.
<p>
The result set contains one row for each array element, with
two columns in each row.  The second column stores the element
value; the first column stores the index into the array for
that element (with the first array element being at index 1).
The rows are in ascending order corresponding to
the order of the indices.

@param map contains the mapping of SQL user-defined types to
classes in the Java programming language
@return a <code>ResultSet</code> object containing one row for each
of the elements in the array designated by this <code>Array</code>
object, with the rows in ascending order based on the indices.
@exception SQLException if an error occurs while attempting to
access the array
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8091906 "getResultSet"
	public return_type class_ref 1037314 // ResultSet
	nparams 2
	  param in name "index" explicit_type "long"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a result set holding the elements of the subarray that
starts at index <code>index</code> and contains up to
<code>count</code> successive elements.  This method uses
the connection's type map to map the elements of the array if
the map contains an entry for the base type. Otherwise, the
standard mapping is used.
<P>
The result set has one row for each element of the SQL array
designated by this object, with the first row containing the
element at index <code>index</code>.  The result set has
up to <code>count</code> rows in ascending order based on the
indices.  Each row has two columns:  The second column stores
the element value; the first column stores the index into the
array for that element.

@param index the array index of the first element to retrieve;
             the first element is at index 1
@param count the number of successive SQL array elements to retrieve
@return a <code>ResultSet</code> object containing up to
<code>count</code> consecutive elements of the SQL array
designated by this <code>Array</code> object, starting at
index <code>index</code>.
@exception SQLException if an error occurs while attempting to
access the array
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8092034 "getResultSet"
	public return_type class_ref 1037314 // ResultSet
	nparams 3
	  param in name "index" explicit_type "long"
	  param in name "count" explicit_type "int"
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String,Class<?>> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a result set holding the elements of the subarray that
starts at index <code>index</code> and contains up to
<code>count</code> successive elements.
This method uses
the specified <code>map</code> for type map customizations
unless the base type of the array does not match a user-defined
type in <code>map</code>, in which case it
uses the standard mapping. This version of the method
<code>getResultSet</code> uses either the given type map or the standard mapping;
it never uses the type map associated with the connection.
<P>
The result set has one row for each element of the SQL array
designated by this object, with the first row containing the
element at index <code>index</code>.  The result set has
up to <code>count</code> rows in ascending order based on the
indices.  Each row has two columns:  The second column stores
the element value; the first column stores the index into the
array for that element.

@param index the array index of the first element to retrieve;
             the first element is at index 1
@param count the number of successive SQL array elements to retrieve
@param map the <code>Map</code> object that contains the mapping
of SQL type names to classes in the Java(tm) programming language
@return a <code>ResultSet</code> object containing up to
<code>count</code> consecutive elements of the SQL array
designated by this <code>Array</code> object, starting at
index <code>index</code>.
@exception SQLException if an error occurs while attempting to
access the array
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8092162 "free"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method frees the <code>Array</code> object and releases the resources that
it holds. The object is invalid once the <code>free</code>
method is called.
<p>
After <code>free</code> has been called, any attempt to invoke a
method other than <code>free</code> will result in a <code>SQLException</code>
being thrown.  If <code>free</code> is called multiple times, the subsequent
calls to <code>free</code> are treated as a no-op.
<p>

@throws SQLException if an error occurs releasing
the Array's resources
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end
    end

    class 1037186 "SQLException"
      visibility public 
      nactuals 1
      actual class class_ref 184322 // Iterable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P>An exception that provides information on a database access
error or other errors.

<P>Each <code>SQLException</code> provides several kinds of information:
<UL>
  <LI> a string describing the error.  This is used as the Java Exception
      message, available via the method <code>getMesasge</code>.
  <LI> a \"SQLstate\" string, which follows either the XOPEN SQLstate conventions
       or the SQL:2003 conventions.
      The values of the SQLState string are described in the appropriate spec.
      The <code>DatabaseMetaData</code> method <code>getSQLStateType</code>
      can be used to discover whether the driver returns the XOPEN type or
      the SQL:2003 type.
  <LI> an integer error code that is specific to each vendor.  Normally this will
      be the actual error code returned by the underlying database.
  <LI> a chain to a next Exception.  This can be used to provide additional
      error information.
  <LI> the causal relationship, if any for this <code>SQLException</code>.
</UL>
"
      classrelation 3397506 // <generalisation>
	relation 3397506 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3397506 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      classrelation 3397634 // <realization>
	relation 3397634 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3397634 // <realization>
	  b parent class_ref 184322 // Iterable
      end

      operation 8092290 "SQLException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLException</code> object with a given
<code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
"
      end

      operation 8092418 "SQLException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLException</code> object with a given
<code>reason</code> and <code>SQLState</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
"
      end

      operation 8092546 "SQLException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLException</code> object with a given
<code>reason</code>. The  <code>SQLState</code>  is initialized to
<code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
"
      end

      operation 8092674 "SQLException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLException</code> object.
The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.

"
      end

      operation 8092802 "SQLException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLException</code> object with a given
<code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLException</code>
(which is saved for later retrieval by the <code>getCause()</code> method);
may be null indicating the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8092930 "SQLException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLException</code> object with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param cause the underlying reason for this <code>SQLException</code>
(which is saved for later retrieval by the <code>getCause()</code> method);
may be null indicating the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8093058 "SQLException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "sqlState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLException</code> object with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param sqlState an XOPEN or SQL:2003 code identifying the exception
@param cause the underlying reason for this <code>SQLException</code>
(which is saved for later retrieval by the
<code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8093186 "SQLException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "sqlState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLException</code> object with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the exception
@param sqlState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
@param cause the underlying reason for this <code>SQLException</code>
(which is saved for later retrieval by the <code>getCause()</code> method);
may be null indicating the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8093314 "getSQLState"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the SQLState for this <code>SQLException</code> object.

@return the SQLState value
"
      end

      operation 8093442 "getErrorCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the vendor-specific exception code
for this <code>SQLException</code> object.

@return the vendor's error code
"
      end

      operation 8093570 "getNextException"
	public return_type class_ref 1037186 // SQLException
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the exception chained to this
<code>SQLException</code> object by setNextException(SQLException ex).

@return the next <code>SQLException</code> object in the chain;
        <code>null</code> if there are none
@see #setNextException
"
      end

      operation 8093698 "setNextException"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ex" type class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an <code>SQLException</code> object to the end of the chain.

@param ex the new exception that will be added to the end of
           the <code>SQLException</code> chain
@see #getNextException
"
      end

      operation 8093826 "iterator"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Throwable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the chained SQLExceptions.  The iterator will
be used to iterate over each SQLException and its underlying cause
(if any).

@return an iterator over the chained SQLExceptions and causes in the proper
order

@since 1.6
"
      end

      classrelation 3397762 // SQLState (<unidirectional association>)
	relation 3397762 --->
	  a role_name "SQLState" private
	    comment "
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3397762 // SQLState (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1875074 "vendorCode"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial

"
      end

      classrelation 3397890 // next (<unidirectional association>)
	relation 3397890 --->
	  a role_name "next" volatile private
	    comment "
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3397890 // next (<unidirectional association>)
	  b parent class_ref 1037186 // SQLException
      end

      classrelation 3398018 // nextUpdater (<unidirectional association>)
	relation 3398018 --->
	  a role_name "nextUpdater" init_value "
            AtomicReferenceFieldUpdater.newUpdater(SQLException.class,SQLException.class,\"next\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<SQLException,SQLException> ${name}${value};
"
	    classrelation_ref 3398018 // nextUpdater (<unidirectional association>)
	  b parent class_ref 921474 // AtomicReferenceFieldUpdater
      end

      attribute 1875202 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2135244094396331484L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1037314 "ResultSet"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A table of data representing a database result set, which
is usually generated by executing a statement that queries the database.

<P>A <code>ResultSet</code> object  maintains a cursor pointing
to its current row of data.  Initially the cursor is positioned
before the first row. The <code>next</code> method moves the
cursor to the next row, and because it returns <code>false</code>
when there are no more rows in the <code>ResultSet</code> object,
it can be used in a <code>while</code> loop to iterate through
the result set.
<P>
A default <code>ResultSet</code> object is not updatable and
has a cursor that moves forward only.  Thus, you can
iterate through it only once and only from the first row to the
last row. It is possible to
produce <code>ResultSet</code> objects that are scrollable and/or
updatable.  The following code fragment, in which <code>con</code>
is a valid <code>Connection</code> object, illustrates how to make
a result set that is scrollable and insensitive to updates by others, and
that is updatable. See <code>ResultSet</code> fields for other
options.
<PRE>

      Statement stmt = con.createStatement(
                                     ResultSet.TYPE_SCROLL_INSENSITIVE,
                                     ResultSet.CONCUR_UPDATABLE);
      ResultSet rs = stmt.executeQuery(\"SELECT a, b FROM TABLE2\");
      // rs will be scrollable, will not show changes made by others,
      // and will be updatable

</PRE>
The <code>ResultSet</code> interface provides
<i>getter</i> methods (<code>getBoolean</code>, <code>getLong</code>, and so on)
for retrieving column values from the current row.
Values can be retrieved using either the index number of the
column or the name of the column.  In general, using the
column index will be more efficient.  Columns are numbered from 1.
For maximum portability, result set columns within each row should be
read in left-to-right order, and each column should be read only once.

<P>For the getter methods, a JDBC driver attempts
to convert the underlying data to the Java type specified in the
getter method and returns a suitable Java value.  The JDBC specification
has a table showing the allowable mappings from SQL types to Java types
that can be used by the <code>ResultSet</code> getter methods.

<P>Column names used as input to getter methods are case
insensitive.  When a getter method is called  with
a column name and several columns have the same name,
the value of the first matching column will be returned.
The column name option is
designed to be used when column names are used in the SQL
query that generated the result set.
For columns that are NOT explicitly named in the query, it
is best to use column numbers. If column names are used, the
programmer should take care to guarantee that they uniquely refer to
the intended columns, which can be assured with the SQL <i>AS</i> clause.
<P>
A set of updater methods were added to this interface
in the JDBC 2.0 API (Java&trade; 2 SDK,
Standard Edition, version 1.2). The comments regarding parameters
to the getter methods also apply to parameters to the
updater methods.
<P>
The updater methods may be used in two ways:
<ol>
<LI>to update a column value in the current row.  In a scrollable
    <code>ResultSet</code> object, the cursor can be moved backwards
    and forwards, to an absolute position, or to a position
    relative to the current row.
    The following code fragment updates the <code>NAME</code> column
    in the fifth row of the <code>ResultSet</code> object
    <code>rs</code> and then uses the method <code>updateRow</code>
    to update the data source table from which <code>rs</code> was derived.
<PRE>

      rs.absolute(5); // moves the cursor to the fifth row of rs
      rs.updateString(\"NAME\", \"AINSWORTH\"); // updates the
         // <code>NAME</code> column of row 5 to be <code>AINSWORTH</code>
      rs.updateRow(); // updates the row in the data source

</PRE>
<LI>to insert column values into the insert row.  An updatable
    <code>ResultSet</code> object has a special row associated with
    it that serves as a staging area for building a row to be inserted.
    The following code fragment moves the cursor to the insert row, builds
    a three-column row, and inserts it into <code>rs</code> and into
    the data source table using the method <code>insertRow</code>.
<PRE>

      rs.moveToInsertRow(); // moves cursor to the insert row
      rs.updateString(1, \"AINSWORTH\"); // updates the
         // first column of the insert row to be <code>AINSWORTH</code>
      rs.updateInt(2,35); // updates the second column to be <code>35</code>
      rs.updateBoolean(3, true); // updates the third column to <code>true</code>
      rs.insertRow();
      rs.moveToCurrentRow();

</PRE>
</ol>
<P>A <code>ResultSet</code> object is automatically closed when the
<code>Statement</code> object that
generated it is closed, re-executed, or used
to retrieve the next result from a sequence of multiple results.

<P>The number, types and properties of a <code>ResultSet</code>
object's columns are provided by the <code>ResultSetMetaData</code>
object returned by the <code>ResultSet.getMetaData</code> method.

@see Statement#executeQuery
@see Statement#getResultSet
@see ResultSetMetaData
"
      classrelation 3402114 // <generalisation>
	relation 3402114 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3402114 // <generalisation>
	  b parent class_ref 1038082 // Wrapper
      end

      classrelation 3402242 // <generalisation>
	relation 3402242 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3402242 // <generalisation>
	  b parent class_ref 146690 // AutoCloseable
      end

      operation 8174978 "next"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor forward one row from its current position.
A <code>ResultSet</code> cursor is initially positioned
before the first row; the first call to the method
<code>next</code> makes the first row the current row; the
second call makes the second row the current row, and so on.
<p>
When a call to the <code>next</code> method returns <code>false</code>,
the cursor is positioned after the last row. Any
invocation of a <code>ResultSet</code> method which requires a
current row will result in a <code>SQLException</code> being thrown.
 If the result set type is <code>TYPE_FORWARD_ONLY</code>, it is vendor specified
whether their JDBC driver implementation will return <code>false</code> or
 throw an <code>SQLException</code> on a
subsequent call to <code>next</code>.

<P>If an input stream is open for the current row, a call
to the method <code>next</code> will
implicitly close it. A <code>ResultSet</code> object's
warning chain is cleared when a new row is read.

@return <code>true</code> if the new current row is valid;
<code>false</code> if there are no more rows
@exception SQLException if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8175106 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases this <code>ResultSet</code> object's database and
JDBC resources immediately instead of waiting for
this to happen when it is automatically closed.

<P>The closing of a <code>ResultSet</code> object does <strong>not</strong> close the <code>Blob</code>,
<code>Clob</code> or <code>NClob</code> objects created by the <code>ResultSet</code>. <code>Blob</code>,
<code>Clob</code> or <code>NClob</code> objects remain valid for at least the duration of the
transaction in which they are created, unless their <code>free</code> method is invoked.
<p>
When a <code>ResultSet</code> is closed, any <code>ResultSetMetaData</code>
instances that were created by calling the  <code>getMetaData</code>
method remain accessible.

<P><B>Note:</B> A <code>ResultSet</code> object
is automatically closed by the
<code>Statement</code> object that generated it when
that <code>Statement</code> object is closed,
re-executed, or is used to retrieve the next result from a
sequence of multiple results.
<p>
Calling the method <code>close</code> on a <code>ResultSet</code>
object that is already closed is a no-op.


@exception SQLException if a database access error occurs
"
      end

      operation 8175234 "wasNull"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports whether
the last column read had a value of SQL <code>NULL</code>.
Note that you must first call one of the getter methods
on a column to try to read its value and then call
the method <code>wasNull</code> to see if the value read was
SQL <code>NULL</code>.

@return <code>true</code> if the last column value read was SQL
        <code>NULL</code> and <code>false</code> otherwise
@exception SQLException if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8175362 "getString"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Methods for accessing results by column index

Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>String</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8175490 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>boolean</code> in the Java programming language.

<P>If the designated column has a datatype of CHAR or VARCHAR
and contains a \"0\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
and contains  a 0, a value of <code>false</code> is returned.  If the designated column has a datatype
of CHAR or VARCHAR
and contains a \"1\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
and contains  a 1, a value of <code>true</code> is returned.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>false</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8175618 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>byte</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8175746 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>short</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8175874 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
an <code>int</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8176002 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>long</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8176130 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>float</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8176258 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>double</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8176386 "getBigDecimal"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.sql.BigDecimal</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@param scale the number of digits to the right of the decimal point
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@deprecated Use {@code getBigDecimal(int columnIndex)}
            or {@code getBigDecimal(String columnLabel)}
"
      end

      operation 8176514 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>byte</code> array in the Java programming language.
The bytes represent the raw values returned by the driver.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8176642 "getDate"
	public return_type class_ref 1038466 // Date
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.sql.Date</code> object in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8176770 "getTime"
	public return_type class_ref 1038594 // Time
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.sql.Time</code> object in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8176898 "getTimestamp"
	public return_type class_ref 1038722 // Timestamp
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.sql.Timestamp</code> object in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8177026 "getAsciiStream"
	public return_type class_ref 146434 // InputStream
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a stream of ASCII characters. The value can then be read in chunks from the
stream. This method is particularly
suitable for retrieving large <code>LONGVARCHAR</code> values.
The JDBC driver will
do any necessary conversion from the database format into ASCII.

<P><B>Note:</B> All the data in the returned stream must be
read prior to getting the value of any other column. The next
call to a getter method implicitly closes the stream.  Also, a
stream may return <code>0</code> when the method
<code>InputStream.available</code>
is called whether there is data available or not.

@param columnIndex the first column is 1, the second is 2, ...
@return a Java input stream that delivers the database column value
as a stream of one-byte ASCII characters;
if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8177154 "getUnicodeStream"
	public return_type class_ref 146434 // InputStream
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
as a stream of two-byte 3 characters. The first byte is
the high byte; the second byte is the low byte.

The value can then be read in chunks from the
stream. This method is particularly
suitable for retrieving large <code>LONGVARCHAR</code>values.  The
JDBC driver will do any necessary conversion from the database
format into Unicode.

<P><B>Note:</B> All the data in the returned stream must be
read prior to getting the value of any other column. The next
call to a getter method implicitly closes the stream.
Also, a stream may return <code>0</code> when the method
<code>InputStream.available</code>
is called, whether there is data available or not.

@param columnIndex the first column is 1, the second is 2, ...
@return a Java input stream that delivers the database column value
        as a stream of two-byte Unicode characters;
        if the value is SQL <code>NULL</code>, the value returned is
        <code>null</code>

@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@deprecated use <code>getCharacterStream</code> in place of
             <code>getUnicodeStream</code>
"
      end

      operation 8177282 "getBinaryStream"
	public return_type class_ref 146434 // InputStream
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a  stream of
uninterpreted bytes. The value can then be read in chunks from the
stream. This method is particularly
suitable for retrieving large <code>LONGVARBINARY</code> values.

<P><B>Note:</B> All the data in the returned stream must be
read prior to getting the value of any other column. The next
call to a getter method implicitly closes the stream.  Also, a
stream may return <code>0</code> when the method
<code>InputStream.available</code>
is called whether there is data available or not.

@param columnIndex the first column is 1, the second is 2, ...
@return a Java input stream that delivers the database column value
        as a stream of uninterpreted bytes;
        if the value is SQL <code>NULL</code>, the value returned is
        <code>null</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8177410 "getString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Methods for accessing results by column label

Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>String</code> in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8177538 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>boolean</code> in the Java programming language.

<P>If the designated column has a datatype of CHAR or VARCHAR
and contains a \"0\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
and contains  a 0, a value of <code>false</code> is returned.  If the designated column has a datatype
of CHAR or VARCHAR
and contains a \"1\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
and contains  a 1, a value of <code>true</code> is returned.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>false</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8177666 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>byte</code> in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8177794 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>short</code> in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8177922 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
an <code>int</code> in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8178050 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>long</code> in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8178178 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>float</code> in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8178306 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>double</code> in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8178434 "getBigDecimal"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.math.BigDecimal</code> in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param scale the number of digits to the right of the decimal point
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@deprecated Use {@code getBigDecimal(int columnIndex)}
            or {@code getBigDecimal(String columnLabel)}
"
      end

      operation 8178562 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>byte</code> array in the Java programming language.
The bytes represent the raw values returned by the driver.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8178690 "getDate"
	public return_type class_ref 1038466 // Date
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.sql.Date</code> object in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8178818 "getTime"
	public return_type class_ref 1038594 // Time
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.sql.Time</code> object in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8178946 "getTimestamp"
	public return_type class_ref 1038722 // Timestamp
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.sql.Timestamp</code> object in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8179074 "getAsciiStream"
	public return_type class_ref 146434 // InputStream
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a stream of
ASCII characters. The value can then be read in chunks from the
stream. This method is particularly
suitable for retrieving large <code>LONGVARCHAR</code> values.
The JDBC driver will
do any necessary conversion from the database format into ASCII.

<P><B>Note:</B> All the data in the returned stream must be
read prior to getting the value of any other column. The next
call to a getter method implicitly closes the stream. Also, a
stream may return <code>0</code> when the method <code>available</code>
is called whether there is data available or not.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return a Java input stream that delivers the database column value
as a stream of one-byte ASCII characters.
If the value is SQL <code>NULL</code>,
the value returned is <code>null</code>.
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8179202 "getUnicodeStream"
	public return_type class_ref 146434 // InputStream
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a stream of two-byte
Unicode characters. The first byte is the high byte; the second
byte is the low byte.

The value can then be read in chunks from the
stream. This method is particularly
suitable for retrieving large <code>LONGVARCHAR</code> values.
The JDBC technology-enabled driver will
do any necessary conversion from the database format into Unicode.

<P><B>Note:</B> All the data in the returned stream must be
read prior to getting the value of any other column. The next
call to a getter method implicitly closes the stream.
Also, a stream may return <code>0</code> when the method
<code>InputStream.available</code> is called, whether there
is data available or not.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return a Java input stream that delivers the database column value
        as a stream of two-byte Unicode characters.
        If the value is SQL <code>NULL</code>, the value returned
        is <code>null</code>.
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@deprecated use <code>getCharacterStream</code> instead
"
      end

      operation 8179330 "getBinaryStream"
	public return_type class_ref 146434 // InputStream
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a stream of uninterpreted
<code>byte</code>s.
The value can then be read in chunks from the
stream. This method is particularly
suitable for retrieving large <code>LONGVARBINARY</code>
values.

<P><B>Note:</B> All the data in the returned stream must be
read prior to getting the value of any other column. The next
call to a getter method implicitly closes the stream. Also, a
stream may return <code>0</code> when the method <code>available</code>
is called whether there is data available or not.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return a Java input stream that delivers the database column value
as a stream of uninterpreted bytes;
if the value is SQL <code>NULL</code>, the result is <code>null</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8179458 "getWarnings"
	public return_type class_ref 1038210 // SQLWarning
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Advanced features:

Retrieves the first warning reported by calls on this
<code>ResultSet</code> object.
Subsequent warnings on this <code>ResultSet</code> object
will be chained to the <code>SQLWarning</code> object that
this method returns.

<P>The warning chain is automatically cleared each time a new
row is read.  This method may not be called on a <code>ResultSet</code>
object that has been closed; doing so will cause an
<code>SQLException</code> to be thrown.
<P>
<B>Note:</B> This warning chain only covers warnings caused
by <code>ResultSet</code> methods.  Any warning caused by
<code>Statement</code> methods
(such as reading OUT parameters) will be chained on the
<code>Statement</code> object.

@return the first <code>SQLWarning</code> object reported or
        <code>null</code> if there are none
@exception SQLException if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8179586 "clearWarnings"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears all warnings reported on this <code>ResultSet</code> object.
After this method is called, the method <code>getWarnings</code>
returns <code>null</code> until a new warning is
reported for this <code>ResultSet</code> object.

@exception SQLException if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8179714 "getCursorName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of the SQL cursor used by this <code>ResultSet</code>
object.

<P>In SQL, a result table is retrieved through a cursor that is
named. The current row of a result set can be updated or deleted
using a positioned update/delete statement that references the
cursor name. To insure that the cursor has the proper isolation
level to support update, the cursor's <code>SELECT</code> statement
should be of the form <code>SELECT FOR UPDATE</code>. If
<code>FOR UPDATE</code> is omitted, the positioned updates may fail.

<P>The JDBC API supports this SQL feature by providing the name of the
SQL cursor used by a <code>ResultSet</code> object.
The current row of a <code>ResultSet</code> object
is also the current row of this SQL cursor.

@return the SQL name for this <code>ResultSet</code> object's cursor
@exception SQLException if a database access error occurs or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
"
      end

      operation 8179842 "getMetaData"
	public return_type class_ref 1039106 // ResultSetMetaData
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the  number, types and properties of
this <code>ResultSet</code> object's columns.

@return the description of this <code>ResultSet</code> object's columns
@exception SQLException if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8179970 "getObject"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Gets the value of the designated column in the current row
of this <code>ResultSet</code> object as
an <code>Object</code> in the Java programming language.

<p>This method will return the value of the given column as a
Java object.  The type of the Java object will be the default
Java object type corresponding to the column's SQL type,
following the mapping for built-in types specified in the JDBC
specification. If the value is an SQL <code>NULL</code>,
the driver returns a Java <code>null</code>.

<p>This method may also be used to read database-specific
abstract data types.

In the JDBC 2.0 API, the behavior of method
<code>getObject</code> is extended to materialize
data of SQL user-defined types.
<p>
If <code>Connection.getTypeMap</code> does not throw a
<code>SQLFeatureNotSupportedException</code>,
then when a column contains a structured or distinct value,
the behavior of this method is as
if it were a call to: <code>getObject(columnIndex,
this.getStatement().getConnection().getTypeMap())</code>.

If <code>Connection.getTypeMap</code> does throw a
<code>SQLFeatureNotSupportedException</code>,
then structured values are not supported, and distinct values
are mapped to the default Java class as determined by the
underlying SQL type of the DISTINCT type.

@param columnIndex the first column is 1, the second is 2, ...
@return a <code>java.lang.Object</code> holding the column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8180098 "getObject"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Gets the value of the designated column in the current row
of this <code>ResultSet</code> object as
an <code>Object</code> in the Java programming language.

<p>This method will return the value of the given column as a
Java object.  The type of the Java object will be the default
Java object type corresponding to the column's SQL type,
following the mapping for built-in types specified in the JDBC
specification. If the value is an SQL <code>NULL</code>,
the driver returns a Java <code>null</code>.
<P>
This method may also be used to read database-specific
abstract data types.
<P>
In the JDBC 2.0 API, the behavior of the method
<code>getObject</code> is extended to materialize
data of SQL user-defined types.  When a column contains
a structured or distinct value, the behavior of this method is as
if it were a call to: <code>getObject(columnIndex,
this.getStatement().getConnection().getTypeMap())</code>.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return a <code>java.lang.Object</code> holding the column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
"
      end

      operation 8180226 "findColumn"
	public explicit_return_type "int"
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------

Maps the given <code>ResultSet</code> column label to its
<code>ResultSet</code> column index.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column index of the given column name
@exception SQLException if the <code>ResultSet</code> object
does not contain a column labeled <code>columnLabel</code>, a database access error occurs
 or this method is called on a closed result set
"
      end

      operation 8180354 "getCharacterStream"
	public return_type class_ref 407298 // Reader
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------------
---------------------------------------------------------------------
 Getters and Setters
---------------------------------------------------------------------

Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a
<code>java.io.Reader</code> object.
@return a <code>java.io.Reader</code> object that contains the column
value; if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language.
@param columnIndex the first column is 1, the second is 2, ...
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
@since 1.2
"
      end

      operation 8180482 "getCharacterStream"
	public return_type class_ref 407298 // Reader
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a
<code>java.io.Reader</code> object.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return a <code>java.io.Reader</code> object that contains the column
value; if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
@since 1.2
"
      end

      operation 8180610 "getBigDecimal"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a
<code>java.math.BigDecimal</code> with full precision.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value (full precision);
if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language.
@exception SQLException if the columnIndex is not valid;
if a database access error occurs or this method is
           called on a closed result set
@since 1.2
"
      end

      operation 8180738 "getBigDecimal"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a
<code>java.math.BigDecimal</code> with full precision.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value (full precision);
if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language.
@exception SQLException if the columnLabel is not valid;
if a database access error occurs or this method is
           called on a closed result set
@since 1.2

"
      end

      operation 8180866 "isBeforeFirst"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---------------------------------------------------------------------
 Traversal/Positioning
---------------------------------------------------------------------

Retrieves whether the cursor is before the first row in
this <code>ResultSet</code> object.
<p>
<strong>Note:</strong>Support for the <code>isBeforeFirst</code> method
is optional for <code>ResultSet</code>s with a result
set type of <code>TYPE_FORWARD_ONLY</code>

@return <code>true</code> if the cursor is before the first row;
<code>false</code> if the cursor is at any other position or the
result set contains no rows
@exception SQLException if a database access error occurs or this method is
           called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8180994 "isAfterLast"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the cursor is after the last row in
this <code>ResultSet</code> object.
<p>
<strong>Note:</strong>Support for the <code>isAfterLast</code> method
is optional for <code>ResultSet</code>s with a result
set type of <code>TYPE_FORWARD_ONLY</code>

@return <code>true</code> if the cursor is after the last row;
<code>false</code> if the cursor is at any other position or the
result set contains no rows
@exception SQLException if a database access error occurs or this method is
           called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8181122 "isFirst"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the cursor is on the first row of
this <code>ResultSet</code> object.
<p>
<strong>Note:</strong>Support for the <code>isFirst</code> method
is optional for <code>ResultSet</code>s with a result
set type of <code>TYPE_FORWARD_ONLY</code>

@return <code>true</code> if the cursor is on the first row;
<code>false</code> otherwise
@exception SQLException if a database access error occurs or this method is
           called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8181250 "isLast"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the cursor is on the last row of
this <code>ResultSet</code> object.
 <strong>Note:</strong> Calling the method <code>isLast</code> may be expensive
because the JDBC driver
might need to fetch ahead one row in order to determine
whether the current row is the last row in the result set.
<p>
<strong>Note:</strong> Support for the <code>isLast</code> method
is optional for <code>ResultSet</code>s with a result
set type of <code>TYPE_FORWARD_ONLY</code>
@return <code>true</code> if the cursor is on the last row;
<code>false</code> otherwise
@exception SQLException if a database access error occurs or this method is
           called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8181378 "beforeFirst"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the front of
this <code>ResultSet</code> object, just before the
first row. This method has no effect if the result set contains no rows.

@exception SQLException if a database access error
occurs; this method is called on a closed result set or the
result set type is <code>TYPE_FORWARD_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8181506 "afterLast"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the end of
this <code>ResultSet</code> object, just after the
last row. This method has no effect if the result set contains no rows.
@exception SQLException if a database access error
occurs; this method is called on a closed result set
or the result set type is <code>TYPE_FORWARD_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8181634 "first"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the first row in
this <code>ResultSet</code> object.

@return <code>true</code> if the cursor is on a valid row;
<code>false</code> if there are no rows in the result set
@exception SQLException if a database access error
occurs; this method is called on a closed result set
or the result set type is <code>TYPE_FORWARD_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8181762 "last"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the last row in
this <code>ResultSet</code> object.

@return <code>true</code> if the cursor is on a valid row;
<code>false</code> if there are no rows in the result set
@exception SQLException if a database access error
occurs; this method is called on a closed result set
or the result set type is <code>TYPE_FORWARD_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8181890 "getRow"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the current row number.  The first row is number 1, the
second number 2, and so on.
<p>
<strong>Note:</strong>Support for the <code>getRow</code> method
is optional for <code>ResultSet</code>s with a result
set type of <code>TYPE_FORWARD_ONLY</code>

@return the current row number; <code>0</code> if there is no current row
@exception SQLException if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8182018 "absolute"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "row" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the given row number in
this <code>ResultSet</code> object.

<p>If the row number is positive, the cursor moves to
the given row number with respect to the
beginning of the result set.  The first row is row 1, the second
is row 2, and so on.

<p>If the given row number is negative, the cursor moves to
an absolute row position with respect to
the end of the result set.  For example, calling the method
<code>absolute(-1)</code> positions the
cursor on the last row; calling the method <code>absolute(-2)</code>
moves the cursor to the next-to-last row, and so on.

<p>If the row number specified is zero, the cursor is moved to
before the first row.

<p>An attempt to position the cursor beyond the first/last row in
the result set leaves the cursor before the first row or after
the last row.

<p><B>Note:</B> Calling <code>absolute(1)</code> is the same
as calling <code>first()</code>. Calling <code>absolute(-1)</code>
is the same as calling <code>last()</code>.

@param row the number of the row to which the cursor should move.
       A value of zero indicates that the cursor will be positioned
       before the first row; a positive number indicates the row number
       counting from the beginning of the result set; a negative number
       indicates the row number counting from the end of the result set
@return <code>true</code> if the cursor is moved to a position in this
<code>ResultSet</code> object;
<code>false</code> if the cursor is before the first row or after the
last row
@exception SQLException if a database access error
occurs; this method is called on a closed result set
or the result set type is <code>TYPE_FORWARD_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8182146 "relative"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "rows" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor a relative number of rows, either positive or negative.
Attempting to move beyond the first/last row in the
result set positions the cursor before/after the
the first/last row. Calling <code>relative(0)</code> is valid, but does
not change the cursor position.

<p>Note: Calling the method <code>relative(1)</code>
is identical to calling the method <code>next()</code> and
calling the method <code>relative(-1)</code> is identical
to calling the method <code>previous()</code>.

@param rows an <code>int</code> specifying the number of rows to
       move from the current row; a positive number moves the cursor
       forward; a negative number moves the cursor backward
@return <code>true</code> if the cursor is on a row;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs;  this method
is called on a closed result set or the result set type is
           <code>TYPE_FORWARD_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8182274 "previous"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the previous row in this
<code>ResultSet</code> object.
<p>
When a call to the <code>previous</code> method returns <code>false</code>,
the cursor is positioned before the first row.  Any invocation of a
<code>ResultSet</code> method which requires a current row will result in a
<code>SQLException</code> being thrown.
<p>
If an input stream is open for the current row, a call to the method
<code>previous</code> will implicitly close it.  A <code>ResultSet</code>
 object's warning change is cleared when a new row is read.
<p>

@return <code>true</code> if the cursor is now positioned on a valid row;
<code>false</code> if the cursor is positioned before the first row
@exception SQLException if a database access error
occurs; this method is called on a closed result set
or the result set type is <code>TYPE_FORWARD_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      attribute 1894146 "FETCH_FORWARD"
	public explicit_type "int"
	init_value " 1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "---------------------------------------------------------------------
 Properties
---------------------------------------------------------------------

The constant indicating that the rows in a result set will be
processed in a forward direction; first-to-last.
This constant is used by the method <code>setFetchDirection</code>
as a hint to the driver, which the driver may ignore.
@since 1.2

"
      end

      attribute 1894274 "FETCH_REVERSE"
	public explicit_type "int"
	init_value " 1001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that the rows in a result set will be
processed in a reverse direction; last-to-first.
This constant is used by the method <code>setFetchDirection</code>
as a hint to the driver, which the driver may ignore.
@since 1.2

"
      end

      attribute 1894402 "FETCH_UNKNOWN"
	public explicit_type "int"
	init_value " 1002"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that the order in which rows in a
result set will be processed is unknown.
This constant is used by the method <code>setFetchDirection</code>
as a hint to the driver, which the driver may ignore.

"
      end

      operation 8182402 "setFetchDirection"
	public explicit_return_type "void"
	nparams 1
	  param in name "direction" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gives a hint as to the direction in which the rows in this
<code>ResultSet</code> object will be processed.
The initial value is determined by the
<code>Statement</code> object
that produced this <code>ResultSet</code> object.
The fetch direction may be changed at any time.

@param direction an <code>int</code> specifying the suggested
       fetch direction; one of <code>ResultSet.FETCH_FORWARD</code>,
       <code>ResultSet.FETCH_REVERSE</code>, or
       <code>ResultSet.FETCH_UNKNOWN</code>
@exception SQLException if a database access error occurs; this
method is called on a closed result set or
the result set type is <code>TYPE_FORWARD_ONLY</code> and the fetch
direction is not <code>FETCH_FORWARD</code>
@since 1.2
@see Statement#setFetchDirection
@see #getFetchDirection
"
      end

      operation 8182530 "getFetchDirection"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the fetch direction for this
<code>ResultSet</code> object.

@return the current fetch direction for this <code>ResultSet</code> object
@exception SQLException if a database access error occurs
or this method is called on a closed result set
@since 1.2
@see #setFetchDirection
"
      end

      operation 8182658 "setFetchSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "rows" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gives the JDBC driver a hint as to the number of rows that should
be fetched from the database when more rows are needed for this
<code>ResultSet</code> object.
If the fetch size specified is zero, the JDBC driver
ignores the value and is free to make its own best guess as to what
the fetch size should be.  The default value is set by the
<code>Statement</code> object
that created the result set.  The fetch size may be changed at any time.

@param rows the number of rows to fetch
@exception SQLException if a database access error occurs; this method
is called on a closed result set or the
condition {@code rows >= 0} is not satisfied
@since 1.2
@see #getFetchSize
"
      end

      operation 8182786 "getFetchSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the fetch size for this
<code>ResultSet</code> object.

@return the current fetch size for this <code>ResultSet</code> object
@exception SQLException if a database access error occurs
or this method is called on a closed result set
@since 1.2
@see #setFetchSize
"
      end

      attribute 1894530 "TYPE_FORWARD_ONLY"
	public explicit_type "int"
	init_value " 1003"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating the type for a <code>ResultSet</code> object
whose cursor may move only forward.
@since 1.2

"
      end

      attribute 1894658 "TYPE_SCROLL_INSENSITIVE"
	public explicit_type "int"
	init_value " 1004"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating the type for a <code>ResultSet</code> object
that is scrollable but generally not sensitive to changes to the data
that underlies the <code>ResultSet</code>.
@since 1.2

"
      end

      attribute 1894786 "TYPE_SCROLL_SENSITIVE"
	public explicit_type "int"
	init_value " 1005"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating the type for a <code>ResultSet</code> object
that is scrollable and generally sensitive to changes to the data
that underlies the <code>ResultSet</code>.
@since 1.2

"
      end

      operation 8182914 "getType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the type of this <code>ResultSet</code> object.
The type is determined by the <code>Statement</code> object
that created the result set.

@return <code>ResultSet.TYPE_FORWARD_ONLY</code>,
        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>,
        or <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@exception SQLException if a database access error occurs
or this method is called on a closed result set
@since 1.2
"
      end

      attribute 1894914 "CONCUR_READ_ONLY"
	public explicit_type "int"
	init_value " 1007"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating the concurrency mode for a
<code>ResultSet</code> object that may NOT be updated.
@since 1.2

"
      end

      attribute 1895042 "CONCUR_UPDATABLE"
	public explicit_type "int"
	init_value " 1008"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating the concurrency mode for a
<code>ResultSet</code> object that may be updated.
@since 1.2

"
      end

      operation 8183042 "getConcurrency"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the concurrency mode of this <code>ResultSet</code> object.
The concurrency used is determined by the
<code>Statement</code> object that created the result set.

@return the concurrency type, either
        <code>ResultSet.CONCUR_READ_ONLY</code>
        or <code>ResultSet.CONCUR_UPDATABLE</code>
@exception SQLException if a database access error occurs
or this method is called on a closed result set
@since 1.2
"
      end

      operation 8183170 "rowUpdated"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---------------------------------------------------------------------
 Updates
---------------------------------------------------------------------

Retrieves whether the current row has been updated.  The value returned
depends on whether or not the result set can detect updates.
<p>
<strong>Note:</strong> Support for the <code>rowUpdated</code> method is optional with a result set
concurrency of <code>CONCUR_READ_ONLY</code>
@return <code>true</code> if the current row is detected to
have been visibly updated by the owner or another; <code>false</code> otherwise
@exception SQLException if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see DatabaseMetaData#updatesAreDetected
@since 1.2
"
      end

      operation 8183298 "rowInserted"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the current row has had an insertion.
The value returned depends on whether or not this
<code>ResultSet</code> object can detect visible inserts.
<p>
<strong>Note:</strong> Support for the <code>rowInserted</code> method is optional with a result set
concurrency of <code>CONCUR_READ_ONLY</code>
@return <code>true</code> if the current row is detected to
have been inserted; <code>false</code> otherwise
@exception SQLException if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method

@see DatabaseMetaData#insertsAreDetected
@since 1.2
"
      end

      operation 8183426 "rowDeleted"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a row has been deleted.  A deleted row may leave
a visible \"hole\" in a result set.  This method can be used to
detect holes in a result set.  The value returned depends on whether
or not this <code>ResultSet</code> object can detect deletions.
<p>
<strong>Note:</strong> Support for the <code>rowDeleted</code> method is optional with a result set
concurrency of <code>CONCUR_READ_ONLY</code>
@return <code>true</code> if the current row is detected to
have been deleted by the owner or another; <code>false</code> otherwise
@exception SQLException if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method

@see DatabaseMetaData#deletesAreDetected
@since 1.2
"
      end

      operation 8183554 "updateNull"
	public explicit_return_type "void"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>null</code> value.

The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code>
or <code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8183682 "updateBoolean"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>boolean</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8183810 "updateByte"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>byte</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.


@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8183938 "updateShort"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>short</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8184066 "updateInt"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an <code>int</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8184194 "updateLong"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>long</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8184322 "updateFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>float</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8184450 "updateDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>double</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8184578 "updateBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 145794 // BigDecimal
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.math.BigDecimal</code>
value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8184706 "updateString"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>String</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8184834 "updateBytes"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>byte</code> array value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8184962 "updateDate"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038466 // Date
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Date</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8185090 "updateTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038594 // Time
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Time</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8185218 "updateTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038722 // Timestamp
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Timestamp</code>
value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8185346 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an ascii stream value, which will have
the specified number of bytes.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@param length the length of the stream
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8185474 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a binary stream value, which will have
the specified number of bytes.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@param length the length of the stream
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8185602 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 407298 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a character stream value, which will have
the specified number of bytes.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@param length the length of the stream
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8185730 "updateObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	  param in name "scaleOrLength" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an <code>Object</code> value.

The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.
<p>
If the second argument is an <code>InputStream</code> then the stream must contain
the number of bytes specified by scaleOrLength.  If the second argument is a
<code>Reader</code> then the reader must contain the number of characters specified
by scaleOrLength. If these conditions are not true the driver will generate a
<code>SQLException</code> when the statement is executed.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@param scaleOrLength for an object of <code>java.math.BigDecimal</code> ,
         this is the number of digits after the decimal point. For
         Java Object types <code>InputStream</code> and <code>Reader</code>,
         this is the length
         of the data in the stream or reader.  For all other types,
         this value will be ignored.
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8185858 "updateObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an <code>Object</code> value.

The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8185986 "updateNull"
	public explicit_return_type "void"
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>null</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8186114 "updateBoolean"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>boolean</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8186242 "updateByte"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>byte</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8186370 "updateShort"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>short</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8186498 "updateInt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an <code>int</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8186626 "updateLong"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>long</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8186754 "updateFloat"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>float </code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8186882 "updateDouble"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>double</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8187010 "updateBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 145794 // BigDecimal
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.BigDecimal</code>
value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8187138 "updateString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>String</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8187266 "updateBytes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a byte array value.

The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code>
or <code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8187394 "updateDate"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038466 // Date
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Date</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8187522 "updateTime"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038594 // Time
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Time</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8187650 "updateTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038722 // Timestamp
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Timestamp</code>
value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8187778 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an ascii stream value, which will have
the specified number of bytes.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@param length the length of the stream
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8187906 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a binary stream value, which will have
the specified number of bytes.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@param length the length of the stream
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8188034 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a character stream value, which will have
the specified number of bytes.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param reader the <code>java.io.Reader</code> object containing
       the new column value
@param length the length of the stream
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8188162 "updateObject"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	  param in name "scaleOrLength" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an <code>Object</code> value.

The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.
<p>
If the second argument is an <code>InputStream</code> then the stream must contain
the number of bytes specified by scaleOrLength.  If the second argument is a
<code>Reader</code> then the reader must contain the number of characters specified
by scaleOrLength. If these conditions are not true the driver will generate a
<code>SQLException</code> when the statement is executed.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@param scaleOrLength for an object of <code>java.math.BigDecimal</code> ,
         this is the number of digits after the decimal point. For
         Java Object types <code>InputStream</code> and <code>Reader</code>,
         this is the length
         of the data in the stream or reader.  For all other types,
         this value will be ignored.
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8188290 "updateObject"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an <code>Object</code> value.

The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8188418 "insertRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the contents of the insert row into this
<code>ResultSet</code> object and into the database.
The cursor must be on the insert row when this method is called.

@exception SQLException if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>,
this method is called on a closed result set,
if this method is called when the cursor is not on the insert row,
or if not all of non-nullable columns in
the insert row have been given a non-null value
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8188546 "updateRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the underlying database with the new contents of the
current row of this <code>ResultSet</code> object.
This method cannot be called when the cursor is on the insert row.

@exception SQLException if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>;
 this method is called on a closed result set or
if this method is called when the cursor is on the insert row
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8188674 "deleteRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes the current row from this <code>ResultSet</code> object
and from the underlying database.  This method cannot be called when
the cursor is on the insert row.

@exception SQLException if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>;
this method is called on a closed result set
or if this method is called when the cursor is on the insert row
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8188802 "refreshRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Refreshes the current row with its most recent value in
the database.  This method cannot be called when
the cursor is on the insert row.

<P>The <code>refreshRow</code> method provides a way for an
application to
explicitly tell the JDBC driver to refetch a row(s) from the
database.  An application may want to call <code>refreshRow</code> when
caching or prefetching is being done by the JDBC driver to
fetch the latest value of a row from the database.  The JDBC driver
may actually refresh multiple rows at once if the fetch size is
greater than one.

<P> All values are refetched subject to the transaction isolation
level and cursor sensitivity.  If <code>refreshRow</code> is called after
calling an updater method, but before calling
the method <code>updateRow</code>, then the
updates made to the row are lost.  Calling the method
<code>refreshRow</code> frequently will likely slow performance.

@exception SQLException if a database access error
occurs; this method is called on a closed result set;
the result set type is <code>TYPE_FORWARD_ONLY</code> or if this
method is called when the cursor is on the insert row
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method or this method is not supported for the specified result
set type and result set concurrency.
@since 1.2
"
      end

      operation 8188930 "cancelRowUpdates"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels the updates made to the current row in this
<code>ResultSet</code> object.
This method may be called after calling an
updater method(s) and before calling
the method <code>updateRow</code> to roll back
the updates made to a row.  If no updates have been made or
<code>updateRow</code> has already been called, this method has no
effect.

@exception SQLException if a database access error
           occurs; this method is called on a closed result set;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or if this method is called when the cursor is
           on the insert row
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8189058 "moveToInsertRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the insert row.  The current cursor position is
remembered while the cursor is positioned on the insert row.

The insert row is a special row associated with an updatable
result set.  It is essentially a buffer where a new row may
be constructed by calling the updater methods prior to
inserting the row into the result set.

Only the updater, getter,
and <code>insertRow</code> methods may be
called when the cursor is on the insert row.  All of the columns in
a result set must be given a value each time this method is
called before calling <code>insertRow</code>.
An updater method must be called before a
getter method can be called on a column value.

@exception SQLException if a database access error occurs; this
method is called on a closed result set
or the result set concurrency is <code>CONCUR_READ_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8189186 "moveToCurrentRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the remembered cursor position, usually the
current row.  This method has no effect if the cursor is not on
the insert row.

@exception SQLException if a database access error occurs; this
method is called on a closed result set
 or the result set concurrency is <code>CONCUR_READ_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8189314 "getStatement"
	public return_type class_ref 1037954 // Statement
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>Statement</code> object that produced this
<code>ResultSet</code> object.
If the result set was generated some other way, such as by a
<code>DatabaseMetaData</code> method, this method  may return
<code>null</code>.

@return the <code>Statement</code> object that produced
this <code>ResultSet</code> object or <code>null</code>
if the result set was produced some other way
@exception SQLException if a database access error occurs
or this method is called on a closed result set
@since 1.2
"
      end

      operation 8189442 "getObject"
	public return_type class_ref 129538 // Object
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as an <code>Object</code>
in the Java programming language.
If the value is an SQL <code>NULL</code>,
the driver returns a Java <code>null</code>.
This method uses the given <code>Map</code> object
for the custom mapping of the
SQL structured or distinct type that is being retrieved.

@param columnIndex the first column is 1, the second is 2, ...
@param map a <code>java.util.Map</code> object that contains the mapping
from SQL type names to classes in the Java programming language
@return an <code>Object</code> in the Java programming language
representing the SQL value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8189570 "getRef"
	public return_type class_ref 1038850 // Ref
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>Ref</code> object
in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return a <code>Ref</code> object representing an SQL <code>REF</code>
        value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8189698 "getBlob"
	public return_type class_ref 1037570 // Blob
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>Blob</code> object
in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return a <code>Blob</code> object representing the SQL
        <code>BLOB</code> value in the specified column
@exception SQLException if the columnIndex is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8189826 "getClob"
	public return_type class_ref 1038978 // Clob
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>Clob</code> object
in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return a <code>Clob</code> object representing the SQL
        <code>CLOB</code> value in the specified column
@exception SQLException if the columnIndex is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8189954 "getArray"
	public return_type class_ref 1037058 // Array
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as an <code>Array</code> object
in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return an <code>Array</code> object representing the SQL
        <code>ARRAY</code> value in the specified column
@exception SQLException if the columnIndex is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8190082 "getObject"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as an <code>Object</code>
in the Java programming language.
If the value is an SQL <code>NULL</code>,
the driver returns a Java <code>null</code>.
This method uses the specified <code>Map</code> object for
custom mapping if appropriate.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param map a <code>java.util.Map</code> object that contains the mapping
from SQL type names to classes in the Java programming language
@return an <code>Object</code> representing the SQL value in the
        specified column
@exception SQLException if the columnLabel is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8190210 "getRef"
	public return_type class_ref 1038850 // Ref
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>Ref</code> object
in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return a <code>Ref</code> object representing the SQL <code>REF</code>
        value in the specified column
@exception SQLException if the columnLabel is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8190338 "getBlob"
	public return_type class_ref 1037570 // Blob
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>Blob</code> object
in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return a <code>Blob</code> object representing the SQL <code>BLOB</code>
        value in the specified column
@exception SQLException if the columnLabel is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8190466 "getClob"
	public return_type class_ref 1038978 // Clob
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>Clob</code> object
in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return a <code>Clob</code> object representing the SQL <code>CLOB</code>
value in the specified column
@exception SQLException if the columnLabel is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8190594 "getArray"
	public return_type class_ref 1037058 // Array
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as an <code>Array</code> object
in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return an <code>Array</code> object representing the SQL <code>ARRAY</code> value in
        the specified column
@exception SQLException if the columnLabel is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8190722 "getDate"
	public return_type class_ref 1038466 // Date
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object
in the Java programming language.
This method uses the given calendar to construct an appropriate millisecond
value for the date if the underlying database does not store
timezone information.

@param columnIndex the first column is 1, the second is 2, ...
@param cal the <code>java.util.Calendar</code> object
to use in constructing the date
@return the column value as a <code>java.sql.Date</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if the columnIndex is not valid;
if a database access error occurs
or this method is called on a closed result set
@since 1.2
"
      end

      operation 8190850 "getDate"
	public return_type class_ref 1038466 // Date
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object
in the Java programming language.
This method uses the given calendar to construct an appropriate millisecond
value for the date if the underlying database does not store
timezone information.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param cal the <code>java.util.Calendar</code> object
to use in constructing the date
@return the column value as a <code>java.sql.Date</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if the columnLabel is not valid;
if a database access error occurs
or this method is called on a closed result set
@since 1.2
"
      end

      operation 8190978 "getTime"
	public return_type class_ref 1038594 // Time
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.sql.Time</code> object
in the Java programming language.
This method uses the given calendar to construct an appropriate millisecond
value for the time if the underlying database does not store
timezone information.

@param columnIndex the first column is 1, the second is 2, ...
@param cal the <code>java.util.Calendar</code> object
to use in constructing the time
@return the column value as a <code>java.sql.Time</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if the columnIndex is not valid;
if a database access error occurs
or this method is called on a closed result set
@since 1.2
"
      end

      operation 8191106 "getTime"
	public return_type class_ref 1038594 // Time
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.sql.Time</code> object
in the Java programming language.
This method uses the given calendar to construct an appropriate millisecond
value for the time if the underlying database does not store
timezone information.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param cal the <code>java.util.Calendar</code> object
to use in constructing the time
@return the column value as a <code>java.sql.Time</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if the columnLabel is not valid;
if a database access error occurs
or this method is called on a closed result set
@since 1.2
"
      end

      operation 8191234 "getTimestamp"
	public return_type class_ref 1038722 // Timestamp
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object
in the Java programming language.
This method uses the given calendar to construct an appropriate millisecond
value for the timestamp if the underlying database does not store
timezone information.

@param columnIndex the first column is 1, the second is 2, ...
@param cal the <code>java.util.Calendar</code> object
to use in constructing the timestamp
@return the column value as a <code>java.sql.Timestamp</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if the columnIndex is not valid;
if a database access error occurs
or this method is called on a closed result set
@since 1.2
"
      end

      operation 8191362 "getTimestamp"
	public return_type class_ref 1038722 // Timestamp
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object
in the Java programming language.
This method uses the given calendar to construct an appropriate millisecond
value for the timestamp if the underlying database does not store
timezone information.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param cal the <code>java.util.Calendar</code> object
to use in constructing the date
@return the column value as a <code>java.sql.Timestamp</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if the columnLabel is not valid or
if a database access error occurs
or this method is called on a closed result set
@since 1.2
"
      end

      attribute 1895170 "HOLD_CURSORS_OVER_COMMIT"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "-------------------------- JDBC 3.0 ----------------------------------------

The constant indicating that open <code>ResultSet</code> objects with this
holdability will remain open when the current transaction is committed.

@since 1.4

"
      end

      attribute 1895298 "CLOSE_CURSORS_AT_COMMIT"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that open <code>ResultSet</code> objects with this
holdability will be closed when the current transaction is committed.

@since 1.4

"
      end

      operation 8191490 "getURL"
	public return_type class_ref 243458 // URL
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.net.URL</code>
object in the Java programming language.

@param columnIndex the index of the column 1 is the first, 2 is the second,...
@return the column value as a <code>java.net.URL</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if the columnIndex is not valid;
if a database access error occurs; this method
is called on a closed result set or if a URL is malformed
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8191618 "getURL"
	public return_type class_ref 243458 // URL
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.net.URL</code>
object in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value as a <code>java.net.URL</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if the columnLabel is not valid;
if a database access error occurs; this method
is called on a closed result set or if a URL is malformed
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8191746 "updateRef"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038850 // Ref
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Ref</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8191874 "updateRef"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038850 // Ref
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Ref</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8192002 "updateBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 1037570 // Blob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Blob</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8192130 "updateBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 1037570 // Blob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Blob</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8192258 "updateClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038978 // Clob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Clob</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8192386 "updateClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038978 // Clob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Clob</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8192514 "updateArray"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 1037058 // Array
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Array</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8192642 "updateArray"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 1037058 // Array
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Array</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8192770 "getRowId"
	public return_type class_ref 1039362 // RowId
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------- JDBC 4.0 -----------------------------------

Retrieves the value of the designated column in the current row of this
<code>ResultSet</code> object as a <code>java.sql.RowId</code> object in the Java
programming language.

@param columnIndex the first column is 1, the second 2, ...
@return the column value; if the value is a SQL <code>NULL</code> the
    value returned is <code>null</code>
@throws SQLException if the columnIndex is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8192898 "getRowId"
	public return_type class_ref 1039362 // RowId
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row of this
<code>ResultSet</code> object as a <code>java.sql.RowId</code> object in the Java
programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value ; if the value is a SQL <code>NULL</code> the
    value returned is <code>null</code>
@throws SQLException if the columnLabel is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8193026 "updateRowId"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 1039362 // RowId
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>RowId</code> value. The updater
methods are used to update column values in the current row or the insert
row. The updater methods do not update the underlying database; instead
the <code>updateRow</code> or <code>insertRow</code> methods are called
to update the database.

@param columnIndex the first column is 1, the second 2, ...
@param x the column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8193154 "updateRowId"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 1039362 // RowId
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>RowId</code> value. The updater
methods are used to update column values in the current row or the insert
row. The updater methods do not update the underlying database; instead
the <code>updateRow</code> or <code>insertRow</code> methods are called
to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8193282 "getHoldability"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the holdability of this <code>ResultSet</code> object
@return  either <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@throws SQLException if a database access error occurs
or this method is called on a closed result set
@since 1.6
"
      end

      operation 8193410 "isClosed"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this <code>ResultSet</code> object has been closed. A <code>ResultSet</code> is closed if the
method close has been called on it, or if it is automatically closed.

@return true if this <code>ResultSet</code> object is closed; false if it is still open
@throws SQLException if a database access error occurs
@since 1.6
"
      end

      operation 8193538 "updateNString"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "nString" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>String</code> value.
It is intended for use when updating <code>NCHAR</code>,<code>NVARCHAR</code>
and <code>LONGNVARCHAR</code> columns.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second 2, ...
@param nString the value for the column to be updated
@throws SQLException if the columnIndex is not valid;
if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; this method is called on a closed result set;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8193666 "updateNString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "nString" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>String</code> value.
It is intended for use when updating <code>NCHAR</code>,<code>NVARCHAR</code>
and <code>LONGNVARCHAR</code> columns.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param nString the value for the column to be updated
@throws SQLException if the columnLabel is not valid;
if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; this method is called on a closed result set;
the result set concurrency is <CODE>CONCUR_READ_ONLY</code>
 or if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8193794 "updateNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "nClob" type class_ref 1039490 // NClob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.NClob</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second 2, ...
@param nClob the value for the column to be updated
@throws SQLException if the columnIndex is not valid;
if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; this method is called on a closed result set;
if a database access error occurs or
the result set concurrency is <code>CONCUR_READ_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8193922 "updateNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "nClob" type class_ref 1039490 // NClob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.NClob</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param nClob the value for the column to be updated
@throws SQLException if the columnLabel is not valid;
if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; this method is called on a closed result set;
 if a database access error occurs or
the result set concurrency is <code>CONCUR_READ_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8194050 "getNClob"
	public return_type class_ref 1039490 // NClob
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>NClob</code> object
in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return a <code>NClob</code> object representing the SQL
        <code>NCLOB</code> value in the specified column
@exception SQLException if the columnIndex is not valid;
if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; this method is called on a closed result set
or if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8194178 "getNClob"
	public return_type class_ref 1039490 // NClob
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>NClob</code> object
in the Java programming language.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return a <code>NClob</code> object representing the SQL <code>NCLOB</code>
value in the specified column
@exception SQLException if the columnLabel is not valid;
if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; this method is called on a closed result set
or if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8194306 "getSQLXML"
	public return_type class_ref 1039618 // SQLXML
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in  the current row of
 this <code>ResultSet</code> as a
<code>java.sql.SQLXML</code> object in the Java programming language.
@param columnIndex the first column is 1, the second is 2, ...
@return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value
@throws SQLException if the columnIndex is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8194434 "getSQLXML"
	public return_type class_ref 1039618 // SQLXML
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in  the current row of
 this <code>ResultSet</code> as a
<code>java.sql.SQLXML</code> object in the Java programming language.
@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value
@throws SQLException if the columnLabel is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8194562 "updateSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "xmlObject" type class_ref 1039618 // SQLXML
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.SQLXML</code> value.
The updater
methods are used to update column values in the current row or the insert
row. The updater methods do not update the underlying database; instead
the <code>updateRow</code> or <code>insertRow</code> methods are called
to update the database.
<p>

@param columnIndex the first column is 1, the second 2, ...
@param xmlObject the value for the column to be updated
@throws SQLException if the columnIndex is not valid;
if a database access error occurs; this method
 is called on a closed result set;
the <code>java.xml.transform.Result</code>,
 <code>Writer</code> or <code>OutputStream</code> has not been closed
for the <code>SQLXML</code> object;
 if there is an error processing the XML value or
the result set concurrency is <code>CONCUR_READ_ONLY</code>.  The <code>getCause</code> method
 of the exception may provide a more detailed exception, for example, if the
 stream does not contain valid XML.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8194690 "updateSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "xmlObject" type class_ref 1039618 // SQLXML
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.SQLXML</code> value.
The updater
methods are used to update column values in the current row or the insert
row. The updater methods do not update the underlying database; instead
the <code>updateRow</code> or <code>insertRow</code> methods are called
to update the database.
<p>

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param xmlObject the column value
@throws SQLException if the columnLabel is not valid;
if a database access error occurs; this method
 is called on a closed result set;
the <code>java.xml.transform.Result</code>,
 <code>Writer</code> or <code>OutputStream</code> has not been closed
for the <code>SQLXML</code> object;
 if there is an error processing the XML value or
the result set concurrency is <code>CONCUR_READ_ONLY</code>.  The <code>getCause</code> method
 of the exception may provide a more detailed exception, for example, if the
 stream does not contain valid XML.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8194818 "getNString"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>String</code> in the Java programming language.
It is intended for use when
accessing  <code>NCHAR</code>,<code>NVARCHAR</code>
and <code>LONGNVARCHAR</code> columns.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnIndex is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8194946 "getNString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>String</code> in the Java programming language.
It is intended for use when
accessing  <code>NCHAR</code>,<code>NVARCHAR</code>
and <code>LONGNVARCHAR</code> columns.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if the columnLabel is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8195074 "getNCharacterStream"
	public return_type class_ref 407298 // Reader
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a
<code>java.io.Reader</code> object.
It is intended for use when
accessing  <code>NCHAR</code>,<code>NVARCHAR</code>
and <code>LONGNVARCHAR</code> columns.

@return a <code>java.io.Reader</code> object that contains the column
value; if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language.
@param columnIndex the first column is 1, the second is 2, ...
@exception SQLException if the columnIndex is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8195202 "getNCharacterStream"
	public return_type class_ref 407298 // Reader
	nparams 1
	  param inout name "columnLabel" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a
<code>java.io.Reader</code> object.
It is intended for use when
accessing  <code>NCHAR</code>,<code>NVARCHAR</code>
and <code>LONGNVARCHAR</code> columns.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@return a <code>java.io.Reader</code> object that contains the column
value; if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language
@exception SQLException if the columnLabel is not valid;
if a database access error occurs
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8195330 "updateNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a character stream value, which will have
the specified number of bytes.   The
driver does the necessary conversion from Java character format to
the national character set in the database.
It is intended for use when
updating  <code>NCHAR</code>,<code>NVARCHAR</code>
and <code>LONGNVARCHAR</code> columns.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@param length the length of the stream
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8195458 "updateNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a character stream value, which will have
the specified number of bytes.  The
driver does the necessary conversion from Java character format to
the national character set in the database.
It is intended for use when
updating  <code>NCHAR</code>,<code>NVARCHAR</code>
and <code>LONGNVARCHAR</code> columns.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param reader the <code>java.io.Reader</code> object containing
       the new column value
@param length the length of the stream
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8195586 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an ascii stream value, which will have
the specified number of bytes.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@param length the length of the stream
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8195714 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a binary stream value, which will have
the specified number of bytes.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@param length the length of the stream
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8195842 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a character stream value, which will have
the specified number of bytes.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@param length the length of the stream
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8195970 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an ascii stream value, which will have
the specified number of bytes.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@param length the length of the stream
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8196098 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a binary stream value, which will have
the specified number of bytes.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@param length the length of the stream
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8196226 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a character stream value, which will have
the specified number of bytes.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param reader the <code>java.io.Reader</code> object containing
       the new column value
@param length the length of the stream
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8196354 "updateBlob"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column using the given input stream, which
will have the specified number of bytes.

<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param inputStream An object that contains the data to set the parameter
value to.
@param length the number of bytes in the parameter data.
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8196482 "updateBlob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column using the given input stream, which
will have the specified number of bytes.

<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param inputStream An object that contains the data to set the parameter
value to.
@param length the number of bytes in the parameter data.
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8196610 "updateClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column using the given <code>Reader</code>
object, which is the given number of characters long.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8196738 "updateClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column using the given <code>Reader</code>
object, which is the given number of characters long.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8196866 "updateNClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column using the given <code>Reader</code>
object, which is the given number of characters long.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second 2, ...
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if the columnIndex is not valid;
if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; this method is called on a closed result set,
if a database access error occurs or
the result set concurrency is <code>CONCUR_READ_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8196994 "updateNClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column using the given <code>Reader</code>
object, which is the given number of characters long.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if the columnLabel is not valid;
if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; this method is called on a closed result set;
 if a database access error occurs or
the result set concurrency is <code>CONCUR_READ_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8197122 "updateNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---

Updates the designated column with a character stream value.
The data will be read from the stream
as needed until end-of-stream is reached.  The
driver does the necessary conversion from Java character format to
the national character set in the database.
It is intended for use when
updating  <code>NCHAR</code>,<code>NVARCHAR</code>
and <code>LONGNVARCHAR</code> columns.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateNCharacterStream</code> which takes a length parameter.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8197250 "updateNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a character stream value.
The data will be read from the stream
as needed until end-of-stream is reached.  The
driver does the necessary conversion from Java character format to
the national character set in the database.
It is intended for use when
updating  <code>NCHAR</code>,<code>NVARCHAR</code>
and <code>LONGNVARCHAR</code> columns.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateNCharacterStream</code> which takes a length parameter.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param reader the <code>java.io.Reader</code> object containing
       the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8197378 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an ascii stream value.
The data will be read from the stream
as needed until end-of-stream is reached.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateAsciiStream</code> which takes a length parameter.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8197506 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a binary stream value.
The data will be read from the stream
as needed until end-of-stream is reached.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateBinaryStream</code> which takes a length parameter.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8197634 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a character stream value.
The data will be read from the stream
as needed until end-of-stream is reached.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateCharacterStream</code> which takes a length parameter.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8197762 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an ascii stream value.
The data will be read from the stream
as needed until end-of-stream is reached.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateAsciiStream</code> which takes a length parameter.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8197890 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a binary stream value.
The data will be read from the stream
as needed until end-of-stream is reached.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateBinaryStream</code> which takes a length parameter.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param x the new column value
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8198018 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a character stream value.
The data will be read from the stream
as needed until end-of-stream is reached.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateCharacterStream</code> which takes a length parameter.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param reader the <code>java.io.Reader</code> object containing
       the new column value
@exception SQLException if the columnLabel is not valid; if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8198146 "updateBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column using the given input stream. The data will be read from the stream
as needed until end-of-stream is reached.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateBlob</code> which takes a length parameter.

@param columnIndex the first column is 1, the second is 2, ...
@param inputStream An object that contains the data to set the parameter
value to.
@exception SQLException if the columnIndex is not valid; if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8198274 "updateBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "inputStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column using the given input stream. The data will be read from the stream
as needed until end-of-stream is reached.
<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

  <P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateBlob</code> which takes a length parameter.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param inputStream An object that contains the data to set the parameter
value to.
@exception SQLException if the columnLabel is not valid; if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8198402 "updateClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column using the given <code>Reader</code>
object.
 The data will be read from the stream
as needed until end-of-stream is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

  <P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateClob</code> which takes a length parameter.

@param columnIndex the first column is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8198530 "updateClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column using the given <code>Reader</code>
object.
 The data will be read from the stream
as needed until end-of-stream is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateClob</code> which takes a length parameter.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param reader An object that contains the data to set the parameter value to.
@exception SQLException if the columnLabel is not valid; if a database access error occurs;
the result set concurrency is <code>CONCUR_READ_ONLY</code>
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8198658 "updateNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column using the given <code>Reader</code>

The data will be read from the stream
as needed until end-of-stream is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateNClob</code> which takes a length parameter.

@param columnIndex the first column is 1, the second 2, ...
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if the columnIndex is not valid;
if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; this method is called on a closed result set,
if a database access error occurs or
the result set concurrency is <code>CONCUR_READ_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8198786 "updateNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column using the given <code>Reader</code>
object.
The data will be read from the stream
as needed until end-of-stream is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<p>
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>updateNClob</code> which takes a length parameter.

@param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if the columnLabel is not valid; if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; this method is called on a closed result set;
 if a database access error occurs or
the result set concurrency is <code>CONCUR_READ_ONLY</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8198914 "getObject"
	public explicit_return_type "T"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "type" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------- JDBC 4.1 -----------------------------------

<p>Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object and will convert from the
SQL type of the column to the requested Java data type, if the
conversion is supported. If the conversion is not
supported  or null is specified for the type, a
<code>SQLException</code> is thrown.
<p>
At a minimum, an implementation must support the conversions defined in
Appendix B, Table B-3 and conversion of appropriate user defined SQL
types to a Java type which implements {@code SQLData}, or {@code Struct}.
Additional conversions may be supported and are vendor defined.
@param <T> the type of the class modeled by this Class object
@param columnIndex the first column is 1, the second is 2, ...
@param type Class representing the Java data type to convert the designated
column to.
@return an instance of {@code type} holding the column value
@throws SQLException if conversion is not supported, type is null or
        another error occurs. The getCause() method of the
exception may provide a more detailed exception, for example, if
a conversion error occurs
@throws SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.7
"
      end

      operation 8199042 "getObject"
	public explicit_return_type "T"
	nparams 2
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "type" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object and will convert from the
SQL type of the column to the requested Java data type, if the
conversion is supported. If the conversion is not
supported  or null is specified for the type, a
<code>SQLException</code> is thrown.
<p>
At a minimum, an implementation must support the conversions defined in
Appendix B, Table B-3 and conversion of appropriate user defined SQL
types to a Java type which implements {@code SQLData}, or {@code Struct}.
Additional conversions may be supported and are vendor defined.

@param columnLabel the label for the column specified with the SQL AS clause.
If the SQL AS clause was not specified, then the label is the name
of the column
@param type Class representing the Java data type to convert the designated
column to.
@param <T> the type of the class modeled by this Class object
@return an instance of {@code type} holding the column value
@throws SQLException if conversion is not supported, type is null or
        another error occurs. The getCause() method of the
exception may provide a more detailed exception, for example, if
a conversion error occurs
@throws SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.7
"
      end

      operation 8199170 "updateObject"
	public explicit_return_type "void"
	nparams 4
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "targetSqlType" type class_ref 1039746 // SQLType
	  param in name "scaleOrLength" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------- JDBC 4.2 -----------------------------------

Updates the designated column with an {@code Object} value.

The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the {@code updateRow} or
{@code insertRow} methods are called to update the database.
<p>
If the second argument is an {@code InputStream} then the stream must contain
the number of bytes specified by scaleOrLength.  If the second argument is a
{@code Reader} then the reader must contain the number of characters specified
by scaleOrLength. If these conditions are not true the driver will generate a
{@code SQLException} when the statement is executed.
<p>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@param targetSqlType the SQL type to be sent to the database
@param scaleOrLength for an object of {@code java.math.BigDecimal} ,
         this is the number of digits after the decimal point. For
         Java Object types {@code InputStream} and {@code Reader},
         this is the length
         of the data in the stream or reader.  For all other types,
         this value will be ignored.
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is {@code CONCUR_READ_ONLY}
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not
support this method; if the JDBC driver does not support the specified targetSqlType
@see JDBCType
@see SQLType
@since 1.8
"
      end

      operation 8199298 "updateObject"
	public explicit_return_type "void"
	nparams 4
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "targetSqlType" type class_ref 1039746 // SQLType
	  param in name "scaleOrLength" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an {@code Object} value.

The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the {@code updateRow} or
{@code insertRow} methods are called to update the database.
<p>
If the second argument is an {@code InputStream} then the stream must
contain number of bytes specified by scaleOrLength.  If the second
argument is a {@code Reader} then the reader must contain the number
of characters specified by scaleOrLength. If these conditions are not
true the driver will generate a
{@code SQLException} when the statement is executed.
<p>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param columnLabel the label for the column specified with the SQL AS
clause.  If the SQL AS clause was not specified, then the label is
the name of the column
@param x the new column value
@param targetSqlType the SQL type to be sent to the database
@param scaleOrLength for an object of {@code java.math.BigDecimal} ,
         this is the number of digits after the decimal point. For
         Java Object types {@code InputStream} and {@code Reader},
         this is the length
         of the data in the stream or reader.  For all other types,
         this value will be ignored.
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is {@code CONCUR_READ_ONLY}
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not
support this method; if the JDBC driver does not support the specified targetSqlType
@see JDBCType
@see SQLType
@since 1.8
"
      end

      operation 8199426 "updateObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "targetSqlType" type class_ref 1039746 // SQLType
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an {@code Object} value.

The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the {@code updateRow} or
{@code insertRow} methods are called to update the database.
<p>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@param targetSqlType the SQL type to be sent to the database
@exception SQLException if the columnIndex is not valid;
if a database access error occurs;
the result set concurrency is {@code CONCUR_READ_ONLY}
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not
support this method; if the JDBC driver does not support the specified targetSqlType
@see JDBCType
@see SQLType
@since 1.8
"
      end

      operation 8199554 "updateObject"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "targetSqlType" type class_ref 1039746 // SQLType
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an {@code Object} value.

The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not
update the underlying database; instead the {@code updateRow} or
{@code insertRow} methods are called to update the database.
<p>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param columnLabel the label for the column specified with the SQL AS
clause.  If the SQL AS clause was not specified, then the label is
the name of the column
@param x the new column value
@param targetSqlType the SQL type to be sent to the database
@exception SQLException if the columnLabel is not valid;
if a database access error occurs;
the result set concurrency is {@code CONCUR_READ_ONLY}
or this method is called on a closed result set
@exception SQLFeatureNotSupportedException if the JDBC driver does not
support this method; if the JDBC driver does not support the specified targetSqlType
@see JDBCType
@see SQLType
@since 1.8
"
      end
    end

    class 1037442 "BatchUpdateException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The subclass of {@link SQLException} thrown when an error
occurs during a batch update operation.  In addition to the
information provided by {@link SQLException}, a
<code>BatchUpdateException</code> provides the update
counts for all commands that were executed successfully during the
batch update, that is, all commands that were executed before the error
occurred.  The order of elements in an array of update counts
corresponds to the order in which commands were added to the batch.
<P>
After a command in a batch update fails to execute properly
and a <code>BatchUpdateException</code> is thrown, the driver
may or may not continue to process the remaining commands in
the batch.  If the driver continues processing after a failure,
the array returned by the method
<code>BatchUpdateException.getUpdateCounts</code> will have
an element for every command in the batch rather than only
elements for the commands that executed successfully before
the error.  In the case where the driver continues processing
commands, the array element for any command
that failed is <code>Statement.EXECUTE_FAILED</code>.
<P>
A JDBC driver implementation should use
the constructor {@code BatchUpdateException(String reason, String SQLState,
int vendorCode, long []updateCounts,Throwable cause) } instead of
constructors that take {@code int[]} for the update counts to avoid the
possibility of overflow.
<p>
If {@code Statement.executeLargeBatch} method is invoked it is recommended that
{@code getLargeUpdateCounts} be called instead of {@code getUpdateCounts}
in order to avoid a possible overflow of the integer update count.
@since 1.2
"
      classrelation 3398146 // <generalisation>
	relation 3398146 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3398146 // <generalisation>
	  b parent class_ref 1037186 // SQLException
      end

      operation 8093954 "BatchUpdateException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "updateCounts" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> object initialized with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code> and
<code>updateCounts</code>.
The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
<strong>Note:</strong> There is no validation of {@code updateCounts} for
overflow and because of this it is recommended that you use the constructor
{@code BatchUpdateException(String reason, String SQLState,
int vendorCode, long []updateCounts,Throwable cause) }.
</p>
@param reason a description of the error
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode an exception code used by a particular
database vendor
@param updateCounts an array of <code>int</code>, with each element
indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or
<code>Statement.EXECUTE_FAILED</code> for each SQL command in
the batch for JDBC drivers that continue processing
after a command failure; an update count or
<code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch
prior to the failure for JDBC drivers that stop processing after a command
failure
@since 1.2
@see #BatchUpdateException(java.lang.String, java.lang.String, int, long[],
java.lang.Throwable)
"
      end

      operation 8094082 "BatchUpdateException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "updateCounts" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> object initialized with a given
<code>reason</code>, <code>SQLState</code> and
<code>updateCounts</code>.
The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
<strong>Note:</strong> There is no validation of {@code updateCounts} for
overflow and because of this it is recommended that you use the constructor
{@code BatchUpdateException(String reason, String SQLState,
int vendorCode, long []updateCounts,Throwable cause) }.
</p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param updateCounts an array of <code>int</code>, with each element
indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or
<code>Statement.EXECUTE_FAILED</code> for each SQL command in
the batch for JDBC drivers that continue processing
after a command failure; an update count or
<code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch
prior to the failure for JDBC drivers that stop processing after a command
failure
@since 1.2
@see #BatchUpdateException(java.lang.String, java.lang.String, int, long[],
java.lang.Throwable)
"
      end

      operation 8094210 "BatchUpdateException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "updateCounts" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> object initialized with a given
<code>reason</code> and <code>updateCounts</code>.
The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.  The
<code>SQLState</code> is initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
<strong>Note:</strong> There is no validation of {@code updateCounts} for
overflow and because of this it is recommended that you use the constructor
{@code BatchUpdateException(String reason, String SQLState,
int vendorCode, long []updateCounts,Throwable cause) }.
</p>
@param reason a description of the exception
@param updateCounts an array of <code>int</code>, with each element
indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or
<code>Statement.EXECUTE_FAILED</code> for each SQL command in
the batch for JDBC drivers that continue processing
after a command failure; an update count or
<code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch
prior to the failure for JDBC drivers that stop processing after a command
failure
@since 1.2
@see #BatchUpdateException(java.lang.String, java.lang.String, int, long[],
java.lang.Throwable)
"
      end

      operation 8094338 "BatchUpdateException"
	public explicit_return_type ""
	nparams 1
	  param inout name "updateCounts" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> object initialized with a given
<code>updateCounts</code>.
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The  <code>reason</code>
and <code>SQLState</code> are initialized to null and the vendor code
is initialized to 0.
<p>
<strong>Note:</strong> There is no validation of {@code updateCounts} for
overflow and because of this it is recommended that you use the constructor
{@code BatchUpdateException(String reason, String SQLState,
int vendorCode, long []updateCounts,Throwable cause) }.
</p>
@param updateCounts an array of <code>int</code>, with each element
indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or
<code>Statement.EXECUTE_FAILED</code> for each SQL command in
the batch for JDBC drivers that continue processing
after a command failure; an update count or
<code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch
prior to the failure for JDBC drivers that stop processing after a command
failure
@since 1.2
@see #BatchUpdateException(java.lang.String, java.lang.String, int, long[],
java.lang.Throwable)
"
      end

      operation 8094466 "BatchUpdateException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> object.
The <code>reason</code>, <code>SQLState</code> and <code>updateCounts</code>
 are initialized to <code>null</code> and the vendor code is initialized to 0.
The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>

@since 1.2
@see #BatchUpdateException(java.lang.String, java.lang.String, int, long[],
java.lang.Throwable)
"
      end

      operation 8094594 "BatchUpdateException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> object initialized with
 a given <code>cause</code>.
The <code>SQLState</code> and <code>updateCounts</code>
are initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
 <code>cause!=null</code>.
@param cause the underlying reason for this <code>SQLException</code>
(which is saved for later retrieval by the <code>getCause()</code> method);
may be null indicating the cause is non-existent or unknown.
@since 1.6
@see #BatchUpdateException(java.lang.String, java.lang.String, int, long[],
java.lang.Throwable)
"
      end

      operation 8094722 "BatchUpdateException"
	public explicit_return_type ""
	nparams 2
	  param inout name "updateCounts" explicit_type "int"
	multiplicity "[]"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> object initialized with a
given <code>cause</code> and <code>updateCounts</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
<strong>Note:</strong> There is no validation of {@code updateCounts} for
overflow and because of this it is recommended that you use the constructor
{@code BatchUpdateException(String reason, String SQLState,
int vendorCode, long []updateCounts,Throwable cause) }.
</p>
@param updateCounts an array of <code>int</code>, with each element
indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or
<code>Statement.EXECUTE_FAILED</code> for each SQL command in
the batch for JDBC drivers that continue processing
after a command failure; an update count or
<code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch
prior to the failure for JDBC drivers that stop processing after a command
failure
@param cause the underlying reason for this <code>SQLException</code>
(which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
the cause is non-existent or unknown.
@since 1.6
@see #BatchUpdateException(java.lang.String, java.lang.String, int, long[],
java.lang.Throwable)
"
      end

      operation 8094850 "BatchUpdateException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "updateCounts" explicit_type "int"
	multiplicity "[]"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> object initialized with
a given <code>reason</code>, <code>cause</code>
and <code>updateCounts</code>. The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
<p>
<strong>Note:</strong> There is no validation of {@code updateCounts} for
overflow and because of this it is recommended that you use the constructor
{@code BatchUpdateException(String reason, String SQLState,
int vendorCode, long []updateCounts,Throwable cause) }.
</p>
@param reason a description of the exception
@param updateCounts an array of <code>int</code>, with each element
indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or
<code>Statement.EXECUTE_FAILED</code> for each SQL command in
the batch for JDBC drivers that continue processing
after a command failure; an update count or
<code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch
prior to the failure for JDBC drivers that stop processing after a command
failure
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method);
may be null indicating
the cause is non-existent or unknown.
@since 1.6
@see #BatchUpdateException(java.lang.String, java.lang.String, int, long[],
java.lang.Throwable)
"
      end

      operation 8094978 "BatchUpdateException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "updateCounts" explicit_type "int"
	multiplicity "[]"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> object initialized with
a given <code>reason</code>, <code>SQLState</code>,<code>cause</code>, and
<code>updateCounts</code>. The vendor code is initialized to 0.

@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param updateCounts an array of <code>int</code>, with each element
indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or
<code>Statement.EXECUTE_FAILED</code> for each SQL command in
the batch for JDBC drivers that continue processing
after a command failure; an update count or
<code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch
prior to the failure for JDBC drivers that stop processing after a command
failure
<p>
<strong>Note:</strong> There is no validation of {@code updateCounts} for
overflow and because of this it is recommended that you use the constructor
{@code BatchUpdateException(String reason, String SQLState,
int vendorCode, long []updateCounts,Throwable cause) }.
</p>
@param cause the underlying reason for this <code>SQLException</code>
(which is saved for later retrieval by the <code>getCause()</code> method);
may be null indicating
the cause is non-existent or unknown.
@since 1.6
@see #BatchUpdateException(java.lang.String, java.lang.String, int, long[],
java.lang.Throwable)
"
      end

      operation 8095106 "BatchUpdateException"
	public explicit_return_type ""
	nparams 5
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "updateCounts" explicit_type "int"
	multiplicity "[]"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> object initialized with
a given <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
<code>cause</code> and <code>updateCounts</code>.

@param reason a description of the error
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode an exception code used by a particular
database vendor
@param updateCounts an array of <code>int</code>, with each element
indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or
<code>Statement.EXECUTE_FAILED</code> for each SQL command in
the batch for JDBC drivers that continue processing
after a command failure; an update count or
<code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch
prior to the failure for JDBC drivers that stop processing after a command
failure
<p>
<strong>Note:</strong> There is no validation of {@code updateCounts} for
overflow and because of this it is recommended that you use the constructor
{@code BatchUpdateException(String reason, String SQLState,
int vendorCode, long []updateCounts,Throwable cause) }.
</p>
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method);
may be null indicating
the cause is non-existent or unknown.
@since 1.6
@see #BatchUpdateException(java.lang.String, java.lang.String, int, long[],
java.lang.Throwable)
"
      end

      operation 8095234 "getUpdateCounts"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the update count for each update statement in the batch
update that executed successfully before this exception occurred.
A driver that implements batch updates may or may not continue to
process the remaining commands in a batch when one of the commands
fails to execute properly. If the driver continues processing commands,
the array returned by this method will have as many elements as
there are commands in the batch; otherwise, it will contain an
update count for each command that executed successfully before
the <code>BatchUpdateException</code> was thrown.
<P>
The possible return values for this method were modified for
the Java 2 SDK, Standard Edition, version 1.3.  This was done to
accommodate the new option of continuing to process commands
in a batch update after a <code>BatchUpdateException</code> object
has been thrown.

@return an array of <code>int</code> containing the update counts
for the updates that were executed successfully before this error
occurred.  Or, if the driver continues to process commands after an
error, one of the following for every command in the batch:
<OL>
<LI>an update count
 <LI><code>Statement.SUCCESS_NO_INFO</code> to indicate that the command
    executed successfully but the number of rows affected is unknown
 <LI><code>Statement.EXECUTE_FAILED</code> to indicate that the command
    failed to execute successfully
</OL>
@since 1.3
@see #getLargeUpdateCounts()
"
      end

      operation 8095362 "BatchUpdateException"
	public explicit_return_type ""
	nparams 5
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "updateCounts" explicit_type "long"
	multiplicity "[]"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> object initialized with
a given <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
<code>cause</code> and <code>updateCounts</code>.
<p>
This constructor should be used when the returned update count may exceed
{@link Integer#MAX_VALUE}.
<p>
@param reason a description of the error
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode an exception code used by a particular
database vendor
@param updateCounts an array of <code>long</code>, with each element
indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or
<code>Statement.EXECUTE_FAILED</code> for each SQL command in
the batch for JDBC drivers that continue processing
after a command failure; an update count or
<code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch
prior to the failure for JDBC drivers that stop processing after a command
failure
@param cause the underlying reason for this <code>SQLException</code>
(which is saved for later retrieval by the <code>getCause()</code> method);
may be null indicating the cause is non-existent or unknown.
@since 1.8
"
      end

      operation 8095490 "getLargeUpdateCounts"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the update count for each update statement in the batch
update that executed successfully before this exception occurred.
A driver that implements batch updates may or may not continue to
process the remaining commands in a batch when one of the commands
fails to execute properly. If the driver continues processing commands,
the array returned by this method will have as many elements as
there are commands in the batch; otherwise, it will contain an
update count for each command that executed successfully before
the <code>BatchUpdateException</code> was thrown.
<p>
This method should be used when {@code Statement.executeLargeBatch} is
invoked and the returned update count may exceed {@link Integer#MAX_VALUE}.
<p>
@return an array of <code>long</code> containing the update counts
for the updates that were executed successfully before this error
occurred.  Or, if the driver continues to process commands after an
error, one of the following for every command in the batch:
<OL>
<LI>an update count
 <LI><code>Statement.SUCCESS_NO_INFO</code> to indicate that the command
    executed successfully but the number of rows affected is unknown
 <LI><code>Statement.EXECUTE_FAILED</code> to indicate that the command
    failed to execute successfully
</OL>
@since 1.8
"
      end

      attribute 1875330 "updateCounts"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The array that describes the outcome of a batch execution.
@serial
@since 1.2

"
      end

      attribute 1875458 "longUpdateCounts"
	private explicit_type "long"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Starting with Java SE 8, JDBC has added support for returning an update
count > Integer.MAX_VALUE.  Because of this the following changes were made
to BatchUpdateException:
<ul>
<li>Add field longUpdateCounts</li>
<li>Add Constructorr which takes long[] for update counts</li>
<li>Add getLargeUpdateCounts method</li>
</ul>
When any of the constructors are called, the int[] and long[] updateCount
fields are populated by copying the one array to each other.

As the JDBC driver passes in the updateCounts, there has always been the
possiblity for overflow and BatchUpdateException does not need to account
for that, it simply copies the arrays.

JDBC drivers should always use the constructor that specifies long[] and
JDBC application developers should call getLargeUpdateCounts.


The array that describes the outcome of a batch execution.
@serial
@since 1.8

"
      end

      attribute 1875586 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5977529877145521757L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8095618 "copyUpdateCount"
	class_operation private explicit_return_type "long"
	nparams 1
	  param inout name "uc" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility method to copy int[] updateCount to long[] updateCount
"
      end

      operation 8095746 "copyUpdateCount"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "uc" explicit_type "long"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility method to copy long[] updateCount to int[] updateCount.
No checks for overflow will be done as it is expected a  user will call
getLargeUpdateCounts.
"
      end

      operation 8095874 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore the state of the
{@code BatchUpdateException} from a stream.
"
      end

      operation 8096002 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "writeObject is called to save the state of the {@code BatchUpdateException}
to a stream.
"
      end
    end

    class 1037570 "Blob"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The representation (mapping) in
the Java&trade; programming
language of an SQL
<code>BLOB</code> value.  An SQL <code>BLOB</code> is a built-in type
that stores a Binary Large Object as a column value in a row of
a database table. By default drivers implement <code>Blob</code> using
an SQL <code>locator(BLOB)</code>, which means that a
<code>Blob</code> object contains a logical pointer to the
SQL <code>BLOB</code> data rather than the data itself.
A <code>Blob</code> object is valid for the duration of the
transaction in which is was created.

<P>Methods in the interfaces {@link ResultSet},
{@link CallableStatement}, and {@link PreparedStatement}, such as
<code>getBlob</code> and <code>setBlob</code> allow a programmer to
access an SQL <code>BLOB</code> value.
The <code>Blob</code> interface provides methods for getting the
length of an SQL <code>BLOB</code> (Binary Large Object) value,
for materializing a <code>BLOB</code> value on the client, and for
determining the position of a pattern of bytes within a
<code>BLOB</code> value. In addition, this interface has methods for updating
a <code>BLOB</code> value.
<p>
All methods on the <code>Blob</code> interface must be fully implemented if the
JDBC driver supports the data type.

@since 1.2
"
      operation 8096130 "length"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes in the <code>BLOB</code> value
designated by this <code>Blob</code> object.
@return length of the <code>BLOB</code> in bytes
@exception SQLException if there is an error accessing the
length of the <code>BLOB</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8096258 "getBytes"
	public explicit_return_type "byte"
	nparams 2
	  param in name "pos" explicit_type "long"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all or part of the <code>BLOB</code>
value that this <code>Blob</code> object represents, as an array of
bytes.  This <code>byte</code> array contains up to <code>length</code>
consecutive bytes starting at position <code>pos</code>.

@param pos the ordinal position of the first byte in the
       <code>BLOB</code> value to be extracted; the first byte is at
       position 1
@param length the number of consecutive bytes to be copied; the value
for length must be 0 or greater
@return a byte array containing up to <code>length</code>
        consecutive bytes from the <code>BLOB</code> value designated
        by this <code>Blob</code> object, starting with the
        byte at position <code>pos</code>
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value; if pos is less than 1 or length is
less than 0
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setBytes
@since 1.2
"
      end

      operation 8096386 "getBinaryStream"
	public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>BLOB</code> value designated by this
<code>Blob</code> instance as a stream.

@return a stream containing the <code>BLOB</code> data
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setBinaryStream
@since 1.2
"
      end

      operation 8096514 "position"
	public explicit_return_type "long"
	nparams 2
	  param inout name "pattern" explicit_type "byte"
	multiplicity "[]"
	  param in name "start" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the byte position at which the specified byte array
<code>pattern</code> begins within the <code>BLOB</code>
value that this <code>Blob</code> object represents.  The
search for <code>pattern</code> begins at position
<code>start</code>.

@param pattern the byte array for which to search
@param start the position at which to begin searching; the
       first position is 1
@return the position at which the pattern appears, else -1
@exception SQLException if there is an error accessing the
<code>BLOB</code> or if start is less than 1
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8096642 "position"
	public explicit_return_type "long"
	nparams 2
	  param inout name "pattern" type class_ref 1037570 // Blob
	  param in name "start" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the byte position in the <code>BLOB</code> value
designated by this <code>Blob</code> object at which
<code>pattern</code> begins.  The search begins at position
<code>start</code>.

@param pattern the <code>Blob</code> object designating
the <code>BLOB</code> value for which to search
@param start the position in the <code>BLOB</code> value
       at which to begin searching; the first position is 1
@return the position at which the pattern begins, else -1
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value or if start is less than 1
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8096770 "setBytes"
	public explicit_return_type "int"
	nparams 2
	  param in name "pos" explicit_type "long"
	  param inout name "bytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -------------------------- JDBC 3.0 -----------------------------------

Writes the given array of bytes to the <code>BLOB</code> value that
this <code>Blob</code> object represents, starting at position
<code>pos</code>, and returns the number of bytes written.
The array of bytes will overwrite the existing bytes
in the <code>Blob</code> object starting at the position
<code>pos</code>.  If the end of the <code>Blob</code> value is reached
while writing the array of bytes, then the length of the <code>Blob</code>
value will be increased to accommodate the extra bytes.
<p>
<b>Note:</b> If the value specified for <code>pos</code>
is greater then the length+1 of the <code>BLOB</code> value then the
behavior is undefined. Some JDBC drivers may throw a
<code>SQLException</code> while other drivers may support this
operation.

@param pos the position in the <code>BLOB</code> object at which
       to start writing; the first position is 1
@param bytes the array of bytes to be written to the <code>BLOB</code>
       value that this <code>Blob</code> object represents
@return the number of bytes written
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value or if pos is less than 1
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getBytes
@since 1.4
"
      end

      operation 8096898 "setBytes"
	public explicit_return_type "int"
	nparams 4
	  param in name "pos" explicit_type "long"
	  param inout name "bytes" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes all or part of the given <code>byte</code> array to the
<code>BLOB</code> value that this <code>Blob</code> object represents
and returns the number of bytes written.
Writing starts at position <code>pos</code> in the <code>BLOB</code>
value; <code>len</code> bytes from the given byte array are written.
The array of bytes will overwrite the existing bytes
in the <code>Blob</code> object starting at the position
<code>pos</code>.  If the end of the <code>Blob</code> value is reached
while writing the array of bytes, then the length of the <code>Blob</code>
value will be increased to accommodate the extra bytes.
<p>
<b>Note:</b> If the value specified for <code>pos</code>
is greater then the length+1 of the <code>BLOB</code> value then the
behavior is undefined. Some JDBC drivers may throw a
<code>SQLException</code> while other drivers may support this
operation.

@param pos the position in the <code>BLOB</code> object at which
       to start writing; the first position is 1
@param bytes the array of bytes to be written to this <code>BLOB</code>
       object
@param offset the offset into the array <code>bytes</code> at which
       to start reading the bytes to be set
@param len the number of bytes to be written to the <code>BLOB</code>
       value from the array of bytes <code>bytes</code>
@return the number of bytes written
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value or if pos is less than 1
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getBytes
@since 1.4
"
      end

      operation 8097026 "setBinaryStream"
	public return_type class_ref 151298 // OutputStream
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a stream that can be used to write to the <code>BLOB</code>
value that this <code>Blob</code> object represents.  The stream begins
at position <code>pos</code>.
The  bytes written to the stream will overwrite the existing bytes
in the <code>Blob</code> object starting at the position
<code>pos</code>.  If the end of the <code>Blob</code> value is reached
while writing to the stream, then the length of the <code>Blob</code>
value will be increased to accommodate the extra bytes.
<p>
<b>Note:</b> If the value specified for <code>pos</code>
is greater then the length+1 of the <code>BLOB</code> value then the
behavior is undefined. Some JDBC drivers may throw a
<code>SQLException</code> while other drivers may support this
operation.

@param pos the position in the <code>BLOB</code> value at which
       to start writing; the first position is 1
@return a <code>java.io.OutputStream</code> object to which data can
        be written
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value or if pos is less than 1
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getBinaryStream
@since 1.4
"
      end

      operation 8097154 "truncate"
	public explicit_return_type "void"
	nparams 1
	  param in name "len" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Truncates the <code>BLOB</code> value that this <code>Blob</code>
object represents to be <code>len</code> bytes in length.
<p>
<b>Note:</b> If the value specified for <code>pos</code>
is greater then the length+1 of the <code>BLOB</code> value then the
behavior is undefined. Some JDBC drivers may throw a
<code>SQLException</code> while other drivers may support this
operation.

@param len the length, in bytes, to which the <code>BLOB</code> value
       that this <code>Blob</code> object represents should be truncated
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value or if len is less than 0
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8097282 "free"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method frees the <code>Blob</code> object and releases the resources that
it holds. The object is invalid once the <code>free</code>
method is called.
<p>
After <code>free</code> has been called, any attempt to invoke a
method other than <code>free</code> will result in a <code>SQLException</code>
being thrown.  If <code>free</code> is called multiple times, the subsequent
calls to <code>free</code> are treated as a no-op.
<p>

@throws SQLException if an error occurs releasing
the Blob's resources
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8097410 "getBinaryStream"
	public return_type class_ref 146434 // InputStream
	nparams 2
	  param in name "pos" explicit_type "long"
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>InputStream</code> object that contains a partial <code>Blob</code> value,
starting  with the byte specified by pos, which is length bytes in length.

@param pos the offset to the first byte of the partial value to be retrieved.
 The first byte in the <code>Blob</code> is at position 1
@param length the length in bytes of the partial value to be retrieved
@return <code>InputStream</code> through which the partial <code>Blob</code> value can be read.
@throws SQLException if pos is less than 1 or if pos is greater than the number of bytes
in the <code>Blob</code> or if pos + length is greater than the number of bytes
in the <code>Blob</code>

@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end
    end

    class 1037698 "CallableStatement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The interface used to execute SQL stored procedures.  The JDBC API
provides a stored procedure SQL escape syntax that allows stored procedures
to be called in a standard way for all RDBMSs. This escape syntax has one
form that includes a result parameter and one that does not. If used, the result
parameter must be registered as an OUT parameter. The other parameters
can be used for input, output or both. Parameters are referred to
sequentially, by number, with the first parameter being 1.
<PRE>
  {?= call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]}
  {call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]}
</PRE>
<P>
IN parameter values are set using the <code>set</code> methods inherited from
{@link PreparedStatement}.  The type of all OUT parameters must be
registered prior to executing the stored procedure; their values
are retrieved after execution via the <code>get</code> methods provided here.
<P>
A <code>CallableStatement</code> can return one {@link ResultSet} object or
multiple <code>ResultSet</code> objects.  Multiple
<code>ResultSet</code> objects are handled using operations
inherited from {@link Statement}.
<P>
For maximum portability, a call's <code>ResultSet</code> objects and
update counts should be processed prior to getting the values of output
parameters.


@see Connection#prepareCall
@see ResultSet
"
      classrelation 3398658 // <generalisation>
	relation 3398658 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3398658 // <generalisation>
	  b parent class_ref 1037826 // PreparedStatement
      end

      operation 8111618 "registerOutParameter"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the OUT parameter in ordinal position
<code>parameterIndex</code> to the JDBC type
<code>sqlType</code>.  All OUT parameters must be registered
before a stored procedure is executed.
<p>
The JDBC type specified by <code>sqlType</code> for an OUT
parameter determines the Java type that must be used
in the <code>get</code> method to read the value of that parameter.
<p>
If the JDBC type expected to be returned to this output parameter
is specific to this particular database, <code>sqlType</code>
should be <code>java.sql.Types.OTHER</code>.  The method
{@link #getObject} retrieves the value.

@param parameterIndex the first parameter is 1, the second is 2,
       and so on
@param sqlType the JDBC type code defined by <code>java.sql.Types</code>.
       If the parameter is of JDBC type <code>NUMERIC</code>
       or <code>DECIMAL</code>, the version of
       <code>registerOutParameter</code> that accepts a scale value
       should be used.

@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if <code>sqlType</code> is
a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
<code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
<code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
 <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
or  <code>STRUCT</code> data type and the JDBC driver does not support
this data type
@see Types
"
      end

      operation 8111746 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the parameter in ordinal position
<code>parameterIndex</code> to be of JDBC type
<code>sqlType</code>. All OUT parameters must be registered
before a stored procedure is executed.
<p>
The JDBC type specified by <code>sqlType</code> for an OUT
parameter determines the Java type that must be used
in the <code>get</code> method to read the value of that parameter.
<p>
This version of <code>registerOutParameter</code> should be
used when the parameter is of JDBC type <code>NUMERIC</code>
or <code>DECIMAL</code>.

@param parameterIndex the first parameter is 1, the second is 2,
and so on
@param sqlType the SQL type code defined by <code>java.sql.Types</code>.
@param scale the desired number of digits to the right of the
decimal point.  It must be greater than or equal to zero.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if <code>sqlType</code> is
a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
<code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
<code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
 <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
or  <code>STRUCT</code> data type and the JDBC driver does not support
this data type
@see Types
"
      end

      operation 8111874 "wasNull"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the last OUT parameter read had the value of
SQL <code>NULL</code>.  Note that this method should be called only after
calling a getter method; otherwise, there is no value to use in
determining whether it is <code>null</code> or not.

@return <code>true</code> if the last parameter read was SQL
<code>NULL</code>; <code>false</code> otherwise
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
"
      end

      operation 8112002 "getString"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>CHAR</code>,
<code>VARCHAR</code>, or <code>LONGVARCHAR</code> parameter as a
<code>String</code> in the Java programming language.
<p>
For the fixed-length type JDBC <code>CHAR</code>,
the <code>String</code> object
returned has exactly the same value the SQL
<code>CHAR</code> value had in the
database, including any padding added by the database.

@param parameterIndex the first parameter is 1, the second is 2,
and so on
@return the parameter value. If the value is SQL <code>NULL</code>,
        the result
        is <code>null</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setString
"
      end

      operation 8112130 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>BIT</code>
or <code>BOOLEAN</code> parameter as a
<code>boolean</code> in the Java programming language.

@param parameterIndex the first parameter is 1, the second is 2,
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>,
        the result is <code>false</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setBoolean
"
      end

      operation 8112258 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>TINYINT</code> parameter
as a <code>byte</code> in the Java programming language.

@param parameterIndex the first parameter is 1, the second is 2,
and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
is <code>0</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setByte
"
      end

      operation 8112386 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>SMALLINT</code> parameter
as a <code>short</code> in the Java programming language.

@param parameterIndex the first parameter is 1, the second is 2,
and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
is <code>0</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setShort
"
      end

      operation 8112514 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>INTEGER</code> parameter
as an <code>int</code> in the Java programming language.

@param parameterIndex the first parameter is 1, the second is 2,
and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
is <code>0</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setInt
"
      end

      operation 8112642 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>BIGINT</code> parameter
as a <code>long</code> in the Java programming language.

@param parameterIndex the first parameter is 1, the second is 2,
and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
is <code>0</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setLong
"
      end

      operation 8112770 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>FLOAT</code> parameter
as a <code>float</code> in the Java programming language.

@param parameterIndex the first parameter is 1, the second is 2,
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
        is <code>0</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setFloat
"
      end

      operation 8112898 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>DOUBLE</code> parameter as a <code>double</code>
in the Java programming language.
@param parameterIndex the first parameter is 1, the second is 2,
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
        is <code>0</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setDouble
"
      end

      operation 8113026 "getBigDecimal"
	public return_type class_ref 145794 // BigDecimal
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>NUMERIC</code> parameter as a
<code>java.math.BigDecimal</code> object with <i>scale</i> digits to
the right of the decimal point.
@param parameterIndex the first parameter is 1, the second is 2,
       and so on
@param scale the number of digits to the right of the decimal point
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
        is <code>null</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@deprecated use <code>getBigDecimal(int parameterIndex)</code>
            or <code>getBigDecimal(String parameterName)</code>
@see #setBigDecimal
"
      end

      operation 8113154 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>BINARY</code> or
<code>VARBINARY</code> parameter as an array of <code>byte</code>
values in the Java programming language.
@param parameterIndex the first parameter is 1, the second is 2,
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
        is <code>null</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setBytes
"
      end

      operation 8113282 "getDate"
	public return_type class_ref 1038466 // Date
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>DATE</code> parameter as a
<code>java.sql.Date</code> object.
@param parameterIndex the first parameter is 1, the second is 2,
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
        is <code>null</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setDate
"
      end

      operation 8113410 "getTime"
	public return_type class_ref 1038594 // Time
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>TIME</code> parameter as a
<code>java.sql.Time</code> object.

@param parameterIndex the first parameter is 1, the second is 2,
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
        is <code>null</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setTime
"
      end

      operation 8113538 "getTimestamp"
	public return_type class_ref 1038722 // Timestamp
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a
<code>java.sql.Timestamp</code> object.

@param parameterIndex the first parameter is 1, the second is 2,
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
        is <code>null</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setTimestamp
"
      end

      operation 8113666 "getObject"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------------
 Advanced features:

Retrieves the value of the designated parameter as an <code>Object</code>
in the Java programming language. If the value is an SQL <code>NULL</code>,
the driver returns a Java <code>null</code>.
<p>
This method returns a Java object whose type corresponds to the JDBC
type that was registered for this parameter using the method
<code>registerOutParameter</code>.  By registering the target JDBC
type as <code>java.sql.Types.OTHER</code>, this method can be used
to read database-specific abstract data types.

@param parameterIndex the first parameter is 1, the second is 2,
       and so on
@return A <code>java.lang.Object</code> holding the OUT parameter value
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see Types
@see #setObject
"
      end

      operation 8113794 "getBigDecimal"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------

Retrieves the value of the designated JDBC <code>NUMERIC</code> parameter as a
<code>java.math.BigDecimal</code> object with as many digits to the
right of the decimal point as the value contains.
@param parameterIndex the first parameter is 1, the second is 2,
and so on
@return the parameter value in full precision.  If the value is
SQL <code>NULL</code>, the result is <code>null</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setBigDecimal
@since 1.2
"
      end

      operation 8113922 "getObject"
	public return_type class_ref 129538 // Object
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object representing the value of OUT parameter
<code>parameterIndex</code> and uses <code>map</code> for the custom
mapping of the parameter value.
<p>
This method returns a Java object whose type corresponds to the
JDBC type that was registered for this parameter using the method
<code>registerOutParameter</code>.  By registering the target
JDBC type as <code>java.sql.Types.OTHER</code>, this method can
be used to read database-specific abstract data types.
@param parameterIndex the first parameter is 1, the second is 2, and so on
@param map the mapping from SQL type names to Java classes
@return a <code>java.lang.Object</code> holding the OUT parameter value
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setObject
@since 1.2
"
      end

      operation 8114050 "getRef"
	public return_type class_ref 1038850 // Ref
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>REF(&lt;structured-type&gt;)</code>
parameter as a {@link java.sql.Ref} object in the Java programming language.
@param parameterIndex the first parameter is 1, the second is 2,
and so on
@return the parameter value as a <code>Ref</code> object in the
Java programming language.  If the value was SQL <code>NULL</code>, the value
<code>null</code> is returned.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8114178 "getBlob"
	public return_type class_ref 1037570 // Blob
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>BLOB</code> parameter as a
{@link java.sql.Blob} object in the Java programming language.
@param parameterIndex the first parameter is 1, the second is 2, and so on
@return the parameter value as a <code>Blob</code> object in the
Java programming language.  If the value was SQL <code>NULL</code>, the value
<code>null</code> is returned.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8114306 "getClob"
	public return_type class_ref 1038978 // Clob
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>CLOB</code> parameter as a
<code>java.sql.Clob</code> object in the Java programming language.
@param parameterIndex the first parameter is 1, the second is 2, and
so on
@return the parameter value as a <code>Clob</code> object in the
Java programming language.  If the value was SQL <code>NULL</code>, the
value <code>null</code> is returned.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8114434 "getArray"
	public return_type class_ref 1037058 // Array
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Retrieves the value of the designated JDBC <code>ARRAY</code> parameter as an
{@link java.sql.Array} object in the Java programming language.
@param parameterIndex the first parameter is 1, the second is 2, and
so on
@return the parameter value as an <code>Array</code> object in
the Java programming language.  If the value was SQL <code>NULL</code>, the
value <code>null</code> is returned.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8114562 "getDate"
	public return_type class_ref 1038466 // Date
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>DATE</code> parameter as a
<code>java.sql.Date</code> object, using
the given <code>Calendar</code> object
to construct the date.
With a <code>Calendar</code> object, the driver
can calculate the date taking into account a custom timezone and locale.
If no <code>Calendar</code> object is specified, the driver uses the
default timezone and locale.

@param parameterIndex the first parameter is 1, the second is 2,
and so on
@param cal the <code>Calendar</code> object the driver will use
           to construct the date
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
        is <code>null</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setDate
@since 1.2
"
      end

      operation 8114690 "getTime"
	public return_type class_ref 1038594 // Time
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>TIME</code> parameter as a
<code>java.sql.Time</code> object, using
the given <code>Calendar</code> object
to construct the time.
With a <code>Calendar</code> object, the driver
can calculate the time taking into account a custom timezone and locale.
If no <code>Calendar</code> object is specified, the driver uses the
default timezone and locale.

@param parameterIndex the first parameter is 1, the second is 2,
and so on
@param cal the <code>Calendar</code> object the driver will use
           to construct the time
@return the parameter value; if the value is SQL <code>NULL</code>, the result
        is <code>null</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setTime
@since 1.2
"
      end

      operation 8114818 "getTimestamp"
	public return_type class_ref 1038722 // Timestamp
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a
<code>java.sql.Timestamp</code> object, using
the given <code>Calendar</code> object to construct
the <code>Timestamp</code> object.
With a <code>Calendar</code> object, the driver
can calculate the timestamp taking into account a custom timezone and locale.
If no <code>Calendar</code> object is specified, the driver uses the
default timezone and locale.


@param parameterIndex the first parameter is 1, the second is 2,
and so on
@param cal the <code>Calendar</code> object the driver will use
           to construct the timestamp
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
        is <code>null</code>.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #setTimestamp
@since 1.2
"
      end

      operation 8114946 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the designated output parameter.
This version of
the method <code>registerOutParameter</code>
should be used for a user-defined or <code>REF</code> output parameter.  Examples
of user-defined types include: <code>STRUCT</code>, <code>DISTINCT</code>,
<code>JAVA_OBJECT</code>, and named array types.
<p>
All OUT parameters must be registered
before a stored procedure is executed.
<p>  For a user-defined parameter, the fully-qualified SQL
type name of the parameter should also be given, while a <code>REF</code>
parameter requires that the fully-qualified type name of the
referenced type be given.  A JDBC driver that does not need the
type code and type name information may ignore it.   To be portable,
however, applications should always provide these values for
user-defined and <code>REF</code> parameters.

Although it is intended for user-defined and <code>REF</code> parameters,
this method may be used to register a parameter of any JDBC type.
If the parameter does not have a user-defined or <code>REF</code> type, the
<i>typeName</i> parameter is ignored.

<P><B>Note:</B> When reading the value of an out parameter, you
must use the getter method whose Java type corresponds to the
parameter's registered SQL type.

@param parameterIndex the first parameter is 1, the second is 2,...
@param sqlType a value from {@link java.sql.Types}
@param typeName the fully-qualified name of an SQL structured type
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if <code>sqlType</code> is
a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
<code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
<code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
 <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
or  <code>STRUCT</code> data type and the JDBC driver does not support
this data type
@see Types
@since 1.2
"
      end

      operation 8115074 "registerOutParameter"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 3.0-----------------------------

Registers the OUT parameter named
<code>parameterName</code> to the JDBC type
<code>sqlType</code>.  All OUT parameters must be registered
before a stored procedure is executed.
<p>
The JDBC type specified by <code>sqlType</code> for an OUT
parameter determines the Java type that must be used
in the <code>get</code> method to read the value of that parameter.
<p>
If the JDBC type expected to be returned to this output parameter
is specific to this particular database, <code>sqlType</code>
should be <code>java.sql.Types.OTHER</code>.  The method
{@link #getObject} retrieves the value.
@param parameterName the name of the parameter
@param sqlType the JDBC type code defined by <code>java.sql.Types</code>.
If the parameter is of JDBC type <code>NUMERIC</code>
or <code>DECIMAL</code>, the version of
<code>registerOutParameter</code> that accepts a scale value
should be used.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if <code>sqlType</code> is
a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
<code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
<code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
 <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
or  <code>STRUCT</code> data type and the JDBC driver does not support
this data type or if the JDBC driver does not support
this method
@since 1.4
@see Types
"
      end

      operation 8115202 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "sqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the parameter named
<code>parameterName</code> to be of JDBC type
<code>sqlType</code>.  All OUT parameters must be registered
before a stored procedure is executed.
<p>
The JDBC type specified by <code>sqlType</code> for an OUT
parameter determines the Java type that must be used
in the <code>get</code> method to read the value of that parameter.
<p>
This version of <code>registerOutParameter</code> should be
used when the parameter is of JDBC type <code>NUMERIC</code>
or <code>DECIMAL</code>.

@param parameterName the name of the parameter
@param sqlType SQL type code defined by <code>java.sql.Types</code>.
@param scale the desired number of digits to the right of the
decimal point.  It must be greater than or equal to zero.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if <code>sqlType</code> is
a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
<code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
<code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
 <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
or  <code>STRUCT</code> data type and the JDBC driver does not support
this data type or if the JDBC driver does not support
this method
@since 1.4
@see Types
"
      end

      operation 8115330 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the designated output parameter.  This version of
the method <code>registerOutParameter</code>
should be used for a user-named or REF output parameter.  Examples
of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and
named array types.
<p>
All OUT parameters must be registered
before a stored procedure is executed.
<p>
For a user-named parameter the fully-qualified SQL
type name of the parameter should also be given, while a REF
parameter requires that the fully-qualified type name of the
referenced type be given.  A JDBC driver that does not need the
type code and type name information may ignore it.   To be portable,
however, applications should always provide these values for
user-named and REF parameters.

Although it is intended for user-named and REF parameters,
this method may be used to register a parameter of any JDBC type.
If the parameter does not have a user-named or REF type, the
typeName parameter is ignored.

<P><B>Note:</B> When reading the value of an out parameter, you
must use the <code>getXXX</code> method whose Java type XXX corresponds to the
parameter's registered SQL type.

@param parameterName the name of the parameter
@param sqlType a value from {@link java.sql.Types}
@param typeName the fully-qualified name of an SQL structured type
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if <code>sqlType</code> is
a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
<code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
<code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
 <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
or  <code>STRUCT</code> data type and the JDBC driver does not support
this data type or if the JDBC driver does not support
this method
@see Types
@since 1.4
"
      end

      operation 8115458 "getURL"
	public return_type class_ref 243458 // URL
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>DATALINK</code> parameter as a
<code>java.net.URL</code> object.

@param parameterIndex the first parameter is 1, the second is 2,...
@return a <code>java.net.URL</code> object that represents the
        JDBC <code>DATALINK</code> value used as the designated
        parameter
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs,
this method is called on a closed <code>CallableStatement</code>,
           or if the URL being returned is
           not a valid URL on the Java platform
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setURL
@since 1.4
"
      end

      operation 8115586 "setURL"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "val" type class_ref 243458 // URL
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.net.URL</code> object.
The driver converts this to an SQL <code>DATALINK</code> value when
it sends it to the database.

@param parameterName the name of the parameter
@param val the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs;
this method is called on a closed <code>CallableStatement</code>
           or if a URL is malformed
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getURL
@since 1.4
"
      end

      operation 8115714 "setNull"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to SQL <code>NULL</code>.

<P><B>Note:</B> You must specify the parameter's SQL type.

@param parameterName the name of the parameter
@param sqlType the SQL type code defined in <code>java.sql.Types</code>
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8115842 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>boolean</code> value.
The driver converts this
to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #getBoolean
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8115970 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>byte</code> value.
The driver converts this
to an SQL <code>TINYINT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getByte
@since 1.4
"
      end

      operation 8116098 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>short</code> value.
The driver converts this
to an SQL <code>SMALLINT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getShort
@since 1.4
"
      end

      operation 8116226 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>int</code> value.
The driver converts this
to an SQL <code>INTEGER</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getInt
@since 1.4
"
      end

      operation 8116354 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>long</code> value.
The driver converts this
to an SQL <code>BIGINT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getLong
@since 1.4
"
      end

      operation 8116482 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>float</code> value.
The driver converts this
to an SQL <code>FLOAT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getFloat
@since 1.4
"
      end

      operation 8116610 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>double</code> value.
The driver converts this
to an SQL <code>DOUBLE</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getDouble
@since 1.4
"
      end

      operation 8116738 "setBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 145794 // BigDecimal
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given
<code>java.math.BigDecimal</code> value.
The driver converts this to an SQL <code>NUMERIC</code> value when
it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getBigDecimal
@since 1.4
"
      end

      operation 8116866 "setString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>String</code> value.
The driver converts this
to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
(depending on the argument's
size relative to the driver's limits on <code>VARCHAR</code> values)
when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getString
@since 1.4
"
      end

      operation 8116994 "setBytes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java array of bytes.
The driver converts this to an SQL <code>VARBINARY</code> or
<code>LONGVARBINARY</code> (depending on the argument's size relative
to the driver's limits on <code>VARBINARY</code> values) when it sends
it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getBytes
@since 1.4
"
      end

      operation 8117122 "setDate"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038466 // Date
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code> value
using the default time zone of the virtual machine that is running
the application.
The driver converts this
to an SQL <code>DATE</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getDate
@since 1.4
"
      end

      operation 8117250 "setTime"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038594 // Time
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code> value.
The driver converts this
to an SQL <code>TIME</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getTime
@since 1.4
"
      end

      operation 8117378 "setTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038722 // Timestamp
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.
The driver
converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the
database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getTimestamp
@since 1.4
"
      end

      operation 8117506 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have
the specified number of bytes.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param x the Java input stream that contains the ASCII parameter value
@param length the number of bytes in the stream
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8117634 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have
the specified number of bytes.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the stream
as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param x the java input stream which contains the binary parameter value
@param length the number of bytes in the stream
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8117762 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	  param in name "targetSqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object.

<p>The given Java object will be converted to the given targetSqlType
before being sent to the database.

If the object has a custom mapping (is of a class implementing the
interface <code>SQLData</code>),
the JDBC driver should call the method <code>SQLData.writeSQL</code> to write it
to the SQL data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
 <code>Struct</code>, <code>java.net.URL</code>,
or <code>Array</code>, the driver should pass it to the database as a
value of the corresponding SQL type.
<P>
Note that this method may be used to pass datatabase-
specific abstract data types.

@param parameterName the name of the parameter
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in java.sql.Types) to be
sent to the database. The scale argument may further qualify this type.
@param scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,
         this is the number of digits after the decimal point.  For all other
         types, this value will be ignored.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified targetSqlType
@see Types
@see #getObject
@since 1.4
"
      end

      operation 8117890 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	  param in name "targetSqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object.

This method is similar to {@link #setObject(String parameterName,
Object x, int targetSqlType, int scaleOrLength)},
except that it assumes a scale of zero.

@param parameterName the name of the parameter
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in java.sql.Types) to be
                     sent to the database
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified targetSqlType
@see #getObject
@since 1.4
"
      end

      operation 8118018 "setObject"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object.

<p>The JDBC specification specifies a standard mapping from
Java <code>Object</code> types to SQL types.  The given argument
will be converted to the corresponding SQL type before being
sent to the database.
<p>Note that this method may be used to pass datatabase-
specific abstract data types, by using a driver-specific Java
type.

If the object is of a class implementing the interface <code>SQLData</code>,
the JDBC driver should call the method <code>SQLData.writeSQL</code>
to write it to the SQL data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
 <code>Struct</code>, <code>java.net.URL</code>,
or <code>Array</code>, the driver should pass it to the database as a
value of the corresponding SQL type.
<P>
This method throws an exception if there is an ambiguity, for example, if the
object is of a class implementing more than one of the interfaces named above.
<p>
<b>Note:</b> Not all databases allow for a non-typed Null to be sent to
the backend. For maximum portability, the <code>setNull</code> or the
<code>setObject(String parameterName, Object x, int sqlType)</code>
method should be used
instead of <code>setObject(String parameterName, Object x)</code>.
<p>
@param parameterName the name of the parameter
@param x the object containing the input parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs,
this method is called on a closed <code>CallableStatement</code> or if the given
           <code>Object</code> parameter is ambiguous
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getObject
@since 1.4
"
      end

      operation 8118146 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Reader</code>
object, which is the given number of characters long.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param reader the <code>java.io.Reader</code> object that
       contains the UNICODE data used as the designated parameter
@param length the number of characters in the stream
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8118274 "setDate"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038466 // Date
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,
which the driver then sends to the database.  With a
a <code>Calendar</code> object, the driver can calculate the date
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterName the name of the parameter
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the date
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getDate
@since 1.4
"
      end

      operation 8118402 "setTime"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038594 // Time
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,
which the driver then sends to the database.  With a
a <code>Calendar</code> object, the driver can calculate the time
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterName the name of the parameter
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the time
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getTime
@since 1.4
"
      end

      operation 8118530 "setTimestamp"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038722 // Timestamp
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,
which the driver then sends to the database.  With a
a <code>Calendar</code> object, the driver can calculate the timestamp
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterName the name of the parameter
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the timestamp
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getTimestamp
@since 1.4
"
      end

      operation 8118658 "setNull"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to SQL <code>NULL</code>.
This version of the method <code>setNull</code> should
be used for user-defined types and REF type parameters.  Examples
of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
named array types.

<P><B>Note:</B> To be portable, applications must give the
SQL type code and the fully-qualified SQL type name when specifying
a NULL user-defined or REF parameter.  In the case of a user-defined type
the name is the type name of the parameter itself.  For a REF
parameter, the name is the type name of the referenced type.
<p>
Although it is intended for user-defined and Ref parameters,
this method may be used to set a null parameter of any JDBC type.
If the parameter does not have a user-defined or REF type, the given
typeName is ignored.


@param parameterName the name of the parameter
@param sqlType a value from <code>java.sql.Types</code>
@param typeName the fully-qualified name of an SQL user-defined type;
       ignored if the parameter is not a user-defined type or
       SQL <code>REF</code> value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8118786 "getString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>CHAR</code>, <code>VARCHAR</code>,
or <code>LONGVARCHAR</code> parameter as a <code>String</code> in
the Java programming language.
<p>
For the fixed-length type JDBC <code>CHAR</code>,
the <code>String</code> object
returned has exactly the same value the SQL
<code>CHAR</code> value had in the
database, including any padding added by the database.
@param parameterName the name of the parameter
@return the parameter value. If the value is SQL <code>NULL</code>, the result
is <code>null</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setString
@since 1.4
"
      end

      operation 8118914 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>BIT</code> or <code>BOOLEAN</code>
parameter as a
<code>boolean</code> in the Java programming language.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
is <code>false</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setBoolean
@since 1.4
"
      end

      operation 8119042 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>TINYINT</code> parameter as a <code>byte</code>
in the Java programming language.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
is <code>0</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setByte
@since 1.4
"
      end

      operation 8119170 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>SMALLINT</code> parameter as a <code>short</code>
in the Java programming language.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
is <code>0</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setShort
@since 1.4
"
      end

      operation 8119298 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>INTEGER</code> parameter as an <code>int</code>
in the Java programming language.

@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>,
        the result is <code>0</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setInt
@since 1.4
"
      end

      operation 8119426 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>BIGINT</code> parameter as a <code>long</code>
in the Java programming language.

@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>,
        the result is <code>0</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setLong
@since 1.4
"
      end

      operation 8119554 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>FLOAT</code> parameter as a <code>float</code>
in the Java programming language.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>,
        the result is <code>0</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setFloat
@since 1.4
"
      end

      operation 8119682 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>DOUBLE</code> parameter as a <code>double</code>
in the Java programming language.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>,
        the result is <code>0</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setDouble
@since 1.4
"
      end

      operation 8119810 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>BINARY</code> or <code>VARBINARY</code>
parameter as an array of <code>byte</code> values in the Java
programming language.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result is
 <code>null</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setBytes
@since 1.4
"
      end

      operation 8119938 "getDate"
	public return_type class_ref 1038466 // Date
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>DATE</code> parameter as a
<code>java.sql.Date</code> object.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
is <code>null</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setDate
@since 1.4
"
      end

      operation 8120066 "getTime"
	public return_type class_ref 1038594 // Time
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>TIME</code> parameter as a
<code>java.sql.Time</code> object.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
is <code>null</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setTime
@since 1.4
"
      end

      operation 8120194 "getTimestamp"
	public return_type class_ref 1038722 // Timestamp
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>TIMESTAMP</code> parameter as a
<code>java.sql.Timestamp</code> object.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result
is <code>null</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setTimestamp
@since 1.4
"
      end

      operation 8120322 "getObject"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a parameter as an <code>Object</code> in the Java
programming language. If the value is an SQL <code>NULL</code>, the
driver returns a Java <code>null</code>.
<p>
This method returns a Java object whose type corresponds to the JDBC
type that was registered for this parameter using the method
<code>registerOutParameter</code>.  By registering the target JDBC
type as <code>java.sql.Types.OTHER</code>, this method can be used
to read database-specific abstract data types.
@param parameterName the name of the parameter
@return A <code>java.lang.Object</code> holding the OUT parameter value.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see Types
@see #setObject
@since 1.4
"
      end

      operation 8120450 "getBigDecimal"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>NUMERIC</code> parameter as a
<code>java.math.BigDecimal</code> object with as many digits to the
right of the decimal point as the value contains.
@param parameterName the name of the parameter
@return the parameter value in full precision.  If the value is
SQL <code>NULL</code>, the result is <code>null</code>.
@exception SQLException if parameterName does not correspond to a named
parameter;  if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setBigDecimal
@since 1.4
"
      end

      operation 8120578 "getObject"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object representing the value of OUT parameter
<code>parameterName</code> and uses <code>map</code> for the custom
mapping of the parameter value.
<p>
This method returns a Java object whose type corresponds to the
JDBC type that was registered for this parameter using the method
<code>registerOutParameter</code>.  By registering the target
JDBC type as <code>java.sql.Types.OTHER</code>, this method can
be used to read database-specific abstract data types.
@param parameterName the name of the parameter
@param map the mapping from SQL type names to Java classes
@return a <code>java.lang.Object</code> holding the OUT parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setObject
@since 1.4
"
      end

      operation 8120706 "getRef"
	public return_type class_ref 1038850 // Ref
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>REF(&lt;structured-type&gt;)</code>
parameter as a {@link java.sql.Ref} object in the Java programming language.

@param parameterName the name of the parameter
@return the parameter value as a <code>Ref</code> object in the
        Java programming language.  If the value was SQL <code>NULL</code>,
        the value <code>null</code> is returned.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8120834 "getBlob"
	public return_type class_ref 1037570 // Blob
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>BLOB</code> parameter as a
{@link java.sql.Blob} object in the Java programming language.

@param parameterName the name of the parameter
@return the parameter value as a <code>Blob</code> object in the
        Java programming language.  If the value was SQL <code>NULL</code>,
        the value <code>null</code> is returned.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8120962 "getClob"
	public return_type class_ref 1038978 // Clob
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>CLOB</code> parameter as a
<code>java.sql.Clob</code> object in the Java programming language.
@param parameterName the name of the parameter
@return the parameter value as a <code>Clob</code> object in the
        Java programming language.  If the value was SQL <code>NULL</code>,
        the value <code>null</code> is returned.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8121090 "getArray"
	public return_type class_ref 1037058 // Array
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>ARRAY</code> parameter as an
{@link java.sql.Array} object in the Java programming language.

@param parameterName the name of the parameter
@return the parameter value as an <code>Array</code> object in
        Java programming language.  If the value was SQL <code>NULL</code>,
        the value <code>null</code> is returned.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8121218 "getDate"
	public return_type class_ref 1038466 // Date
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>DATE</code> parameter as a
<code>java.sql.Date</code> object, using
the given <code>Calendar</code> object
to construct the date.
With a <code>Calendar</code> object, the driver
can calculate the date taking into account a custom timezone and locale.
If no <code>Calendar</code> object is specified, the driver uses the
default timezone and locale.

@param parameterName the name of the parameter
@param cal the <code>Calendar</code> object the driver will use
           to construct the date
@return the parameter value.  If the value is SQL <code>NULL</code>,
the result is <code>null</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setDate
@since 1.4
"
      end

      operation 8121346 "getTime"
	public return_type class_ref 1038594 // Time
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>TIME</code> parameter as a
<code>java.sql.Time</code> object, using
the given <code>Calendar</code> object
to construct the time.
With a <code>Calendar</code> object, the driver
can calculate the time taking into account a custom timezone and locale.
If no <code>Calendar</code> object is specified, the driver uses the
default timezone and locale.

@param parameterName the name of the parameter
@param cal the <code>Calendar</code> object the driver will use
           to construct the time
@return the parameter value; if the value is SQL <code>NULL</code>, the result is
<code>null</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setTime
@since 1.4
"
      end

      operation 8121474 "getTimestamp"
	public return_type class_ref 1038722 // Timestamp
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>TIMESTAMP</code> parameter as a
<code>java.sql.Timestamp</code> object, using
the given <code>Calendar</code> object to construct
the <code>Timestamp</code> object.
With a <code>Calendar</code> object, the driver
can calculate the timestamp taking into account a custom timezone and locale.
If no <code>Calendar</code> object is specified, the driver uses the
default timezone and locale.


@param parameterName the name of the parameter
@param cal the <code>Calendar</code> object the driver will use
           to construct the timestamp
@return the parameter value.  If the value is SQL <code>NULL</code>, the result is
<code>null</code>.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setTimestamp
@since 1.4
"
      end

      operation 8121602 "getURL"
	public return_type class_ref 243458 // URL
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>DATALINK</code> parameter as a
<code>java.net.URL</code> object.

@param parameterName the name of the parameter
@return the parameter value as a <code>java.net.URL</code> object in the
Java programming language.  If the value was SQL <code>NULL</code>, the
value <code>null</code> is returned.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs,
this method is called on a closed <code>CallableStatement</code>,
           or if there is a problem with the URL
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setURL
@since 1.4
"
      end

      operation 8121730 "getRowId"
	public return_type class_ref 1039362 // RowId
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------- JDBC 4.0 -----------------------------------

Retrieves the value of the designated JDBC <code>ROWID</code> parameter as a
<code>java.sql.RowId</code> object.

@param parameterIndex the first parameter is 1, the second is 2,...
@return a <code>RowId</code> object that represents the JDBC <code>ROWID</code>
    value is used as the designated parameter. If the parameter contains
a SQL <code>NULL</code>, then a <code>null</code> value is returned.
@throws SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8121858 "getRowId"
	public return_type class_ref 1039362 // RowId
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>ROWID</code> parameter as a
<code>java.sql.RowId</code> object.

@param parameterName the name of the parameter
@return a <code>RowId</code> object that represents the JDBC <code>ROWID</code>
    value is used as the designated parameter. If the parameter contains
a SQL <code>NULL</code>, then a <code>null</code> value is returned.
@throws SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8121986 "setRowId"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1039362 // RowId
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.RowId</code> object. The
driver converts this to a SQL <code>ROWID</code> when it sends it to the
database.

@param parameterName the name of the parameter
@param x the parameter value
@throws SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8122114 "setNString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>String</code> object.
The driver converts this to a SQL <code>NCHAR</code> or
<code>NVARCHAR</code> or <code>LONGNVARCHAR</code>
@param parameterName the name of the parameter to be set
@param value the parameter value
@throws SQLException if parameterName does not correspond to a named
parameter; if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8122242 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "value" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object. The
<code>Reader</code> reads the data till end-of-file is reached. The
driver does the necessary conversion from Java character format to
the national character set in the database.
@param parameterName the name of the parameter to be set
@param value the parameter value
@param length the number of characters in the parameter data.
@throws SQLException if parameterName does not correspond to a named
parameter; if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8122370 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "value" type class_ref 1039490 // NClob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>java.sql.NClob</code> object. The object
implements the <code>java.sql.NClob</code> interface. This <code>NClob</code>
object maps to a SQL <code>NCLOB</code>.
@param parameterName the name of the parameter to be set
@param value the parameter value
@throws SQLException if parameterName does not correspond to a named
parameter; if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8122498 "setClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.  The <code>reader</code> must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>CallableStatement</code> is executed.
This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>
@param parameterName the name of the parameter to be set
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if parameterName does not correspond to a named
parameter; if the length specified is less than zero;
a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method

@since 1.6
"
      end

      operation 8122626 "setBlob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>InputStream</code> object.  The <code>inputstream</code> must contain  the number
of characters specified by length, otherwise a <code>SQLException</code> will be
generated when the <code>CallableStatement</code> is executed.
This method differs from the <code>setBinaryStream (int, InputStream, int)</code>
method because it informs the driver that the parameter value should be
sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
the driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>

@param parameterName the name of the parameter to be set
the second is 2, ...

@param inputStream An object that contains the data to set the parameter
value to.
@param length the number of bytes in the parameter data.
@throws SQLException  if parameterName does not correspond to a named
parameter; if the length specified
is less than zero; if the number of bytes in the inputstream does not match
the specified length; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method

@since 1.6
"
      end

      operation 8122754 "setNClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.  The <code>reader</code> must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>CallableStatement</code> is executed.
This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>

@param parameterName the name of the parameter to be set
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if parameterName does not correspond to a named
parameter; if the length specified is less than zero;
if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8122882 "getNClob"
	public return_type class_ref 1039490 // NClob
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>NCLOB</code> parameter as a
<code>java.sql.NClob</code> object in the Java programming language.

@param parameterIndex the first parameter is 1, the second is 2, and
so on
@return the parameter value as a <code>NClob</code> object in the
Java programming language.  If the value was SQL <code>NULL</code>, the
value <code>null</code> is returned.
@exception SQLException if the parameterIndex is not valid;
if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8123010 "getNClob"
	public return_type class_ref 1039490 // NClob
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>NCLOB</code> parameter as a
<code>java.sql.NClob</code> object in the Java programming language.
@param parameterName the name of the parameter
@return the parameter value as a <code>NClob</code> object in the
        Java programming language.  If the value was SQL <code>NULL</code>,
        the value <code>null</code> is returned.
@exception SQLException if parameterName does not correspond to a named
parameter; if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8123138 "setSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "xmlObject" type class_ref 1039618 // SQLXML
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.SQLXML</code> object. The driver converts this to an
<code>SQL XML</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param xmlObject a <code>SQLXML</code> object that maps an <code>SQL XML</code> value
@throws SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs;
this method is called on a closed <code>CallableStatement</code> or
the <code>java.xml.transform.Result</code>,
 <code>Writer</code> or <code>OutputStream</code> has not been closed for the <code>SQLXML</code> object
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method

@since 1.6
"
      end

      operation 8123266 "getSQLXML"
	public return_type class_ref 1039618 // SQLXML
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated <code>SQL XML</code> parameter as a
<code>java.sql.SQLXML</code> object in the Java programming language.
@param parameterIndex index of the first parameter is 1, the second is 2, ...
@return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value
@throws SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8123394 "getSQLXML"
	public return_type class_ref 1039618 // SQLXML
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated <code>SQL XML</code> parameter as a
<code>java.sql.SQLXML</code> object in the Java programming language.
@param parameterName the name of the parameter
@return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value
@throws SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8123522 "getNString"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated <code>NCHAR</code>,
<code>NVARCHAR</code>
or <code>LONGNVARCHAR</code> parameter as
a <code>String</code> in the Java programming language.
 <p>
For the fixed-length type JDBC <code>NCHAR</code>,
the <code>String</code> object
returned has exactly the same value the SQL
<code>NCHAR</code> value had in the
database, including any padding added by the database.

@param parameterIndex index of the first parameter is 1, the second is 2, ...
@return a <code>String</code> object that maps an
<code>NCHAR</code>, <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
@see #setNString
"
      end

      operation 8123650 "getNString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieves the value of the designated <code>NCHAR</code>,
<code>NVARCHAR</code>
or <code>LONGNVARCHAR</code> parameter as
a <code>String</code> in the Java programming language.
<p>
For the fixed-length type JDBC <code>NCHAR</code>,
the <code>String</code> object
returned has exactly the same value the SQL
<code>NCHAR</code> value had in the
database, including any padding added by the database.

@param parameterName the name of the parameter
@return a <code>String</code> object that maps an
<code>NCHAR</code>, <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value
@exception SQLException if parameterName does not correspond to a named
parameter;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
@see #setNString
"
      end

      operation 8123778 "getNCharacterStream"
	public return_type class_ref 407298 // Reader
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated parameter as a
<code>java.io.Reader</code> object in the Java programming language.
It is intended for use when
accessing  <code>NCHAR</code>,<code>NVARCHAR</code>
and <code>LONGNVARCHAR</code> parameters.

@return a <code>java.io.Reader</code> object that contains the parameter
value; if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language.
@param parameterIndex the first parameter is 1, the second is 2, ...
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8123906 "getNCharacterStream"
	public return_type class_ref 407298 // Reader
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated parameter as a
<code>java.io.Reader</code> object in the Java programming language.
It is intended for use when
accessing  <code>NCHAR</code>,<code>NVARCHAR</code>
and <code>LONGNVARCHAR</code> parameters.

@param parameterName the name of the parameter
@return a <code>java.io.Reader</code> object that contains the parameter
value; if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8124034 "getCharacterStream"
	public return_type class_ref 407298 // Reader
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated parameter as a
<code>java.io.Reader</code> object in the Java programming language.

@return a <code>java.io.Reader</code> object that contains the parameter
value; if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language.
@param parameterIndex the first parameter is 1, the second is 2, ...
@exception SQLException if the parameterIndex is not valid; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@since 1.6
"
      end

      operation 8124162 "getCharacterStream"
	public return_type class_ref 407298 // Reader
	nparams 1
	  param inout name "parameterName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated parameter as a
<code>java.io.Reader</code> object in the Java programming language.

@param parameterName the name of the parameter
@return a <code>java.io.Reader</code> object that contains the parameter
value; if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8124290 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1037570 // Blob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Blob</code> object.
The driver converts this to an SQL <code>BLOB</code> value when it
sends it to the database.

@param parameterName the name of the parameter
@param x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8124418 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038978 // Clob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Clob</code> object.
The driver converts this to an SQL <code>CLOB</code> value when it
sends it to the database.

@param parameterName the name of the parameter
@param x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8124546 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have
the specified number of bytes.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param x the Java input stream that contains the ASCII parameter value
@param length the number of bytes in the stream
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8124674 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have
the specified number of bytes.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the stream
as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param x the java input stream which contains the binary parameter value
@param length the number of bytes in the stream
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8124802 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Reader</code>
object, which is the given number of characters long.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param reader the <code>java.io.Reader</code> object that
       contains the UNICODE data used as the designated parameter
@param length the number of characters in the stream
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8124930 "setAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--

Sets the designated parameter to the given input stream.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setAsciiStream</code> which takes a length parameter.

@param parameterName the name of the parameter
@param x the Java input stream that contains the ASCII parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8125058 "setBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the
stream as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setBinaryStream</code> which takes a length parameter.

@param parameterName the name of the parameter
@param x the java input stream which contains the binary parameter value
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8125186 "setCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Reader</code>
object.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setCharacterStream</code> which takes a length parameter.

@param parameterName the name of the parameter
@param reader the <code>java.io.Reader</code> object that contains the
       Unicode data
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8125314 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "value" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object. The
<code>Reader</code> reads the data till end-of-file is reached. The
driver does the necessary conversion from Java character format to
the national character set in the database.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setNCharacterStream</code> which takes a length parameter.

@param parameterName the name of the parameter
@param value the parameter value
@throws SQLException if parameterName does not correspond to a named
parameter; if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; if a database access error occurs; or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8125442 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.
This method differs from the <code>setCharacterStream (int, Reader)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setClob</code> which takes a length parameter.

@param parameterName the name of the parameter
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or this method is called on
a closed <code>CallableStatement</code>

@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8125570 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "inputStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>InputStream</code> object.
This method differs from the <code>setBinaryStream (int, InputStream)</code>
method because it informs the driver that the parameter value should be
sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
the driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setBlob</code> which takes a length parameter.

@param parameterName the name of the parameter
@param inputStream An object that contains the data to set the parameter
value to.
@throws SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 8125698 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.
This method differs from the <code>setCharacterStream (int, Reader)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setNClob</code> which takes a length parameter.

@param parameterName the name of the parameter
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if parameterName does not correspond to a named
parameter; if the driver does not support national character sets;
if the driver can detect that a data conversion
 error could occur;  if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 8125826 "getObject"
	public explicit_return_type "T"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "type" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------- JDBC 4.1 -----------------------------------

<p>Returns an object representing the value of OUT parameter
{@code parameterIndex} and will convert from the
SQL type of the parameter to the requested Java data type, if the
conversion is supported. If the conversion is not
supported or null is specified for the type, a
<code>SQLException</code> is thrown.
<p>
At a minimum, an implementation must support the conversions defined in
Appendix B, Table B-3 and conversion of appropriate user defined SQL
types to a Java type which implements {@code SQLData}, or {@code Struct}.
Additional conversions may be supported and are vendor defined.

@param parameterIndex the first parameter is 1, the second is 2, and so on
@param type Class representing the Java data type to convert the
designated parameter to.
@param <T> the type of the class modeled by this Class object
@return an instance of {@code type} holding the OUT parameter value
@throws SQLException if conversion is not supported, type is null or
        another error occurs. The getCause() method of the
exception may provide a more detailed exception, for example, if
a conversion error occurs
@throws SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.7
"
      end

      operation 8125954 "getObject"
	public explicit_return_type "T"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "type" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns an object representing the value of OUT parameter
{@code parameterName} and will convert from the
SQL type of the parameter to the requested Java data type, if the
conversion is supported. If the conversion is not
supported  or null is specified for the type, a
<code>SQLException</code> is thrown.
<p>
At a minimum, an implementation must support the conversions defined in
Appendix B, Table B-3 and conversion of appropriate user defined SQL
types to a Java type which implements {@code SQLData}, or {@code Struct}.
Additional conversions may be supported and are vendor defined.

@param parameterName the name of the parameter
@param type Class representing the Java data type to convert
the designated parameter to.
@param <T> the type of the class modeled by this Class object
@return an instance of {@code type} holding the OUT parameter
value
@throws SQLException if conversion is not supported, type is null or
        another error occurs. The getCause() method of the
exception may provide a more detailed exception, for example, if
a conversion error occurs
@throws SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.7
"
      end

      operation 8126082 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "targetSqlType" type class_ref 1039746 // SQLType
	  param in name "scaleOrLength" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------- JDBC 4.2 -----------------------------------

<p>Sets the value of the designated parameter with the given object.

If the second argument is an {@code InputStream} then the stream
must contain the number of bytes specified by scaleOrLength.
If the second argument is a {@code Reader} then the reader must
contain the number of characters specified
by scaleOrLength. If these conditions are not true the driver
will generate a
{@code SQLException} when the prepared statement is executed.

<p>The given Java object will be converted to the given targetSqlType
before being sent to the database.

If the object has a custom mapping (is of a class implementing the
interface {@code SQLData}),
the JDBC driver should call the method {@code SQLData.writeSQL} to
write it to the SQL data stream.
If, on the other hand, the object is of a class implementing
{@code Ref}, {@code Blob}, {@code Clob},  {@code NClob},
 {@code Struct}, {@code java.net.URL},
or {@code Array}, the driver should pass it to the database as a
value of the corresponding SQL type.

<p>Note that this method may be used to pass database-specific
abstract data types.
<P>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param parameterName the name of the parameter
@param x the object containing the input parameter value
@param targetSqlType the SQL type to be
sent to the database. The scale argument may further qualify this type.
@param scaleOrLength for {@code java.sql.JDBCType.DECIMAL}
         or {@code java.sql.JDBCType.NUMERIC types},
         this is the number of digits after the decimal point. For
         Java Object types {@code InputStream} and {@code Reader},
         this is the length
         of the data in the stream or reader.  For all other types,
         this value will be ignored.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs
or this method is called on a closed {@code CallableStatement}  or
           if the Java Object specified by x is an InputStream
           or Reader object and the value of the scale parameter is less
           than zero
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified targetSqlType
@see JDBCType
@see SQLType

@since 1.8
"
      end

      operation 8126210 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "targetSqlType" type class_ref 1039746 // SQLType
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object.

This method is similar to {@link #setObject(String parameterName,
Object x, SQLType targetSqlType, int scaleOrLength)},
except that it assumes a scale of zero.
<P>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param parameterName the name of the parameter
@param x the object containing the input parameter value
@param targetSqlType the SQL type to be sent to the database
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs
or this method is called on a closed {@code CallableStatement}
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified targetSqlType
@see JDBCType
@see SQLType
@since 1.8
"
      end

      operation 8126338 "registerOutParameter"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "sqlType" type class_ref 1039746 // SQLType
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the OUT parameter in ordinal position
{@code parameterIndex} to the JDBC type
{@code sqlType}.  All OUT parameters must be registered
before a stored procedure is executed.
<p>
The JDBC type specified by {@code sqlType} for an OUT
parameter determines the Java type that must be used
in the {@code get} method to read the value of that parameter.
<p>
If the JDBC type expected to be returned to this output parameter
is specific to this particular database, {@code sqlType}
may be {@code JDBCType.OTHER} or a {@code SQLType} that is supported by
the JDBC driver.  The method
{@link #getObject} retrieves the value.
<P>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param parameterIndex the first parameter is 1, the second is 2,
       and so on
@param sqlType the JDBC type code defined by {@code SQLType} to use to
register the OUT Parameter.
       If the parameter is of JDBC type {@code JDBCType.NUMERIC}
       or {@code JDBCType.DECIMAL}, the version of
       {@code registerOutParameter} that accepts a scale value
       should be used.

@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed {@code CallableStatement}
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified sqlType
@see JDBCType
@see SQLType
@since 1.8
"
      end

      operation 8126466 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "sqlType" type class_ref 1039746 // SQLType
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the parameter in ordinal position
{@code parameterIndex} to be of JDBC type
{@code sqlType}. All OUT parameters must be registered
before a stored procedure is executed.
<p>
The JDBC type specified by {@code sqlType} for an OUT
parameter determines the Java type that must be used
in the {@code get} method to read the value of that parameter.
<p>
This version of {@code  registerOutParameter} should be
used when the parameter is of JDBC type {@code JDBCType.NUMERIC}
or {@code JDBCType.DECIMAL}.
<P>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param parameterIndex the first parameter is 1, the second is 2,
and so on
@param sqlType the JDBC type code defined by {@code SQLType} to use to
register the OUT Parameter.
@param scale the desired number of digits to the right of the
decimal point.  It must be greater than or equal to zero.
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed {@code CallableStatement}
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified sqlType
@see JDBCType
@see SQLType
@since 1.8
"
      end

      operation 8126594 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "sqlType" type class_ref 1039746 // SQLType
	  param inout name "typeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the designated output parameter.
This version of
the method {@code  registerOutParameter}
should be used for a user-defined or {@code REF} output parameter.
Examples
of user-defined types include: {@code STRUCT}, {@code DISTINCT},
{@code JAVA_OBJECT}, and named array types.
<p>
All OUT parameters must be registered
before a stored procedure is executed.
<p>  For a user-defined parameter, the fully-qualified SQL
type name of the parameter should also be given, while a {@code REF}
parameter requires that the fully-qualified type name of the
referenced type be given.  A JDBC driver that does not need the
type code and type name information may ignore it.   To be portable,
however, applications should always provide these values for
user-defined and {@code REF} parameters.

Although it is intended for user-defined and {@code REF} parameters,
this method may be used to register a parameter of any JDBC type.
If the parameter does not have a user-defined or {@code REF} type, the
<i>typeName</i> parameter is ignored.

<P><B>Note:</B> When reading the value of an out parameter, you
must use the getter method whose Java type corresponds to the
parameter's registered SQL type.
<P>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param parameterIndex the first parameter is 1, the second is 2,...
@param sqlType the JDBC type code defined by {@code SQLType} to use to
register the OUT Parameter.
@param typeName the fully-qualified name of an SQL structured type
@exception SQLException if the parameterIndex is not valid;
if a database access error occurs or
this method is called on a closed {@code CallableStatement}
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified sqlType
@see JDBCType
@see SQLType
@since 1.8
"
      end

      operation 8126722 "registerOutParameter"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "sqlType" type class_ref 1039746 // SQLType
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the OUT parameter named
<code>parameterName</code> to the JDBC type
{@code sqlType}.  All OUT parameters must be registered
before a stored procedure is executed.
<p>
The JDBC type specified by {@code sqlType} for an OUT
parameter determines the Java type that must be used
in the {@code get} method to read the value of that parameter.
<p>
If the JDBC type expected to be returned to this output parameter
is specific to this particular database, {@code sqlType}
should be {@code JDBCType.OTHER} or a {@code SQLType} that is supported
by the JDBC driver..  The method
{@link #getObject} retrieves the value.
<P>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param parameterName the name of the parameter
@param sqlType the JDBC type code defined by {@code SQLType} to use to
register the OUT Parameter.
If the parameter is of JDBC type {@code JDBCType.NUMERIC}
or {@code JDBCType.DECIMAL}, the version of
{@code  registerOutParameter} that accepts a scale value
should be used.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed {@code CallableStatement}
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified sqlType
or if the JDBC driver does not support
this method
@since 1.8
@see JDBCType
@see SQLType
"
      end

      operation 8126850 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "sqlType" type class_ref 1039746 // SQLType
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the parameter named
<code>parameterName</code> to be of JDBC type
{@code sqlType}.  All OUT parameters must be registered
before a stored procedure is executed.
<p>
The JDBC type specified by {@code sqlType} for an OUT
parameter determines the Java type that must be used
in the {@code get} method to read the value of that parameter.
<p>
This version of {@code  registerOutParameter} should be
used when the parameter is of JDBC type {@code JDBCType.NUMERIC}
or {@code JDBCType.DECIMAL}.
<P>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param parameterName the name of the parameter
@param sqlType the JDBC type code defined by {@code SQLType} to use to
register the OUT Parameter.
@param scale the desired number of digits to the right of the
decimal point.  It must be greater than or equal to zero.
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed {@code CallableStatement}
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified sqlType
or if the JDBC driver does not support
this method
@since 1.8
@see JDBCType
@see SQLType
"
      end

      operation 8126978 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "sqlType" type class_ref 1039746 // SQLType
	  param inout name "typeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the designated output parameter.  This version of
the method {@code  registerOutParameter}
should be used for a user-named or REF output parameter.  Examples
of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and
named array types.
<p>
All OUT parameters must be registered
before a stored procedure is executed.
</p>
For a user-named parameter the fully-qualified SQL
type name of the parameter should also be given, while a REF
parameter requires that the fully-qualified type name of the
referenced type be given.  A JDBC driver that does not need the
type code and type name information may ignore it.   To be portable,
however, applications should always provide these values for
user-named and REF parameters.

Although it is intended for user-named and REF parameters,
this method may be used to register a parameter of any JDBC type.
If the parameter does not have a user-named or REF type, the
typeName parameter is ignored.

<P><B>Note:</B> When reading the value of an out parameter, you
must use the {@code getXXX} method whose Java type XXX corresponds to the
parameter's registered SQL type.
<P>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param parameterName the name of the parameter
@param sqlType the JDBC type code defined by {@code SQLType} to use to
register the OUT Parameter.
@param typeName the fully-qualified name of an SQL structured type
@exception SQLException if parameterName does not correspond to a named
parameter; if a database access error occurs or
this method is called on a closed {@code CallableStatement}
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified sqlType
or if the JDBC driver does not support this method
@see JDBCType
@see SQLType
@since 1.8
"
      end
    end

    class 1037826 "PreparedStatement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that represents a precompiled SQL statement.
<P>A SQL statement is precompiled and stored in a
<code>PreparedStatement</code> object. This object can then be used to
efficiently execute this statement multiple times.

<P><B>Note:</B> The setter methods (<code>setShort</code>, <code>setString</code>,
and so on) for setting IN parameter values
must specify types that are compatible with the defined SQL type of
the input parameter. For instance, if the IN parameter has SQL type
<code>INTEGER</code>, then the method <code>setInt</code> should be used.

<p>If arbitrary parameter type conversions are required, the method
<code>setObject</code> should be used with a target SQL type.
<P>
In the following example of setting a parameter, <code>con</code> represents
an active connection:
<PRE>
  PreparedStatement pstmt = con.prepareStatement(\"UPDATE EMPLOYEES
                                    SET SALARY = ? WHERE ID = ?\");
  pstmt.setBigDecimal(1, 153833.00)
  pstmt.setInt(2, 110592)
</PRE>

@see Connection#prepareStatement
@see ResultSet
"
      classrelation 3398530 // <generalisation>
	relation 3398530 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3398530 // <generalisation>
	  b parent class_ref 1037954 // Statement
      end

      operation 8104194 "executeQuery"
	public return_type class_ref 1037314 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the SQL query in this <code>PreparedStatement</code> object
and returns the <code>ResultSet</code> object generated by the query.

@return a <code>ResultSet</code> object that contains the data produced by the
        query; never <code>null</code>
@exception SQLException if a database access error occurs;
this method is called on a closed  <code>PreparedStatement</code> or the SQL
           statement does not return a <code>ResultSet</code> object
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
"
      end

      operation 8104322 "executeUpdate"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the SQL statement in this <code>PreparedStatement</code> object,
which must be an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or
<code>DELETE</code>; or an SQL statement that returns nothing,
such as a DDL statement.

@return either (1) the row count for SQL Data Manipulation Language (DML) statements
        or (2) 0 for SQL statements that return nothing
@exception SQLException if a database access error occurs;
this method is called on a closed  <code>PreparedStatement</code>
or the SQL statement returns a <code>ResultSet</code> object
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
"
      end

      operation 8104450 "setNull"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to SQL <code>NULL</code>.

<P><B>Note:</B> You must specify the parameter's SQL type.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param sqlType the SQL type code defined in <code>java.sql.Types</code>
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@exception SQLFeatureNotSupportedException if <code>sqlType</code> is
a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
<code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
<code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
 <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
or  <code>STRUCT</code> data type and the JDBC driver does not support
this data type
"
      end

      operation 8104578 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>boolean</code> value.
The driver converts this
to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement;
if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8104706 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>byte</code> value.
The driver converts this
to an SQL <code>TINYINT</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8104834 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>short</code> value.
The driver converts this
to an SQL <code>SMALLINT</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8104962 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>int</code> value.
The driver converts this
to an SQL <code>INTEGER</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8105090 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>long</code> value.
The driver converts this
to an SQL <code>BIGINT</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8105218 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>float</code> value.
The driver converts this
to an SQL <code>REAL</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8105346 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>double</code> value.
The driver converts this
to an SQL <code>DOUBLE</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8105474 "setBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 145794 // BigDecimal
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.math.BigDecimal</code> value.
The driver converts this to an SQL <code>NUMERIC</code> value when
it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8105602 "setString"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>String</code> value.
The driver converts this
to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
(depending on the argument's
size relative to the driver's limits on <code>VARCHAR</code> values)
when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8105730 "setBytes"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java array of bytes.  The driver converts
this to an SQL <code>VARBINARY</code> or <code>LONGVARBINARY</code>
(depending on the argument's size relative to the driver's limits on
<code>VARBINARY</code> values) when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8105858 "setDate"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038466 // Date
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code> value
using the default time zone of the virtual machine that is running
the application.
The driver converts this
to an SQL <code>DATE</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8105986 "setTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038594 // Time
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code> value.
The driver converts this
to an SQL <code>TIME</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8106114 "setTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038722 // Timestamp
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.
The driver
converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the
database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>     "
      end

      operation 8106242 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have
the specified number of bytes.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the Java input stream that contains the ASCII parameter value
@param length the number of bytes in the stream
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8106370 "setUnicodeStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which
will have the specified number of bytes.

When a very large Unicode value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the
stream as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from Unicode to the database char format.

The byte format of the Unicode stream must be a Java UTF-8, as defined in the
Java Virtual Machine Specification.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x a <code>java.io.InputStream</code> object that contains the
       Unicode parameter value
@param length the number of bytes in the stream
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@deprecated Use {@code setCharacterStream}
"
      end

      operation 8106498 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have
the specified number of bytes.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the
stream as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the java input stream which contains the binary parameter value
@param length the number of bytes in the stream
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8106626 "clearParameters"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the current parameter values immediately.
<P>In general, parameter values remain in force for repeated use of a
statement. Setting a parameter value automatically clears its
previous value.  However, in some cases it is useful to immediately
release the resources used by the current parameter values; this can
be done by calling the method <code>clearParameters</code>.

@exception SQLException if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
"
      end

      operation 8106754 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	  param in name "targetSqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------------
 Advanced features:

Sets the value of the designated parameter with the given object.

This method is similar to {@link #setObject(int parameterIndex,
Object x, int targetSqlType, int scaleOrLength)},
except that it assumes a scale of zero.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in java.sql.Types) to be
                     sent to the database
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or this
method is called on a closed PreparedStatement
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified targetSqlType
@see Types
"
      end

      operation 8106882 "setObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Sets the value of the designated parameter using the given object.

<p>The JDBC specification specifies a standard mapping from
Java <code>Object</code> types to SQL types.  The given argument
will be converted to the corresponding SQL type before being
sent to the database.

<p>Note that this method may be used to pass datatabase-
specific abstract data types, by using a driver-specific Java
type.

If the object is of a class implementing the interface <code>SQLData</code>,
the JDBC driver should call the method <code>SQLData.writeSQL</code>
to write it to the SQL data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
 <code>Struct</code>, <code>java.net.URL</code>, <code>RowId</code>, <code>SQLXML</code>
or <code>Array</code>, the driver should pass it to the database as a
value of the corresponding SQL type.
<P>
<b>Note:</b> Not all databases allow for a non-typed Null to be sent to
the backend. For maximum portability, the <code>setNull</code> or the
<code>setObject(int parameterIndex, Object x, int sqlType)</code>
method should be used
instead of <code>setObject(int parameterIndex, Object x)</code>.
<p>
<b>Note:</b> This method throws an exception if there is an ambiguity, for example, if the
object is of a class implementing more than one of the interfaces named above.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the object containing the input parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs;
 this method is called on a closed <code>PreparedStatement</code>
or the type of the given object is ambiguous
"
      end

      operation 8107010 "execute"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the SQL statement in this <code>PreparedStatement</code> object,
which may be any kind of SQL statement.
Some prepared statements return multiple results; the <code>execute</code>
method handles these complex statements as well as the simpler
form of statements handled by the methods <code>executeQuery</code>
and <code>executeUpdate</code>.
<P>
The <code>execute</code> method returns a <code>boolean</code> to
indicate the form of the first result.  You must call either the method
<code>getResultSet</code> or <code>getUpdateCount</code>
to retrieve the result; you must call <code>getMoreResults</code> to
move to any subsequent result(s).

@return <code>true</code> if the first result is a <code>ResultSet</code>
        object; <code>false</code> if the first result is an update
        count or there is no result
@exception SQLException if a database access error occurs;
this method is called on a closed <code>PreparedStatement</code>
or an argument is supplied to this method
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
@see Statement#execute
@see Statement#getResultSet
@see Statement#getUpdateCount
@see Statement#getMoreResults

"
      end

      operation 8107138 "addBatch"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------

Adds a set of parameters to this <code>PreparedStatement</code>
object's batch of commands.

@exception SQLException if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@see Statement#addBatch
@since 1.2
"
      end

      operation 8107266 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Reader</code>
object, which is the given number of characters long.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param reader the <code>java.io.Reader</code> object that contains the
       Unicode data
@param length the number of characters in the stream
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@since 1.2
"
      end

      operation 8107394 "setRef"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038850 // Ref
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given
 <code>REF(&lt;structured-type&gt;)</code> value.
The driver converts this to an SQL <code>REF</code> value when it
sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x an SQL <code>REF</code> value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.2
"
      end

      operation 8107522 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1037570 // Blob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Blob</code> object.
The driver converts this to an SQL <code>BLOB</code> value when it
sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.2
"
      end

      operation 8107650 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038978 // Clob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Clob</code> object.
The driver converts this to an SQL <code>CLOB</code> value when it
sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.2
"
      end

      operation 8107778 "setArray"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1037058 // Array
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Array</code> object.
The driver converts this to an SQL <code>ARRAY</code> value when it
sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x an <code>Array</code> object that maps an SQL <code>ARRAY</code> value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.2
"
      end

      operation 8107906 "getMetaData"
	public return_type class_ref 1039106 // ResultSetMetaData
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a <code>ResultSetMetaData</code> object that contains
information about the columns of the <code>ResultSet</code> object
that will be returned when this <code>PreparedStatement</code> object
is executed.
<P>
Because a <code>PreparedStatement</code> object is precompiled, it is
possible to know about the <code>ResultSet</code> object that it will
return without having to execute it.  Consequently, it is possible
to invoke the method <code>getMetaData</code> on a
<code>PreparedStatement</code> object rather than waiting to execute
it and then invoking the <code>ResultSet.getMetaData</code> method
on the <code>ResultSet</code> object that is returned.
<P>
<B>NOTE:</B> Using this method may be expensive for some drivers due
to the lack of underlying DBMS support.

@return the description of a <code>ResultSet</code> object's columns or
        <code>null</code> if the driver cannot return a
        <code>ResultSetMetaData</code> object
@exception SQLException if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8108034 "setDate"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038466 // Date
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,
which the driver then sends to the database.  With
a <code>Calendar</code> object, the driver can calculate the date
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the date
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@since 1.2
"
      end

      operation 8108162 "setTime"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038594 // Time
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,
which the driver then sends to the database.  With
a <code>Calendar</code> object, the driver can calculate the time
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the time
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@since 1.2
"
      end

      operation 8108290 "setTimestamp"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038722 // Timestamp
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,
which the driver then sends to the database.  With a
 <code>Calendar</code> object, the driver can calculate the timestamp
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the timestamp
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@since 1.2
"
      end

      operation 8108418 "setNull"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to SQL <code>NULL</code>.
This version of the method <code>setNull</code> should
be used for user-defined types and REF type parameters.  Examples
of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
named array types.

<P><B>Note:</B> To be portable, applications must give the
SQL type code and the fully-qualified SQL type name when specifying
a NULL user-defined or REF parameter.  In the case of a user-defined type
the name is the type name of the parameter itself.  For a REF
parameter, the name is the type name of the referenced type.  If
a JDBC driver does not need the type code or type name information,
it may ignore it.

Although it is intended for user-defined and Ref parameters,
this method may be used to set a null parameter of any JDBC type.
If the parameter does not have a user-defined or REF type, the given
typeName is ignored.


@param parameterIndex the first parameter is 1, the second is 2, ...
@param sqlType a value from <code>java.sql.Types</code>
@param typeName the fully-qualified name of an SQL user-defined type;
 ignored if the parameter is not a user-defined type or REF
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@exception SQLFeatureNotSupportedException if <code>sqlType</code> is
a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
<code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
<code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
 <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
or  <code>STRUCT</code> data type and the JDBC driver does not support
this data type or if the JDBC driver does not support this method
@since 1.2
"
      end

      operation 8108546 "setURL"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 243458 // URL
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------- JDBC 3.0 -----------------------------------

Sets the designated parameter to the given <code>java.net.URL</code> value.
The driver converts this to an SQL <code>DATALINK</code> value
when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the <code>java.net.URL</code> object to be set
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.4
"
      end

      operation 8108674 "getParameterMetaData"
	public return_type class_ref 1039234 // ParameterMetaData
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number, types and properties of this
<code>PreparedStatement</code> object's parameters.

@return a <code>ParameterMetaData</code> object that contains information
        about the number, types and properties for each
 parameter marker of this <code>PreparedStatement</code> object
@exception SQLException if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@see ParameterMetaData
@since 1.4
"
      end

      operation 8108802 "setRowId"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1039362 // RowId
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------- JDBC 4.0 -----------------------------------

Sets the designated parameter to the given <code>java.sql.RowId</code> object. The
driver converts this to a SQL <code>ROWID</code> value when it sends it
to the database

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 8108930 "setNString"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>String</code> object.
The driver converts this to a SQL <code>NCHAR</code> or
<code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value
(depending on the argument's
size relative to the driver's limits on <code>NVARCHAR</code> values)
when it sends it to the database.

@param parameterIndex of the first parameter is 1, the second is 2, ...
@param value the parameter value
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; if a database access error occurs; or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8109058 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "value" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object. The
<code>Reader</code> reads the data till end-of-file is reached. The
driver does the necessary conversion from Java character format to
the national character set in the database.
@param parameterIndex of the first parameter is 1, the second is 2, ...
@param value the parameter value
@param length the number of characters in the parameter data.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; if a database access error occurs; or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8109186 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "value" type class_ref 1039490 // NClob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>java.sql.NClob</code> object. The driver converts this to a
SQL <code>NCLOB</code> value when it sends it to the database.
@param parameterIndex of the first parameter is 1, the second is 2, ...
@param value the parameter value
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; if a database access error occurs; or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8109314 "setClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>PreparedStatement</code> is executed.
This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>
@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs; this method is called on
a closed <code>PreparedStatement</code> or if the length specified is less than zero.

@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8109442 "setBlob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>InputStream</code> object.  The inputstream must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>PreparedStatement</code> is executed.
This method differs from the <code>setBinaryStream (int, InputStream, int)</code>
method because it informs the driver that the parameter value should be
sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
the driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>
@param parameterIndex index of the first parameter is 1,
the second is 2, ...
@param inputStream An object that contains the data to set the parameter
value to.
@param length the number of bytes in the parameter data.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs;
this method is called on a closed <code>PreparedStatement</code>;
 if the length specified
is less than zero or if the number of bytes in the inputstream does not match
the specified length.
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 8109570 "setNClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>PreparedStatement</code> is executed.
This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if the length specified is less than zero;
if the driver does not support national character sets;
if the driver can detect that a data conversion
 error could occur;  if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 8109698 "setSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "xmlObject" type class_ref 1039618 // SQLXML
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.SQLXML</code> object.
The driver converts this to an
SQL <code>XML</code> value when it sends it to the database.
<p>

@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param xmlObject a <code>SQLXML</code> object that maps an SQL <code>XML</code> value
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs;
 this method is called on a closed <code>PreparedStatement</code>
or the <code>java.xml.transform.Result</code>,
 <code>Writer</code> or <code>OutputStream</code> has not been closed for
the <code>SQLXML</code> object
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 8109826 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	  param in name "targetSqlType" explicit_type "int"
	  param in name "scaleOrLength" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Sets the value of the designated parameter with the given object.

If the second argument is an <code>InputStream</code> then the stream must contain
the number of bytes specified by scaleOrLength.  If the second argument is a
<code>Reader</code> then the reader must contain the number of characters specified
by scaleOrLength. If these conditions are not true the driver will generate a
<code>SQLException</code> when the prepared statement is executed.

<p>The given Java object will be converted to the given targetSqlType
before being sent to the database.

If the object has a custom mapping (is of a class implementing the
interface <code>SQLData</code>),
the JDBC driver should call the method <code>SQLData.writeSQL</code> to
write it to the SQL data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
 <code>Struct</code>, <code>java.net.URL</code>,
or <code>Array</code>, the driver should pass it to the database as a
value of the corresponding SQL type.

<p>Note that this method may be used to pass database-specific
abstract data types.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in java.sql.Types) to be
sent to the database. The scale argument may further qualify this type.
@param scaleOrLength for <code>java.sql.Types.DECIMAL</code>
         or <code>java.sql.Types.NUMERIC types</code>,
         this is the number of digits after the decimal point. For
         Java Object types <code>InputStream</code> and <code>Reader</code>,
         this is the length
         of the data in the stream or reader.  For all other types,
         this value will be ignored.
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs;
this method is called on a closed <code>PreparedStatement</code> or
           if the Java Object specified by x is an InputStream
           or Reader object and the value of the scale parameter is less
           than zero
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified targetSqlType
@see Types

"
      end

      operation 8109954 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have
the specified number of bytes.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the Java input stream that contains the ASCII parameter value
@param length the number of bytes in the stream
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@since 1.6
"
      end

      operation 8110082 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have
the specified number of bytes.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the
stream as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the java input stream which contains the binary parameter value
@param length the number of bytes in the stream
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@since 1.6
"
      end

      operation 8110210 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Reader</code>
object, which is the given number of characters long.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param reader the <code>java.io.Reader</code> object that contains the
       Unicode data
@param length the number of characters in the stream
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@since 1.6
"
      end

      operation 8110338 "setAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----

Sets the designated parameter to the given input stream.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setAsciiStream</code> which takes a length parameter.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the Java input stream that contains the ASCII parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8110466 "setBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the
stream as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setBinaryStream</code> which takes a length parameter.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the java input stream which contains the binary parameter value
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8110594 "setCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Reader</code>
object.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setCharacterStream</code> which takes a length parameter.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param reader the <code>java.io.Reader</code> object that contains the
       Unicode data
@exception SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8110722 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "value" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object. The
<code>Reader</code> reads the data till end-of-file is reached. The
driver does the necessary conversion from Java character format to
the national character set in the database.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setNCharacterStream</code> which takes a length parameter.

@param parameterIndex of the first parameter is 1, the second is 2, ...
@param value the parameter value
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; if a database access error occurs; or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8110850 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.
This method differs from the <code>setCharacterStream (int, Reader)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setClob</code> which takes a length parameter.

@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs; this method is called on
a closed <code>PreparedStatement</code>or if parameterIndex does not correspond to a parameter
marker in the SQL statement

@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 8110978 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>InputStream</code> object.
This method differs from the <code>setBinaryStream (int, InputStream)</code>
method because it informs the driver that the parameter value should be
sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
the driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setBlob</code> which takes a length parameter.

@param parameterIndex index of the first parameter is 1,
the second is 2, ...
@param inputStream An object that contains the data to set the parameter
value to.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if a database access error occurs;
this method is called on a closed <code>PreparedStatement</code> or
if parameterIndex does not correspond
to a parameter marker in the SQL statement,
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 8111106 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.
This method differs from the <code>setCharacterStream (int, Reader)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setNClob</code> which takes a length parameter.

@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement;
if the driver does not support national character sets;
if the driver can detect that a data conversion
 error could occur;  if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 8111234 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "targetSqlType" type class_ref 1039746 // SQLType
	  param in name "scaleOrLength" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------- JDBC 4.2 -----------------------------------

<p>Sets the value of the designated parameter with the given object.

If the second argument is an {@code InputStream} then the stream
must contain the number of bytes specified by scaleOrLength.
If the second argument is a {@code Reader} then the reader must
contain the number of characters specified by scaleOrLength. If these
conditions are not true the driver will generate a
{@code SQLException} when the prepared statement is executed.

<p>The given Java object will be converted to the given targetSqlType
before being sent to the database.

If the object has a custom mapping (is of a class implementing the
interface {@code SQLData}),
the JDBC driver should call the method {@code SQLData.writeSQL} to
write it to the SQL data stream.
If, on the other hand, the object is of a class implementing
{@code Ref}, {@code Blob}, {@code Clob},  {@code NClob},
 {@code Struct}, {@code java.net.URL},
or {@code Array}, the driver should pass it to the database as a
value of the corresponding SQL type.

<p>Note that this method may be used to pass database-specific
abstract data types.
<P>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the object containing the input parameter value
@param targetSqlType the SQL type to be sent to the database. The
scale argument may further qualify this type.
@param scaleOrLength for {@code java.sql.JDBCType.DECIMAL}
         or {@code java.sql.JDBCType.NUMERIC types},
         this is the number of digits after the decimal point. For
         Java Object types {@code InputStream} and {@code Reader},
         this is the length
         of the data in the stream or reader.  For all other types,
         this value will be ignored.
@exception SQLException if parameterIndex does not correspond to a
parameter marker in the SQL statement; if a database access error occurs
or this method is called on a closed {@code PreparedStatement}  or
           if the Java Object specified by x is an InputStream
           or Reader object and the value of the scale parameter is less
           than zero
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified targetSqlType
@see JDBCType
@see SQLType
@since 1.8
"
      end

      operation 8111362 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "targetSqlType" type class_ref 1039746 // SQLType
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object.

This method is similar to {@link #setObject(int parameterIndex,
Object x, SQLType targetSqlType, int scaleOrLength)},
except that it assumes a scale of zero.
<P>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the object containing the input parameter value
@param targetSqlType the SQL type to be sent to the database
@exception SQLException if parameterIndex does not correspond to a
parameter marker in the SQL statement; if a database access error occurs
or this method is called on a closed {@code PreparedStatement}
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support the specified targetSqlType
@see JDBCType
@see SQLType
@since 1.8
"
      end

      operation 8111490 "executeLargeUpdate"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the SQL statement in this <code>PreparedStatement</code> object,
which must be an SQL Data Manipulation Language (DML) statement,
such as <code>INSERT</code>, <code>UPDATE</code> or
<code>DELETE</code>; or an SQL statement that returns nothing,
such as a DDL statement.
<p>
This method should be used when the returned row count may exceed
{@link Integer#MAX_VALUE}.
<p>
The default implementation will throw {@code UnsupportedOperationException}

@return either (1) the row count for SQL Data Manipulation Language
(DML) statements or (2) 0 for SQL statements that return nothing
@exception SQLException if a database access error occurs;
this method is called on a closed  <code>PreparedStatement</code>
or the SQL statement returns a <code>ResultSet</code> object
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
@since 1.8
"
      end
    end

    class 1037954 "Statement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P>The object used for executing a static SQL statement
and returning the results it produces.
<P>
By default, only one <code>ResultSet</code> object per <code>Statement</code>
object can be open at the same time. Therefore, if the reading of one
<code>ResultSet</code> object is interleaved
with the reading of another, each must have been generated by
different <code>Statement</code> objects. All execution methods in the
<code>Statement</code> interface implicitly close a current
<code>ResultSet</code> object of the statement if an open one exists.

@see Connection#createStatement
@see ResultSet
"
      classrelation 3398274 // <generalisation>
	relation 3398274 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3398274 // <generalisation>
	  b parent class_ref 1038082 // Wrapper
      end

      classrelation 3398402 // <generalisation>
	relation 3398402 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3398402 // <generalisation>
	  b parent class_ref 146690 // AutoCloseable
      end

      operation 8097794 "executeQuery"
	public return_type class_ref 1037314 // ResultSet
	nparams 1
	  param inout name "sql" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement, which returns a single
<code>ResultSet</code> object.
<p>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
@param sql an SQL statement to be sent to the database, typically a
       static SQL <code>SELECT</code> statement
@return a <code>ResultSet</code> object that contains the data produced
        by the given query; never <code>null</code>
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>, the given
           SQL statement produces anything other than a single
           <code>ResultSet</code> object, the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
"
      end

      operation 8097922 "executeUpdate"
	public explicit_return_type "int"
	nparams 1
	  param inout name "sql" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement, which may be an <code>INSERT</code>,
<code>UPDATE</code>, or <code>DELETE</code> statement or an
SQL statement that returns nothing, such as an SQL DDL statement.
<p>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
@param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or
<code>DELETE</code>; or an SQL statement that returns nothing,
such as a DDL statement.

@return either (1) the row count for SQL Data Manipulation Language (DML) statements
        or (2) 0 for SQL statements that return nothing

@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>, the given
SQL statement produces a <code>ResultSet</code> object, the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
"
      end

      operation 8098050 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases this <code>Statement</code> object's database
and JDBC resources immediately instead of waiting for
this to happen when it is automatically closed.
It is generally good practice to release resources as soon as
you are finished with them to avoid tying up database
resources.
<P>
Calling the method <code>close</code> on a <code>Statement</code>
object that is already closed has no effect.
<P>
<B>Note:</B>When a <code>Statement</code> object is
closed, its current <code>ResultSet</code> object, if one exists, is
also closed.

@exception SQLException if a database access error occurs
"
      end

      operation 8098178 "getMaxFieldSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------------

Retrieves the maximum number of bytes that can be
returned for character and binary column values in a <code>ResultSet</code>
object produced by this <code>Statement</code> object.
This limit applies only to  <code>BINARY</code>, <code>VARBINARY</code>,
<code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,
<code>NCHAR</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>
and <code>LONGVARCHAR</code> columns.  If the limit is exceeded, the
excess data is silently discarded.

@return the current column size limit for columns storing character and
        binary values; zero means there is no limit
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@see #setMaxFieldSize
"
      end

      operation 8098306 "setMaxFieldSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the limit for the maximum number of bytes that can be returned for
character and binary column values in a <code>ResultSet</code>
object produced by this <code>Statement</code> object.

This limit applies
only to <code>BINARY</code>, <code>VARBINARY</code>,
<code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,
<code>NCHAR</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code> and
<code>LONGVARCHAR</code> fields.  If the limit is exceeded, the excess data
is silently discarded. For maximum portability, use values
greater than 256.

@param max the new column size limit in bytes; zero means there is no limit
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>
           or the condition {@code max >= 0} is not satisfied
@see #getMaxFieldSize
"
      end

      operation 8098434 "getMaxRows"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of rows that a
<code>ResultSet</code> object produced by this
<code>Statement</code> object can contain.  If this limit is exceeded,
the excess rows are silently dropped.

@return the current maximum number of rows for a <code>ResultSet</code>
        object produced by this <code>Statement</code> object;
        zero means there is no limit
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@see #setMaxRows
"
      end

      operation 8098562 "setMaxRows"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the limit for the maximum number of rows that any
<code>ResultSet</code> object  generated by this <code>Statement</code>
object can contain to the given number.
If the limit is exceeded, the excess
rows are silently dropped.

@param max the new max rows limit; zero means there is no limit
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>
           or the condition {@code max >= 0} is not satisfied
@see #getMaxRows
"
      end

      operation 8098690 "setEscapeProcessing"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets escape processing on or off.
If escape scanning is on (the default), the driver will do
escape substitution before sending the SQL statement to the database.
<p>
The {@code Connection} and {@code DataSource} property
{@code escapeProcessing} may be used to change the default escape processing
behavior.  A value of true (the default) enables escape Processing for
all {@code Statement} objects. A value of false disables escape processing
for all {@code Statement} objects.  The {@code setEscapeProcessing}
method may be used to specify the escape processing behavior for an
individual {@code Statement} object.
<p>
Note: Since prepared statements have usually been parsed prior
to making this call, disabling escape processing for
<code>PreparedStatements</code> objects will have no effect.

@param enable <code>true</code> to enable escape processing;
      <code>false</code> to disable it
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
"
      end

      operation 8098818 "getQueryTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of seconds the driver will
wait for a <code>Statement</code> object to execute.
If the limit is exceeded, a
<code>SQLException</code> is thrown.

@return the current query timeout limit in seconds; zero means there is
        no limit
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@see #setQueryTimeout
"
      end

      operation 8098946 "setQueryTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the number of seconds the driver will wait for a
<code>Statement</code> object to execute to the given number of seconds.
By default there is no limit on the amount of time allowed for a running
statement to complete. If the limit is exceeded, an
<code>SQLTimeoutException</code> is thrown.
A JDBC driver must apply this limit to the <code>execute</code>,
<code>executeQuery</code> and <code>executeUpdate</code> methods.
<p>
<strong>Note:</strong> JDBC driver implementations may also apply this
limit to {@code ResultSet} methods
(consult your driver vendor documentation for details).
<p>
<strong>Note:</strong> In the case of {@code Statement} batching, it is
implementation defined as to whether the time-out is applied to
individual SQL commands added via the {@code addBatch} method or to
the entire batch of SQL commands invoked by the {@code executeBatch}
method (consult your driver vendor documentation for details).

@param seconds the new query timeout limit in seconds; zero means
       there is no limit
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>
           or the condition {@code seconds >= 0} is not satisfied
@see #getQueryTimeout
"
      end

      operation 8099074 "cancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels this <code>Statement</code> object if both the DBMS and
driver support aborting an SQL statement.
This method can be used by one thread to cancel a statement that
is being executed by another thread.

@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
"
      end

      operation 8099202 "getWarnings"
	public return_type class_ref 1038210 // SQLWarning
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the first warning reported by calls on this <code>Statement</code> object.
Subsequent <code>Statement</code> object warnings will be chained to this
<code>SQLWarning</code> object.

<p>The warning chain is automatically cleared each time
a statement is (re)executed. This method may not be called on a closed
<code>Statement</code> object; doing so will cause an <code>SQLException</code>
to be thrown.

<P><B>Note:</B> If you are processing a <code>ResultSet</code> object, any
warnings associated with reads on that <code>ResultSet</code> object
will be chained on it rather than on the <code>Statement</code>
object that produced it.

@return the first <code>SQLWarning</code> object or <code>null</code>
        if there are no warnings
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
"
      end

      operation 8099330 "clearWarnings"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears all the warnings reported on this <code>Statement</code>
object. After a call to this method,
the method <code>getWarnings</code> will return
<code>null</code> until a new warning is reported for this
<code>Statement</code> object.

@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
"
      end

      operation 8099458 "setCursorName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the SQL cursor name to the given <code>String</code>, which
will be used by subsequent <code>Statement</code> object
<code>execute</code> methods. This name can then be
used in SQL positioned update or delete statements to identify the
current row in the <code>ResultSet</code> object generated by this
statement.  If the database does not support positioned update/delete,
this method is a noop.  To insure that a cursor has the proper isolation
level to support updates, the cursor's <code>SELECT</code> statement
should have the form <code>SELECT FOR UPDATE</code>.  If
<code>FOR UPDATE</code> is not present, positioned updates may fail.

<P><B>Note:</B> By definition, the execution of positioned updates and
deletes must be done by a different <code>Statement</code> object than
the one that generated the <code>ResultSet</code> object being used for
positioning. Also, cursor names must be unique within a connection.

@param name the new cursor name, which must be unique within
            a connection
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
"
      end

      operation 8099586 "execute"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "sql" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------- Multiple Results --------------------------

Executes the given SQL statement, which may return multiple results.
In some (uncommon) situations, a single SQL statement may return
multiple result sets and/or update counts.  Normally you can ignore
this unless you are (1) executing a stored procedure that you know may
return multiple results or (2) you are dynamically executing an
unknown SQL string.
<P>
The <code>execute</code> method executes an SQL statement and indicates the
form of the first result.  You must then use the methods
<code>getResultSet</code> or <code>getUpdateCount</code>
to retrieve the result, and <code>getMoreResults</code> to
move to any subsequent result(s).
<p>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
@param sql any SQL statement
@return <code>true</code> if the first result is a <code>ResultSet</code>
        object; <code>false</code> if it is an update count or there are
        no results
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>,
the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
@see #getResultSet
@see #getUpdateCount
@see #getMoreResults
"
      end

      operation 8099714 "getResultSet"
	public return_type class_ref 1037314 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieves the current result as a <code>ResultSet</code> object.
 This method should be called only once per result.

@return the current result as a <code>ResultSet</code> object or
<code>null</code> if the result is an update count or there are no more results
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@see #execute
"
      end

      operation 8099842 "getUpdateCount"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieves the current result as an update count;
 if the result is a <code>ResultSet</code> object or there are no more results, -1
 is returned. This method should be called only once per result.

@return the current result as an update count; -1 if the current result is a
<code>ResultSet</code> object or there are no more results
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@see #execute
"
      end

      operation 8099970 "getMoreResults"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves to this <code>Statement</code> object's next result, returns
<code>true</code> if it is a <code>ResultSet</code> object, and
implicitly closes any current <code>ResultSet</code>
object(s) obtained with the method <code>getResultSet</code>.

<P>There are no more results when the following is true:
<PRE>{@code
    // stmt is a Statement object
    ((stmt.getMoreResults() == false) && (stmt.getUpdateCount() == -1))
}</PRE>

@return <code>true</code> if the next result is a <code>ResultSet</code>
        object; <code>false</code> if it is an update count or there are
        no more results
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@see #execute
"
      end

      operation 8100098 "setFetchDirection"
	public explicit_return_type "void"
	nparams 1
	  param in name "direction" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------

Gives the driver a hint as to the direction in which
rows will be processed in <code>ResultSet</code>
objects created using this <code>Statement</code> object.  The
default value is <code>ResultSet.FETCH_FORWARD</code>.
<P>
Note that this method sets the default fetch direction for
result sets generated by this <code>Statement</code> object.
Each result set has its own methods for getting and setting
its own fetch direction.

@param direction the initial direction for processing rows
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>
or the given direction
is not one of <code>ResultSet.FETCH_FORWARD</code>,
<code>ResultSet.FETCH_REVERSE</code>, or <code>ResultSet.FETCH_UNKNOWN</code>
@since 1.2
@see #getFetchDirection
"
      end

      operation 8100226 "getFetchDirection"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the direction for fetching rows from
database tables that is the default for result sets
generated from this <code>Statement</code> object.
If this <code>Statement</code> object has not set
a fetch direction by calling the method <code>setFetchDirection</code>,
the return value is implementation-specific.

@return the default fetch direction for result sets generated
         from this <code>Statement</code> object
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@since 1.2
@see #setFetchDirection
"
      end

      operation 8100354 "setFetchSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "rows" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gives the JDBC driver a hint as to the number of rows that should
be fetched from the database when more rows are needed for
<code>ResultSet</code> objects generated by this <code>Statement</code>.
If the value specified is zero, then the hint is ignored.
The default value is zero.

@param rows the number of rows to fetch
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code> or the
       condition {@code rows >= 0} is not satisfied.
@since 1.2
@see #getFetchSize
"
      end

      operation 8100482 "getFetchSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of result set rows that is the default
fetch size for <code>ResultSet</code> objects
generated from this <code>Statement</code> object.
If this <code>Statement</code> object has not set
a fetch size by calling the method <code>setFetchSize</code>,
the return value is implementation-specific.

@return the default fetch size for result sets generated
         from this <code>Statement</code> object
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@since 1.2
@see #setFetchSize
"
      end

      operation 8100610 "getResultSetConcurrency"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the result set concurrency for <code>ResultSet</code> objects
generated by this <code>Statement</code> object.

@return either <code>ResultSet.CONCUR_READ_ONLY</code> or
<code>ResultSet.CONCUR_UPDATABLE</code>
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@since 1.2
"
      end

      operation 8100738 "getResultSetType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the result set type for <code>ResultSet</code> objects
generated by this <code>Statement</code> object.

@return one of <code>ResultSet.TYPE_FORWARD_ONLY</code>,
<code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
<code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@since 1.2
"
      end

      operation 8100866 "addBatch"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sql" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the given SQL command to the current list of commands for this
<code>Statement</code> object. The commands in this list can be
executed as a batch by calling the method <code>executeBatch</code>.
<P>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
@param sql typically this is a SQL <code>INSERT</code> or
<code>UPDATE</code> statement
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>, the
driver does not support batch updates, the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@see #executeBatch
@see DatabaseMetaData#supportsBatchUpdates
@since 1.2
"
      end

      operation 8100994 "clearBatch"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empties this <code>Statement</code> object's current list of
SQL commands.
<P>
@exception SQLException if a database access error occurs,
 this method is called on a closed <code>Statement</code> or the
driver does not support batch updates
@see #addBatch
@see DatabaseMetaData#supportsBatchUpdates
@since 1.2
"
      end

      operation 8101122 "executeBatch"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a batch of commands to the database for execution and
if all commands execute successfully, returns an array of update counts.
The <code>int</code> elements of the array that is returned are ordered
to correspond to the commands in the batch, which are ordered
according to the order in which they were added to the batch.
The elements in the array returned by the method <code>executeBatch</code>
may be one of the following:
<OL>
<LI>A number greater than or equal to zero -- indicates that the
command was processed successfully and is an update count giving the
number of rows in the database that were affected by the command's
execution
<LI>A value of <code>SUCCESS_NO_INFO</code> -- indicates that the command was
processed successfully but that the number of rows affected is
unknown
<P>
If one of the commands in a batch update fails to execute properly,
this method throws a <code>BatchUpdateException</code>, and a JDBC
driver may or may not continue to process the remaining commands in
the batch.  However, the driver's behavior must be consistent with a
particular DBMS, either always continuing to process commands or never
continuing to process commands.  If the driver continues processing
after a failure, the array returned by the method
<code>BatchUpdateException.getUpdateCounts</code>
will contain as many elements as there are commands in the batch, and
at least one of the elements will be the following:

<LI>A value of <code>EXECUTE_FAILED</code> -- indicates that the command failed
to execute successfully and occurs only if a driver continues to
process commands after a command fails
</OL>
<P>
The possible implementations and return values have been modified in
the Java 2 SDK, Standard Edition, version 1.3 to
accommodate the option of continuing to process commands in a batch
update after a <code>BatchUpdateException</code> object has been thrown.

@return an array of update counts containing one element for each
command in the batch.  The elements of the array are ordered according
to the order in which commands were added to the batch.
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code> or the
driver does not support batch statements. Throws {@link BatchUpdateException}
(a subclass of <code>SQLException</code>) if one of the commands sent to the
database fails to execute properly or attempts to return a result set.
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}

@see #addBatch
@see DatabaseMetaData#supportsBatchUpdates
@since 1.2
"
      end

      operation 8101250 "getConnection"
	public return_type class_ref 1038338 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>Connection</code> object
that produced this <code>Statement</code> object.
@return the connection that produced this statement
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@since 1.2
"
      end

      attribute 1875714 "CLOSE_CURRENT_RESULT"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "--------------------------JDBC 3.0-----------------------------

The constant indicating that the current <code>ResultSet</code> object
should be closed when calling <code>getMoreResults</code>.

@since 1.4

"
      end

      attribute 1875842 "KEEP_CURRENT_RESULT"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that the current <code>ResultSet</code> object
should not be closed when calling <code>getMoreResults</code>.

@since 1.4

"
      end

      attribute 1875970 "CLOSE_ALL_RESULTS"
	public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that all <code>ResultSet</code> objects that
have previously been kept open should be closed when calling
<code>getMoreResults</code>.

@since 1.4

"
      end

      attribute 1876098 "SUCCESS_NO_INFO"
	public explicit_type "int"
	init_value " -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that a batch statement executed successfully
but that no count of the number of rows it affected is available.

@since 1.4

"
      end

      attribute 1876226 "EXECUTE_FAILED"
	public explicit_type "int"
	init_value " -3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that an error occurred while executing a
batch statement.

@since 1.4

"
      end

      attribute 1876354 "RETURN_GENERATED_KEYS"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that generated keys should be made
available for retrieval.

@since 1.4

"
      end

      attribute 1876482 "NO_GENERATED_KEYS"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that generated keys should not be made
available for retrieval.

@since 1.4

"
      end

      operation 8101378 "getMoreResults"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "current" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves to this <code>Statement</code> object's next result, deals with
any current <code>ResultSet</code> object(s) according  to the instructions
specified by the given flag, and returns
<code>true</code> if the next result is a <code>ResultSet</code> object.

<P>There are no more results when the following is true:
<PRE>{@code
    // stmt is a Statement object
    ((stmt.getMoreResults(current) == false) && (stmt.getUpdateCount() == -1))
}</PRE>

@param current one of the following <code>Statement</code>
       constants indicating what should happen to current
       <code>ResultSet</code> objects obtained using the method
       <code>getResultSet</code>:
       <code>Statement.CLOSE_CURRENT_RESULT</code>,
       <code>Statement.KEEP_CURRENT_RESULT</code>, or
       <code>Statement.CLOSE_ALL_RESULTS</code>
@return <code>true</code> if the next result is a <code>ResultSet</code>
        object; <code>false</code> if it is an update count or there are no
        more results
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code> or the argument
        supplied is not one of the following:
       <code>Statement.CLOSE_CURRENT_RESULT</code>,
       <code>Statement.KEEP_CURRENT_RESULT</code> or
       <code>Statement.CLOSE_ALL_RESULTS</code>
@exception SQLFeatureNotSupportedException if
<code>DatabaseMetaData.supportsMultipleOpenResults</code> returns
<code>false</code> and either
       <code>Statement.KEEP_CURRENT_RESULT</code> or
       <code>Statement.CLOSE_ALL_RESULTS</code> are supplied as
the argument.
@since 1.4
@see #execute
"
      end

      operation 8101506 "getGeneratedKeys"
	public return_type class_ref 1037314 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves any auto-generated keys created as a result of executing this
<code>Statement</code> object. If this <code>Statement</code> object did
not generate any keys, an empty <code>ResultSet</code>
object is returned.

<p><B>Note:</B>If the columns which represent the auto-generated keys were not specified,
the JDBC driver implementation will determine the columns which best represent the auto-generated keys.

@return a <code>ResultSet</code> object containing the auto-generated key(s)
        generated by the execution of this <code>Statement</code> object
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.4
"
      end

      operation 8101634 "executeUpdate"
	public explicit_return_type "int"
	nparams 2
	  param inout name "sql" type class_ref 128130 // String
	  param in name "autoGeneratedKeys" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement and signals the driver with the
given flag about whether the
auto-generated keys produced by this <code>Statement</code> object
should be made available for retrieval.  The driver will ignore the
flag if the SQL statement
is not an <code>INSERT</code> statement, or an SQL statement able to return
auto-generated keys (the list of such statements is vendor-specific).
<p>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
@param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or
<code>DELETE</code>; or an SQL statement that returns nothing,
such as a DDL statement.

@param autoGeneratedKeys a flag indicating whether auto-generated keys
       should be made available for retrieval;
        one of the following constants:
        <code>Statement.RETURN_GENERATED_KEYS</code>
        <code>Statement.NO_GENERATED_KEYS</code>
@return either (1) the row count for SQL Data Manipulation Language (DML) statements
        or (2) 0 for SQL statements that return nothing

@exception SQLException if a database access error occurs,
 this method is called on a closed <code>Statement</code>, the given
           SQL statement returns a <code>ResultSet</code> object,
           the given constant is not one of those allowed, the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method with a constant of Statement.RETURN_GENERATED_KEYS
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
@since 1.4
"
      end

      operation 8101762 "executeUpdate"
	public explicit_return_type "int"
	nparams 2
	  param inout name "sql" type class_ref 128130 // String
	  param inout name "columnIndexes" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement and signals the driver that the
auto-generated keys indicated in the given array should be made available
for retrieval.   This array contains the indexes of the columns in the
target table that contain the auto-generated keys that should be made
available. The driver will ignore the array if the SQL statement
is not an <code>INSERT</code> statement, or an SQL statement able to return
auto-generated keys (the list of such statements is vendor-specific).
<p>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
@param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or
<code>DELETE</code>; or an SQL statement that returns nothing,
such as a DDL statement.

@param columnIndexes an array of column indexes indicating the columns
       that should be returned from the inserted row
@return either (1) the row count for SQL Data Manipulation Language (DML) statements
        or (2) 0 for SQL statements that return nothing

@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>, the SQL
statement returns a <code>ResultSet</code> object,the second argument
supplied to this method is not an
<code>int</code> array whose elements are valid column indexes, the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
@since 1.4
"
      end

      operation 8101890 "executeUpdate"
	public explicit_return_type "int"
	nparams 2
	  param inout name "sql" type class_ref 128130 // String
	  param inout name "columnNames" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement and signals the driver that the
auto-generated keys indicated in the given array should be made available
for retrieval.   This array contains the names of the columns in the
target table that contain the auto-generated keys that should be made
available. The driver will ignore the array if the SQL statement
is not an <code>INSERT</code> statement, or an SQL statement able to return
auto-generated keys (the list of such statements is vendor-specific).
<p>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
@param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or
<code>DELETE</code>; or an SQL statement that returns nothing,
such as a DDL statement.
@param columnNames an array of the names of the columns that should be
       returned from the inserted row
@return either the row count for <code>INSERT</code>, <code>UPDATE</code>,
        or <code>DELETE</code> statements, or 0 for SQL statements
        that return nothing
@exception SQLException if a database access error occurs,
 this method is called on a closed <code>Statement</code>, the SQL
           statement returns a <code>ResultSet</code> object, the
           second argument supplied to this method is not a <code>String</code> array
           whose elements are valid column names, the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
@since 1.4
"
      end

      operation 8102018 "execute"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "sql" type class_ref 128130 // String
	  param in name "autoGeneratedKeys" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement, which may return multiple results,
and signals the driver that any
auto-generated keys should be made available
for retrieval.  The driver will ignore this signal if the SQL statement
is not an <code>INSERT</code> statement, or an SQL statement able to return
auto-generated keys (the list of such statements is vendor-specific).
<P>
In some (uncommon) situations, a single SQL statement may return
multiple result sets and/or update counts.  Normally you can ignore
this unless you are (1) executing a stored procedure that you know may
return multiple results or (2) you are dynamically executing an
unknown SQL string.
<P>
The <code>execute</code> method executes an SQL statement and indicates the
form of the first result.  You must then use the methods
<code>getResultSet</code> or <code>getUpdateCount</code>
to retrieve the result, and <code>getMoreResults</code> to
move to any subsequent result(s).
<p>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
@param sql any SQL statement
@param autoGeneratedKeys a constant indicating whether auto-generated
       keys should be made available for retrieval using the method
       <code>getGeneratedKeys</code>; one of the following constants:
       <code>Statement.RETURN_GENERATED_KEYS</code> or
       <code>Statement.NO_GENERATED_KEYS</code>
@return <code>true</code> if the first result is a <code>ResultSet</code>
        object; <code>false</code> if it is an update count or there are
        no results
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>, the second
        parameter supplied to this method is not
        <code>Statement.RETURN_GENERATED_KEYS</code> or
        <code>Statement.NO_GENERATED_KEYS</code>,
the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method with a constant of Statement.RETURN_GENERATED_KEYS
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
@see #getResultSet
@see #getUpdateCount
@see #getMoreResults
@see #getGeneratedKeys

@since 1.4
"
      end

      operation 8102146 "execute"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "sql" type class_ref 128130 // String
	  param inout name "columnIndexes" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement, which may return multiple results,
and signals the driver that the
auto-generated keys indicated in the given array should be made available
for retrieval.  This array contains the indexes of the columns in the
target table that contain the auto-generated keys that should be made
available.  The driver will ignore the array if the SQL statement
is not an <code>INSERT</code> statement, or an SQL statement able to return
auto-generated keys (the list of such statements is vendor-specific).
<P>
Under some (uncommon) situations, a single SQL statement may return
multiple result sets and/or update counts.  Normally you can ignore
this unless you are (1) executing a stored procedure that you know may
return multiple results or (2) you are dynamically executing an
unknown SQL string.
<P>
The <code>execute</code> method executes an SQL statement and indicates the
form of the first result.  You must then use the methods
<code>getResultSet</code> or <code>getUpdateCount</code>
to retrieve the result, and <code>getMoreResults</code> to
move to any subsequent result(s).
<p>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
@param sql any SQL statement
@param columnIndexes an array of the indexes of the columns in the
       inserted row that should be  made available for retrieval by a
       call to the method <code>getGeneratedKeys</code>
@return <code>true</code> if the first result is a <code>ResultSet</code>
        object; <code>false</code> if it is an update count or there
        are no results
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>, the
           elements in the <code>int</code> array passed to this method
           are not valid column indexes, the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
@see #getResultSet
@see #getUpdateCount
@see #getMoreResults

@since 1.4
"
      end

      operation 8102274 "execute"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "sql" type class_ref 128130 // String
	  param inout name "columnNames" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement, which may return multiple results,
and signals the driver that the
auto-generated keys indicated in the given array should be made available
for retrieval. This array contains the names of the columns in the
target table that contain the auto-generated keys that should be made
available.  The driver will ignore the array if the SQL statement
is not an <code>INSERT</code> statement, or an SQL statement able to return
auto-generated keys (the list of such statements is vendor-specific).
<P>
In some (uncommon) situations, a single SQL statement may return
multiple result sets and/or update counts.  Normally you can ignore
this unless you are (1) executing a stored procedure that you know may
return multiple results or (2) you are dynamically executing an
unknown SQL string.
<P>
The <code>execute</code> method executes an SQL statement and indicates the
form of the first result.  You must then use the methods
<code>getResultSet</code> or <code>getUpdateCount</code>
to retrieve the result, and <code>getMoreResults</code> to
move to any subsequent result(s).
<p>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
@param sql any SQL statement
@param columnNames an array of the names of the columns in the inserted
       row that should be made available for retrieval by a call to the
       method <code>getGeneratedKeys</code>
@return <code>true</code> if the next result is a <code>ResultSet</code>
        object; <code>false</code> if it is an update count or there
        are no more results
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>,the
         elements of the <code>String</code> array passed to this
         method are not valid column names, the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
@see #getResultSet
@see #getUpdateCount
@see #getMoreResults
@see #getGeneratedKeys

@since 1.4
"
      end

      operation 8102402 "getResultSetHoldability"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the result set holdability for <code>ResultSet</code> objects
generated by this <code>Statement</code> object.

@return either <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>

@since 1.4
"
      end

      operation 8102530 "isClosed"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this <code>Statement</code> object has been closed. A <code>Statement</code> is closed if the
method close has been called on it, or if it is automatically closed.
@return true if this <code>Statement</code> object is closed; false if it is still open
@throws SQLException if a database access error occurs
@since 1.6
"
      end

      operation 8102658 "setPoolable"
	public explicit_return_type "void"
	nparams 1
	  param inout name "poolable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that a <code>Statement</code> be pooled or not pooled.  The value
specified is a hint to the statement pool implementation indicating
whether the application wants the statement to be pooled.  It is up to
the statement pool manager as to whether the hint is used.
<p>
The poolable value of a statement is applicable to both internal
statement caches implemented by the driver and external statement caches
implemented by application servers and other applications.
<p>
By default, a <code>Statement</code> is not poolable when created, and
a <code>PreparedStatement</code> and <code>CallableStatement</code>
are poolable when created.
<p>
@param poolable              requests that the statement be pooled if true and
                                             that the statement not be pooled if false
<p>
@throws SQLException if this method is called on a closed
<code>Statement</code>
<p>
@since 1.6
"
      end

      operation 8102786 "isPoolable"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a  value indicating whether the <code>Statement</code>
is poolable or not.
<p>
@return              <code>true</code> if the <code>Statement</code>
is poolable; <code>false</code> otherwise
<p>
@throws SQLException if this method is called on a closed
<code>Statement</code>
<p>
@since 1.6
<p>
@see java.sql.Statement#setPoolable(boolean) setPoolable(boolean)
"
      end

      operation 8102914 "closeOnCompletion"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 4.1 -----------------------------

Specifies that this {@code Statement} will be closed when all its
dependent result sets are closed. If execution of the {@code Statement}
does not produce any result sets, this method has no effect.
<p>
<strong>Note:</strong> Multiple calls to {@code closeOnCompletion} do
not toggle the effect on this {@code Statement}. However, a call to
{@code closeOnCompletion} does effect both the subsequent execution of
statements, and statements that currently have open, dependent,
result sets.

@throws SQLException if this method is called on a closed
{@code Statement}
@since 1.7
"
      end

      operation 8103042 "isCloseOnCompletion"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a value indicating whether this {@code Statement} will be
closed when all its dependent result sets are closed.
@return {@code true} if the {@code Statement} will be closed when all
of its dependent result sets are closed; {@code false} otherwise
@throws SQLException if this method is called on a closed
{@code Statement}
@since 1.7
"
      end

      operation 8103170 "getLargeUpdateCount"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 4.2 -----------------------------

 Retrieves the current result as an update count; if the result
is a <code>ResultSet</code> object or there are no more results, -1
 is returned. This method should be called only once per result.
<p>
This method should be used when the returned row count may exceed
{@link Integer#MAX_VALUE}.
<p>
The default implementation will throw {@code UnsupportedOperationException}

@return the current result as an update count; -1 if the current result
is a <code>ResultSet</code> object or there are no more results
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@see #execute
@since 1.8
"
      end

      operation 8103298 "setLargeMaxRows"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the limit for the maximum number of rows that any
<code>ResultSet</code> object  generated by this <code>Statement</code>
object can contain to the given number.
If the limit is exceeded, the excess
rows are silently dropped.
<p>
This method should be used when the row limit may exceed
{@link Integer#MAX_VALUE}.
<p>
The default implementation will throw {@code UnsupportedOperationException}

@param max the new max rows limit; zero means there is no limit
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>
           or the condition {@code max >= 0} is not satisfied
@see #getMaxRows
@since 1.8
"
      end

      operation 8103426 "getLargeMaxRows"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of rows that a
<code>ResultSet</code> object produced by this
<code>Statement</code> object can contain.  If this limit is exceeded,
the excess rows are silently dropped.
<p>
This method should be used when the returned row limit may exceed
{@link Integer#MAX_VALUE}.
<p>
The default implementation will return {@code 0}

@return the current maximum number of rows for a <code>ResultSet</code>
        object produced by this <code>Statement</code> object;
        zero means there is no limit
@exception SQLException if a database access error occurs or
this method is called on a closed <code>Statement</code>
@see #setMaxRows
@since 1.8
"
      end

      operation 8103554 "executeLargeBatch"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a batch of commands to the database for execution and
if all commands execute successfully, returns an array of update counts.
The <code>long</code> elements of the array that is returned are ordered
to correspond to the commands in the batch, which are ordered
according to the order in which they were added to the batch.
The elements in the array returned by the method {@code executeLargeBatch}
may be one of the following:
<OL>
<LI>A number greater than or equal to zero -- indicates that the
command was processed successfully and is an update count giving the
number of rows in the database that were affected by the command's
execution
<LI>A value of <code>SUCCESS_NO_INFO</code> -- indicates that the command was
processed successfully but that the number of rows affected is
unknown
<P>
If one of the commands in a batch update fails to execute properly,
this method throws a <code>BatchUpdateException</code>, and a JDBC
driver may or may not continue to process the remaining commands in
the batch.  However, the driver's behavior must be consistent with a
particular DBMS, either always continuing to process commands or never
continuing to process commands.  If the driver continues processing
after a failure, the array returned by the method
<code>BatchUpdateException.getLargeUpdateCounts</code>
will contain as many elements as there are commands in the batch, and
at least one of the elements will be the following:

<LI>A value of <code>EXECUTE_FAILED</code> -- indicates that the command failed
to execute successfully and occurs only if a driver continues to
process commands after a command fails
</OL>
<p>
This method should be used when the returned row count may exceed
{@link Integer#MAX_VALUE}.
<p>
The default implementation will throw {@code UnsupportedOperationException}

@return an array of update counts containing one element for each
command in the batch.  The elements of the array are ordered according
to the order in which commands were added to the batch.
@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code> or the
driver does not support batch statements. Throws {@link BatchUpdateException}
(a subclass of <code>SQLException</code>) if one of the commands sent to the
database fails to execute properly or attempts to return a result set.
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}

@see #addBatch
@see DatabaseMetaData#supportsBatchUpdates
@since 1.8
"
      end

      operation 8103682 "executeLargeUpdate"
	public explicit_return_type "long"
	nparams 1
	  param inout name "sql" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement, which may be an <code>INSERT</code>,
<code>UPDATE</code>, or <code>DELETE</code> statement or an
SQL statement that returns nothing, such as an SQL DDL statement.
<p>
This method should be used when the returned row count may exceed
{@link Integer#MAX_VALUE}.
<p>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
<p>
The default implementation will throw {@code UnsupportedOperationException}

@param sql an SQL Data Manipulation Language (DML) statement,
such as <code>INSERT</code>, <code>UPDATE</code> or
<code>DELETE</code>; or an SQL statement that returns nothing,
such as a DDL statement.

@return either (1) the row count for SQL Data Manipulation Language
(DML) statements or (2) 0 for SQL statements that return nothing

@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>, the given
SQL statement produces a <code>ResultSet</code> object, the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
@since 1.8
"
      end

      operation 8103810 "executeLargeUpdate"
	public explicit_return_type "long"
	nparams 2
	  param inout name "sql" type class_ref 128130 // String
	  param in name "autoGeneratedKeys" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement and signals the driver with the
given flag about whether the
auto-generated keys produced by this <code>Statement</code> object
should be made available for retrieval.  The driver will ignore the
flag if the SQL statement
is not an <code>INSERT</code> statement, or an SQL statement able to return
auto-generated keys (the list of such statements is vendor-specific).
<p>
This method should be used when the returned row count may exceed
{@link Integer#MAX_VALUE}.
<p>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
<p>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param sql an SQL Data Manipulation Language (DML) statement,
such as <code>INSERT</code>, <code>UPDATE</code> or
<code>DELETE</code>; or an SQL statement that returns nothing,
such as a DDL statement.

@param autoGeneratedKeys a flag indicating whether auto-generated keys
       should be made available for retrieval;
        one of the following constants:
        <code>Statement.RETURN_GENERATED_KEYS</code>
        <code>Statement.NO_GENERATED_KEYS</code>
@return either (1) the row count for SQL Data Manipulation Language (DML) statements
        or (2) 0 for SQL statements that return nothing

@exception SQLException if a database access error occurs,
 this method is called on a closed <code>Statement</code>, the given
           SQL statement returns a <code>ResultSet</code> object,
           the given constant is not one of those allowed, the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method with a constant of Statement.RETURN_GENERATED_KEYS
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
@since 1.8
"
      end

      operation 8103938 "executeLargeUpdate"
	public explicit_return_type "long"
	nparams 2
	  param inout name "sql" type class_ref 128130 // String
	  param inout name "columnIndexes" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement and signals the driver that the
auto-generated keys indicated in the given array should be made available
for retrieval.   This array contains the indexes of the columns in the
target table that contain the auto-generated keys that should be made
available. The driver will ignore the array if the SQL statement
is not an <code>INSERT</code> statement, or an SQL statement able to return
auto-generated keys (the list of such statements is vendor-specific).
<p>
This method should be used when the returned row count may exceed
{@link Integer#MAX_VALUE}.
<p>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
<p>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param sql an SQL Data Manipulation Language (DML) statement,
such as <code>INSERT</code>, <code>UPDATE</code> or
<code>DELETE</code>; or an SQL statement that returns nothing,
such as a DDL statement.

@param columnIndexes an array of column indexes indicating the columns
       that should be returned from the inserted row
@return either (1) the row count for SQL Data Manipulation Language (DML) statements
        or (2) 0 for SQL statements that return nothing

@exception SQLException if a database access error occurs,
this method is called on a closed <code>Statement</code>, the SQL
statement returns a <code>ResultSet</code> object,the second argument
supplied to this method is not an
<code>int</code> array whose elements are valid column indexes, the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
@since 1.8
"
      end

      operation 8104066 "executeLargeUpdate"
	public explicit_return_type "long"
	nparams 2
	  param inout name "sql" type class_ref 128130 // String
	  param inout name "columnNames" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement and signals the driver that the
auto-generated keys indicated in the given array should be made available
for retrieval.   This array contains the names of the columns in the
target table that contain the auto-generated keys that should be made
available. The driver will ignore the array if the SQL statement
is not an <code>INSERT</code> statement, or an SQL statement able to return
auto-generated keys (the list of such statements is vendor-specific).
<p>
This method should be used when the returned row count may exceed
{@link Integer#MAX_VALUE}.
<p>
<strong>Note:</strong>This method cannot be called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>.
<p>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param sql an SQL Data Manipulation Language (DML) statement,
such as <code>INSERT</code>, <code>UPDATE</code> or
<code>DELETE</code>; or an SQL statement that returns nothing,
such as a DDL statement.
@param columnNames an array of the names of the columns that should be
       returned from the inserted row
@return either the row count for <code>INSERT</code>, <code>UPDATE</code>,
        or <code>DELETE</code> statements, or 0 for SQL statements
        that return nothing
@exception SQLException if a database access error occurs,
 this method is called on a closed <code>Statement</code>, the SQL
           statement returns a <code>ResultSet</code> object, the
           second argument supplied to this method is not a <code>String</code> array
           whose elements are valid column names, the method is called on a
<code>PreparedStatement</code> or <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@throws SQLTimeoutException when the driver has determined that the
timeout value that was specified by the {@code setQueryTimeout}
method has been exceeded and has at least attempted to cancel
the currently running {@code Statement}
@since 1.8
"
      end
    end

    class 1038082 "Wrapper"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance
in question is in fact a proxy class.
<p>
The wrapper pattern is employed by many JDBC driver implementations to provide extensions beyond
the traditional JDBC API that are specific to a data source. Developers may wish to gain access to
these resources that are wrapped (the delegates) as  proxy class instances representing the
the actual resources. This interface describes a standard mechanism to access
these wrapped resources
represented by their proxy, to permit direct access to the resource delegates.

@since 1.6
"
      operation 8097538 "unwrap"
	public explicit_return_type "T"
	nparams 1
	  param inout name "iface" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object that implements the given interface to allow access to
non-standard methods, or standard methods not exposed by the proxy.

If the receiver implements the interface then the result is the receiver
or a proxy for the receiver. If the receiver is a wrapper
and the wrapped object implements the interface then the result is the
wrapped object or a proxy for the wrapped object. Otherwise return the
the result of calling <code>unwrap</code> recursively on the wrapped object
or a proxy for that result. If the receiver is not a
wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.

@param <T> the type of the class modeled by this Class object
@param iface A Class defining an interface that the result must implement.
@return an object that implements the interface. May be a proxy for the actual implementing object.
@throws java.sql.SQLException If no object found that implements the interface
@since 1.6
"
      end

      operation 8097666 "isWrapperFor"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "iface" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this either implements the interface argument or is directly or indirectly a wrapper
for an object that does. Returns false otherwise. If this implements the interface then return true,
else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
object. If this does not implement the interface and is not a wrapper, return false.
This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
returns true then calling <code>unwrap</code> with the same argument should succeed.

@param iface a Class defining an interface.
@return true if this implements the interface or directly or indirectly wraps an object that does.
@throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
for an object with the given interface.
@since 1.6
"
      end
    end

    class 1038210 "SQLWarning"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P>An exception that provides information on  database access
warnings. Warnings are silently chained to the object whose method
caused it to be reported.
<P>
Warnings may be retrieved from <code>Connection</code>, <code>Statement</code>,
and <code>ResultSet</code> objects.  Trying to retrieve a warning on a
connection after it has been closed will cause an exception to be thrown.
Similarly, trying to retrieve a warning on a statement after it has been
closed or on a result set after it has been closed will cause
an exception to be thrown. Note that closing a statement also
closes a result set that it might have produced.

@see Connection#getWarnings
@see Statement#getWarnings
@see ResultSet#getWarnings
"
      classrelation 3399170 // <generalisation>
	relation 3399170 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3399170 // <generalisation>
	  b parent class_ref 1037186 // SQLException
      end

      operation 8157954 "SQLWarning"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a  <code>SQLWarning</code> object
 with a given <code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the warning
@param SQLState an XOPEN or SQL:2003 code identifying the warning
@param vendorCode a database vendor-specific warning code
"
      end

      operation 8158082 "SQLWarning"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLWarning</code> object
with a given <code>reason</code> and <code>SQLState</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
@param reason a description of the warning
@param SQLState an XOPEN or SQL:2003 code identifying the warning
"
      end

      operation 8158210 "SQLWarning"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLWarning</code> object
with a given <code>reason</code>. The <code>SQLState</code>
is initialized to <code>null</code> and the vendor code is initialized
to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the warning
"
      end

      operation 8158338 "SQLWarning"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a  <code>SQLWarning</code> object.
The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.

"
      end

      operation 8158466 "SQLWarning"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLWarning</code> object
with a given  <code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLWarning</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
"
      end

      operation 8158594 "SQLWarning"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLWarning</code> object
with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the warning
@param cause  the underlying reason for this <code>SQLWarning</code>
(which is saved for later retrieval by the <code>getCause()</code> method);
may be null indicating the cause is non-existent or unknown.
"
      end

      operation 8158722 "SQLWarning"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLWarning</code> object
with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the warning
@param SQLState an XOPEN or SQL:2003 code identifying the warning
@param cause the underlying reason for this <code>SQLWarning</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
"
      end

      operation 8158850 "SQLWarning"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a<code>SQLWarning</code> object
with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the warning
@param SQLState an XOPEN or SQL:2003 code identifying the warning
@param vendorCode a database vendor-specific warning code
@param cause the underlying reason for this <code>SQLWarning</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
"
      end

      operation 8158978 "getNextWarning"
	public return_type class_ref 1038210 // SQLWarning
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the warning chained to this <code>SQLWarning</code> object by
<code>setNextWarning</code>.

@return the next <code>SQLException</code> in the chain; <code>null</code> if none
@see #setNextWarning
"
      end

      operation 8159106 "setNextWarning"
	public explicit_return_type "void"
	nparams 1
	  param inout name "w" type class_ref 1038210 // SQLWarning
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a <code>SQLWarning</code> object to the end of the chain.

@param w the new end of the <code>SQLException</code> chain
@see #getNextWarning
"
      end

      attribute 1885570 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3917336774604784856L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1038338 "Connection"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P>A connection (session) with a specific
database. SQL statements are executed and results are returned
within the context of a connection.
<P>
A <code>Connection</code> object's database is able to provide information
describing its tables, its supported SQL grammar, its stored
procedures, the capabilities of this connection, and so on. This
information is obtained with the <code>getMetaData</code> method.

<P><B>Note:</B> When configuring a <code>Connection</code>, JDBC applications
 should use the appropriate <code>Connection</code> method such as
 <code>setAutoCommit</code> or <code>setTransactionIsolation</code>.
 Applications should not invoke SQL commands directly to change the connection's
  configuration when there is a JDBC method available.  By default a <code>Connection</code> object is in
auto-commit mode, which means that it automatically commits changes
after executing each statement. If auto-commit mode has been
disabled, the method <code>commit</code> must be called explicitly in
order to commit changes; otherwise, database changes will not be saved.
<P>
A new <code>Connection</code> object created using the JDBC 2.1 core API
has an initially empty type map associated with it. A user may enter a
custom mapping for a UDT in this type map.
When a UDT is retrieved from a data source with the
method <code>ResultSet.getObject</code>, the <code>getObject</code> method
will check the connection's type map to see if there is an entry for that
UDT.  If so, the <code>getObject</code> method will map the UDT to the
class indicated.  If there is no entry, the UDT will be mapped using the
standard mapping.
<p>
A user may create a new type map, which is a <code>java.util.Map</code>
object, make an entry in it, and pass it to the <code>java.sql</code>
methods that can perform custom mapping.  In this case, the method
will use the given type map instead of the one associated with
the connection.
<p>
For example, the following code fragment specifies that the SQL
type <code>ATHLETES</code> will be mapped to the class
<code>Athletes</code> in the Java programming language.
The code fragment retrieves the type map for the <code>Connection
</code> object <code>con</code>, inserts the entry into it, and then sets
the type map with the new entry as the connection's type map.
<pre>
     java.util.Map map = con.getTypeMap();
     map.put(\"mySchemaName.ATHLETES\", Class.forName(\"Athletes\"));
     con.setTypeMap(map);
</pre>

@see DriverManager#getConnection
@see Statement
@see ResultSet
@see DatabaseMetaData
"
      classrelation 3398786 // <generalisation>
	relation 3398786 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3398786 // <generalisation>
	  b parent class_ref 1038082 // Wrapper
      end

      classrelation 3398914 // <generalisation>
	relation 3398914 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3398914 // <generalisation>
	  b parent class_ref 146690 // AutoCloseable
      end

      operation 8128770 "createStatement"
	public return_type class_ref 1037954 // Statement
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Statement</code> object for sending
SQL statements to the database.
SQL statements without parameters are normally
executed using <code>Statement</code> objects. If the same SQL statement
is executed many times, it may be more efficient to use a
<code>PreparedStatement</code> object.
<P>
Result sets created using the returned <code>Statement</code>
object will by default be type <code>TYPE_FORWARD_ONLY</code>
and have a concurrency level of <code>CONCUR_READ_ONLY</code>.
The holdability of the created result sets can be determined by
calling {@link #getHoldability}.

@return a new default <code>Statement</code> object
@exception SQLException if a database access error occurs
or this method is called on a closed connection
"
      end

      operation 8128898 "prepareStatement"
	public return_type class_ref 1037826 // PreparedStatement
	nparams 1
	  param inout name "sql" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PreparedStatement</code> object for sending
parameterized SQL statements to the database.
<P>
A SQL statement with or without IN parameters can be
pre-compiled and stored in a <code>PreparedStatement</code> object. This
object can then be used to efficiently execute this statement
multiple times.

<P><B>Note:</B> This method is optimized for handling
parametric SQL statements that benefit from precompilation. If
the driver supports precompilation,
the method <code>prepareStatement</code> will send
the statement to the database for precompilation. Some drivers
may not support precompilation. In this case, the statement may
not be sent to the database until the <code>PreparedStatement</code>
object is executed.  This has no direct effect on users; however, it does
affect which methods throw certain <code>SQLException</code> objects.
<P>
Result sets created using the returned <code>PreparedStatement</code>
object will by default be type <code>TYPE_FORWARD_ONLY</code>
and have a concurrency level of <code>CONCUR_READ_ONLY</code>.
The holdability of the created result sets can be determined by
calling {@link #getHoldability}.

@param sql an SQL statement that may contain one or more '?' IN
parameter placeholders
@return a new default <code>PreparedStatement</code> object containing the
pre-compiled SQL statement
@exception SQLException if a database access error occurs
or this method is called on a closed connection
"
      end

      operation 8129026 "prepareCall"
	public return_type class_ref 1037698 // CallableStatement
	nparams 1
	  param inout name "sql" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CallableStatement</code> object for calling
database stored procedures.
The <code>CallableStatement</code> object provides
methods for setting up its IN and OUT parameters, and
methods for executing the call to a stored procedure.

<P><B>Note:</B> This method is optimized for handling stored
procedure call statements. Some drivers may send the call
statement to the database when the method <code>prepareCall</code>
is done; others
may wait until the <code>CallableStatement</code> object
is executed. This has no
direct effect on users; however, it does affect which method
throws certain SQLExceptions.
<P>
Result sets created using the returned <code>CallableStatement</code>
object will by default be type <code>TYPE_FORWARD_ONLY</code>
and have a concurrency level of <code>CONCUR_READ_ONLY</code>.
The holdability of the created result sets can be determined by
calling {@link #getHoldability}.

@param sql an SQL statement that may contain one or more '?'
parameter placeholders. Typically this statement is specified using JDBC
call escape syntax.
@return a new default <code>CallableStatement</code> object containing the
pre-compiled SQL statement
@exception SQLException if a database access error occurs
or this method is called on a closed connection
"
      end

      operation 8129154 "nativeSQL"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "sql" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the given SQL statement into the system's native SQL grammar.
A driver may convert the JDBC SQL grammar into its system's
native SQL grammar prior to sending it. This method returns the
native form of the statement that the driver would have sent.

@param sql an SQL statement that may contain one or more '?'
parameter placeholders
@return the native form of this statement
@exception SQLException if a database access error occurs
or this method is called on a closed connection
"
      end

      operation 8129282 "setAutoCommit"
	public explicit_return_type "void"
	nparams 1
	  param inout name "autoCommit" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this connection's auto-commit mode to the given state.
If a connection is in auto-commit mode, then all its SQL
statements will be executed and committed as individual
transactions.  Otherwise, its SQL statements are grouped into
transactions that are terminated by a call to either
the method <code>commit</code> or the method <code>rollback</code>.
By default, new connections are in auto-commit
mode.
<P>
The commit occurs when the statement completes. The time when the statement
completes depends on the type of SQL Statement:
<ul>
<li>For DML statements, such as Insert, Update or Delete, and DDL statements,
the statement is complete as soon as it has finished executing.
<li>For Select statements, the statement is complete when the associated result
set is closed.
<li>For <code>CallableStatement</code> objects or for statements that return
multiple results, the statement is complete
when all of the associated result sets have been closed, and all update
counts and output parameters have been retrieved.
</ul>
<P>
<B>NOTE:</B>  If this method is called during a transaction and the
auto-commit mode is changed, the transaction is committed.  If
<code>setAutoCommit</code> is called and the auto-commit mode is
not changed, the call is a no-op.

@param autoCommit <code>true</code> to enable auto-commit mode;
        <code>false</code> to disable it
@exception SQLException if a database access error occurs,
 setAutoCommit(true) is called while participating in a distributed transaction,
or this method is called on a closed connection
@see #getAutoCommit
"
      end

      operation 8129410 "getAutoCommit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the current auto-commit mode for this <code>Connection</code>
object.

@return the current state of this <code>Connection</code> object's
        auto-commit mode
@exception SQLException if a database access error occurs
or this method is called on a closed connection
@see #setAutoCommit
"
      end

      operation 8129538 "commit"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes all changes made since the previous
commit/rollback permanent and releases any database locks
currently held by this <code>Connection</code> object.
This method should be
used only when auto-commit mode has been disabled.

@exception SQLException if a database access error occurs,
this method is called while participating in a distributed transaction,
if this method is called on a closed connection or this
           <code>Connection</code> object is in auto-commit mode
@see #setAutoCommit
"
      end

      operation 8129666 "rollback"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Undoes all changes made in the current transaction
and releases any database locks currently held
by this <code>Connection</code> object. This method should be
used only when auto-commit mode has been disabled.

@exception SQLException if a database access error occurs,
this method is called while participating in a distributed transaction,
this method is called on a closed connection or this
           <code>Connection</code> object is in auto-commit mode
@see #setAutoCommit
"
      end

      operation 8129794 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases this <code>Connection</code> object's database and JDBC resources
immediately instead of waiting for them to be automatically released.
<P>
Calling the method <code>close</code> on a <code>Connection</code>
object that is already closed is a no-op.
<P>
It is <b>strongly recommended</b> that an application explicitly
commits or rolls back an active transaction prior to calling the
<code>close</code> method.  If the <code>close</code> method is called
and there is an active transaction, the results are implementation-defined.
<P>

@exception SQLException SQLException if a database access error occurs
"
      end

      operation 8129922 "isClosed"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this <code>Connection</code> object has been
closed.  A connection is closed if the method <code>close</code>
has been called on it or if certain fatal errors have occurred.
This method is guaranteed to return <code>true</code> only when
it is called after the method <code>Connection.close</code> has
been called.
<P>
This method generally cannot be called to determine whether a
connection to a database is valid or invalid.  A typical client
can determine that a connection is invalid by catching any
exceptions that might be thrown when an operation is attempted.

@return <code>true</code> if this <code>Connection</code> object
        is closed; <code>false</code> if it is still open
@exception SQLException if a database access error occurs
"
      end

      operation 8130050 "getMetaData"
	public return_type class_ref 1040002 // DatabaseMetaData
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "======================================================================
 Advanced features:

Retrieves a <code>DatabaseMetaData</code> object that contains
metadata about the database to which this
<code>Connection</code> object represents a connection.
The metadata includes information about the database's
tables, its supported SQL grammar, its stored
procedures, the capabilities of this connection, and so on.

@return a <code>DatabaseMetaData</code> object for this
        <code>Connection</code> object
@exception  SQLException if a database access error occurs
or this method is called on a closed connection
"
      end

      operation 8130178 "setReadOnly"
	public explicit_return_type "void"
	nparams 1
	  param inout name "readOnly" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Puts this connection in read-only mode as a hint to the driver to enable
database optimizations.

<P><B>Note:</B> This method cannot be called during a transaction.

@param readOnly <code>true</code> enables read-only mode;
       <code>false</code> disables it
@exception SQLException if a database access error occurs, this
 method is called on a closed connection or this
           method is called during a transaction
"
      end

      operation 8130306 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this <code>Connection</code>
object is in read-only mode.

@return <code>true</code> if this <code>Connection</code> object
        is read-only; <code>false</code> otherwise
@exception SQLException SQLException if a database access error occurs
or this method is called on a closed connection
"
      end

      operation 8130434 "setCatalog"
	public explicit_return_type "void"
	nparams 1
	  param inout name "catalog" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given catalog name in order to select
a subspace of this <code>Connection</code> object's database
in which to work.
<P>
If the driver does not support catalogs, it will
silently ignore this request.
<p>
Calling {@code setCatalog} has no effect on previously created or prepared
{@code Statement} objects. It is implementation defined whether a DBMS
prepare operation takes place immediately when the {@code Connection}
method {@code prepareStatement} or {@code prepareCall} is invoked.
For maximum portability, {@code setCatalog} should be called before a
{@code Statement} is created or prepared.

@param catalog the name of a catalog (subspace in this
       <code>Connection</code> object's database) in which to work
@exception SQLException if a database access error occurs
or this method is called on a closed connection
@see #getCatalog
"
      end

      operation 8130562 "getCatalog"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this <code>Connection</code> object's current catalog name.

@return the current catalog name or <code>null</code> if there is none
@exception SQLException if a database access error occurs
or this method is called on a closed connection
@see #setCatalog
"
      end

      attribute 1877122 "TRANSACTION_NONE"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that transactions are not supported.

"
      end

      attribute 1877250 "TRANSACTION_READ_UNCOMMITTED"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that
dirty reads, non-repeatable reads and phantom reads can occur.
This level allows a row changed by one transaction to be read
by another transaction before any changes in that row have been
committed (a \"dirty read\").  If any of the changes are rolled back,
the second transaction will have retrieved an invalid row.

"
      end

      attribute 1877378 "TRANSACTION_READ_COMMITTED"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that
dirty reads are prevented; non-repeatable reads and phantom
reads can occur.  This level only prohibits a transaction
from reading a row with uncommitted changes in it.

"
      end

      attribute 1877506 "TRANSACTION_REPEATABLE_READ"
	public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that
dirty reads and non-repeatable reads are prevented; phantom
reads can occur.  This level prohibits a transaction from
reading a row with uncommitted changes in it, and it also
prohibits the situation where one transaction reads a row,
a second transaction alters the row, and the first transaction
rereads the row, getting different values the second time
(a \"non-repeatable read\").

"
      end

      attribute 1877634 "TRANSACTION_SERIALIZABLE"
	public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that
dirty reads, non-repeatable reads and phantom reads are prevented.
This level includes the prohibitions in
<code>TRANSACTION_REPEATABLE_READ</code> and further prohibits the
situation where one transaction reads all rows that satisfy
a <code>WHERE</code> condition, a second transaction inserts a row that
satisfies that <code>WHERE</code> condition, and the first transaction
rereads for the same condition, retrieving the additional
\"phantom\" row in the second read.

"
      end

      operation 8130690 "setTransactionIsolation"
	public explicit_return_type "void"
	nparams 1
	  param in name "level" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to change the transaction isolation level for this
<code>Connection</code> object to the one given.
The constants defined in the interface <code>Connection</code>
are the possible transaction isolation levels.
<P>
<B>Note:</B> If this method is called during a transaction, the result
is implementation-defined.

@param level one of the following <code>Connection</code> constants:
       <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
       <code>Connection.TRANSACTION_READ_COMMITTED</code>,
       <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
       <code>Connection.TRANSACTION_SERIALIZABLE</code>.
       (Note that <code>Connection.TRANSACTION_NONE</code> cannot be used
       because it specifies that transactions are not supported.)
@exception SQLException if a database access error occurs, this
method is called on a closed connection
           or the given parameter is not one of the <code>Connection</code>
           constants
@see DatabaseMetaData#supportsTransactionIsolationLevel
@see #getTransactionIsolation
"
      end

      operation 8130818 "getTransactionIsolation"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this <code>Connection</code> object's current
transaction isolation level.

@return the current transaction isolation level, which will be one
        of the following constants:
       <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
       <code>Connection.TRANSACTION_READ_COMMITTED</code>,
       <code>Connection.TRANSACTION_REPEATABLE_READ</code>,
       <code>Connection.TRANSACTION_SERIALIZABLE</code>, or
       <code>Connection.TRANSACTION_NONE</code>.
@exception SQLException if a database access error occurs
or this method is called on a closed connection
@see #setTransactionIsolation
"
      end

      operation 8130946 "getWarnings"
	public return_type class_ref 1038210 // SQLWarning
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the first warning reported by calls on this
<code>Connection</code> object.  If there is more than one
warning, subsequent warnings will be chained to the first one
and can be retrieved by calling the method
<code>SQLWarning.getNextWarning</code> on the warning
that was retrieved previously.
<P>
This method may not be
called on a closed connection; doing so will cause an
<code>SQLException</code> to be thrown.

<P><B>Note:</B> Subsequent warnings will be chained to this
SQLWarning.

@return the first <code>SQLWarning</code> object or <code>null</code>
        if there are none
@exception SQLException if a database access error occurs or
           this method is called on a closed connection
@see SQLWarning
"
      end

      operation 8131074 "clearWarnings"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears all warnings reported for this <code>Connection</code> object.
After a call to this method, the method <code>getWarnings</code>
returns <code>null</code> until a new warning is
reported for this <code>Connection</code> object.

@exception SQLException SQLException if a database access error occurs
or this method is called on a closed connection
"
      end

      operation 8131202 "createStatement"
	public return_type class_ref 1037954 // Statement
	nparams 2
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------

Creates a <code>Statement</code> object that will generate
<code>ResultSet</code> objects with the given type and concurrency.
This method is the same as the <code>createStatement</code> method
above, but it allows the default result set
type and concurrency to be overridden.
The holdability of the created result sets can be determined by
calling {@link #getHoldability}.

@param resultSetType a result set type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency a concurrency type; one of
       <code>ResultSet.CONCUR_READ_ONLY</code> or
       <code>ResultSet.CONCUR_UPDATABLE</code>
@return a new <code>Statement</code> object that will generate
        <code>ResultSet</code> objects with the given type and
        concurrency
@exception SQLException if a database access error occurs, this
method is called on a closed connection
        or the given parameters are not <code>ResultSet</code>
        constants indicating type and concurrency
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method or this method is not supported for the specified result
set type and result set concurrency.
@since 1.2
"
      end

      operation 8131330 "prepareStatement"
	public return_type class_ref 1037826 // PreparedStatement
	nparams 3
	  param inout name "sql" type class_ref 128130 // String
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Creates a <code>PreparedStatement</code> object that will generate
<code>ResultSet</code> objects with the given type and concurrency.
This method is the same as the <code>prepareStatement</code> method
above, but it allows the default result set
type and concurrency to be overridden.
The holdability of the created result sets can be determined by
calling {@link #getHoldability}.

@param sql a <code>String</code> object that is the SQL statement to
           be sent to the database; may contain one or more '?' IN
           parameters
@param resultSetType a result set type; one of
        <code>ResultSet.TYPE_FORWARD_ONLY</code>,
        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency a concurrency type; one of
        <code>ResultSet.CONCUR_READ_ONLY</code> or
        <code>ResultSet.CONCUR_UPDATABLE</code>
@return a new PreparedStatement object containing the
pre-compiled SQL statement that will produce <code>ResultSet</code>
objects with the given type and concurrency
@exception SQLException if a database access error occurs, this
method is called on a closed connection
        or the given parameters are not <code>ResultSet</code>
        constants indicating type and concurrency
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method or this method is not supported for the specified result
set type and result set concurrency.
@since 1.2
"
      end

      operation 8131458 "prepareCall"
	public return_type class_ref 1037698 // CallableStatement
	nparams 3
	  param inout name "sql" type class_ref 128130 // String
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CallableStatement</code> object that will generate
<code>ResultSet</code> objects with the given type and concurrency.
This method is the same as the <code>prepareCall</code> method
above, but it allows the default result set
type and concurrency to be overridden.
The holdability of the created result sets can be determined by
calling {@link #getHoldability}.

@param sql a <code>String</code> object that is the SQL statement to
           be sent to the database; may contain on or more '?' parameters
@param resultSetType a result set type; one of
        <code>ResultSet.TYPE_FORWARD_ONLY</code>,
        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency a concurrency type; one of
        <code>ResultSet.CONCUR_READ_ONLY</code> or
        <code>ResultSet.CONCUR_UPDATABLE</code>
@return a new <code>CallableStatement</code> object containing the
pre-compiled SQL statement that will produce <code>ResultSet</code>
objects with the given type and concurrency
@exception SQLException if a database access error occurs, this method
is called on a closed connection
        or the given parameters are not <code>ResultSet</code>
        constants indicating type and concurrency
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method or this method is not supported for the specified result
set type and result set concurrency.
@since 1.2
"
      end

      operation 8131586 "getTypeMap"
	public return_type class_ref 130178 // Map
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,Class<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>Map</code> object associated with this
<code>Connection</code> object.
Unless the application has added an entry, the type map returned
will be empty.
<p>
You must invoke <code>setTypeMap</code> after making changes to the
<code>Map</code> object returned from
 <code>getTypeMap</code> as a JDBC driver may create an internal
copy of the <code>Map</code> object passed to <code>setTypeMap</code>:

<pre>
     Map&lt;String,Class&lt;?&gt;&gt; myMap = con.getTypeMap();
     myMap.put(\"mySchemaName.ATHLETES\", Athletes.class);
     con.setTypeMap(myMap);
</pre>
@return the <code>java.util.Map</code> object associated
        with this <code>Connection</code> object
@exception SQLException if a database access error occurs
or this method is called on a closed connection
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
@see #setTypeMap
"
      end

      operation 8131714 "setTypeMap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Installs the given <code>TypeMap</code> object as the type map for
this <code>Connection</code> object.  The type map will be used for the
custom mapping of SQL structured types and distinct types.
<p>
You must set the the values for the <code>TypeMap</code> prior to
callng <code>setMap</code> as a JDBC driver may create an internal copy
of the <code>TypeMap</code>:

<pre>
     Map myMap&lt;String,Class&lt;?&gt;&gt; = new HashMap&lt;String,Class&lt;?&gt;&gt;();
     myMap.put(\"mySchemaName.ATHLETES\", Athletes.class);
     con.setTypeMap(myMap);
</pre>
@param map the <code>java.util.Map</code> object to install
       as the replacement for this <code>Connection</code>
       object's default type map
@exception SQLException if a database access error occurs, this
method is called on a closed connection or
       the given parameter is not a <code>java.util.Map</code>
       object
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
@see #getTypeMap
"
      end

      operation 8131842 "setHoldability"
	public explicit_return_type "void"
	nparams 1
	  param in name "holdability" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 3.0-----------------------------

Changes the default holdability of <code>ResultSet</code> objects
created using this <code>Connection</code> object to the given
holdability.  The default holdability of <code>ResultSet</code> objects
can be be determined by invoking
{@link DatabaseMetaData#getResultSetHoldability}.

@param holdability a <code>ResultSet</code> holdability constant; one of
       <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
       <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@throws SQLException if a database access occurs, this method is called
on a closed connection, or the given parameter
        is not a <code>ResultSet</code> constant indicating holdability
@exception SQLFeatureNotSupportedException if the given holdability is not supported
@see #getHoldability
@see DatabaseMetaData#getResultSetHoldability
@see ResultSet
@since 1.4
"
      end

      operation 8131970 "getHoldability"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the current holdability of <code>ResultSet</code> objects
created using this <code>Connection</code> object.

@return the holdability, one of
       <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
       <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@throws SQLException if a database access error occurs
or this method is called on a closed connection
@see #setHoldability
@see DatabaseMetaData#getResultSetHoldability
@see ResultSet
@since 1.4
"
      end

      operation 8132098 "setSavepoint"
	public return_type class_ref 1040130 // Savepoint
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an unnamed savepoint in the current transaction and
returns the new <code>Savepoint</code> object that represents it.

<p> if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created
savepoint.

@return the new <code>Savepoint</code> object
@exception SQLException if a database access error occurs,
this method is called while participating in a distributed transaction,
this method is called on a closed connection
           or this <code>Connection</code> object is currently in
           auto-commit mode
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see Savepoint
@since 1.4
"
      end

      operation 8132226 "setSavepoint"
	public return_type class_ref 1040130 // Savepoint
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a savepoint with the given name in the current transaction
and returns the new <code>Savepoint</code> object that represents it.

<p> if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created
savepoint.

@param name a <code>String</code> containing the name of the savepoint
@return the new <code>Savepoint</code> object
@exception SQLException if a database access error occurs,
this method is called while participating in a distributed transaction,
this method is called on a closed connection
           or this <code>Connection</code> object is currently in
           auto-commit mode
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see Savepoint
@since 1.4
"
      end

      operation 8132354 "rollback"
	public explicit_return_type "void"
	nparams 1
	  param inout name "savepoint" type class_ref 1040130 // Savepoint
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Undoes all changes made after the given <code>Savepoint</code> object
was set.
<P>
This method should be used only when auto-commit has been disabled.

@param savepoint the <code>Savepoint</code> object to roll back to
@exception SQLException if a database access error occurs,
this method is called while participating in a distributed transaction,
this method is called on a closed connection,
           the <code>Savepoint</code> object is no longer valid,
           or this <code>Connection</code> object is currently in
           auto-commit mode
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see Savepoint
@see #rollback
@since 1.4
"
      end

      operation 8132482 "releaseSavepoint"
	public explicit_return_type "void"
	nparams 1
	  param inout name "savepoint" type class_ref 1040130 // Savepoint
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified <code>Savepoint</code>  and subsequent <code>Savepoint</code> objects from the current
transaction. Any reference to the savepoint after it have been removed
will cause an <code>SQLException</code> to be thrown.

@param savepoint the <code>Savepoint</code> object to be removed
@exception SQLException if a database access error occurs, this
 method is called on a closed connection or
           the given <code>Savepoint</code> object is not a valid
           savepoint in the current transaction
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8132610 "createStatement"
	public return_type class_ref 1037954 // Statement
	nparams 3
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	  param in name "resultSetHoldability" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Statement</code> object that will generate
<code>ResultSet</code> objects with the given type, concurrency,
and holdability.
This method is the same as the <code>createStatement</code> method
above, but it allows the default result set
type, concurrency, and holdability to be overridden.

@param resultSetType one of the following <code>ResultSet</code>
       constants:
        <code>ResultSet.TYPE_FORWARD_ONLY</code>,
        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency one of the following <code>ResultSet</code>
       constants:
        <code>ResultSet.CONCUR_READ_ONLY</code> or
        <code>ResultSet.CONCUR_UPDATABLE</code>
@param resultSetHoldability one of the following <code>ResultSet</code>
       constants:
        <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@return a new <code>Statement</code> object that will generate
        <code>ResultSet</code> objects with the given type,
        concurrency, and holdability
@exception SQLException if a database access error occurs, this
method is called on a closed connection
           or the given parameters are not <code>ResultSet</code>
           constants indicating type, concurrency, and holdability
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method or this method is not supported for the specified result
set type, result set holdability and result set concurrency.
@see ResultSet
@since 1.4
"
      end

      operation 8132738 "prepareStatement"
	public return_type class_ref 1037826 // PreparedStatement
	nparams 4
	  param inout name "sql" type class_ref 128130 // String
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	  param in name "resultSetHoldability" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PreparedStatement</code> object that will generate
<code>ResultSet</code> objects with the given type, concurrency,
and holdability.
<P>
This method is the same as the <code>prepareStatement</code> method
above, but it allows the default result set
type, concurrency, and holdability to be overridden.

@param sql a <code>String</code> object that is the SQL statement to
           be sent to the database; may contain one or more '?' IN
           parameters
@param resultSetType one of the following <code>ResultSet</code>
       constants:
        <code>ResultSet.TYPE_FORWARD_ONLY</code>,
        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency one of the following <code>ResultSet</code>
       constants:
        <code>ResultSet.CONCUR_READ_ONLY</code> or
        <code>ResultSet.CONCUR_UPDATABLE</code>
@param resultSetHoldability one of the following <code>ResultSet</code>
       constants:
        <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@return a new <code>PreparedStatement</code> object, containing the
        pre-compiled SQL statement, that will generate
        <code>ResultSet</code> objects with the given type,
        concurrency, and holdability
@exception SQLException if a database access error occurs, this
method is called on a closed connection
           or the given parameters are not <code>ResultSet</code>
           constants indicating type, concurrency, and holdability
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method or this method is not supported for the specified result
set type, result set holdability and result set concurrency.
@see ResultSet
@since 1.4
"
      end

      operation 8132866 "prepareCall"
	public return_type class_ref 1037698 // CallableStatement
	nparams 4
	  param inout name "sql" type class_ref 128130 // String
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	  param in name "resultSetHoldability" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CallableStatement</code> object that will generate
<code>ResultSet</code> objects with the given type and concurrency.
This method is the same as the <code>prepareCall</code> method
above, but it allows the default result set
type, result set concurrency type and holdability to be overridden.

@param sql a <code>String</code> object that is the SQL statement to
           be sent to the database; may contain on or more '?' parameters
@param resultSetType one of the following <code>ResultSet</code>
       constants:
        <code>ResultSet.TYPE_FORWARD_ONLY</code>,
        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency one of the following <code>ResultSet</code>
       constants:
        <code>ResultSet.CONCUR_READ_ONLY</code> or
        <code>ResultSet.CONCUR_UPDATABLE</code>
@param resultSetHoldability one of the following <code>ResultSet</code>
       constants:
        <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@return a new <code>CallableStatement</code> object, containing the
        pre-compiled SQL statement, that will generate
        <code>ResultSet</code> objects with the given type,
        concurrency, and holdability
@exception SQLException if a database access error occurs, this
method is called on a closed connection
           or the given parameters are not <code>ResultSet</code>
           constants indicating type, concurrency, and holdability
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method or this method is not supported for the specified result
set type, result set holdability and result set concurrency.
@see ResultSet
@since 1.4
"
      end

      operation 8132994 "prepareStatement"
	public return_type class_ref 1037826 // PreparedStatement
	nparams 2
	  param inout name "sql" type class_ref 128130 // String
	  param in name "autoGeneratedKeys" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default <code>PreparedStatement</code> object that has
the capability to retrieve auto-generated keys. The given constant
tells the driver whether it should make auto-generated keys
available for retrieval.  This parameter is ignored if the SQL statement
is not an <code>INSERT</code> statement, or an SQL statement able to return
auto-generated keys (the list of such statements is vendor-specific).
<P>
<B>Note:</B> This method is optimized for handling
parametric SQL statements that benefit from precompilation. If
the driver supports precompilation,
the method <code>prepareStatement</code> will send
the statement to the database for precompilation. Some drivers
may not support precompilation. In this case, the statement may
not be sent to the database until the <code>PreparedStatement</code>
object is executed.  This has no direct effect on users; however, it does
affect which methods throw certain SQLExceptions.
<P>
Result sets created using the returned <code>PreparedStatement</code>
object will by default be type <code>TYPE_FORWARD_ONLY</code>
and have a concurrency level of <code>CONCUR_READ_ONLY</code>.
The holdability of the created result sets can be determined by
calling {@link #getHoldability}.

@param sql an SQL statement that may contain one or more '?' IN
       parameter placeholders
@param autoGeneratedKeys a flag indicating whether auto-generated keys
       should be returned; one of
       <code>Statement.RETURN_GENERATED_KEYS</code> or
       <code>Statement.NO_GENERATED_KEYS</code>
@return a new <code>PreparedStatement</code> object, containing the
        pre-compiled SQL statement, that will have the capability of
        returning auto-generated keys
@exception SQLException if a database access error occurs, this
 method is called on a closed connection
        or the given parameter is not a <code>Statement</code>
        constant indicating whether auto-generated keys should be
        returned
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method with a constant of Statement.RETURN_GENERATED_KEYS
@since 1.4
"
      end

      operation 8133122 "prepareStatement"
	public return_type class_ref 1037826 // PreparedStatement
	nparams 2
	  param inout name "sql" type class_ref 128130 // String
	  param inout name "columnIndexes" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default <code>PreparedStatement</code> object capable
of returning the auto-generated keys designated by the given array.
This array contains the indexes of the columns in the target
table that contain the auto-generated keys that should be made
available.  The driver will ignore the array if the SQL statement
is not an <code>INSERT</code> statement, or an SQL statement able to return
auto-generated keys (the list of such statements is vendor-specific).
<p>
An SQL statement with or without IN parameters can be
pre-compiled and stored in a <code>PreparedStatement</code> object. This
object can then be used to efficiently execute this statement
multiple times.
<P>
<B>Note:</B> This method is optimized for handling
parametric SQL statements that benefit from precompilation. If
the driver supports precompilation,
the method <code>prepareStatement</code> will send
the statement to the database for precompilation. Some drivers
may not support precompilation. In this case, the statement may
not be sent to the database until the <code>PreparedStatement</code>
object is executed.  This has no direct effect on users; however, it does
affect which methods throw certain SQLExceptions.
<P>
Result sets created using the returned <code>PreparedStatement</code>
object will by default be type <code>TYPE_FORWARD_ONLY</code>
and have a concurrency level of <code>CONCUR_READ_ONLY</code>.
The holdability of the created result sets can be determined by
calling {@link #getHoldability}.

@param sql an SQL statement that may contain one or more '?' IN
       parameter placeholders
@param columnIndexes an array of column indexes indicating the columns
       that should be returned from the inserted row or rows
@return a new <code>PreparedStatement</code> object, containing the
        pre-compiled statement, that is capable of returning the
        auto-generated keys designated by the given array of column
        indexes
@exception SQLException if a database access error occurs
or this method is called on a closed connection
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method

@since 1.4
"
      end

      operation 8133250 "prepareStatement"
	public return_type class_ref 1037826 // PreparedStatement
	nparams 2
	  param inout name "sql" type class_ref 128130 // String
	  param inout name "columnNames" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default <code>PreparedStatement</code> object capable
of returning the auto-generated keys designated by the given array.
This array contains the names of the columns in the target
table that contain the auto-generated keys that should be returned.
The driver will ignore the array if the SQL statement
is not an <code>INSERT</code> statement, or an SQL statement able to return
auto-generated keys (the list of such statements is vendor-specific).
<P>
An SQL statement with or without IN parameters can be
pre-compiled and stored in a <code>PreparedStatement</code> object. This
object can then be used to efficiently execute this statement
multiple times.
<P>
<B>Note:</B> This method is optimized for handling
parametric SQL statements that benefit from precompilation. If
the driver supports precompilation,
the method <code>prepareStatement</code> will send
the statement to the database for precompilation. Some drivers
may not support precompilation. In this case, the statement may
not be sent to the database until the <code>PreparedStatement</code>
object is executed.  This has no direct effect on users; however, it does
affect which methods throw certain SQLExceptions.
<P>
Result sets created using the returned <code>PreparedStatement</code>
object will by default be type <code>TYPE_FORWARD_ONLY</code>
and have a concurrency level of <code>CONCUR_READ_ONLY</code>.
The holdability of the created result sets can be determined by
calling {@link #getHoldability}.

@param sql an SQL statement that may contain one or more '?' IN
       parameter placeholders
@param columnNames an array of column names indicating the columns
       that should be returned from the inserted row or rows
@return a new <code>PreparedStatement</code> object, containing the
        pre-compiled statement, that is capable of returning the
        auto-generated keys designated by the given array of column
        names
@exception SQLException if a database access error occurs
or this method is called on a closed connection
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method

@since 1.4
"
      end

      operation 8133378 "createClob"
	public return_type class_ref 1038978 // Clob
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an object that implements the <code>Clob</code> interface. The object
returned initially contains no data.  The <code>setAsciiStream</code>,
<code>setCharacterStream</code> and <code>setString</code> methods of
the <code>Clob</code> interface may be used to add data to the <code>Clob</code>.
@return An object that implements the <code>Clob</code> interface
@throws SQLException if an object that implements the
<code>Clob</code> interface can not be constructed, this method is
called on a closed connection or a database access error occurs.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this data type

@since 1.6
"
      end

      operation 8133506 "createBlob"
	public return_type class_ref 1037570 // Blob
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an object that implements the <code>Blob</code> interface. The object
returned initially contains no data.  The <code>setBinaryStream</code> and
<code>setBytes</code> methods of the <code>Blob</code> interface may be used to add data to
the <code>Blob</code>.
@return  An object that implements the <code>Blob</code> interface
@throws SQLException if an object that implements the
<code>Blob</code> interface can not be constructed, this method is
called on a closed connection or a database access error occurs.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this data type

@since 1.6
"
      end

      operation 8133634 "createNClob"
	public return_type class_ref 1039490 // NClob
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an object that implements the <code>NClob</code> interface. The object
returned initially contains no data.  The <code>setAsciiStream</code>,
<code>setCharacterStream</code> and <code>setString</code> methods of the <code>NClob</code> interface may
be used to add data to the <code>NClob</code>.
@return An object that implements the <code>NClob</code> interface
@throws SQLException if an object that implements the
<code>NClob</code> interface can not be constructed, this method is
called on a closed connection or a database access error occurs.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this data type

@since 1.6
"
      end

      operation 8133762 "createSQLXML"
	public return_type class_ref 1039618 // SQLXML
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an object that implements the <code>SQLXML</code> interface. The object
returned initially contains no data. The <code>createXmlStreamWriter</code> object and
<code>setString</code> method of the <code>SQLXML</code> interface may be used to add data to the <code>SQLXML</code>
object.
@return An object that implements the <code>SQLXML</code> interface
@throws SQLException if an object that implements the <code>SQLXML</code> interface can not
be constructed, this method is
called on a closed connection or a database access error occurs.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this data type
@since 1.6
"
      end

      operation 8133890 "isValid"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the connection has not been closed and is still valid.
The driver shall submit a query on the connection or use some other
mechanism that positively verifies the connection is still valid when
this method is called.
<p>
The query submitted by the driver to validate the connection shall be
executed in the context of the current transaction.

@param timeout -             The time in seconds to wait for the database operation
                                             used to validate the connection to complete.  If
                                             the timeout period expires before the operation
                                             completes, this method returns false.  A value of
                                             0 indicates a timeout is not applied to the
                                             database operation.
<p>
@return true if the connection is valid, false otherwise
@exception SQLException if the value supplied for <code>timeout</code>
is less then 0
@since 1.6

@see java.sql.DatabaseMetaData#getClientInfoProperties
"
      end

      operation 8134018 "setClientInfo"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1040258 // SQLClientInfoException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the client info property specified by name to the
value specified by value.
<p>
Applications may use the <code>DatabaseMetaData.getClientInfoProperties</code>
method to determine the client info properties supported by the driver
and the maximum length that may be specified for each property.
<p>
The driver stores the value specified in a suitable location in the
database.  For example in a special register, session parameter, or
system table column.  For efficiency the driver may defer setting the
value in the database until the next time a statement is executed or
prepared.  Other than storing the client information in the appropriate
place in the database, these methods shall not alter the behavior of
the connection in anyway.  The values supplied to these methods are
used for accounting, diagnostics and debugging purposes only.
<p>
The driver shall generate a warning if the client info name specified
is not recognized by the driver.
<p>
If the value specified to this method is greater than the maximum
length for the property the driver may either truncate the value and
generate a warning or generate a <code>SQLClientInfoException</code>.  If the driver
generates a <code>SQLClientInfoException</code>, the value specified was not set on the
connection.
<p>
The following are standard client info properties.  Drivers are not
required to support these properties however if the driver supports a
client info property that can be described by one of the standard
properties, the standard property name should be used.

<ul>
<li>ApplicationName  -       The name of the application currently utilizing
                                                     the connection</li>
<li>ClientUser               -       The name of the user that the application using
                                                     the connection is performing work for.  This may
                                                     not be the same as the user name that was used
                                                     in establishing the connection.</li>
<li>ClientHostname   -       The hostname of the computer the application
                                                     using the connection is running on.</li>
</ul>
<p>
@param name          The name of the client info property to set
@param value         The value to set the client info property to.  If the
                                     value is null, the current value of the specified
                                     property is cleared.
<p>
@throws      SQLClientInfoException if the database server returns an error while
                     setting the client info value on the database server or this method
is called on a closed connection
<p>
@since 1.6
"
      end

      operation 8134146 "setClientInfo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "properties" type class_ref 240130 // Properties
	nexceptions 1
	  exception class_ref 1040258 // SQLClientInfoException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the connection's client info properties.  The
<code>Properties</code> object contains the names and values of the client info
properties to be set.  The set of client info properties contained in
the properties list replaces the current set of client info properties
on the connection.  If a property that is currently set on the
connection is not present in the properties list, that property is
cleared.  Specifying an empty properties list will clear all of the
properties on the connection.  See <code>setClientInfo (String, String)</code> for
more information.
<p>
If an error occurs in setting any of the client info properties, a
<code>SQLClientInfoException</code> is thrown. The <code>SQLClientInfoException</code>
contains information indicating which client info properties were not set.
The state of the client information is unknown because
some databases do not allow multiple client info properties to be set
atomically.  For those databases, one or more properties may have been
set before the error occurred.
<p>

@param properties                the list of client info properties to set
<p>
@see java.sql.Connection#setClientInfo(String, String) setClientInfo(String, String)
@since 1.6
<p>
@throws SQLClientInfoException if the database server returns an error while
                 setting the clientInfo values on the database server or this method
is called on a closed connection

"
      end

      operation 8134274 "getClientInfo"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the client info property specified by name.  This
method may return null if the specified client info property has not
been set and does not have a default value.  This method will also
return null if the specified client info property name is not supported
by the driver.
<p>
Applications may use the <code>DatabaseMetaData.getClientInfoProperties</code>
method to determine the client info properties supported by the driver.
<p>
@param name          The name of the client info property to retrieve
<p>
@return                      The value of the client info property specified
<p>
@throws SQLException         if the database server returns an error when
                                                     fetching the client info value from the database
or this method is called on a closed connection
<p>
@since 1.6

@see java.sql.DatabaseMetaData#getClientInfoProperties
"
      end

      operation 8134402 "getClientInfo"
	public return_type class_ref 240130 // Properties
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list containing the name and current value of each client info
property supported by the driver.  The value of a client info property
may be null if the property has not been set and does not have a
default value.
<p>
@return      A <code>Properties</code> object that contains the name and current value of
                     each of the client info properties supported by the driver.
<p>
@throws      SQLException if the database server returns an error when
                     fetching the client info values from the database
or this method is called on a closed connection
<p>
@since 1.6
"
      end

      operation 8134530 "createArrayOf"
	public return_type class_ref 1037058 // Array
	nparams 2
	  param inout name "typeName" type class_ref 128130 // String
	  param inout name "elements" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method for creating Array objects.
<p>
<b>Note: </b>When <code>createArrayOf</code> is used to create an array object
that maps to a primitive data type, then it is implementation-defined
whether the <code>Array</code> object is an array of that primitive
data type or an array of <code>Object</code>.
<p>
<b>Note: </b>The JDBC driver is responsible for mapping the elements
<code>Object</code> array to the default JDBC SQL type defined in
java.sql.Types for the given class of <code>Object</code>. The default
mapping is specified in Appendix B of the JDBC specification.  If the
resulting JDBC type is not the appropriate type for the given typeName then
it is implementation defined whether an <code>SQLException</code> is
thrown or the driver supports the resulting conversion.

@param typeName the SQL name of the type the elements of the array map to. The typeName is a
database-specific name which may be the name of a built-in type, a user-defined type or a standard  SQL type supported by this database. This
 is the value returned by <code>Array.getBaseTypeName</code>
@param elements the elements that populate the returned object
@return an Array object whose elements map to the specified SQL type
@throws SQLException if a database error occurs, the JDBC type is not
 appropriate for the typeName and the conversion is not supported, the typeName is null or this method is called on a closed connection
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this data type
@since 1.6
"
      end

      operation 8134658 "createStruct"
	public return_type class_ref 1040386 // Struct
	nparams 2
	  param inout name "typeName" type class_ref 128130 // String
	  param inout name "attributes" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method for creating Struct objects.

@param typeName the SQL type name of the SQL structured type that this <code>Struct</code>
object maps to. The typeName is the name of  a user-defined type that
has been defined for this database. It is the value returned by
<code>Struct.getSQLTypeName</code>.

@param attributes the attributes that populate the returned object
 @return a Struct object that maps to the given SQL type and is populated with the given attributes
@throws SQLException if a database error occurs, the typeName is null or this method is called on a closed connection
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this data type
@since 1.6
"
      end

      operation 8134786 "setSchema"
	public explicit_return_type "void"
	nparams 1
	  param inout name "schema" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 4.1 -----------------------------

Sets the given schema name to access.
<P>
If the driver does not support schemas, it will
silently ignore this request.
<p>
Calling {@code setSchema} has no effect on previously created or prepared
{@code Statement} objects. It is implementation defined whether a DBMS
prepare operation takes place immediately when the {@code Connection}
method {@code prepareStatement} or {@code prepareCall} is invoked.
For maximum portability, {@code setSchema} should be called before a
{@code Statement} is created or prepared.

@param schema the name of a schema  in which to work
@exception SQLException if a database access error occurs
or this method is called on a closed connection
@see #getSchema
@since 1.7
"
      end

      operation 8134914 "getSchema"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this <code>Connection</code> object's current schema name.

@return the current schema name or <code>null</code> if there is none
@exception SQLException if a database access error occurs
or this method is called on a closed connection
@see #setSchema
@since 1.7
"
      end

      operation 8135042 "abort"
	public explicit_return_type "void"
	nparams 1
	  param inout name "executor" type class_ref 503426 // Executor
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Terminates an open connection.  Calling <code>abort</code> results in:
<ul>
<li>The connection marked as closed
<li>Closes any physical connection to the database
<li>Releases resources used by the connection
<li>Insures that any thread that is currently accessing the connection
will either progress to completion or throw an <code>SQLException</code>.
</ul>
<p>
Calling <code>abort</code> marks the connection closed and releases any
resources. Calling <code>abort</code> on a closed connection is a
no-op.
<p>
It is possible that the aborting and releasing of the resources that are
held by the connection can take an extended period of time.  When the
<code>abort</code> method returns, the connection will have been marked as
closed and the <code>Executor</code> that was passed as a parameter to abort
may still be executing tasks to release resources.
<p>
This method checks to see that there is an <code>SQLPermission</code>
object before allowing the method to proceed.  If a
<code>SecurityManager</code> exists and its
<code>checkPermission</code> method denies calling <code>abort</code>,
this method throws a
<code>java.lang.SecurityException</code>.
@param executor  The <code>Executor</code>  implementation which will
be used by <code>abort</code>.
@throws java.sql.SQLException if a database access error occurs or
the {@code executor} is {@code null},
@throws java.lang.SecurityException if a security manager exists and its
   <code>checkPermission</code> method denies calling <code>abort</code>
@see SecurityManager#checkPermission
@see Executor
@since 1.7
"
      end

      operation 8135170 "setNetworkTimeout"
	public explicit_return_type "void"
	nparams 2
	  param inout name "executor" type class_ref 503426 // Executor
	  param in name "milliseconds" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Sets the maximum period a <code>Connection</code> or
objects created from the <code>Connection</code>
will wait for the database to reply to any one request. If any
 request remains unanswered, the waiting method will
return with a <code>SQLException</code>, and the <code>Connection</code>
or objects created from the <code>Connection</code>  will be marked as
closed. Any subsequent use of
the objects, with the exception of the <code>close</code>,
<code>isClosed</code> or <code>Connection.isValid</code>
methods, will result in  a <code>SQLException</code>.
<p>
<b>Note</b>: This method is intended to address a rare but serious
condition where network partitions can cause threads issuing JDBC calls
to hang uninterruptedly in socket reads, until the OS TCP-TIMEOUT
(typically 10 minutes). This method is related to the
{@link #abort abort() } method which provides an administrator
thread a means to free any such threads in cases where the
JDBC connection is accessible to the administrator thread.
The <code>setNetworkTimeout</code> method will cover cases where
there is no administrator thread, or it has no access to the
connection. This method is severe in it's effects, and should be
given a high enough value so it is never triggered before any more
normal timeouts, such as transaction timeouts.
<p>
JDBC driver implementations  may also choose to support the
{@code setNetworkTimeout} method to impose a limit on database
response time, in environments where no network is present.
<p>
Drivers may internally implement some or all of their API calls with
multiple internal driver-database transmissions, and it is left to the
driver implementation to determine whether the limit will be
applied always to the response to the API call, or to any
single  request made during the API call.
<p>

This method can be invoked more than once, such as to set a limit for an
area of JDBC code, and to reset to the default on exit from this area.
Invocation of this method has no impact on already outstanding
requests.
<p>
The {@code Statement.setQueryTimeout()} timeout value is independent of the
timeout value specified in {@code setNetworkTimeout}. If the query timeout
expires  before the network timeout then the
statement execution will be canceled. If the network is still
active the result will be that both the statement and connection
are still usable. However if the network timeout expires before
the query timeout or if the statement timeout fails due to network
problems, the connection will be marked as closed, any resources held by
the connection will be released and both the connection and
statement will be unusable.
<p>
When the driver determines that the {@code setNetworkTimeout} timeout
value has expired, the JDBC driver marks the connection
closed and releases any resources held by the connection.
<p>

This method checks to see that there is an <code>SQLPermission</code>
object before allowing the method to proceed.  If a
<code>SecurityManager</code> exists and its
<code>checkPermission</code> method denies calling
<code>setNetworkTimeout</code>, this method throws a
<code>java.lang.SecurityException</code>.

@param executor  The <code>Executor</code>  implementation which will
be used by <code>setNetworkTimeout</code>.
@param milliseconds The time in milliseconds to wait for the database
operation
 to complete.  If the JDBC driver does not support milliseconds, the
JDBC driver will round the value up to the nearest second.  If the
timeout period expires before the operation
completes, a SQLException will be thrown.
A value of 0 indicates that there is not timeout for database operations.
@throws java.sql.SQLException if a database access error occurs, this
method is called on a closed connection,
the {@code executor} is {@code null},
or the value specified for <code>seconds</code> is less than 0.
@throws java.lang.SecurityException if a security manager exists and its
   <code>checkPermission</code> method denies calling
<code>setNetworkTimeout</code>.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see SecurityManager#checkPermission
@see Statement#setQueryTimeout
@see #getNetworkTimeout
@see #abort
@see Executor
@since 1.7
"
      end

      operation 8135298 "getNetworkTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of milliseconds the driver will
wait for a database request to complete.
If the limit is exceeded, a
<code>SQLException</code> is thrown.

@return the current timeout limit in milliseconds; zero means there is
        no limit
@throws SQLException if a database access error occurs or
this method is called on a closed <code>Connection</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setNetworkTimeout
@since 1.7
"
      end
    end

    class 1038466 "Date"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P>A thin wrapper around a millisecond value that allows
JDBC to identify this as an SQL <code>DATE</code> value.  A
milliseconds value represents the number of milliseconds that
have passed since January 1, 1970 00:00:00.000 GMT.
<p>
To conform with the definition of SQL <code>DATE</code>, the
millisecond values wrapped by a <code>java.sql.Date</code> instance
must be 'normalized' by setting the
hours, minutes, seconds, and milliseconds to zero in the particular
time zone with which the instance is associated.
"
      classrelation 3399938 // <generalisation>
	relation 3399938 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3399938 // <generalisation>
	  b parent class_ref 521474 // Date
      end

      operation 8166146 "Date"
	public explicit_return_type ""
	nparams 3
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "day" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Constructs a <code>Date</code> object initialized with the given
year, month, and day.
<P>
The result is undefined if a given argument is out of bounds.

@param year the year minus 1900; must be 0 to 8099. (Note that
       8099 is 9999 minus 1900.)
@param month 0 to 11
@param day 1 to 31
@deprecated instead use the constructor <code>Date(long date)</code>
"
      end

      operation 8166274 "Date"
	public explicit_return_type ""
	nparams 1
	  param in name "date" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>Date</code> object using the given milliseconds
time value.  If the given milliseconds value contains time
information, the driver will set the time components to the
time in the default time zone (the time zone of the Java virtual
machine running the application) that corresponds to zero GMT.

@param date milliseconds since January 1, 1970, 00:00:00 GMT not
       to exceed the milliseconds representation for the year 8099.
       A negative number indicates the number of milliseconds
       before January 1, 1970, 00:00:00 GMT.
"
      end

      operation 8166402 "setTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "date" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets an existing <code>Date</code> object
using the given milliseconds time value.
If the given milliseconds value contains time information,
the driver will set the time components to the
time in the default time zone (the time zone of the Java virtual
machine running the application) that corresponds to zero GMT.

@param date milliseconds since January 1, 1970, 00:00:00 GMT not
       to exceed the milliseconds representation for the year 8099.
       A negative number indicates the number of milliseconds
       before January 1, 1970, 00:00:00 GMT.
"
      end

      operation 8166530 "valueOf"
	class_operation public return_type class_ref 1038466 // Date
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a string in JDBC date escape format to
a <code>Date</code> value.

@param s a <code>String</code> object representing a date in
       in the format \"yyyy-[m]m-[d]d\". The leading zero for <code>mm</code>
and <code>dd</code> may also be omitted.
@return a <code>java.sql.Date</code> object representing the
        given date
@throws IllegalArgumentException if the date given is not in the
        JDBC date escape format (yyyy-[m]m-[d]d)
"
      end

      operation 8166658 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	
	
	
	comment "Formats a date in the date escape format yyyy-mm-dd.
<P>
@return a String in yyyy-mm-dd format
"
      end

      operation 8166786 "getHours"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment " Override all the time operations inherited from java.util.Date;

This method is deprecated and should not be used because SQL Date
values do not have a time component.

@deprecated
@exception java.lang.IllegalArgumentException if this method is invoked
@see #setHours
"
      end

      operation 8166914 "getMinutes"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL Date
values do not have a time component.

@deprecated
@exception java.lang.IllegalArgumentException if this method is invoked
@see #setMinutes
"
      end

      operation 8167042 "getSeconds"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL Date
values do not have a time component.

@deprecated
@exception java.lang.IllegalArgumentException if this method is invoked
@see #setSeconds
"
      end

      operation 8167170 "setHours"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL Date
values do not have a time component.

@deprecated
@exception java.lang.IllegalArgumentException if this method is invoked
@see #getHours
"
      end

      operation 8167298 "setMinutes"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL Date
values do not have a time component.

@deprecated
@exception java.lang.IllegalArgumentException if this method is invoked
@see #getMinutes
"
      end

      operation 8167426 "setSeconds"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL Date
values do not have a time component.

@deprecated
@exception java.lang.IllegalArgumentException if this method is invoked
@see #getSeconds
"
      end

      attribute 1887362 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 1511598038487230103L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Private serial version unique ID to ensure serialization
compatibility.

"
      end

      operation 8167554 "valueOf"
	class_operation public return_type class_ref 1038466 // Date
	nparams 1
	  param inout name "date" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	
	
	
	comment "Obtains an instance of {@code Date} from a {@link LocalDate} object
with the same year, month and day of month value as the given
{@code LocalDate}.
<p>
The provided {@code LocalDate} is interpreted as the local date
in the local time zone.

@param date a {@code LocalDate} to convert
@return a {@code Date} object
@exception NullPointerException if {@code date} is null
@since 1.8
"
      end

      operation 8167682 "toLocalDate"
	public return_type class_ref 1040770 // LocalDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	
	
	
	comment "Converts this {@code Date} object to a {@code LocalDate}
<p>
The conversion creates a {@code LocalDate} that represents the same
date value as this {@code Date} in local time zone

@return a {@code LocalDate} object representing the same date value

@since 1.8
"
      end

      operation 8167810 "toInstant"
	public return_type class_ref 1003778 // Instant
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This method always throws an UnsupportedOperationException and should
not be used because SQL {@code Date} values do not have a time
component.

@exception java.lang.UnsupportedOperationException if this method is invoked
"
      end
    end

    class 1038594 "Time"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P>A thin wrapper around the <code>java.util.Date</code> class that allows the JDBC
API to identify this as an SQL <code>TIME</code> value. The <code>Time</code>
class adds formatting and
parsing operations to support the JDBC escape syntax for time
values.
<p>The date components should be set to the \"zero epoch\"
value of January 1, 1970 and should not be accessed.
"
      classrelation 3404418 // <generalisation>
	relation 3404418 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3404418 // <generalisation>
	  b parent class_ref 521474 // Date
      end

      operation 8226050 "Time"
	public explicit_return_type ""
	nparams 3
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Constructs a <code>Time</code> object initialized with the
given values for the hour, minute, and second.
The driver sets the date components to January 1, 1970.
Any method that attempts to access the date components of a
<code>Time</code> object will throw a
<code>java.lang.IllegalArgumentException</code>.
<P>
The result is undefined if a given argument is out of bounds.

@param hour 0 to 23
@param minute 0 to 59
@param second 0 to 59

@deprecated Use the constructor that takes a milliseconds value
            in place of this constructor
"
      end

      operation 8226178 "Time"
	public explicit_return_type ""
	nparams 1
	  param in name "time" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>Time</code> object using a milliseconds time value.

@param time milliseconds since January 1, 1970, 00:00:00 GMT;
            a negative number is milliseconds before
              January 1, 1970, 00:00:00 GMT
"
      end

      operation 8226306 "setTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "time" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a <code>Time</code> object using a milliseconds time value.

@param time milliseconds since January 1, 1970, 00:00:00 GMT;
            a negative number is milliseconds before
              January 1, 1970, 00:00:00 GMT
"
      end

      operation 8226434 "valueOf"
	class_operation public return_type class_ref 1038594 // Time
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a string in JDBC time escape format to a <code>Time</code> value.

@param s time in format \"hh:mm:ss\"
@return a corresponding <code>Time</code> object
"
      end

      operation 8226562 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	
	
	
	comment "Formats a time in JDBC time escape format.

@return a <code>String</code> in hh:mm:ss format
"
      end

      operation 8226690 "getYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment " Override all the date operations inherited from java.util.Date;

This method is deprecated and should not be used because SQL <code>TIME</code>
values do not have a year component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked
@see #setYear
"
      end

      operation 8226818 "getMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL <code>TIME</code>
values do not have a month component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked
@see #setMonth
"
      end

      operation 8226946 "getDay"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL <code>TIME</code>
values do not have a day component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked
"
      end

      operation 8227074 "getDate"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL <code>TIME</code>
values do not have a date component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked
@see #setDate
"
      end

      operation 8227202 "setYear"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL <code>TIME</code>
values do not have a year component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked
@see #getYear
"
      end

      operation 8227330 "setMonth"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL <code>TIME</code>
values do not have a month component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked
@see #getMonth
"
      end

      operation 8227458 "setDate"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL <code>TIME</code>
values do not have a date component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked
@see #getDate
"
      end

      attribute 1898242 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 8397324403548013681L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Private serial version unique ID to ensure serialization
compatibility.

"
      end

      operation 8227586 "valueOf"
	class_operation public return_type class_ref 1038594 // Time
	nparams 1
	  param inout name "time" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	
	
	
	comment "Obtains an instance of {@code Time} from a {@link LocalTime} object
with the same hour, minute and second time value as the given
{@code LocalTime}.

@param time a {@code LocalTime} to convert
@return a {@code Time} object
@exception NullPointerException if {@code time} is null
@since 1.8
"
      end

      operation 8227714 "toLocalTime"
	public return_type class_ref 1043842 // LocalTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	
	
	
	comment "Converts this {@code Time} object to a {@code LocalTime}.
<p>
The conversion creates a {@code LocalTime} that represents the same
hour, minute, and second time value as this {@code Time}.

@return a {@code LocalTime} object representing the same time value
@since 1.8
"
      end

      operation 8227842 "toInstant"
	public return_type class_ref 1003778 // Instant
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This method always throws an UnsupportedOperationException and should
not be used because SQL {@code Time} values do not have a date
component.

@exception java.lang.UnsupportedOperationException if this method is invoked
"
      end
    end

    class 1038722 "Timestamp"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P>A thin wrapper around <code>java.util.Date</code> that allows
the JDBC API to identify this as an SQL <code>TIMESTAMP</code> value.
It adds the ability
to hold the SQL <code>TIMESTAMP</code> fractional seconds value, by allowing
the specification of fractional seconds to a precision of nanoseconds.
A Timestamp also provides formatting and
parsing operations to support the JDBC escape syntax for timestamp values.

<p>The precision of a Timestamp object is calculated to be either:
<ul>
<li><code>19 </code>, which is the number of characters in yyyy-mm-dd hh:mm:ss
<li> <code> 20 + s </code>, which is the number
of characters in the yyyy-mm-dd hh:mm:ss.[fff...] and <code>s</code> represents  the scale of the given Timestamp,
its fractional seconds precision.
</ul>

<P><B>Note:</B> This type is a composite of a <code>java.util.Date</code> and a
separate nanoseconds value. Only integral seconds are stored in the
<code>java.util.Date</code> component. The fractional seconds - the nanos - are
separate.  The <code>Timestamp.equals(Object)</code> method never returns
<code>true</code> when passed an object
that isn't an instance of <code>java.sql.Timestamp</code>,
because the nanos component of a date is unknown.
As a result, the <code>Timestamp.equals(Object)</code>
method is not symmetric with respect to the
<code>java.util.Date.equals(Object)</code>
method.  Also, the <code>hashCode</code> method uses the underlying
<code>java.util.Date</code>
implementation and therefore does not include nanos in its computation.
<P>
Due to the differences between the <code>Timestamp</code> class
and the <code>java.util.Date</code>
class mentioned above, it is recommended that code not view
<code>Timestamp</code> values generically as an instance of
<code>java.util.Date</code>.  The
inheritance relationship between <code>Timestamp</code>
and <code>java.util.Date</code> really
denotes implementation inheritance, and not type inheritance.
"
      classrelation 3404546 // <generalisation>
	relation 3404546 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3404546 // <generalisation>
	  b parent class_ref 521474 // Date
      end

      operation 8227970 "Timestamp"
	public explicit_return_type ""
	nparams 7
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "date" explicit_type "int"
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	  param in name "nano" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Constructs a <code>Timestamp</code> object initialized
with the given values.

@param year the year minus 1900
@param month 0 to 11
@param date 1 to 31
@param hour 0 to 23
@param minute 0 to 59
@param second 0 to 59
@param nano 0 to 999,999,999
@deprecated instead use the constructor <code>Timestamp(long millis)</code>
@exception IllegalArgumentException if the nano argument is out of bounds
"
      end

      operation 8228098 "Timestamp"
	public explicit_return_type ""
	nparams 1
	  param in name "time" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>Timestamp</code> object
using a milliseconds time value. The
integral seconds are stored in the underlying date value; the
fractional seconds are stored in the <code>nanos</code> field of
the <code>Timestamp</code> object.

@param time milliseconds since January 1, 1970, 00:00:00 GMT.
       A negative number is the number of milliseconds before
        January 1, 1970, 00:00:00 GMT.
@see java.util.Calendar
"
      end

      operation 8228226 "setTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "time" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>Timestamp</code> object to represent a point in time that is
<tt>time</tt> milliseconds after January 1, 1970 00:00:00 GMT.

@param time   the number of milliseconds.
@see #getTime
@see #Timestamp(long time)
@see java.util.Calendar
"
      end

      operation 8228354 "getTime"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT
represented by this <code>Timestamp</code> object.

@return  the number of milliseconds since January 1, 1970, 00:00:00 GMT
         represented by this date.
@see #setTime
"
      end

      attribute 1898370 "nanos"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial

"
      end

      operation 8228482 "valueOf"
	class_operation public return_type class_ref 1038722 // Timestamp
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a <code>String</code> object in JDBC timestamp escape format to a
<code>Timestamp</code> value.

@param s timestamp in format <code>yyyy-[m]m-[d]d hh:mm:ss[.f...]</code>.  The
fractional seconds may be omitted. The leading zero for <code>mm</code>
and <code>dd</code> may also be omitted.

@return corresponding <code>Timestamp</code> value
@exception java.lang.IllegalArgumentException if the given argument
does not have the format <code>yyyy-[m]m-[d]d hh:mm:ss[.f...]</code>
"
      end

      operation 8228610 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	
	
	
	comment "Formats a timestamp in JDBC timestamp escape format.
        <code>yyyy-mm-dd hh:mm:ss.fffffffff</code>,
where <code>ffffffffff</code> indicates nanoseconds.
<P>
@return a <code>String</code> object in
          <code>yyyy-mm-dd hh:mm:ss.fffffffff</code> format
"
      end

      operation 8228738 "getNanos"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets this <code>Timestamp</code> object's <code>nanos</code> value.

@return this <code>Timestamp</code> object's fractional seconds component
@see #setNanos
"
      end

      operation 8228866 "setNanos"
	public explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>Timestamp</code> object's <code>nanos</code> field
to the given value.

@param n the new fractional seconds component
@exception java.lang.IllegalArgumentException if the given argument
           is greater than 999999999 or less than 0
@see #getNanos
"
      end

      operation 8228994 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ts" type class_ref 1038722 // Timestamp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests to see if this <code>Timestamp</code> object is
equal to the given <code>Timestamp</code> object.

@param ts the <code>Timestamp</code> value to compare with
@return <code>true</code> if the given <code>Timestamp</code>
        object is equal to this <code>Timestamp</code> object;
        <code>false</code> otherwise
"
      end

      operation 8229122 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ts" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests to see if this <code>Timestamp</code> object is
equal to the given object.

This version of the method <code>equals</code> has been added
to fix the incorrect
signature of <code>Timestamp.equals(Timestamp)</code> and to preserve backward
compatibility with existing class files.

Note: This method is not symmetric with respect to the
<code>equals(Object)</code> method in the base class.

@param ts the <code>Object</code> value to compare with
@return <code>true</code> if the given <code>Object</code> is an instance
        of a <code>Timestamp</code> that
        is equal to this <code>Timestamp</code> object;
        <code>false</code> otherwise
"
      end

      operation 8229250 "before"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ts" type class_ref 1038722 // Timestamp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this <code>Timestamp</code> object is
earlier than the given <code>Timestamp</code> object.

@param ts the <code>Timestamp</code> value to compare with
@return <code>true</code> if this <code>Timestamp</code> object is earlier;
       <code>false</code> otherwise
"
      end

      operation 8229378 "after"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ts" type class_ref 1038722 // Timestamp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this <code>Timestamp</code> object is
later than the given <code>Timestamp</code> object.

@param ts the <code>Timestamp</code> value to compare with
@return <code>true</code> if this <code>Timestamp</code> object is later;
       <code>false</code> otherwise
"
      end

      operation 8229506 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "ts" type class_ref 1038722 // Timestamp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>Timestamp</code> object to the given
<code>Timestamp</code> object.

@param   ts   the <code>Timestamp</code> object to be compared to
               this <code>Timestamp</code> object
@return  the value <code>0</code> if the two <code>Timestamp</code>
         objects are equal; a value less than <code>0</code> if this
         <code>Timestamp</code> object is before the given argument;
         and a value greater than <code>0</code> if this
         <code>Timestamp</code> object is after the given argument.
@since   1.4
"
      end

      operation 8229634 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" type class_ref 521474 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>Timestamp</code> object to the given
<code>Date</code> object.

@param o the <code>Date</code> to be compared to
         this <code>Timestamp</code> object
@return  the value <code>0</code> if this <code>Timestamp</code> object
         and the given object are equal; a value less than <code>0</code>
         if this  <code>Timestamp</code> object is before the given argument;
         and a value greater than <code>0</code> if this
         <code>Timestamp</code> object is after the given argument.

@since   1.5
"
      end

      operation 8229762 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

The {@code hashCode} method uses the underlying {@code java.util.Date}
implementation and therefore does not include nanos in its computation.

"
      end

      attribute 1898498 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 2745179027874758501L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1898626 "MILLIS_PER_SECOND"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8229890 "valueOf"
	class_operation public return_type class_ref 1038722 // Timestamp
	nparams 1
	  param inout name "dateTime" type class_ref 1043970 // LocalDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	
	
	
	comment "Obtains an instance of {@code Timestamp} from a {@code LocalDateTime}
object, with the same year, month, day of month, hours, minutes,
seconds and nanos date-time value as the provided {@code LocalDateTime}.
<p>
The provided {@code LocalDateTime} is interpreted as the local
date-time in the local time zone.

@param dateTime a {@code LocalDateTime} to convert
@return a {@code Timestamp} object
@exception NullPointerException if {@code dateTime} is null.
@since 1.8
"
      end

      operation 8230018 "toLocalDateTime"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	
	
	
	comment "Converts this {@code Timestamp} object to a {@code LocalDateTime}.
<p>
The conversion creates a {@code LocalDateTime} that represents the
same year, month, day of month, hours, minutes, seconds and nanos
date-time value as this {@code Timestamp} in the local time zone.

@return a {@code LocalDateTime} object representing the same date-time value
@since 1.8
"
      end

      operation 8230146 "from"
	class_operation public return_type class_ref 1038722 // Timestamp
	nparams 1
	  param inout name "instant" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code Timestamp} from an {@link Instant} object.
<p>
{@code Instant} can store points on the time-line further in the future
and further in the past than {@code Date}. In this scenario, this method
will throw an exception.

@param instant  the instant to convert
@return an {@code Timestamp} representing the same point on the time-line as
 the provided instant
@exception NullPointerException if {@code instant} is null.
@exception IllegalArgumentException if the instant is too large to
 represent as a {@code Timesamp}
@since 1.8
"
      end

      operation 8230274 "toInstant"
	public return_type class_ref 1003778 // Instant
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Converts this {@code Timestamp} object to an {@code Instant}.
<p>
The conversion creates an {@code Instant} that represents the same
point on the time-line as this {@code Timestamp}.

@return an instant representing the same point on the time-line
@since 1.8
"
      end
    end

    class 1038850 "Ref"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The mapping in the Java programming language of an SQL <code>REF</code>
value, which is a reference to an SQL structured type value in the database.
<P>
SQL <code>REF</code> values are stored in a table that contains
instances of a referenceable SQL structured type, and each <code>REF</code>
value is a unique identifier for one instance in that table.
An SQL <code>REF</code> value may be used in place of the
SQL structured type it references, either as a column value in a
table or an attribute value in a structured type.
<P>
Because an SQL <code>REF</code> value is a logical pointer to an
SQL structured type, a <code>Ref</code> object is by default also a logical
pointer. Thus, retrieving an SQL <code>REF</code> value as
a <code>Ref</code> object does not materialize
the attributes of the structured type on the client.
<P>
A <code>Ref</code> object can be stored in the database using the
<code>PreparedStatement.setRef</code> method.
<p>
All methods on the <code>Ref</code> interface must be fully implemented if the
JDBC driver supports the data type.

@see Struct
@since 1.2
"
      operation 8174466 "getBaseTypeName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the fully-qualified SQL name of the SQL structured type that
this <code>Ref</code> object references.

@return the fully-qualified SQL name of the referenced SQL structured type
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8174594 "getObject"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the referenced object and maps it to a Java type
using the given type map.

@param map a <code>java.util.Map</code> object that contains
       the mapping to use (the fully-qualified name of the SQL
       structured type being referenced and the class object for
       <code>SQLData</code> implementation to which the SQL
       structured type will be mapped)
@return  a Java <code>Object</code> that is the custom mapping for
         the SQL structured type to which this <code>Ref</code>
         object refers
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
@see #setObject
"
      end

      operation 8174722 "getObject"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the SQL structured type instance referenced by
this <code>Ref</code> object.  If the connection's type map has an entry
for the structured type, the instance will be custom mapped to
the Java class indicated in the type map.  Otherwise, the
structured type instance will be mapped to a <code>Struct</code> object.

@return  a Java <code>Object</code> that is the mapping for
         the SQL structured type to which this <code>Ref</code>
         object refers
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
@see #setObject
"
      end

      operation 8174850 "setObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the structured type value that this <code>Ref</code>
object references to the given instance of <code>Object</code>.
The driver converts this to an SQL structured type when it
sends it to the database.

@param value an <code>Object</code> representing the SQL
       structured type instance that this
       <code>Ref</code> object will reference
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
@see #getObject()
@see #getObject(Map)
@see PreparedStatement#setObject(int, Object)
@see CallableStatement#setObject(String, Object)
"
      end
    end

    class 1038978 "Clob"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The mapping in the Java&trade; programming language
for the SQL <code>CLOB</code> type.
An SQL <code>CLOB</code> is a built-in type
that stores a Character Large Object as a column value in a row of
a database table.
By default drivers implement a <code>Clob</code> object using an SQL
<code>locator(CLOB)</code>, which means that a <code>Clob</code> object
contains a logical pointer to the SQL <code>CLOB</code> data rather than
the data itself. A <code>Clob</code> object is valid for the duration
of the transaction in which it was created.
<P>The <code>Clob</code> interface provides methods for getting the
length of an SQL <code>CLOB</code> (Character Large Object) value,
for materializing a <code>CLOB</code> value on the client, and for
searching for a substring or <code>CLOB</code> object within a
<code>CLOB</code> value.
Methods in the interfaces {@link ResultSet},
{@link CallableStatement}, and {@link PreparedStatement}, such as
<code>getClob</code> and <code>setClob</code> allow a programmer to
access an SQL <code>CLOB</code> value.  In addition, this interface
has methods for updating a <code>CLOB</code> value.
<p>
All methods on the <code>Clob</code> interface must be fully implemented if the
JDBC driver supports the data type.

@since 1.2
"
      operation 8127106 "length"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of characters
in the <code>CLOB</code> value
designated by this <code>Clob</code> object.

@return length of the <code>CLOB</code> in characters
@exception SQLException if there is an error accessing the
           length of the <code>CLOB</code> value
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8127234 "getSubString"
	public return_type class_ref 128130 // String
	nparams 2
	  param in name "pos" explicit_type "long"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a copy of the specified substring
in the <code>CLOB</code> value
designated by this <code>Clob</code> object.
The substring begins at position
<code>pos</code> and has up to <code>length</code> consecutive
characters.

@param pos the first character of the substring to be extracted.
           The first character is at position 1.
@param length the number of consecutive characters to be copied;
the value for length must be 0 or greater
@return a <code>String</code> that is the specified substring in
        the <code>CLOB</code> value designated by this <code>Clob</code> object
@exception SQLException if there is an error accessing the
           <code>CLOB</code> value; if pos is less than 1 or length is
less than 0
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8127362 "getCharacterStream"
	public return_type class_ref 407298 // Reader
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>CLOB</code> value designated by this <code>Clob</code>
object as a <code>java.io.Reader</code> object (or as a stream of
characters).

@return a <code>java.io.Reader</code> object containing the
        <code>CLOB</code> data
@exception SQLException if there is an error accessing the
           <code>CLOB</code> value
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setCharacterStream
@since 1.2
"
      end

      operation 8127490 "getAsciiStream"
	public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>CLOB</code> value designated by this <code>Clob</code>
object as an ascii stream.

@return a <code>java.io.InputStream</code> object containing the
        <code>CLOB</code> data
@exception SQLException if there is an error accessing the
           <code>CLOB</code> value
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #setAsciiStream
@since 1.2
"
      end

      operation 8127618 "position"
	public explicit_return_type "long"
	nparams 2
	  param inout name "searchstr" type class_ref 128130 // String
	  param in name "start" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the character position at which the specified substring
<code>searchstr</code> appears in the SQL <code>CLOB</code> value
represented by this <code>Clob</code> object.  The search
begins at position <code>start</code>.

@param searchstr the substring for which to search
@param start the position at which to begin searching; the first position
             is 1
@return the position at which the substring appears or -1 if it is not
        present; the first position is 1
@exception SQLException if there is an error accessing the
           <code>CLOB</code> value or if pos is less than 1
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8127746 "position"
	public explicit_return_type "long"
	nparams 2
	  param inout name "searchstr" type class_ref 1038978 // Clob
	  param in name "start" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the character position at which the specified
<code>Clob</code> object <code>searchstr</code> appears in this
<code>Clob</code> object.  The search begins at position
<code>start</code>.

@param searchstr the <code>Clob</code> object for which to search
@param start the position at which to begin searching; the first
             position is 1
@return the position at which the <code>Clob</code> object appears
             or -1 if it is not present; the first position is 1
@exception SQLException if there is an error accessing the
           <code>CLOB</code> value or if start is less than 1
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8127874 "setString"
	public explicit_return_type "int"
	nparams 2
	  param in name "pos" explicit_type "long"
	  param inout name "str" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---------------------------- jdbc 3.0 -----------------------------------

Writes the given Java <code>String</code> to the <code>CLOB</code>
value that this <code>Clob</code> object designates at the position
<code>pos</code>. The string will overwrite the existing characters
in the <code>Clob</code> object starting at the position
<code>pos</code>.  If the end of the <code>Clob</code> value is reached
while writing the given string, then the length of the <code>Clob</code>
value will be increased to accommodate the extra characters.
<p>
<b>Note:</b> If the value specified for <code>pos</code>
is greater then the length+1 of the <code>CLOB</code> value then the
behavior is undefined. Some JDBC drivers may throw a
<code>SQLException</code> while other drivers may support this
operation.

@param pos the position at which to start writing to the <code>CLOB</code>
        value that this <code>Clob</code> object represents;
The first position is 1
@param str the string to be written to the <code>CLOB</code>
       value that this <code>Clob</code> designates
@return the number of characters written
@exception SQLException if there is an error accessing the
           <code>CLOB</code> value or if pos is less than 1

@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8128002 "setString"
	public explicit_return_type "int"
	nparams 4
	  param in name "pos" explicit_type "long"
	  param inout name "str" type class_ref 128130 // String
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> characters of <code>str</code>, starting
at character <code>offset</code>, to the <code>CLOB</code> value
that this <code>Clob</code> represents.  The string will overwrite the existing characters
in the <code>Clob</code> object starting at the position
<code>pos</code>.  If the end of the <code>Clob</code> value is reached
while writing the given string, then the length of the <code>Clob</code>
value will be increased to accommodate the extra characters.
<p>
<b>Note:</b> If the value specified for <code>pos</code>
is greater then the length+1 of the <code>CLOB</code> value then the
behavior is undefined. Some JDBC drivers may throw a
<code>SQLException</code> while other drivers may support this
operation.

@param pos the position at which to start writing to this
       <code>CLOB</code> object; The first position  is 1
@param str the string to be written to the <code>CLOB</code>
       value that this <code>Clob</code> object represents
@param offset the offset into <code>str</code> to start reading
       the characters to be written
@param len the number of characters to be written
@return the number of characters written
@exception SQLException if there is an error accessing the
           <code>CLOB</code> value or if pos is less than 1

@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8128130 "setAsciiStream"
	public return_type class_ref 151298 // OutputStream
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a stream to be used to write Ascii characters to the
<code>CLOB</code> value that this <code>Clob</code> object represents,
starting at position <code>pos</code>.  Characters written to the stream
will overwrite the existing characters
in the <code>Clob</code> object starting at the position
<code>pos</code>.  If the end of the <code>Clob</code> value is reached
while writing characters to the stream, then the length of the <code>Clob</code>
value will be increased to accommodate the extra characters.
<p>
<b>Note:</b> If the value specified for <code>pos</code>
is greater then the length+1 of the <code>CLOB</code> value then the
behavior is undefined. Some JDBC drivers may throw a
<code>SQLException</code> while other drivers may support this
operation.

@param pos the position at which to start writing to this
       <code>CLOB</code> object; The first position is 1
@return the stream to which ASCII encoded characters can be written
@exception SQLException if there is an error accessing the
           <code>CLOB</code> value or if pos is less than 1
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getAsciiStream

@since 1.4
"
      end

      operation 8128258 "setCharacterStream"
	public return_type class_ref 428034 // Writer
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a stream to be used to write a stream of Unicode characters
to the <code>CLOB</code> value that this <code>Clob</code> object
represents, at position <code>pos</code>. Characters written to the stream
will overwrite the existing characters
in the <code>Clob</code> object starting at the position
<code>pos</code>.  If the end of the <code>Clob</code> value is reached
while writing characters to the stream, then the length of the <code>Clob</code>
value will be increased to accommodate the extra characters.
<p>
<b>Note:</b> If the value specified for <code>pos</code>
is greater then the length+1 of the <code>CLOB</code> value then the
behavior is undefined. Some JDBC drivers may throw a
<code>SQLException</code> while other drivers may support this
operation.

@param  pos the position at which to start writing to the
       <code>CLOB</code> value; The first position is 1

@return a stream to which Unicode encoded characters can be written
@exception SQLException if there is an error accessing the
           <code>CLOB</code> value or if pos is less than 1
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getCharacterStream

@since 1.4
"
      end

      operation 8128386 "truncate"
	public explicit_return_type "void"
	nparams 1
	  param in name "len" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Truncates the <code>CLOB</code> value that this <code>Clob</code>
designates to have a length of <code>len</code>
characters.
<p>
<b>Note:</b> If the value specified for <code>pos</code>
is greater then the length+1 of the <code>CLOB</code> value then the
behavior is undefined. Some JDBC drivers may throw a
<code>SQLException</code> while other drivers may support this
operation.

@param len the length, in characters, to which the <code>CLOB</code> value
       should be truncated
@exception SQLException if there is an error accessing the
           <code>CLOB</code> value or if len is less than 0

@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8128514 "free"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method frees the <code>Clob</code> object and releases the resources the resources
that it holds.  The object is invalid once the <code>free</code> method
is called.
<p>
After <code>free</code> has been called, any attempt to invoke a
method other than <code>free</code> will result in a <code>SQLException</code>
being thrown.  If <code>free</code> is called multiple times, the subsequent
calls to <code>free</code> are treated as a no-op.
<p>
@throws SQLException if an error occurs releasing
the Clob's resources

@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8128642 "getCharacterStream"
	public return_type class_ref 407298 // Reader
	nparams 2
	  param in name "pos" explicit_type "long"
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Reader</code> object that contains a partial <code>Clob</code> value, starting
with the character specified by pos, which is length characters in length.

@param pos the offset to the first character of the partial value to
be retrieved.  The first character in the Clob is at position 1.
@param length the length in characters of the partial value to be retrieved.
@return <code>Reader</code> through which the partial <code>Clob</code> value can be read.
@throws SQLException if pos is less than 1 or if pos is greater than the number of
characters in the <code>Clob</code> or if pos + length is greater than the number of
characters in the <code>Clob</code>

@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end
    end

    class 1039106 "ResultSetMetaData"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that can be used to get information about the types
and properties of the columns in a <code>ResultSet</code> object.
The following code fragment creates the <code>ResultSet</code> object rs,
creates the <code>ResultSetMetaData</code> object rsmd, and uses rsmd
to find out how many columns rs has and whether the first column in rs
can be used in a <code>WHERE</code> clause.
<PRE>

    ResultSet rs = stmt.executeQuery(\"SELECT a, b, c FROM TABLE2\");
    ResultSetMetaData rsmd = rs.getMetaData();
    int numberOfColumns = rsmd.getColumnCount();
    boolean b = rsmd.isSearchable(1);

</PRE>
"
      classrelation 3402370 // <generalisation>
	relation 3402370 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3402370 // <generalisation>
	  b parent class_ref 1038082 // Wrapper
      end

      operation 8199682 "getColumnCount"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of columns in this <code>ResultSet</code> object.

@return the number of columns
@exception SQLException if a database access error occurs
"
      end

      operation 8199810 "isAutoIncrement"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the designated column is automatically numbered.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8199938 "isCaseSensitive"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a column's case matters.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8200066 "isSearchable"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the designated column can be used in a where clause.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8200194 "isCurrency"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the designated column is a cash value.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8200322 "isNullable"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates the nullability of values in the designated column.

@param column the first column is 1, the second is 2, ...
@return the nullability status of the given column; one of <code>columnNoNulls</code>,
         <code>columnNullable</code> or <code>columnNullableUnknown</code>
@exception SQLException if a database access error occurs
"
      end

      attribute 1895426 "columnNoNulls"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that a
column does not allow <code>NULL</code> values.

"
      end

      attribute 1895554 "columnNullable"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that a
column allows <code>NULL</code> values.

"
      end

      attribute 1895682 "columnNullableUnknown"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that the
nullability of a column's values is unknown.

"
      end

      operation 8200450 "isSigned"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether values in the designated column are signed numbers.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8200578 "getColumnDisplaySize"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates the designated column's normal maximum width in characters.

@param column the first column is 1, the second is 2, ...
@return the normal maximum number of characters allowed as the width
         of the designated column
@exception SQLException if a database access error occurs
"
      end

      operation 8200706 "getColumnLabel"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the designated column's suggested title for use in printouts and
displays. The suggested title is usually specified by the SQL <code>AS</code>
clause.  If a SQL <code>AS</code> is not specified, the value returned from
<code>getColumnLabel</code> will be the same as the value returned by the
<code>getColumnName</code> method.

@param column the first column is 1, the second is 2, ...
@return the suggested column title
@exception SQLException if a database access error occurs
"
      end

      operation 8200834 "getColumnName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the designated column's name.

@param column the first column is 1, the second is 2, ...
@return column name
@exception SQLException if a database access error occurs
"
      end

      operation 8200962 "getSchemaName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the designated column's table's schema.

@param column the first column is 1, the second is 2, ...
@return schema name or \"\" if not applicable
@exception SQLException if a database access error occurs
"
      end

      operation 8201090 "getPrecision"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the designated column's specified column size.
For numeric data, this is the maximum precision.  For character data, this is the length in characters.
For datetime datatypes, this is the length in characters of the String representation (assuming the
maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
this is the length in bytes. 0 is returned for data types where the
column size is not applicable.

@param column the first column is 1, the second is 2, ...
@return precision
@exception SQLException if a database access error occurs
"
      end

      operation 8201218 "getScale"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the designated column's number of digits to right of the decimal point.
0 is returned for data types where the scale is not applicable.

@param column the first column is 1, the second is 2, ...
@return scale
@exception SQLException if a database access error occurs
"
      end

      operation 8201346 "getTableName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the designated column's table name.

@param column the first column is 1, the second is 2, ...
@return table name or \"\" if not applicable
@exception SQLException if a database access error occurs
"
      end

      operation 8201474 "getCatalogName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the designated column's table's catalog name.

@param column the first column is 1, the second is 2, ...
@return the name of the catalog for the table in which the given column
         appears or \"\" if not applicable
@exception SQLException if a database access error occurs
"
      end

      operation 8201602 "getColumnType"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated column's SQL type.

@param column the first column is 1, the second is 2, ...
@return SQL type from java.sql.Types
@exception SQLException if a database access error occurs
@see Types
"
      end

      operation 8201730 "getColumnTypeName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated column's database-specific type name.

@param column the first column is 1, the second is 2, ...
@return type name used by the database. If the column type is
a user-defined type, then a fully-qualified type name is returned.
@exception SQLException if a database access error occurs
"
      end

      operation 8201858 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the designated column is definitely not writable.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8201986 "isWritable"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether it is possible for a write on the designated column to succeed.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8202114 "isDefinitelyWritable"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a write on the designated column will definitely succeed.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8202242 "getColumnClassName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------------

<p>Returns the fully-qualified name of the Java class whose instances
are manufactured if the method <code>ResultSet.getObject</code>
is called to retrieve a value
from the column.  <code>ResultSet.getObject</code> may return a subclass of the
class returned by this method.

@param column the first column is 1, the second is 2, ...
@return the fully-qualified name of the class in the Java programming
        language that would be used by the method
<code>ResultSet.getObject</code> to retrieve the value in the specified
column. This is the class name used for custom mapping.
@exception SQLException if a database access error occurs
@since 1.2
"
      end
    end

    class 1039234 "ParameterMetaData"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that can be used to get information about the types
and properties for each parameter marker in a
<code>PreparedStatement</code> object. For some queries and driver
implementations, the data that would be returned by a <code>ParameterMetaData</code>
object may not be available until the <code>PreparedStatement</code> has
been executed.
<p>
Some driver implementations may not be able to provide information about the
types and properties for each parameter marker in a <code>CallableStatement</code>
object.

@since 1.4
"
      classrelation 3401986 // <generalisation>
	relation 3401986 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3401986 // <generalisation>
	  b parent class_ref 1038082 // Wrapper
      end

      operation 8173314 "getParameterCount"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of parameters in the <code>PreparedStatement</code>
object for which this <code>ParameterMetaData</code> object contains
information.

@return the number of parameters
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8173442 "isNullable"
	public explicit_return_type "int"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether null values are allowed in the designated parameter.

@param param the first parameter is 1, the second is 2, ...
@return the nullability status of the given parameter; one of
       <code>ParameterMetaData.parameterNoNulls</code>,
       <code>ParameterMetaData.parameterNullable</code>, or
       <code>ParameterMetaData.parameterNullableUnknown</code>
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      attribute 1892738 "parameterNoNulls"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that a
parameter will not allow <code>NULL</code> values.

"
      end

      attribute 1892866 "parameterNullable"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that a
parameter will allow <code>NULL</code> values.

"
      end

      attribute 1892994 "parameterNullableUnknown"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that the
nullability of a parameter is unknown.

"
      end

      operation 8173570 "isSigned"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether values for the designated parameter can be signed numbers.

@param param the first parameter is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8173698 "getPrecision"
	public explicit_return_type "int"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated parameter's specified column size.

<P>The returned value represents the maximum column size for the given parameter.
For numeric data, this is the maximum precision.  For character data, this is the length in characters.
For datetime datatypes, this is the length in characters of the String representation (assuming the
maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
this is the length in bytes. 0 is returned for data types where the
column size is not applicable.

@param param the first parameter is 1, the second is 2, ...
@return precision
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8173826 "getScale"
	public explicit_return_type "int"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated parameter's number of digits to right of the decimal point.
0 is returned for data types where the scale is not applicable.

@param param the first parameter is 1, the second is 2, ...
@return scale
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8173954 "getParameterType"
	public explicit_return_type "int"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated parameter's SQL type.

@param param the first parameter is 1, the second is 2, ...
@return SQL type from <code>java.sql.Types</code>
@exception SQLException if a database access error occurs
@since 1.4
@see Types
"
      end

      operation 8174082 "getParameterTypeName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated parameter's database-specific type name.

@param param the first parameter is 1, the second is 2, ...
@return type the name used by the database. If the parameter type is
a user-defined type, then a fully-qualified type name is returned.
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8174210 "getParameterClassName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the fully-qualified name of the Java class whose instances
should be passed to the method <code>PreparedStatement.setObject</code>.

@param param the first parameter is 1, the second is 2, ...
@return the fully-qualified name of the class in the Java programming
        language that would be used by the method
        <code>PreparedStatement.setObject</code> to set the value
        in the specified parameter. This is the class name used
        for custom mapping.
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      attribute 1893122 "parameterModeUnknown"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that the mode of the parameter is unknown.

"
      end

      attribute 1893250 "parameterModeIn"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that the parameter's mode is IN.

"
      end

      attribute 1893378 "parameterModeInOut"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that the parameter's mode is INOUT.

"
      end

      attribute 1893506 "parameterModeOut"
	public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant indicating that the parameter's mode is  OUT.

"
      end

      operation 8174338 "getParameterMode"
	public explicit_return_type "int"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated parameter's mode.

@param param the first parameter is 1, the second is 2, ...
@return mode of the parameter; one of
       <code>ParameterMetaData.parameterModeIn</code>,
       <code>ParameterMetaData.parameterModeOut</code>, or
       <code>ParameterMetaData.parameterModeInOut</code>
       <code>ParameterMetaData.parameterModeUnknown</code>.
@exception SQLException if a database access error occurs
@since 1.4
"
      end
    end

    class 1039362 "RowId"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
The representation (mapping) in the Java programming language of an SQL ROWID
value. An SQL ROWID is a built-in type, a value of which can be thought of as
an address  for its identified row in a database table. Whether that address
is logical or, in any  respects, physical is determined by its originating data
source.
<p>
Methods in the interfaces <code>ResultSet</code>, <code>CallableStatement</code>,
and <code>PreparedStatement</code>, such as <code>getRowId</code> and <code>setRowId</code>
allow a programmer to access a SQL <code>ROWID</code>  value. The <code>RowId</code>
interface provides a method
for representing the value of the <code>ROWID</code> as a byte array or as a
<code>String</code>.
<p>
The method <code>getRowIdLifetime</code> in the interface <code>DatabaseMetaData</code>,
can be used
to determine if a <code>RowId</code> object remains valid for the duration of the transaction in
which  the <code>RowId</code> was created, the duration of the session in which
the <code>RowId</code> was created,
or, effectively, for as long as its identified row is not deleted. In addition
to specifying the duration of its valid lifetime outside its originating data
source, <code>getRowIdLifetime</code> specifies the duration of a <code>ROWID</code>
value's valid lifetime
within its originating data source. In this, it differs from a large object,
because there is no limit on the valid lifetime of a large  object within its
originating data source.
<p>
All methods on the <code>RowId</code> interface must be fully implemented if the
JDBC driver supports the data type.

@see java.sql.DatabaseMetaData
@since 1.6
"
      operation 8202370 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>RowId</code> to the specified object. The result is
<code>true</code> if and only if the argument is not null and is a RowId
object that represents the same ROWID as  this object.
<p>
It is important
to consider both the origin and the valid lifetime of a <code>RowId</code>
when comparing it to another <code>RowId</code>. If both are valid, and
both are from the same table on the same data source, then if they are equal
they identify
the same row; if one or more is no longer guaranteed to be valid, or if
they originate from different data sources, or different tables on the
same data source, they  may be equal but still
not identify the same row.

@param obj the <code>Object</code> to compare this <code>RowId</code> object
    against.
@return true if the <code>RowId</code>s are equal; false otherwise
@since 1.6
"
      end

      operation 8202498 "getBytes"
	public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of bytes representing the value of the SQL <code>ROWID</code>
designated by this <code>java.sql.RowId</code> object.

@return an array of bytes, whose length is determined by the driver supplying
    the connection, representing the value of the ROWID designated by this
    java.sql.RowId object.
"
      end

      operation 8202626 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String representing the value of the SQL ROWID designated by this
<code>java.sql.RowId</code> object.
<p>
Like <code>java.sql.Date.toString()</code>
returns the contents of its DATE as the <code>String</code> \"2004-03-17\"
rather than as  DATE literal in SQL (which would have been the <code>String</code>
DATE \"2004-03-17\"), toString()
returns the contents of its ROWID in a form specific to the driver supplying
the connection, and possibly not as a <code>ROWID</code> literal.

@return a String whose format is determined by the driver supplying the
    connection, representing the value of the <code>ROWID</code> designated
    by this <code>java.sql.RowId</code>  object.
"
      end

      operation 8202754 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code value of this <code>RowId</code> object.

@return a hash code for the <code>RowId</code>
"
      end
    end

    class 1039490 "NClob"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The mapping in the Java&trade; programming language
for the SQL <code>NCLOB</code> type.
An SQL <code>NCLOB</code> is a built-in type
that stores a Character Large Object using the National Character Set
 as a column value in a row of  a database table.
<P>The <code>NClob</code> interface extends the <code>Clob</code> interface
which provides provides methods for getting the
length of an SQL <code>NCLOB</code> value,
for materializing a <code>NCLOB</code> value on the client, and for
searching for a substring or <code>NCLOB</code> object within a
<code>NCLOB</code> value. A <code>NClob</code> object, just like a <code>Clob</code> object, is valid for the duration
of the transaction in which it was created.
Methods in the interfaces {@link ResultSet},
{@link CallableStatement}, and {@link PreparedStatement}, such as
<code>getNClob</code> and <code>setNClob</code> allow a programmer to
access an SQL <code>NCLOB</code> value.  In addition, this interface
has methods for updating a <code>NCLOB</code> value.
<p>
All methods on the <code>NClob</code> interface must be fully implemented if the
JDBC driver supports the data type.

@since 1.6
"
      classrelation 3401858 // <generalisation>
	relation 3401858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3401858 // <generalisation>
	  b parent class_ref 1038978 // Clob
      end
    end

    class 1039618 "SQLXML"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The mapping in the JavaTM programming language for the SQL XML type.
XML is a built-in type that stores an XML value
as a column value in a row of a database table.
By default drivers implement an SQLXML object as
a logical pointer to the XML data
rather than the data itself.
An SQLXML object is valid for the duration of the transaction in which it was created.
<p>
The SQLXML interface provides methods for accessing the XML value
as a String, a Reader or Writer, or as a Stream.  The XML value
may also be accessed through a Source or set as a Result, which
are used with XML Parser APIs such as DOM, SAX, and StAX, as
well as with XSLT transforms and XPath evaluations.
<p>
Methods in the interfaces ResultSet, CallableStatement, and PreparedStatement,
such as getSQLXML allow a programmer to access an XML value.
In addition, this interface has methods for updating an XML value.
<p>
The XML value of the SQLXML instance may be obtained as a BinaryStream using
<pre>
  SQLXML sqlxml = resultSet.getSQLXML(column);
  InputStream binaryStream = sqlxml.getBinaryStream();
</pre>
For example, to parse an XML value with a DOM parser:
<pre>
  DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
  Document result = parser.parse(binaryStream);
</pre>
or to parse an XML value with a SAX parser to your handler:
<pre>
  SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
  parser.parse(binaryStream, myHandler);
</pre>
or to parse an XML value with a StAX parser:
<pre>
  XMLInputFactory factory = XMLInputFactory.newInstance();
  XMLStreamReader streamReader = factory.createXMLStreamReader(binaryStream);
</pre>
<p>
Because databases may use an optimized representation for the XML,
accessing the value through getSource() and
setResult() can lead to improved processing performance
without serializing to a stream representation and parsing the XML.
<p>
For example, to obtain a DOM Document Node:
<pre>
  DOMSource domSource = sqlxml.getSource(DOMSource.class);
  Document document = (Document) domSource.getNode();
</pre>
or to set the value to a DOM Document Node to myNode:
<pre>
  DOMResult domResult = sqlxml.setResult(DOMResult.class);
  domResult.setNode(myNode);
</pre>
or, to send SAX events to your handler:
<pre>
  SAXSource saxSource = sqlxml.getSource(SAXSource.class);
  XMLReader xmlReader = saxSource.getXMLReader();
  xmlReader.setContentHandler(myHandler);
  xmlReader.parse(saxSource.getInputSource());
</pre>
or, to set the result value from SAX events:
<pre>
  SAXResult saxResult = sqlxml.setResult(SAXResult.class);
  ContentHandler contentHandler = saxResult.getHandler();
  contentHandler.startDocument();
  // set the XML elements and attributes into the result
  contentHandler.endDocument();
</pre>
or, to obtain StAX events:
<pre>
  StAXSource staxSource = sqlxml.getSource(StAXSource.class);
  XMLStreamReader streamReader = staxSource.getXMLStreamReader();
</pre>
or, to set the result value from StAX events:
<pre>
  StAXResult staxResult = sqlxml.setResult(StAXResult.class);
  XMLStreamWriter streamWriter = staxResult.getXMLStreamWriter();
</pre>
or, to perform XSLT transformations on the XML value using the XSLT in xsltFile
output to file resultFile:
<pre>
  File xsltFile = new File(\"a.xslt\");
  File myFile = new File(\"result.xml\");
  Transformer xslt = TransformerFactory.newInstance().newTransformer(new StreamSource(xsltFile));
  Source source = sqlxml.getSource(null);
  Result result = new StreamResult(myFile);
  xslt.transform(source, result);
</pre>
or, to evaluate an XPath expression on the XML value:
<pre>
  XPath xpath = XPathFactory.newInstance().newXPath();
  DOMSource domSource = sqlxml.getSource(DOMSource.class);
  Document document = (Document) domSource.getNode();
  String expression = \"/foo/@bar\";
  String barValue = xpath.evaluate(expression, document);
</pre>
To set the XML value to be the result of an XSLT transform:
<pre>
  File sourceFile = new File(\"source.xml\");
  Transformer xslt = TransformerFactory.newInstance().newTransformer(new StreamSource(xsltFile));
  Source streamSource = new StreamSource(sourceFile);
  Result result = sqlxml.setResult(null);
  xslt.transform(streamSource, result);
</pre>
Any Source can be transformed to a Result using the identity transform
specified by calling newTransformer():
<pre>
  Transformer identity = TransformerFactory.newInstance().newTransformer();
  Source source = sqlxml.getSource(null);
  File myFile = new File(\"result.xml\");
  Result result = new StreamResult(myFile);
  identity.transform(source, result);
</pre>
To write the contents of a Source to standard output:
<pre>
  Transformer identity = TransformerFactory.newInstance().newTransformer();
  Source source = sqlxml.getSource(null);
  Result result = new StreamResult(System.out);
  identity.transform(source, result);
</pre>
To create a DOMSource from a DOMResult:
<pre>
   DOMSource domSource = new DOMSource(domResult.getNode());
</pre>
<p>
Incomplete or invalid XML values may cause an SQLException when
set or the exception may occur when execute() occurs.  All streams
must be closed before execute() occurs or an SQLException will be thrown.
<p>
Reading and writing XML values to or from an SQLXML object can happen at most once.
The conceptual states of readable and not readable determine if one
of the reading APIs will return a value or throw an exception.
The conceptual states of writable and not writable determine if one
of the writing APIs will set a value or throw an exception.
<p>
The state moves from readable to not readable once free() or any of the
reading APIs are called: getBinaryStream(), getCharacterStream(), getSource(), and getString().
Implementations may also change the state to not writable when this occurs.
<p>
The state moves from writable to not writeable once free() or any of the
writing APIs are called: setBinaryStream(), setCharacterStream(), setResult(), and setString().
Implementations may also change the state to not readable when this occurs.

<p>
All methods on the <code>SQLXML</code> interface must be fully implemented if the
JDBC driver supports the data type.

@see javax.xml.parsers
@see javax.xml.stream
@see javax.xml.transform
@see javax.xml.xpath
@since 1.6
"
      operation 8224514 "free"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method closes this object and releases the resources that it held.
The SQL XML object becomes invalid and neither readable or writeable
when this method is called.

After <code>free</code> has been called, any attempt to invoke a
method other than <code>free</code> will result in a <code>SQLException</code>
being thrown.  If <code>free</code> is called multiple times, the subsequent
calls to <code>free</code> are treated as a no-op.
@throws SQLException if there is an error freeing the XML value.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8224642 "getBinaryStream"
	public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the XML value designated by this SQLXML instance as a stream.
The bytes of the input stream are interpreted according to appendix F of the XML 1.0 specification.
The behavior of this method is the same as ResultSet.getBinaryStream()
when the designated column of the ResultSet has a type java.sql.Types of SQLXML.
<p>
The SQL XML object becomes not readable when this method is called and
may also become not writable depending on implementation.

@return a stream containing the XML data.
@throws SQLException if there is an error processing the XML value.
  An exception is thrown if the state is not readable.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8224770 "setBinaryStream"
	public return_type class_ref 151298 // OutputStream
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a stream that can be used to write the XML value that this SQLXML instance represents.
The stream begins at position 0.
The bytes of the stream are interpreted according to appendix F of the XML 1.0 specification
The behavior of this method is the same as ResultSet.updateBinaryStream()
when the designated column of the ResultSet has a type java.sql.Types of SQLXML.
<p>
The SQL XML object becomes not writeable when this method is called and
may also become not readable depending on implementation.

@return a stream to which data can be written.
@throws SQLException if there is an error processing the XML value.
  An exception is thrown if the state is not writable.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8224898 "getCharacterStream"
	public return_type class_ref 407298 // Reader
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the XML value designated by this SQLXML instance as a java.io.Reader object.
The format of this stream is defined by org.xml.sax.InputSource,
where the characters in the stream represent the unicode code points for
XML according to section 2 and appendix B of the XML 1.0 specification.
Although an encoding declaration other than unicode may be present,
the encoding of the stream is unicode.
The behavior of this method is the same as ResultSet.getCharacterStream()
when the designated column of the ResultSet has a type java.sql.Types of SQLXML.
<p>
The SQL XML object becomes not readable when this method is called and
may also become not writable depending on implementation.

@return a stream containing the XML data.
@throws SQLException if there is an error processing the XML value.
  The getCause() method of the exception may provide a more detailed exception, for example,
  if the stream does not contain valid characters.
  An exception is thrown if the state is not readable.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8225026 "setCharacterStream"
	public return_type class_ref 428034 // Writer
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a stream to be used to write the XML value that this SQLXML instance represents.
The format of this stream is defined by org.xml.sax.InputSource,
where the characters in the stream represent the unicode code points for
XML according to section 2 and appendix B of the XML 1.0 specification.
Although an encoding declaration other than unicode may be present,
the encoding of the stream is unicode.
The behavior of this method is the same as ResultSet.updateCharacterStream()
when the designated column of the ResultSet has a type java.sql.Types of SQLXML.
<p>
The SQL XML object becomes not writeable when this method is called and
may also become not readable depending on implementation.

@return a stream to which data can be written.
@throws SQLException if there is an error processing the XML value.
  The getCause() method of the exception may provide a more detailed exception, for example,
  if the stream does not contain valid characters.
  An exception is thrown if the state is not writable.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8225154 "getString"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the XML value designated by this SQLXML instance.
The format of this String is defined by org.xml.sax.InputSource,
where the characters in the stream represent the unicode code points for
XML according to section 2 and appendix B of the XML 1.0 specification.
Although an encoding declaration other than unicode may be present,
the encoding of the String is unicode.
The behavior of this method is the same as ResultSet.getString()
when the designated column of the ResultSet has a type java.sql.Types of SQLXML.
<p>
The SQL XML object becomes not readable when this method is called and
may also become not writable depending on implementation.

@return a string representation of the XML value designated by this SQLXML instance.
@throws SQLException if there is an error processing the XML value.
  The getCause() method of the exception may provide a more detailed exception, for example,
  if the stream does not contain valid characters.
  An exception is thrown if the state is not readable.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8225282 "setString"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the XML value designated by this SQLXML instance to the given String representation.
The format of this String is defined by org.xml.sax.InputSource,
where the characters in the stream represent the unicode code points for
XML according to section 2 and appendix B of the XML 1.0 specification.
Although an encoding declaration other than unicode may be present,
the encoding of the String is unicode.
The behavior of this method is the same as ResultSet.updateString()
when the designated column of the ResultSet has a type java.sql.Types of SQLXML.
<p>
The SQL XML object becomes not writeable when this method is called and
may also become not readable depending on implementation.

@param value the XML value
@throws SQLException if there is an error processing the XML value.
  The getCause() method of the exception may provide a more detailed exception, for example,
  if the stream does not contain valid characters.
  An exception is thrown if the state is not writable.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8225410 "getSource"
	public explicit_return_type "T"
	nparams 1
	  param inout name "sourceClass" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Source> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Source for reading the XML value designated by this SQLXML instance.
Sources are used as inputs to XML parsers and XSLT transformers.
<p>
Sources for XML parsers will have namespace processing on by default.
The systemID of the Source is implementation dependent.
<p>
The SQL XML object becomes not readable when this method is called and
may also become not writable depending on implementation.
<p>
Note that SAX is a callback architecture, so a returned
SAXSource should then be set with a content handler that will
receive the SAX events from parsing.  The content handler
will receive callbacks based on the contents of the XML.
<pre>
  SAXSource saxSource = sqlxml.getSource(SAXSource.class);
  XMLReader xmlReader = saxSource.getXMLReader();
  xmlReader.setContentHandler(myHandler);
  xmlReader.parse(saxSource.getInputSource());
</pre>

@param <T> the type of the class modeled by this Class object
@param sourceClass The class of the source, or null.
If the class is null, a vendor specific Source implementation will be returned.
The following classes are supported at a minimum:
<pre>
  javax.xml.transform.dom.DOMSource - returns a DOMSource
  javax.xml.transform.sax.SAXSource - returns a SAXSource
  javax.xml.transform.stax.StAXSource - returns a StAXSource
  javax.xml.transform.stream.StreamSource - returns a StreamSource
</pre>
@return a Source for reading the XML value.
@throws SQLException if there is an error processing the XML value
  or if this feature is not supported.
  The getCause() method of the exception may provide a more detailed exception, for example,
  if an XML parser exception occurs.
  An exception is thrown if the state is not readable.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8225538 "setResult"
	public explicit_return_type "T"
	nparams 1
	  param inout name "resultClass" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Result> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Result for setting the XML value designated by this SQLXML instance.
<p>
The systemID of the Result is implementation dependent.
<p>
The SQL XML object becomes not writeable when this method is called and
may also become not readable depending on implementation.
<p>
Note that SAX is a callback architecture and the returned
SAXResult has a content handler assigned that will receive the
SAX events based on the contents of the XML.  Call the content
handler with the contents of the XML document to assign the values.
<pre>
  SAXResult saxResult = sqlxml.setResult(SAXResult.class);
  ContentHandler contentHandler = saxResult.getXMLReader().getContentHandler();
  contentHandler.startDocument();
  // set the XML elements and attributes into the result
  contentHandler.endDocument();
</pre>

@param <T> the type of the class modeled by this Class object
@param resultClass The class of the result, or null.
If resultClass is null, a vendor specific Result implementation will be returned.
The following classes are supported at a minimum:
<pre>
  javax.xml.transform.dom.DOMResult - returns a DOMResult
  javax.xml.transform.sax.SAXResult - returns a SAXResult
  javax.xml.transform.stax.StAXResult - returns a StAXResult
  javax.xml.transform.stream.StreamResult - returns a StreamResult
</pre>
@return Returns a Result for setting the XML value.
@throws SQLException if there is an error processing the XML value
  or if this feature is not supported.
  The getCause() method of the exception may provide a more detailed exception, for example,
  if an XML parser exception occurs.
  An exception is thrown if the state is not writable.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end
    end

    class 1039746 "SQLType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that is used to identify a generic SQL type, called a JDBC type or
a vendor specific data type.

@since 1.8
"
      operation 8172290 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code SQLType} name that represents a SQL data type.

@return The name of this {@code SQLType}.
"
      end

      operation 8172418 "getVendor"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the vendor that supports this data type. The value
returned typically is the package name for this vendor.

@return The name of the vendor for this data type
"
      end

      operation 8172546 "getVendorTypeNumber"
	public return_type class_ref 137602 // Integer
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the vendor specific type number for the data type.

@return An Integer representing the vendor specific data type
"
      end
    end

    class 1039874 "ClientInfoStatus"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Enumeration for status of the reason that a property could not be set
via a call to <code>Connection.setClientInfo</code>
@since 1.6
"
      attribute 1876610 "REASON_UNKNOWN"
	public type class_ref 1039874 // ClientInfoStatus
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The client info property could not be set for some unknown reason
@since 1.6

"
      end

      attribute 1876738 "REASON_UNKNOWN_PROPERTY"
	public type class_ref 1039874 // ClientInfoStatus
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The client info property name specified was not a recognized property
name.
@since 1.6

"
      end

      attribute 1876866 "REASON_VALUE_INVALID"
	public type class_ref 1039874 // ClientInfoStatus
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The value specified for the client info property was not valid.
@since 1.6

"
      end

      attribute 1876994 "REASON_VALUE_TRUNCATED"
	public type class_ref 1039874 // ClientInfoStatus
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The value specified for the client info property was too large.
@since 1.6
"
      end
    end

    class 1040002 "DatabaseMetaData"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Comprehensive information about the database as a whole.
<P>
This interface is implemented by driver vendors to let users know the capabilities
of a Database Management System (DBMS) in combination with
the driver based on JDBC&trade; technology
(\"JDBC driver\") that is used with it.  Different relational DBMSs often support
different features, implement features in different ways, and use different
data types.  In addition, a driver may implement a feature on top of what the
DBMS offers.  Information returned by methods in this interface applies
to the capabilities of a particular driver and a particular DBMS working
together. Note that as used in this documentation, the term \"database\" is
used generically to refer to both the driver and DBMS.
<P>
A user for this interface is commonly a tool that needs to discover how to
deal with the underlying DBMS.  This is especially true for applications
that are intended to be used with more than one DBMS. For example, a tool might use the method
<code>getTypeInfo</code> to find out what data types can be used in a
<code>CREATE TABLE</code> statement.  Or a user might call the method
<code>supportsCorrelatedSubqueries</code> to see if it is possible to use
a correlated subquery or <code>supportsBatchUpdates</code> to see if it is
possible to use batch updates.
<P>
Some <code>DatabaseMetaData</code> methods return lists of information
in the form of <code>ResultSet</code> objects.
Regular <code>ResultSet</code> methods, such as
<code>getString</code> and <code>getInt</code>, can be used
to retrieve the data from these <code>ResultSet</code> objects.  If
a given form of metadata is not available, an empty <code>ResultSet</code>
will be returned. Additional columns beyond the columns defined to be
returned by the <code>ResultSet</code> object for a given method
can be defined by the JDBC driver vendor and must be accessed
by their <B>column label</B>.
<P>
Some <code>DatabaseMetaData</code> methods take arguments that are
String patterns.  These arguments all have names such as fooPattern.
Within a pattern String, \"%\" means match any substring of 0 or more
characters, and \"_\" means match any one character. Only metadata
entries matching the search pattern are returned. If a search pattern
argument is set to <code>null</code>, that argument's criterion will
be dropped from the search.

"
      classrelation 3399042 // <generalisation>
	relation 3399042 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3399042 // <generalisation>
	  b parent class_ref 1038082 // Wrapper
      end

      operation 8135426 "allProceduresAreCallable"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------------
 First, a variety of minor information about the target database.

Retrieves whether the current user can call all the procedures
returned by the method <code>getProcedures</code>.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8135554 "allTablesAreSelectable"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the current user can use all the tables returned
by the method <code>getTables</code> in a <code>SELECT</code>
statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8135682 "getURL"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the URL for this DBMS.

@return the URL for this DBMS or <code>null</code> if it cannot be
         generated
@exception SQLException if a database access error occurs
"
      end

      operation 8135810 "getUserName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the user name as known to this database.

@return the database user name
@exception SQLException if a database access error occurs
"
      end

      operation 8135938 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database is in read-only mode.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8136066 "nullsAreSortedHigh"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether <code>NULL</code> values are sorted high.
Sorted high means that <code>NULL</code> values
sort higher than any other value in a domain.  In an ascending order,
if this method returns <code>true</code>,  <code>NULL</code> values
will appear at the end. By contrast, the method
<code>nullsAreSortedAtEnd</code> indicates whether <code>NULL</code> values
are sorted at the end regardless of sort order.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8136194 "nullsAreSortedLow"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether <code>NULL</code> values are sorted low.
Sorted low means that <code>NULL</code> values
sort lower than any other value in a domain.  In an ascending order,
if this method returns <code>true</code>,  <code>NULL</code> values
will appear at the beginning. By contrast, the method
<code>nullsAreSortedAtStart</code> indicates whether <code>NULL</code> values
are sorted at the beginning regardless of sort order.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8136322 "nullsAreSortedAtStart"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether <code>NULL</code> values are sorted at the start regardless
of sort order.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8136450 "nullsAreSortedAtEnd"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether <code>NULL</code> values are sorted at the end regardless of
sort order.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8136578 "getDatabaseProductName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of this database product.

@return database product name
@exception SQLException if a database access error occurs
"
      end

      operation 8136706 "getDatabaseProductVersion"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the version number of this database product.

@return database version number
@exception SQLException if a database access error occurs
"
      end

      operation 8136834 "getDriverName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of this JDBC driver.

@return JDBC driver name
@exception SQLException if a database access error occurs
"
      end

      operation 8136962 "getDriverVersion"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the version number of this JDBC driver as a <code>String</code>.

@return JDBC driver version
@exception SQLException if a database access error occurs
"
      end

      operation 8137090 "getDriverMajorVersion"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this JDBC driver's major version number.

@return JDBC driver major version
"
      end

      operation 8137218 "getDriverMinorVersion"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this JDBC driver's minor version number.

@return JDBC driver minor version number
"
      end

      operation 8137346 "usesLocalFiles"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database stores tables in a local file.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8137474 "usesLocalFilePerTable"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database uses a file for each table.

@return <code>true</code> if this database uses a local file for each table;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8137602 "supportsMixedCaseIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case unquoted SQL identifiers as
case sensitive and as a result stores them in mixed case.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8137730 "storesUpperCaseIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case unquoted SQL identifiers as
case insensitive and stores them in upper case.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8137858 "storesLowerCaseIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case unquoted SQL identifiers as
case insensitive and stores them in lower case.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8137986 "storesMixedCaseIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case unquoted SQL identifiers as
case insensitive and stores them in mixed case.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8138114 "supportsMixedCaseQuotedIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case quoted SQL identifiers as
case sensitive and as a result stores them in mixed case.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8138242 "storesUpperCaseQuotedIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case quoted SQL identifiers as
case insensitive and stores them in upper case.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8138370 "storesLowerCaseQuotedIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case quoted SQL identifiers as
case insensitive and stores them in lower case.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8138498 "storesMixedCaseQuotedIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case quoted SQL identifiers as
case insensitive and stores them in mixed case.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8138626 "getIdentifierQuoteString"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the string used to quote SQL identifiers.
This method returns a space \" \" if identifier quoting is not supported.

@return the quoting string or a space if quoting is not supported
@exception SQLException if a database access error occurs
"
      end

      operation 8138754 "getSQLKeywords"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a comma-separated list of all of this database's SQL keywords
that are NOT also SQL:2003 keywords.

@return the list of this database's keywords that are not also
        SQL:2003 keywords
@exception SQLException if a database access error occurs
"
      end

      operation 8138882 "getNumericFunctions"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a comma-separated list of math functions available with
this database.  These are the Open /Open CLI math function names used in
the JDBC function escape clause.

@return the list of math functions supported by this database
@exception SQLException if a database access error occurs
"
      end

      operation 8139010 "getStringFunctions"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a comma-separated list of string functions available with
this database.  These are the  Open Group CLI string function names used
in the JDBC function escape clause.

@return the list of string functions supported by this database
@exception SQLException if a database access error occurs
"
      end

      operation 8139138 "getSystemFunctions"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a comma-separated list of system functions available with
this database.  These are the  Open Group CLI system function names used
in the JDBC function escape clause.

@return a list of system functions supported by this database
@exception SQLException if a database access error occurs
"
      end

      operation 8139266 "getTimeDateFunctions"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a comma-separated list of the time and date functions available
with this database.

@return the list of time and date functions supported by this database
@exception SQLException if a database access error occurs
"
      end

      operation 8139394 "getSearchStringEscape"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the string that can be used to escape wildcard characters.
This is the string that can be used to escape '_' or '%' in
the catalog search parameters that are a pattern (and therefore use one
of the wildcard characters).

<P>The '_' character represents any single character;
the '%' character represents any sequence of zero or
more characters.

@return the string used to escape wildcard characters
@exception SQLException if a database access error occurs
"
      end

      operation 8139522 "getExtraNameCharacters"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all the \"extra\" characters that can be used in unquoted
identifier names (those beyond a-z, A-Z, 0-9 and _).

@return the string containing the extra characters
@exception SQLException if a database access error occurs
"
      end

      operation 8139650 "supportsAlterTableWithAddColumn"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------------------------------------------------
 Functions describing which features are supported.

Retrieves whether this database supports <code>ALTER TABLE</code>
with add column.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8139778 "supportsAlterTableWithDropColumn"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports <code>ALTER TABLE</code>
with drop column.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8139906 "supportsColumnAliasing"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports column aliasing.

<P>If so, the SQL AS clause can be used to provide names for
computed columns or to provide alias names for columns as
required.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8140034 "nullPlusNonNullIsNull"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports concatenations between
<code>NULL</code> and non-<code>NULL</code> values being
<code>NULL</code>.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8140162 "supportsConvert"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the JDBC scalar function
<code>CONVERT</code> for the conversion of one JDBC type to another.
The JDBC types are the generic SQL data types defined
in <code>java.sql.Types</code>.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8140290 "supportsConvert"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "fromType" explicit_type "int"
	  param in name "toType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the JDBC scalar function
<code>CONVERT</code> for conversions between the JDBC types <i>fromType</i>
and <i>toType</i>.  The JDBC types are the generic SQL data types defined
in <code>java.sql.Types</code>.

@param fromType the type to convert from; one of the type codes from
       the class <code>java.sql.Types</code>
@param toType the type to convert to; one of the type codes from
       the class <code>java.sql.Types</code>
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@see Types
"
      end

      operation 8140418 "supportsTableCorrelationNames"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports table correlation names.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8140546 "supportsDifferentTableCorrelationNames"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether, when table correlation names are supported, they
are restricted to being different from the names of the tables.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8140674 "supportsExpressionsInOrderBy"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports expressions in
<code>ORDER BY</code> lists.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8140802 "supportsOrderByUnrelated"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports using a column that is
not in the <code>SELECT</code> statement in an
<code>ORDER BY</code> clause.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8140930 "supportsGroupBy"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports some form of
<code>GROUP BY</code> clause.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8141058 "supportsGroupByUnrelated"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports using a column that is
not in the <code>SELECT</code> statement in a
<code>GROUP BY</code> clause.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8141186 "supportsGroupByBeyondSelect"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports using columns not included in
the <code>SELECT</code> statement in a <code>GROUP BY</code> clause
provided that all of the columns in the <code>SELECT</code> statement
are included in the <code>GROUP BY</code> clause.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8141314 "supportsLikeEscapeClause"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports specifying a
<code>LIKE</code> escape clause.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8141442 "supportsMultipleResultSets"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports getting multiple
<code>ResultSet</code> objects from a single call to the
method <code>execute</code>.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8141570 "supportsMultipleTransactions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database allows having multiple
transactions open at once (on different connections).

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8141698 "supportsNonNullableColumns"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether columns in this database may be defined as non-nullable.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8141826 "supportsMinimumSQLGrammar"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the ODBC Minimum SQL grammar.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8141954 "supportsCoreSQLGrammar"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the ODBC Core SQL grammar.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8142082 "supportsExtendedSQLGrammar"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the ODBC Extended SQL grammar.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8142210 "supportsANSI92EntryLevelSQL"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the ANSI92 entry level SQL
grammar.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8142338 "supportsANSI92IntermediateSQL"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the ANSI92 intermediate SQL grammar supported.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8142466 "supportsANSI92FullSQL"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the ANSI92 full SQL grammar supported.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8142594 "supportsIntegrityEnhancementFacility"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the SQL Integrity
Enhancement Facility.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8142722 "supportsOuterJoins"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports some form of outer join.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8142850 "supportsFullOuterJoins"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports full nested outer joins.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8142978 "supportsLimitedOuterJoins"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database provides limited support for outer
joins.  (This will be <code>true</code> if the method
<code>supportsFullOuterJoins</code> returns <code>true</code>).

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8143106 "getSchemaTerm"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the database vendor's preferred term for \"schema\".

@return the vendor term for \"schema\"
@exception SQLException if a database access error occurs
"
      end

      operation 8143234 "getProcedureTerm"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the database vendor's preferred term for \"procedure\".

@return the vendor term for \"procedure\"
@exception SQLException if a database access error occurs
"
      end

      operation 8143362 "getCatalogTerm"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the database vendor's preferred term for \"catalog\".

@return the vendor term for \"catalog\"
@exception SQLException if a database access error occurs
"
      end

      operation 8143490 "isCatalogAtStart"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a catalog appears at the start of a fully qualified
table name.  If not, the catalog appears at the end.

@return <code>true</code> if the catalog name appears at the beginning
        of a fully qualified table name; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8143618 "getCatalogSeparator"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>String</code> that this database uses as the
separator between a catalog and table name.

@return the separator string
@exception SQLException if a database access error occurs
"
      end

      operation 8143746 "supportsSchemasInDataManipulation"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a schema name can be used in a data manipulation statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8143874 "supportsSchemasInProcedureCalls"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a schema name can be used in a procedure call statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8144002 "supportsSchemasInTableDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a schema name can be used in a table definition statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8144130 "supportsSchemasInIndexDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a schema name can be used in an index definition statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8144258 "supportsSchemasInPrivilegeDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a schema name can be used in a privilege definition statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8144386 "supportsCatalogsInDataManipulation"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a catalog name can be used in a data manipulation statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8144514 "supportsCatalogsInProcedureCalls"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a catalog name can be used in a procedure call statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8144642 "supportsCatalogsInTableDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a catalog name can be used in a table definition statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8144770 "supportsCatalogsInIndexDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a catalog name can be used in an index definition statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8144898 "supportsCatalogsInPrivilegeDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a catalog name can be used in a privilege definition statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8145026 "supportsPositionedDelete"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports positioned <code>DELETE</code>
statements.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8145154 "supportsPositionedUpdate"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports positioned <code>UPDATE</code>
statements.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8145282 "supportsSelectForUpdate"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports <code>SELECT FOR UPDATE</code>
statements.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8145410 "supportsStoredProcedures"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports stored procedure calls
that use the stored procedure escape syntax.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8145538 "supportsSubqueriesInComparisons"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports subqueries in comparison
expressions.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8145666 "supportsSubqueriesInExists"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports subqueries in
<code>EXISTS</code> expressions.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8145794 "supportsSubqueriesInIns"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports subqueries in
<code>IN</code> expressions.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8145922 "supportsSubqueriesInQuantifieds"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports subqueries in quantified
expressions.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8146050 "supportsCorrelatedSubqueries"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports correlated subqueries.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8146178 "supportsUnion"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports SQL <code>UNION</code>.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8146306 "supportsUnionAll"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports SQL <code>UNION ALL</code>.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8146434 "supportsOpenCursorsAcrossCommit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports keeping cursors open
across commits.

@return <code>true</code> if cursors always remain open;
      <code>false</code> if they might not remain open
@exception SQLException if a database access error occurs
"
      end

      operation 8146562 "supportsOpenCursorsAcrossRollback"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports keeping cursors open
across rollbacks.

@return <code>true</code> if cursors always remain open;
      <code>false</code> if they might not remain open
@exception SQLException if a database access error occurs
"
      end

      operation 8146690 "supportsOpenStatementsAcrossCommit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports keeping statements open
across commits.

@return <code>true</code> if statements always remain open;
      <code>false</code> if they might not remain open
@exception SQLException if a database access error occurs
"
      end

      operation 8146818 "supportsOpenStatementsAcrossRollback"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports keeping statements open
across rollbacks.

@return <code>true</code> if statements always remain open;
      <code>false</code> if they might not remain open
@exception SQLException if a database access error occurs
"
      end

      operation 8146946 "getMaxBinaryLiteralLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------------
 The following group of methods exposes various limitations
 based on the target database with the current driver.
 Unless otherwise specified, a result of zero means there is no
 limit, or the limit is not known.

Retrieves the maximum number of hex characters this database allows in an
inline binary literal.

@return max the maximum length (in hex characters) for a binary literal;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8147074 "getMaxCharLiteralLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters this database allows
for a character literal.

@return the maximum number of characters allowed for a character literal;
     a result of zero means that there is no limit or the limit is
     not known
@exception SQLException if a database access error occurs
"
      end

      operation 8147202 "getMaxColumnNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters this database allows
for a column name.

@return the maximum number of characters allowed for a column name;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8147330 "getMaxColumnsInGroupBy"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of columns this database allows in a
<code>GROUP BY</code> clause.

@return the maximum number of columns allowed;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8147458 "getMaxColumnsInIndex"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of columns this database allows in an index.

@return the maximum number of columns allowed;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8147586 "getMaxColumnsInOrderBy"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of columns this database allows in an
<code>ORDER BY</code> clause.

@return the maximum number of columns allowed;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8147714 "getMaxColumnsInSelect"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of columns this database allows in a
<code>SELECT</code> list.

@return the maximum number of columns allowed;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8147842 "getMaxColumnsInTable"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of columns this database allows in a table.

@return the maximum number of columns allowed;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8147970 "getMaxConnections"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of concurrent connections to this
database that are possible.

@return the maximum number of active connections possible at one time;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8148098 "getMaxCursorNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters that this database allows in a
cursor name.

@return the maximum number of characters allowed in a cursor name;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8148226 "getMaxIndexLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of bytes this database allows for an
index, including all of the parts of the index.

@return the maximum number of bytes allowed; this limit includes the
     composite of all the constituent parts of the index;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8148354 "getMaxSchemaNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters that this database allows in a
schema name.

@return the maximum number of characters allowed in a schema name;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8148482 "getMaxProcedureNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters that this database allows in a
procedure name.

@return the maximum number of characters allowed in a procedure name;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8148610 "getMaxCatalogNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters that this database allows in a
catalog name.

@return the maximum number of characters allowed in a catalog name;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8148738 "getMaxRowSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of bytes this database allows in
a single row.

@return the maximum number of bytes allowed for a row; a result of
        zero means that there is no limit or the limit is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8148866 "doesMaxRowSizeIncludeBlobs"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the return value for the method
<code>getMaxRowSize</code> includes the SQL data types
<code>LONGVARCHAR</code> and <code>LONGVARBINARY</code>.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8148994 "getMaxStatementLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters this database allows in
an SQL statement.

@return the maximum number of characters allowed for an SQL statement;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8149122 "getMaxStatements"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of active statements to this database
that can be open at the same time.

@return the maximum number of statements that can be open at one time;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8149250 "getMaxTableNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters this database allows in
a table name.

@return the maximum number of characters allowed for a table name;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8149378 "getMaxTablesInSelect"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of tables this database allows in a
<code>SELECT</code> statement.

@return the maximum number of tables allowed in a <code>SELECT</code>
        statement; a result of zero means that there is no limit or
        the limit is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8149506 "getMaxUserNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters this database allows in
a user name.

@return the maximum number of characters allowed for a user name;
     a result of zero means that there is no limit or the limit
     is not known
@exception SQLException if a database access error occurs
"
      end

      operation 8149634 "getDefaultTransactionIsolation"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------------

Retrieves this database's default transaction isolation level.  The
possible values are defined in <code>java.sql.Connection</code>.

@return the default isolation level
@exception SQLException if a database access error occurs
@see Connection
"
      end

      operation 8149762 "supportsTransactions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports transactions. If not, invoking the
method <code>commit</code> is a noop, and the isolation level is
<code>TRANSACTION_NONE</code>.

@return <code>true</code> if transactions are supported;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8149890 "supportsTransactionIsolationLevel"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "level" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the given transaction isolation level.

@param level one of the transaction isolation levels defined in
        <code>java.sql.Connection</code>
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@see Connection
"
      end

      operation 8150018 "supportsDataDefinitionAndDataManipulationTransactions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports both data definition and
data manipulation statements within a transaction.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8150146 "supportsDataManipulationTransactionsOnly"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports only data manipulation
statements within a transaction.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8150274 "dataDefinitionCausesTransactionCommit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a data definition statement within a transaction forces
the transaction to commit.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8150402 "dataDefinitionIgnoredInTransactions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database ignores a data definition statement
within a transaction.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 8150530 "getProcedures"
	public return_type class_ref 1037314 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schemaPattern" type class_ref 128130 // String
	  param inout name "procedureNamePattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the stored procedures available in the given
catalog.
<P>
Only procedure descriptions matching the schema and
procedure name criteria are returned.  They are ordered by
<code>PROCEDURE_CAT</code>, <code>PROCEDURE_SCHEM</code>,
<code>PROCEDURE_NAME</code> and <code>SPECIFIC_ NAME</code>.

<P>Each procedure description has the the following columns:
 <OL>
 <LI><B>PROCEDURE_CAT</B> String {@code =>} procedure catalog (may be <code>null</code>)
 <LI><B>PROCEDURE_SCHEM</B> String {@code =>} procedure schema (may be <code>null</code>)
 <LI><B>PROCEDURE_NAME</B> String {@code =>} procedure name
 <LI> reserved for future use
 <LI> reserved for future use
 <LI> reserved for future use
 <LI><B>REMARKS</B> String {@code =>} explanatory comment on the procedure
 <LI><B>PROCEDURE_TYPE</B> short {@code =>} kind of procedure:
     <UL>
     <LI> procedureResultUnknown - Cannot determine if  a return value
      will be returned
     <LI> procedureNoResult - Does not return a return value
     <LI> procedureReturnsResult - Returns a return value
     </UL>
 <LI><B>SPECIFIC_NAME</B> String  {@code =>} The name which uniquely identifies this
procedure within its schema.
 </OL>
<p>
A user may not have permissions to execute any of the procedures that are
returned by <code>getProcedures</code>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param procedureNamePattern a procedure name pattern; must match the
       procedure name as it is stored in the database
@return <code>ResultSet</code> - each row is a procedure description
@exception SQLException if a database access error occurs
@see #getSearchStringEscape
"
      end

      attribute 1877762 "procedureResultUnknown"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that it is not known whether the procedure returns
a result.
<P>
A possible value for column <code>PROCEDURE_TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getProcedures</code>.

"
      end

      attribute 1877890 "procedureNoResult"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the procedure does not return a result.
<P>
A possible value for column <code>PROCEDURE_TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getProcedures</code>.

"
      end

      attribute 1878018 "procedureReturnsResult"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the procedure returns a result.
<P>
A possible value for column <code>PROCEDURE_TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getProcedures</code>.

"
      end

      operation 8150658 "getProcedureColumns"
	public return_type class_ref 1037314 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schemaPattern" type class_ref 128130 // String
	  param inout name "procedureNamePattern" type class_ref 128130 // String
	  param inout name "columnNamePattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the given catalog's stored procedure parameter
and result columns.

<P>Only descriptions matching the schema, procedure and
parameter name criteria are returned.  They are ordered by
PROCEDURE_CAT, PROCEDURE_SCHEM, PROCEDURE_NAME and SPECIFIC_NAME. Within this, the return value,
if any, is first. Next are the parameter descriptions in call
order. The column descriptions follow in column number order.

<P>Each row in the <code>ResultSet</code> is a parameter description or
column description with the following fields:
 <OL>
 <LI><B>PROCEDURE_CAT</B> String {@code =>} procedure catalog (may be <code>null</code>)
 <LI><B>PROCEDURE_SCHEM</B> String {@code =>} procedure schema (may be <code>null</code>)
 <LI><B>PROCEDURE_NAME</B> String {@code =>} procedure name
 <LI><B>COLUMN_NAME</B> String {@code =>} column/parameter name
 <LI><B>COLUMN_TYPE</B> Short {@code =>} kind of column/parameter:
     <UL>
     <LI> procedureColumnUnknown - nobody knows
     <LI> procedureColumnIn - IN parameter
     <LI> procedureColumnInOut - INOUT parameter
     <LI> procedureColumnOut - OUT parameter
     <LI> procedureColumnReturn - procedure return value
     <LI> procedureColumnResult - result column in <code>ResultSet</code>
     </UL>
 <LI><B>DATA_TYPE</B> int {@code =>} SQL type from java.sql.Types
 <LI><B>TYPE_NAME</B> String {@code =>} SQL type name, for a UDT type the
 type name is fully qualified
 <LI><B>PRECISION</B> int {@code =>} precision
 <LI><B>LENGTH</B> int {@code =>} length in bytes of data
 <LI><B>SCALE</B> short {@code =>} scale -  null is returned for data types where
SCALE is not applicable.
 <LI><B>RADIX</B> short {@code =>} radix
 <LI><B>NULLABLE</B> short {@code =>} can it contain NULL.
     <UL>
     <LI> procedureNoNulls - does not allow NULL values
     <LI> procedureNullable - allows NULL values
     <LI> procedureNullableUnknown - nullability unknown
     </UL>
 <LI><B>REMARKS</B> String {@code =>} comment describing parameter/column
 <LI><B>COLUMN_DEF</B> String {@code =>} default value for the column, which should be interpreted as a string when the value is enclosed in single quotes (may be <code>null</code>)
     <UL>
     <LI> The string NULL (not enclosed in quotes) - if NULL was specified as the default value
     <LI> TRUNCATE (not enclosed in quotes)        - if the specified default value cannot be represented without truncation
     <LI> NULL                                     - if a default value was not specified
     </UL>
 <LI><B>SQL_DATA_TYPE</B> int  {@code =>} reserved for future use
 <LI><B>SQL_DATETIME_SUB</B> int  {@code =>} reserved for future use
 <LI><B>CHAR_OCTET_LENGTH</B> int  {@code =>} the maximum length of binary and character based columns.  For any other datatype the returned value is a
NULL
 <LI><B>ORDINAL_POSITION</B> int  {@code =>} the ordinal position, starting from 1, for the input and output parameters for a procedure. A value of 0
is returned if this row describes the procedure's return value.  For result set columns, it is the
ordinal position of the column in the result set starting from 1.  If there are
multiple result sets, the column ordinal positions are implementation
defined.
 <LI><B>IS_NULLABLE</B> String  {@code =>} ISO rules are used to determine the nullability for a column.
      <UL>
      <LI> YES           --- if the column can include NULLs
      <LI> NO            --- if the column cannot include NULLs
      <LI> empty string  --- if the nullability for the
column is unknown
      </UL>
 <LI><B>SPECIFIC_NAME</B> String  {@code =>} the name which uniquely identifies this procedure within its schema.
 </OL>

<P><B>Note:</B> Some databases may not return the column
descriptions for a procedure.

<p>The PRECISION column represents the specified column size for the given column.
For numeric data, this is the maximum precision.  For character data, this is the length in characters.
For datetime datatypes, this is the length in characters of the String representation (assuming the
maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
this is the length in bytes. Null is returned for data types where the
column size is not applicable.
@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param procedureNamePattern a procedure name pattern; must match the
       procedure name as it is stored in the database
@param columnNamePattern a column name pattern; must match the column name
       as it is stored in the database
@return <code>ResultSet</code> - each row describes a stored procedure parameter or
     column
@exception SQLException if a database access error occurs
@see #getSearchStringEscape
"
      end

      attribute 1878146 "procedureColumnUnknown"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that type of the column is unknown.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code>
returned by the method <code>getProcedureColumns</code>.

"
      end

      attribute 1878274 "procedureColumnIn"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the column stores IN parameters.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code>
returned by the method <code>getProcedureColumns</code>.

"
      end

      attribute 1878402 "procedureColumnInOut"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the column stores INOUT parameters.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code>
returned by the method <code>getProcedureColumns</code>.

"
      end

      attribute 1878530 "procedureColumnOut"
	public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the column stores OUT parameters.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code>
returned by the method <code>getProcedureColumns</code>.

"
      end

      attribute 1878658 "procedureColumnReturn"
	public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the column stores return values.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code>
returned by the method <code>getProcedureColumns</code>.

"
      end

      attribute 1878786 "procedureColumnResult"
	public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the column stores results.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code>
returned by the method <code>getProcedureColumns</code>.

"
      end

      attribute 1878914 "procedureNoNulls"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that <code>NULL</code> values are not allowed.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> object
returned by the method <code>getProcedureColumns</code>.

"
      end

      attribute 1879042 "procedureNullable"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that <code>NULL</code> values are allowed.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> object
returned by the method <code>getProcedureColumns</code>.

"
      end

      attribute 1879170 "procedureNullableUnknown"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that whether <code>NULL</code> values are allowed
is unknown.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> object
returned by the method <code>getProcedureColumns</code>.

"
      end

      operation 8150786 "getTables"
	public return_type class_ref 1037314 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schemaPattern" type class_ref 128130 // String
	  param inout name "tableNamePattern" type class_ref 128130 // String
	  param inout name "types" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the tables available in the given catalog.
Only table descriptions matching the catalog, schema, table
name and type criteria are returned.  They are ordered by
<code>TABLE_TYPE</code>, <code>TABLE_CAT</code>,
<code>TABLE_SCHEM</code> and <code>TABLE_NAME</code>.
<P>
Each table description has the following columns:
 <OL>
 <LI><B>TABLE_CAT</B> String {@code =>} table catalog (may be <code>null</code>)
 <LI><B>TABLE_SCHEM</B> String {@code =>} table schema (may be <code>null</code>)
 <LI><B>TABLE_NAME</B> String {@code =>} table name
 <LI><B>TABLE_TYPE</B> String {@code =>} table type.  Typical types are \"TABLE\",
                 \"VIEW\", \"SYSTEM TABLE\", \"GLOBAL TEMPORARY\",
                 \"LOCAL TEMPORARY\", \"ALIAS\", \"SYNONYM\".
 <LI><B>REMARKS</B> String {@code =>} explanatory comment on the table
 <LI><B>TYPE_CAT</B> String {@code =>} the types catalog (may be <code>null</code>)
 <LI><B>TYPE_SCHEM</B> String {@code =>} the types schema (may be <code>null</code>)
 <LI><B>TYPE_NAME</B> String {@code =>} type name (may be <code>null</code>)
 <LI><B>SELF_REFERENCING_COL_NAME</B> String {@code =>} name of the designated
                 \"identifier\" column of a typed table (may be <code>null</code>)
 <LI><B>REF_GENERATION</B> String {@code =>} specifies how values in
                 SELF_REFERENCING_COL_NAME are created. Values are
                 \"SYSTEM\", \"USER\", \"DERIVED\". (may be <code>null</code>)
 </OL>

<P><B>Note:</B> Some databases may not return information for
all tables.

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param tableNamePattern a table name pattern; must match the
       table name as it is stored in the database
@param types a list of table types, which must be from the list of table types
        returned from {@link #getTableTypes},to include; <code>null</code> returns
all types
@return <code>ResultSet</code> - each row is a table description
@exception SQLException if a database access error occurs
@see #getSearchStringEscape
"
      end

      operation 8150914 "getSchemas"
	public return_type class_ref 1037314 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the schema names available in this database.  The results
are ordered by <code>TABLE_CATALOG</code> and
<code>TABLE_SCHEM</code>.

<P>The schema columns are:
 <OL>
 <LI><B>TABLE_SCHEM</B> String {@code =>} schema name
 <LI><B>TABLE_CATALOG</B> String {@code =>} catalog name (may be <code>null</code>)
 </OL>

@return a <code>ResultSet</code> object in which each row is a
        schema description
@exception SQLException if a database access error occurs

"
      end

      operation 8151042 "getCatalogs"
	public return_type class_ref 1037314 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the catalog names available in this database.  The results
are ordered by catalog name.

<P>The catalog column is:
 <OL>
 <LI><B>TABLE_CAT</B> String {@code =>} catalog name
 </OL>

@return a <code>ResultSet</code> object in which each row has a
        single <code>String</code> column that is a catalog name
@exception SQLException if a database access error occurs
"
      end

      operation 8151170 "getTableTypes"
	public return_type class_ref 1037314 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the table types available in this database.  The results
are ordered by table type.

<P>The table type is:
 <OL>
 <LI><B>TABLE_TYPE</B> String {@code =>} table type.  Typical types are \"TABLE\",
                 \"VIEW\", \"SYSTEM TABLE\", \"GLOBAL TEMPORARY\",
                 \"LOCAL TEMPORARY\", \"ALIAS\", \"SYNONYM\".
 </OL>

@return a <code>ResultSet</code> object in which each row has a
        single <code>String</code> column that is a table type
@exception SQLException if a database access error occurs
"
      end

      operation 8151298 "getColumns"
	public return_type class_ref 1037314 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schemaPattern" type class_ref 128130 // String
	  param inout name "tableNamePattern" type class_ref 128130 // String
	  param inout name "columnNamePattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of table columns available in
the specified catalog.

<P>Only column descriptions matching the catalog, schema, table
and column name criteria are returned.  They are ordered by
<code>TABLE_CAT</code>,<code>TABLE_SCHEM</code>,
<code>TABLE_NAME</code>, and <code>ORDINAL_POSITION</code>.

<P>Each column description has the following columns:
 <OL>
 <LI><B>TABLE_CAT</B> String {@code =>} table catalog (may be <code>null</code>)
 <LI><B>TABLE_SCHEM</B> String {@code =>} table schema (may be <code>null</code>)
 <LI><B>TABLE_NAME</B> String {@code =>} table name
 <LI><B>COLUMN_NAME</B> String {@code =>} column name
 <LI><B>DATA_TYPE</B> int {@code =>} SQL type from java.sql.Types
 <LI><B>TYPE_NAME</B> String {@code =>} Data source dependent type name,
 for a UDT the type name is fully qualified
 <LI><B>COLUMN_SIZE</B> int {@code =>} column size.
 <LI><B>BUFFER_LENGTH</B> is not used.
 <LI><B>DECIMAL_DIGITS</B> int {@code =>} the number of fractional digits. Null is returned for data types where
DECIMAL_DIGITS is not applicable.
 <LI><B>NUM_PREC_RADIX</B> int {@code =>} Radix (typically either 10 or 2)
 <LI><B>NULLABLE</B> int {@code =>} is NULL allowed.
     <UL>
     <LI> columnNoNulls - might not allow <code>NULL</code> values
     <LI> columnNullable - definitely allows <code>NULL</code> values
     <LI> columnNullableUnknown - nullability unknown
     </UL>
 <LI><B>REMARKS</B> String {@code =>} comment describing column (may be <code>null</code>)
 <LI><B>COLUMN_DEF</B> String {@code =>} default value for the column, which should be interpreted as a string when the value is enclosed in single quotes (may be <code>null</code>)
 <LI><B>SQL_DATA_TYPE</B> int {@code =>} unused
 <LI><B>SQL_DATETIME_SUB</B> int {@code =>} unused
 <LI><B>CHAR_OCTET_LENGTH</B> int {@code =>} for char types the
      maximum number of bytes in the column
 <LI><B>ORDINAL_POSITION</B> int {@code =>} index of column in table
     (starting at 1)
 <LI><B>IS_NULLABLE</B> String  {@code =>} ISO rules are used to determine the nullability for a column.
      <UL>
      <LI> YES           --- if the column can include NULLs
      <LI> NO            --- if the column cannot include NULLs
      <LI> empty string  --- if the nullability for the
column is unknown
      </UL>
 <LI><B>SCOPE_CATALOG</B> String {@code =>} catalog of table that is the scope
     of a reference attribute (<code>null</code> if DATA_TYPE isn't REF)
 <LI><B>SCOPE_SCHEMA</B> String {@code =>} schema of table that is the scope
     of a reference attribute (<code>null</code> if the DATA_TYPE isn't REF)
 <LI><B>SCOPE_TABLE</B> String {@code =>} table name that this the scope
     of a reference attribute (<code>null</code> if the DATA_TYPE isn't REF)
 <LI><B>SOURCE_DATA_TYPE</B> short {@code =>} source type of a distinct type or user-generated
     Ref type, SQL type from java.sql.Types (<code>null</code> if DATA_TYPE
     isn't DISTINCT or user-generated REF)
  <LI><B>IS_AUTOINCREMENT</B> String  {@code =>} Indicates whether this column is auto incremented
      <UL>
      <LI> YES           --- if the column is auto incremented
      <LI> NO            --- if the column is not auto incremented
      <LI> empty string  --- if it cannot be determined whether the column is auto incremented
      </UL>
  <LI><B>IS_GENERATEDCOLUMN</B> String  {@code =>} Indicates whether this is a generated column
      <UL>
      <LI> YES           --- if this a generated column
      <LI> NO            --- if this not a generated column
      <LI> empty string  --- if it cannot be determined whether this is a generated column
      </UL>
 </OL>

<p>The COLUMN_SIZE column specifies the column size for the given column.
For numeric data, this is the maximum precision.  For character data, this is the length in characters.
For datetime datatypes, this is the length in characters of the String representation (assuming the
maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
this is the length in bytes. Null is returned for data types where the
column size is not applicable.

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param tableNamePattern a table name pattern; must match the
       table name as it is stored in the database
@param columnNamePattern a column name pattern; must match the column
       name as it is stored in the database
@return <code>ResultSet</code> - each row is a column description
@exception SQLException if a database access error occurs
@see #getSearchStringEscape
"
      end

      attribute 1879298 "columnNoNulls"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the column might not allow <code>NULL</code> values.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> returned by the method
<code>getColumns</code>.

"
      end

      attribute 1879426 "columnNullable"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the column definitely allows <code>NULL</code> values.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> returned by the method
<code>getColumns</code>.

"
      end

      attribute 1879554 "columnNullableUnknown"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the nullability of columns is unknown.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> returned by the method
<code>getColumns</code>.

"
      end

      operation 8151426 "getColumnPrivileges"
	public return_type class_ref 1037314 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schema" type class_ref 128130 // String
	  param inout name "table" type class_ref 128130 // String
	  param inout name "columnNamePattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the access rights for a table's columns.

<P>Only privileges matching the column name criteria are
returned.  They are ordered by COLUMN_NAME and PRIVILEGE.

<P>Each privilege description has the following columns:
 <OL>
 <LI><B>TABLE_CAT</B> String {@code =>} table catalog (may be <code>null</code>)
 <LI><B>TABLE_SCHEM</B> String {@code =>} table schema (may be <code>null</code>)
 <LI><B>TABLE_NAME</B> String {@code =>} table name
 <LI><B>COLUMN_NAME</B> String {@code =>} column name
 <LI><B>GRANTOR</B> String {@code =>} grantor of access (may be <code>null</code>)
 <LI><B>GRANTEE</B> String {@code =>} grantee of access
 <LI><B>PRIVILEGE</B> String {@code =>} name of access (SELECT,
     INSERT, UPDATE, REFRENCES, ...)
 <LI><B>IS_GRANTABLE</B> String {@code =>} \"YES\" if grantee is permitted
     to grant to others; \"NO\" if not; <code>null</code> if unknown
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name as it is
       stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is
       stored in the database
@param columnNamePattern a column name pattern; must match the column
       name as it is stored in the database
@return <code>ResultSet</code> - each row is a column privilege description
@exception SQLException if a database access error occurs
@see #getSearchStringEscape
"
      end

      operation 8151554 "getTablePrivileges"
	public return_type class_ref 1037314 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schemaPattern" type class_ref 128130 // String
	  param inout name "tableNamePattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the access rights for each table available
in a catalog. Note that a table privilege applies to one or
more columns in the table. It would be wrong to assume that
this privilege applies to all columns (this may be true for
some systems but is not true for all.)

<P>Only privileges matching the schema and table name
criteria are returned.  They are ordered by
<code>TABLE_CAT</code>,
<code>TABLE_SCHEM</code>, <code>TABLE_NAME</code>,
and <code>PRIVILEGE</code>.

<P>Each privilege description has the following columns:
 <OL>
 <LI><B>TABLE_CAT</B> String {@code =>} table catalog (may be <code>null</code>)
 <LI><B>TABLE_SCHEM</B> String {@code =>} table schema (may be <code>null</code>)
 <LI><B>TABLE_NAME</B> String {@code =>} table name
 <LI><B>GRANTOR</B> String {@code =>} grantor of access (may be <code>null</code>)
 <LI><B>GRANTEE</B> String {@code =>} grantee of access
 <LI><B>PRIVILEGE</B> String {@code =>} name of access (SELECT,
     INSERT, UPDATE, REFRENCES, ...)
 <LI><B>IS_GRANTABLE</B> String {@code =>} \"YES\" if grantee is permitted
     to grant to others; \"NO\" if not; <code>null</code> if unknown
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param tableNamePattern a table name pattern; must match the
       table name as it is stored in the database
@return <code>ResultSet</code> - each row is a table privilege description
@exception SQLException if a database access error occurs
@see #getSearchStringEscape
"
      end

      operation 8151682 "getBestRowIdentifier"
	public return_type class_ref 1037314 // ResultSet
	nparams 5
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schema" type class_ref 128130 // String
	  param inout name "table" type class_ref 128130 // String
	  param in name "scope" explicit_type "int"
	  param inout name "nullable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of a table's optimal set of columns that
uniquely identifies a row. They are ordered by SCOPE.

<P>Each column description has the following columns:
 <OL>
 <LI><B>SCOPE</B> short {@code =>} actual scope of result
     <UL>
     <LI> bestRowTemporary - very temporary, while using row
     <LI> bestRowTransaction - valid for remainder of current transaction
     <LI> bestRowSession - valid for remainder of current session
     </UL>
 <LI><B>COLUMN_NAME</B> String {@code =>} column name
 <LI><B>DATA_TYPE</B> int {@code =>} SQL data type from java.sql.Types
 <LI><B>TYPE_NAME</B> String {@code =>} Data source dependent type name,
 for a UDT the type name is fully qualified
 <LI><B>COLUMN_SIZE</B> int {@code =>} precision
 <LI><B>BUFFER_LENGTH</B> int {@code =>} not used
 <LI><B>DECIMAL_DIGITS</B> short  {@code =>} scale - Null is returned for data types where
DECIMAL_DIGITS is not applicable.
 <LI><B>PSEUDO_COLUMN</B> short {@code =>} is this a pseudo column
     like an Oracle ROWID
     <UL>
     <LI> bestRowUnknown - may or may not be pseudo column
     <LI> bestRowNotPseudo - is NOT a pseudo column
     <LI> bestRowPseudo - is a pseudo column
     </UL>
 </OL>

<p>The COLUMN_SIZE column represents the specified column size for the given column.
For numeric data, this is the maximum precision.  For character data, this is the length in characters.
For datetime datatypes, this is the length in characters of the String representation (assuming the
maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
this is the length in bytes. Null is returned for data types where the
column size is not applicable.

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is stored
       in the database
@param scope the scope of interest; use same values as SCOPE
@param nullable include columns that are nullable.
@return <code>ResultSet</code> - each row is a column description
@exception SQLException if a database access error occurs
"
      end

      attribute 1879682 "bestRowTemporary"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the scope of the best row identifier is
very temporary, lasting only while the
row is being used.
<P>
A possible value for the column
<code>SCOPE</code>
in the <code>ResultSet</code> object
returned by the method <code>getBestRowIdentifier</code>.

"
      end

      attribute 1879810 "bestRowTransaction"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the scope of the best row identifier is
the remainder of the current transaction.
<P>
A possible value for the column
<code>SCOPE</code>
in the <code>ResultSet</code> object
returned by the method <code>getBestRowIdentifier</code>.

"
      end

      attribute 1879938 "bestRowSession"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the scope of the best row identifier is
the remainder of the current session.
<P>
A possible value for the column
<code>SCOPE</code>
in the <code>ResultSet</code> object
returned by the method <code>getBestRowIdentifier</code>.

"
      end

      attribute 1880066 "bestRowUnknown"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the best row identifier may or may not be a pseudo column.
<P>
A possible value for the column
<code>PSEUDO_COLUMN</code>
in the <code>ResultSet</code> object
returned by the method <code>getBestRowIdentifier</code>.

"
      end

      attribute 1880194 "bestRowNotPseudo"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the best row identifier is NOT a pseudo column.
<P>
A possible value for the column
<code>PSEUDO_COLUMN</code>
in the <code>ResultSet</code> object
returned by the method <code>getBestRowIdentifier</code>.

"
      end

      attribute 1880322 "bestRowPseudo"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the best row identifier is a pseudo column.
<P>
A possible value for the column
<code>PSEUDO_COLUMN</code>
in the <code>ResultSet</code> object
returned by the method <code>getBestRowIdentifier</code>.

"
      end

      operation 8151810 "getVersionColumns"
	public return_type class_ref 1037314 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schema" type class_ref 128130 // String
	  param inout name "table" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of a table's columns that are automatically
updated when any value in a row is updated.  They are
unordered.

<P>Each column description has the following columns:
 <OL>
 <LI><B>SCOPE</B> short {@code =>} is not used
 <LI><B>COLUMN_NAME</B> String {@code =>} column name
 <LI><B>DATA_TYPE</B> int {@code =>} SQL data type from <code>java.sql.Types</code>
 <LI><B>TYPE_NAME</B> String {@code =>} Data source-dependent type name
 <LI><B>COLUMN_SIZE</B> int {@code =>} precision
 <LI><B>BUFFER_LENGTH</B> int {@code =>} length of column value in bytes
 <LI><B>DECIMAL_DIGITS</B> short  {@code =>} scale - Null is returned for data types where
DECIMAL_DIGITS is not applicable.
 <LI><B>PSEUDO_COLUMN</B> short {@code =>} whether this is pseudo column
     like an Oracle ROWID
     <UL>
     <LI> versionColumnUnknown - may or may not be pseudo column
     <LI> versionColumnNotPseudo - is NOT a pseudo column
     <LI> versionColumnPseudo - is a pseudo column
     </UL>
 </OL>

<p>The COLUMN_SIZE column represents the specified column size for the given column.
For numeric data, this is the maximum precision.  For character data, this is the length in characters.
For datetime datatypes, this is the length in characters of the String representation (assuming the
maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
this is the length in bytes. Null is returned for data types where the
column size is not applicable.
@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is stored
       in the database
@return a <code>ResultSet</code> object in which each row is a
        column description
@exception SQLException if a database access error occurs
"
      end

      attribute 1880450 "versionColumnUnknown"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that this version column may or may not be a pseudo column.
<P>
A possible value for the column
<code>PSEUDO_COLUMN</code>
in the <code>ResultSet</code> object
returned by the method <code>getVersionColumns</code>.

"
      end

      attribute 1880578 "versionColumnNotPseudo"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that this version column is NOT a pseudo column.
<P>
A possible value for the column
<code>PSEUDO_COLUMN</code>
in the <code>ResultSet</code> object
returned by the method <code>getVersionColumns</code>.

"
      end

      attribute 1880706 "versionColumnPseudo"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that this version column is a pseudo column.
<P>
A possible value for the column
<code>PSEUDO_COLUMN</code>
in the <code>ResultSet</code> object
returned by the method <code>getVersionColumns</code>.

"
      end

      operation 8151938 "getPrimaryKeys"
	public return_type class_ref 1037314 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schema" type class_ref 128130 // String
	  param inout name "table" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the given table's primary key columns.  They
are ordered by COLUMN_NAME.

<P>Each primary key column description has the following columns:
 <OL>
 <LI><B>TABLE_CAT</B> String {@code =>} table catalog (may be <code>null</code>)
 <LI><B>TABLE_SCHEM</B> String {@code =>} table schema (may be <code>null</code>)
 <LI><B>TABLE_NAME</B> String {@code =>} table name
 <LI><B>COLUMN_NAME</B> String {@code =>} column name
 <LI><B>KEY_SEQ</B> short {@code =>} sequence number within primary key( a value
 of 1 represents the first column of the primary key, a value of 2 would
 represent the second column within the primary key).
 <LI><B>PK_NAME</B> String {@code =>} primary key name (may be <code>null</code>)
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is stored
       in the database
@return <code>ResultSet</code> - each row is a primary key column description
@exception SQLException if a database access error occurs
"
      end

      operation 8152066 "getImportedKeys"
	public return_type class_ref 1037314 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schema" type class_ref 128130 // String
	  param inout name "table" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the primary key columns that are
referenced by the given table's foreign key columns (the primary keys
imported by a table).  They are ordered by PKTABLE_CAT,
PKTABLE_SCHEM, PKTABLE_NAME, and KEY_SEQ.

<P>Each primary key column description has the following columns:
 <OL>
 <LI><B>PKTABLE_CAT</B> String {@code =>} primary key table catalog
     being imported (may be <code>null</code>)
 <LI><B>PKTABLE_SCHEM</B> String {@code =>} primary key table schema
     being imported (may be <code>null</code>)
 <LI><B>PKTABLE_NAME</B> String {@code =>} primary key table name
     being imported
 <LI><B>PKCOLUMN_NAME</B> String {@code =>} primary key column name
     being imported
 <LI><B>FKTABLE_CAT</B> String {@code =>} foreign key table catalog (may be <code>null</code>)
 <LI><B>FKTABLE_SCHEM</B> String {@code =>} foreign key table schema (may be <code>null</code>)
 <LI><B>FKTABLE_NAME</B> String {@code =>} foreign key table name
 <LI><B>FKCOLUMN_NAME</B> String {@code =>} foreign key column name
 <LI><B>KEY_SEQ</B> short {@code =>} sequence number within a foreign key( a value
 of 1 represents the first column of the foreign key, a value of 2 would
 represent the second column within the foreign key).
 <LI><B>UPDATE_RULE</B> short {@code =>} What happens to a
      foreign key when the primary key is updated:
     <UL>
     <LI> importedNoAction - do not allow update of primary
              key if it has been imported
     <LI> importedKeyCascade - change imported key to agree
              with primary key update
     <LI> importedKeySetNull - change imported key to <code>NULL</code>
              if its primary key has been updated
     <LI> importedKeySetDefault - change imported key to default values
              if its primary key has been updated
     <LI> importedKeyRestrict - same as importedKeyNoAction
                                (for ODBC 2.x compatibility)
     </UL>
 <LI><B>DELETE_RULE</B> short {@code =>} What happens to
     the foreign key when primary is deleted.
     <UL>
     <LI> importedKeyNoAction - do not allow delete of primary
              key if it has been imported
     <LI> importedKeyCascade - delete rows that import a deleted key
     <LI> importedKeySetNull - change imported key to NULL if
              its primary key has been deleted
     <LI> importedKeyRestrict - same as importedKeyNoAction
                                (for ODBC 2.x compatibility)
     <LI> importedKeySetDefault - change imported key to default if
              its primary key has been deleted
     </UL>
 <LI><B>FK_NAME</B> String {@code =>} foreign key name (may be <code>null</code>)
 <LI><B>PK_NAME</B> String {@code =>} primary key name (may be <code>null</code>)
 <LI><B>DEFERRABILITY</B> short {@code =>} can the evaluation of foreign key
     constraints be deferred until commit
     <UL>
     <LI> importedKeyInitiallyDeferred - see SQL92 for definition
     <LI> importedKeyInitiallyImmediate - see SQL92 for definition
     <LI> importedKeyNotDeferrable - see SQL92 for definition
     </UL>
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is stored
       in the database
@return <code>ResultSet</code> - each row is a primary key column description
@exception SQLException if a database access error occurs
@see #getExportedKeys
"
      end

      attribute 1880834 "importedKeyCascade"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "For the column <code>UPDATE_RULE</code>,
indicates that
when the primary key is updated, the foreign key (imported key)
is changed to agree with it.
For the column <code>DELETE_RULE</code>,
it indicates that
when the primary key is deleted, rows that imported that key
are deleted.
<P>
A possible value for the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code> in the
<code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.

"
      end

      attribute 1880962 "importedKeyRestrict"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "For the column <code>UPDATE_RULE</code>, indicates that
a primary key may not be updated if it has been imported by
another table as a foreign key.
For the column <code>DELETE_RULE</code>, indicates that
a primary key may not be deleted if it has been imported by
another table as a foreign key.
<P>
A possible value for the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code> in the
<code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.

"
      end

      attribute 1881090 "importedKeySetNull"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "For the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code>, indicates that
when the primary key is updated or deleted, the foreign key (imported key)
is changed to <code>NULL</code>.
<P>
A possible value for the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code> in the
<code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.

"
      end

      attribute 1881218 "importedKeyNoAction"
	public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "For the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code>, indicates that
if the primary key has been imported, it cannot be updated or deleted.
<P>
A possible value for the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code> in the
<code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.

"
      end

      attribute 1881346 "importedKeySetDefault"
	public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "For the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code>, indicates that
if the primary key is updated or deleted, the foreign key (imported key)
is set to the default value.
<P>
A possible value for the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code> in the
<code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.

"
      end

      attribute 1881474 "importedKeyInitiallyDeferred"
	public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates deferrability.  See SQL-92 for a definition.
<P>
A possible value for the column <code>DEFERRABILITY</code>
in the <code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.

"
      end

      attribute 1881602 "importedKeyInitiallyImmediate"
	public explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates deferrability.  See SQL-92 for a definition.
<P>
A possible value for the column <code>DEFERRABILITY</code>
in the <code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.

"
      end

      attribute 1881730 "importedKeyNotDeferrable"
	public explicit_type "int"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates deferrability.  See SQL-92 for a definition.
<P>
A possible value for the column <code>DEFERRABILITY</code>
in the <code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.

"
      end

      operation 8152194 "getExportedKeys"
	public return_type class_ref 1037314 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schema" type class_ref 128130 // String
	  param inout name "table" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the foreign key columns that reference the
given table's primary key columns (the foreign keys exported by a
table).  They are ordered by FKTABLE_CAT, FKTABLE_SCHEM,
FKTABLE_NAME, and KEY_SEQ.

<P>Each foreign key column description has the following columns:
 <OL>
 <LI><B>PKTABLE_CAT</B> String {@code =>} primary key table catalog (may be <code>null</code>)
 <LI><B>PKTABLE_SCHEM</B> String {@code =>} primary key table schema (may be <code>null</code>)
 <LI><B>PKTABLE_NAME</B> String {@code =>} primary key table name
 <LI><B>PKCOLUMN_NAME</B> String {@code =>} primary key column name
 <LI><B>FKTABLE_CAT</B> String {@code =>} foreign key table catalog (may be <code>null</code>)
     being exported (may be <code>null</code>)
 <LI><B>FKTABLE_SCHEM</B> String {@code =>} foreign key table schema (may be <code>null</code>)
     being exported (may be <code>null</code>)
 <LI><B>FKTABLE_NAME</B> String {@code =>} foreign key table name
     being exported
 <LI><B>FKCOLUMN_NAME</B> String {@code =>} foreign key column name
     being exported
 <LI><B>KEY_SEQ</B> short {@code =>} sequence number within foreign key( a value
 of 1 represents the first column of the foreign key, a value of 2 would
 represent the second column within the foreign key).
 <LI><B>UPDATE_RULE</B> short {@code =>} What happens to
      foreign key when primary is updated:
     <UL>
     <LI> importedNoAction - do not allow update of primary
              key if it has been imported
     <LI> importedKeyCascade - change imported key to agree
              with primary key update
     <LI> importedKeySetNull - change imported key to <code>NULL</code> if
              its primary key has been updated
     <LI> importedKeySetDefault - change imported key to default values
              if its primary key has been updated
     <LI> importedKeyRestrict - same as importedKeyNoAction
                                (for ODBC 2.x compatibility)
     </UL>
 <LI><B>DELETE_RULE</B> short {@code =>} What happens to
     the foreign key when primary is deleted.
     <UL>
     <LI> importedKeyNoAction - do not allow delete of primary
              key if it has been imported
     <LI> importedKeyCascade - delete rows that import a deleted key
     <LI> importedKeySetNull - change imported key to <code>NULL</code> if
              its primary key has been deleted
     <LI> importedKeyRestrict - same as importedKeyNoAction
                                (for ODBC 2.x compatibility)
     <LI> importedKeySetDefault - change imported key to default if
              its primary key has been deleted
     </UL>
 <LI><B>FK_NAME</B> String {@code =>} foreign key name (may be <code>null</code>)
 <LI><B>PK_NAME</B> String {@code =>} primary key name (may be <code>null</code>)
 <LI><B>DEFERRABILITY</B> short {@code =>} can the evaluation of foreign key
     constraints be deferred until commit
     <UL>
     <LI> importedKeyInitiallyDeferred - see SQL92 for definition
     <LI> importedKeyInitiallyImmediate - see SQL92 for definition
     <LI> importedKeyNotDeferrable - see SQL92 for definition
     </UL>
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in this database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is stored
       in this database
@return a <code>ResultSet</code> object in which each row is a
        foreign key column description
@exception SQLException if a database access error occurs
@see #getImportedKeys
"
      end

      operation 8152322 "getCrossReference"
	public return_type class_ref 1037314 // ResultSet
	nparams 6
	  param inout name "parentCatalog" type class_ref 128130 // String
	  param inout name "parentSchema" type class_ref 128130 // String
	  param inout name "parentTable" type class_ref 128130 // String
	  param inout name "foreignCatalog" type class_ref 128130 // String
	  param inout name "foreignSchema" type class_ref 128130 // String
	  param inout name "foreignTable" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the foreign key columns in the given foreign key
table that reference the primary key or the columns representing a unique constraint of the  parent table (could be the same or a different table).
The number of columns returned from the parent table must match the number of
columns that make up the foreign key.  They
are ordered by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, and
KEY_SEQ.

<P>Each foreign key column description has the following columns:
 <OL>
 <LI><B>PKTABLE_CAT</B> String {@code =>} parent key table catalog (may be <code>null</code>)
 <LI><B>PKTABLE_SCHEM</B> String {@code =>} parent key table schema (may be <code>null</code>)
 <LI><B>PKTABLE_NAME</B> String {@code =>} parent key table name
 <LI><B>PKCOLUMN_NAME</B> String {@code =>} parent key column name
 <LI><B>FKTABLE_CAT</B> String {@code =>} foreign key table catalog (may be <code>null</code>)
     being exported (may be <code>null</code>)
 <LI><B>FKTABLE_SCHEM</B> String {@code =>} foreign key table schema (may be <code>null</code>)
     being exported (may be <code>null</code>)
 <LI><B>FKTABLE_NAME</B> String {@code =>} foreign key table name
     being exported
 <LI><B>FKCOLUMN_NAME</B> String {@code =>} foreign key column name
     being exported
 <LI><B>KEY_SEQ</B> short {@code =>} sequence number within foreign key( a value
 of 1 represents the first column of the foreign key, a value of 2 would
 represent the second column within the foreign key).
 <LI><B>UPDATE_RULE</B> short {@code =>} What happens to
      foreign key when parent key is updated:
     <UL>
     <LI> importedNoAction - do not allow update of parent
              key if it has been imported
     <LI> importedKeyCascade - change imported key to agree
              with parent key update
     <LI> importedKeySetNull - change imported key to <code>NULL</code> if
              its parent key has been updated
     <LI> importedKeySetDefault - change imported key to default values
              if its parent key has been updated
     <LI> importedKeyRestrict - same as importedKeyNoAction
                                (for ODBC 2.x compatibility)
     </UL>
 <LI><B>DELETE_RULE</B> short {@code =>} What happens to
     the foreign key when parent key is deleted.
     <UL>
     <LI> importedKeyNoAction - do not allow delete of parent
              key if it has been imported
     <LI> importedKeyCascade - delete rows that import a deleted key
     <LI> importedKeySetNull - change imported key to <code>NULL</code> if
              its primary key has been deleted
     <LI> importedKeyRestrict - same as importedKeyNoAction
                                (for ODBC 2.x compatibility)
     <LI> importedKeySetDefault - change imported key to default if
              its parent key has been deleted
     </UL>
 <LI><B>FK_NAME</B> String {@code =>} foreign key name (may be <code>null</code>)
 <LI><B>PK_NAME</B> String {@code =>} parent key name (may be <code>null</code>)
 <LI><B>DEFERRABILITY</B> short {@code =>} can the evaluation of foreign key
     constraints be deferred until commit
     <UL>
     <LI> importedKeyInitiallyDeferred - see SQL92 for definition
     <LI> importedKeyInitiallyImmediate - see SQL92 for definition
     <LI> importedKeyNotDeferrable - see SQL92 for definition
     </UL>
 </OL>

@param parentCatalog a catalog name; must match the catalog name
as it is stored in the database; \"\" retrieves those without a
catalog; <code>null</code> means drop catalog name from the selection criteria
@param parentSchema a schema name; must match the schema name as
it is stored in the database; \"\" retrieves those without a schema;
<code>null</code> means drop schema name from the selection criteria
@param parentTable the name of the table that exports the key; must match
the table name as it is stored in the database
@param foreignCatalog a catalog name; must match the catalog name as
it is stored in the database; \"\" retrieves those without a
catalog; <code>null</code> means drop catalog name from the selection criteria
@param foreignSchema a schema name; must match the schema name as it
is stored in the database; \"\" retrieves those without a schema;
<code>null</code> means drop schema name from the selection criteria
@param foreignTable the name of the table that imports the key; must match
the table name as it is stored in the database
@return <code>ResultSet</code> - each row is a foreign key column description
@exception SQLException if a database access error occurs
@see #getImportedKeys
"
      end

      operation 8152450 "getTypeInfo"
	public return_type class_ref 1037314 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of all the data types supported by
this database. They are ordered by DATA_TYPE and then by how
closely the data type maps to the corresponding JDBC SQL type.

<P>If the database supports SQL distinct types, then getTypeInfo() will return
a single row with a TYPE_NAME of DISTINCT and a DATA_TYPE of Types.DISTINCT.
If the database supports SQL structured types, then getTypeInfo() will return
a single row with a TYPE_NAME of STRUCT and a DATA_TYPE of Types.STRUCT.

<P>If SQL distinct or structured types are supported, then information on the
individual types may be obtained from the getUDTs() method.



<P>Each type description has the following columns:
 <OL>
 <LI><B>TYPE_NAME</B> String {@code =>} Type name
 <LI><B>DATA_TYPE</B> int {@code =>} SQL data type from java.sql.Types
 <LI><B>PRECISION</B> int {@code =>} maximum precision
 <LI><B>LITERAL_PREFIX</B> String {@code =>} prefix used to quote a literal
     (may be <code>null</code>)
 <LI><B>LITERAL_SUFFIX</B> String {@code =>} suffix used to quote a literal
(may be <code>null</code>)
 <LI><B>CREATE_PARAMS</B> String {@code =>} parameters used in creating
     the type (may be <code>null</code>)
 <LI><B>NULLABLE</B> short {@code =>} can you use NULL for this type.
     <UL>
     <LI> typeNoNulls - does not allow NULL values
     <LI> typeNullable - allows NULL values
     <LI> typeNullableUnknown - nullability unknown
     </UL>
 <LI><B>CASE_SENSITIVE</B> boolean{@code =>} is it case sensitive.
 <LI><B>SEARCHABLE</B> short {@code =>} can you use \"WHERE\" based on this type:
     <UL>
     <LI> typePredNone - No support
     <LI> typePredChar - Only supported with WHERE .. LIKE
     <LI> typePredBasic - Supported except for WHERE .. LIKE
     <LI> typeSearchable - Supported for all WHERE ..
     </UL>
 <LI><B>UNSIGNED_ATTRIBUTE</B> boolean {@code =>} is it unsigned.
 <LI><B>FIXED_PREC_SCALE</B> boolean {@code =>} can it be a money value.
 <LI><B>AUTO_INCREMENT</B> boolean {@code =>} can it be used for an
     auto-increment value.
 <LI><B>LOCAL_TYPE_NAME</B> String {@code =>} localized version of type name
     (may be <code>null</code>)
 <LI><B>MINIMUM_SCALE</B> short {@code =>} minimum scale supported
 <LI><B>MAXIMUM_SCALE</B> short {@code =>} maximum scale supported
 <LI><B>SQL_DATA_TYPE</B> int {@code =>} unused
 <LI><B>SQL_DATETIME_SUB</B> int {@code =>} unused
 <LI><B>NUM_PREC_RADIX</B> int {@code =>} usually 2 or 10
 </OL>

<p>The PRECISION column represents the maximum column size that the server supports for the given datatype.
For numeric data, this is the maximum precision.  For character data, this is the length in characters.
For datetime datatypes, this is the length in characters of the String representation (assuming the
maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
this is the length in bytes. Null is returned for data types where the
column size is not applicable.

@return a <code>ResultSet</code> object in which each row is an SQL
        type description
@exception SQLException if a database access error occurs
"
      end

      attribute 1881858 "typeNoNulls"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that a <code>NULL</code> value is NOT allowed for this
data type.
<P>
A possible value for column <code>NULLABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.

"
      end

      attribute 1881986 "typeNullable"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that a <code>NULL</code> value is allowed for this
data type.
<P>
A possible value for column <code>NULLABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.

"
      end

      attribute 1882114 "typeNullableUnknown"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that it is not known whether a <code>NULL</code> value
is allowed for this data type.
<P>
A possible value for column <code>NULLABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.

"
      end

      attribute 1882242 "typePredNone"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that <code>WHERE</code> search clauses are not supported
for this type.
<P>
A possible value for column <code>SEARCHABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.

"
      end

      attribute 1882370 "typePredChar"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the data type
can be only be used in <code>WHERE</code> search clauses
that  use <code>LIKE</code> predicates.
<P>
A possible value for column <code>SEARCHABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.

"
      end

      attribute 1882498 "typePredBasic"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the data type can be only be used in <code>WHERE</code>
search clauses
that do not use <code>LIKE</code> predicates.
<P>
A possible value for column <code>SEARCHABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.

"
      end

      attribute 1882626 "typeSearchable"
	public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that all <code>WHERE</code> search clauses can be
based on this type.
<P>
A possible value for column <code>SEARCHABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.

"
      end

      operation 8152578 "getIndexInfo"
	public return_type class_ref 1037314 // ResultSet
	nparams 5
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schema" type class_ref 128130 // String
	  param inout name "table" type class_ref 128130 // String
	  param inout name "unique" explicit_type "boolean"
	  param inout name "approximate" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the given table's indices and statistics. They are
ordered by NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION.

<P>Each index column description has the following columns:
 <OL>
 <LI><B>TABLE_CAT</B> String {@code =>} table catalog (may be <code>null</code>)
 <LI><B>TABLE_SCHEM</B> String {@code =>} table schema (may be <code>null</code>)
 <LI><B>TABLE_NAME</B> String {@code =>} table name
 <LI><B>NON_UNIQUE</B> boolean {@code =>} Can index values be non-unique.
     false when TYPE is tableIndexStatistic
 <LI><B>INDEX_QUALIFIER</B> String {@code =>} index catalog (may be <code>null</code>);
     <code>null</code> when TYPE is tableIndexStatistic
 <LI><B>INDEX_NAME</B> String {@code =>} index name; <code>null</code> when TYPE is
     tableIndexStatistic
 <LI><B>TYPE</B> short {@code =>} index type:
     <UL>
     <LI> tableIndexStatistic - this identifies table statistics that are
          returned in conjuction with a table's index descriptions
     <LI> tableIndexClustered - this is a clustered index
     <LI> tableIndexHashed - this is a hashed index
     <LI> tableIndexOther - this is some other style of index
     </UL>
 <LI><B>ORDINAL_POSITION</B> short {@code =>} column sequence number
     within index; zero when TYPE is tableIndexStatistic
 <LI><B>COLUMN_NAME</B> String {@code =>} column name; <code>null</code> when TYPE is
     tableIndexStatistic
 <LI><B>ASC_OR_DESC</B> String {@code =>} column sort sequence, \"A\" {@code =>} ascending,
     \"D\" {@code =>} descending, may be <code>null</code> if sort sequence is not supported;
     <code>null</code> when TYPE is tableIndexStatistic
 <LI><B>CARDINALITY</B> long {@code =>} When TYPE is tableIndexStatistic, then
     this is the number of rows in the table; otherwise, it is the
     number of unique values in the index.
 <LI><B>PAGES</B> long {@code =>} When TYPE is  tableIndexStatisic then
     this is the number of pages used for the table, otherwise it
     is the number of pages used for the current index.
 <LI><B>FILTER_CONDITION</B> String {@code =>} Filter condition, if any.
     (may be <code>null</code>)
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in this database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name
       as it is stored in this database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is stored
       in this database
@param unique when true, return only indices for unique values;
    when false, return indices regardless of whether unique or not
@param approximate when true, result is allowed to reflect approximate
    or out of data values; when false, results are requested to be
    accurate
@return <code>ResultSet</code> - each row is an index column description
@exception SQLException if a database access error occurs
"
      end

      attribute 1882754 "tableIndexStatistic"
	public explicit_type "short"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that this column contains table statistics that
are returned in conjunction with a table's index descriptions.
<P>
A possible value for column <code>TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getIndexInfo</code>.

"
      end

      attribute 1882882 "tableIndexClustered"
	public explicit_type "short"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that this table index is a clustered index.
<P>
A possible value for column <code>TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getIndexInfo</code>.

"
      end

      attribute 1883010 "tableIndexHashed"
	public explicit_type "short"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that this table index is a hashed index.
<P>
A possible value for column <code>TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getIndexInfo</code>.

"
      end

      attribute 1883138 "tableIndexOther"
	public explicit_type "short"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that this table index is not a clustered
index, a hashed index, or table statistics;
it is something other than these.
<P>
A possible value for column <code>TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getIndexInfo</code>.

"
      end

      operation 8152706 "supportsResultSetType"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------

Retrieves whether this database supports the given result set type.

@param type defined in <code>java.sql.ResultSet</code>
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@see Connection
@since 1.2
"
      end

      operation 8152834 "supportsResultSetConcurrency"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "type" explicit_type "int"
	  param in name "concurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the given concurrency type
in combination with the given result set type.

@param type defined in <code>java.sql.ResultSet</code>
@param concurrency type defined in <code>java.sql.ResultSet</code>
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@see Connection
@since 1.2
"
      end

      operation 8152962 "ownUpdatesAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Retrieves whether for the given type of <code>ResultSet</code> object,
the result set's own updates are visible.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if updates are visible for the given result set type;
       <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2
"
      end

      operation 8153090 "ownDeletesAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a result set's own deletes are visible.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if deletes are visible for the given result set type;
       <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2
"
      end

      operation 8153218 "ownInsertsAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a result set's own inserts are visible.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if inserts are visible for the given result set type;
       <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2
"
      end

      operation 8153346 "othersUpdatesAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether updates made by others are visible.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if updates made by others
       are visible for the given result set type;
       <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2
"
      end

      operation 8153474 "othersDeletesAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether deletes made by others are visible.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if deletes made by others
       are visible for the given result set type;
       <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2
"
      end

      operation 8153602 "othersInsertsAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether inserts made by others are visible.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if inserts made by others
        are visible for the given result set type;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2
"
      end

      operation 8153730 "updatesAreDetected"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether or not a visible row update can be detected by
calling the method <code>ResultSet.rowUpdated</code>.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if changes are detected by the result set type;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2
"
      end

      operation 8153858 "deletesAreDetected"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether or not a visible row delete can be detected by
calling the method <code>ResultSet.rowDeleted</code>.  If the method
<code>deletesAreDetected</code> returns <code>false</code>, it means that
deleted rows are removed from the result set.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if deletes are detected by the given result set type;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2
"
      end

      operation 8153986 "insertsAreDetected"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether or not a visible row insert can be detected
by calling the method <code>ResultSet.rowInserted</code>.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if changes are detected by the specified result
        set type; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2
"
      end

      operation 8154114 "supportsBatchUpdates"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports batch updates.

@return <code>true</code> if this database supports batch updates;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2
"
      end

      operation 8154242 "getUDTs"
	public return_type class_ref 1037314 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schemaPattern" type class_ref 128130 // String
	  param inout name "typeNamePattern" type class_ref 128130 // String
	  param inout name "types" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the user-defined types (UDTs) defined
in a particular schema.  Schema-specific UDTs may have type
<code>JAVA_OBJECT</code>, <code>STRUCT</code>,
or <code>DISTINCT</code>.

<P>Only types matching the catalog, schema, type name and type
criteria are returned.  They are ordered by <code>DATA_TYPE</code>,
<code>TYPE_CAT</code>, <code>TYPE_SCHEM</code>  and
<code>TYPE_NAME</code>.  The type name parameter may be a fully-qualified
name.  In this case, the catalog and schemaPattern parameters are
ignored.

<P>Each type description has the following columns:
 <OL>
 <LI><B>TYPE_CAT</B> String {@code =>} the type's catalog (may be <code>null</code>)
 <LI><B>TYPE_SCHEM</B> String {@code =>} type's schema (may be <code>null</code>)
 <LI><B>TYPE_NAME</B> String {@code =>} type name
 <LI><B>CLASS_NAME</B> String {@code =>} Java class name
 <LI><B>DATA_TYPE</B> int {@code =>} type value defined in java.sql.Types.
    One of JAVA_OBJECT, STRUCT, or DISTINCT
 <LI><B>REMARKS</B> String {@code =>} explanatory comment on the type
 <LI><B>BASE_TYPE</B> short {@code =>} type code of the source type of a
    DISTINCT type or the type that implements the user-generated
    reference type of the SELF_REFERENCING_COLUMN of a structured
    type as defined in java.sql.Types (<code>null</code> if DATA_TYPE is not
    DISTINCT or not STRUCT with REFERENCE_GENERATION = USER_DEFINED)
 </OL>

<P><B>Note:</B> If the driver does not support UDTs, an empty
result set is returned.

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema pattern name; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param typeNamePattern a type name pattern; must match the type name
       as it is stored in the database; may be a fully qualified name
@param types a list of user-defined types (JAVA_OBJECT,
       STRUCT, or DISTINCT) to include; <code>null</code> returns all types
@return <code>ResultSet</code> object in which each row describes a UDT
@exception SQLException if a database access error occurs
@see #getSearchStringEscape
@since 1.2
"
      end

      operation 8154370 "getConnection"
	public return_type class_ref 1038338 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the connection that produced this metadata object.
<P>
@return the connection that produced this metadata object
@exception SQLException if a database access error occurs
@since 1.2
"
      end

      operation 8154498 "supportsSavepoints"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------- JDBC 3.0 -------------------------

Retrieves whether this database supports savepoints.

@return <code>true</code> if savepoints are supported;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8154626 "supportsNamedParameters"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports named parameters to callable
statements.

@return <code>true</code> if named parameters are supported;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8154754 "supportsMultipleOpenResults"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether it is possible to have multiple <code>ResultSet</code> objects
returned from a <code>CallableStatement</code> object
simultaneously.

@return <code>true</code> if a <code>CallableStatement</code> object
        can return multiple <code>ResultSet</code> objects
        simultaneously; <code>false</code> otherwise
@exception SQLException if a datanase access error occurs
@since 1.4
"
      end

      operation 8154882 "supportsGetGeneratedKeys"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether auto-generated keys can be retrieved after
a statement has been executed

@return <code>true</code> if auto-generated keys can be retrieved
        after a statement has executed; <code>false</code> otherwise
<p>If <code>true</code> is returned, the JDBC driver must support the
returning of auto-generated keys for at least SQL INSERT statements
<p>
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8155010 "getSuperTypes"
	public return_type class_ref 1037314 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schemaPattern" type class_ref 128130 // String
	  param inout name "typeNamePattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the user-defined type (UDT) hierarchies defined in a
particular schema in this database. Only the immediate super type/
sub type relationship is modeled.
<P>
Only supertype information for UDTs matching the catalog,
schema, and type name is returned. The type name parameter
may be a fully-qualified name. When the UDT name supplied is a
fully-qualified name, the catalog and schemaPattern parameters are
ignored.
<P>
If a UDT does not have a direct super type, it is not listed here.
A row of the <code>ResultSet</code> object returned by this method
describes the designated UDT and a direct supertype. A row has the following
columns:
 <OL>
 <LI><B>TYPE_CAT</B> String {@code =>} the UDT's catalog (may be <code>null</code>)
 <LI><B>TYPE_SCHEM</B> String {@code =>} UDT's schema (may be <code>null</code>)
 <LI><B>TYPE_NAME</B> String {@code =>} type name of the UDT
 <LI><B>SUPERTYPE_CAT</B> String {@code =>} the direct super type's catalog
                          (may be <code>null</code>)
 <LI><B>SUPERTYPE_SCHEM</B> String {@code =>} the direct super type's schema
                            (may be <code>null</code>)
 <LI><B>SUPERTYPE_NAME</B> String {@code =>} the direct super type's name
 </OL>

<P><B>Note:</B> If the driver does not support type hierarchies, an
empty result set is returned.

@param catalog a catalog name; \"\" retrieves those without a catalog;
       <code>null</code> means drop catalog name from the selection criteria
@param schemaPattern a schema name pattern; \"\" retrieves those
       without a schema
@param typeNamePattern a UDT name pattern; may be a fully-qualified
       name
@return a <code>ResultSet</code> object in which a row gives information
        about the designated UDT
@throws SQLException if a database access error occurs
@see #getSearchStringEscape
@since 1.4
"
      end

      operation 8155138 "getSuperTables"
	public return_type class_ref 1037314 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schemaPattern" type class_ref 128130 // String
	  param inout name "tableNamePattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the table hierarchies defined in a particular
schema in this database.

<P>Only supertable information for tables matching the catalog, schema
and table name are returned. The table name parameter may be a fully-
qualified name, in which case, the catalog and schemaPattern parameters
are ignored. If a table does not have a super table, it is not listed here.
Supertables have to be defined in the same catalog and schema as the
sub tables. Therefore, the type description does not need to include
this information for the supertable.

<P>Each type description has the following columns:
 <OL>
 <LI><B>TABLE_CAT</B> String {@code =>} the type's catalog (may be <code>null</code>)
 <LI><B>TABLE_SCHEM</B> String {@code =>} type's schema (may be <code>null</code>)
 <LI><B>TABLE_NAME</B> String {@code =>} type name
 <LI><B>SUPERTABLE_NAME</B> String {@code =>} the direct super type's name
 </OL>

<P><B>Note:</B> If the driver does not support type hierarchies, an
empty result set is returned.

@param catalog a catalog name; \"\" retrieves those without a catalog;
       <code>null</code> means drop catalog name from the selection criteria
@param schemaPattern a schema name pattern; \"\" retrieves those
       without a schema
@param tableNamePattern a table name pattern; may be a fully-qualified
       name
@return a <code>ResultSet</code> object in which each row is a type description
@throws SQLException if a database access error occurs
@see #getSearchStringEscape
@since 1.4
"
      end

      attribute 1883266 "attributeNoNulls"
	public explicit_type "short"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that <code>NULL</code> values might not be allowed.
<P>
A possible value for the column
<code>NULLABLE</code> in the <code>ResultSet</code> object
returned by the method <code>getAttributes</code>.

"
      end

      attribute 1883394 "attributeNullable"
	public explicit_type "short"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that <code>NULL</code> values are definitely allowed.
<P>
A possible value for the column <code>NULLABLE</code>
in the <code>ResultSet</code> object
returned by the method <code>getAttributes</code>.

"
      end

      attribute 1883522 "attributeNullableUnknown"
	public explicit_type "short"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that whether <code>NULL</code> values are allowed is not
known.
<P>
A possible value for the column <code>NULLABLE</code>
in the <code>ResultSet</code> object
returned by the method <code>getAttributes</code>.

"
      end

      operation 8155266 "getAttributes"
	public return_type class_ref 1037314 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schemaPattern" type class_ref 128130 // String
	  param inout name "typeNamePattern" type class_ref 128130 // String
	  param inout name "attributeNamePattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the given attribute of the given type
for a user-defined type (UDT) that is available in the given schema
and catalog.
<P>
Descriptions are returned only for attributes of UDTs matching the
catalog, schema, type, and attribute name criteria. They are ordered by
<code>TYPE_CAT</code>, <code>TYPE_SCHEM</code>,
<code>TYPE_NAME</code> and <code>ORDINAL_POSITION</code>. This description
does not contain inherited attributes.
<P>
The <code>ResultSet</code> object that is returned has the following
columns:
<OL>
 <LI><B>TYPE_CAT</B> String {@code =>} type catalog (may be <code>null</code>)
 <LI><B>TYPE_SCHEM</B> String {@code =>} type schema (may be <code>null</code>)
 <LI><B>TYPE_NAME</B> String {@code =>} type name
 <LI><B>ATTR_NAME</B> String {@code =>} attribute name
 <LI><B>DATA_TYPE</B> int {@code =>} attribute type SQL type from java.sql.Types
 <LI><B>ATTR_TYPE_NAME</B> String {@code =>} Data source dependent type name.
 For a UDT, the type name is fully qualified. For a REF, the type name is
 fully qualified and represents the target type of the reference type.
 <LI><B>ATTR_SIZE</B> int {@code =>} column size.  For char or date
     types this is the maximum number of characters; for numeric or
     decimal types this is precision.
 <LI><B>DECIMAL_DIGITS</B> int {@code =>} the number of fractional digits. Null is returned for data types where
DECIMAL_DIGITS is not applicable.
 <LI><B>NUM_PREC_RADIX</B> int {@code =>} Radix (typically either 10 or 2)
 <LI><B>NULLABLE</B> int {@code =>} whether NULL is allowed
     <UL>
     <LI> attributeNoNulls - might not allow NULL values
     <LI> attributeNullable - definitely allows NULL values
     <LI> attributeNullableUnknown - nullability unknown
     </UL>
 <LI><B>REMARKS</B> String {@code =>} comment describing column (may be <code>null</code>)
 <LI><B>ATTR_DEF</B> String {@code =>} default value (may be <code>null</code>)
 <LI><B>SQL_DATA_TYPE</B> int {@code =>} unused
 <LI><B>SQL_DATETIME_SUB</B> int {@code =>} unused
 <LI><B>CHAR_OCTET_LENGTH</B> int {@code =>} for char types the
      maximum number of bytes in the column
 <LI><B>ORDINAL_POSITION</B> int {@code =>} index of the attribute in the UDT
     (starting at 1)
 <LI><B>IS_NULLABLE</B> String  {@code =>} ISO rules are used to determine
the nullability for a attribute.
      <UL>
      <LI> YES           --- if the attribute can include NULLs
      <LI> NO            --- if the attribute cannot include NULLs
      <LI> empty string  --- if the nullability for the
attribute is unknown
      </UL>
 <LI><B>SCOPE_CATALOG</B> String {@code =>} catalog of table that is the
     scope of a reference attribute (<code>null</code> if DATA_TYPE isn't REF)
 <LI><B>SCOPE_SCHEMA</B> String {@code =>} schema of table that is the
     scope of a reference attribute (<code>null</code> if DATA_TYPE isn't REF)
 <LI><B>SCOPE_TABLE</B> String {@code =>} table name that is the scope of a
     reference attribute (<code>null</code> if the DATA_TYPE isn't REF)
<LI><B>SOURCE_DATA_TYPE</B> short {@code =>} source type of a distinct type or user-generated
     Ref type,SQL type from java.sql.Types (<code>null</code> if DATA_TYPE
     isn't DISTINCT or user-generated REF)
 </OL>
@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param typeNamePattern a type name pattern; must match the
       type name as it is stored in the database
@param attributeNamePattern an attribute name pattern; must match the attribute
       name as it is declared in the database
@return a <code>ResultSet</code> object in which each row is an
        attribute description
@exception SQLException if a database access error occurs
@see #getSearchStringEscape
@since 1.4
"
      end

      operation 8155394 "supportsResultSetHoldability"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "holdability" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the given result set holdability.

@param holdability one of the following constants:
         <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@see Connection
@since 1.4
"
      end

      operation 8155522 "getResultSetHoldability"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this database's default holdability for <code>ResultSet</code>
objects.

@return the default holdability; either
        <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8155650 "getDatabaseMajorVersion"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the major version number of the underlying database.

@return the underlying database's major version
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8155778 "getDatabaseMinorVersion"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the minor version number of the underlying database.

@return underlying database's minor version
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8155906 "getJDBCMajorVersion"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the major JDBC version number for this
driver.

@return JDBC version major number
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8156034 "getJDBCMinorVersion"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the minor JDBC version number for this
driver.

@return JDBC version minor number
@exception SQLException if a database access error occurs
@since 1.4
"
      end

      attribute 1883650 "sqlStateXOpen"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A possible return value for the method
<code>DatabaseMetaData.getSQLStateType</code> which is used to indicate
whether the value returned by the method
<code>SQLException.getSQLState</code> is an
X/Open (now know as Open Group) SQL CLI SQLSTATE value.
<P>
@since 1.4

"
      end

      attribute 1883778 "sqlStateSQL"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A possible return value for the method
<code>DatabaseMetaData.getSQLStateType</code> which is used to indicate
whether the value returned by the method
<code>SQLException.getSQLState</code> is an SQLSTATE value.
<P>
@since 1.6

"
      end

      attribute 1883906 "sqlStateSQL99"
	public explicit_type "int"
	init_value " sqlStateSQL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A possible return value for the method
<code>DatabaseMetaData.getSQLStateType</code> which is used to indicate
whether the value returned by the method
<code>SQLException.getSQLState</code> is an SQL99 SQLSTATE value.
<P>
<b>Note:</b>This constant remains only for compatibility reasons. Developers
should use the constant <code>sqlStateSQL</code> instead.

@since 1.4

"
      end

      operation 8156162 "getSQLStateType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the SQLSTATE returned by <code>SQLException.getSQLState</code>
is X/Open (now known as Open Group) SQL CLI or SQL:2003.
@return the type of SQLSTATE; one of:
       sqlStateXOpen or
       sqlStateSQL
@throws SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8156290 "locatorsUpdateCopy"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether updates made to a LOB are made on a copy or directly
to the LOB.
@return <code>true</code> if updates are made to a copy of the LOB;
        <code>false</code> if updates are made directly to the LOB
@throws SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8156418 "supportsStatementPooling"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports statement pooling.

@return <code>true</code> if so; <code>false</code> otherwise
@throws SQLException if a database access error occurs
@since 1.4
"
      end

      operation 8156546 "getRowIdLifetime"
	public return_type class_ref 1040514 // RowIdLifetime
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------- JDBC 4.0 -----------------------------------

Indicates whether or not this data source supports the SQL <code>ROWID</code> type,
and if so  the lifetime for which a <code>RowId</code> object remains valid.
<p>
The returned int values have the following relationship:
<pre>{@code
    ROWID_UNSUPPORTED < ROWID_VALID_OTHER < ROWID_VALID_TRANSACTION
        < ROWID_VALID_SESSION < ROWID_VALID_FOREVER
}</pre>
so conditional logic such as
<pre>{@code
    if (metadata.getRowIdLifetime() > DatabaseMetaData.ROWID_VALID_TRANSACTION)
}</pre>
can be used. Valid Forever means valid across all Sessions, and valid for
a Session means valid across all its contained Transactions.

@return the status indicating the lifetime of a <code>RowId</code>
@throws SQLException if a database access error occurs
@since 1.6
"
      end

      operation 8156674 "getSchemas"
	public return_type class_ref 1037314 // ResultSet
	nparams 2
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schemaPattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the schema names available in this database.  The results
are ordered by <code>TABLE_CATALOG</code> and
<code>TABLE_SCHEM</code>.

<P>The schema columns are:
 <OL>
 <LI><B>TABLE_SCHEM</B> String {@code =>} schema name
 <LI><B>TABLE_CATALOG</B> String {@code =>} catalog name (may be <code>null</code>)
 </OL>


@param catalog a catalog name; must match the catalog name as it is stored
in the database;\"\" retrieves those without a catalog; null means catalog
name should not be used to narrow down the search.
@param schemaPattern a schema name; must match the schema name as it is
stored in the database; null means
schema name should not be used to narrow down the search.
@return a <code>ResultSet</code> object in which each row is a
        schema description
@exception SQLException if a database access error occurs
@see #getSearchStringEscape
@since 1.6
"
      end

      operation 8156802 "supportsStoredFunctionsUsingCallSyntax"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports invoking user-defined or vendor functions
using the stored procedure escape syntax.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.6
"
      end

      operation 8156930 "autoCommitFailureClosesAllResultSets"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a <code>SQLException</code> while autoCommit is <code>true</code> indicates
that all open ResultSets are closed, even ones that are holdable.  When a <code>SQLException</code> occurs while
autocommit is <code>true</code>, it is vendor specific whether the JDBC driver responds with a commit operation, a
rollback operation, or by doing neither a commit nor a rollback.  A potential result of this difference
is in whether or not holdable ResultSets are closed.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.6
"
      end

      operation 8157058 "getClientInfoProperties"
	public return_type class_ref 1037314 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a list of the client info properties
that the driver supports.  The result set contains the following columns

<ol>
<li><b>NAME</b> String{@code =>} The name of the client info property<br>
<li><b>MAX_LEN</b> int{@code =>} The maximum length of the value for the property<br>
<li><b>DEFAULT_VALUE</b> String{@code =>} The default value of the property<br>
<li><b>DESCRIPTION</b> String{@code =>} A description of the property.  This will typically
                                             contain information as to where this property is
                                             stored in the database.
</ol>
<p>
The <code>ResultSet</code> is sorted by the NAME column
<p>
@return      A <code>ResultSet</code> object; each row is a supported client info
property
<p>
 @exception SQLException if a database access error occurs
<p>
@since 1.6
"
      end

      operation 8157186 "getFunctions"
	public return_type class_ref 1037314 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schemaPattern" type class_ref 128130 // String
	  param inout name "functionNamePattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the  system and user functions available
in the given catalog.
<P>
Only system and user function descriptions matching the schema and
function name criteria are returned.  They are ordered by
<code>FUNCTION_CAT</code>, <code>FUNCTION_SCHEM</code>,
<code>FUNCTION_NAME</code> and
<code>SPECIFIC_ NAME</code>.

<P>Each function description has the the following columns:
 <OL>
 <LI><B>FUNCTION_CAT</B> String {@code =>} function catalog (may be <code>null</code>)
 <LI><B>FUNCTION_SCHEM</B> String {@code =>} function schema (may be <code>null</code>)
 <LI><B>FUNCTION_NAME</B> String {@code =>} function name.  This is the name
used to invoke the function
 <LI><B>REMARKS</B> String {@code =>} explanatory comment on the function
<LI><B>FUNCTION_TYPE</B> short {@code =>} kind of function:
     <UL>
     <LI>functionResultUnknown - Cannot determine if a return value
      or table will be returned
     <LI> functionNoTable- Does not return a table
     <LI> functionReturnsTable - Returns a table
     </UL>
 <LI><B>SPECIFIC_NAME</B> String  {@code =>} the name which uniquely identifies
 this function within its schema.  This is a user specified, or DBMS
generated, name that may be different then the <code>FUNCTION_NAME</code>
for example with overload functions
 </OL>
<p>
A user may not have permission to execute any of the functions that are
returned by <code>getFunctions</code>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param functionNamePattern a function name pattern; must match the
       function name as it is stored in the database
@return <code>ResultSet</code> - each row is a function description
@exception SQLException if a database access error occurs
@see #getSearchStringEscape
@since 1.6
"
      end

      operation 8157314 "getFunctionColumns"
	public return_type class_ref 1037314 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schemaPattern" type class_ref 128130 // String
	  param inout name "functionNamePattern" type class_ref 128130 // String
	  param inout name "columnNamePattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the given catalog's system or user
function parameters and return type.

<P>Only descriptions matching the schema,  function and
parameter name criteria are returned. They are ordered by
<code>FUNCTION_CAT</code>, <code>FUNCTION_SCHEM</code>,
<code>FUNCTION_NAME</code> and
<code>SPECIFIC_ NAME</code>. Within this, the return value,
if any, is first. Next are the parameter descriptions in call
order. The column descriptions follow in column number order.

<P>Each row in the <code>ResultSet</code>
is a parameter description, column description or
return type description with the following fields:
 <OL>
 <LI><B>FUNCTION_CAT</B> String {@code =>} function catalog (may be <code>null</code>)
 <LI><B>FUNCTION_SCHEM</B> String {@code =>} function schema (may be <code>null</code>)
 <LI><B>FUNCTION_NAME</B> String {@code =>} function name.  This is the name
used to invoke the function
 <LI><B>COLUMN_NAME</B> String {@code =>} column/parameter name
 <LI><B>COLUMN_TYPE</B> Short {@code =>} kind of column/parameter:
     <UL>
     <LI> functionColumnUnknown - nobody knows
     <LI> functionColumnIn - IN parameter
     <LI> functionColumnInOut - INOUT parameter
     <LI> functionColumnOut - OUT parameter
     <LI> functionColumnReturn - function return value
     <LI> functionColumnResult - Indicates that the parameter or column
 is a column in the <code>ResultSet</code>
     </UL>
 <LI><B>DATA_TYPE</B> int {@code =>} SQL type from java.sql.Types
 <LI><B>TYPE_NAME</B> String {@code =>} SQL type name, for a UDT type the
 type name is fully qualified
 <LI><B>PRECISION</B> int {@code =>} precision
 <LI><B>LENGTH</B> int {@code =>} length in bytes of data
 <LI><B>SCALE</B> short {@code =>} scale -  null is returned for data types where
SCALE is not applicable.
 <LI><B>RADIX</B> short {@code =>} radix
 <LI><B>NULLABLE</B> short {@code =>} can it contain NULL.
     <UL>
     <LI> functionNoNulls - does not allow NULL values
     <LI> functionNullable - allows NULL values
     <LI> functionNullableUnknown - nullability unknown
     </UL>
 <LI><B>REMARKS</B> String {@code =>} comment describing column/parameter
 <LI><B>CHAR_OCTET_LENGTH</B> int  {@code =>} the maximum length of binary
and character based parameters or columns.  For any other datatype the returned value
is a NULL
 <LI><B>ORDINAL_POSITION</B> int  {@code =>} the ordinal position, starting
from 1, for the input and output parameters. A value of 0
is returned if this row describes the function's return value.
For result set columns, it is the
ordinal position of the column in the result set starting from 1.
 <LI><B>IS_NULLABLE</B> String  {@code =>} ISO rules are used to determine
the nullability for a parameter or column.
      <UL>
      <LI> YES           --- if the parameter or column can include NULLs
      <LI> NO            --- if the parameter or column  cannot include NULLs
      <LI> empty string  --- if the nullability for the
parameter  or column is unknown
      </UL>
 <LI><B>SPECIFIC_NAME</B> String  {@code =>} the name which uniquely identifies
this function within its schema.  This is a user specified, or DBMS
generated, name that may be different then the <code>FUNCTION_NAME</code>
for example with overload functions
 </OL>

<p>The PRECISION column represents the specified column size for the given
parameter or column.
For numeric data, this is the maximum precision.  For character data, this is the length in characters.
For datetime datatypes, this is the length in characters of the String representation (assuming the
maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
this is the length in bytes. Null is returned for data types where the
column size is not applicable.
@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param functionNamePattern a procedure name pattern; must match the
       function name as it is stored in the database
@param columnNamePattern a parameter name pattern; must match the
parameter or column name as it is stored in the database
@return <code>ResultSet</code> - each row describes a
user function parameter, column  or return type

@exception SQLException if a database access error occurs
@see #getSearchStringEscape
@since 1.6
"
      end

      attribute 1884034 "functionColumnUnknown"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that type of the parameter or column is unknown.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code>
returned by the method <code>getFunctionColumns</code>.

"
      end

      attribute 1884162 "functionColumnIn"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the parameter or column is an IN parameter.
<P>
 A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code>
returned by the method <code>getFunctionColumns</code>.
@since 1.6

"
      end

      attribute 1884290 "functionColumnInOut"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the parameter or column is an INOUT parameter.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code>
returned by the method <code>getFunctionColumns</code>.
@since 1.6

"
      end

      attribute 1884418 "functionColumnOut"
	public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the parameter or column is an OUT parameter.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code>
returned by the method <code>getFunctionColumns</code>.
@since 1.6

"
      end

      attribute 1884546 "functionReturn"
	public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the parameter or column is a return value.
<P>
 A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code>
returned by the method <code>getFunctionColumns</code>.
@since 1.6

"
      end

      attribute 1884674 "functionColumnResult"
	public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the parameter or column is a column in a result set.
<P>
 A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code>
returned by the method <code>getFunctionColumns</code>.
@since 1.6

"
      end

      attribute 1884802 "functionNoNulls"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that <code>NULL</code> values are not allowed.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> object
returned by the method <code>getFunctionColumns</code>.
@since 1.6

"
      end

      attribute 1884930 "functionNullable"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that <code>NULL</code> values are allowed.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> object
returned by the method <code>getFunctionColumns</code>.
@since 1.6

"
      end

      attribute 1885058 "functionNullableUnknown"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that whether <code>NULL</code> values are allowed
is unknown.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> object
returned by the method <code>getFunctionColumns</code>.
@since 1.6

"
      end

      attribute 1885186 "functionResultUnknown"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that it is not known whether the function returns
a result or a table.
<P>
A possible value for column <code>FUNCTION_TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getFunctions</code>.
@since 1.6

"
      end

      attribute 1885314 "functionNoTable"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the function  does not return a table.
<P>
A possible value for column <code>FUNCTION_TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getFunctions</code>.
@since 1.6

"
      end

      attribute 1885442 "functionReturnsTable"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the function  returns a table.
<P>
A possible value for column <code>FUNCTION_TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getFunctions</code>.
@since 1.6

"
      end

      operation 8157442 "getPseudoColumns"
	public return_type class_ref 1037314 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 128130 // String
	  param inout name "schemaPattern" type class_ref 128130 // String
	  param inout name "tableNamePattern" type class_ref 128130 // String
	  param inout name "columnNamePattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 4.1 -----------------------------

Retrieves a description of the pseudo or hidden columns available
in a given table within the specified catalog and schema.
Pseudo or hidden columns may not always be stored within
a table and are not visible in a ResultSet unless they are
specified in the query's outermost SELECT list. Pseudo or hidden
columns may not necessarily be able to be modified. If there are
no pseudo or hidden columns, an empty ResultSet is returned.

<P>Only column descriptions matching the catalog, schema, table
and column name criteria are returned.  They are ordered by
<code>TABLE_CAT</code>,<code>TABLE_SCHEM</code>, <code>TABLE_NAME</code>
and <code>COLUMN_NAME</code>.

<P>Each column description has the following columns:
 <OL>
 <LI><B>TABLE_CAT</B> String {@code =>} table catalog (may be <code>null</code>)
 <LI><B>TABLE_SCHEM</B> String {@code =>} table schema (may be <code>null</code>)
 <LI><B>TABLE_NAME</B> String {@code =>} table name
 <LI><B>COLUMN_NAME</B> String {@code =>} column name
 <LI><B>DATA_TYPE</B> int {@code =>} SQL type from java.sql.Types
 <LI><B>COLUMN_SIZE</B> int {@code =>} column size.
 <LI><B>DECIMAL_DIGITS</B> int {@code =>} the number of fractional digits. Null is returned for data types where
DECIMAL_DIGITS is not applicable.
 <LI><B>NUM_PREC_RADIX</B> int {@code =>} Radix (typically either 10 or 2)
 <LI><B>COLUMN_USAGE</B> String {@code =>} The allowed usage for the column.  The
 value returned will correspond to the enum name returned by {@link PseudoColumnUsage#name PseudoColumnUsage.name()}
 <LI><B>REMARKS</B> String {@code =>} comment describing column (may be <code>null</code>)
 <LI><B>CHAR_OCTET_LENGTH</B> int {@code =>} for char types the
      maximum number of bytes in the column
 <LI><B>IS_NULLABLE</B> String  {@code =>} ISO rules are used to determine the nullability for a column.
      <UL>
      <LI> YES           --- if the column can include NULLs
      <LI> NO            --- if the column cannot include NULLs
      <LI> empty string  --- if the nullability for the column is unknown
      </UL>
 </OL>

<p>The COLUMN_SIZE column specifies the column size for the given column.
For numeric data, this is the maximum precision.  For character data, this is the length in characters.
For datetime datatypes, this is the length in characters of the String representation (assuming the
maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
this is the length in bytes. Null is returned for data types where the
column size is not applicable.

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param tableNamePattern a table name pattern; must match the
       table name as it is stored in the database
@param columnNamePattern a column name pattern; must match the column
       name as it is stored in the database
@return <code>ResultSet</code> - each row is a column description
@exception SQLException if a database access error occurs
@see PseudoColumnUsage
@since 1.7
"
      end

      operation 8157570 "generatedKeyAlwaysReturned"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a generated key will always be returned if the column
name(s) or index(es) specified for the auto generated key column(s)
are valid and the statement succeeds.  The key that is returned may or
may not be based on the column(s) for the auto generated key.
Consult your JDBC driver documentation for additional details.
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.7
"
      end

      operation 8157698 "getMaxLogicalLobSize"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 4.2 -----------------------------


Retrieves the maximum number of bytes this database allows for
the logical size for a {@code LOB}.
<p>
The default implementation will return {@code 0}

@return the maximum number of bytes allowed; a result of zero
means that there is no limit or the limit is not known
@exception SQLException if a database access error occurs
@since 1.8
"
      end

      operation 8157826 "supportsRefCursors"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports REF CURSOR.
<p>
The default implementation will return {@code false}

@return {@code true} if this database supports REF CURSOR;
        {@code false} otherwise
@exception SQLException if a database access error occurs
@since 1.8
"
      end
    end

    class 1040130 "Savepoint"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The representation of a savepoint, which is a point within
the current transaction that can be referenced from the
<code>Connection.rollback</code> method. When a transaction
is rolled back to a savepoint all changes made after that
savepoint are undone.
<p>
Savepoints can be either named or unnamed. Unnamed savepoints
are identified by an ID generated by the underlying data source.

@since 1.4
"
      operation 8202882 "getSavepointId"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the generated ID for the savepoint that this
<code>Savepoint</code> object represents.
@return the numeric ID of this savepoint
@exception SQLException if this is a named savepoint
@since 1.4
"
      end

      operation 8203010 "getSavepointName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of the savepoint that this <code>Savepoint</code>
object represents.
@return the name of this savepoint
@exception SQLException if this is an un-named savepoint
@since 1.4
"
      end
    end

    class 1040258 "SQLClientInfoException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The subclass of {@link SQLException} is thrown when one or more client info properties
could not be set on a <code>Connection</code>.  In addition to the information provided
by <code>SQLException</code>, a <code>SQLClientInfoException</code> provides a list of client info
properties that were not set.

Some databases do not allow multiple client info properties to be set
atomically.  For those databases, it is possible that some of the client
info properties had been set even though the <code>Connection.setClientInfo</code>
method threw an exception.  An application can use the <code>getFailedProperties </code>
method to retrieve a list of client info properties that were not set.  The
properties are identified by passing a
<code>Map&lt;String,ClientInfoStatus&gt;</code> to
the appropriate <code>SQLClientInfoException</code> constructor.
<p>
@see ClientInfoStatus
@see Connection#setClientInfo
@since 1.6
"
      classrelation 3402498 // <generalisation>
	relation 3402498 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3402498 // <generalisation>
	  b parent class_ref 1037186 // SQLException
      end

      classrelation 3402626 // failedProperties (<unidirectional association>)
	relation 3402626 --->
	  a role_name "failedProperties" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, ClientInfoStatus> ${name}${value};
"
	    classrelation_ref 3402626 // failedProperties (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 8203138 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLClientInfoException</code>  Object.
The <code>reason</code>,
<code>SQLState</code>, and failedProperties list are initialized to
<code> null</code> and the vendor code is initialized to 0.
The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>

@since 1.6
"
      end

      operation 8203266 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 1
	  param inout name "failedProperties" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String, ClientInfoStatus> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLClientInfoException</code> object initialized with a
given <code>failedProperties</code>.
The <code>reason</code> and <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>

@param failedProperties          A Map containing the property values that could not
                                 be set.  The keys in the Map
                                 contain the names of the client info
                                 properties that could not be set and
                                 the values contain one of the reason codes
                                 defined in <code>ClientInfoStatus</code>
<p>
@since 1.6
"
      end

      operation 8203394 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 2
	  param inout name "failedProperties" type class_ref 130178 // Map
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String, ClientInfoStatus> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLClientInfoException</code> object initialized with
a given <code>cause</code> and <code>failedProperties</code>.

The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code> and the vendor code is initialized to 0.

<p>

@param failedProperties          A Map containing the property values that could not
                                 be set.  The keys in the Map
                                 contain the names of the client info
                                 properties that could not be set and
                                 the values contain one of the reason codes
                                 defined in <code>ClientInfoStatus</code>
@param cause                                     the (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
<p>
@since 1.6
"
      end

      operation 8203522 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "failedProperties" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<String, ClientInfoStatus> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLClientInfoException</code> object initialized with a
given <code>reason</code> and <code>failedProperties</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>

@param reason                            a description of the exception
@param failedProperties          A Map containing the property values that could not
                                 be set.  The keys in the Map
                                 contain the names of the client info
                                 properties that could not be set and
                                 the values contain one of the reason codes
                                 defined in <code>ClientInfoStatus</code>
<p>
@since 1.6
"
      end

      operation 8203650 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "failedProperties" type class_ref 130178 // Map
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<String, ClientInfoStatus> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLClientInfoException</code> object initialized with a
given <code>reason</code>, <code>cause</code> and
<code>failedProperties</code>.
The  <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
<p>

@param reason                            a description of the exception
@param failedProperties          A Map containing the property values that could not
                                 be set.  The keys in the Map
                                 contain the names of the client info
                                 properties that could not be set and
                                 the values contain one of the reason codes
                                 defined in <code>ClientInfoStatus</code>
@param cause                                     the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
<p>
@since 1.6
"
      end

      operation 8203778 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "failedProperties" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String, ClientInfoStatus> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLClientInfoException</code> object initialized with a
given  <code>reason</code>, <code>SQLState</code>  and
<code>failedProperties</code>.
The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>

@param reason                            a description of the exception
@param SQLState                          an XOPEN or SQL:2003 code identifying the exception
@param failedProperties          A Map containing the property values that could not
                                 be set.  The keys in the Map
                                 contain the names of the client info
                                 properties that could not be set and
                                 the values contain one of the reason codes
                                 defined in <code>ClientInfoStatus</code>
<p>
@since 1.6
"
      end

      operation 8203906 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "failedProperties" type class_ref 130178 // Map
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String, ClientInfoStatus> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLClientInfoException</code> object initialized with a
given  <code>reason</code>, <code>SQLState</code>, <code>cause</code>
and <code>failedProperties</code>.  The vendor code is initialized to 0.
<p>

@param reason                            a description of the exception
@param SQLState                          an XOPEN or SQL:2003 code identifying the exception
@param failedProperties          A Map containing the property values that could not
                                 be set.  The keys in the Map
                                 contain the names of the client info
                                 properties that could not be set and
                                 the values contain one of the reason codes
                                 defined in <code>ClientInfoStatus</code>
@param cause                                     the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
<p>
@since 1.6
"
      end

      operation 8204034 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "failedProperties" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<String, ClientInfoStatus> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLClientInfoException</code> object initialized with a
given  <code>reason</code>, <code>SQLState</code>,
<code>vendorCode</code>  and <code>failedProperties</code>.
The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>

@param reason                            a description of the exception
@param SQLState                          an XOPEN or SQL:2003 code identifying the exception
@param vendorCode                        a database vendor-specific exception code
@param failedProperties          A Map containing the property values that could not
                                 be set.  The keys in the Map
                                 contain the names of the client info
                                 properties that could not be set and
                                 the values contain one of the reason codes
                                 defined in <code>ClientInfoStatus</code>
<p>
@since 1.6
"
      end

      operation 8204162 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 5
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "failedProperties" type class_ref 130178 // Map
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<String, ClientInfoStatus> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLClientInfoException</code> object initialized with a
given  <code>reason</code>, <code>SQLState</code>,
<code>cause</code>, <code>vendorCode</code> and
<code>failedProperties</code>.
<p>

@param reason                            a description of the exception
@param SQLState                          an XOPEN or SQL:2003 code identifying the exception
@param vendorCode                        a database vendor-specific exception code
@param failedProperties          A Map containing the property values that could not
                                 be set.  The keys in the Map
                                 contain the names of the client info
                                 properties that could not be set and
                                 the values contain one of the reason codes
                                 defined in <code>ClientInfoStatus</code>
@param cause                     the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
<p>
@since 1.6
"
      end

      operation 8204290 "getFailedProperties"
	public return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, ClientInfoStatus> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of client info properties that could not be set.  The
keys in the Map  contain the names of the client info
properties that could not be set and the values contain one of the
reason codes defined in <code>ClientInfoStatus</code>
<p>

@return Map list containing the client info properties that could
not be set
<p>
@since 1.6
"
      end

      attribute 1896450 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4319604256824655880L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1040386 "Struct"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>The standard mapping in the Java programming language for an SQL
structured type. A <code>Struct</code> object contains a
value for each attribute of the SQL structured type that
it represents.
By default, an instance of<code>Struct</code> is valid as long as the
application has a reference to it.
<p>
All methods on the <code>Struct</code> interface must be fully implemented if the
JDBC driver supports the data type.
@since 1.2
"
      operation 8225666 "getSQLTypeName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the SQL type name of the SQL structured type
that this <code>Struct</code> object represents.

@return the fully-qualified type name of the SQL structured
         type for which this <code>Struct</code> object
         is the generic representation
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8225794 "getAttributes"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces the ordered values of the attributes of the SQL
structured type that this <code>Struct</code> object represents.
As individual attributes are processed, this method uses the type map
associated with the
connection for customizations of the type mappings.
If there is no
entry in the connection's type map that matches the structured
type that an attribute represents,
the driver uses the standard mapping.
<p>
Conceptually, this method calls the method
<code>getObject</code> on each attribute
of the structured type and returns a Java array containing
the result.

@return an array containing the ordered attribute values
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8225922 "getAttributes"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<String,Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces the ordered values of the attributes of the SQL
structured type that this <code>Struct</code> object represents.
 As individual attributes are processed, this method uses the given type map
for customizations of the type mappings.
If there is no
entry in the given type map that matches the structured
type that an attribute represents,
the driver uses the standard mapping. This method never
uses the type map associated with the connection.
<p>
Conceptually, this method calls the method
<code>getObject</code> on each attribute
of the structured type and returns a Java array containing
the result.

@param map a mapping of SQL type names to Java classes
@return an array containing the ordered attribute values
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end
    end

    class 1040514 "RowIdLifetime"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Enumeration for RowId life-time values.

@since 1.6
"
      attribute 1895810 "ROWID_UNSUPPORTED"
	public type class_ref 1040514 // RowIdLifetime
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that this data source does not support the ROWID type.

"
      end

      attribute 1895938 "ROWID_VALID_OTHER"
	public type class_ref 1040514 // RowIdLifetime
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the lifetime of a RowId from this data source is indeterminate;
but not one of ROWID_VALID_TRANSACTION, ROWID_VALID_SESSION, or,
ROWID_VALID_FOREVER.

"
      end

      attribute 1896066 "ROWID_VALID_SESSION"
	public type class_ref 1040514 // RowIdLifetime
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the lifetime of a RowId from this data source is at least the
containing session.

"
      end

      attribute 1896194 "ROWID_VALID_TRANSACTION"
	public type class_ref 1040514 // RowIdLifetime
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the lifetime of a RowId from this data source is at least the
containing transaction.

"
      end

      attribute 1896322 "ROWID_VALID_FOREVER"
	public type class_ref 1040514 // RowIdLifetime
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the lifetime of a RowId from this data source is, effectively,
unlimited.
"
      end
    end

    class 1040642 "DataTruncation"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception  thrown as a <code>DataTruncation</code> exception
(on writes) or reported as a
<code>DataTruncation</code> warning (on reads)
 when a data values is unexpectedly truncated for reasons other than its having
 exceeded <code>MaxFieldSize</code>.

<P>The SQLstate for a <code>DataTruncation</code> during read is <code>01004</code>.
<P>The SQLstate for a <code>DataTruncation</code> during write is <code>22001</code>.
"
      classrelation 3399298 // <generalisation>
	relation 3399298 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3399298 // <generalisation>
	  b parent class_ref 1038210 // SQLWarning
      end

      operation 8159234 "DataTruncation"
	public explicit_return_type ""
	nparams 5
	  param in name "index" explicit_type "int"
	  param inout name "parameter" explicit_type "boolean"
	  param inout name "read" explicit_type "boolean"
	  param in name "dataSize" explicit_type "int"
	  param in name "transferSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>DataTruncation</code> object
with the SQLState initialized
to 01004 when <code>read</code> is set to <code>true</code> and 22001
when <code>read</code> is set to <code>false</code>,
the reason set to \"Data truncation\", the
vendor code set to 0, and
the other fields set to the given values.
The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>

@param index The index of the parameter or column value
@param parameter true if a parameter value was truncated
@param read true if a read was truncated
@param dataSize the original size of the data
@param transferSize the size after truncation
"
      end

      operation 8159362 "DataTruncation"
	public explicit_return_type ""
	nparams 6
	  param in name "index" explicit_type "int"
	  param inout name "parameter" explicit_type "boolean"
	  param inout name "read" explicit_type "boolean"
	  param in name "dataSize" explicit_type "int"
	  param in name "transferSize" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>DataTruncation</code> object
with the SQLState initialized
to 01004 when <code>read</code> is set to <code>true</code> and 22001
when <code>read</code> is set to <code>false</code>,
the reason set to \"Data truncation\", the
vendor code set to 0, and
the other fields set to the given values.
<p>

@param index The index of the parameter or column value
@param parameter true if a parameter value was truncated
@param read true if a read was truncated
@param dataSize the original size of the data
@param transferSize the size after truncation
@param cause the underlying reason for this <code>DataTruncation</code>
(which is saved for later retrieval by the <code>getCause()</code> method);
may be null indicating the cause is non-existent or unknown.

@since 1.6
"
      end

      operation 8159490 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the index of the column or parameter that was truncated.

<P>This may be -1 if the column or parameter index is unknown, in
which case the <code>parameter</code> and <code>read</code> fields should be ignored.

@return the index of the truncated parameter or column value
"
      end

      operation 8159618 "getParameter"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the value truncated was a parameter value or
a column value.

@return <code>true</code> if the value truncated was a parameter;
        <code>false</code> if it was a column value
"
      end

      operation 8159746 "getRead"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the value was truncated on a read.

@return <code>true</code> if the value was truncated when read from
        the database; <code>false</code> if the data was truncated on a write
"
      end

      operation 8159874 "getDataSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of bytes of data that should have been transferred.
This number may be approximate if data conversions were being
performed.  The value may be <code>-1</code> if the size is unknown.

@return the number of bytes of data that should have been transferred
"
      end

      operation 8160002 "getTransferSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of bytes of data actually transferred.
The value may be <code>-1</code> if the size is unknown.

@return the number of bytes of data actually transferred
"
      end

      attribute 1885698 "index"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial

"
      end

      attribute 1885826 "parameter"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial

"
      end

      attribute 1885954 "read"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial

"
      end

      attribute 1886082 "dataSize"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial

"
      end

      attribute 1886210 "transferSize"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial

"
      end

      attribute 1886338 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6464298989504059473L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial

"
      end
    end

    class 1040898 "Driver"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The interface that every driver class must implement.
<P>The Java SQL framework allows for multiple database drivers.

<P>Each driver should supply a class that implements
the Driver interface.

<P>The DriverManager will try to load as many drivers as it can
find and then for any given connection request, it will ask each
driver in turn to try to connect to the target URL.

<P>It is strongly recommended that each Driver class should be
small and standalone so that the Driver class can be loaded and
queried without bringing in vast quantities of supporting code.

<P>When a Driver class is loaded, it should create an instance of
itself and register it with the DriverManager. This means that a
user can load and register a driver by calling:
<p>
{@code Class.forName(\"foo.bah.Driver\")}
<p>
A JDBC driver may create a {@linkplain DriverAction} implementation in order
to receive notifications when {@linkplain DriverManager#deregisterDriver} has
been called.
@see DriverManager
@see Connection
@see DriverAction
"
      operation 8167938 "connect"
	public return_type class_ref 1038338 // Connection
	nparams 2
	  param inout name "url" type class_ref 128130 // String
	  param inout name "info" type class_ref 240130 // Properties
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to make a database connection to the given URL.
The driver should return \"null\" if it realizes it is the wrong kind
of driver to connect to the given URL.  This will be common, as when
the JDBC driver manager is asked to connect to a given URL it passes
the URL to each loaded driver in turn.

<P>The driver should throw an <code>SQLException</code> if it is the right
driver to connect to the given URL but has trouble connecting to
the database.

<P>The {@code Properties} argument can be used to pass
arbitrary string tag/value pairs as connection arguments.
Normally at least \"user\" and \"password\" properties should be
included in the {@code Properties} object.
<p>
<B>Note:</B> If a property is specified as part of the {@code url} and
is also specified in the {@code Properties} object, it is
implementation-defined as to which value will take precedence. For
maximum portability, an application should only specify a property once.

@param url the URL of the database to which to connect
@param info a list of arbitrary string tag/value pairs as
connection arguments. Normally at least a \"user\" and
\"password\" property should be included.
@return a <code>Connection</code> object that represents a
        connection to the URL
@exception SQLException if a database access error occurs or the url is
{@code null}
"
      end

      operation 8168066 "acceptsURL"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "url" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the driver thinks that it can open a connection
to the given URL.  Typically drivers will return <code>true</code> if they
understand the sub-protocol specified in the URL and <code>false</code> if
they do not.

@param url the URL of the database
@return <code>true</code> if this driver understands the given URL;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs or the url is
{@code null}
"
      end

      operation 8168194 "getPropertyInfo"
	public return_type class_ref 1041026 // DriverPropertyInfo
	nparams 2
	  param inout name "url" type class_ref 128130 // String
	  param inout name "info" type class_ref 240130 // Properties
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets information about the possible properties for this driver.
<P>
The <code>getPropertyInfo</code> method is intended to allow a generic
GUI tool to discover what properties it should prompt
a human for in order to get
enough information to connect to a database.  Note that depending on
the values the human has supplied so far, additional values may become
necessary, so it may be necessary to iterate though several calls
to the <code>getPropertyInfo</code> method.

@param url the URL of the database to which to connect
@param info a proposed list of tag/value pairs that will be sent on
         connect open
@return an array of <code>DriverPropertyInfo</code> objects describing
         possible properties.  This array may be an empty array if
         no properties are required.
@exception SQLException if a database access error occurs
"
      end

      operation 8168322 "getMajorVersion"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the driver's major version number. Initially this should be 1.

@return this driver's major version number
"
      end

      operation 8168450 "getMinorVersion"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the driver's minor version number. Initially this should be 0.
@return this driver's minor version number
"
      end

      operation 8168578 "jdbcCompliant"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports whether this driver is a genuine JDBC
Compliant&trade; driver.
A driver may only report <code>true</code> here if it passes the JDBC
compliance tests; otherwise it is required to return <code>false</code>.
<P>
JDBC compliance requires full support for the JDBC API and full support
for SQL 92 Entry Level.  It is expected that JDBC compliant drivers will
be available for all the major commercial databases.
<P>
This method is not intended to encourage the development of non-JDBC
compliant drivers, but is a recognition of the fact that some vendors
are interested in using the JDBC API and framework for lightweight
databases that do not support full database functionality, or for
special databases such as document information retrieval where a SQL
implementation may not be feasible.
@return <code>true</code> if this driver is JDBC Compliant; <code>false</code>
        otherwise
"
      end

      operation 8168706 "getParentLogger"
	public return_type class_ref 215298 // Logger
	nparams 0
	nexceptions 1
	  exception class_ref 1041154 // SQLFeatureNotSupportedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------- JDBC 4.1 -----------------------------------

Return the parent Logger of all the Loggers used by this driver. This
should be the Logger farthest from the root Logger that is
still an ancestor of all of the Loggers used by this driver. Configuring
this Logger will affect all of the log messages generated by the driver.
In the worst case, this may be the root Logger.

@return the parent Logger for this driver
@throws SQLFeatureNotSupportedException if the driver does not use
{@code java.util.logging}.
@since 1.7
"
      end
    end

    class 1041026 "DriverPropertyInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Driver properties for making a connection. The
<code>DriverPropertyInfo</code> class is of interest only to advanced programmers
who need to interact with a Driver via the method
<code>getDriverProperties</code> to discover
and supply properties for connections.
"
      operation 8172162 "DriverPropertyInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>DriverPropertyInfo</code> object with a  given
name and value.  The <code>description</code> and <code>choices</code>
are initialized to <code>null</code> and <code>required</code> is initialized
to <code>false</code>.

@param name the name of the property
@param value the current value, which may be null
"
      end

      classrelation 3401090 // name (<unidirectional association>)
	relation 3401090 --->
	  a role_name "name" public
	    comment "
The name of the property.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3401090 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3401218 // description (<unidirectional association>)
	relation 3401218 --->
	  a role_name "description" init_value " null" public
	    comment "
A brief description of the property, which may be null.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3401218 // description (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1887618 "required"
	public explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The <code>required</code> field is <code>true</code> if a value must be
supplied for this property
during <code>Driver.connect</code> and <code>false</code> otherwise.

"
      end

      classrelation 3401346 // value (<unidirectional association>)
	relation 3401346 --->
	  a role_name "value" init_value " null" public
	    comment "
The <code>value</code> field specifies the current value of
the property, based on a combination of the information
supplied to the method <code>getPropertyInfo</code>, the
Java environment, and the driver-supplied default values.  This field
may be null if no value is known.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3401346 // value (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3401474 // choices (<unidirectional association>)
	relation 3401474 --->
	  a role_name "choices" multiplicity "[]" init_value " null" public
	    comment "
An array of possible values if the value for the field
<code>DriverPropertyInfo.value</code> may be selected
from a particular set of values; otherwise null.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3401474 // choices (<unidirectional association>)
	  b parent class_ref 128130 // String
      end
    end

    class 1041154 "SQLFeatureNotSupportedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The subclass of {@link SQLException} thrown when the SQLState class value is '<i>0A</i>'
( the value is 'zero' A).
This indicates that the JDBC driver does not support an optional JDBC feature.
Optional JDBC features can fall into the fallowing categories:

<UL>
<LI>no support for an optional feature
<LI>no support for an optional overloaded method
<LI>no support for an optional mode for a method.  The mode for a method is
determined based on constants passed as parameter values to a method
</UL>

@since 1.6
"
      classrelation 3403010 // <generalisation>
	relation 3403010 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3403010 // <generalisation>
	  b parent class_ref 1042562 // SQLNonTransientException
      end

      operation 8206850 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLFeatureNotSupportedException</code> object.
 The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@since 1.6
"
      end

      operation 8206978 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLFeatureNotSupportedException</code> object
with a given <code>reason</code>. The <code>SQLState</code>
is initialized to <code>null</code> and the vendor code is initialized
to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@since 1.6
"
      end

      operation 8207106 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLFeatureNotSupportedException</code> object
with a given <code>reason</code> and <code>SQLState</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@since 1.6
"
      end

      operation 8207234 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLFeatureNotSupportedException</code> object
 with a given <code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor specific exception code
@since 1.6
"
      end

      operation 8207362 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLFeatureNotSupportedException</code> object
  with a given  <code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8207490 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLFeatureNotSupportedException</code> object
with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8207618 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLFeatureNotSupportedException</code> object
with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param cause the (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8207746 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLFeatureNotSupportedException</code> object
with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      attribute 1896834 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1026510870282316051L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1041282 "DriverAction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface that must be implemented when a {@linkplain Driver} wants to be
notified by {@code DriverManager}.
<P>
A {@code DriverAction} implementation is not intended to be used
directly by applications. A JDBC Driver  may choose
to create its {@code DriverAction} implementation in a private class
to avoid it being called directly.
<p>
The JDBC driver's static initialization block must call
{@linkplain DriverManager#registerDriver(java.sql.Driver, java.sql.DriverAction) } in order
to inform {@code DriverManager} which {@code DriverAction} implementation to
call when the JDBC driver is de-registered.
@since 1.8
"
      operation 8168834 "deregister"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method called by
{@linkplain DriverManager#deregisterDriver(Driver) }
 to notify the JDBC driver that it was de-registered.
<p>
The {@code deregister} method is intended only to be used by JDBC Drivers
and not by applications.  JDBC drivers are recommended to not implement
{@code DriverAction} in a public class.  If there are active
connections to the database at the time that the {@code deregister}
method is called, it is implementation specific as to whether the
connections are closed or allowed to continue. Once this method is
called, it is implementation specific as to whether the driver may
limit the ability to create new connections to the database, invoke
other {@code Driver} methods or throw a {@code SQLException}.
Consult your JDBC driver's documentation for additional information
on its behavior.
@see DriverManager#registerDriver(java.sql.Driver, java.sql.DriverAction)
@see DriverManager#deregisterDriver(Driver)
@since 1.8
"
      end
    end

    class 1041410 "DriverManager"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P>The basic service for managing a set of JDBC drivers.<br>
<B>NOTE:</B> The {@link javax.sql.DataSource} interface, new in the
JDBC 2.0 API, provides another way to connect to a data source.
The use of a <code>DataSource</code> object is the preferred means of
connecting to a data source.

<P>As part of its initialization, the <code>DriverManager</code> class will
attempt to load the driver classes referenced in the \"jdbc.drivers\"
system property. This allows a user to customize the JDBC Drivers
used by their applications. For example in your
~/.hotjava/properties file you might specify:
<pre>
<CODE>jdbc.drivers=foo.bah.Driver:wombat.sql.Driver:bad.taste.ourDriver</CODE>
</pre>
<P> The <code>DriverManager</code> methods <code>getConnection</code> and
<code>getDrivers</code> have been enhanced to support the Java Standard Edition
<a href=\"../../../technotes/guides/jar/jar.html#Service%20Provider\">Service Provider</a> mechanism. JDBC 4.0 Drivers must
include the file <code>META-INF/services/java.sql.Driver</code>. This file contains the name of the JDBC drivers
implementation of <code>java.sql.Driver</code>.  For example, to load the <code>my.sql.Driver</code> class,
the <code>META-INF/services/java.sql.Driver</code> file would contain the entry:
<pre>
<code>my.sql.Driver</code>
</pre>

<P>Applications no longer need to explicitly load JDBC drivers using <code>Class.forName()</code>. Existing programs
which currently load JDBC drivers using <code>Class.forName()</code> will continue to work without
modification.

<P>When the method <code>getConnection</code> is called,
the <code>DriverManager</code> will attempt to
locate a suitable driver from amongst those loaded at
initialization and those loaded explicitly using the same classloader
as the current applet or application.

<P>
Starting with the Java 2 SDK, Standard Edition, version 1.3, a
logging stream can be set only if the proper
permission has been granted.  Normally this will be done with
the tool PolicyTool, which can be used to grant <code>permission
java.sql.SQLPermission \"setLog\"</code>.
@see Driver
@see Connection
"
      classrelation 3400066 // registeredDrivers (<unidirectional association>)
	relation 3400066 --->
	  a role_name "registeredDrivers" init_value " new CopyOnWriteArrayList<>()" class_relation const_relation private
	    comment " List of registered JDBC drivers
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<DriverInfo> ${name}${value};
"
	    classrelation_ref 3400066 // registeredDrivers (<unidirectional association>)
	  b parent class_ref 589058 // CopyOnWriteArrayList
      end

      attribute 1887490 "loginTimeout"
	class_attribute volatile private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3400194 // logWriter (<unidirectional association>)
	relation 3400194 --->
	  a role_name "logWriter" init_value " null" class_relation volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3400194 // logWriter (<unidirectional association>)
	  b parent class_ref 195330 // PrintWriter
      end

      classrelation 3400322 // logStream (<unidirectional association>)
	relation 3400322 --->
	  a role_name "logStream" init_value " null" class_relation volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3400322 // logStream (<unidirectional association>)
	  b parent class_ref 128258 // PrintStream
      end

      classrelation 3400450 // logSync (<unidirectional association>)
	relation 3400450 --->
	  a role_name "logSync" init_value " new Object()" class_relation const_relation private
	    comment " Used in println() to synchronize logWriter
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3400450 // logSync (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 8168962 "DriverManager"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Prevent the DriverManager class from being instantiated. "
      end

      extra_member 168322 "initialization"
	
	cpp "" ""
	java "  static {
        loadInitialDrivers();
        println(\"JDBC DriverManager initialized\");
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3400578 // SET_LOG_PERMISSION (<unidirectional association>)
	relation 3400578 --->
	  a role_name "SET_LOG_PERMISSION" init_value "
        new SQLPermission(\"setLog\")" class_relation const_relation package
	    comment "
The <code>SQLPermission</code> constant that allows the
setting of the logging stream.
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3400578 // SET_LOG_PERMISSION (<unidirectional association>)
	  b parent class_ref 1041666 // SQLPermission
      end

      classrelation 3400706 // DEREGISTER_DRIVER_PERMISSION (<unidirectional association>)
	relation 3400706 --->
	  a role_name "DEREGISTER_DRIVER_PERMISSION" init_value "
        new SQLPermission(\"deregisterDriver\")" class_relation const_relation package
	    comment "
The {@code SQLPermission} constant that allows the
un-register a registered JDBC driver.
@since 1.8

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3400706 // DEREGISTER_DRIVER_PERMISSION (<unidirectional association>)
	  b parent class_ref 1041666 // SQLPermission
      end

      operation 8169090 "getLogWriter"
	class_operation public return_type class_ref 195330 // PrintWriter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------

Retrieves the log writer.

The <code>getLogWriter</code> and <code>setLogWriter</code>
methods should be used instead
of the <code>get/setlogStream</code> methods, which are deprecated.
@return a <code>java.io.PrintWriter</code> object
@see #setLogWriter
@since 1.2
"
      end

      operation 8169218 "setLogWriter"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 195330 // PrintWriter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the logging/tracing <code>PrintWriter</code> object
that is used by the <code>DriverManager</code> and all drivers.
<P>
There is a minor versioning problem created by the introduction
of the method <code>setLogWriter</code>.  The
method <code>setLogWriter</code> cannot create a <code>PrintStream</code> object
that will be returned by <code>getLogStream</code>---the Java platform does
not provide a backward conversion.  As a result, a new application
that uses <code>setLogWriter</code> and also uses a JDBC 1.0 driver that uses
<code>getLogStream</code> will likely not see debugging information written
by that driver.
<P>
Starting with the Java 2 SDK, Standard Edition, version 1.3 release, this method checks
to see that there is an <code>SQLPermission</code> object before setting
the logging stream.  If a <code>SecurityManager</code> exists and its
<code>checkPermission</code> method denies setting the log writer, this
method throws a <code>java.lang.SecurityException</code>.

@param out the new logging/tracing <code>PrintStream</code> object;
     <code>null</code> to disable logging and tracing
@throws SecurityException
   if a security manager exists and its
   <code>checkPermission</code> method denies
   setting the log writer

@see SecurityManager#checkPermission
@see #getLogWriter
@since 1.2
"
      end

      operation 8169346 "getConnection"
	class_operation public return_type class_ref 1038338 // Connection
	nparams 2
	  param inout name "url" type class_ref 128130 // String
	  param inout name "info" type class_ref 240130 // Properties
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "---------------------------------------------------------------

Attempts to establish a connection to the given database URL.
The <code>DriverManager</code> attempts to select an appropriate driver from
the set of registered JDBC drivers.
<p>
<B>Note:</B> If a property is specified as part of the {@code url} and
is also specified in the {@code Properties} object, it is
implementation-defined as to which value will take precedence.
For maximum portability, an application should only specify a
property once.

@param url a database url of the form
<code> jdbc:<em>subprotocol</em>:<em>subname</em></code>
@param info a list of arbitrary string tag/value pairs as
connection arguments; normally at least a \"user\" and
\"password\" property should be included
@return a Connection to the URL
@exception SQLException if a database access error occurs or the url is
{@code null}
@throws SQLTimeoutException  when the driver has determined that the
timeout value specified by the {@code setLoginTimeout} method
has been exceeded and has at least tried to cancel the
current database connection attempt
"
      end

      operation 8169474 "getConnection"
	class_operation public return_type class_ref 1038338 // Connection
	nparams 3
	  param inout name "url" type class_ref 128130 // String
	  param inout name "user" type class_ref 128130 // String
	  param inout name "password" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Attempts to establish a connection to the given database URL.
The <code>DriverManager</code> attempts to select an appropriate driver from
the set of registered JDBC drivers.
<p>
<B>Note:</B> If the {@code user} or {@code password} property are
also specified as part of the {@code url}, it is
implementation-defined as to which value will take precedence.
For maximum portability, an application should only specify a
property once.

@param url a database url of the form
<code>jdbc:<em>subprotocol</em>:<em>subname</em></code>
@param user the database user on whose behalf the connection is being
  made
@param password the user's password
@return a connection to the URL
@exception SQLException if a database access error occurs or the url is
{@code null}
@throws SQLTimeoutException  when the driver has determined that the
timeout value specified by the {@code setLoginTimeout} method
has been exceeded and has at least tried to cancel the
current database connection attempt
"
      end

      operation 8169602 "getConnection"
	class_operation public return_type class_ref 1038338 // Connection
	nparams 1
	  param inout name "url" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Attempts to establish a connection to the given database URL.
The <code>DriverManager</code> attempts to select an appropriate driver from
the set of registered JDBC drivers.

@param url a database url of the form
 <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>
@return a connection to the URL
@exception SQLException if a database access error occurs or the url is
{@code null}
@throws SQLTimeoutException  when the driver has determined that the
timeout value specified by the {@code setLoginTimeout} method
has been exceeded and has at least tried to cancel the
current database connection attempt
"
      end

      operation 8169730 "getDriver"
	class_operation public return_type class_ref 1040898 // Driver
	nparams 1
	  param inout name "url" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Attempts to locate a driver that understands the given URL.
The <code>DriverManager</code> attempts to select an appropriate driver from
the set of registered JDBC drivers.

@param url a database URL of the form
    <code>jdbc:<em>subprotocol</em>:<em>subname</em></code>
@return a <code>Driver</code> object representing a driver
that can connect to the given URL
@exception SQLException if a database access error occurs
"
      end

      operation 8169858 "registerDriver"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "driver" type class_ref 1040898 // Driver
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the given driver with the {@code DriverManager}.
A newly-loaded driver class should call
the method {@code registerDriver} to make itself
known to the {@code DriverManager}. If the driver is currently
registered, no action is taken.

@param driver the new JDBC Driver that is to be registered with the
              {@code DriverManager}
@exception SQLException if a database access error occurs
@exception NullPointerException if {@code driver} is null
"
      end

      operation 8169986 "registerDriver"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "driver" type class_ref 1040898 // Driver
	  param inout name "da" type class_ref 1041282 // DriverAction
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the given driver with the {@code DriverManager}.
A newly-loaded driver class should call
the method {@code registerDriver} to make itself
known to the {@code DriverManager}. If the driver is currently
registered, no action is taken.

@param driver the new JDBC Driver that is to be registered with the
              {@code DriverManager}
@param da     the {@code DriverAction} implementation to be used when
              {@code DriverManager#deregisterDriver} is called
@exception SQLException if a database access error occurs
@exception NullPointerException if {@code driver} is null
@since 1.8
"
      end

      operation 8170114 "deregisterDriver"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "driver" type class_ref 1040898 // Driver
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Removes the specified driver from the {@code DriverManager}'s list of
registered drivers.
<p>
If a {@code null} value is specified for the driver to be removed, then no
action is taken.
<p>
If a security manager exists and its {@code checkPermission} denies
permission, then a {@code SecurityException} will be thrown.
<p>
If the specified driver is not found in the list of registered drivers,
then no action is taken.  If the driver was found, it will be removed
from the list of registered drivers.
<p>
If a {@code DriverAction} instance was specified when the JDBC driver was
registered, its deregister method will be called
prior to the driver being removed from the list of registered drivers.

@param driver the JDBC Driver to remove
@exception SQLException if a database access error occurs
@throws SecurityException if a security manager exists and its
{@code checkPermission} method denies permission to deregister a driver.

@see SecurityManager#checkPermission
"
      end

      operation 8170242 "getDrivers"
	class_operation public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Driver> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Retrieves an Enumeration with all of the currently loaded JDBC drivers
to which the current caller has access.

<P><B>Note:</B> The classname of a driver can be found using
<CODE>d.getClass().getName()</CODE>

@return the list of JDBC Drivers loaded by the caller's class loader
"
      end

      operation 8170370 "setLoginTimeout"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum time in seconds that a driver will wait
while attempting to connect to a database once the driver has
been identified.

@param seconds the login time limit in seconds; zero means there is no limit
@see #getLoginTimeout
"
      end

      operation 8170498 "getLoginTimeout"
	class_operation public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the maximum time in seconds that a driver can wait
when attempting to log in to a database.

@return the driver login time limit in seconds
@see #setLoginTimeout
"
      end

      operation 8170626 "setLogStream"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 128258 // PrintStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the logging/tracing PrintStream that is used
by the <code>DriverManager</code>
and all drivers.
<P>
In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks
to see that there is an <code>SQLPermission</code> object before setting
the logging stream.  If a <code>SecurityManager</code> exists and its
<code>checkPermission</code> method denies setting the log writer, this
method throws a <code>java.lang.SecurityException</code>.

@param out the new logging/tracing PrintStream; to disable, set to <code>null</code>
@deprecated Use {@code setLogWriter}
@throws SecurityException if a security manager exists and its
   <code>checkPermission</code> method denies setting the log stream

@see SecurityManager#checkPermission
@see #getLogStream
"
      end

      operation 8170754 "getLogStream"
	class_operation public return_type class_ref 128258 // PrintStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Retrieves the logging/tracing PrintStream that is used by the <code>DriverManager</code>
and all drivers.

@return the logging/tracing PrintStream; if disabled, is <code>null</code>
@deprecated  Use {@code getLogWriter}
@see #setLogStream
"
      end

      operation 8170882 "println"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a message to the current JDBC log stream.

@param message a log or tracing message
"
      end

      operation 8171010 "isDriverAllowed"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "driver" type class_ref 1040898 // Driver
	  param inout name "caller" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------------------------------------------------------
 Indicates whether the class object that would be created if the code calling
 DriverManager is accessible."
      end

      operation 8171138 "isDriverAllowed"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "driver" type class_ref 1040898 // Driver
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8171266 "loadInitialDrivers"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8171394 "getConnection"
	class_operation private return_type class_ref 1038338 // Connection
	nparams 3
	  param inout name "url" type class_ref 128130 // String
	  param inout name "info" type class_ref 240130 // Properties
	  param inout name "caller" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Worker method called by the public getConnection() methods."
      end
    end

    class 1041538 "DriverInfo"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Wrapper class for registered Drivers in order to not expose Driver.equals()
to avoid the capture of the Driver it being compared to as it might not
normally have access.
"
      classrelation 3400834 // driver (<unidirectional association>)
	relation 3400834 --->
	  a role_name "driver" const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3400834 // driver (<unidirectional association>)
	  b parent class_ref 1040898 // Driver
      end

      classrelation 3400962 // da (<unidirectional association>)
	relation 3400962 --->
	  a role_name "da" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3400962 // da (<unidirectional association>)
	  b parent class_ref 1041282 // DriverAction
      end

      operation 8171522 "DriverInfo"
	package explicit_return_type ""
	nparams 2
	  param inout name "driver" type class_ref 1040898 // Driver
	  param inout name "action" type class_ref 1041282 // DriverAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8171650 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8171778 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8171906 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8172034 "action"
	package return_type class_ref 1041282 // DriverAction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1041666 "SQLPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The permission for which the <code>SecurityManager</code> will check
when code that is running an application with a
<code>SecurityManager</code> enabled, calls the
{@code DriverManager.deregisterDriver} method,
<code>DriverManager.setLogWriter</code> method,
<code>DriverManager.setLogStream</code> (deprecated) method,
{@code SyncFactory.setJNDIContext} method,
{@code SyncFactory.setLogger} method,
{@code Connection.setNetworktimeout} method,
or the <code>Connection.abort</code> method.
If there is no <code>SQLPermission</code> object, these methods
throw a <code>java.lang.SecurityException</code> as a runtime exception.
<P>
A <code>SQLPermission</code> object contains
a name (also referred to as a \"target name\") but no actions
list; there is either a named permission or there is not.
The target name is the name of the permission (see below). The
naming convention follows the  hierarchical property naming convention.
In addition, an asterisk
may appear at the end of the name, following a \".\", or by itself, to
signify a wildcard match. For example: <code>loadLibrary.*</code>
and <code>*</code> signify a wildcard match,
while <code>*loadLibrary</code> and <code>a*b</code> do not.
<P>
The following table lists all the possible <code>SQLPermission</code> target names.
The table gives a description of what the permission allows
and a discussion of the risks of granting code the permission.


<table border=1 cellpadding=5 summary=\"permission target name, what the permission allows, and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>

<tr>
  <td>setLog</td>
  <td>Setting of the logging stream</td>
  <td>This is a dangerous permission to grant.
The contents of the log may contain usernames and passwords,
SQL statements, and SQL data.</td>
</tr>
<tr>
<td>callAbort</td>
  <td>Allows the invocation of the {@code Connection} method
  {@code abort}</td>
  <td>Permits an application to terminate a physical connection to a
 database.</td>
</tr>
<tr>
<td>setSyncFactory</td>
  <td>Allows the invocation of the {@code SyncFactory} methods
  {@code setJNDIContext} and {@code setLogger}</td>
  <td>Permits an application to specify the JNDI context from which the
  {@code SyncProvider} implementations can be retrieved from and the logging
  object to be used by the {@code SyncProvider} implementation.</td>
</tr>

<tr>
<td>setNetworkTimeout</td>
  <td>Allows the invocation of the {@code Connection} method
  {@code setNetworkTimeout}</td>
  <td>Permits an application to specify the maximum period a
<code>Connection</code> or
objects created from the <code>Connection</code>
will wait for the database to reply to any one request.</td>
<tr>
<td>deregisterDriver</td>
  <td>Allows the invocation of the {@code DriverManager}
method {@code deregisterDriver}</td>
  <td>Permits an application to remove a JDBC driver from the list of
registered Drivers and release its resources.</td>
</tr>
</table>
<p>
@since 1.3
@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager

"
      classrelation 3403522 // <generalisation>
	relation 3403522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3403522 // <generalisation>
	  b parent class_ref 257410 // BasicPermission
      end

      operation 8218114 "SQLPermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SQLPermission</code> object with the specified name.
The name is the symbolic name of the <code>SQLPermission</code>.

@param name the name of this <code>SQLPermission</code> object, which must
be either {@code  setLog}, {@code callAbort}, {@code setSyncFactory},
 {@code deregisterDriver}, or {@code setNetworkTimeout}
@throws NullPointerException if <code>name</code> is <code>null</code>.
@throws IllegalArgumentException if <code>name</code> is empty.

"
      end

      operation 8218242 "SQLPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SQLPermission</code> object with the specified name.
The name is the symbolic name of the <code>SQLPermission</code>; the
actions <code>String</code> is currently unused and should be
<code>null</code>.

@param name the name of this <code>SQLPermission</code> object, which must
be either {@code  setLog}, {@code callAbort}, {@code setSyncFactory},
 {@code deregisterDriver}, or {@code setNetworkTimeout}
@param actions should be <code>null</code>
@throws NullPointerException if <code>name</code> is <code>null</code>.
@throws IllegalArgumentException if <code>name</code> is empty.

"
      end

      attribute 1897346 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -1439323187199563495L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Private serial version unique ID to ensure serialization
compatibility.

"
      end
    end

    class 1041794 "JDBCType"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P>Defines the constants that are used to identify generic
SQL types, called JDBC types.
<p>
@see SQLType
@since 1.8
"
      classrelation 3401602 // <realization>
	relation 3401602 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3401602 // <realization>
	  b parent class_ref 1039746 // SQLType
      end

      attribute 1887746 "BIT"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.BIT),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code BIT}.
"
      end

      attribute 1887874 "TINYINT"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.TINYINT),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code TINYINT}.
"
      end

      attribute 1888002 "SMALLINT"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.SMALLINT),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code SMALLINT}.
"
      end

      attribute 1888130 "INTEGER"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.INTEGER),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code INTEGER}.
"
      end

      attribute 1888258 "BIGINT"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.BIGINT),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code BIGINT}.
"
      end

      attribute 1888386 "FLOAT"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.FLOAT),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code FLOAT}.
"
      end

      attribute 1888514 "REAL"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.REAL),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code REAL}.
"
      end

      attribute 1888642 "DOUBLE"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.DOUBLE),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code DOUBLE}.
"
      end

      attribute 1888770 "NUMERIC"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.NUMERIC),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code NUMERIC}.
"
      end

      attribute 1888898 "DECIMAL"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.DECIMAL),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code DECIMAL}.
"
      end

      attribute 1889026 "CHAR"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.CHAR),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code CHAR}.
"
      end

      attribute 1889154 "VARCHAR"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.VARCHAR),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code VARCHAR}.
"
      end

      attribute 1889282 "LONGVARCHAR"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.LONGVARCHAR),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code LONGVARCHAR}.
"
      end

      attribute 1889410 "DATE"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.DATE),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code DATE}.
"
      end

      attribute 1889538 "TIME"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.TIME),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code TIME}.
"
      end

      attribute 1889666 "TIMESTAMP"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.TIMESTAMP),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code TIMESTAMP}.
"
      end

      attribute 1889794 "BINARY"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.BINARY),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code BINARY}.
"
      end

      attribute 1889922 "VARBINARY"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.VARBINARY),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code VARBINARY}.
"
      end

      attribute 1890050 "LONGVARBINARY"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.LONGVARBINARY),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code LONGVARBINARY}.
"
      end

      attribute 1890178 "NULL"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.NULL),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL value {@code NULL}.
"
      end

      attribute 1890306 "OTHER"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.OTHER),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the SQL type
is database-specific and gets mapped to a Java object that can be
accessed via the methods getObject and setObject.
"
      end

      attribute 1890434 "JAVA_OBJECT"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.JAVA_OBJECT),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the SQL type
is database-specific and gets mapped to a Java object that can be
accessed via the methods getObject and setObject.
"
      end

      attribute 1890562 "DISTINCT"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.DISTINCT),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code DISTINCT}.
"
      end

      attribute 1890690 "STRUCT"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.STRUCT),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code STRUCT}.
"
      end

      attribute 1890818 "ARRAY"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.ARRAY),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code ARRAY}.
"
      end

      attribute 1890946 "BLOB"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.BLOB),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code BLOB}.
"
      end

      attribute 1891074 "CLOB"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.CLOB),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code CLOB}.
"
      end

      attribute 1891202 "REF"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.REF),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code REF}.
"
      end

      attribute 1891330 "DATALINK"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.DATALINK),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code DATALINK}.
"
      end

      attribute 1891458 "BOOLEAN"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.BOOLEAN),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code BOOLEAN}.
"
      end

      attribute 1891586 "ROWID"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.ROWID),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " JDBC 4.0 Types 

Identifies the SQL type {@code ROWID}.
"
      end

      attribute 1891714 "NCHAR"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.NCHAR),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code NCHAR}.
"
      end

      attribute 1891842 "NVARCHAR"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.NVARCHAR),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code NVARCHAR}.
"
      end

      attribute 1891970 "LONGNVARCHAR"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.LONGNVARCHAR),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code LONGNVARCHAR}.
"
      end

      attribute 1892098 "NCLOB"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.NCLOB),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code NCLOB}.
"
      end

      attribute 1892226 "SQLXML"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.SQLXML),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code SQLXML}.
"
      end

      attribute 1892354 "REF_CURSOR"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.REF_CURSOR),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " JDBC 4.2 Types 

Identifies the generic SQL type {@code REF_CURSOR}.
"
      end

      attribute 1892482 "TIME_WITH_TIMEZONE"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.TIME_WITH_TIMEZONE),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code TIME_WITH_TIMEZONE}.
"
      end

      attribute 1892610 "TIMESTAMP_WITH_TIMEZONE"
	public type class_ref 1041794 // JDBCType
	cpp_decl ""
	java_decl "  ${@}${name}(Types.TIMESTAMP_WITH_TIMEZONE),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the generic SQL type {@code TIMESTAMP_WITH_TIMEZONE}.
"
      end

      classrelation 3401730 // type (<unidirectional association>)
	relation 3401730 --->
	  a role_name "type" private
	    comment "
The Integer value for the JDBCType.  It maps to a value in
{@code Types.java}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3401730 // type (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      operation 8172674 "JDBCType"
	package explicit_return_type ""
	nparams 1
	  param in name "type" type class_ref 137602 // Integer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor to specify the data type value from {@code Types) for
this data type.
@param type The value from {@code Types) for this data type
"
      end

      operation 8172802 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc }
@return The name of this {@code SQLType}.
"
      end

      operation 8172930 "getVendor"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the vendor that supports this data type.
@return  The name of the vendor for this data type which is
{@literal java.sql} for JDBCType.
"
      end

      operation 8173058 "getVendorTypeNumber"
	public return_type class_ref 137602 // Integer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the vendor specific type number for the data type.
@return  An Integer representing the data type. For {@code JDBCType},
the value will be the same value as in {@code Types} for the data type.
"
      end

      operation 8173186 "valueOf"
	class_operation public return_type class_ref 1041794 // JDBCType
	nparams 1
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code JDBCType} that corresponds to the specified
{@code Types} value
@param type {@code Types} value
@return The {@code JDBCType} constant
@throws IllegalArgumentException if this enum type has no constant with
the specified {@code Types} value
@see Types
"
      end
    end

    class 1041922 "PseudoColumnUsage"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Enumeration for pseudo/hidden column usage.

@since 1.7
@see DatabaseMetaData#getPseudoColumns
"
      attribute 1893634 "SELECT_LIST_ONLY"
	public type class_ref 1041922 // PseudoColumnUsage
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The pseudo/hidden column may only be used in a SELECT list.

"
      end

      attribute 1893762 "WHERE_CLAUSE_ONLY"
	public type class_ref 1041922 // PseudoColumnUsage
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The pseudo/hidden column may only be used in a WHERE clause.

"
      end

      attribute 1893890 "NO_USAGE_RESTRICTIONS"
	public type class_ref 1041922 // PseudoColumnUsage
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "There are no restrictions on the usage of the pseudo/hidden columns.

"
      end

      attribute 1894018 "USAGE_UNKNOWN"
	public type class_ref 1041922 // PseudoColumnUsage
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The usage of the pseudo/hidden column cannot be determined.
"
      end
    end

    class 1042050 "SQLData"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The interface used for the custom mapping of an SQL user-defined type (UDT) to
a class in the Java programming language. The class object for a class
implementing the <code>SQLData</code> interface will be entered in the
appropriate <code>Connection</code> object's type map along with the SQL
name of the UDT for which it is a custom mapping.
<P>
Typically, a <code>SQLData</code> implementation
will define a field for each attribute of an SQL structured type or a
single field for an SQL <code>DISTINCT</code> type. When the UDT is
retrieved from a data source with the <code>ResultSet.getObject</code>
method, it will be mapped as an instance of this class.  A programmer
can operate on this class instance just as on any other object in the
Java programming language and then store any changes made to it by
calling the <code>PreparedStatement.setObject</code> method,
which will map it back to the SQL type.
<p>
It is expected that the implementation of the class for a custom
mapping will be done by a tool.  In a typical implementation, the
programmer would simply supply the name of the SQL UDT, the name of
the class to which it is being mapped, and the names of the fields to
which each of the attributes of the UDT is to be mapped.  The tool will use
this information to implement the <code>SQLData.readSQL</code> and
<code>SQLData.writeSQL</code> methods.  The <code>readSQL</code> method
calls the appropriate <code>SQLInput</code> methods to read
each attribute from an <code>SQLInput</code> object, and the
<code>writeSQL</code> method calls <code>SQLOutput</code> methods
to write each attribute back to the data source via an
<code>SQLOutput</code> object.
<P>
An application programmer will not normally call <code>SQLData</code> methods
directly, and the <code>SQLInput</code> and <code>SQLOutput</code> methods
are called internally by <code>SQLData</code> methods, not by application code.

@since 1.2
"
      operation 8204418 "getSQLTypeName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fully-qualified
name of the SQL user-defined type that this object represents.
This method is called by the JDBC driver to get the name of the
UDT instance that is being mapped to this instance of
<code>SQLData</code>.

@return the type name that was passed to the method <code>readSQL</code>
           when this object was constructed and populated
@exception SQLException if there is a database access error
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8204546 "readSQL"
	public explicit_return_type "void"
	nparams 2
	  param inout name "stream" type class_ref 1042178 // SQLInput
	  param inout name "typeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates this object with data read from the database.
The implementation of the method must follow this protocol:
<UL>
<LI>It must read each of the attributes or elements of the SQL
type  from the given input stream.  This is done
by calling a method of the input stream to read each
item, in the order that they appear in the SQL definition
of the type.
<LI>The method <code>readSQL</code> then
assigns the data to appropriate fields or
elements (of this or other objects).
Specifically, it must call the appropriate <i>reader</i> method
(<code>SQLInput.readString</code>, <code>SQLInput.readBigDecimal</code>,
and so on) method(s) to do the following:
for a distinct type, read its single data element;
for a structured type, read a value for each attribute of the SQL type.
</UL>
The JDBC driver initializes the input stream with a type map
before calling this method, which is used by the appropriate
<code>SQLInput</code> reader method on the stream.

@param stream the <code>SQLInput</code> object from which to read the data for
the value that is being custom mapped
@param typeName the SQL type name of the value on the data stream
@exception SQLException if there is a database access error
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see SQLInput
@since 1.2
"
      end

      operation 8204674 "writeSQL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 1042306 // SQLOutput
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes this object to the given SQL data stream, converting it back to
its SQL value in the data source.
The implementation of the method must follow this protocol:<BR>
It must write each of the attributes of the SQL type
to the given output stream.  This is done by calling a
method of the output stream to write each item, in the order that
they appear in the SQL definition of the type.
Specifically, it must call the appropriate <code>SQLOutput</code> writer
method(s) (<code>writeInt</code>, <code>writeString</code>, and so on)
to do the following: for a Distinct Type, write its single data element;
for a Structured Type, write a value for each attribute of the SQL type.

@param stream the <code>SQLOutput</code> object to which to write the data for
the value that was custom mapped
@exception SQLException if there is a database access error
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see SQLOutput
@since 1.2
"
      end
    end

    class 1042178 "SQLInput"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An input stream that contains a stream of values representing an
instance of an SQL structured type or an SQL distinct type.
This interface, used only for custom mapping, is used by the driver
behind the scenes, and a programmer never directly invokes
<code>SQLInput</code> methods. The <i>reader</i> methods
(<code>readLong</code>, <code>readBytes</code>, and so on)
provide a way  for an implementation of the <code>SQLData</code>
 interface to read the values in an <code>SQLInput</code> object.
 And as described in <code>SQLData</code>, calls to reader methods must
be made in the order that their corresponding attributes appear in the
SQL definition of the type.
The method <code>wasNull</code> is used to determine whether
the last value read was SQL <code>NULL</code>.
<P>When the method <code>getObject</code> is called with an
object of a class implementing the interface <code>SQLData</code>,
the JDBC driver calls the method <code>SQLData.getSQLType</code>
to determine the SQL type of the user-defined type (UDT)
being custom mapped. The driver
creates an instance of <code>SQLInput</code>, populating it with the
attributes of the UDT.  The driver then passes the input
stream to the method <code>SQLData.readSQL</code>, which in turn
calls the <code>SQLInput</code> reader methods
in its implementation for reading the
attributes from the input stream.
@since 1.2
"
      operation 8207874 "readString"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Methods for reading attributes from the stream of SQL data.
 These methods correspond to the column-accessor methods of
 java.sql.ResultSet.
================================================================

Reads the next attribute in the stream and returns it as a <code>String</code>
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8208002 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>boolean</code>
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>false</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8208130 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>byte</code>
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8208258 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>short</code>
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8208386 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as an <code>int</code>
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8208514 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>long</code>
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8208642 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>float</code>
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8208770 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>double</code>
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8208898 "readBigDecimal"
	public return_type class_ref 145794 // BigDecimal
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>java.math.BigDecimal</code>
object in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8209026 "readBytes"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as an array of bytes
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8209154 "readDate"
	public return_type class_ref 1038466 // Date
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>java.sql.Date</code> object.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8209282 "readTime"
	public return_type class_ref 1038594 // Time
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>java.sql.Time</code> object.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8209410 "readTimestamp"
	public return_type class_ref 1038722 // Timestamp
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>java.sql.Timestamp</code> object.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8209538 "readCharacterStream"
	public return_type class_ref 407298 // Reader
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a stream of Unicode characters.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8209666 "readAsciiStream"
	public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a stream of ASCII characters.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8209794 "readBinaryStream"
	public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a stream of uninterpreted
bytes.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8209922 "readObject"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Methods for reading items of SQL user-defined types from the stream.
================================================================

Reads the datum at the head of the stream and returns it as an
<code>Object</code> in the Java programming language.  The
actual type of the object returned is determined by the default type
mapping, and any customizations present in this stream's type map.

<P>A type map is registered with the stream by the JDBC driver before the
stream is passed to the application.

<P>When the datum at the head of the stream is an SQL <code>NULL</code>,
the method returns <code>null</code>.  If the datum is an SQL structured or distinct
type, it determines the SQL type of the datum at the head of the stream.
If the stream's type map has an entry for that SQL type, the driver
constructs an object of the appropriate class and calls the method
<code>SQLData.readSQL</code> on that object, which reads additional data from the
stream, using the protocol described for that method.

@return the datum at the head of the stream as an <code>Object</code> in the
Java programming language;<code>null</code> if the datum is SQL <code>NULL</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8210050 "readRef"
	public return_type class_ref 1038850 // Ref
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an SQL <code>REF</code> value from the stream and returns it as a
<code>Ref</code> object in the Java programming language.

@return a <code>Ref</code> object representing the SQL <code>REF</code> value
at the head of the stream; <code>null</code> if the value read is
SQL <code>NULL</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8210178 "readBlob"
	public return_type class_ref 1037570 // Blob
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an SQL <code>BLOB</code> value from the stream and returns it as a
<code>Blob</code> object in the Java programming language.

@return a <code>Blob</code> object representing data of the SQL <code>BLOB</code> value
at the head of the stream; <code>null</code> if the value read is
SQL <code>NULL</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8210306 "readClob"
	public return_type class_ref 1038978 // Clob
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an SQL <code>CLOB</code> value from the stream and returns it as a
<code>Clob</code> object in the Java programming language.

@return a <code>Clob</code> object representing data of the SQL <code>CLOB</code> value
at the head of the stream; <code>null</code> if the value read is
SQL <code>NULL</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8210434 "readArray"
	public return_type class_ref 1037058 // Array
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an SQL <code>ARRAY</code> value from the stream and returns it as an
<code>Array</code> object in the Java programming language.

@return an <code>Array</code> object representing data of the SQL
<code>ARRAY</code> value at the head of the stream; <code>null</code>
if the value read is SQL <code>NULL</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8210562 "wasNull"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the last value read was SQL <code>NULL</code>.

@return <code>true</code> if the most recently read SQL value was SQL
<code>NULL</code>; <code>false</code> otherwise
@exception SQLException if a database access error occurs

@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8210690 "readURL"
	public return_type class_ref 243458 // URL
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---------------------------- JDBC 3.0 -------------------------

Reads an SQL <code>DATALINK</code> value from the stream and returns it as a
<code>java.net.URL</code> object in the Java programming language.

@return a <code>java.net.URL</code> object.
@exception SQLException if a database access error occurs,
           or if a URL is malformed
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8210818 "readNClob"
	public return_type class_ref 1039490 // NClob
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---------------------------- JDBC 4.0 -------------------------

Reads an SQL <code>NCLOB</code> value from the stream and returns it as a
<code>NClob</code> object in the Java programming language.

@return a <code>NClob</code> object representing data of the SQL <code>NCLOB</code> value
at the head of the stream; <code>null</code> if the value read is
SQL <code>NULL</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8210946 "readNString"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>String</code>
in the Java programming language. It is intended for use when
accessing  <code>NCHAR</code>,<code>NVARCHAR</code>
and <code>LONGNVARCHAR</code> columns.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8211074 "readSQLXML"
	public return_type class_ref 1039618 // SQLXML
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an SQL <code>XML</code> value from the stream and returns it as a
<code>SQLXML</code> object in the Java programming language.

@return a <code>SQLXML</code> object representing data of the SQL <code>XML</code> value
at the head of the stream; <code>null</code> if the value read is
SQL <code>NULL</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8211202 "readRowId"
	public return_type class_ref 1039362 // RowId
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an SQL <code>ROWID</code> value from the stream and returns it as a
<code>RowId</code> object in the Java programming language.

@return a <code>RowId</code> object representing data of the SQL <code>ROWID</code> value
at the head of the stream; <code>null</code> if the value read is
SQL <code>NULL</code>
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8211330 "readObject"
	public explicit_return_type "T"
	nparams 1
	  param inout name "type" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 4.2 -----------------------------

Reads the next attribute in the stream and returns it as an
{@code Object} in the Java programming language. The
actual type of the object returned is determined by the specified
Java data type, and any customizations present in this
stream's type map.

<P>A type map is registered with the stream by the JDBC driver before the
stream is passed to the application.

<P>When the attribute at the head of the stream is an SQL {@code NULL}
the method returns {@code null}. If the attribute is an SQL
structured or distinct
type, it determines the SQL type of the attribute at the head of the stream.
If the stream's type map has an entry for that SQL type, the driver
constructs an object of the appropriate class and calls the method
{@code SQLData.readSQL} on that object, which reads additional data from the
stream, using the protocol described for that method.
<p>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param <T> the type of the class modeled by this Class object
@param type Class representing the Java data type to convert the attribute to.
@return the attribute at the head of the stream as an {@code Object} in the
Java programming language;{@code null} if the attribute is SQL {@code NULL}
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.8
"
      end
    end

    class 1042306 "SQLOutput"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The output stream for writing the attributes of a user-defined
type back to the database.  This interface, used
only for custom mapping, is used by the driver, and its
methods are never directly invoked by a programmer.
<p>When an object of a class implementing the interface
<code>SQLData</code> is passed as an argument to an SQL statement, the
JDBC driver calls the method <code>SQLData.getSQLType</code> to
determine the  kind of SQL
datum being passed to the database.
The driver then creates an instance of <code>SQLOutput</code> and
passes it to the method <code>SQLData.writeSQL</code>.
The method <code>writeSQL</code> in turn calls the
appropriate <code>SQLOutput</code> <i>writer</i> methods
<code>writeBoolean</code>, <code>writeCharacterStream</code>, and so on)
to write data from the <code>SQLData</code> object to
the <code>SQLOutput</code> output stream as the
representation of an SQL user-defined type.
@since 1.2
"
      operation 8214530 "writeString"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Methods for writing attributes to the stream of SQL data.
 These methods correspond to the column-accessor methods of
 java.sql.ResultSet.
================================================================

Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8214658 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java boolean.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8214786 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java byte.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8214914 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java short.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8215042 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java int.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8215170 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java long.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8215298 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java float.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8215426 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java double.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8215554 "writeBigDecimal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 145794 // BigDecimal
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a java.math.BigDecimal object.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8215682 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as an array of bytes.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8215810 "writeDate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1038466 // Date
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a java.sql.Date object.
Writes the next attribute to the stream as a <code>java.sql.Date</code> object
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8215938 "writeTime"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1038594 // Time
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a java.sql.Time object.
Writes the next attribute to the stream as a <code>java.sql.Date</code> object
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8216066 "writeTimestamp"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1038722 // Timestamp
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a java.sql.Timestamp object.
Writes the next attribute to the stream as a <code>java.sql.Date</code> object
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8216194 "writeCharacterStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a stream of Unicode characters.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8216322 "writeAsciiStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a stream of ASCII characters.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8216450 "writeBinaryStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a stream of uninterpreted
bytes.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8216578 "writeObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1042050 // SQLData
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Methods for writing items of SQL user-defined types to the stream.
 These methods pass objects to the database as values of SQL
 Structured Types, Distinct Types, Constructed Types, and Locator
 Types.  They decompose the Java object(s) and write leaf data
 items using the methods above.
================================================================

Writes to the stream the data contained in the given
<code>SQLData</code> object.
When the <code>SQLData</code> object is <code>null</code>, this
method writes an SQL <code>NULL</code> to the stream.
Otherwise, it calls the <code>SQLData.writeSQL</code>
method of the given object, which
writes the object's attributes to the stream.
The implementation of the method <code>SQLData.writeSQL</code>
calls the appropriate <code>SQLOutput</code> writer method(s)
for writing each of the object's attributes in order.
The attributes must be read from an <code>SQLInput</code>
input stream and written to an <code>SQLOutput</code>
output stream in the same order in which they were
listed in the SQL definition of the user-defined type.

@param x the object representing data of an SQL structured or
distinct type
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8216706 "writeRef"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1038850 // Ref
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an SQL <code>REF</code> value to the stream.

@param x a <code>Ref</code> object representing data of an SQL
<code>REF</code> value
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8216834 "writeBlob"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1037570 // Blob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an SQL <code>BLOB</code> value to the stream.

@param x a <code>Blob</code> object representing data of an SQL
<code>BLOB</code> value

@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8216962 "writeClob"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1038978 // Clob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an SQL <code>CLOB</code> value to the stream.

@param x a <code>Clob</code> object representing data of an SQL
<code>CLOB</code> value

@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8217090 "writeStruct"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1040386 // Struct
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an SQL structured type value to the stream.

@param x a <code>Struct</code> object representing data of an SQL
structured type

@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8217218 "writeArray"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1037058 // Array
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an SQL <code>ARRAY</code> value to the stream.

@param x an <code>Array</code> object representing data of an SQL
<code>ARRAY</code> type

@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.2
"
      end

      operation 8217346 "writeURL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 243458 // URL
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------- JDBC 3.0 ------------------------

Writes a SQL <code>DATALINK</code> value to the stream.

@param x a <code>java.net.URL</code> object representing the data
of SQL DATALINK type

@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 8217474 "writeNString"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------- JDBC 4.0 ------------------------

Writes the next attribute to the stream as a <code>String</code>
in the Java programming language. The driver converts this to a
SQL <code>NCHAR</code> or
<code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value
(depending on the argument's
size relative to the driver's limits on <code>NVARCHAR</code> values)
when it sends it to the stream.

@param x the value to pass to the database
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8217602 "writeNClob"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1039490 // NClob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an SQL <code>NCLOB</code> value to the stream.

@param x a <code>NClob</code> object representing data of an SQL
<code>NCLOB</code> value

@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8217730 "writeRowId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1039362 // RowId
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an SQL <code>ROWID</code> value to the stream.

@param x a <code>RowId</code> object representing data of an SQL
<code>ROWID</code> value

@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8217858 "writeSQLXML"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 1039618 // SQLXML
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an SQL <code>XML</code> value to the stream.

@param x a <code>SQLXML</code> object representing data of an SQL
<code>XML</code> value

@throws SQLException if a database access error occurs,
the <code>java.xml.transform.Result</code>,
 <code>Writer</code> or <code>OutputStream</code> has not been closed for the <code>SQLXML</code> object or
 if there is an error processing the XML value.  The <code>getCause</code> method
 of the exception may provide a more detailed exception, for example, if the
 stream does not contain valid XML.
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 8217986 "writeObject"
	public explicit_return_type "void"
	nparams 2
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "targetSqlType" type class_ref 1039746 // SQLType
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 4.2 -----------------------------

Writes to the stream the data contained in the given object. The
object will be converted to the specified targetSqlType
before being sent to the stream.
<p>
When the {@code object} is {@code null}, this
method writes an SQL {@code NULL} to the stream.
<p>
If the object has a custom mapping (is of a class implementing the
interface {@code SQLData}),
the JDBC driver should call the method {@code SQLData.writeSQL} to
write it to the SQL data stream.
If, on the other hand, the object is of a class implementing
{@code Ref}, {@code Blob}, {@code Clob},  {@code NClob},
 {@code Struct}, {@code java.net.URL},
or {@code Array}, the driver should pass it to the database as a
value of the corresponding SQL type.
<P>
The default implementation will throw {@code SQLFeatureNotSupportedException}

@param x the object containing the input parameter value
@param targetSqlType the SQL type to be sent to the database.
@exception SQLException if a database access error occurs  or
           if the Java Object specified by x is an InputStream
           or Reader object and the value of the scale parameter is less
           than zero
@exception SQLFeatureNotSupportedException if
the JDBC driver does not support this data type
@see JDBCType
@see SQLType
@since 1.8
"
      end
    end

    class 1042434 "SQLDataException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The subclass of {@link SQLException} thrown when the SQLState class value
is '<i>22</i>', or under vendor-specified conditions.  This indicates
various data errors, including but not limited to data conversion errors,
division by 0, and invalid arguments to functions.
<p>
Please consult your driver vendor documentation for the vendor-specified
conditions for which this <code>Exception</code> may be thrown.
@since 1.6
"
      classrelation 3402882 // <generalisation>
	relation 3402882 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3402882 // <generalisation>
	  b parent class_ref 1042562 // SQLNonTransientException
      end

      operation 8205826 "SQLDataException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLDataException</code> object.
The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>

@since 1.6
"
      end

      operation 8205954 "SQLDataException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLDataException</code> object with a given
<code>reason</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>

@param reason a description of the exception
@since 1.6
"
      end

      operation 8206082 "SQLDataException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLDataException</code> object with a given
<code>reason</code> and <code>SQLState</code>. The
vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@since 1.6
"
      end

      operation 8206210 "SQLDataException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLDataException</code> object with a given
<code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor specific exception code
@since 1.6
"
      end

      operation 8206338 "SQLDataException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLDataException</code> object with a given
<code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8206466 "SQLDataException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLDataException</code> object with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8206594 "SQLDataException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLDataException</code> object with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8206722 "SQLDataException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLDataException</code> object with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      attribute 1896706 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6889123282670549800L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1042562 "SQLNonTransientException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The subclass of {@link SQLException} thrown when an instance where a retry
of the same operation would fail unless the cause of the <code>SQLException</code>
is corrected.
<p>

@since 1.6
"
      classrelation 3402754 // <generalisation>
	relation 3402754 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3402754 // <generalisation>
	  b parent class_ref 1037186 // SQLException
      end

      operation 8204802 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLNonTransientException</code> object.
 The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>

@since 1.6
"
      end

      operation 8204930 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLNonTransientException</code> object
with a given <code>reason</code>. The <code>SQLState</code>
is initialized to <code>null</code> and the vendor code is initialized
to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>

@param reason a description of the exception
@since 1.6
"
      end

      operation 8205058 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLNonTransientException</code> object
with a given <code>reason</code> and <code>SQLState</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@since 1.6
"
      end

      operation 8205186 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLNonTransientException</code> object
with a given <code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor specific exception code
@since 1.6
"
      end

      operation 8205314 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLNonTransientException</code> object
 with a given  <code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8205442 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientException</code> object
with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8205570 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLNonTransientException</code> object
with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8205698 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLNonTransientException</code> object
with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      attribute 1896578 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -9104382843534716547L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1042690 "SQLIntegrityConstraintViolationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The subclass of {@link SQLException} thrown when the SQLState class value
is '<i>23</i>', or under vendor-specified conditions.
This indicates that an integrity
constraint (foreign key, primary key or unique key) has been violated.
<p>
Please consult your driver vendor documentation for the vendor-specified
conditions for which this <code>Exception</code> may be thrown.
@since 1.6
"
      classrelation 3403138 // <generalisation>
	relation 3403138 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3403138 // <generalisation>
	  b parent class_ref 1042562 // SQLNonTransientException
      end

      operation 8211458 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLIntegrityConstraintViolationException</code> object.
The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@since 1.6
"
      end

      operation 8211586 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLIntegrityConstraintViolationException</code>
 with a given <code>reason</code>. The <code>SQLState</code>
is initialized to <code>null</code> and the vendor code is initialized
to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@since 1.6
"
      end

      operation 8211714 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLIntegrityConstraintViolationException</code>
object with a given <code>reason</code> and <code>SQLState</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@since 1.6
"
      end

      operation 8211842 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLIntegrityConstraintViolationException</code> object
with a given <code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor specific exception code
@since 1.6
"
      end

      operation 8211970 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>SQLIntegrityConstraintViolationException</code> object with
 a given  <code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code>  method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8212098 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLIntegrityConstraintViolationException</code> object
with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param cause the (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8212226 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLIntegrityConstraintViolationException</code> object
 with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code>  method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8212354 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLIntegrityConstraintViolationException</code> object
with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
@param cause the (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      attribute 1896962 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8033405298774849169L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1042818 "SQLInvalidAuthorizationSpecException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The subclass of {@link SQLException} thrown when the SQLState class value
is '<i>28</i>', or under vendor-specified conditions. This indicates that
the authorization credentials presented during connection establishment
are not valid.
<p>
Please consult your driver vendor documentation for the vendor-specified
conditions for which this <code>Exception</code> may be thrown.
@since 1.6
"
      classrelation 3403266 // <generalisation>
	relation 3403266 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3403266 // <generalisation>
	  b parent class_ref 1042562 // SQLNonTransientException
      end

      operation 8212482 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLInvalidAuthorizationSpecException</code> object.
The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@since 1.6
"
      end

      operation 8212610 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLInvalidAuthorizationSpecException</code> object
 with a given <code>reason</code>. The <code>SQLState</code>
is initialized to <code>null</code> and the vendor code is initialized
to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@since 1.6
"
      end

      operation 8212738 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLInvalidAuthorizationSpecException</code> object
with a given <code>reason</code> and <code>SQLState</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@since 1.6
"
      end

      operation 8212866 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLInvalidAuthorizationSpecException</code> object
with a given <code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor specific exception code
@since 1.6
"
      end

      operation 8212994 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLInvalidAuthorizationSpecException</code> object
with a given  <code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8213122 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLInvalidAuthorizationSpecException</code> object
 with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8213250 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLInvalidAuthorizationSpecException</code> object
 with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code>  method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8213378 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLInvalidAuthorizationSpecException</code> object
with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      attribute 1897090 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -64105250450891498L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1042946 "SQLNonTransientConnectionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The subclass of {@link SQLException} thrown for the SQLState
class value '<i>08</i>', or under vendor-specified conditions.  This
indicates that the connection operation that failed will not succeed if
the operation is retried without the cause of the failure being corrected.
<p>
Please consult your driver vendor documentation for the vendor-specified
conditions for which this <code>Exception</code> may be thrown.
@since 1.6
"
      classrelation 3403394 // <generalisation>
	relation 3403394 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3403394 // <generalisation>
	  b parent class_ref 1042562 // SQLNonTransientException
      end

      operation 8213506 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLNonTransientConnectionException</code> object.
The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>

@since 1.6
"
      end

      operation 8213634 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLNonTransientConnectionException</code> object
 with a given <code>reason</code>. The <code>SQLState</code>
is initialized to <code>null</code> and the vendor code is initialized
to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@since 1.6
"
      end

      operation 8213762 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLNonTransientConnectionException</code> object
with a given <code>reason</code> and <code>SQLState</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@since 1.6
"
      end

      operation 8213890 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLNonTransientConnectionException</code> object
with a given <code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor specific exception code
@since 1.6
"
      end

      operation 8214018 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLNonTransientConnectionException</code> object
with a given  <code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8214146 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientException</code> object
with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8214274 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLNonTransientConnectionException</code> object
with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param cause the (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8214402 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLNonTransientConnectionException</code> object
with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      attribute 1897218 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5852318857474782892L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1043074 "SQLRecoverableException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The subclass of {@link SQLException} thrown in situations where a
previously failed operation might be able to succeed if the application performs
 some recovery steps and retries the entire transaction or in the case of a
distributed transaction, the transaction branch.  At a minimum,
the recovery operation must include closing the current connection and getting
a new connection.
<p>

@since 1.6
"
      classrelation 3403650 // <generalisation>
	relation 3403650 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3403650 // <generalisation>
	  b parent class_ref 1037186 // SQLException
      end

      operation 8218370 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLRecoverableException</code> object.
The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@since 1.6
"
      end

      operation 8218498 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLRecoverableException</code> object
 with a given <code>reason</code>. The <code>SQLState</code>
is initialized to <code>null</code> and the vendor code is initialized
to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@since 1.6
"
      end

      operation 8218626 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLRecoverableException</code> object
with a given <code>reason</code> and <code>SQLState</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@since 1.6
"
      end

      operation 8218754 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLRecoverableException</code> object
 with a given <code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor specific exception code
@since 1.6
"
      end

      operation 8218882 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLRecoverableException</code> object
with a given  <code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8219010 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLRecoverableException</code> object
with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8219138 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLRecoverableException</code> object
with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8219266 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLRecoverableException</code> object
with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      attribute 1897474 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4144386502923131579L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1043202 "SQLSyntaxErrorException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The subclass of {@link SQLException} thrown when the SQLState class value
is '<i>42</i>', or under vendor-specified conditions. This indicates that the
in-progress query has violated SQL syntax rules.
<p>
Please consult your driver vendor documentation for the vendor-specified
conditions for which this <code>Exception</code> may be thrown.
@since 1.6
"
      classrelation 3403778 // <generalisation>
	relation 3403778 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3403778 // <generalisation>
	  b parent class_ref 1042562 // SQLNonTransientException
      end

      operation 8219394 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLSyntaxErrorException</code> object.
 The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@since 1.6
"
      end

      operation 8219522 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLSyntaxErrorException</code> object
with a given <code>reason</code>. The <code>SQLState</code>
is initialized to <code>null</code> and the vendor code is initialized
to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@since 1.6
"
      end

      operation 8219650 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLSyntaxErrorException</code> object
with a given <code>reason</code> and <code>SQLState</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@since 1.6
"
      end

      operation 8219778 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLSyntaxErrorException</code> object
 with a given <code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor specific exception code
@since 1.6
"
      end

      operation 8219906 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLSyntaxErrorException</code> object
  with a given  <code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8220034 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLSyntaxErrorException</code> object
with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8220162 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLSyntaxErrorException</code> object
with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param cause the (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8220290 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLSyntaxErrorException</code> object
with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      attribute 1897602 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1843832610477496053L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1043330 "SQLTimeoutException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P>The subclass of {@link SQLException} thrown when the timeout specified by
{@code Statement.setQueryTimeout}, {@code DriverManager.setLoginTimeout},
{@code DataSource.setLoginTimeout},{@code XADataSource.setLoginTimeout}
has expired.
<P> This exception does not correspond to a standard SQLState.

@since 1.6
"
      classrelation 3404034 // <generalisation>
	relation 3404034 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3404034 // <generalisation>
	  b parent class_ref 1043458 // SQLTransientException
      end

      operation 8221442 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTimeoutException</code> object.
The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@since 1.6
"
      end

      operation 8221570 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTimeoutException</code> object
with a given <code>reason</code>. The <code>SQLState</code>
is initialized to <code>null</code> and the vendor code is initialized
to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@since 1.6
"
      end

      operation 8221698 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTimeoutException</code> object
with a given <code>reason</code> and <code>SQLState</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@since 1.6
"
      end

      operation 8221826 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTimeoutException</code> object
with a given <code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor specific exception code
@since 1.6
"
      end

      operation 8221954 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTimeoutException</code> object
with a given  <code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8222082 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTimeoutException</code> object
with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8222210 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTimeoutException</code> object
 with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8222338 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLTimeoutException</code> object
with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      attribute 1897858 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4487171280562520262L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1043458 "SQLTransientException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The subclass of {@link SQLException} is thrown in situations where a
previously failed operation might be able to succeed when the operation is
retried without any intervention by application-level functionality.
<p>

@since 1.6
"
      classrelation 3403906 // <generalisation>
	relation 3403906 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3403906 // <generalisation>
	  b parent class_ref 1037186 // SQLException
      end

      operation 8220418 "SQLTransientException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientException</code> object.
The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@since 1.6
"
      end

      operation 8220546 "SQLTransientException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientException</code> object
 with a given <code>reason</code>. The <code>SQLState</code>
is initialized to <code>null</code> and the vendor code is initialized
to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@since 1.6
"
      end

      operation 8220674 "SQLTransientException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientException</code> object
with a given <code>reason</code> and <code>SQLState</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@since 1.6
"
      end

      operation 8220802 "SQLTransientException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientException</code> object
 with a given <code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor specific exception code
@since 1.6
"
      end

      operation 8220930 "SQLTransientException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientException</code> object
with a given  <code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8221058 "SQLTransientException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientException</code> object
with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8221186 "SQLTransientException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientException</code> object
with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8221314 "SQLTransientException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLTransientException</code> object
with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      attribute 1897730 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -9042733978262274539L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1043586 "SQLTransactionRollbackException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The subclass of {@link SQLException} thrown when the SQLState class value
is '<i>40</i>', or under vendor-specified conditions. This indicates that the
current statement was automatically rolled back by the database because
of deadlock or other transaction serialization failures.
<p>
Please consult your driver vendor documentation for the vendor-specified
conditions for which this <code>Exception</code> may be thrown.
@since 1.6
"
      classrelation 3404162 // <generalisation>
	relation 3404162 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3404162 // <generalisation>
	  b parent class_ref 1043458 // SQLTransientException
      end

      operation 8222466 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransactionRollbackException</code> object.
The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@since 1.6
"
      end

      operation 8222594 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransactionRollbackException</code> object
with a given <code>reason</code>. The <code>SQLState</code>
is initialized to <code>null</code> and the vendor code is initialized
to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@since 1.6
"
      end

      operation 8222722 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransactionRollbackException</code> object
with a given <code>reason</code> and <code>SQLState</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@since 1.6
"
      end

      operation 8222850 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransactionRollbackException</code> object
with a given <code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor specific exception code
@since 1.6
"
      end

      operation 8222978 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransactionRollbackException</code> object
with a given  <code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8223106 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransactionRollbackException</code> object
with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8223234 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransactionRollbackException</code> object
with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8223362 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLTransactionRollbackException</code> object
with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      attribute 1897986 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5246680841170837229L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1043714 "SQLTransientConnectionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The subclass of {@link SQLException} for the SQLState class
value '<i>08</i>', or under vendor-specified conditions.  This indicates
that the connection operation that failed might be able to succeed if
the operation is retried without any application-level changes.
<p>
Please consult your driver vendor documentation for the vendor-specified
conditions for which this <code>Exception</code> may be thrown.
@since 1.6
"
      classrelation 3404290 // <generalisation>
	relation 3404290 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3404290 // <generalisation>
	  b parent class_ref 1043458 // SQLTransientException
      end

      operation 8223490 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientConnectionException</code> object.
The <code>reason</code>, <code>SQLState</code> are initialized
to <code>null</code> and the vendor code is initialized to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@since 1.6
"
      end

      operation 8223618 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientConnectionException</code> object
with a given <code>reason</code>. The <code>SQLState</code>
is initialized to <code>null</code> and the vendor code is initialized
to 0.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@since 1.6
"
      end

      operation 8223746 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientConnectionException</code> object
with a given <code>reason</code> and <code>SQLState</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
is initialized to 0.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@since 1.6
"
      end

      operation 8223874 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientConnectionException</code> object
with a given <code>reason</code>, <code>SQLState</code>  and
<code>vendorCode</code>.

The <code>cause</code> is not initialized, and may subsequently be
initialized by a call to the
{@link Throwable#initCause(java.lang.Throwable)} method.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor specific exception code
@since 1.6
"
      end

      operation 8224002 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientConnectionException</code> object
with a given  <code>cause</code>.
The <code>SQLState</code> is initialized
to <code>null</code> and the vendor code is initialized to 0.
The <code>reason</code>  is initialized to <code>null</code> if
<code>cause==null</code> or to <code>cause.toString()</code> if
<code>cause!=null</code>.
<p>
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8224130 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientConnectionException</code> object
with a given
<code>reason</code> and  <code>cause</code>.
The <code>SQLState</code> is  initialized to <code>null</code>
and the vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param cause the underlying reason for this <code>SQLException</code>(which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8224258 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SQLTransientConnectionException</code> object
with a given
<code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
The vendor code is initialized to 0.
<p>
@param reason a description of the exception.
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      operation 8224386 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>SQLTransientConnectionException</code> object
with a given
<code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
and  <code>cause</code>.
<p>
@param reason a description of the exception
@param SQLState an XOPEN or SQL:2003 code identifying the exception
@param vendorCode a database vendor-specific exception code
@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
    the cause is non-existent or unknown.
@since 1.6
"
      end

      attribute 1898114 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2520155553543391200L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1044098 "Types"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P>The class that defines the constants that are used to identify generic
SQL types, called JDBC types.
<p>
This class is never instantiated.
"
      attribute 1898754 "BIT"
	class_attribute const_attribute public explicit_type "int"
	init_value "  -7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>BIT</code>.

"
      end

      attribute 1898882 "TINYINT"
	class_attribute const_attribute public explicit_type "int"
	init_value "  -6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>TINYINT</code>.

"
      end

      attribute 1899010 "SMALLINT"
	class_attribute const_attribute public explicit_type "int"
	init_value "   5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>SMALLINT</code>.

"
      end

      attribute 1899138 "INTEGER"
	class_attribute const_attribute public explicit_type "int"
	init_value "   4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>INTEGER</code>.

"
      end

      attribute 1899266 "BIGINT"
	class_attribute const_attribute public explicit_type "int"
	init_value "  -5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>BIGINT</code>.

"
      end

      attribute 1899394 "FLOAT"
	class_attribute const_attribute public explicit_type "int"
	init_value "   6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>FLOAT</code>.

"
      end

      attribute 1899522 "REAL"
	class_attribute const_attribute public explicit_type "int"
	init_value "   7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>REAL</code>.

"
      end

      attribute 1899650 "DOUBLE"
	class_attribute const_attribute public explicit_type "int"
	init_value "   8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>DOUBLE</code>.

"
      end

      attribute 1899778 "NUMERIC"
	class_attribute const_attribute public explicit_type "int"
	init_value "   2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>NUMERIC</code>.

"
      end

      attribute 1899906 "DECIMAL"
	class_attribute const_attribute public explicit_type "int"
	init_value "   3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>DECIMAL</code>.

"
      end

      attribute 1900034 "CHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value "   1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>CHAR</code>.

"
      end

      attribute 1900162 "VARCHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value "  12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>VARCHAR</code>.

"
      end

      attribute 1900290 "LONGVARCHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value "  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>LONGVARCHAR</code>.

"
      end

      attribute 1900418 "DATE"
	class_attribute const_attribute public explicit_type "int"
	init_value "  91"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>DATE</code>.

"
      end

      attribute 1900546 "TIME"
	class_attribute const_attribute public explicit_type "int"
	init_value "  92"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>TIME</code>.

"
      end

      attribute 1900674 "TIMESTAMP"
	class_attribute const_attribute public explicit_type "int"
	init_value "  93"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>TIMESTAMP</code>.

"
      end

      attribute 1900802 "BINARY"
	class_attribute const_attribute public explicit_type "int"
	init_value "  -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>BINARY</code>.

"
      end

      attribute 1900930 "VARBINARY"
	class_attribute const_attribute public explicit_type "int"
	init_value "  -3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>VARBINARY</code>.

"
      end

      attribute 1901058 "LONGVARBINARY"
	class_attribute const_attribute public explicit_type "int"
	init_value "  -4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type
<code>LONGVARBINARY</code>.

"
      end

      attribute 1901186 "NULL"
	class_attribute const_attribute public explicit_type "int"
	init_value "   0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<P>The constant in the Java programming language
that identifies the generic SQL value
<code>NULL</code>.

"
      end

      attribute 1901314 "OTHER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1111"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language that indicates
that the SQL type is database-specific and
gets mapped to a Java object that can be accessed via
the methods <code>getObject</code> and <code>setObject</code>.

"
      end

      attribute 1901442 "JAVA_OBJECT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>JAVA_OBJECT</code>.
@since 1.2

"
      end

      attribute 1901570 "DISTINCT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>DISTINCT</code>.
@since 1.2

"
      end

      attribute 1901698 "STRUCT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2002"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>STRUCT</code>.
@since 1.2

"
      end

      attribute 1901826 "ARRAY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2003"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>ARRAY</code>.
@since 1.2

"
      end

      attribute 1901954 "BLOB"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2004"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>BLOB</code>.
@since 1.2

"
      end

      attribute 1902082 "CLOB"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2005"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>CLOB</code>.
@since 1.2

"
      end

      attribute 1902210 "REF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2006"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>REF</code>.
@since 1.2

"
      end

      attribute 1902338 "DATALINK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 70"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, somtimes referred to
as a type code, that identifies the generic SQL type <code>DATALINK</code>.

@since 1.4

"
      end

      attribute 1902466 "BOOLEAN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, somtimes referred to
as a type code, that identifies the generic SQL type <code>BOOLEAN</code>.

@since 1.4

"
      end

      attribute 1902594 "ROWID"
	class_attribute const_attribute public explicit_type "int"
	init_value " -8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "------------------------- JDBC 4.0 -----------------------------------

The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type <code>ROWID</code>

@since 1.6


"
      end

      attribute 1902722 "NCHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " -15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type <code>NCHAR</code>

@since 1.6

"
      end

      attribute 1902850 "NVARCHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " -9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type <code>NVARCHAR</code>.

@since 1.6

"
      end

      attribute 1902978 "LONGNVARCHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " -16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type <code>LONGNVARCHAR</code>.

@since 1.6

"
      end

      attribute 1903106 "NCLOB"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2011"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type <code>NCLOB</code>.

@since 1.6

"
      end

      attribute 1903234 "SQLXML"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2009"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type <code>XML</code>.

@since 1.6

"
      end

      attribute 1903362 "REF_CURSOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2012"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "--------------------------JDBC 4.2 -----------------------------

The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type {@code REF CURSOR}.

@since 1.8

"
      end

      attribute 1903490 "TIME_WITH_TIMEZONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2013"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
{@code TIME WITH TIMEZONE}.

@since 1.8

"
      end

      attribute 1903618 "TIMESTAMP_WITH_TIMEZONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2014"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
{@code TIMESTAMP WITH TIMEZONE}.

@since 1.8

"
      end

      operation 8230402 "Types"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Prevent instantiation"
      end
    end
  end

  deploymentview 169730 "sql"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 770434 "Array"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1037058 // Array
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 770562 "SQLException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
${definition}"
      associated_elems
	class_ref 1037186 // SQLException
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 770690 "BatchUpdateException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 1037442 // BatchUpdateException
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 770818 "Blob"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
${definition}"
      associated_elems
	class_ref 1037570 // Blob
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 770946 "Wrapper"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1038082 // Wrapper
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 771074 "Statement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1037954 // Statement
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 771202 "PreparedStatement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.math.BigDecimal;
import java.util.Calendar;
import java.io.Reader;
import java.io.InputStream;
${definition}"
      associated_elems
	class_ref 1037826 // PreparedStatement
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 771330 "CallableStatement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.math.BigDecimal;
import java.util.Calendar;
import java.io.Reader;
import java.io.InputStream;
${definition}"
      associated_elems
	class_ref 1037698 // CallableStatement
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 771458 "ClientInfoStatus"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 1039874 // ClientInfoStatus
      end
      comment "Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 771586 "Clob"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Reader;
${definition}"
      associated_elems
	class_ref 1038978 // Clob
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 771714 "Connection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Properties;
import java.util.concurrent.Executor;
${definition}"
      associated_elems
	class_ref 1038338 // Connection
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 771842 "DatabaseMetaData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1040002 // DatabaseMetaData
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 771970 "SQLWarning"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1038210 // SQLWarning
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 772098 "DataTruncation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1040642 // DataTruncation
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 772354 "Date"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.Instant;
import java.time.LocalDate;
${definition}"
      associated_elems
	class_ref 1038466 // Date
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 772482 "Driver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.logging.Logger;
${definition}"
      associated_elems
	class_ref 1040898 // Driver
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 772610 "DriverAction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1041282 // DriverAction
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 772738 "DriverManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import java.util.ServiceLoader;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.concurrent.CopyOnWriteArrayList;
import sun.reflect.CallerSensitive;
import sun.reflect.Reflection;
${definition}"
      associated_elems
	class_ref 1041410 // DriverManager
	class_ref 1041538 // DriverInfo
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 772866 "DriverPropertyInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1041026 // DriverPropertyInfo
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 772994 "SQLType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1039746 // SQLType
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 773122 "JDBCType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1041794 // JDBCType
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 773250 "NClob"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.Clob;
${definition}"
      associated_elems
	class_ref 1039490 // NClob
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 773378 "ParameterMetaData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1039234 // ParameterMetaData
      end
      comment "Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 773506 "PseudoColumnUsage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1041922 // PseudoColumnUsage
      end
      comment "Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 773634 "Ref"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1038850 // Ref
      end
      comment "Copyright (c) 1998, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 773762 "ResultSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.math.BigDecimal;
import java.util.Calendar;
import java.io.Reader;
import java.io.InputStream;
${definition}"
      associated_elems
	class_ref 1037314 // ResultSet
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 773890 "ResultSetMetaData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1039106 // ResultSetMetaData
      end
      comment "Copyright (c) 1996, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 774018 "RowId"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1039362 // RowId
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 774146 "RowIdLifetime"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 1040514 // RowIdLifetime
      end
      comment "Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 774274 "Savepoint"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1040130 // Savepoint
      end
      comment "Copyright (c) 2000, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 774402 "SQLClientInfoException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
${definition}"
      associated_elems
	class_ref 1040258 // SQLClientInfoException
      end
      comment "Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 774530 "SQLData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1042050 // SQLData
      end
      comment "Copyright (c) 1998, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 774658 "SQLNonTransientException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1042562 // SQLNonTransientException
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 774786 "SQLDataException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1042434 // SQLDataException
      end
      comment "Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 774914 "SQLFeatureNotSupportedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1041154 // SQLFeatureNotSupportedException
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 775042 "SQLInput"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1042178 // SQLInput
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 775170 "SQLIntegrityConstraintViolationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1042690 // SQLIntegrityConstraintViolationException
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 775298 "SQLInvalidAuthorizationSpecException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1042818 // SQLInvalidAuthorizationSpecException
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 775426 "SQLNonTransientConnectionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1042946 // SQLNonTransientConnectionException
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 775554 "SQLOutput"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1042306 // SQLOutput
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 775682 "SQLPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
${definition}"
      associated_elems
	class_ref 1041666 // SQLPermission
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 775810 "SQLRecoverableException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1043074 // SQLRecoverableException
      end
      comment "Copyright (c) 2006, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 775938 "SQLSyntaxErrorException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1043202 // SQLSyntaxErrorException
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 776066 "SQLTransientException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1043458 // SQLTransientException
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 776194 "SQLTimeoutException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1043330 // SQLTimeoutException
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 776322 "SQLTransactionRollbackException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1043586 // SQLTransactionRollbackException
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 776450 "SQLTransientConnectionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1043714 // SQLTransientConnectionException
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 776578 "SQLXML"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
${definition}"
      associated_elems
	class_ref 1039618 // SQLXML
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 776706 "Struct"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1040386 // Struct
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 776834 "Time"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.Instant;
import java.time.LocalTime;
${definition}"
      associated_elems
	class_ref 1038594 // Time
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 776962 "Timestamp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.StringTokenizer;
${definition}"
      associated_elems
	class_ref 1038722 // Timestamp
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 777090 "Types"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1044098 // Types
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
