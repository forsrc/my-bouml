class Entry
!!!584834.java!!!	Entry(inout version : ClassValue::Version, inout value : T)
            super(version);
            this.value = value;  // for a regular entry, value is of type T
!!!584962.java!!!	assertNotPromise() : void
 assert(!isPromise());
!!!585090.java!!!	Entry(inout version : ClassValue::Version)
            super(version);
            this.value = this;  // for a promise, value is not of type T, but Entry!
!!!585218.java!!!	value() : T
 assertNotPromise(); return (T) value;
!!!585346.java!!!	isPromise() : boolean
 return value == this;
!!!585474.java!!!	version() : ClassValue::Version
 return get();
!!!585602.java!!!	classValueOrNull() : ClassValue
            Version<T> v = version();
            return (v == null) ? null : v.classValue();
!!!585730.java!!!	isLive() : boolean
            Version<T> v = version();
            if (v == null)  return false;
            if (v.isLive())  return true;
            clear();
            return false;
!!!585858.java!!!	refreshVersion(inout v2 : ClassValue::Version) : ClassValue::Entry
            assertNotPromise();
            @SuppressWarnings("unchecked")  // if !isPromise, type is T
            Entry<T> e2 = new Entry<>(v2, (T) value);
            clear();
            // value = null -- caller must drop
            return e2;
