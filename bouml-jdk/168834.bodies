class IDLJavaSerializationInputStream
!!!427138.java!!!	IDLJavaSerializationInputStream(in encodingVersion : byte)
        super();
        this.encodingVersion = encodingVersion;
!!!427266.java!!!	init(inout orb : ORB, inout byteBuffer : ByteBuffer, in bufSize : int, inout littleEndian : boolean, inout bufferManager : BufferManagerRead) : void
        this.orb = (ORB) orb;
        this.bufSize = bufSize;
        this.bufferManager = bufferManager;
        buffer = byteBuffer;
        wrapper =
            ORBUtilSystemException.get((ORB)orb, CORBALogDomains.RPC_ENCODING);

        byte[] buf;
        if (buffer.hasArray()) {
            buf = buffer.array();
        } else {
            buf = new byte[bufSize];
            buffer.get(buf);
        }
        // Note: at this point, the buffer position is zero. The setIndex()
        // method call can be used to set a desired read index.
        bis = new _ByteArrayInputStream(buf);
!!!427394.java!!!	initObjectInputStream() : void
        //System.out.print(" is ");
        if (is != null) {
            throw wrapper.javaStreamInitFailed();
        }
        try {
            is = new MarshalObjectInputStream(bis, orb);
        } catch (Exception e) {
            throw wrapper.javaStreamInitFailed(e);
        }
!!!427522.java!!!	read_boolean() : boolean
        if (!markOn && !(markedItemQ.isEmpty())) { // dequeue
            return ((Boolean)markedItemQ.removeFirst()).booleanValue();
        }
        if (markOn && !(markedItemQ.isEmpty()) &&
                (peekIndex < peekCount)) { // peek
            return ((Boolean)markedItemQ.get(peekIndex++)).booleanValue();
        }
        try {
            boolean value = is.readBoolean();
            if (markOn) { // enqueue
                markedItemQ.addLast(Boolean.valueOf(value));
            }
            return value;
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "read_boolean");
        }
!!!427650.java!!!	read_char() : char
        if (!markOn && !(markedItemQ.isEmpty())) { // dequeue
            return ((Character)markedItemQ.removeFirst()).charValue();
        }
        if (markOn && !(markedItemQ.isEmpty()) &&
                (peekIndex < peekCount)) { // peek
            return ((Character)markedItemQ.get(peekIndex++)).charValue();
        }
        try {
            char value = is.readChar();
            if (markOn) { // enqueue
                markedItemQ.addLast(new Character(value));
            }
            return value;
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "read_char");
        }
!!!427778.java!!!	read_wchar() : char
        return this.read_char();
!!!427906.java!!!	read_octet() : byte

        // check if size < [ GIOPHeader(12) + requestID(4)] bytes
        if (bis.getPosition() < directReadLength) {
            byte b = (byte) bis.read();
            if (bis.getPosition() == directReadLength) {
                initObjectInputStream();
            }
            return b;
        }

        if (!markOn && !(markedItemQ.isEmpty())) { // dequeue
            return ((Byte)markedItemQ.removeFirst()).byteValue();
        }

        if (markOn && !(markedItemQ.isEmpty()) &&
                (peekIndex < peekCount)) { // peek
            return ((Byte)markedItemQ.get(peekIndex++)).byteValue();
        }

        try {
            byte value = is.readByte();
            if (markOn) { // enqueue
                //markedItemQ.addLast(Byte.valueOf(value)); // only in JDK 1.5
                markedItemQ.addLast(new Byte(value));
            }
            return value;
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "read_octet");
        }
!!!428034.java!!!	read_short() : short
        if (!markOn && !(markedItemQ.isEmpty())) { // dequeue
            return ((Short)markedItemQ.removeFirst()).shortValue();
        }
        if (markOn && !(markedItemQ.isEmpty()) &&
                (peekIndex < peekCount)) { // peek
            return ((Short)markedItemQ.get(peekIndex++)).shortValue();
        }

        try {
            short value = is.readShort();
            if (markOn) { // enqueue
                markedItemQ.addLast(new Short(value));
            }
            return value;
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "read_short");
        }
!!!428162.java!!!	read_ushort() : short
        return this.read_short();
!!!428290.java!!!	read_long() : int

        // check if size < [ GIOPHeader(12) + requestID(4)] bytes
        if (bis.getPosition() < directReadLength) {

            // Use big endian (network byte order). This is fixed.
            // Both the writer and reader use the same byte order.
            int b1 = (bis.read() << 24) & 0xFF000000;
            int b2 = (bis.read() << 16) & 0x00FF0000;
            int b3 = (bis.read() << 8)  & 0x0000FF00;
            int b4 = (bis.read() << 0)  & 0x000000FF;

            if (bis.getPosition() == directReadLength) {
                initObjectInputStream();
            } else if (bis.getPosition() > directReadLength) {
                // Cannot happen. All direct reads are contained
                // within the first 16 bytes.
                wrapper.javaSerializationException("read_long");
            }

            return (b1 | b2 | b3 | b4);
        }

        if (!markOn && !(markedItemQ.isEmpty())) { // dequeue
            return ((Integer)markedItemQ.removeFirst()).intValue();
        }

        if (markOn && !(markedItemQ.isEmpty()) &&
                (peekIndex < peekCount)) { // peek
            return ((Integer)markedItemQ.get(peekIndex++)).intValue();
        }

        try {
            int value = is.readInt();
            if (markOn) { // enqueue
                markedItemQ.addLast(new Integer(value));
            }
            return value;
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "read_long");
        }
!!!428418.java!!!	read_ulong() : int
        return this.read_long();
!!!428546.java!!!	read_longlong() : long
        if (!markOn && !(markedItemQ.isEmpty())) { // dequeue
            return ((Long)markedItemQ.removeFirst()).longValue();
        }
        if (markOn && !(markedItemQ.isEmpty()) &&
                (peekIndex < peekCount)) { // peek
            return ((Long)markedItemQ.get(peekIndex++)).longValue();
        }

        try {
            long value = is.readLong();
            if (markOn) { // enqueue
                markedItemQ.addLast(new Long(value));
            }
            return value;
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "read_longlong");
        }
!!!428674.java!!!	read_ulonglong() : long
        return read_longlong();
!!!428802.java!!!	read_float() : float
        if (!markOn && !(markedItemQ.isEmpty())) { // dequeue
            return ((Float)markedItemQ.removeFirst()).floatValue();
        }
        if (markOn && !(markedItemQ.isEmpty()) &&
                (peekIndex < peekCount)) { // peek
            return ((Float)markedItemQ.get(peekIndex++)).floatValue();
        }

        try {
            float value = is.readFloat();
            if (markOn) { // enqueue
                markedItemQ.addLast(new Float(value));
            }
            return value;
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "read_float");
        }
!!!428930.java!!!	read_double() : double
        if (!markOn && !(markedItemQ.isEmpty())) { // dequeue
            return ((Double)markedItemQ.removeFirst()).doubleValue();
        }
        if (markOn && !(markedItemQ.isEmpty()) &&
                (peekIndex < peekCount)) { // peek
            return ((Double)markedItemQ.get(peekIndex++)).doubleValue();
        }

        try {
            double value = is.readDouble();
            if (markOn) { // enqueue
                markedItemQ.addLast(new Double(value));
            }
            return value;
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "read_double");
        }
!!!429058.java!!!	read_string() : String
        if (!markOn && !(markedItemQ.isEmpty())) { // dequeue
            return (String) markedItemQ.removeFirst();
        }
        if (markOn && !(markedItemQ.isEmpty()) &&
            (peekIndex < peekCount)) { // peek
            return (String) markedItemQ.get(peekIndex++);
        }
        try {
            String value = is.readUTF();
            if (markOn) { // enqueue
                markedItemQ.addLast(value);
            }
            return value;
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "read_string");
        }
!!!429186.java!!!	read_wstring() : String
        if (!markOn && !(markedItemQ.isEmpty())) { // dequeue
            return (String) markedItemQ.removeFirst();
        }
        if (markOn && !(markedItemQ.isEmpty()) &&
                (peekIndex < peekCount)) { // peek
            return (String) markedItemQ.get(peekIndex++);
        }
        try {
            String value = (String) is.readObject();
            if (markOn) { // enqueue
                markedItemQ.addLast(value);
            }
            return value;
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "read_wstring");
        }
!!!429314.java!!!	read_boolean_array(inout value : boolean [[]], in offset : int, in length : int) : void
        for(int i = 0; i < length; i++) {
            value[i+offset] = read_boolean();
        }
!!!429442.java!!!	read_char_array(inout value : char [[]], in offset : int, in length : int) : void
        for(int i=0; i < length; i++) {
            value[i+offset] = read_char();
        }
!!!429570.java!!!	read_wchar_array(inout value : char [[]], in offset : int, in length : int) : void
        read_char_array(value, offset, length);
!!!429698.java!!!	read_octet_array(inout value : byte [[]], in offset : int, in length : int) : void
        for(int i=0; i < length; i++) {
            value[i+offset] = read_octet();
        }
        /* // Cannot use this efficient read due to mark/reset support.
        try {
            while (length > 0) {
                int n = is.read(value, offset, length);
                offset += n;
                length -= n;
            }
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "read_octet_array");
        }
        */
!!!429826.java!!!	read_short_array(inout value : short [[]], in offset : int, in length : int) : void
        for(int i=0; i < length; i++) {
            value[i+offset] = read_short();
        }
!!!429954.java!!!	read_ushort_array(inout value : short [[]], in offset : int, in length : int) : void
        read_short_array(value, offset, length);
!!!430082.java!!!	read_long_array(inout value : int [[]], in offset : int, in length : int) : void
        for(int i=0; i < length; i++) {
            value[i+offset] = read_long();
        }
!!!430210.java!!!	read_ulong_array(inout value : int [[]], in offset : int, in length : int) : void
        read_long_array(value, offset, length);
!!!430338.java!!!	read_longlong_array(inout value : long [[]], in offset : int, in length : int) : void
        for(int i=0; i < length; i++) {
            value[i+offset] = read_longlong();
        }
!!!430466.java!!!	read_ulonglong_array(inout value : long [[]], in offset : int, in length : int) : void
        read_longlong_array(value, offset, length);
!!!430594.java!!!	read_float_array(inout value : float [[]], in offset : int, in length : int) : void
        for(int i=0; i < length; i++) {
            value[i+offset] = read_float();
        }
!!!430722.java!!!	read_double_array(inout value : double [[]], in offset : int, in length : int) : void
        for(int i=0; i < length; i++) {
            value[i+offset] = read_double();
        }
!!!430850.java!!!	read_Object() : Object
        return read_Object(null);
!!!430978.java!!!	read_TypeCode() : TypeCode
        TypeCodeImpl tc = new TypeCodeImpl(orb);
        tc.read_value(parent);
        return tc;
!!!431106.java!!!	read_any() : Any

        Any any = orb.create_any();
        TypeCodeImpl tc = new TypeCodeImpl(orb);

        // read off the typecode

        // REVISIT We could avoid this try-catch if we could peek the typecode
        // kind off this stream and see if it is a tk_value.
        // Looking at the code we know that for tk_value the Any.read_value()
        // below ignores the tc argument anyway (except for the kind field).
        // But still we would need to make sure that the whole typecode,
        // including encapsulations, is read off.
        try {
            tc.read_value(parent);
        } catch (org.omg.CORBA.MARSHAL ex) {
            if (tc.kind().value() != org.omg.CORBA.TCKind._tk_value) {
                throw ex;
            }
            // We can be sure that the whole typecode encapsulation has been
            // read off.
            ex.printStackTrace();
        }

        // read off the value of the any.
        any.read_value(parent, tc);

        return any;
!!!431234.java!!!	read_Principal() : Principal
        // We don't need an implementation for this method, since principal
        // is absent in GIOP version 1.2 or above.
        int len = read_long();
        byte[] pvalue = new byte[len];
        read_octet_array(pvalue,0,len);
        Principal p = new com.sun.corba.se.impl.corba.PrincipalImpl();
        p.name(pvalue);
        return p;
!!!431362.java!!!	read_fixed() : BigDecimal
        return new BigDecimal(read_fixed_buffer().toString());
!!!431490.java!!!	read_fixed_buffer() : StringBuffer
        StringBuffer buffer = new StringBuffer(64);
        byte doubleDigit;
        int firstDigit;
        int secondDigit;
        boolean wroteFirstDigit = false;
        boolean more = true;
        while (more) {
            doubleDigit = read_octet();
            firstDigit = (int)((doubleDigit & 0xf0) >> 4);
            secondDigit = (int)(doubleDigit & 0x0f);
            if (wroteFirstDigit || firstDigit != 0) {
                buffer.append(Character.forDigit(firstDigit, 10));
                wroteFirstDigit = true;
            }
            if (secondDigit == 12) {
                // positive number or zero
                if ( ! wroteFirstDigit) {
                    // zero
                    return new StringBuffer("0.0");
                } else {
                    // positive number
                    // done
                }
                more = false;
            } else if (secondDigit == 13) {
                // negative number
                buffer.insert(0, '-');
                more = false;
            } else {
                buffer.append(Character.forDigit(secondDigit, 10));
                wroteFirstDigit = true;
            }
        }
        return buffer;
!!!431618.java!!!	read_Object(inout clz : Class) : Object

        // In any case, we must first read the IOR.
        IOR ior = IORFactories.makeIOR(parent) ;
        if (ior.isNil()) {
            return null;
        }

        PresentationManager.StubFactoryFactory sff =
            ORB.getStubFactoryFactory();
        String codeBase = ior.getProfile().getCodebase();
        PresentationManager.StubFactory stubFactory = null;

        if (clz == null) {
            RepositoryId rid = RepositoryId.cache.getId(ior.getTypeId() );
            String className = rid.getClassName();
            boolean isIDLInterface = rid.isIDLType();

            if (className == null || className.equals( "" )) {
                stubFactory = null;
            } else {
                try {
                    stubFactory = sff.createStubFactory(className,
                        isIDLInterface, codeBase, (Class) null,
                        (ClassLoader) null);
                } catch (Exception exc) {
                    // Could not create stubFactory, so use null.
                    // XXX stubFactory handling is still too complex:
                    // Can we resolve the stubFactory question once in
                    // a single place?
                    stubFactory = null ;
                }
            }
        } else if (StubAdapter.isStubClass(clz)) {
            stubFactory = PresentationDefaults.makeStaticStubFactory(clz);
        } else {
            // clz is an interface class
            boolean isIDL = IDLEntity.class.isAssignableFrom(clz);

            stubFactory = sff.createStubFactory(
                 clz.getName(), isIDL, codeBase, clz, clz.getClassLoader());
        }

        return CDRInputStream_1_0.internalIORToObject(ior, stubFactory, orb);
!!!431746.java!!!	orb() : ORB
        return this.orb;
!!!431874.java!!!	read_value() : Serializable
        if (!markOn && !(markedItemQ.isEmpty())) { // dequeue
            return (Serializable) markedItemQ.removeFirst();
        }
        if (markOn && !(markedItemQ.isEmpty()) &&
                (peekIndex < peekCount)) { // peek
            return (Serializable) markedItemQ.get(peekIndex++);
        }
        try {
            Serializable value = (java.io.Serializable) is.readObject();
            if (markOn) { // enqueue
                markedItemQ.addLast(value);
            }
            return value;
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "read_value");
        }
!!!432002.java!!!	read_value(inout clz : Class) : Serializable
        return read_value();
!!!432130.java!!!	read_value(inout factory : BoxedValueHelper) : Serializable
        return read_value();
!!!432258.java!!!	read_value(inout rep_id : String) : Serializable
        return read_value();
!!!432386.java!!!	read_value(inout value : Serializable) : Serializable
        return read_value();
!!!432514.java!!!	read_abstract_interface() : Object
        return read_abstract_interface(null);
!!!432642.java!!!	read_abstract_interface(inout clz : Class) : Object
        boolean isObject = read_boolean();
        if (isObject) {
            return read_Object(clz);
        } else {
            return read_value();
        }
!!!432770.java!!!	consumeEndian() : void
        throw wrapper.giopVersionError();
!!!432898.java!!!	getPosition() : int
        try {
            return bis.getPosition();
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "getPosition");
        }
!!!433026.java!!!	read_Abstract() : Object
        return read_abstract_interface();
!!!433154.java!!!	read_Value() : Serializable
        return read_value();
!!!433282.java!!!	read_any_array(inout seq : AnySeqHolder, in offset : int, in length : int) : void
        read_any_array(seq.value, offset, length);
!!!433410.java!!!	read_any_array(inout value : Any [[]], in offset : int, in length : int) : void
        for(int i=0; i < length; i++) {
            value[i+offset] = read_any();
        }
!!!433538.java!!!	read_boolean_array(inout seq : BooleanSeqHolder, in offset : int, in length : int) : void
        read_boolean_array(seq.value, offset, length);
!!!433666.java!!!	read_char_array(inout seq : CharSeqHolder, in offset : int, in length : int) : void
        read_char_array(seq.value, offset, length);
!!!433794.java!!!	read_wchar_array(inout seq : WCharSeqHolder, in offset : int, in length : int) : void
        read_wchar_array(seq.value, offset, length);
!!!433922.java!!!	read_octet_array(inout seq : OctetSeqHolder, in offset : int, in length : int) : void
        read_octet_array(seq.value, offset, length);
!!!434050.java!!!	read_short_array(inout seq : ShortSeqHolder, in offset : int, in length : int) : void
        read_short_array(seq.value, offset, length);
!!!434178.java!!!	read_ushort_array(inout seq : UShortSeqHolder, in offset : int, in length : int) : void
        read_ushort_array(seq.value, offset, length);
!!!434306.java!!!	read_long_array(inout seq : LongSeqHolder, in offset : int, in length : int) : void
        read_long_array(seq.value, offset, length);
!!!434434.java!!!	read_ulong_array(inout seq : ULongSeqHolder, in offset : int, in length : int) : void
        read_ulong_array(seq.value, offset, length);
!!!434562.java!!!	read_ulonglong_array(inout seq : ULongLongSeqHolder, in offset : int, in length : int) : void
        read_ulonglong_array(seq.value, offset, length);
!!!434690.java!!!	read_longlong_array(inout seq : LongLongSeqHolder, in offset : int, in length : int) : void
        read_longlong_array(seq.value, offset, length);
!!!434818.java!!!	read_float_array(inout seq : FloatSeqHolder, in offset : int, in length : int) : void
        read_float_array(seq.value, offset, length);
!!!434946.java!!!	read_double_array(inout seq : DoubleSeqHolder, in offset : int, in length : int) : void
        read_double_array(seq.value, offset, length);
!!!435074.java!!!	_truncatable_ids() : String
        throw wrapper.giopVersionError();
!!!435202.java!!!	mark(in readLimit : int) : void
        // Nested mark disallowed.
        // Further, mark is not supported until first 16 bytes are read.
        if (markOn || is == null) {
            throw wrapper.javaSerializationException("mark");
        }
        markOn = true;
        if (!(markedItemQ.isEmpty())) {
            peekIndex = 0;
            peekCount = markedItemQ.size();
        }
        /*
        // Note: only ByteArrayInputStream supports mark/reset.
        if (is == null || is.markSupported() == false) {
            throw wrapper.javaSerializationException("mark");
        }
        is.mark(readLimit);
        */
!!!435330.java!!!	reset() : void
        markOn = false;
        peekIndex = 0;
        peekCount = 0;
        /*
        // Note: only ByteArrayInputStream supports mark/reset.
        if (is == null || is.markSupported() == false) {
            throw wrapper.javaSerializationException("mark");
        }
        try {
            is.reset();
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "reset");
        }
        */
!!!435458.java!!!	markSupported() : boolean
        return true;
!!!435586.java!!!	dup() : CDRInputStreamBase

        CDRInputStreamBase result = null ;

        try {
            result = (CDRInputStreamBase) this.getClass().newInstance();
        } catch (Exception e) {
            throw wrapper.couldNotDuplicateCdrInputStream(e);
        }

        result.init(this.orb, this.buffer, this.bufSize, false, null);

        // Set the buffer position.
        ((IDLJavaSerializationInputStream)result).skipBytes(getPosition());

        // Set mark related data.
        ((IDLJavaSerializationInputStream)result).
            setMarkData(markOn, peekIndex, peekCount,
                        (LinkedList) markedItemQ.clone());

        return result;
!!!435714.java!!!	skipBytes(in len : int) : void
        try {
            is.skipBytes(len);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "skipBytes");
        }
!!!435842.java!!!	setMarkData(inout markOn : boolean, in peekIndex : int, in peekCount : int, inout markedItemQ : LinkedList) : void
        this.markOn = markOn;
        this.peekIndex = peekIndex;
        this.peekCount = peekCount;
        this.markedItemQ = markedItemQ;
!!!435970.java!!!	read_fixed(in digits : short, in scale : short) : BigDecimal
        // digits isn't really needed here
        StringBuffer buffer = read_fixed_buffer();
        if (digits != buffer.length())
            throw wrapper.badFixed( new Integer(digits),
                new Integer(buffer.length()) ) ;
        buffer.insert(digits - scale, '.');
        return new BigDecimal(buffer.toString());
!!!436098.java!!!	isLittleEndian() : boolean
        throw wrapper.giopVersionError();
!!!436226.java!!!	setHeaderPadding(inout headerPadding : boolean) : void
        // no-op. We don't care about body alignment while using
        // Java serialization. What the GIOP spec states does not apply here.
!!!436354.java!!!	getByteBuffer() : ByteBuffer
        throw wrapper.giopVersionError();
!!!436482.java!!!	setByteBuffer(inout byteBuffer : ByteBuffer) : void
        throw wrapper.giopVersionError();
!!!436610.java!!!	setByteBufferWithInfo(inout bbwi : ByteBufferWithInfo) : void
        throw wrapper.giopVersionError();
!!!436738.java!!!	getBufferLength() : int
        return bufSize;
!!!436866.java!!!	setBufferLength(in value : int) : void
        // this is redundant, since buffer size was already specified
        // as part of the init call. So, ignore.
!!!436994.java!!!	getIndex() : int
        return bis.getPosition();
!!!437122.java!!!	setIndex(in value : int) : void
        try {
            bis.setPosition(value);
        } catch (IndexOutOfBoundsException e) {
            throw wrapper.javaSerializationException(e, "setIndex");
        }
!!!437250.java!!!	orb(inout orb : ORB) : void
        this.orb = (ORB) orb;
!!!437378.java!!!	getBufferManager() : BufferManagerRead
        return bufferManager;
!!!437506.java!!!	getGIOPVersion() : GIOPVersion
        return GIOPVersion.V1_2;
!!!437634.java!!!	getCodeBase() : com.sun.org.omg.SendingContext.CodeBase
        return parent.getCodeBase();
!!!437762.java!!!	printBuffer() : void
        byte[] buf = this.buffer.array();

        System.out.println("+++++++ Input Buffer ++++++++");
        System.out.println();
        System.out.println("Current position: " + getPosition());
        System.out.println("Total length : " + this.bufSize);
        System.out.println();

        char[] charBuf = new char[16];

        try {

            for (int i = 0; i < buf.length; i += 16) {

                int j = 0;

                // For every 16 bytes, there is one line
                // of output.  First, the hex output of
                // the 16 bytes with each byte separated
                // by a space.
                while (j < 16 && j + i < buf.length) {
                    int k = buf[i + j];
                    if (k < 0)
                        k = 256 + k;
                    String hex = Integer.toHexString(k);
                    if (hex.length() == 1)
                        hex = "0" + hex;
                    System.out.print(hex + " ");
                    j++;
                }

                // Add any extra spaces to align the
                // text column in case we didn't end
                // at 16
                while (j < 16) {
                    System.out.print("   ");
                    j++;
                }

                // Now output the ASCII equivalents.  Non-ASCII
                // characters are shown as periods.
                int x = 0;

                while (x < 16 && x + i < buf.length) {
                    if (ORBUtility.isPrintable((char)buf[i + x])) {
                        charBuf[x] = (char) buf[i + x];
                    } else {
                        charBuf[x] = '.';
                    }
                    x++;
                }
                System.out.println(new String(charBuf, 0, x));
            }
        } catch (Throwable t) {
            t.printStackTrace();
        }
        System.out.println("++++++++++++++++++++++++++++++");
!!!437890.java!!!	alignOnBoundary(in octetBoundary : int) : void
        throw wrapper.giopVersionError();
!!!438018.java!!!	performORBVersionSpecificInit() : void
        // No-op.
!!!438146.java!!!	resetCodeSetConverters() : void
        // No-op.
!!!438274.java!!!	start_value() : void
        throw wrapper.giopVersionError();
!!!438402.java!!!	end_value() : void
        throw wrapper.giopVersionError();
