class DateFormatSymbols
!!!8265858.java!!!	DateFormatSymbols()
        initializeData(Locale.getDefault(Locale.Category.FORMAT));
!!!8265986.java!!!	DateFormatSymbols(inout locale : Locale)
        initializeData(locale);
!!!8266242.java!!!	getAvailableLocales() : Locale
        LocaleServiceProviderPool pool=
            LocaleServiceProviderPool.getPool(DateFormatSymbolsProvider.class);
        return pool.getAvailableLocales();
!!!8266370.java!!!	getInstance() : DateFormatSymbols
        return getInstance(Locale.getDefault(Locale.Category.FORMAT));
!!!8266498.java!!!	getInstance(inout locale : Locale) : DateFormatSymbols
        DateFormatSymbols dfs = getProviderInstance(locale);
        if (dfs != null) {
            return dfs;
        }
        throw new RuntimeException("DateFormatSymbols instance creation failed.");
!!!8266626.java!!!	getInstanceRef(inout locale : Locale) : DateFormatSymbols
        DateFormatSymbols dfs = getProviderInstance(locale);
        if (dfs != null) {
            return dfs;
        }
        throw new RuntimeException("DateFormatSymbols instance creation failed.");
!!!8266754.java!!!	getProviderInstance(inout locale : Locale) : DateFormatSymbols
        LocaleProviderAdapter adapter = LocaleProviderAdapter.getAdapter(DateFormatSymbolsProvider.class, locale);
        DateFormatSymbolsProvider provider = adapter.getDateFormatSymbolsProvider();
        DateFormatSymbols dfsyms = provider.getInstance(locale);
        if (dfsyms == null) {
            provider = LocaleProviderAdapter.forJRE().getDateFormatSymbolsProvider();
            dfsyms = provider.getInstance(locale);
        }
        return dfsyms;
!!!8266882.java!!!	getEras() : String
        return Arrays.copyOf(eras, eras.length);
!!!8267010.java!!!	setEras(inout newEras : String [[]]) : void
        eras = Arrays.copyOf(newEras, newEras.length);
        cachedHashCode = 0;
!!!8267138.java!!!	getMonths() : String
        return Arrays.copyOf(months, months.length);
!!!8267266.java!!!	setMonths(inout newMonths : String [[]]) : void
        months = Arrays.copyOf(newMonths, newMonths.length);
        cachedHashCode = 0;
!!!8267394.java!!!	getShortMonths() : String
        return Arrays.copyOf(shortMonths, shortMonths.length);
!!!8267522.java!!!	setShortMonths(inout newShortMonths : String [[]]) : void
        shortMonths = Arrays.copyOf(newShortMonths, newShortMonths.length);
        cachedHashCode = 0;
!!!8267650.java!!!	getWeekdays() : String
        return Arrays.copyOf(weekdays, weekdays.length);
!!!8267778.java!!!	setWeekdays(inout newWeekdays : String [[]]) : void
        weekdays = Arrays.copyOf(newWeekdays, newWeekdays.length);
        cachedHashCode = 0;
!!!8267906.java!!!	getShortWeekdays() : String
        return Arrays.copyOf(shortWeekdays, shortWeekdays.length);
!!!8268034.java!!!	setShortWeekdays(inout newShortWeekdays : String [[]]) : void
        shortWeekdays = Arrays.copyOf(newShortWeekdays, newShortWeekdays.length);
        cachedHashCode = 0;
!!!8268162.java!!!	getAmPmStrings() : String
        return Arrays.copyOf(ampms, ampms.length);
!!!8268290.java!!!	setAmPmStrings(inout newAmpms : String [[]]) : void
        ampms = Arrays.copyOf(newAmpms, newAmpms.length);
        cachedHashCode = 0;
!!!8268418.java!!!	getZoneStrings() : String
        return getZoneStringsImpl(true);
!!!8268546.java!!!	setZoneStrings(inout newZoneStrings : String [[][]]) : void
        String[][] aCopy = new String[newZoneStrings.length][];
        for (int i = 0; i < newZoneStrings.length; ++i) {
            int len = newZoneStrings[i].length;
            if (len < 5) {
                throw new IllegalArgumentException();
            }
            aCopy[i] = Arrays.copyOf(newZoneStrings[i], len);
        }
        zoneStrings = aCopy;
        isZoneStringsSet = true;
        cachedHashCode = 0;
!!!8268674.java!!!	getLocalPatternChars() : String
        return localPatternChars;
!!!8268802.java!!!	setLocalPatternChars(inout newLocalPatternChars : String) : void
        // Call toString() to throw an NPE in case the argument is null
        localPatternChars = newLocalPatternChars.toString();
        cachedHashCode = 0;
!!!8268930.java!!!	clone() : Object
        try
        {
            DateFormatSymbols other = (DateFormatSymbols)super.clone();
            copyMembers(this, other);
            return other;
        } catch (CloneNotSupportedException e) {
            throw new InternalError(e);
        }
!!!8269058.java!!!	hashCode() : int
        int hashCode = cachedHashCode;
        if (hashCode == 0) {
            hashCode = 5;
            hashCode = 11 * hashCode + Arrays.hashCode(eras);
            hashCode = 11 * hashCode + Arrays.hashCode(months);
            hashCode = 11 * hashCode + Arrays.hashCode(shortMonths);
            hashCode = 11 * hashCode + Arrays.hashCode(weekdays);
            hashCode = 11 * hashCode + Arrays.hashCode(shortWeekdays);
            hashCode = 11 * hashCode + Arrays.hashCode(ampms);
            hashCode = 11 * hashCode + Arrays.deepHashCode(getZoneStringsWrapper());
            hashCode = 11 * hashCode + Objects.hashCode(localPatternChars);
            cachedHashCode = hashCode;
        }

        return hashCode;
!!!8269186.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        DateFormatSymbols that = (DateFormatSymbols) obj;
        return (Arrays.equals(eras, that.eras)
                && Arrays.equals(months, that.months)
                && Arrays.equals(shortMonths, that.shortMonths)
                && Arrays.equals(weekdays, that.weekdays)
                && Arrays.equals(shortWeekdays, that.shortWeekdays)
                && Arrays.equals(ampms, that.ampms)
                && Arrays.deepEquals(getZoneStringsWrapper(), that.getZoneStringsWrapper())
                && ((localPatternChars != null
                  && localPatternChars.equals(that.localPatternChars))
                 || (localPatternChars == null
                  && that.localPatternChars == null)));
!!!8269314.java!!!	initializeData(inout locale : Locale) : void
        SoftReference<DateFormatSymbols> ref = cachedInstances.get(locale);
        DateFormatSymbols dfs;
        if (ref == null || (dfs = ref.get()) == null) {
            if (ref != null) {
                // Remove the empty SoftReference
                cachedInstances.remove(locale, ref);
            }
            dfs = new DateFormatSymbols(false);

            // Initialize the fields from the ResourceBundle for locale.
            LocaleProviderAdapter adapter
                = LocaleProviderAdapter.getAdapter(DateFormatSymbolsProvider.class, locale);
            // Avoid any potential recursions
            if (!(adapter instanceof ResourceBundleBasedAdapter)) {
                adapter = LocaleProviderAdapter.getResourceBundleBased();
            }
            ResourceBundle resource
                = ((ResourceBundleBasedAdapter)adapter).getLocaleData().getDateFormatData(locale);

            dfs.locale = locale;
            // JRE and CLDR use different keys
            // JRE: Eras, short.Eras and narrow.Eras
            // CLDR: long.Eras, Eras and narrow.Eras
            if (resource.containsKey("Eras")) {
                dfs.eras = resource.getStringArray("Eras");
            } else if (resource.containsKey("long.Eras")) {
                dfs.eras = resource.getStringArray("long.Eras");
            } else if (resource.containsKey("short.Eras")) {
                dfs.eras = resource.getStringArray("short.Eras");
            }
            dfs.months = resource.getStringArray("MonthNames");
            dfs.shortMonths = resource.getStringArray("MonthAbbreviations");
            dfs.ampms = resource.getStringArray("AmPmMarkers");
            dfs.localPatternChars = resource.getString("DateTimePatternChars");

            // Day of week names are stored in a 1-based array.
            dfs.weekdays = toOneBasedArray(resource.getStringArray("DayNames"));
            dfs.shortWeekdays = toOneBasedArray(resource.getStringArray("DayAbbreviations"));

            // Put dfs in the cache
            ref = new SoftReference<>(dfs);
            SoftReference<DateFormatSymbols> x = cachedInstances.putIfAbsent(locale, ref);
            if (x != null) {
                DateFormatSymbols y = x.get();
                if (y == null) {
                    // Replace the empty SoftReference with ref.
                    cachedInstances.replace(locale, x, ref);
                } else {
                    ref = x;
                    dfs = y;
                }
            }
            // If the bundle's locale isn't the target locale, put another cache
            // entry for the bundle's locale.
            Locale bundleLocale = resource.getLocale();
            if (!bundleLocale.equals(locale)) {
                SoftReference<DateFormatSymbols> z
                    = cachedInstances.putIfAbsent(bundleLocale, ref);
                if (z != null && z.get() == null) {
                    cachedInstances.replace(bundleLocale, z, ref);
                }
            }
        }

        // Copy the field values from dfs to this instance.
        copyMembers(dfs, this);
!!!8269442.java!!!	toOneBasedArray(inout src : String [[]]) : String
        int len = src.length;
        String[] dst = new String[len + 1];
        dst[0] = "";
        for (int i = 0; i < len; i++) {
            dst[i + 1] = src[i];
        }
        return dst;
!!!8269570.java!!!	getZoneIndex(inout ID : String) : int
        String[][] zoneStrings = getZoneStringsWrapper();

        /*
         * getZoneIndex has been re-written for performance reasons. instead of
         * traversing the zoneStrings array every time, we cache the last used zone
         * index
         */
        if (lastZoneIndex < zoneStrings.length && ID.equals(zoneStrings[lastZoneIndex][0])) {
            return lastZoneIndex;
        }

        /* slow path, search entire list */
        for (int index = 0; index < zoneStrings.length; index++) {
            if (ID.equals(zoneStrings[index][0])) {
                lastZoneIndex = index;
                return index;
            }
        }

        return -1;
!!!8269698.java!!!	getZoneStringsWrapper() : String
        if (isSubclassObject()) {
            return getZoneStrings();
        } else {
            return getZoneStringsImpl(false);
        }
!!!8269826.java!!!	getZoneStringsImpl(inout needsCopy : boolean) : String
        if (zoneStrings == null) {
            zoneStrings = TimeZoneNameUtility.getZoneStrings(locale);
        }

        if (!needsCopy) {
            return zoneStrings;
        }

        int len = zoneStrings.length;
        String[][] aCopy = new String[len][];
        for (int i = 0; i < len; i++) {
            aCopy[i] = Arrays.copyOf(zoneStrings[i], zoneStrings[i].length);
        }
        return aCopy;
!!!8269954.java!!!	isSubclassObject() : boolean
        return !getClass().getName().equals("java.text.DateFormatSymbols");
!!!8270082.java!!!	copyMembers(inout src : DateFormatSymbols, inout dst : DateFormatSymbols) : void
        dst.locale = src.locale;
        dst.eras = Arrays.copyOf(src.eras, src.eras.length);
        dst.months = Arrays.copyOf(src.months, src.months.length);
        dst.shortMonths = Arrays.copyOf(src.shortMonths, src.shortMonths.length);
        dst.weekdays = Arrays.copyOf(src.weekdays, src.weekdays.length);
        dst.shortWeekdays = Arrays.copyOf(src.shortWeekdays, src.shortWeekdays.length);
        dst.ampms = Arrays.copyOf(src.ampms, src.ampms.length);
        if (src.zoneStrings != null) {
            dst.zoneStrings = src.getZoneStringsImpl(true);
        } else {
            dst.zoneStrings = null;
        }
        dst.localPatternChars = src.localPatternChars;
        dst.cachedHashCode = 0;
!!!8270210.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        if (zoneStrings == null) {
            zoneStrings = TimeZoneNameUtility.getZoneStrings(locale);
        }
        stream.defaultWriteObject();
