class DefaultTreeModel
!!!11877890.java!!!	DefaultTreeModel(inout root : TreeNode)
        this(root, false);
!!!11878018.java!!!	DefaultTreeModel(inout root : TreeNode, inout asksAllowsChildren : boolean)
        super();
        this.root = root;
        this.asksAllowsChildren = asksAllowsChildren;
!!!11878146.java!!!	setAsksAllowsChildren(inout newValue : boolean) : void
        asksAllowsChildren = newValue;
!!!11878274.java!!!	asksAllowsChildren() : boolean
        return asksAllowsChildren;
!!!11878402.java!!!	setRoot(inout root : TreeNode) : void
        Object oldRoot = this.root;
        this.root = root;
        if (root == null && oldRoot != null) {
            fireTreeStructureChanged(this, null);
        }
        else {
            nodeStructureChanged(root);
        }
!!!11878530.java!!!	getRoot() : Object
        return root;
!!!11878658.java!!!	getIndexOfChild(inout parent : Object, inout child : Object) : int
        if(parent == null || child == null)
            return -1;
        return ((TreeNode)parent).getIndex((TreeNode)child);
!!!11878786.java!!!	getChild(inout parent : Object, in index : int) : Object
        return ((TreeNode)parent).getChildAt(index);
!!!11878914.java!!!	getChildCount(inout parent : Object) : int
        return ((TreeNode)parent).getChildCount();
!!!11879042.java!!!	isLeaf(inout node : Object) : boolean
        if(asksAllowsChildren)
            return !((TreeNode)node).getAllowsChildren();
        return ((TreeNode)node).isLeaf();
!!!11879170.java!!!	reload() : void
        reload(root);
!!!11879298.java!!!	valueForPathChanged(inout path : TreePath, inout newValue : Object) : void
        MutableTreeNode   aNode = (MutableTreeNode)path.getLastPathComponent();

        aNode.setUserObject(newValue);
        nodeChanged(aNode);
!!!11879426.java!!!	insertNodeInto(inout newChild : MutableTreeNode, inout parent : MutableTreeNode, in index : int) : void
        parent.insert(newChild, index);

        int[]           newIndexs = new int[1];

        newIndexs[0] = index;
        nodesWereInserted(parent, newIndexs);
!!!11879554.java!!!	removeNodeFromParent(inout node : MutableTreeNode) : void
        MutableTreeNode         parent = (MutableTreeNode)node.getParent();

        if(parent == null)
            throw new IllegalArgumentException("node does not have a parent.");

        int[]            childIndex = new int[1];
        Object[]         removedArray = new Object[1];

        childIndex[0] = parent.getIndex(node);
        parent.remove(childIndex[0]);
        removedArray[0] = node;
        nodesWereRemoved(parent, childIndex, removedArray);
!!!11879682.java!!!	nodeChanged(inout node : TreeNode) : void
        if(listenerList != null && node != null) {
            TreeNode         parent = node.getParent();

            if(parent != null) {
                int        anIndex = parent.getIndex(node);
                if(anIndex != -1) {
                    int[]        cIndexs = new int[1];

                    cIndexs[0] = anIndex;
                    nodesChanged(parent, cIndexs);
                }
            }
            else if (node == getRoot()) {
                nodesChanged(node, null);
            }
        }
!!!11879810.java!!!	reload(inout node : TreeNode) : void
        if(node != null) {
            fireTreeStructureChanged(this, getPathToRoot(node), null, null);
        }
!!!11879938.java!!!	nodesWereInserted(inout node : TreeNode, inout childIndices : int [[]]) : void
        if(listenerList != null && node != null && childIndices != null
           && childIndices.length > 0) {
            int               cCount = childIndices.length;
            Object[]          newChildren = new Object[cCount];

            for(int counter = 0; counter < cCount; counter++)
                newChildren[counter] = node.getChildAt(childIndices[counter]);
            fireTreeNodesInserted(this, getPathToRoot(node), childIndices,
                                  newChildren);
        }
!!!11880066.java!!!	nodesWereRemoved(inout node : TreeNode, inout childIndices : int [[]], inout removedChildren : Object [[]]) : void
        if(node != null && childIndices != null) {
            fireTreeNodesRemoved(this, getPathToRoot(node), childIndices,
                                 removedChildren);
        }
!!!11880194.java!!!	nodesChanged(inout node : TreeNode, inout childIndices : int [[]]) : void
        if(node != null) {
            if (childIndices != null) {
                int            cCount = childIndices.length;

                if(cCount > 0) {
                    Object[]       cChildren = new Object[cCount];

                    for(int counter = 0; counter < cCount; counter++)
                        cChildren[counter] = node.getChildAt
                            (childIndices[counter]);
                    fireTreeNodesChanged(this, getPathToRoot(node),
                                         childIndices, cChildren);
                }
            }
            else if (node == getRoot()) {
                fireTreeNodesChanged(this, getPathToRoot(node), null, null);
            }
        }
!!!11880322.java!!!	nodeStructureChanged(inout node : TreeNode) : void
        if(node != null) {
           fireTreeStructureChanged(this, getPathToRoot(node), null, null);
        }
!!!11880450.java!!!	getPathToRoot(inout aNode : TreeNode) : TreeNode
        return getPathToRoot(aNode, 0);
!!!11880578.java!!!	getPathToRoot(inout aNode : TreeNode, in depth : int) : TreeNode
        TreeNode[]              retNodes;
        // This method recurses, traversing towards the root in order
        // size the array. On the way back, it fills in the nodes,
        // starting from the root and working back to the original node.

        /* Check for null, in case someone passed in a null node, or
           they passed in an element that isn't rooted at root. */
        if(aNode == null) {
            if(depth == 0)
                return null;
            else
                retNodes = new TreeNode[depth];
        }
        else {
            depth++;
            if(aNode == root)
                retNodes = new TreeNode[depth];
            else
                retNodes = getPathToRoot(aNode.getParent(), depth);
            retNodes[retNodes.length - depth] = aNode;
        }
        return retNodes;
!!!11880706.java!!!	addTreeModelListener(inout l : TreeModelListener) : void
        listenerList.add(TreeModelListener.class, l);
!!!11880834.java!!!	removeTreeModelListener(inout l : TreeModelListener) : void
        listenerList.remove(TreeModelListener.class, l);
!!!11880962.java!!!	getTreeModelListeners() : TreeModelListener
        return listenerList.getListeners(TreeModelListener.class);
!!!11881090.java!!!	fireTreeNodesChanged(inout source : Object, inout path : Object [[]], inout childIndices : int [[]], inout children : Object [[]]) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        TreeModelEvent e = null;
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==TreeModelListener.class) {
                // Lazily create the event:
                if (e == null)
                    e = new TreeModelEvent(source, path,
                                           childIndices, children);
                ((TreeModelListener)listeners[i+1]).treeNodesChanged(e);
            }
        }
!!!11881218.java!!!	fireTreeNodesInserted(inout source : Object, inout path : Object [[]], inout childIndices : int [[]], inout children : Object [[]]) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        TreeModelEvent e = null;
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==TreeModelListener.class) {
                // Lazily create the event:
                if (e == null)
                    e = new TreeModelEvent(source, path,
                                           childIndices, children);
                ((TreeModelListener)listeners[i+1]).treeNodesInserted(e);
            }
        }
!!!11881346.java!!!	fireTreeNodesRemoved(inout source : Object, inout path : Object [[]], inout childIndices : int [[]], inout children : Object [[]]) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        TreeModelEvent e = null;
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==TreeModelListener.class) {
                // Lazily create the event:
                if (e == null)
                    e = new TreeModelEvent(source, path,
                                           childIndices, children);
                ((TreeModelListener)listeners[i+1]).treeNodesRemoved(e);
            }
        }
!!!11881474.java!!!	fireTreeStructureChanged(inout source : Object, inout path : Object [[]], inout childIndices : int [[]], inout children : Object [[]]) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        TreeModelEvent e = null;
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==TreeModelListener.class) {
                // Lazily create the event:
                if (e == null)
                    e = new TreeModelEvent(source, path,
                                           childIndices, children);
                ((TreeModelListener)listeners[i+1]).treeStructureChanged(e);
            }
        }
!!!11881602.java!!!	fireTreeStructureChanged(inout source : Object, inout path : TreePath) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        TreeModelEvent e = null;
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==TreeModelListener.class) {
                // Lazily create the event:
                if (e == null)
                    e = new TreeModelEvent(source, path);
                ((TreeModelListener)listeners[i+1]).treeStructureChanged(e);
            }
        }
!!!11881730.java!!!	getListeners(inout listenerType : Class) : T
        return listenerList.getListeners(listenerType);
!!!11881858.java!!!	writeObject(inout s : ObjectOutputStream) : void
        Vector<Object> values = new Vector<Object>();

        s.defaultWriteObject();
        // Save the root, if its Serializable.
        if(root != null && root instanceof Serializable) {
            values.addElement("root");
            values.addElement(root);
        }
        s.writeObject(values);
!!!11881986.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();

        Vector          values = (Vector)s.readObject();
        int             indexCounter = 0;
        int             maxCounter = values.size();

        if(indexCounter < maxCounter && values.elementAt(indexCounter).
           equals("root")) {
            root = (TreeNode)values.elementAt(++indexCounter);
            indexCounter++;
        }
