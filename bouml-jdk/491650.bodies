class ArrayMapping
!!!2947458.java!!!	ArrayMapping(inout targetType : Type, inout openArrayType : ArrayType, inout openArrayClass : Class, inout elementMapping : MXBeanMapping)
            super(targetType, openArrayType);
            this.elementMapping = elementMapping;
!!!2947586.java!!!	toNonNullOpenValue(inout value : Object) : Object
            Object[] valueArray = (Object[]) value;
            final int len = valueArray.length;
            final Object[] openArray = (Object[])
                Array.newInstance(getOpenClass().getComponentType(), len);
            for (int i = 0; i < len; i++)
                openArray[i] = elementMapping.toOpenValue(valueArray[i]);
            return openArray;
!!!2947714.java!!!	fromNonNullOpenValue(inout openValue : Object) : Object
            final Object[] openArray = (Object[]) openValue;
            final Type javaType = getJavaType();
            final Object[] valueArray;
            final Type componentType;
            if (javaType instanceof GenericArrayType) {
                componentType =
                    ((GenericArrayType) javaType).getGenericComponentType();
            } else if (javaType instanceof Class<?> &&
                       ((Class<?>) javaType).isArray()) {
                componentType = ((Class<?>) javaType).getComponentType();
            } else {
                throw new IllegalArgumentException("Not an array: " +
                                                   javaType);
            }
            valueArray = (Object[]) Array.newInstance((Class<?>) componentType,
                                                      openArray.length);
            for (int i = 0; i < openArray.length; i++)
                valueArray[i] = elementMapping.fromOpenValue(openArray[i]);
            return valueArray;
!!!2947842.java!!!	checkReconstructible() : void
            elementMapping.checkReconstructible();
