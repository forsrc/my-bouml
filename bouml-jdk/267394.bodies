class LocateReplyMessage_1_0
!!!1405826.java!!!	LocateReplyMessage_1_0(inout orb : ORB)
        this.orb = orb;
!!!1405954.java!!!	LocateReplyMessage_1_0(inout orb : ORB, in _request_id : int, in _locate_status : int, inout _ior : IOR)
        super(Message.GIOPBigMagic, false, Message.GIOPLocateReply, 0);
        this.orb = orb;
        request_id = _request_id;
        locate_status = _locate_status;
        ior = _ior;
!!!1406082.java!!!	getRequestId() : int
        return this.request_id;
!!!1406210.java!!!	getReplyStatus() : int
        return this.locate_status;
!!!1406338.java!!!	getAddrDisposition() : short
        return KeyAddr.value;
!!!1406466.java!!!	getSystemException(inout message : String) : SystemException
        return null;  // 1.0 LocateReply body does not contain SystemException
!!!1406594.java!!!	getIOR() : IOR
        return this.ior;
!!!1406722.java!!!	read(inout istream : InputStream) : void
        super.read(istream);
        this.request_id = istream.read_ulong();
        this.locate_status = istream.read_long();
        isValidReplyStatus(this.locate_status); // raises exception on error

        // The code below reads the reply body if status is OBJECT_FORWARD
        if (this.locate_status == OBJECT_FORWARD) {
            CDRInputStream cdr = (CDRInputStream) istream;
            this.ior = IORFactories.makeIOR( cdr ) ;
        }
!!!1406850.java!!!	write(inout ostream : OutputStream) : void
        super.write(ostream);
        ostream.write_ulong(this.request_id);
        ostream.write_long(this.locate_status);
!!!1406978.java!!!	isValidReplyStatus(in replyStatus : int) : void
        switch (replyStatus) {
        case UNKNOWN_OBJECT :
        case OBJECT_HERE :
        case OBJECT_FORWARD :
            break;
        default :
            ORBUtilSystemException localWrapper = ORBUtilSystemException.get(
                CORBALogDomains.RPC_PROTOCOL ) ;
            throw localWrapper.illegalReplyStatus( CompletionStatus.COMPLETED_MAYBE);
        }
!!!1407106.java!!!	callback(inout handler : MessageHandler) : void
        handler.handleInput(this);
