class CopyOnWriteArraySet
!!!9153026.java!!!	CopyOnWriteArraySet()
        al = new CopyOnWriteArrayList<E>();
!!!9153154.java!!!	CopyOnWriteArraySet(inout c : Collection)
        if (c.getClass() == CopyOnWriteArraySet.class) {
            @SuppressWarnings("unchecked") CopyOnWriteArraySet<E> cc =
                (CopyOnWriteArraySet<E>)c;
            al = new CopyOnWriteArrayList<E>(cc.al);
        }
        else {
            al = new CopyOnWriteArrayList<E>();
            al.addAllAbsent(c);
        }
!!!9153282.java!!!	size() : int
        return al.size();
!!!9153410.java!!!	isEmpty() : boolean
        return al.isEmpty();
!!!9153538.java!!!	contains(inout o : Object) : boolean
        return al.contains(o);
!!!9153666.java!!!	toArray() : Object
        return al.toArray();
!!!9153794.java!!!	toArray(inout a : T [[]]) : T
        return al.toArray(a);
!!!9153922.java!!!	clear() : void
        al.clear();
!!!9154050.java!!!	remove(inout o : Object) : boolean
        return al.remove(o);
!!!9154178.java!!!	add(inout e : E) : boolean
        return al.addIfAbsent(e);
!!!9154306.java!!!	containsAll(inout c : Collection) : boolean
        return al.containsAll(c);
!!!9154434.java!!!	addAll(inout c : Collection) : boolean
        return al.addAllAbsent(c) > 0;
!!!9154562.java!!!	removeAll(inout c : Collection) : boolean
        return al.removeAll(c);
!!!9154690.java!!!	retainAll(inout c : Collection) : boolean
        return al.retainAll(c);
!!!9154818.java!!!	iterator() : Iterator
        return al.iterator();
!!!9154946.java!!!	equals(inout o : Object) : boolean
        if (o == this)
            return true;
        if (!(o instanceof Set))
            return false;
        Set<?> set = (Set<?>)(o);
        Iterator<?> it = set.iterator();

        // Uses O(n^2) algorithm that is only appropriate
        // for small sets, which CopyOnWriteArraySets should be.

        //  Use a single snapshot of underlying array
        Object[] elements = al.getArray();
        int len = elements.length;
        // Mark matched elements to avoid re-checking
        boolean[] matched = new boolean[len];
        int k = 0;
        outer: while (it.hasNext()) {
            if (++k > len)
                return false;
            Object x = it.next();
            for (int i = 0; i < len; ++i) {
                if (!matched[i] && eq(x, elements[i])) {
                    matched[i] = true;
                    continue outer;
                }
            }
            return false;
        }
        return k == len;
!!!9155074.java!!!	removeIf(inout filter : Predicate) : boolean
        return al.removeIf(filter);
!!!9155202.java!!!	forEach(inout action : Consumer) : void
        al.forEach(action);
!!!9155330.java!!!	spliterator() : Spliterator
        return Spliterators.spliterator
            (al.getArray(), Spliterator.IMMUTABLE | Spliterator.DISTINCT);
!!!9155458.java!!!	eq(inout o1 : Object, inout o2 : Object) : boolean
        return (o1 == null) ? o2 == null : o1.equals(o2);
