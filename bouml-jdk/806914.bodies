class Operation
!!!5944066.java!!!	fixupVariables(inout vars : Vector, in globalsSize : int) : void
    m_left.fixupVariables(vars, globalsSize);
    m_right.fixupVariables(vars, globalsSize);
!!!5944194.java!!!	canTraverseOutsideSubtree() : boolean

    if (null != m_left && m_left.canTraverseOutsideSubtree())
      return true;

    if (null != m_right && m_right.canTraverseOutsideSubtree())
      return true;

    return false;
!!!5944322.java!!!	setLeftRight(inout l : Expression, inout r : Expression) : void
    m_left = l;
    m_right = r;
    l.exprSetParent(this);
    r.exprSetParent(this);
!!!5944450.java!!!	execute(inout xctxt : XPathContext) : XObject

    XObject left = m_left.execute(xctxt, true);
    XObject right = m_right.execute(xctxt, true);

    XObject result = operate(left, right);
    left.detach();
    right.detach();
    return result;
!!!5944578.java!!!	operate(inout left : XObject, inout right : XObject) : XObject
    return null;  // no-op
!!!5944706.java!!!	getLeftOperand() : Expression
    return m_left;
!!!5944834.java!!!	getRightOperand() : Expression
    return m_right;
!!!5945218.java!!!	callVisitors(inout owner : ExpressionOwner, inout visitor : XPathVisitor) : void
        if(visitor.visitBinaryOperation(owner, this))
        {
                m_left.callVisitors(new LeftExprOwner(), visitor);
                m_right.callVisitors(this, visitor);
        }
!!!5945346.java!!!	getExpression() : Expression
    return m_right;
!!!5945474.java!!!	setExpression(inout exp : Expression) : void
        exp.exprSetParent(this);
        m_right = exp;
!!!5945602.java!!!	deepEquals(inout expr : Expression) : boolean
        if(!isSameClass(expr))
                return false;

        if(!m_left.deepEquals(((Operation)expr).m_left))
                return false;

        if(!m_right.deepEquals(((Operation)expr).m_right))
                return false;

        return true;
