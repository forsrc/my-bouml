class Period
!!!8402946.java!!!	ofYears(in years : int) : Period
        return create(years, 0, 0);
!!!8403074.java!!!	ofMonths(in months : int) : Period
        return create(0, months, 0);
!!!8403202.java!!!	ofWeeks(in weeks : int) : Period
        return create(0, 0, Math.multiplyExact(weeks, 7));
!!!8403330.java!!!	ofDays(in days : int) : Period
        return create(0, 0, days);
!!!8403458.java!!!	of(in years : int, in months : int, in days : int) : Period
        return create(years, months, days);
!!!8403586.java!!!	from(inout amount : TemporalAmount) : Period
        if (amount instanceof Period) {
            return (Period) amount;
        }
        if (amount instanceof ChronoPeriod) {
            if (IsoChronology.INSTANCE.equals(((ChronoPeriod) amount).getChronology()) == false) {
                throw new DateTimeException("Period requires ISO chronology: " + amount);
            }
        }
        Objects.requireNonNull(amount, "amount");
        int years = 0;
        int months = 0;
        int days = 0;
        for (TemporalUnit unit : amount.getUnits()) {
            long unitAmount = amount.get(unit);
            if (unit == ChronoUnit.YEARS) {
                years = Math.toIntExact(unitAmount);
            } else if (unit == ChronoUnit.MONTHS) {
                months = Math.toIntExact(unitAmount);
            } else if (unit == ChronoUnit.DAYS) {
                days = Math.toIntExact(unitAmount);
            } else {
                throw new DateTimeException("Unit must be Years, Months or Days, but was " + unit);
            }
        }
        return create(years, months, days);
!!!8403714.java!!!	parse(inout text : CharSequence) : Period
        Objects.requireNonNull(text, "text");
        Matcher matcher = PATTERN.matcher(text);
        if (matcher.matches()) {
            int negate = ("-".equals(matcher.group(1)) ? -1 : 1);
            String yearMatch = matcher.group(2);
            String monthMatch = matcher.group(3);
            String weekMatch = matcher.group(4);
            String dayMatch = matcher.group(5);
            if (yearMatch != null || monthMatch != null || dayMatch != null || weekMatch != null) {
                try {
                    int years = parseNumber(text, yearMatch, negate);
                    int months = parseNumber(text, monthMatch, negate);
                    int weeks = parseNumber(text, weekMatch, negate);
                    int days = parseNumber(text, dayMatch, negate);
                    days = Math.addExact(days, Math.multiplyExact(weeks, 7));
                    return create(years, months, days);
                } catch (NumberFormatException ex) {
                    throw new DateTimeParseException("Text cannot be parsed to a Period", text, 0, ex);
                }
            }
        }
        throw new DateTimeParseException("Text cannot be parsed to a Period", text, 0);
!!!8403842.java!!!	parseNumber(inout text : CharSequence, inout str : String, in negate : int) : int
        if (str == null) {
            return 0;
        }
        int val = Integer.parseInt(str);
        try {
            return Math.multiplyExact(val, negate);
        } catch (ArithmeticException ex) {
            throw new DateTimeParseException("Text cannot be parsed to a Period", text, 0, ex);
        }
!!!8403970.java!!!	between(inout startDateInclusive : LocalDate, inout endDateExclusive : LocalDate) : Period
        return startDateInclusive.until(endDateExclusive);
!!!8404098.java!!!	create(in years : int, in months : int, in days : int) : Period
        if ((years | months | days) == 0) {
            return ZERO;
        }
        return new Period(years, months, days);
!!!8404226.java!!!	Period(in years : int, in months : int, in days : int)
        this.years = years;
        this.months = months;
        this.days = days;
!!!8404354.java!!!	get(inout unit : TemporalUnit) : long
        if (unit == ChronoUnit.YEARS) {
            return getYears();
        } else if (unit == ChronoUnit.MONTHS) {
            return getMonths();
        } else if (unit == ChronoUnit.DAYS) {
            return getDays();
        } else {
            throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
        }
!!!8404482.java!!!	getUnits() : List
        return SUPPORTED_UNITS;
!!!8404610.java!!!	getChronology() : IsoChronology
        return IsoChronology.INSTANCE;
!!!8404738.java!!!	isZero() : boolean
        return (this == ZERO);
!!!8404866.java!!!	isNegative() : boolean
        return years < 0 || months < 0 || days < 0;
!!!8404994.java!!!	getYears() : int
        return years;
!!!8405122.java!!!	getMonths() : int
        return months;
!!!8405250.java!!!	getDays() : int
        return days;
!!!8405378.java!!!	withYears(in years : int) : Period
        if (years == this.years) {
            return this;
        }
        return create(years, months, days);
!!!8405506.java!!!	withMonths(in months : int) : Period
        if (months == this.months) {
            return this;
        }
        return create(years, months, days);
!!!8405634.java!!!	withDays(in days : int) : Period
        if (days == this.days) {
            return this;
        }
        return create(years, months, days);
!!!8405762.java!!!	plus(inout amountToAdd : TemporalAmount) : Period
        Period isoAmount = Period.from(amountToAdd);
        return create(
                Math.addExact(years, isoAmount.years),
                Math.addExact(months, isoAmount.months),
                Math.addExact(days, isoAmount.days));
!!!8405890.java!!!	plusYears(in yearsToAdd : long) : Period
        if (yearsToAdd == 0) {
            return this;
        }
        return create(Math.toIntExact(Math.addExact(years, yearsToAdd)), months, days);
!!!8406018.java!!!	plusMonths(in monthsToAdd : long) : Period
        if (monthsToAdd == 0) {
            return this;
        }
        return create(years, Math.toIntExact(Math.addExact(months, monthsToAdd)), days);
!!!8406146.java!!!	plusDays(in daysToAdd : long) : Period
        if (daysToAdd == 0) {
            return this;
        }
        return create(years, months, Math.toIntExact(Math.addExact(days, daysToAdd)));
!!!8406274.java!!!	minus(inout amountToSubtract : TemporalAmount) : Period
        Period isoAmount = Period.from(amountToSubtract);
        return create(
                Math.subtractExact(years, isoAmount.years),
                Math.subtractExact(months, isoAmount.months),
                Math.subtractExact(days, isoAmount.days));
!!!8406402.java!!!	minusYears(in yearsToSubtract : long) : Period
        return (yearsToSubtract == Long.MIN_VALUE ? plusYears(Long.MAX_VALUE).plusYears(1) : plusYears(-yearsToSubtract));
!!!8406530.java!!!	minusMonths(in monthsToSubtract : long) : Period
        return (monthsToSubtract == Long.MIN_VALUE ? plusMonths(Long.MAX_VALUE).plusMonths(1) : plusMonths(-monthsToSubtract));
!!!8406658.java!!!	minusDays(in daysToSubtract : long) : Period
        return (daysToSubtract == Long.MIN_VALUE ? plusDays(Long.MAX_VALUE).plusDays(1) : plusDays(-daysToSubtract));
!!!8406786.java!!!	multipliedBy(in scalar : int) : Period
        if (this == ZERO || scalar == 1) {
            return this;
        }
        return create(
                Math.multiplyExact(years, scalar),
                Math.multiplyExact(months, scalar),
                Math.multiplyExact(days, scalar));
!!!8406914.java!!!	negated() : Period
        return multipliedBy(-1);
!!!8407042.java!!!	normalized() : Period
        long totalMonths = toTotalMonths();
        long splitYears = totalMonths / 12;
        int splitMonths = (int) (totalMonths % 12);  // no overflow
        if (splitYears == years && splitMonths == months) {
            return this;
        }
        return create(Math.toIntExact(splitYears), splitMonths, days);
!!!8407170.java!!!	toTotalMonths() : long
        return years * 12L + months;  // no overflow
!!!8407298.java!!!	addTo(inout temporal : Temporal) : Temporal
        validateChrono(temporal);
        if (months == 0) {
            if (years != 0) {
                temporal = temporal.plus(years, YEARS);
            }
        } else {
            long totalMonths = toTotalMonths();
            if (totalMonths != 0) {
                temporal = temporal.plus(totalMonths, MONTHS);
            }
        }
        if (days != 0) {
            temporal = temporal.plus(days, DAYS);
        }
        return temporal;
!!!8407426.java!!!	subtractFrom(inout temporal : Temporal) : Temporal
        validateChrono(temporal);
        if (months == 0) {
            if (years != 0) {
                temporal = temporal.minus(years, YEARS);
            }
        } else {
            long totalMonths = toTotalMonths();
            if (totalMonths != 0) {
                temporal = temporal.minus(totalMonths, MONTHS);
            }
        }
        if (days != 0) {
            temporal = temporal.minus(days, DAYS);
        }
        return temporal;
!!!8407554.java!!!	validateChrono(inout temporal : TemporalAccessor) : void
        Objects.requireNonNull(temporal, "temporal");
        Chronology temporalChrono = temporal.query(TemporalQueries.chronology());
        if (temporalChrono != null && IsoChronology.INSTANCE.equals(temporalChrono) == false) {
            throw new DateTimeException("Chronology mismatch, expected: ISO, actual: " + temporalChrono.getId());
        }
!!!8407682.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj instanceof Period) {
            Period other = (Period) obj;
            return years == other.years &&
                    months == other.months &&
                    days == other.days;
        }
        return false;
!!!8407810.java!!!	hashCode() : int
        return years + Integer.rotateLeft(months, 8) + Integer.rotateLeft(days, 16);
!!!8407938.java!!!	toString() : String
        if (this == ZERO) {
            return "P0D";
        } else {
            StringBuilder buf = new StringBuilder();
            buf.append('P');
            if (years != 0) {
                buf.append(years).append('Y');
            }
            if (months != 0) {
                buf.append(months).append('M');
            }
            if (days != 0) {
                buf.append(days).append('D');
            }
            return buf.toString();
        }
!!!8408066.java!!!	writeReplace() : Object
        return new Ser(Ser.PERIOD_TYPE, this);
!!!8408194.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8408322.java!!!	writeExternal(inout out : DataOutput) : void
        out.writeInt(years);
        out.writeInt(months);
        out.writeInt(days);
!!!8408450.java!!!	readExternal(inout in : DataInput) : Period
        int years = in.readInt();
        int months = in.readInt();
        int days = in.readInt();
        return Period.of(years, months, days);
