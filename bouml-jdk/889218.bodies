class Float
!!!7018370.java!!!	toString(in f : float) : String
        return FloatingDecimal.toJavaFormatString(f);
!!!7018498.java!!!	toHexString(in f : float) : String
        if (Math.abs(f) < FloatConsts.MIN_NORMAL
            &&  f != 0.0f ) {// float subnormal
            // Adjust exponent to create subnormal double, then
            // replace subnormal double exponent with subnormal float
            // exponent
            String s = Double.toHexString(Math.scalb((double)f,
                                                     /* -1022+126 */
                                                     DoubleConsts.MIN_EXPONENT-
                                                     FloatConsts.MIN_EXPONENT));
            return s.replaceFirst("p-1022$", "p-126");
        }
        else // double string will be the same as float string
            return Double.toHexString(f);
!!!7018626.java!!!	valueOf(inout s : String) : Float
        return new Float(parseFloat(s));
!!!7018754.java!!!	valueOf(in f : float) : Float
        return new Float(f);
!!!7018882.java!!!	parseFloat(inout s : String) : float
        return FloatingDecimal.parseFloat(s);
!!!7019010.java!!!	isNaN(in v : float) : boolean
        return (v != v);
!!!7019138.java!!!	isInfinite(in v : float) : boolean
        return (v == POSITIVE_INFINITY) || (v == NEGATIVE_INFINITY);
!!!7019266.java!!!	isFinite(in f : float) : boolean
        return Math.abs(f) <= FloatConsts.MAX_VALUE;
!!!7019394.java!!!	Float(in value : float)
        this.value = value;
!!!7019522.java!!!	Float(in value : double)
        this.value = (float)value;
!!!7019650.java!!!	Float(inout s : String)
        value = parseFloat(s);
!!!7019778.java!!!	isNaN() : boolean
        return isNaN(value);
!!!7019906.java!!!	isInfinite() : boolean
        return isInfinite(value);
!!!7020034.java!!!	toString() : String
        return Float.toString(value);
!!!7020162.java!!!	byteValue() : byte
        return (byte)value;
!!!7020290.java!!!	shortValue() : short
        return (short)value;
!!!7020418.java!!!	intValue() : int
        return (int)value;
!!!7020546.java!!!	longValue() : long
        return (long)value;
!!!7020674.java!!!	floatValue() : float
        return value;
!!!7020802.java!!!	doubleValue() : double
        return (double)value;
!!!7020930.java!!!	hashCode() : int
        return Float.hashCode(value);
!!!7021058.java!!!	hashCode(in value : float) : int
        return floatToIntBits(value);
!!!7021186.java!!!	equals(inout obj : Object) : boolean
        return (obj instanceof Float)
               && (floatToIntBits(((Float)obj).value) == floatToIntBits(value));
!!!7021314.java!!!	floatToIntBits(in value : float) : int
        int result = floatToRawIntBits(value);
        // Check for NaN based on values of bit fields, maximum
        // exponent and nonzero significand.
        if ( ((result & FloatConsts.EXP_BIT_MASK) ==
              FloatConsts.EXP_BIT_MASK) &&
             (result & FloatConsts.SIGNIF_BIT_MASK) != 0)
            result = 0x7fc00000;
        return result;
!!!7021698.java!!!	compareTo(inout anotherFloat : Float) : int
        return Float.compare(value, anotherFloat.value);
!!!7021826.java!!!	compare(in f1 : float, in f2 : float) : int
        if (f1 < f2)
            return -1;           // Neither val is NaN, thisVal is smaller
        if (f1 > f2)
            return 1;            // Neither val is NaN, thisVal is larger

        // Cannot use floatToRawIntBits because of possibility of NaNs.
        int thisBits    = Float.floatToIntBits(f1);
        int anotherBits = Float.floatToIntBits(f2);

        return (thisBits == anotherBits ?  0 : // Values are equal
                (thisBits < anotherBits ? -1 : // (-0.0, 0.0) or (!NaN, NaN)
                 1));                          // (0.0, -0.0) or (NaN, !NaN)
!!!7021954.java!!!	sum(in a : float, in b : float) : float
        return a + b;
!!!7022082.java!!!	max(in a : float, in b : float) : float
        return Math.max(a, b);
!!!7022210.java!!!	min(in a : float, in b : float) : float
        return Math.min(a, b);
