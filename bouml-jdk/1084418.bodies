class KeySet
!!!8818434.java!!!	iterator() : Iterator
            return new KeyIterator();
!!!8818562.java!!!	size() : int
            return size;
!!!8818690.java!!!	contains(inout o : Object) : boolean
            return containsKey(o);
!!!8818818.java!!!	remove(inout o : Object) : boolean
            int oldSize = size;
            IdentityHashMap.this.remove(o);
            return size != oldSize;
!!!8818946.java!!!	removeAll(inout c : Collection) : boolean
            Objects.requireNonNull(c);
            boolean modified = false;
            for (Iterator<K> i = iterator(); i.hasNext(); ) {
                if (c.contains(i.next())) {
                    i.remove();
                    modified = true;
                }
            }
            return modified;
!!!8819074.java!!!	clear() : void
            IdentityHashMap.this.clear();
!!!8819202.java!!!	hashCode() : int
            int result = 0;
            for (K key : this)
                result += System.identityHashCode(key);
            return result;
!!!8819330.java!!!	toArray() : Object
            return toArray(new Object[0]);
!!!8819458.java!!!	toArray(inout a : T [[]]) : T
            int expectedModCount = modCount;
            int size = size();
            if (a.length < size)
                a = (T[]) Array.newInstance(a.getClass().getComponentType(), size);
            Object[] tab = table;
            int ti = 0;
            for (int si = 0; si < tab.length; si += 2) {
                Object key;
                if ((key = tab[si]) != null) { // key present ?
                    // more elements than expected -> concurrent modification from other thread
                    if (ti >= size) {
                        throw new ConcurrentModificationException();
                    }
                    a[ti++] = (T) unmaskNull(key); // unmask key
                }
            }
            // fewer elements than expected or concurrent modification from other thread detected
            if (ti < size || expectedModCount != modCount) {
                throw new ConcurrentModificationException();
            }
            // final null marker as per spec
            if (ti < a.length) {
                a[ti] = null;
            }
            return a;
!!!8819586.java!!!	spliterator() : Spliterator
            return new KeySpliterator<>(IdentityHashMap.this, 0, -1, 0, 0);
