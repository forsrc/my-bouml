format 222
"annotation" // jdk1.8::java::lang::annotation
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/lang/annotation/"
  java_package "java.lang.annotation"
  classview 152450 "annotation"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 494850 "Annotation"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The common interface extended by all annotation types.  Note that an
interface that manually extends this one does <i>not</i> define
an annotation type.  Also note that this interface does not itself
define an annotation type.

More information about annotation types can be found in section 9.6 of
<cite>The Java&trade; Language Specification</cite>.

The {@link java.lang.reflect.AnnotatedElement} interface discusses
compatibility concerns when evolving an annotation type from being
non-repeatable to being repeatable.

@author  Josh Bloch
@since   1.5
"
      operation 7147266 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified object represents an annotation
that is logically equivalent to this one.  In other words,
returns true if the specified object is an instance of the same
annotation type as this instance, all of whose members are equal
to the corresponding member of this annotation, as defined below:
<ul>
   <li>Two corresponding primitive typed members whose values are
   <tt>x</tt> and <tt>y</tt> are considered equal if <tt>x == y</tt>,
   unless their type is <tt>float</tt> or <tt>double</tt>.

   <li>Two corresponding <tt>float</tt> members whose values
   are <tt>x</tt> and <tt>y</tt> are considered equal if
   <tt>Float.valueOf(x).equals(Float.valueOf(y))</tt>.
   (Unlike the <tt>==</tt> operator, NaN is considered equal
   to itself, and <tt>0.0f</tt> unequal to <tt>-0.0f</tt>.)

   <li>Two corresponding <tt>double</tt> members whose values
   are <tt>x</tt> and <tt>y</tt> are considered equal if
   <tt>Double.valueOf(x).equals(Double.valueOf(y))</tt>.
   (Unlike the <tt>==</tt> operator, NaN is considered equal
   to itself, and <tt>0.0</tt> unequal to <tt>-0.0</tt>.)

   <li>Two corresponding <tt>String</tt>, <tt>Class</tt>, enum, or
   annotation typed members whose values are <tt>x</tt> and <tt>y</tt>
   are considered equal if <tt>x.equals(y)</tt>.  (Note that this
   definition is recursive for annotation typed members.)

   <li>Two corresponding array typed members <tt>x</tt> and <tt>y</tt>
   are considered equal if <tt>Arrays.equals(x, y)</tt>, for the
   appropriate overloading of {@link java.util.Arrays#equals}.
</ul>

@return true if the specified object represents an annotation
    that is logically equivalent to this one, otherwise false
"
      end

      operation 7147394 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code of this annotation, as defined below:

<p>The hash code of an annotation is the sum of the hash codes
of its members (including those with default values), as defined
below:

The hash code of an annotation member is (127 times the hash code
of the member-name as computed by {@link String#hashCode()}) XOR
the hash code of the member-value, as defined below:

<p>The hash code of a member-value depends on its type:
<ul>
<li>The hash code of a primitive value <tt><i>v</i></tt> is equal to
    <tt><i>WrapperType</i>.valueOf(<i>v</i>).hashCode()</tt>, where
    <tt><i>WrapperType</i></tt> is the wrapper type corresponding
    to the primitive type of <tt><i>v</i></tt> ({@link Byte},
    {@link Character}, {@link Double}, {@link Float}, {@link Integer},
    {@link Long}, {@link Short}, or {@link Boolean}).

<li>The hash code of a string, enum, class, or annotation member-value
I     <tt><i>v</i></tt> is computed as by calling
    <tt><i>v</i>.hashCode()</tt>.  (In the case of annotation
    member values, this is a recursive definition.)

<li>The hash code of an array member-value is computed by calling
    the appropriate overloading of
    {@link java.util.Arrays#hashCode(long[]) Arrays.hashCode}
    on the value.  (There is one overloading for each primitive
    type, and one for object reference types.)
</ul>

@return the hash code of this annotation
"
      end

      operation 7147522 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this annotation.  The details
of the representation are implementation-dependent, but the following
may be regarded as typical:
<pre>
  &#064;com.acme.util.Name(first=Alfred, middle=E., last=Neuman)
</pre>

@return a string representation of this annotation
"
      end

      operation 7147650 "annotationType"
	public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Annotation> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the annotation type of this annotation.
@return the annotation type of this annotation
"
      end
    end

    class 941954 "AnnotationFormatError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when the annotation parser attempts to read an annotation
from a class file and determines that the annotation is malformed.
This error can be thrown by the {@linkplain
java.lang.reflect.AnnotatedElement API used to read annotations
reflectively}.

@author  Josh Bloch
@see     java.lang.reflect.AnnotatedElement
@since   1.5
"
      classrelation 3177602 // <generalisation>
	relation 3177602 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3177602 // <generalisation>
	  b parent class_ref 195842 // Error
      end

      attribute 1689474 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4256701562333669892L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7147778 "AnnotationFormatError"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <tt>AnnotationFormatError</tt> with the specified
detail message.

@param   message   the detail message.
"
      end

      operation 7147906 "AnnotationFormatError"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <tt>AnnotationFormatError</tt> with the specified
detail message and cause.  Note that the detail message associated
with <code>cause</code> is <i>not</i> automatically incorporated in
this error's detail message.

@param  message the detail message
@param  cause the cause (A <tt>null</tt> value is permitted, and
    indicates that the cause is nonexistent or unknown.)
"
      end

      operation 7148034 "AnnotationFormatError"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <tt>AnnotationFormatError</tt> with the specified
cause and a detail message of
<tt>(cause == null ? null : cause.toString())</tt> (which
typically contains the class and detail message of <tt>cause</tt>).

@param  cause the cause (A <tt>null</tt> value is permitted, and
    indicates that the cause is nonexistent or unknown.)
"
      end
    end

    class 942082 "AnnotationTypeMismatchException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown to indicate that a program has attempted to access an element of
an annotation whose type has changed after the annotation was compiled
(or serialized).
This exception can be thrown by the {@linkplain
java.lang.reflect.AnnotatedElement API used to read annotations
reflectively}.

@author  Josh Bloch
@see     java.lang.reflect.AnnotatedElement
@since 1.5
"
      classrelation 3177730 // <generalisation>
	relation 3177730 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3177730 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 1689602 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8125925355765570191L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3177858 // element (<unidirectional association>)
	relation 3177858 --->
	  a role_name "element" const_relation private
	    comment "
The <tt>Method</tt> object for the annotation element.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3177858 // element (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 3177986 // foundType (<unidirectional association>)
	relation 3177986 --->
	  a role_name "foundType" const_relation private
	    comment "
The (erroneous) type of data found in the annotation.  This string
may, but is not required to, contain the value as well.  The exact
format of the string is unspecified.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3177986 // foundType (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7148162 "AnnotationTypeMismatchException"
	public explicit_return_type ""
	nparams 2
	  param inout name "element" type class_ref 137858 // Method
	  param inout name "foundType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AnnotationTypeMismatchException for the specified
annotation type element and found data type.

@param element the <tt>Method</tt> object for the annotation element
@param foundType the (erroneous) type of data found in the annotation.
       This string may, but is not required to, contain the value
       as well.  The exact format of the string is unspecified.
"
      end

      operation 7148290 "element"
	public return_type class_ref 137858 // Method
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <tt>Method</tt> object for the incorrectly typed element.

@return the <tt>Method</tt> object for the incorrectly typed element
"
      end

      operation 7148418 "foundType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of data found in the incorrectly typed element.
The returned string may, but is not required to, contain the value
as well.  The exact format of the string is unspecified.

@return the type of data found in the incorrectly typed element
"
      end
    end

    class 942210 "Documented"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION_TYPE)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Indicates that annotations with a type are to be documented by javadoc
and similar tools by default.  This type should be used to annotate the
declarations of types whose annotations affect the use of annotated
elements by their clients.  If a type declaration is annotated with
Documented, its annotations become part of the public API
of the annotated elements.

@author  Joshua Bloch
@since 1.5
"
    end

    class 942338 "ElementType"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The constants of this enumerated type provide a simple classification of the
syntactic locations where annotations may appear in a Java program. These
constants are used in {@link Target java.lang.annotation.Target}
meta-annotations to specify where it is legal to write annotations of a
given type.

<p>The syntactic locations where annotations may appear are split into
<em>declaration contexts</em> , where annotations apply to declarations, and
<em>type contexts</em> , where annotations apply to types used in
declarations and expressions.

<p>The constants {@link #ANNOTATION_TYPE} , {@link #CONSTRUCTOR} , {@link
#FIELD} , {@link #LOCAL_VARIABLE} , {@link #METHOD} , {@link #PACKAGE} ,
{@link #PARAMETER} , {@link #TYPE} , and {@link #TYPE_PARAMETER} correspond
to the declaration contexts in JLS 9.6.4.1.

<p>For example, an annotation whose type is meta-annotated with
{@code @Target(ElementType.FIELD)} may only be written as a modifier for a
field declaration.

<p>The constant {@link #TYPE_USE} corresponds to the 15 type contexts in JLS
4.11, as well as to two declaration contexts: type declarations (including
annotation type declarations) and type parameter declarations.

<p>For example, an annotation whose type is meta-annotated with
{@code @Target(ElementType.TYPE_USE)} may be written on the type of a field
(or within the type of the field, if it is a nested, parameterized, or array
type), and may also appear as a modifier for, say, a class declaration.

<p>The {@code TYPE_USE} constant includes type declarations and type
parameter declarations as a convenience for designers of type checkers which
give semantics to annotation types. For example, if the annotation type
{@code NonNull} is meta-annotated with
{@code @Target(ElementType.TYPE_USE)}, then {@code @NonNull}
{@code class C {...}} could be treated by a type checker as indicating that
all variables of class {@code C} are non-null, while still allowing
variables of other classes to be non-null or not non-null based on whether
{@code @NonNull} appears at the variable's declaration.

@author  Joshua Bloch
@since 1.5
@jls 9.6.4.1 @Target
@jls 4.1 The Kinds of Types and Values
"
      attribute 1689730 "TYPE"
	public type class_ref 942338 // ElementType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Class, interface (including annotation type), or enum declaration 
"
      end

      attribute 1689858 "FIELD"
	public type class_ref 942338 // ElementType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Field declaration (includes enum constants) 
"
      end

      attribute 1689986 "METHOD"
	public type class_ref 942338 // ElementType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Method declaration 
"
      end

      attribute 1690114 "PARAMETER"
	public type class_ref 942338 // ElementType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Formal parameter declaration 
"
      end

      attribute 1690242 "CONSTRUCTOR"
	public type class_ref 942338 // ElementType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constructor declaration 
"
      end

      attribute 1690370 "LOCAL_VARIABLE"
	public type class_ref 942338 // ElementType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Local variable declaration 
"
      end

      attribute 1690498 "ANNOTATION_TYPE"
	public type class_ref 942338 // ElementType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Annotation type declaration 
"
      end

      attribute 1690626 "PACKAGE"
	public type class_ref 942338 // ElementType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Package declaration 
"
      end

      attribute 1690754 "TYPE_PARAMETER"
	public type class_ref 942338 // ElementType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Type parameter declaration

@since 1.8

"
      end

      attribute 1690882 "TYPE_USE"
	public type class_ref 942338 // ElementType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use of a type

@since 1.8
"
      end
    end

    class 942466 "IncompleteAnnotationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown to indicate that a program has attempted to access an element of
an annotation type that was added to the annotation type definition after
the annotation was compiled (or serialized).  This exception will not be
thrown if the new element has a default value.
This exception can be thrown by the {@linkplain
java.lang.reflect.AnnotatedElement API used to read annotations
reflectively}.

@author  Josh Bloch
@see     java.lang.reflect.AnnotatedElement
@since 1.5
"
      classrelation 3178114 // <generalisation>
	relation 3178114 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3178114 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 1691010 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8445097402741811912L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3178242 // annotationType (<unidirectional association>)
	relation 3178242 --->
	  a role_name "annotationType" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends Annotation> ${name}${value};
"
	    classrelation_ref 3178242 // annotationType (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3178370 // elementName (<unidirectional association>)
	relation 3178370 --->
	  a role_name "elementName" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3178370 // elementName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7148546 "IncompleteAnnotationException"
	public explicit_return_type ""
	nparams 2
	  param inout name "annotationType" type class_ref 130818 // Class
	  param inout name "elementName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Annotation> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an IncompleteAnnotationException to indicate that
the named element was missing from the specified annotation type.

@param annotationType the Class object for the annotation type
@param elementName the name of the missing element
@throws NullPointerException if either parameter is {@code null}
"
      end

      operation 7148674 "annotationType"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Annotation> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Class object for the annotation type with the
missing element.

@return the Class object for the annotation type with the
    missing element
"
      end

      operation 7148802 "elementName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the missing element.

@return the name of the missing element
"
      end
    end

    class 942594 "Inherited"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION_TYPE)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Indicates that an annotation type is automatically inherited.  If
an Inherited meta-annotation is present on an annotation type
declaration, and the user queries the annotation type on a class
declaration, and the class declaration has no annotation for this type,
then the class's superclass will automatically be queried for the
annotation type.  This process will be repeated until an annotation for this
type is found, or the top of the class hierarchy (Object)
is reached.  If no superclass has an annotation for this type, then
the query will indicate that the class in question has no such annotation.

<p>Note that this meta-annotation type has no effect if the annotated
type is used to annotate anything other than a class.  Note also
that this meta-annotation only causes annotations to be inherited
from superclasses; annotations on implemented interfaces have no
effect.

@author  Joshua Bloch
@since 1.5
@jls 9.6.3.3 @Inherited
"
    end

    class 942722 "Native"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Documented
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.SOURCE)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Indicates that a field defining a constant value may be referenced
from native code.

The annotation may be used as a hint by tools that generate native
header files to determine whether a header file is required, and
if so, what declarations it should contain.

@since 1.8
"
    end

    class 942850 "Repeatable"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION_TYPE)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The annotation type {@code java.lang.annotation.Repeatable} is
used to indicate that the annotation type whose declaration it
(meta-)annotates is <em>repeatable</em>. The value of
{@code @Repeatable} indicates the <em>containing annotation
type</em> for the repeatable annotation type.

@since 1.8
@jls 9.6 Annotation Types
@jls 9.7 Annotations
"
      operation 7148930 "value"
	public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Annotation> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates the <em>containing annotation type</em> for the
repeatable annotation type.
@return the containing annotation type
"
      end
    end

    class 942978 "Retention"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION_TYPE)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Indicates how long annotations with the annotated type are to
be retained.  If no Retention annotation is present on
an annotation type declaration, the retention policy defaults to
{@code RetentionPolicy.CLASS}.

<p>A Retention meta-annotation has effect only if the
meta-annotated type is used directly for annotation.  It has no
effect if the meta-annotated type is used as a member type in
another annotation type.

@author  Joshua Bloch
@since 1.5
@jls 9.6.3.2 @Retention
"
      operation 7149058 "value"
	public return_type class_ref 943106 // RetentionPolicy
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the retention policy.
@return the retention policy
"
      end
    end

    class 943106 "RetentionPolicy"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Annotation retention policy.  The constants of this enumerated type
describe the various policies for retaining annotations.  They are used
in conjunction with the {@link Retention} meta-annotation type to specify
how long annotations are to be retained.

@author  Joshua Bloch
@since 1.5
"
      attribute 1691138 "SOURCE"
	public type class_ref 943106 // RetentionPolicy
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Annotations are to be discarded by the compiler.

"
      end

      attribute 1691266 "CLASS"
	public type class_ref 943106 // RetentionPolicy
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Annotations are to be recorded in the class file by the compiler
but need not be retained by the VM at run time.  This is the default
behavior.

"
      end

      attribute 1691394 "RUNTIME"
	public type class_ref 943106 // RetentionPolicy
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Annotations are to be recorded in the class file by the compiler and
retained by the VM at run time, so they may be read reflectively.

@see java.lang.reflect.AnnotatedElement
"
      end
    end

    class 943234 "Target"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION_TYPE)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Indicates the contexts in which an annotation type is applicable. The
declaration contexts and type contexts in which an annotation type may be
applicable are specified in JLS 9.6.4.1, and denoted in source code by enum
constants of {@link ElementType java.lang.annotation.ElementType}.

<p>If an {@code @Target} meta-annotation is not present on an annotation type
{@code T} , then an annotation of type {@code T} may be written as a
modifier for any declaration except a type parameter declaration.

<p>If an {@code @Target} meta-annotation is present, the compiler will enforce
the usage restrictions indicated by {@code ElementType}
enum constants, in line with JLS 9.7.4.

<p>For example, this {@code @Target} meta-annotation indicates that the
declared type is itself a meta-annotation type.  It can only be used on
annotation type declarations:
<pre>
   &#064;Target(ElementType.ANNOTATION_TYPE)
   public &#064;interface MetaAnnotationType {
       ...
   }
</pre>

<p>This {@code @Target} meta-annotation indicates that the declared type is
intended solely for use as a member type in complex annotation type
declarations.  It cannot be used to annotate anything directly:
<pre>
   &#064;Target({})
   public &#064;interface MemberType {
       ...
   }
</pre>

<p>It is a compile-time error for a single {@code ElementType} constant to
appear more than once in an {@code @Target} annotation.  For example, the
following {@code @Target} meta-annotation is illegal:
<pre>
   &#064;Target({ElementType.FIELD, ElementType.METHOD, ElementType.FIELD})
   public &#064;interface Bogus {
       ...
   }
</pre>

@since 1.5
@jls 9.6.4.1 @Target
@jls 9.7.4 Where Annotations May Appear
"
      operation 7149186 "value"
	public return_type class_ref 942338 // ElementType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of the kinds of elements an annotation type
can be applied to.
@return an array of the kinds of elements an annotation type
can be applied to
"
      end
    end
  end

  deploymentview 166914 "annotation"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 686594 "Annotation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 494850 // Annotation
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 686722 "AnnotationFormatError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 941954 // AnnotationFormatError
      end
      comment "Copyright (c) 2004, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 686850 "AnnotationTypeMismatchException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Method;
${definition}"
      associated_elems
	class_ref 942082 // AnnotationTypeMismatchException
      end
      comment "Copyright (c) 2003, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 686978 "Documented"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 942210 // Documented
      end
      comment "Copyright (c) 2003, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 687106 "ElementType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 942338 // ElementType
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 687234 "IncompleteAnnotationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 942466 // IncompleteAnnotationException
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 687362 "Inherited"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 942594 // Inherited
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 687490 "Native"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 942722 // Native
      end
      comment "Copyright (c) 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 687618 "Repeatable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 942850 // Repeatable
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 687746 "Retention"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 942978 // Retention
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 687874 "RetentionPolicy"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 943106 // RetentionPolicy
      end
      comment "Copyright (c) 2003, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 688002 "Target"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 943234 // Target
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
