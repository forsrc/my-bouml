class HeapShortBufferR
!!!7763074.java!!!	HeapShortBufferR(in cap : int, in lim : int)
            // package-private







        super(cap, lim);
        this.isReadOnly = true;

!!!7763202.java!!!	HeapShortBufferR(inout buf : short [[]], in off : int, in len : int)
 // package-private







        super(buf, off, len);
        this.isReadOnly = true;

!!!7763330.java!!!	HeapShortBufferR(inout buf : short [[]], in mark : int, in pos : int, in lim : int, in cap : int, in off : int)







        super(buf, mark, pos, lim, cap, off);
        this.isReadOnly = true;

!!!7763458.java!!!	slice() : ShortBuffer
        return new HeapShortBufferR(hb,
                                        -1,
                                        0,
                                        this.remaining(),
                                        this.remaining(),
                                        this.position() + offset);
!!!7763586.java!!!	duplicate() : ShortBuffer
        return new HeapShortBufferR(hb,
                                        this.markValue(),
                                        this.position(),
                                        this.limit(),
                                        this.capacity(),
                                        offset);
!!!7763714.java!!!	asReadOnlyBuffer() : ShortBuffer








        return duplicate();

!!!7763842.java!!!	isReadOnly() : boolean
        return true;
!!!7763970.java!!!	put(in x : short) : ShortBuffer




        throw new ReadOnlyBufferException();

!!!7764098.java!!!	put(in i : int, in x : short) : ShortBuffer




        throw new ReadOnlyBufferException();

!!!7764226.java!!!	put(inout src : short [[]], in offset : int, in length : int) : ShortBuffer








        throw new ReadOnlyBufferException();

!!!7764354.java!!!	put(inout src : ShortBuffer) : ShortBuffer























        throw new ReadOnlyBufferException();

!!!7764482.java!!!	compact() : ShortBuffer







        throw new ReadOnlyBufferException();

!!!7764610.java!!!	order() : ByteOrder
        return ByteOrder.nativeOrder();
