class RMIConnectorServer
!!!9978114.java!!!	RMIConnectorServer(inout url : JMXServiceURL, inout environment : Map)
        this(url, environment, (MBeanServer) null);
!!!9978242.java!!!	RMIConnectorServer(inout url : JMXServiceURL, inout environment : Map, inout mbeanServer : MBeanServer)
        this(url, environment, (RMIServerImpl) null, mbeanServer);
!!!9978370.java!!!	RMIConnectorServer(inout url : JMXServiceURL, inout environment : Map, inout rmiServerImpl : RMIServerImpl, inout mbeanServer : MBeanServer)
        super(mbeanServer);

        if (url == null) throw new
            IllegalArgumentException("Null JMXServiceURL");
        if (rmiServerImpl == null) {
            final String prt = url.getProtocol();
            if (prt == null || !(prt.equals("rmi") || prt.equals("iiop"))) {
                final String msg = "Invalid protocol type: " + prt;
                throw new MalformedURLException(msg);
            }
            final String urlPath = url.getURLPath();
            if (!urlPath.equals("")
                && !urlPath.equals("/")
                && !urlPath.startsWith("/jndi/")) {
                final String msg = "URL path must be empty or start with " +
                    "/jndi/";
                throw new MalformedURLException(msg);
            }
        }

        if (environment == null)
            this.attributes = Collections.emptyMap();
        else {
            EnvHelp.checkAttributes(environment);
            this.attributes = Collections.unmodifiableMap(environment);
        }

        this.address = url;
        this.rmiServerImpl = rmiServerImpl;
!!!9978498.java!!!	toJMXConnector(inout env : Map) : JMXConnector
        // The serialized for of rmiServerImpl is automatically
        // a RMI server stub.
        if (!isActive()) throw new
            IllegalStateException("Connector is not active");

        // Merge maps
        Map<String, Object> usemap = new HashMap<String, Object>(
                (this.attributes==null)?Collections.<String, Object>emptyMap():
                    this.attributes);

        if (env != null) {
            EnvHelp.checkAttributes(env);
            usemap.putAll(env);
        }

        usemap = EnvHelp.filterAttributes(usemap);

        final RMIServer stub=(RMIServer)rmiServerImpl.toStub();

        return new RMIConnector(stub, usemap);
!!!9978626.java!!!	start() : void
        final boolean tracing = logger.traceOn();

        if (state == STARTED) {
            if (tracing) logger.trace("start", "already started");
            return;
        } else if (state == STOPPED) {
            if (tracing) logger.trace("start", "already stopped");
            throw new IOException("The server has been stopped.");
        }

        if (getMBeanServer() == null)
            throw new IllegalStateException("This connector server is not " +
                                            "attached to an MBean server");

        // Check the internal access file property to see
        // if an MBeanServerForwarder is to be provided
        //
        if (attributes != null) {
            // Check if access file property is specified
            //
            String accessFile =
                (String) attributes.get("jmx.remote.x.access.file");
            if (accessFile != null) {
                // Access file property specified, create an instance
                // of the MBeanServerFileAccessController class
                //
                MBeanServerForwarder mbsf;
                try {
                    mbsf = new MBeanServerFileAccessController(accessFile);
                } catch (IOException e) {
                    throw EnvHelp.initCause(
                        new IllegalArgumentException(e.getMessage()), e);
                }
                // Set the MBeanServerForwarder
                //
                setMBeanServerForwarder(mbsf);
            }
        }

        try {
            if (tracing) logger.trace("start", "setting default class loader");
            defaultClassLoader = EnvHelp.resolveServerClassLoader(
                    attributes, getMBeanServer());
        } catch (InstanceNotFoundException infc) {
            IllegalArgumentException x = new
                IllegalArgumentException("ClassLoader not found: "+infc);
            throw EnvHelp.initCause(x,infc);
        }

        if (tracing) logger.trace("start", "setting RMIServer object");
        final RMIServerImpl rmiServer;

        if (rmiServerImpl != null)
            rmiServer = rmiServerImpl;
        else
            rmiServer = newServer();

        rmiServer.setMBeanServer(getMBeanServer());
        rmiServer.setDefaultClassLoader(defaultClassLoader);
        rmiServer.setRMIConnectorServer(this);
        rmiServer.export();

        try {
            if (tracing) logger.trace("start", "getting RMIServer object to export");
            final RMIServer objref = objectToBind(rmiServer, attributes);

            if (address != null && address.getURLPath().startsWith("/jndi/")) {
                final String jndiUrl = address.getURLPath().substring(6);

                if (tracing)
                    logger.trace("start", "Using external directory: " + jndiUrl);

                String stringBoolean = (String) attributes.get(JNDI_REBIND_ATTRIBUTE);
                final boolean rebind = EnvHelp.computeBooleanFromString( stringBoolean );

                if (tracing)
                    logger.trace("start", JNDI_REBIND_ATTRIBUTE + "=" + rebind);

                try {
                    if (tracing) logger.trace("start", "binding to " + jndiUrl);

                    final Hashtable<?, ?> usemap = EnvHelp.mapToHashtable(attributes);

                    bind(jndiUrl, usemap, objref, rebind);

                    boundJndiUrl = jndiUrl;
                } catch (NamingException e) {
                    // fit e in the nested exception if we are on 1.4
                    throw newIOException("Cannot bind to URL ["+jndiUrl+"]: "
                                         + e, e);
                }
            } else {
                // if jndiURL is null, we must encode the stub into the URL.
                if (tracing) logger.trace("start", "Encoding URL");

                encodeStubInAddress(objref, attributes);

                if (tracing) logger.trace("start", "Encoded URL: " + this.address);
            }
        } catch (Exception e) {
            try {
                rmiServer.close();
            } catch (Exception x) {
                // OK: we are already throwing another exception
            }
            if (e instanceof RuntimeException)
                throw (RuntimeException) e;
            else if (e instanceof IOException)
                throw (IOException) e;
            else
                throw newIOException("Got unexpected exception while " +
                                     "starting the connector server: "
                                     + e, e);
        }

        rmiServerImpl = rmiServer;

        synchronized(openedServers) {
            openedServers.add(this);
        }

        state = STARTED;

        if (tracing) {
            logger.trace("start", "Connector Server Address = " + address);
            logger.trace("start", "started.");
        }
!!!9978754.java!!!	stop() : void
        final boolean tracing = logger.traceOn();

        synchronized (this) {
            if (state == STOPPED) {
                if (tracing) logger.trace("stop","already stopped.");
                return;
            } else if (state == CREATED) {
                if (tracing) logger.trace("stop","not started yet.");
            }

            if (tracing) logger.trace("stop", "stopping.");
            state = STOPPED;
        }

        synchronized(openedServers) {
            openedServers.remove(this);
        }

        IOException exception = null;

        // rmiServerImpl can be null if stop() called without start()
        if (rmiServerImpl != null) {
            try {
                if (tracing) logger.trace("stop", "closing RMI server.");
                rmiServerImpl.close();
            } catch (IOException e) {
                if (tracing) logger.trace("stop", "failed to close RMI server: " + e);
                if (logger.debugOn()) logger.debug("stop",e);
                exception = e;
            }
        }

        if (boundJndiUrl != null) {
            try {
                if (tracing)
                    logger.trace("stop",
                          "unbind from external directory: " + boundJndiUrl);

                final Hashtable<?, ?> usemap = EnvHelp.mapToHashtable(attributes);

                InitialContext ctx =
                    new InitialContext(usemap);

                ctx.unbind(boundJndiUrl);

                ctx.close();
            } catch (NamingException e) {
                if (tracing) logger.trace("stop", "failed to unbind RMI server: "+e);
                if (logger.debugOn()) logger.debug("stop",e);
                // fit e in as the nested exception if we are on 1.4
                if (exception == null)
                    exception = newIOException("Cannot bind to URL: " + e, e);
            }
        }

        if (exception != null) throw exception;

        if (tracing) logger.trace("stop", "stopped");
!!!9978882.java!!!	isActive() : boolean
        return (state == STARTED);
!!!9979010.java!!!	getAddress() : JMXServiceURL
        if (!isActive())
            return null;
        return address;
!!!9979138.java!!!	getAttributes() : Map
        Map<String, ?> map = EnvHelp.filterAttributes(attributes);
        return Collections.unmodifiableMap(map);
!!!9979266.java!!!	setMBeanServerForwarder(inout mbsf : MBeanServerForwarder) : void
        super.setMBeanServerForwarder(mbsf);
        if (rmiServerImpl != null)
            rmiServerImpl.setMBeanServer(getMBeanServer());
!!!9979394.java!!!	connectionOpened(inout connectionId : String, inout message : String, inout userData : Object) : void
        super.connectionOpened(connectionId, message, userData);
!!!9979522.java!!!	connectionClosed(inout connectionId : String, inout message : String, inout userData : Object) : void
        super.connectionClosed(connectionId, message, userData);
!!!9979650.java!!!	connectionFailed(inout connectionId : String, inout message : String, inout userData : Object) : void
        super.connectionFailed(connectionId, message, userData);
!!!9979778.java!!!	bind(inout jndiUrl : String, inout attributes : Hashtable, inout rmiServer : RMIServer, inout rebind : boolean) : void
        // if jndiURL is not null, we nust bind the stub to a
        // directory.
        InitialContext ctx =
            new InitialContext(attributes);

        if (rebind)
            ctx.rebind(jndiUrl, rmiServer);
        else
            ctx.bind(jndiUrl, rmiServer);
        ctx.close();
!!!9979906.java!!!	newServer() : RMIServerImpl
        final boolean iiop = isIiopURL(address,true);
        final int port;
        if (address == null)
            port = 0;
        else
            port = address.getPort();
        if (iiop)
            return newIIOPServer(attributes);
        else
            return newJRMPServer(attributes, port);
!!!9980034.java!!!	encodeStubInAddress(inout rmiServer : RMIServer, inout attributes : Map) : void

        final String protocol, host;
        final int port;

        if (address == null) {
            if (IIOPHelper.isStub(rmiServer))
                protocol = "iiop";
            else
                protocol = "rmi";
            host = null; // will default to local host name
            port = 0;
        } else {
            protocol = address.getProtocol();
            host = (address.getHost().equals("")) ? null : address.getHost();
            port = address.getPort();
        }

        final String urlPath = encodeStub(rmiServer, attributes);

        address = new JMXServiceURL(protocol, host, port, urlPath);
!!!9980162.java!!!	isIiopURL(inout directoryURL : JMXServiceURL, inout strict : boolean) : boolean
        String protocol = directoryURL.getProtocol();
        if (protocol.equals("rmi"))
            return false;
        else if (protocol.equals("iiop"))
            return true;
        else if (strict) {

            throw new MalformedURLException("URL must have protocol " +
                                            "\"rmi\" or \"iiop\": \"" +
                                            protocol + "\"");
        }
        return false;
!!!9980290.java!!!	encodeStub(inout rmiServer : RMIServer, inout env : Map) : String
        if (IIOPHelper.isStub(rmiServer))
            return "/ior/" + encodeIIOPStub(rmiServer, env);
        else
            return "/stub/" + encodeJRMPStub(rmiServer, env);
!!!9980418.java!!!	encodeJRMPStub(inout rmiServer : RMIServer, inout env : Map) : String
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        ObjectOutputStream oout = new ObjectOutputStream(bout);
        oout.writeObject(rmiServer);
        oout.close();
        byte[] bytes = bout.toByteArray();
        return byteArrayToBase64(bytes);
!!!9980546.java!!!	encodeIIOPStub(inout rmiServer : RMIServer, inout env : Map) : String
        try {
            Object orb = IIOPHelper.getOrb(rmiServer);
            return IIOPHelper.objectToString(orb, rmiServer);
        } catch (RuntimeException x) {
            throw newIOException(x.getMessage(), x);
        }
!!!9980674.java!!!	objectToBind(inout rmiServer : RMIServerImpl, inout env : Map) : RMIServer
        return RMIConnector.
            connectStub((RMIServer)rmiServer.toStub(),env);
!!!9980802.java!!!	newJRMPServer(inout env : Map, in port : int) : RMIServerImpl
        RMIClientSocketFactory csf = (RMIClientSocketFactory)
            env.get(RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE);
        RMIServerSocketFactory ssf = (RMIServerSocketFactory)
            env.get(RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE);
        return new RMIJRMPServerImpl(port, csf, ssf, env);
!!!9980930.java!!!	newIIOPServer(inout env : Map) : RMIServerImpl
        return new RMIIIOPServerImpl(env);
!!!9981058.java!!!	byteArrayToBase64(inout a : byte [[]]) : String
        int aLen = a.length;
        int numFullGroups = aLen/3;
        int numBytesInPartialGroup = aLen - 3*numFullGroups;
        int resultLen = 4*((aLen + 2)/3);
        final StringBuilder result = new StringBuilder(resultLen);

        // Translate all full groups from byte array elements to Base64
        int inCursor = 0;
        for (int i=0; i<numFullGroups; i++) {
            int byte0 = a[inCursor++] & 0xff;
            int byte1 = a[inCursor++] & 0xff;
            int byte2 = a[inCursor++] & 0xff;
            result.append(intToAlpha[byte0 >> 2]);
            result.append(intToAlpha[(byte0 << 4)&0x3f | (byte1 >> 4)]);
            result.append(intToAlpha[(byte1 << 2)&0x3f | (byte2 >> 6)]);
            result.append(intToAlpha[byte2 & 0x3f]);
        }

        // Translate partial group if present
        if (numBytesInPartialGroup != 0) {
            int byte0 = a[inCursor++] & 0xff;
            result.append(intToAlpha[byte0 >> 2]);
            if (numBytesInPartialGroup == 1) {
                result.append(intToAlpha[(byte0 << 4) & 0x3f]);
                result.append("==");
            } else {
                // assert numBytesInPartialGroup == 2;
                int byte1 = a[inCursor++] & 0xff;
                result.append(intToAlpha[(byte0 << 4)&0x3f | (byte1 >> 4)]);
                result.append(intToAlpha[(byte1 << 2)&0x3f]);
                result.append('=');
            }
        }
        // assert inCursor == a.length;
        // assert result.length() == resultLen;
        return result.toString();
!!!9981186.java!!!	newIOException(inout message : String, inout cause : Throwable) : IOException
        final IOException x = new IOException(message);
        return EnvHelp.initCause(x,cause);
