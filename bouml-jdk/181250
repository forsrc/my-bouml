format 222
"file" // jdk1.8::java::nio::file
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/nio/file/"
  java_package "java.nio.file"
  classview 173954 "file"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 923650 "Path"
      visibility public stereotype "interface"
      nactuals 2
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      actual class class_ref 184322 // Iterable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that may be used to locate a file in a file system. It will
typically represent a system dependent file path.

<p> A {@code Path} represents a path that is hierarchical and composed of a
sequence of directory and file name elements separated by a special separator
or delimiter. A <em>root component</em>, that identifies a file system
hierarchy, may also be present. The name element that is <em>farthest</em>
from the root of the directory hierarchy is the name of a file or directory.
The other name elements are directory names. A {@code Path} can represent a
root, a root and a sequence of names, or simply one or more name elements.
A {@code Path} is considered to be an <i>empty path</i> if it consists
solely of one name element that is empty. Accessing a file using an
<i>empty path</i> is equivalent to accessing the default directory of the
file system. {@code Path} defines the {@link #getFileName() getFileName},
{@link #getParent getParent}, {@link #getRoot getRoot}, and {@link #subpath
subpath} methods to access the path components or a subsequence of its name
elements.

<p> In addition to accessing the components of a path, a {@code Path} also
defines the {@link #resolve(Path) resolve} and {@link #resolveSibling(Path)
resolveSibling} methods to combine paths. The {@link #relativize relativize}
method that can be used to construct a relative path between two paths.
Paths can be {@link #compareTo compared}, and tested against each other using
the {@link #startsWith startsWith} and {@link #endsWith endsWith} methods.

<p> This interface extends {@link Watchable} interface so that a directory
located by a path can be {@link #register registered} with a {@link
WatchService} and entries in the directory watched. </p>

<p> <b>WARNING:</b> This interface is only intended to be implemented by
those developing custom file system implementations. Methods may be added to
this interface in future releases. </p>

<h2>Accessing Files</h2>
<p> Paths may be used with the {@link Files} class to operate on files,
directories, and other types of files. For example, suppose we want a {@link
java.io.BufferedReader} to read text from a file \"{@code access.log}\". The
file is located in a directory \"{@code logs}\" relative to the current working
directory and is UTF-8 encoded.
<pre>
    Path path = FileSystems.getDefault().getPath(\"logs\", \"access.log\");
    BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8);
</pre>

<a name=\"interop\"></a><h2>Interoperability</h2>
<p> Paths associated with the default {@link
java.nio.file.spi.FileSystemProvider provider} are generally interoperable
with the {@link java.io.File java.io.File} class. Paths created by other
providers are unlikely to be interoperable with the abstract path names
represented by {@code java.io.File}. The {@link java.io.File#toPath toPath}
method may be used to obtain a {@code Path} from the abstract path name
represented by a {@code java.io.File} object. The resulting {@code Path} can
be used to operate on the same file as the {@code java.io.File} object. In
addition, the {@link #toFile toFile} method is useful to construct a {@code
File} from the {@code String} representation of a {@code Path}.

<h2>Concurrency</h2>
<p> Implementations of this interface are immutable and safe for use by
multiple concurrent threads.

@since 1.7
@see Paths
"
      classrelation 3314690 // <realization>
	relation 3314690 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3314690 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3314818 // <realization>
	relation 3314818 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3314818 // <realization>
	  b parent class_ref 184322 // Iterable
      end

      classrelation 3314946 // <generalisation>
	relation 3314946 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3314946 // <generalisation>
	  b parent class_ref 999938 // Watchable
      end

      operation 7848322 "getFileSystem"
	public return_type class_ref 996738 // FileSystem
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the file system that created this object.

@return  the file system that created this object
"
      end

      operation 7848450 "isAbsolute"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this path is absolute.

<p> An absolute path is complete in that it doesn't need to be combined
with other path information in order to locate a file.

@return  {@code true} if, and only if, this path is absolute
"
      end

      operation 7848578 "getRoot"
	public return_type class_ref 923650 // Path
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root component of this path as a {@code Path} object,
or {@code null} if this path does not have a root component.

@return  a path representing the root component of this path,
         or {@code null}
"
      end

      operation 7848706 "getFileName"
	public return_type class_ref 923650 // Path
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the file or directory denoted by this path as a
{@code Path} object. The file name is the <em>farthest</em> element from
the root in the directory hierarchy.

@return  a path representing the name of the file or directory, or
         {@code null} if this path has zero elements
"
      end

      operation 7848834 "getParent"
	public return_type class_ref 923650 // Path
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <em>parent path</em>, or {@code null} if this path does not
have a parent.

<p> The parent of this path object consists of this path's root
component, if any, and each element in the path except for the
<em>farthest</em> from the root in the directory hierarchy. This method
does not access the file system; the path or its parent may not exist.
Furthermore, this method does not eliminate special names such as \".\"
and \"..\" that may be used in some implementations. On UNIX for example,
the parent of \"{@code /a/b/c}\" is \"{@code /a/b}\", and the parent of
{@code \"x/y/.}\" is \"{@code x/y}\". This method may be used with the {@link
#normalize normalize} method, to eliminate redundant names, for cases where
<em>shell-like</em> navigation is required.

<p> If this path has one or more elements, and no root component, then
this method is equivalent to evaluating the expression:
<blockquote><pre>
subpath(0,&nbsp;getNameCount()-1);
</pre></blockquote>

@return  a path representing the path's parent
"
      end

      operation 7848962 "getNameCount"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of name elements in the path.

@return  the number of elements in the path, or {@code 0} if this path
         only represents a root component
"
      end

      operation 7849090 "getName"
	public return_type class_ref 923650 // Path
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a name element of this path as a {@code Path} object.

<p> The {@code index} parameter is the index of the name element to return.
The element that is <em>closest</em> to the root in the directory hierarchy
has index {@code 0}. The element that is <em>farthest</em> from the root
has index {@link #getNameCount count}{@code -1}.

@param   index
         the index of the element

@return  the name element

@throws  IllegalArgumentException
         if {@code index} is negative, {@code index} is greater than or
         equal to the number of elements, or this path has zero name
         elements
"
      end

      operation 7849218 "subpath"
	public return_type class_ref 923650 // Path
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a relative {@code Path} that is a subsequence of the name
elements of this path.

<p> The {@code beginIndex} and {@code endIndex} parameters specify the
subsequence of name elements. The name that is <em>closest</em> to the root
in the directory hierarchy has index {@code 0}. The name that is
<em>farthest</em> from the root has index {@link #getNameCount
count}{@code -1}. The returned {@code Path} object has the name elements
that begin at {@code beginIndex} and extend to the element at index {@code
endIndex-1}.

@param   beginIndex
         the index of the first element, inclusive
@param   endIndex
         the index of the last element, exclusive

@return  a new {@code Path} object that is a subsequence of the name
         elements in this {@code Path}

@throws  IllegalArgumentException
         if {@code beginIndex} is negative, or greater than or equal to
         the number of elements. If {@code endIndex} is less than or
         equal to {@code beginIndex}, or larger than the number of elements.
"
      end

      operation 7849346 "startsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 923650 // Path
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this path starts with the given path.

<p> This path <em>starts</em> with the given path if this path's root
component <em>starts</em> with the root component of the given path,
and this path starts with the same name elements as the given path.
If the given path has more name elements than this path then {@code false}
is returned.

<p> Whether or not the root component of this path starts with the root
component of the given path is file system specific. If this path does
not have a root component and the given path has a root component then
this path does not start with the given path.

<p> If the given path is associated with a different {@code FileSystem}
to this path then {@code false} is returned.

@param   other
         the given path

@return  {@code true} if this path starts with the given path; otherwise
         {@code false}
"
      end

      operation 7849474 "startsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this path starts with a {@code Path}, constructed by converting
the given path string, in exactly the manner specified by the {@link
#startsWith(Path) startsWith(Path)} method. On UNIX for example, the path
\"{@code foo/bar}\" starts with \"{@code foo}\" and \"{@code foo/bar}\". It
does not start with \"{@code f}\" or \"{@code fo}\".

@param   other
         the given path string

@return  {@code true} if this path starts with the given path; otherwise
         {@code false}

@throws  InvalidPathException
         If the path string cannot be converted to a Path.
"
      end

      operation 7849602 "endsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 923650 // Path
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this path ends with the given path.

<p> If the given path has <em>N</em> elements, and no root component,
and this path has <em>N</em> or more elements, then this path ends with
the given path if the last <em>N</em> elements of each path, starting at
the element farthest from the root, are equal.

<p> If the given path has a root component then this path ends with the
given path if the root component of this path <em>ends with</em> the root
component of the given path, and the corresponding elements of both paths
are equal. Whether or not the root component of this path ends with the
root component of the given path is file system specific. If this path
does not have a root component and the given path has a root component
then this path does not end with the given path.

<p> If the given path is associated with a different {@code FileSystem}
to this path then {@code false} is returned.

@param   other
         the given path

@return  {@code true} if this path ends with the given path; otherwise
         {@code false}
"
      end

      operation 7849730 "endsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this path ends with a {@code Path}, constructed by converting
the given path string, in exactly the manner specified by the {@link
#endsWith(Path) endsWith(Path)} method. On UNIX for example, the path
\"{@code foo/bar}\" ends with \"{@code foo/bar}\" and \"{@code bar}\". It does
not end with \"{@code r}\" or \"{@code /bar}\". Note that trailing separators
are not taken into account, and so invoking this method on the {@code
Path}\"{@code foo/bar}\" with the {@code String} \"{@code bar/}\" returns
{@code true}.

@param   other
         the given path string

@return  {@code true} if this path ends with the given path; otherwise
         {@code false}

@throws  InvalidPathException
         If the path string cannot be converted to a Path.
"
      end

      operation 7849858 "normalize"
	public return_type class_ref 923650 // Path
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a path that is this path with redundant name elements eliminated.

<p> The precise definition of this method is implementation dependent but
in general it derives from this path, a path that does not contain
<em>redundant</em> name elements. In many file systems, the \"{@code .}\"
and \"{@code ..}\" are special names used to indicate the current directory
and parent directory. In such file systems all occurrences of \"{@code .}\"
are considered redundant. If a \"{@code ..}\" is preceded by a
non-\"{@code ..}\" name then both names are considered redundant (the
process to identify such names is repeated until it is no longer
applicable).

<p> This method does not access the file system; the path may not locate
a file that exists. Eliminating \"{@code ..}\" and a preceding name from a
path may result in the path that locates a different file than the original
path. This can arise when the preceding name is a symbolic link.

@return  the resulting path or this path if it does not contain
         redundant name elements; an empty path is returned if this path
         does have a root component and all name elements are redundant

@see #getParent
@see #toRealPath
"
      end

      operation 7849986 "resolve"
	public return_type class_ref 923650 // Path
	nparams 1
	  param inout name "other" type class_ref 923650 // Path
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- resolution and relativization --

Resolve the given path against this path.

<p> If the {@code other} parameter is an {@link #isAbsolute() absolute}
path then this method trivially returns {@code other}. If {@code other}
is an <i>empty path</i> then this method trivially returns this path.
Otherwise this method considers this path to be a directory and resolves
the given path against this path. In the simplest case, the given path
does not have a {@link #getRoot root} component, in which case this method
<em>joins</em> the given path to this path and returns a resulting path
that {@link #endsWith ends} with the given path. Where the given path has
a root component then resolution is highly implementation dependent and
therefore unspecified.

@param   other
         the path to resolve against this path

@return  the resulting path

@see #relativize
"
      end

      operation 7850114 "resolve"
	public return_type class_ref 923650 // Path
	nparams 1
	  param inout name "other" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a given path string to a {@code Path} and resolves it against
this {@code Path} in exactly the manner specified by the {@link
#resolve(Path) resolve} method. For example, suppose that the name
separator is \"{@code /}\" and a path represents \"{@code foo/bar}\", then
invoking this method with the path string \"{@code gus}\" will result in
the {@code Path} \"{@code foo/bar/gus}\".

@param   other
         the path string to resolve against this path

@return  the resulting path

@throws  InvalidPathException
         if the path string cannot be converted to a Path.

@see FileSystem#getPath
"
      end

      operation 7850242 "resolveSibling"
	public return_type class_ref 923650 // Path
	nparams 1
	  param inout name "other" type class_ref 923650 // Path
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves the given path against this path's {@link #getParent parent}
path. This is useful where a file name needs to be <i>replaced</i> with
another file name. For example, suppose that the name separator is
\"{@code /}\" and a path represents \"{@code dir1/dir2/foo}\", then invoking
this method with the {@code Path} \"{@code bar}\" will result in the {@code
Path} \"{@code dir1/dir2/bar}\". If this path does not have a parent path,
or {@code other} is {@link #isAbsolute() absolute}, then this method
returns {@code other}. If {@code other} is an empty path then this method
returns this path's parent, or where this path doesn't have a parent, the
empty path.

@param   other
         the path to resolve against this path's parent

@return  the resulting path

@see #resolve(Path)
"
      end

      operation 7850370 "resolveSibling"
	public return_type class_ref 923650 // Path
	nparams 1
	  param inout name "other" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a given path string to a {@code Path} and resolves it against
this path's {@link #getParent parent} path in exactly the manner
specified by the {@link #resolveSibling(Path) resolveSibling} method.

@param   other
         the path string to resolve against this path's parent

@return  the resulting path

@throws  InvalidPathException
         if the path string cannot be converted to a Path.

@see FileSystem#getPath
"
      end

      operation 7850498 "relativize"
	public return_type class_ref 923650 // Path
	nparams 1
	  param inout name "other" type class_ref 923650 // Path
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a relative path between this path and a given path.

<p> Relativization is the inverse of {@link #resolve(Path) resolution}.
This method attempts to construct a {@link #isAbsolute relative} path
that when {@link #resolve(Path) resolved} against this path, yields a
path that locates the same file as the given path. For example, on UNIX,
if this path is {@code \"/a/b\"} and the given path is {@code \"/a/b/c/d\"}
then the resulting relative path would be {@code \"c/d\"}. Where this
path and the given path do not have a {@link #getRoot root} component,
then a relative path can be constructed. A relative path cannot be
constructed if only one of the paths have a root component. Where both
paths have a root component then it is implementation dependent if a
relative path can be constructed. If this path and the given path are
{@link #equals equal} then an <i>empty path</i> is returned.

<p> For any two {@link #normalize normalized} paths <i>p</i> and
<i>q</i>, where <i>q</i> does not have a root component,
<blockquote>
  <i>p</i><tt>.relativize(</tt><i>p</i><tt>.resolve(</tt><i>q</i><tt>)).equals(</tt><i>q</i><tt>)</tt>
</blockquote>

<p> When symbolic links are supported, then whether the resulting path,
when resolved against this path, yields a path that can be used to locate
the {@link Files#isSameFile same} file as {@code other} is implementation
dependent. For example, if this path is  {@code \"/a/b\"} and the given
path is {@code \"/a/x\"} then the resulting relative path may be {@code
\"../x\"}. If {@code \"b\"} is a symbolic link then is implementation
dependent if {@code \"a/b/../x\"} would locate the same file as {@code \"/a/x\"}.

@param   other
         the path to relativize against this path

@return  the resulting relative path, or an empty path if both paths are
         equal

@throws  IllegalArgumentException
         if {@code other} is not a {@code Path} that can be relativized
         against this path
"
      end

      operation 7850626 "toUri"
	public return_type class_ref 783874 // URI
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a URI to represent this path.

<p> This method constructs an absolute {@link URI} with a {@link
URI#getScheme() scheme} equal to the URI scheme that identifies the
provider. The exact form of the scheme specific part is highly provider
dependent.

<p> In the case of the default provider, the URI is hierarchical with
a {@link URI#getPath() path} component that is absolute. The query and
fragment components are undefined. Whether the authority component is
defined or not is implementation dependent. There is no guarantee that
the {@code URI} may be used to construct a {@link java.io.File java.io.File}.
In particular, if this path represents a Universal Naming Convention (UNC)
path, then the UNC server name may be encoded in the authority component
of the resulting URI. In the case of the default provider, and the file
exists, and it can be determined that the file is a directory, then the
resulting {@code URI} will end with a slash.

<p> The default provider provides a similar <em>round-trip</em> guarantee
to the {@link java.io.File} class. For a given {@code Path} <i>p</i> it
is guaranteed that
<blockquote><tt>
{@link Paths#get(URI) Paths.get}(</tt><i>p</i><tt>.toUri()).equals(</tt><i>p</i>
<tt>.{@link #toAbsolutePath() toAbsolutePath}())</tt>
</blockquote>
so long as the original {@code Path}, the {@code URI}, and the new {@code
Path} are all created in (possibly different invocations of) the same
Java virtual machine. Whether other providers make any guarantees is
provider specific and therefore unspecified.

<p> When a file system is constructed to access the contents of a file
as a file system then it is highly implementation specific if the returned
URI represents the given path in the file system or it represents a
<em>compound</em> URI that encodes the URI of the enclosing file system.
A format for compound URIs is not defined in this release; such a scheme
may be added in a future release.

@return  the URI representing this path

@throws  java.io.IOError
         if an I/O error occurs obtaining the absolute path, or where a
         file system is constructed to access the contents of a file as
         a file system, and the URI of the enclosing file system cannot be
         obtained

@throws  SecurityException
         In the case of the default provider, and a security manager
         is installed, the {@link #toAbsolutePath toAbsolutePath} method
         throws a security exception.
"
      end

      operation 7850754 "toAbsolutePath"
	public return_type class_ref 923650 // Path
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Path} object representing the absolute path of this
path.

<p> If this path is already {@link Path#isAbsolute absolute} then this
method simply returns this path. Otherwise, this method resolves the path
in an implementation dependent manner, typically by resolving the path
against a file system default directory. Depending on the implementation,
this method may throw an I/O error if the file system is not accessible.

@return  a {@code Path} object representing the absolute path

@throws  java.io.IOError
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, a security manager
         is installed, and this path is not absolute, then the security
         manager's {@link SecurityManager#checkPropertyAccess(String)
         checkPropertyAccess} method is invoked to check access to the
         system property {@code user.dir}
"
      end

      operation 7850882 "toRealPath"
	public return_type class_ref 923650 // Path
	nparams 1
	  param inout name "" explicit_type "LinkOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <em>real</em> path of an existing file.

<p> The precise definition of this method is implementation dependent but
in general it derives from this path, an {@link #isAbsolute absolute}
path that locates the {@link Files#isSameFile same} file as this path, but
with name elements that represent the actual name of the directories
and the file. For example, where filename comparisons on a file system
are case insensitive then the name elements represent the names in their
actual case. Additionally, the resulting path has redundant name
elements removed.

<p> If this path is relative then its absolute path is first obtained,
as if by invoking the {@link #toAbsolutePath toAbsolutePath} method.

<p> The {@code options} array may be used to indicate how symbolic links
are handled. By default, symbolic links are resolved to their final
target. If the option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is
present then this method does not resolve symbolic links.

Some implementations allow special names such as \"{@code ..}\" to refer to
the parent directory. When deriving the <em>real path</em>, and a
\"{@code ..}\" (or equivalent) is preceded by a non-\"{@code ..}\" name then
an implementation will typically cause both names to be removed. When
not resolving symbolic links and the preceding name is a symbolic link
then the names are only removed if it guaranteed that the resulting path
will locate the same file as this path.

@param   options
         options indicating how symbolic links are handled

@return  an absolute path represent the <em>real</em> path of the file
         located by this object

@throws  IOException
         if the file does not exist or an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager
         is installed, its {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file, and where
         this path is not absolute, its {@link SecurityManager#checkPropertyAccess(String)
         checkPropertyAccess} method is invoked to check access to the
         system property {@code user.dir}
"
      end

      operation 7851010 "toFile"
	public return_type class_ref 131970 // File
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link File} object representing this path. Where this {@code
Path} is associated with the default provider, then this method is
equivalent to returning a {@code File} object constructed with the
{@code String} representation of this path.

<p> If this path was created by invoking the {@code File} {@link
File#toPath toPath} method then there is no guarantee that the {@code
File} object returned by this method is {@link #equals equal} to the
original {@code File}.

@return  a {@code File} object representing this path

@throws  UnsupportedOperationException
         if this {@code Path} is not associated with the default provider
"
      end

      operation 7851138 "register"
	public return_type class_ref 1000066 // WatchKey
	nparams 3
	  param inout name "watcher" type class_ref 997122 // WatchService
	  param inout name "events" type class_ref 1000322 // Kind
	multiplicity "[]"
	  param inout name "" explicit_type "WatchEvent.Modifier...modifiers"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?>[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " -- watchable --

Registers the file located by this path with a watch service.

<p> In this release, this path locates a directory that exists. The
directory is registered with the watch service so that entries in the
directory can be watched. The {@code events} parameter is the events to
register and may contain the following events:
<ul>
  <li>{@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE} -
      entry created or moved into the directory</li>
  <li>{@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE} -
       entry deleted or moved out of the directory</li>
  <li>{@link StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} -
       entry in directory was modified</li>
</ul>

<p> The {@link WatchEvent#context context} for these events is the
relative path between the directory located by this path, and the path
that locates the directory entry that is created, deleted, or modified.

<p> The set of events may include additional implementation specific
event that are not defined by the enum {@link StandardWatchEventKinds}

<p> The {@code modifiers} parameter specifies <em>modifiers</em> that
qualify how the directory is registered. This release does not define any
<em>standard</em> modifiers. It may contain implementation specific
modifiers.

<p> Where a file is registered with a watch service by means of a symbolic
link then it is implementation specific if the watch continues to depend
on the existence of the symbolic link after it is registered.

@param   watcher
         the watch service to which this object is to be registered
@param   events
         the events for which this object should be registered
@param   modifiers
         the modifiers, if any, that modify how the object is registered

@return  a key representing the registration of this object with the
         given watch service

@throws  UnsupportedOperationException
         if unsupported events or modifiers are specified
@throws  IllegalArgumentException
         if an invalid combination of events or modifiers is specified
@throws  ClosedWatchServiceException
         if the watch service is closed
@throws  NotDirectoryException
         if the file is registered to watch the entries in a directory
         and the file is not a directory  <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file.
"
      end

      operation 7851266 "register"
	public return_type class_ref 1000066 // WatchKey
	nparams 2
	  param inout name "watcher" type class_ref 997122 // WatchService
	  param inout name "events" explicit_type "WatchEvent.Kind<?>..."
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Registers the file located by this path with a watch service.

<p> An invocation of this method behaves in exactly the same way as the
invocation
<pre>
    watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);
</pre>

<p> <b>Usage Example:</b>
Suppose we wish to register a directory for entry create, delete, and modify
events:
<pre>
    Path dir = ...
    WatchService watcher = ...

    WatchKey key = dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
</pre>
@param   watcher
         The watch service to which this object is to be registered
@param   events
         The events for which this object should be registered

@return  A key representing the registration of this object with the
         given watch service

@throws  UnsupportedOperationException
         If unsupported events are specified
@throws  IllegalArgumentException
         If an invalid combination of events is specified
@throws  ClosedWatchServiceException
         If the watch service is closed
@throws  NotDirectoryException
         If the file is registered to watch the entries in a directory
         and the file is not a directory  <i>(optional specific exception)</i>
@throws  IOException
         If an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file.
"
      end

      operation 7851394 "iterator"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Path> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " -- Iterable --

Returns an iterator over the name elements of this path.

<p> The first element returned by the iterator represents the name
element that is closest to the root in the directory hierarchy, the
second element is the next closest, and so on. The last element returned
is the name of the file or directory denoted by this path. The {@link
#getRoot root} component, if present, is not returned by the iterator.

@return  an iterator over the name elements of this path.
"
      end

      operation 7851522 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 923650 // Path
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " -- compareTo/equals/hashCode --

Compares two abstract paths lexicographically. The ordering defined by
this method is provider specific, and in the case of the default
provider, platform specific. This method does not access the file system
and neither file is required to exist.

<p> This method may not be used to compare paths that are associated
with different file system providers.

@param   other  the path compared to this path.

@return  zero if the argument is {@link #equals equal} to this path, a
         value less than zero if this path is lexicographically less than
         the argument, or a value greater than zero if this path is
         lexicographically greater than the argument

@throws  ClassCastException
         if the paths are associated with different providers
"
      end

      operation 7851650 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests this path for equality with the given object.

<p> If the given object is not a Path, or is a Path associated with a
different {@code FileSystem}, then this method returns {@code false}.

<p> Whether or not two path are equal depends on the file system
implementation. In some cases the paths are compared without regard
to case, and others are case sensitive. This method does not access the
file system and the file is not required to exist. Where required, the
{@link Files#isSameFile isSameFile} method may be used to check if two
paths locate the same file.

<p> This method satisfies the general contract of the {@link
java.lang.Object#equals(Object) Object.equals} method. </p>

@param   other
         the object to which this object is to be compared

@return  {@code true} if, and only if, the given object is a {@code Path}
         that is identical to this {@code Path}
"
      end

      operation 7851778 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes a hash code for this path.

<p> The hash code is based upon the components of the path, and
satisfies the general contract of the {@link Object#hashCode
Object.hashCode} method.

@return  the hash-code value for this path
"
      end

      operation 7851906 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of this path.

<p> If this path was created by converting a path string using the
{@link FileSystem#getPath getPath} method then the path string returned
by this method may differ from the original String used to create the path.

<p> The returned path string uses the default name {@link
FileSystem#getSeparator separator} to separate names in the path.

@return  the string representation of this path
"
      end
    end

    class 993282 "AccessDeniedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Checked exception thrown when a file system operation is denied, typically
due to a file permission or other access check.

<p> This exception is not related to the {@link
java.security.AccessControlException AccessControlException} or {@link
SecurityException} thrown by access controllers or security managers when
access to a file is denied.

@since 1.7
"
      classrelation 3309186 // <generalisation>
	relation 3309186 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3309186 // <generalisation>
	  b parent class_ref 993410 // FileSystemException
      end

      attribute 1817218 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4943049599949219617L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7824386 "AccessDeniedException"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   file
         a string identifying the file or {@code null} if not known
"
      end

      operation 7824514 "AccessDeniedException"
	public explicit_return_type ""
	nparams 3
	  param inout name "file" type class_ref 128130 // String
	  param inout name "other" type class_ref 128130 // String
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   file
         a string identifying the file or {@code null} if not known
@param   other
         a string identifying the other file or {@code null} if not known
@param   reason
         a reason message with additional information or {@code null}
"
      end
    end

    class 993410 "FileSystemException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when a file system operation fails on one or two files. This class is
the general class for file system exceptions.

@since 1.7
"
      classrelation 3308802 // <generalisation>
	relation 3308802 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3308802 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1817090 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -3055425747967319812L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3308930 // file (<unidirectional association>)
	relation 3308930 --->
	  a role_name "file" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3308930 // file (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3309058 // other (<unidirectional association>)
	relation 3309058 --->
	  a role_name "other" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3309058 // other (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7823618 "FileSystemException"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class. This constructor should be used
when an operation involving one file fails and there isn't any additional
information to explain the reason.

@param   file
         a string identifying the file or {@code null} if not known.
"
      end

      operation 7823746 "FileSystemException"
	public explicit_return_type ""
	nparams 3
	  param inout name "file" type class_ref 128130 // String
	  param inout name "other" type class_ref 128130 // String
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class. This constructor should be used
when an operation involving two files fails, or there is additional
information to explain the reason.

@param   file
         a string identifying the file or {@code null} if not known.
@param   other
         a string identifying the other file or {@code null} if there
         isn't another file or if not known
@param   reason
         a reason message with additional information or {@code null}
"
      end

      operation 7823874 "getFile"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the file used to create this exception.

@return  the file (can be {@code null})
"
      end

      operation 7824002 "getOtherFile"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the other file used to create this exception.

@return  the other file (can be {@code null})
"
      end

      operation 7824130 "getReason"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string explaining why the file system operation failed.

@return  the string explaining why the file system operation failed
"
      end

      operation 7824258 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the detail message string.
"
      end
    end

    class 993538 "AccessMode"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines access modes used to test the accessibility of a file.

@since 1.7
"
      attribute 1817346 "READ"
	public type class_ref 993538 // AccessMode
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Test read access.

"
      end

      attribute 1817474 "WRITE"
	public type class_ref 993538 // AccessMode
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Test write access.

"
      end

      attribute 1817602 "EXECUTE"
	public type class_ref 993538 // AccessMode
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Test execute access.
"
      end
    end

    class 993666 "AtomicMoveNotSupportedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Checked exception thrown when a file cannot be moved as an atomic file system
operation.

@since 1.7
"
      classrelation 3309314 // <generalisation>
	relation 3309314 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3309314 // <generalisation>
	  b parent class_ref 993410 // FileSystemException
      end

      attribute 1817730 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 5402760225333135579L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7824642 "AtomicMoveNotSupportedException"
	public explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 128130 // String
	  param inout name "target" type class_ref 128130 // String
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   source
         a string identifying the source file or {@code null} if not known
@param   target
         a string identifying the target file or {@code null} if not known
@param   reason
         a reason message with additional information
"
      end
    end

    class 993794 "ClosedDirectoryStreamException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Unchecked exception thrown when an attempt is made to invoke an operation on
a directory stream that is closed.

@since 1.7
"
      classrelation 3309442 // <generalisation>
	relation 3309442 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3309442 // <generalisation>
	  b parent class_ref 254850 // IllegalStateException
      end

      attribute 1817858 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 4228386650900895400L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7824770 "ClosedDirectoryStreamException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.
"
      end
    end

    class 993922 "ClosedFileSystemException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Unchecked exception thrown when an attempt is made to invoke an operation on
a file and the file system is closed.
"
      classrelation 3309570 // <generalisation>
	relation 3309570 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3309570 // <generalisation>
	  b parent class_ref 254850 // IllegalStateException
      end

      attribute 1817986 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -8158336077256193488L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7824898 "ClosedFileSystemException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.
"
      end
    end

    class 994050 "ClosedWatchServiceException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Unchecked exception thrown when an attempt is made to invoke an operation on
a watch service that is closed.
"
      classrelation 3309698 // <generalisation>
	relation 3309698 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3309698 // <generalisation>
	  b parent class_ref 254850 // IllegalStateException
      end

      attribute 1818114 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 1853336266231677732L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7825026 "ClosedWatchServiceException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.
"
      end
    end

    class 994178 "CopyMoveHelper"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Helper class to support copying or moving files when the source and target
are associated with different providers.
"
      operation 7825154 "CopyMoveHelper"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 994306 "CopyOptions"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1818242 "replaceExisting"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1818370 "copyAttributes"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1818498 "followLinks"
	  package explicit_type "boolean"
	  init_value " true"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7825282 "CopyOptions"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7825410 "parse"
	  class_operation package return_type class_ref 994306 // CopyOptions
	  nparams 1
	    param inout name "" explicit_type "CopyOption...options"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7825538 "convertMoveToCopyOptions"
	class_operation private return_type class_ref 994434 // CopyOption
	nparams 1
	  param inout name "" explicit_type "CopyOption...options"
	nexceptions 1
	  exception class_ref 993666 // AtomicMoveNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the given array of options for moving a file to options suitable
for copying the file when a move is implemented as copy + delete.
"
      end

      operation 7825666 "copyToForeignTarget"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "source" type class_ref 923650 // Path
	  param inout name "target" type class_ref 923650 // Path
	  param inout name "" explicit_type "CopyOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Simple copy for use when source and target are associated with different
providers
"
      end

      operation 7825794 "moveToForeignTarget"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "source" type class_ref 923650 // Path
	  param inout name "target" type class_ref 923650 // Path
	  param inout name "" explicit_type "CopyOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Simple move implements as copy+delete for use when source and target are
associated with different providers
"
      end
    end

    class 994434 "CopyOption"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that configures how to copy or move a file.

<p> Objects of this type may be used with the {@link
Files#copy(Path,Path,CopyOption[]) Files.copy(Path,Path,CopyOption...)},
{@link Files#copy(java.io.InputStream,Path,CopyOption[])
Files.copy(InputStream,Path,CopyOption...)} and {@link Files#move
Files.move(Path,Path,CopyOption...)} methods to configure how a file is
copied or moved.

<p> The {@link StandardCopyOption} enumeration type defines the
<i>standard</i> options.

@since 1.7
"
    end

    class 994562 "DirectoryIteratorException"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Runtime exception thrown if an I/O error is encountered when iterating over
the entries in a directory. The I/O error is retrieved as an {@link
IOException} using the {@link #getCause() getCause()} method.

@since 1.7
@see DirectoryStream
"
      classrelation 3309954 // <generalisation>
	relation 3309954 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3309954 // <generalisation>
	  b parent class_ref 994690 // ConcurrentModificationException
      end

      attribute 1818754 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6012699886086212874L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7826434 "DirectoryIteratorException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   cause
         the {@code IOException} that caused the directory iteration
         to fail

@throws  NullPointerException
         if the cause is {@code null}
"
      end

      operation 7826562 "getCause"
	public return_type class_ref 146818 // IOException
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the cause of this exception.

@return  the cause
"
      end

      operation 7826690 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called to read the object from a stream.

@throws  InvalidObjectException
         if the object is invalid or has a cause that is not
         an {@code IOException}
"
      end
    end

    class 994818 "DirectoryNotEmptyException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Checked exception thrown when a file system operation fails because a
directory is not empty.

@since 1.7
"
      classrelation 3310082 // <generalisation>
	relation 3310082 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3310082 // <generalisation>
	  b parent class_ref 993410 // FileSystemException
      end

      attribute 1818882 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 3056667871802779003L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7826818 "DirectoryNotEmptyException"
	public explicit_return_type ""
	nparams 1
	  param inout name "dir" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   dir
         a string identifying the directory or {@code null} if not known
"
      end
    end

    class 994946 "DirectoryStream"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 184322 // Iterable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object to iterate over the entries in a directory. A directory stream
allows for the convenient use of the for-each construct to iterate over a
directory.

<p> <b> While {@code DirectoryStream} extends {@code Iterable}, it is not a
general-purpose {@code Iterable} as it supports only a single {@code
Iterator}; invoking the {@link #iterator iterator} method to obtain a second
or subsequent iterator throws {@code IllegalStateException}. </b>

<p> An important property of the directory stream's {@code Iterator} is that
its {@link Iterator#hasNext() hasNext} method is guaranteed to read-ahead by
at least one element. If {@code hasNext} method returns {@code true}, and is
followed by a call to the {@code next} method, it is guaranteed that the
{@code next} method will not throw an exception due to an I/O error, or
because the stream has been {@link #close closed}. The {@code Iterator} does
not support the {@link Iterator#remove remove} operation.

<p> A {@code DirectoryStream} is opened upon creation and is closed by
invoking the {@code close} method. Closing a directory stream releases any
resources associated with the stream. Failure to close the stream may result
in a resource leak. The try-with-resources statement provides a useful
construct to ensure that the stream is closed:
<pre>
  Path dir = ...
  try (DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(dir)) {
      for (Path entry: stream) {
          ...
      }
  }
</pre>

<p> Once a directory stream is closed, then further access to the directory,
using the {@code Iterator}, behaves as if the end of stream has been reached.
Due to read-ahead, the {@code Iterator} may return one or more elements
after the directory stream has been closed. Once these buffered elements
have been read, then subsequent calls to the {@code hasNext} method returns
{@code false}, and subsequent calls to the {@code next} method will throw
{@code NoSuchElementException}.

<p> A directory stream is not required to be <i>asynchronously closeable</i>.
If a thread is blocked on the directory stream's iterator reading from the
directory, and another thread invokes the {@code close} method, then the
second thread may block until the read operation is complete.

<p> If an I/O error is encountered when accessing the directory then it
causes the {@code Iterator}'s {@code hasNext} or {@code next} methods to
throw {@link DirectoryIteratorException} with the {@link IOException} as the
cause. As stated above, the {@code hasNext} method is guaranteed to
read-ahead by at least one element. This means that if {@code hasNext} method
returns {@code true}, and is followed by a call to the {@code next} method,
then it is guaranteed that the {@code next} method will not fail with a
{@code DirectoryIteratorException}.

<p> The elements returned by the iterator are in no specific order. Some file
systems maintain special links to the directory itself and the directory's
parent directory. Entries representing these links are not returned by the
iterator.

<p> The iterator is <i>weakly consistent</i>. It is thread safe but does not
freeze the directory while iterating, so it may (or may not) reflect updates
to the directory that occur after the {@code DirectoryStream} is created.

<p> <b>Usage Examples:</b>
Suppose we want a list of the source files in a directory. This example uses
both the for-each and try-with-resources constructs.
<pre>
  List&lt;Path&gt; listSourceFiles(Path dir) throws IOException {
      List&lt;Path&gt; result = new ArrayList&lt;&gt;();
      try (DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(dir, \"*.{c,h,cpp,hpp,java}\")) {
          for (Path entry: stream) {
              result.add(entry);
          }
      } catch (DirectoryIteratorException ex) {
          // I/O error encounted during the iteration, the cause is an IOException
          throw ex.getCause();
      }
      return result;
  }
</pre>
@param   <T>     The type of element returned by the iterator

@since 1.7

@see Files#newDirectoryStream(Path)
"
      classrelation 3310210 // <generalisation>
	relation 3310210 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3310210 // <generalisation>
	  b parent class_ref 146562 // Closeable
      end

      classrelation 3310338 // <realization>
	relation 3310338 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3310338 // <realization>
	  b parent class_ref 184322 // Iterable
      end

      class 995074 "Filter"
	visibility public stereotype "interface"
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	java_annotation "@FunctionalInterface
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 7826946 "accept"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "entry" explicit_type "T"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Decides if the given directory entry should be accepted or filtered.

@param   entry
         the directory entry to be tested

@return  {@code true} if the directory entry should be accepted

@throws  IOException
         If an I/O error occurs
"
	end
      end

      operation 7827074 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the iterator associated with this {@code DirectoryStream}.

@return  the iterator associated with this {@code DirectoryStream}

@throws  IllegalStateException
         if this directory stream is closed or the iterator has already
         been returned
"
      end
    end

    class 995202 "FileAlreadyExistsException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Checked exception thrown when an attempt is made to create a file or
directory and a file of that name already exists.

@since 1.7
"
      classrelation 3310466 // <generalisation>
	relation 3310466 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3310466 // <generalisation>
	  b parent class_ref 993410 // FileSystemException
      end

      attribute 1819010 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 7579540934498831181L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7827202 "FileAlreadyExistsException"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   file
         a string identifying the file or {@code null} if not known
"
      end

      operation 7827330 "FileAlreadyExistsException"
	public explicit_return_type ""
	nparams 3
	  param inout name "file" type class_ref 128130 // String
	  param inout name "other" type class_ref 128130 // String
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   file
         a string identifying the file or {@code null} if not known
@param   other
         a string identifying the other file or {@code null} if not known
@param   reason
         a reason message with additional information or {@code null}
"
      end
    end

    class 995330 "Files"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class consists exclusively of static methods that operate on files,
directories, or other types of files.

<p> In most cases, the methods defined here will delegate to the associated
file system provider to perform the file operations.

@since 1.7
"
      operation 7827458 "Files"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7827586 "provider"
	class_operation private return_type class_ref 995458 // FileSystemProvider
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code FileSystemProvider} to delegate to.
"
      end

      operation 7827714 "asUncheckedRunnable"
	class_operation private return_type class_ref 128770 // Runnable
	nparams 1
	  param inout name "c" type class_ref 146562 // Closeable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a Closeable to a Runnable by converting checked IOException
to UncheckedIOException
"
      end

      operation 7827842 "newInputStream"
	class_operation public return_type class_ref 146434 // InputStream
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "" explicit_type "OpenOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- File contents --

Opens a file, returning an input stream to read from the file. The stream
will not be buffered, and is not required to support the {@link
InputStream#mark mark} or {@link InputStream#reset reset} methods. The
stream will be safe for access by multiple concurrent threads. Reading
commences at the beginning of the file. Whether the returned stream is
<i>asynchronously closeable</i> and/or <i>interruptible</i> is highly
file system provider specific and therefore not specified.

<p> The {@code options} parameter determines how the file is opened.
If no options are present then it is equivalent to opening the file with
the {@link StandardOpenOption#READ READ} option. In addition to the {@code
READ} option, an implementation may also support additional implementation
specific options.

@param   path
         the path to the file to open
@param   options
         options specifying how the file is opened

@return  a new input stream

@throws  IllegalArgumentException
         if an invalid combination of options is specified
@throws  UnsupportedOperationException
         if an unsupported option is specified
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file.
"
      end

      operation 7827970 "newOutputStream"
	class_operation public return_type class_ref 151298 // OutputStream
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "" explicit_type "OpenOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens or creates a file, returning an output stream that may be used to
write bytes to the file. The resulting stream will not be buffered. The
stream will be safe for access by multiple concurrent threads. Whether
the returned stream is <i>asynchronously closeable</i> and/or
<i>interruptible</i> is highly file system provider specific and
therefore not specified.

<p> This method opens or creates a file in exactly the manner specified
by the {@link #newByteChannel(Path,Set,FileAttribute[]) newByteChannel}
method with the exception that the {@link StandardOpenOption#READ READ}
option may not be present in the array of options. If no options are
present then this method works as if the {@link StandardOpenOption#CREATE
CREATE}, {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING},
and {@link StandardOpenOption#WRITE WRITE} options are present. In other
words, it opens the file for writing, creating the file if it doesn't
exist, or initially truncating an existing {@link #isRegularFile
regular-file} to a size of {@code 0} if it exists.

<p> <b>Usage Examples:</b>
<pre>
    Path path = ...

    // truncate and overwrite an existing file, or create the file if
    // it doesn't initially exist
    OutputStream out = Files.newOutputStream(path);

    // append to an existing file, fail if the file does not exist
    out = Files.newOutputStream(path, APPEND);

    // append to an existing file, create file if it doesn't initially exist
    out = Files.newOutputStream(path, CREATE, APPEND);

    // always create new file, failing if it already exists
    out = Files.newOutputStream(path, CREATE_NEW);
</pre>

@param   path
         the path to the file to open or create
@param   options
         options specifying how the file is opened

@return  a new output stream

@throws  IllegalArgumentException
         if {@code options} contains an invalid combination of options
@throws  UnsupportedOperationException
         if an unsupported option is specified
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to the file. The {@link
         SecurityManager#checkDelete(String) checkDelete} method is
         invoked to check delete access if the file is opened with the
         {@code DELETE_ON_CLOSE} option.
"
      end

      operation 7828098 "newByteChannel"
	class_operation public return_type class_ref 988674 // SeekableByteChannel
	nparams 3
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "options" type class_ref 192258 // Set
	  param inout name "attrs" explicit_type "FileAttribute<?>..."
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends OpenOption> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens or creates a file, returning a seekable byte channel to access the
file.

<p> The {@code options} parameter determines how the file is opened.
The {@link StandardOpenOption#READ READ} and {@link
StandardOpenOption#WRITE WRITE} options determine if the file should be
opened for reading and/or writing. If neither option (or the {@link
StandardOpenOption#APPEND APPEND} option) is present then the file is
opened for reading. By default reading or writing commence at the
beginning of the file.

<p> In the addition to {@code READ} and {@code WRITE}, the following
options may be present:

<table border=1 cellpadding=5 summary=\"Options\">
<tr> <th>Option</th> <th>Description</th> </tr>
<tr>
  <td> {@link StandardOpenOption#APPEND APPEND} </td>
  <td> If this option is present then the file is opened for writing and
    each invocation of the channel's {@code write} method first advances
    the position to the end of the file and then writes the requested
    data. Whether the advancement of the position and the writing of the
    data are done in a single atomic operation is system-dependent and
    therefore unspecified. This option may not be used in conjunction
    with the {@code READ} or {@code TRUNCATE_EXISTING} options. </td>
</tr>
<tr>
  <td> {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING} </td>
  <td> If this option is present then the existing file is truncated to
  a size of 0 bytes. This option is ignored when the file is opened only
  for reading. </td>
</tr>
<tr>
  <td> {@link StandardOpenOption#CREATE_NEW CREATE_NEW} </td>
  <td> If this option is present then a new file is created, failing if
  the file already exists or is a symbolic link. When creating a file the
  check for the existence of the file and the creation of the file if it
  does not exist is atomic with respect to other file system operations.
  This option is ignored when the file is opened only for reading. </td>
</tr>
<tr>
  <td > {@link StandardOpenOption#CREATE CREATE} </td>
  <td> If this option is present then an existing file is opened if it
  exists, otherwise a new file is created. This option is ignored if the
  {@code CREATE_NEW} option is also present or the file is opened only
  for reading. </td>
</tr>
<tr>
  <td > {@link StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} </td>
  <td> When this option is present then the implementation makes a
  <em>best effort</em> attempt to delete the file when closed by the
  {@link SeekableByteChannel#close close} method. If the {@code close}
  method is not invoked then a <em>best effort</em> attempt is made to
  delete the file when the Java virtual machine terminates. </td>
</tr>
<tr>
  <td>{@link StandardOpenOption#SPARSE SPARSE} </td>
  <td> When creating a new file this option is a <em>hint</em> that the
  new file will be sparse. This option is ignored when not creating
  a new file. </td>
</tr>
<tr>
  <td> {@link StandardOpenOption#SYNC SYNC} </td>
  <td> Requires that every update to the file's content or metadata be
  written synchronously to the underlying storage device. (see <a
  href=\"package-summary.html#integrity\"> Synchronized I/O file
  integrity</a>). </td>
</tr>
<tr>
  <td> {@link StandardOpenOption#DSYNC DSYNC} </td>
  <td> Requires that every update to the file's content be written
  synchronously to the underlying storage device. (see <a
  href=\"package-summary.html#integrity\"> Synchronized I/O file
  integrity</a>). </td>
</tr>
</table>

<p> An implementation may also support additional implementation specific
options.

<p> The {@code attrs} parameter is optional {@link FileAttribute
file-attributes} to set atomically when a new file is created.

<p> In the case of the default provider, the returned seekable byte channel
is a {@link java.nio.channels.FileChannel}.

<p> <b>Usage Examples:</b>
<pre>
    Path path = ...

    // open file for reading
    ReadableByteChannel rbc = Files.newByteChannel(path, EnumSet.of(READ)));

    // open file for writing to the end of an existing file, creating
    // the file if it doesn't already exist
    WritableByteChannel wbc = Files.newByteChannel(path, EnumSet.of(CREATE,APPEND));

    // create file with initial permissions, opening it for both reading and writing
    {@code FileAttribute<Set<PosixFilePermission>> perms = ...}
    SeekableByteChannel sbc = Files.newByteChannel(path, EnumSet.of(CREATE_NEW,READ,WRITE), perms);
</pre>

@param   path
         the path to the file to open or create
@param   options
         options specifying how the file is opened
@param   attrs
         an optional list of file attributes to set atomically when
         creating the file

@return  a new seekable byte channel

@throws  IllegalArgumentException
         if the set contains an invalid combination of options
@throws  UnsupportedOperationException
         if an unsupported open option is specified or the array contains
         attributes that cannot be set atomically when creating the file
@throws  FileAlreadyExistsException
         if a file of that name already exists and the {@link
         StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified
         <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the path if the file is
         opened for reading. The {@link SecurityManager#checkWrite(String)
         checkWrite} method is invoked to check write access to the path
         if the file is opened for writing. The {@link
         SecurityManager#checkDelete(String) checkDelete} method is
         invoked to check delete access if the file is opened with the
         {@code DELETE_ON_CLOSE} option.

@see java.nio.channels.FileChannel#open(Path,Set,FileAttribute[])
"
      end

      operation 7828226 "newByteChannel"
	class_operation public return_type class_ref 988674 // SeekableByteChannel
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "" explicit_type "OpenOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens or creates a file, returning a seekable byte channel to access the
file.

<p> This method opens or creates a file in exactly the manner specified
by the {@link #newByteChannel(Path,Set,FileAttribute[]) newByteChannel}
method.

@param   path
         the path to the file to open or create
@param   options
         options specifying how the file is opened

@return  a new seekable byte channel

@throws  IllegalArgumentException
         if the set contains an invalid combination of options
@throws  UnsupportedOperationException
         if an unsupported open option is specified
@throws  FileAlreadyExistsException
         if a file of that name already exists and the {@link
         StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified
         <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the path if the file is
         opened for reading. The {@link SecurityManager#checkWrite(String)
         checkWrite} method is invoked to check write access to the path
         if the file is opened for writing. The {@link
         SecurityManager#checkDelete(String) checkDelete} method is
         invoked to check delete access if the file is opened with the
         {@code DELETE_ON_CLOSE} option.

@see java.nio.channels.FileChannel#open(Path,OpenOption[])
"
      end

      class 995586 "AcceptAllFilter"
	visibility private 
	nactuals 2
	actual class class_ref 994946 // DirectoryStream
	  rank 0 explicit_value ""
	actual class class_ref 995074 // Filter
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3310594 // <realization>
	  relation 3310594 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3310594 // <realization>
	    b parent class_ref 995074 // Filter
	end

	operation 7828354 "AcceptAllFilter"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7828482 "accept"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "entry" type class_ref 923650 // Path
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	classrelation 3310722 // FILTER (<unidirectional association>)
	  relation 3310722 --->
	    a role_name "FILTER" init_value " new AcceptAllFilter()" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3310722 // FILTER (<unidirectional association>)
	    b parent class_ref 995586 // AcceptAllFilter
	end
      end

      operation 7828610 "newDirectoryStream"
	class_operation public return_type class_ref 994946 // DirectoryStream
	nparams 1
	  param inout name "dir" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Path> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a directory, returning a {@link DirectoryStream} to iterate over
all entries in the directory. The elements returned by the directory
stream's {@link DirectoryStream#iterator iterator} are of type {@code
Path}, each one representing an entry in the directory. The {@code Path}
objects are obtained as if by {@link Path#resolve(Path) resolving} the
name of the directory entry against {@code dir}.

<p> When not using the try-with-resources construct, then directory
stream's {@code close} method should be invoked after iteration is
completed so as to free any resources held for the open directory.

<p> When an implementation supports operations on entries in the
directory that execute in a race-free manner then the returned directory
stream is a {@link SecureDirectoryStream}.

@param   dir
         the path to the directory

@return  a new and open {@code DirectoryStream} object

@throws  NotDirectoryException
         if the file could not otherwise be opened because it is not
         a directory <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the directory.
"
      end

      operation 7828738 "newDirectoryStream"
	class_operation public return_type class_ref 994946 // DirectoryStream
	nparams 2
	  param inout name "dir" type class_ref 923650 // Path
	  param inout name "glob" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Path> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a directory, returning a {@link DirectoryStream} to iterate over
the entries in the directory. The elements returned by the directory
stream's {@link DirectoryStream#iterator iterator} are of type {@code
Path}, each one representing an entry in the directory. The {@code Path}
objects are obtained as if by {@link Path#resolve(Path) resolving} the
name of the directory entry against {@code dir}. The entries returned by
the iterator are filtered by matching the {@code String} representation
of their file names against the given <em>globbing</em> pattern.

<p> For example, suppose we want to iterate over the files ending with
\".java\" in a directory:
<pre>
    Path dir = ...
    try (DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(dir, \"*.java\")) {
        :
    }
</pre>

<p> The globbing pattern is specified by the {@link
FileSystem#getPathMatcher getPathMatcher} method.

<p> When not using the try-with-resources construct, then directory
stream's {@code close} method should be invoked after iteration is
completed so as to free any resources held for the open directory.

<p> When an implementation supports operations on entries in the
directory that execute in a race-free manner then the returned directory
stream is a {@link SecureDirectoryStream}.

@param   dir
         the path to the directory
@param   glob
         the glob pattern

@return  a new and open {@code DirectoryStream} object

@throws  java.util.regex.PatternSyntaxException
         if the pattern is invalid
@throws  NotDirectoryException
         if the file could not otherwise be opened because it is not
         a directory <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the directory.
"
      end

      operation 7828866 "newDirectoryStream"
	class_operation public return_type class_ref 994946 // DirectoryStream
	nparams 2
	  param inout name "dir" type class_ref 923650 // Path
	  param inout name "filter" type class_ref 995074 // Filter
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Path> ${name}${(}${t0} ${p0}, ${t1}<? super Path> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a directory, returning a {@link DirectoryStream} to iterate over
the entries in the directory. The elements returned by the directory
stream's {@link DirectoryStream#iterator iterator} are of type {@code
Path}, each one representing an entry in the directory. The {@code Path}
objects are obtained as if by {@link Path#resolve(Path) resolving} the
name of the directory entry against {@code dir}. The entries returned by
the iterator are filtered by the given {@link DirectoryStream.Filter
filter}.

<p> When not using the try-with-resources construct, then directory
stream's {@code close} method should be invoked after iteration is
completed so as to free any resources held for the open directory.

<p> Where the filter terminates due to an uncaught error or runtime
exception then it is propagated to the {@link Iterator#hasNext()
hasNext} or {@link Iterator#next() next} method. Where an {@code
IOException} is thrown, it results in the {@code hasNext} or {@code
next} method throwing a {@link DirectoryIteratorException} with the
{@code IOException} as the cause.

<p> When an implementation supports operations on entries in the
directory that execute in a race-free manner then the returned directory
stream is a {@link SecureDirectoryStream}.

<p> <b>Usage Example:</b>
Suppose we want to iterate over the files in a directory that are
larger than 8K.
<pre>
    DirectoryStream.Filter&lt;Path&gt; filter = new DirectoryStream.Filter&lt;Path&gt;() {
        public boolean accept(Path file) throws IOException {
            return (Files.size(file) &gt; 8192L);
        }
    };
    Path dir = ...
    try (DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(dir, filter)) {
        :
    }
</pre>

@param   dir
         the path to the directory
@param   filter
         the directory stream filter

@return  a new and open {@code DirectoryStream} object

@throws  NotDirectoryException
         if the file could not otherwise be opened because it is not
         a directory <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the directory.
"
      end

      operation 7828994 "createFile"
	class_operation public return_type class_ref 923650 // Path
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "attrs" explicit_type "FileAttribute<?>..."
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Creation and deletion --

Creates a new and empty file, failing if the file already exists. The
check for the existence of the file and the creation of the new file if
it does not exist are a single operation that is atomic with respect to
all other filesystem activities that might affect the directory.

<p> The {@code attrs} parameter is optional {@link FileAttribute
file-attributes} to set atomically when creating the file. Each attribute
is identified by its {@link FileAttribute#name name}. If more than one
attribute of the same name is included in the array then all but the last
occurrence is ignored.

@param   path
         the path to the file to create
@param   attrs
         an optional list of file attributes to set atomically when
         creating the file

@return  the file

@throws  UnsupportedOperationException
         if the array contains an attribute that cannot be set atomically
         when creating the file
@throws  FileAlreadyExistsException
         if a file of that name already exists
         <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs or the parent directory does not exist
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to the new file.
"
      end

      operation 7829122 "createDirectory"
	class_operation public return_type class_ref 923650 // Path
	nparams 2
	  param inout name "dir" type class_ref 923650 // Path
	  param inout name "attrs" explicit_type "FileAttribute<?>..."
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new directory. The check for the existence of the file and the
creation of the directory if it does not exist are a single operation
that is atomic with respect to all other filesystem activities that might
affect the directory. The {@link #createDirectories createDirectories}
method should be used where it is required to create all nonexistent
parent directories first.

<p> The {@code attrs} parameter is optional {@link FileAttribute
file-attributes} to set atomically when creating the directory. Each
attribute is identified by its {@link FileAttribute#name name}. If more
than one attribute of the same name is included in the array then all but
the last occurrence is ignored.

@param   dir
         the directory to create
@param   attrs
         an optional list of file attributes to set atomically when
         creating the directory

@return  the directory

@throws  UnsupportedOperationException
         if the array contains an attribute that cannot be set atomically
         when creating the directory
@throws  FileAlreadyExistsException
         if a directory could not otherwise be created because a file of
         that name already exists <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs or the parent directory does not exist
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to the new directory.
"
      end

      operation 7829250 "createDirectories"
	class_operation public return_type class_ref 923650 // Path
	nparams 2
	  param inout name "dir" type class_ref 923650 // Path
	  param inout name "attrs" explicit_type "FileAttribute<?>..."
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a directory by creating all nonexistent parent directories first.
Unlike the {@link #createDirectory createDirectory} method, an exception
is not thrown if the directory could not be created because it already
exists.

<p> The {@code attrs} parameter is optional {@link FileAttribute
file-attributes} to set atomically when creating the nonexistent
directories. Each file attribute is identified by its {@link
FileAttribute#name name}. If more than one attribute of the same name is
included in the array then all but the last occurrence is ignored.

<p> If this method fails, then it may do so after creating some, but not
all, of the parent directories.

@param   dir
         the directory to create

@param   attrs
         an optional list of file attributes to set atomically when
         creating the directory

@return  the directory

@throws  UnsupportedOperationException
         if the array contains an attribute that cannot be set atomically
         when creating the directory
@throws  FileAlreadyExistsException
         if {@code dir} exists but is not a directory <i>(optional specific
         exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         in the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked prior to attempting to create a directory and
         its {@link SecurityManager#checkRead(String) checkRead} is
         invoked for each parent directory that is checked. If {@code
         dir} is not an absolute path then its {@link Path#toAbsolutePath
         toAbsolutePath} may need to be invoked to get its absolute path.
         This may invoke the security manager's {@link
         SecurityManager#checkPropertyAccess(String) checkPropertyAccess}
         method to check access to the system property {@code user.dir}
"
      end

      operation 7829378 "createAndCheckIsDirectory"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "dir" type class_ref 923650 // Path
	  param inout name "attrs" explicit_type "FileAttribute<?>..."
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by createDirectories to attempt to create a directory. A no-op
if the directory already exists.
"
      end

      operation 7829506 "createTempFile"
	class_operation public return_type class_ref 923650 // Path
	nparams 4
	  param inout name "dir" type class_ref 923650 // Path
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "suffix" type class_ref 128130 // String
	  param inout name "attrs" explicit_type "FileAttribute<?>..."
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new empty file in the specified directory, using the given
prefix and suffix strings to generate its name. The resulting
{@code Path} is associated with the same {@code FileSystem} as the given
directory.

<p> The details as to how the name of the file is constructed is
implementation dependent and therefore not specified. Where possible
the {@code prefix} and {@code suffix} are used to construct candidate
names in the same manner as the {@link
java.io.File#createTempFile(String,String,File)} method.

<p> As with the {@code File.createTempFile} methods, this method is only
part of a temporary-file facility. Where used as a <em>work files</em>,
the resulting file may be opened using the {@link
StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} option so that the
file is deleted when the appropriate {@code close} method is invoked.
Alternatively, a {@link Runtime#addShutdownHook shutdown-hook}, or the
{@link java.io.File#deleteOnExit} mechanism may be used to delete the
file automatically.

<p> The {@code attrs} parameter is optional {@link FileAttribute
file-attributes} to set atomically when creating the file. Each attribute
is identified by its {@link FileAttribute#name name}. If more than one
attribute of the same name is included in the array then all but the last
occurrence is ignored. When no file attributes are specified, then the
resulting file may have more restrictive access permissions to files
created by the {@link java.io.File#createTempFile(String,String,File)}
method.

@param   dir
         the path to directory in which to create the file
@param   prefix
         the prefix string to be used in generating the file's name;
         may be {@code null}
@param   suffix
         the suffix string to be used in generating the file's name;
         may be {@code null}, in which case \"{@code .tmp}\" is used
@param   attrs
         an optional list of file attributes to set atomically when
         creating the file

@return  the path to the newly created file that did not exist before
         this method was invoked

@throws  IllegalArgumentException
         if the prefix or suffix parameters cannot be used to generate
         a candidate file name
@throws  UnsupportedOperationException
         if the array contains an attribute that cannot be set atomically
         when creating the directory
@throws  IOException
         if an I/O error occurs or {@code dir} does not exist
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to the file.
"
      end

      operation 7829634 "createTempFile"
	class_operation public return_type class_ref 923650 // Path
	nparams 3
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "suffix" type class_ref 128130 // String
	  param inout name "attrs" explicit_type "FileAttribute<?>..."
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty file in the default temporary-file directory, using
the given prefix and suffix to generate its name. The resulting {@code
Path} is associated with the default {@code FileSystem}.

<p> This method works in exactly the manner specified by the
{@link #createTempFile(Path,String,String,FileAttribute[])} method for
the case that the {@code dir} parameter is the temporary-file directory.

@param   prefix
         the prefix string to be used in generating the file's name;
         may be {@code null}
@param   suffix
         the suffix string to be used in generating the file's name;
         may be {@code null}, in which case \"{@code .tmp}\" is used
@param   attrs
         an optional list of file attributes to set atomically when
         creating the file

@return  the path to the newly created file that did not exist before
         this method was invoked

@throws  IllegalArgumentException
         if the prefix or suffix parameters cannot be used to generate
         a candidate file name
@throws  UnsupportedOperationException
         if the array contains an attribute that cannot be set atomically
         when creating the directory
@throws  IOException
         if an I/O error occurs or the temporary-file directory does not
         exist
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to the file.
"
      end

      operation 7829762 "createTempDirectory"
	class_operation public return_type class_ref 923650 // Path
	nparams 3
	  param inout name "dir" type class_ref 923650 // Path
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "attrs" explicit_type "FileAttribute<?>..."
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new directory in the specified directory, using the given
prefix to generate its name.  The resulting {@code Path} is associated
with the same {@code FileSystem} as the given directory.

<p> The details as to how the name of the directory is constructed is
implementation dependent and therefore not specified. Where possible
the {@code prefix} is used to construct candidate names.

<p> As with the {@code createTempFile} methods, this method is only
part of a temporary-file facility. A {@link Runtime#addShutdownHook
shutdown-hook}, or the {@link java.io.File#deleteOnExit} mechanism may be
used to delete the directory automatically.

<p> The {@code attrs} parameter is optional {@link FileAttribute
file-attributes} to set atomically when creating the directory. Each
attribute is identified by its {@link FileAttribute#name name}. If more
than one attribute of the same name is included in the array then all but
the last occurrence is ignored.

@param   dir
         the path to directory in which to create the directory
@param   prefix
         the prefix string to be used in generating the directory's name;
         may be {@code null}
@param   attrs
         an optional list of file attributes to set atomically when
         creating the directory

@return  the path to the newly created directory that did not exist before
         this method was invoked

@throws  IllegalArgumentException
         if the prefix cannot be used to generate a candidate directory name
@throws  UnsupportedOperationException
         if the array contains an attribute that cannot be set atomically
         when creating the directory
@throws  IOException
         if an I/O error occurs or {@code dir} does not exist
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access when creating the
         directory.
"
      end

      operation 7829890 "createTempDirectory"
	class_operation public return_type class_ref 923650 // Path
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "attrs" explicit_type "FileAttribute<?>..."
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new directory in the default temporary-file directory, using
the given prefix to generate its name. The resulting {@code Path} is
associated with the default {@code FileSystem}.

<p> This method works in exactly the manner specified by {@link
#createTempDirectory(Path,String,FileAttribute[])} method for the case
that the {@code dir} parameter is the temporary-file directory.

@param   prefix
         the prefix string to be used in generating the directory's name;
         may be {@code null}
@param   attrs
         an optional list of file attributes to set atomically when
         creating the directory

@return  the path to the newly created directory that did not exist before
         this method was invoked

@throws  IllegalArgumentException
         if the prefix cannot be used to generate a candidate directory name
@throws  UnsupportedOperationException
         if the array contains an attribute that cannot be set atomically
         when creating the directory
@throws  IOException
         if an I/O error occurs or the temporary-file directory does not
         exist
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access when creating the
         directory.
"
      end

      operation 7830018 "createSymbolicLink"
	class_operation public return_type class_ref 923650 // Path
	nparams 3
	  param inout name "link" type class_ref 923650 // Path
	  param inout name "target" type class_ref 923650 // Path
	  param inout name "attrs" explicit_type "FileAttribute<?>..."
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a symbolic link to a target <i>(optional operation)</i>.

<p> The {@code target} parameter is the target of the link. It may be an
{@link Path#isAbsolute absolute} or relative path and may not exist. When
the target is a relative path then file system operations on the resulting
link are relative to the path of the link.

<p> The {@code attrs} parameter is optional {@link FileAttribute
attributes} to set atomically when creating the link. Each attribute is
identified by its {@link FileAttribute#name name}. If more than one attribute
of the same name is included in the array then all but the last occurrence
is ignored.

<p> Where symbolic links are supported, but the underlying {@link FileStore}
does not support symbolic links, then this may fail with an {@link
IOException}. Additionally, some operating systems may require that the
Java virtual machine be started with implementation specific privileges to
create symbolic links, in which case this method may throw {@code IOException}.

@param   link
         the path of the symbolic link to create
@param   target
         the target of the symbolic link
@param   attrs
         the array of attributes to set atomically when creating the
         symbolic link

@return  the path to the symbolic link

@throws  UnsupportedOperationException
         if the implementation does not support symbolic links or the
         array contains an attribute that cannot be set atomically when
         creating the symbolic link
@throws  FileAlreadyExistsException
         if a file with the name already exists <i>(optional specific
         exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager
         is installed, it denies {@link LinkPermission}<tt>(\"symbolic\")</tt>
         or its {@link SecurityManager#checkWrite(String) checkWrite}
         method denies write access to the path of the symbolic link.
"
      end

      operation 7830146 "createLink"
	class_operation public return_type class_ref 923650 // Path
	nparams 2
	  param inout name "link" type class_ref 923650 // Path
	  param inout name "existing" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new link (directory entry) for an existing file <i>(optional
operation)</i>.

<p> The {@code link} parameter locates the directory entry to create.
The {@code existing} parameter is the path to an existing file. This
method creates a new directory entry for the file so that it can be
accessed using {@code link} as the path. On some file systems this is
known as creating a \"hard link\". Whether the file attributes are
maintained for the file or for each directory entry is file system
specific and therefore not specified. Typically, a file system requires
that all links (directory entries) for a file be on the same file system.
Furthermore, on some platforms, the Java virtual machine may require to
be started with implementation specific privileges to create hard links
or to create links to directories.

@param   link
         the link (directory entry) to create
@param   existing
         a path to an existing file

@return  the path to the link (directory entry)

@throws  UnsupportedOperationException
         if the implementation does not support adding an existing file
         to a directory
@throws  FileAlreadyExistsException
         if the entry could not otherwise be created because a file of
         that name already exists <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager
         is installed, it denies {@link LinkPermission}<tt>(\"hard\")</tt>
         or its {@link SecurityManager#checkWrite(String) checkWrite}
         method denies write access to either the link or the
         existing file.
"
      end

      operation 7830274 "delete"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes a file.

<p> An implementation may require to examine the file to determine if the
file is a directory. Consequently this method may not be atomic with respect
to other file system operations.  If the file is a symbolic link then the
symbolic link itself, not the final target of the link, is deleted.

<p> If the file is a directory then the directory must be empty. In some
implementations a directory has entries for special files or links that
are created when the directory is created. In such implementations a
directory is considered empty when only the special entries exist.
This method can be used with the {@link #walkFileTree walkFileTree}
method to delete a directory and all entries in the directory, or an
entire <i>file-tree</i> where required.

<p> On some operating systems it may not be possible to remove a file when
it is open and in use by this Java virtual machine or other programs.

@param   path
         the path to the file to delete

@throws  NoSuchFileException
         if the file does not exist <i>(optional specific exception)</i>
@throws  DirectoryNotEmptyException
         if the file is a directory and could not otherwise be deleted
         because the directory is not empty <i>(optional specific
         exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkDelete(String)} method
         is invoked to check delete access to the file
"
      end

      operation 7830402 "deleteIfExists"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes a file if it exists.

<p> As with the {@link #delete(Path) delete(Path)} method, an
implementation may need to examine the file to determine if the file is a
directory. Consequently this method may not be atomic with respect to
other file system operations.  If the file is a symbolic link, then the
symbolic link itself, not the final target of the link, is deleted.

<p> If the file is a directory then the directory must be empty. In some
implementations a directory has entries for special files or links that
are created when the directory is created. In such implementations a
directory is considered empty when only the special entries exist.

<p> On some operating systems it may not be possible to remove a file when
it is open and in use by this Java virtual machine or other programs.

@param   path
         the path to the file to delete

@return  {@code true} if the file was deleted by this method; {@code
         false} if the file could not be deleted because it did not
         exist

@throws  DirectoryNotEmptyException
         if the file is a directory and could not otherwise be deleted
         because the directory is not empty <i>(optional specific
         exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkDelete(String)} method
         is invoked to check delete access to the file.
"
      end

      operation 7830530 "copy"
	class_operation public return_type class_ref 923650 // Path
	nparams 3
	  param inout name "source" type class_ref 923650 // Path
	  param inout name "target" type class_ref 923650 // Path
	  param inout name "" explicit_type "CopyOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Copying and moving files --

Copy a file to a target file.

<p> This method copies a file to the target file with the {@code
options} parameter specifying how the copy is performed. By default, the
copy fails if the target file already exists or is a symbolic link,
except if the source and target are the {@link #isSameFile same} file, in
which case the method completes without copying the file. File attributes
are not required to be copied to the target file. If symbolic links are
supported, and the file is a symbolic link, then the final target of the
link is copied. If the file is a directory then it creates an empty
directory in the target location (entries in the directory are not
copied). This method can be used with the {@link #walkFileTree
walkFileTree} method to copy a directory and all entries in the directory,
or an entire <i>file-tree</i> where required.

<p> The {@code options} parameter may include any of the following:

<table border=1 cellpadding=5 summary=\"\">
<tr> <th>Option</th> <th>Description</th> </tr>
<tr>
  <td> {@link StandardCopyOption#REPLACE_EXISTING REPLACE_EXISTING} </td>
  <td> If the target file exists, then the target file is replaced if it
    is not a non-empty directory. If the target file exists and is a
    symbolic link, then the symbolic link itself, not the target of
    the link, is replaced. </td>
</tr>
<tr>
  <td> {@link StandardCopyOption#COPY_ATTRIBUTES COPY_ATTRIBUTES} </td>
  <td> Attempts to copy the file attributes associated with this file to
    the target file. The exact file attributes that are copied is platform
    and file system dependent and therefore unspecified. Minimally, the
    {@link BasicFileAttributes#lastModifiedTime last-modified-time} is
    copied to the target file if supported by both the source and target
    file stores. Copying of file timestamps may result in precision
    loss. </td>
</tr>
<tr>
  <td> {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} </td>
  <td> Symbolic links are not followed. If the file is a symbolic link,
    then the symbolic link itself, not the target of the link, is copied.
    It is implementation specific if file attributes can be copied to the
    new link. In other words, the {@code COPY_ATTRIBUTES} option may be
    ignored when copying a symbolic link. </td>
</tr>
</table>

<p> An implementation of this interface may support additional
implementation specific options.

<p> Copying a file is not an atomic operation. If an {@link IOException}
is thrown, then it is possible that the target file is incomplete or some
of its file attributes have not been copied from the source file. When
the {@code REPLACE_EXISTING} option is specified and the target file
exists, then the target file is replaced. The check for the existence of
the file and the creation of the new file may not be atomic with respect
to other file system activities.

<p> <b>Usage Example:</b>
Suppose we want to copy a file into a directory, giving it the same file
name as the source file:
<pre>
    Path source = ...
    Path newdir = ...
    Files.copy(source, newdir.resolve(source.getFileName());
</pre>

@param   source
         the path to the file to copy
@param   target
         the path to the target file (may be associated with a different
         provider to the source path)
@param   options
         options specifying how the copy should be done

@return  the path to the target file

@throws  UnsupportedOperationException
         if the array contains a copy option that is not supported
@throws  FileAlreadyExistsException
         if the target file exists but cannot be replaced because the
         {@code REPLACE_EXISTING} option is not specified <i>(optional
         specific exception)</i>
@throws  DirectoryNotEmptyException
         the {@code REPLACE_EXISTING} option is specified but the file
         cannot be replaced because it is a non-empty directory
         <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the source file, the
         {@link SecurityManager#checkWrite(String) checkWrite} is invoked
         to check write access to the target file. If a symbolic link is
         copied the security manager is invoked to check {@link
         LinkPermission}{@code (\"symbolic\")}.
"
      end

      operation 7830658 "move"
	class_operation public return_type class_ref 923650 // Path
	nparams 3
	  param inout name "source" type class_ref 923650 // Path
	  param inout name "target" type class_ref 923650 // Path
	  param inout name "" explicit_type "CopyOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Move or rename a file to a target file.

<p> By default, this method attempts to move the file to the target
file, failing if the target file exists except if the source and
target are the {@link #isSameFile same} file, in which case this method
has no effect. If the file is a symbolic link then the symbolic link
itself, not the target of the link, is moved. This method may be
invoked to move an empty directory. In some implementations a directory
has entries for special files or links that are created when the
directory is created. In such implementations a directory is considered
empty when only the special entries exist. When invoked to move a
directory that is not empty then the directory is moved if it does not
require moving the entries in the directory.  For example, renaming a
directory on the same {@link FileStore} will usually not require moving
the entries in the directory. When moving a directory requires that its
entries be moved then this method fails (by throwing an {@code
IOException}). To move a <i>file tree</i> may involve copying rather
than moving directories and this can be done using the {@link
#copy copy} method in conjunction with the {@link
#walkFileTree Files.walkFileTree} utility method.

<p> The {@code options} parameter may include any of the following:

<table border=1 cellpadding=5 summary=\"\">
<tr> <th>Option</th> <th>Description</th> </tr>
<tr>
  <td> {@link StandardCopyOption#REPLACE_EXISTING REPLACE_EXISTING} </td>
  <td> If the target file exists, then the target file is replaced if it
    is not a non-empty directory. If the target file exists and is a
    symbolic link, then the symbolic link itself, not the target of
    the link, is replaced. </td>
</tr>
<tr>
  <td> {@link StandardCopyOption#ATOMIC_MOVE ATOMIC_MOVE} </td>
  <td> The move is performed as an atomic file system operation and all
    other options are ignored. If the target file exists then it is
    implementation specific if the existing file is replaced or this method
    fails by throwing an {@link IOException}. If the move cannot be
    performed as an atomic file system operation then {@link
    AtomicMoveNotSupportedException} is thrown. This can arise, for
    example, when the target location is on a different {@code FileStore}
    and would require that the file be copied, or target location is
    associated with a different provider to this object. </td>
</table>

<p> An implementation of this interface may support additional
implementation specific options.

<p> Moving a file will copy the {@link
BasicFileAttributes#lastModifiedTime last-modified-time} to the target
file if supported by both source and target file stores. Copying of file
timestamps may result in precision loss. An implementation may also
attempt to copy other file attributes but is not required to fail if the
file attributes cannot be copied. When the move is performed as
a non-atomic operation, and an {@code IOException} is thrown, then the
state of the files is not defined. The original file and the target file
may both exist, the target file may be incomplete or some of its file
attributes may not been copied from the original file.

<p> <b>Usage Examples:</b>
Suppose we want to rename a file to \"newname\", keeping the file in the
same directory:
<pre>
    Path source = ...
    Files.move(source, source.resolveSibling(\"newname\"));
</pre>
Alternatively, suppose we want to move a file to new directory, keeping
the same file name, and replacing any existing file of that name in the
directory:
<pre>
    Path source = ...
    Path newdir = ...
    Files.move(source, newdir.resolve(source.getFileName()), REPLACE_EXISTING);
</pre>

@param   source
         the path to the file to move
@param   target
         the path to the target file (may be associated with a different
         provider to the source path)
@param   options
         options specifying how the move should be done

@return  the path to the target file

@throws  UnsupportedOperationException
         if the array contains a copy option that is not supported
@throws  FileAlreadyExistsException
         if the target file exists but cannot be replaced because the
         {@code REPLACE_EXISTING} option is not specified <i>(optional
         specific exception)</i>
@throws  DirectoryNotEmptyException
         the {@code REPLACE_EXISTING} option is specified but the file
         cannot be replaced because it is a non-empty directory
         <i>(optional specific exception)</i>
@throws  AtomicMoveNotSupportedException
         if the options array contains the {@code ATOMIC_MOVE} option but
         the file cannot be moved as an atomic file system operation.
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to both the source and
         target file.
"
      end

      operation 7830786 "readSymbolicLink"
	class_operation public return_type class_ref 923650 // Path
	nparams 1
	  param inout name "link" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Miscellenous --

Reads the target of a symbolic link <i>(optional operation)</i>.

<p> If the file system supports <a href=\"package-summary.html#links\">symbolic
links</a> then this method is used to read the target of the link, failing
if the file is not a symbolic link. The target of the link need not exist.
The returned {@code Path} object will be associated with the same file
system as {@code link}.

@param   link
         the path to the symbolic link

@return  a {@code Path} object representing the target of the link

@throws  UnsupportedOperationException
         if the implementation does not support symbolic links
@throws  NotLinkException
         if the target could otherwise not be read because the file
         is not a symbolic link <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager
         is installed, it checks that {@code FilePermission} has been
         granted with the \"{@code readlink}\" action to read the link.
"
      end

      operation 7830914 "getFileStore"
	class_operation public return_type class_ref 995714 // FileStore
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link FileStore} representing the file store where a file
is located.

<p> Once a reference to the {@code FileStore} is obtained it is
implementation specific if operations on the returned {@code FileStore},
or {@link FileStoreAttributeView} objects obtained from it, continue
to depend on the existence of the file. In particular the behavior is not
defined for the case that the file is deleted or moved to a different
file store.

@param   path
         the path to the file

@return  the file store where the file is stored

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file, and in
         addition it checks {@link RuntimePermission}<tt>
         (\"getFileStoreAttributes\")</tt>
"
      end

      operation 7831042 "isSameFile"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "path2" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if two paths locate the same file.

<p> If both {@code Path} objects are {@link Path#equals(Object) equal}
then this method returns {@code true} without checking if the file exists.
If the two {@code Path} objects are associated with different providers
then this method returns {@code false}. Otherwise, this method checks if
both {@code Path} objects locate the same file, and depending on the
implementation, may require to open or access both files.

<p> If the file system and files remain static, then this method implements
an equivalence relation for non-null {@code Paths}.
<ul>
<li>It is <i>reflexive</i>: for {@code Path} {@code f},
    {@code isSameFile(f,f)} should return {@code true}.
<li>It is <i>symmetric</i>: for two {@code Paths} {@code f} and {@code g},
    {@code isSameFile(f,g)} will equal {@code isSameFile(g,f)}.
<li>It is <i>transitive</i>: for three {@code Paths}
    {@code f}, {@code g}, and {@code h}, if {@code isSameFile(f,g)} returns
    {@code true} and {@code isSameFile(g,h)} returns {@code true}, then
    {@code isSameFile(f,h)} will return return {@code true}.
</ul>

@param   path
         one path to the file
@param   path2
         the other path

@return  {@code true} if, and only if, the two paths locate the same file

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to both files.

@see java.nio.file.attribute.BasicFileAttributes#fileKey
"
      end

      operation 7831170 "isHidden"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not a file is considered <em>hidden</em>. The exact
definition of hidden is platform or provider dependent. On UNIX for
example a file is considered to be hidden if its name begins with a
period character ('.'). On Windows a file is considered hidden if it
isn't a directory and the DOS {@link DosFileAttributes#isHidden hidden}
attribute is set.

<p> Depending on the implementation this method may require to access
the file system to determine if the file is considered hidden.

@param   path
         the path to the file to test

@return  {@code true} if the file is considered hidden

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file.
"
      end

      class 995842 "FileTypeDetectors"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3310850 // defaultFileTypeDetector (<unidirectional association>)
	  relation 3310850 --->
	    a role_name "defaultFileTypeDetector" init_value "
            createDefaultFileTypeDetector()" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3310850 // defaultFileTypeDetector (<unidirectional association>)
	    b parent class_ref 995970 // FileTypeDetector
	end

	classrelation 3310978 // installeDetectors (<unidirectional association>)
	  relation 3310978 --->
	    a role_name "installeDetectors" init_value "
            loadInstalledDetectors()" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<FileTypeDetector> ${name}${value};
"
	      classrelation_ref 3310978 // installeDetectors (<unidirectional association>)
	    b parent class_ref 175362 // List
	end

	operation 7831298 "createDefaultFileTypeDetector"
	  class_operation private return_type class_ref 995970 // FileTypeDetector
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " creates the default file type detector"
	end

	operation 7831426 "loadInstalledDetectors"
	  class_operation private return_type class_ref 175362 // List
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<FileTypeDetector> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " loads all installed file type detectors"
	end
      end

      operation 7831554 "probeContentType"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Probes the content type of a file.

<p> This method uses the installed {@link FileTypeDetector} implementations
to probe the given file to determine its content type. Each file type
detector's {@link FileTypeDetector#probeContentType probeContentType} is
invoked, in turn, to probe the file type. If the file is recognized then
the content type is returned. If the file is not recognized by any of the
installed file type detectors then a system-default file type detector is
invoked to guess the content type.

<p> A given invocation of the Java virtual machine maintains a system-wide
list of file type detectors. Installed file type detectors are loaded
using the service-provider loading facility defined by the {@link ServiceLoader}
class. Installed file type detectors are loaded using the system class
loader. If the system class loader cannot be found then the extension class
loader is used; If the extension class loader cannot be found then the
bootstrap class loader is used. File type detectors are typically installed
by placing them in a JAR file on the application class path or in the
extension directory, the JAR file contains a provider-configuration file
named {@code java.nio.file.spi.FileTypeDetector} in the resource directory
{@code META-INF/services}, and the file lists one or more fully-qualified
names of concrete subclass of {@code FileTypeDetector } that have a zero
argument constructor. If the process of locating or instantiating the
installed file type detectors fails then an unspecified error is thrown.
The ordering that installed providers are located is implementation
specific.

<p> The return value of this method is the string form of the value of a
Multipurpose Internet Mail Extension (MIME) content type as
defined by <a href=\"http://www.ietf.org/rfc/rfc2045.txt\"><i>RFC&nbsp;2045:
Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet
Message Bodies</i></a>. The string is guaranteed to be parsable according
to the grammar in the RFC.

@param   path
         the path to the file to probe

@return  The content type of the file, or {@code null} if the content
         type cannot be determined

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         If a security manager is installed and it denies an unspecified
         permission required by a file type detector implementation.
"
      end

      operation 7831682 "getFileAttributeView"
	class_operation public explicit_return_type "V"
	nparams 3
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "" explicit_type "LinkOption...options"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V extends FileAttributeView> ${type} ${name}${(}${t0} ${p0}, ${t1}<V> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- File Attributes --

Returns a file attribute view of a given type.

<p> A file attribute view provides a read-only or updatable view of a
set of file attributes. This method is intended to be used where the file
attribute view defines type-safe methods to read or update the file
attributes. The {@code type} parameter is the type of the attribute view
required and the method returns an instance of that type if supported.
The {@link BasicFileAttributeView} type supports access to the basic
attributes of a file. Invoking this method to select a file attribute
view of that type will always return an instance of that class.

<p> The {@code options} array may be used to indicate how symbolic links
are handled by the resulting file attribute view for the case that the
file is a symbolic link. By default, symbolic links are followed. If the
option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is present then
symbolic links are not followed. This option is ignored by implementations
that do not support symbolic links.

<p> <b>Usage Example:</b>
Suppose we want read or set a file's ACL, if supported:
<pre>
    Path path = ...
    AclFileAttributeView view = Files.getFileAttributeView(path, AclFileAttributeView.class);
    if (view != null) {
        List&lt;AclEntry&gt; acl = view.getAcl();
        :
    }
</pre>

@param   <V>
         The {@code FileAttributeView} type
@param   path
         the path to the file
@param   type
         the {@code Class} object corresponding to the file attribute view
@param   options
         options indicating how symbolic links are handled

@return  a file attribute view of the specified type, or {@code null} if
         the attribute view type is not available
"
      end

      operation 7831810 "readAttributes"
	class_operation public explicit_return_type "A"
	nparams 3
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "" explicit_type "LinkOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends BasicFileAttributes> ${type} ${name}${(}${t0} ${p0}, ${t1}<A> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a file's attributes as a bulk operation.

<p> The {@code type} parameter is the type of the attributes required
and this method returns an instance of that type if supported. All
implementations support a basic set of file attributes and so invoking
this method with a  {@code type} parameter of {@code
BasicFileAttributes.class} will not throw {@code
UnsupportedOperationException}.

<p> The {@code options} array may be used to indicate how symbolic links
are handled for the case that the file is a symbolic link. By default,
symbolic links are followed and the file attribute of the final target
of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS
NOFOLLOW_LINKS} is present then symbolic links are not followed.

<p> It is implementation specific if all file attributes are read as an
atomic operation with respect to other file system operations.

<p> <b>Usage Example:</b>
Suppose we want to read a file's attributes in bulk:
<pre>
   Path path = ...
   BasicFileAttributes attrs = Files.readAttributes(path, BasicFileAttributes.class);
</pre>
Alternatively, suppose we want to read file's POSIX attributes without
following symbolic links:
<pre>
   PosixFileAttributes attrs = Files.readAttributes(path, PosixFileAttributes.class, NOFOLLOW_LINKS);
</pre>

@param   <A>
         The {@code BasicFileAttributes} type
@param   path
         the path to the file
@param   type
         the {@code Class} of the file attributes required
         to read
@param   options
         options indicating how symbolic links are handled

@return  the file attributes

@throws  UnsupportedOperationException
         if an attributes of the given type are not supported
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, its {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file. If this
         method is invoked to read security sensitive attributes then the
         security manager may be invoke to check for additional permissions.
"
      end

      operation 7831938 "setAttribute"
	class_operation public return_type class_ref 923650 // Path
	nparams 4
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "attribute" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	  param inout name "" explicit_type "LinkOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a file attribute.

<p> The {@code attribute} parameter identifies the attribute to be set
and takes the form:
<blockquote>
[<i>view-name</i><b>:</b>]<i>attribute-name</i>
</blockquote>
where square brackets [...] delineate an optional component and the
character {@code ':'} stands for itself.

<p> <i>view-name</i> is the {@link FileAttributeView#name name} of a {@link
FileAttributeView} that identifies a set of file attributes. If not
specified then it defaults to {@code \"basic\"}, the name of the file
attribute view that identifies the basic set of file attributes common to
many file systems. <i>attribute-name</i> is the name of the attribute
within the set.

<p> The {@code options} array may be used to indicate how symbolic links
are handled for the case that the file is a symbolic link. By default,
symbolic links are followed and the file attribute of the final target
of the link is set. If the option {@link LinkOption#NOFOLLOW_LINKS
NOFOLLOW_LINKS} is present then symbolic links are not followed.

<p> <b>Usage Example:</b>
Suppose we want to set the DOS \"hidden\" attribute:
<pre>
   Path path = ...
   Files.setAttribute(path, \"dos:hidden\", true);
</pre>

@param   path
         the path to the file
@param   attribute
         the attribute to set
@param   value
         the attribute value
@param   options
         options indicating how symbolic links are handled

@return  the {@code path} parameter

@throws  UnsupportedOperationException
         if the attribute view is not available
@throws  IllegalArgumentException
         if the attribute name is not specified, or is not recognized, or
         the attribute value is of the correct type but has an
         inappropriate value
@throws  ClassCastException
         if the attribute value is not of the expected type or is a
         collection containing elements that are not of the expected
         type
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, its {@link SecurityManager#checkWrite(String) checkWrite}
         method denies write access to the file. If this method is invoked
         to set security sensitive attributes then the security manager
         may be invoked to check for additional permissions.
"
      end

      operation 7832066 "getAttribute"
	class_operation public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "attribute" type class_ref 128130 // String
	  param inout name "" explicit_type "LinkOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the value of a file attribute.

<p> The {@code attribute} parameter identifies the attribute to be read
and takes the form:
<blockquote>
[<i>view-name</i><b>:</b>]<i>attribute-name</i>
</blockquote>
where square brackets [...] delineate an optional component and the
character {@code ':'} stands for itself.

<p> <i>view-name</i> is the {@link FileAttributeView#name name} of a {@link
FileAttributeView} that identifies a set of file attributes. If not
specified then it defaults to {@code \"basic\"}, the name of the file
attribute view that identifies the basic set of file attributes common to
many file systems. <i>attribute-name</i> is the name of the attribute.

<p> The {@code options} array may be used to indicate how symbolic links
are handled for the case that the file is a symbolic link. By default,
symbolic links are followed and the file attribute of the final target
of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS
NOFOLLOW_LINKS} is present then symbolic links are not followed.

<p> <b>Usage Example:</b>
Suppose we require the user ID of the file owner on a system that
supports a \"{@code unix}\" view:
<pre>
   Path path = ...
   int uid = (Integer)Files.getAttribute(path, \"unix:uid\");
</pre>

@param   path
         the path to the file
@param   attribute
         the attribute to read
@param   options
         options indicating how symbolic links are handled

@return  the attribute value

@throws  UnsupportedOperationException
         if the attribute view is not available
@throws  IllegalArgumentException
         if the attribute name is not specified or is not recognized
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, its {@link SecurityManager#checkRead(String) checkRead}
         method denies read access to the file. If this method is invoked
         to read security sensitive attributes then the security manager
         may be invoked to check for additional permissions.
"
      end

      operation 7832194 "readAttributes"
	class_operation public return_type class_ref 130178 // Map
	nparams 3
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "attributes" type class_ref 128130 // String
	  param inout name "" explicit_type "LinkOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,Object> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a set of file attributes as a bulk operation.

<p> The {@code attributes} parameter identifies the attributes to be read
and takes the form:
<blockquote>
[<i>view-name</i><b>:</b>]<i>attribute-list</i>
</blockquote>
where square brackets [...] delineate an optional component and the
character {@code ':'} stands for itself.

<p> <i>view-name</i> is the {@link FileAttributeView#name name} of a {@link
FileAttributeView} that identifies a set of file attributes. If not
specified then it defaults to {@code \"basic\"}, the name of the file
attribute view that identifies the basic set of file attributes common to
many file systems.

<p> The <i>attribute-list</i> component is a comma separated list of
zero or more names of attributes to read. If the list contains the value
{@code \"*\"} then all attributes are read. Attributes that are not supported
are ignored and will not be present in the returned map. It is
implementation specific if all attributes are read as an atomic operation
with respect to other file system operations.

<p> The following examples demonstrate possible values for the {@code
attributes} parameter:

<blockquote>
<table border=\"0\" summary=\"Possible values\">
<tr>
  <td> {@code \"*\"} </td>
  <td> Read all {@link BasicFileAttributes basic-file-attributes}. </td>
</tr>
<tr>
  <td> {@code \"size,lastModifiedTime,lastAccessTime\"} </td>
  <td> Reads the file size, last modified time, and last access time
    attributes. </td>
</tr>
<tr>
  <td> {@code \"posix:*\"} </td>
  <td> Read all {@link PosixFileAttributes POSIX-file-attributes}. </td>
</tr>
<tr>
  <td> {@code \"posix:permissions,owner,size\"} </td>
  <td> Reads the POSX file permissions, owner, and file size. </td>
</tr>
</table>
</blockquote>

<p> The {@code options} array may be used to indicate how symbolic links
are handled for the case that the file is a symbolic link. By default,
symbolic links are followed and the file attribute of the final target
of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS
NOFOLLOW_LINKS} is present then symbolic links are not followed.

@param   path
         the path to the file
@param   attributes
         the attributes to read
@param   options
         options indicating how symbolic links are handled

@return  a map of the attributes returned; The map's keys are the
         attribute names, its values are the attribute values

@throws  UnsupportedOperationException
         if the attribute view is not available
@throws  IllegalArgumentException
         if no attributes are specified or an unrecognized attributes is
         specified
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, its {@link SecurityManager#checkRead(String) checkRead}
         method denies read access to the file. If this method is invoked
         to read security sensitive attributes then the security manager
         may be invoke to check for additional permissions.
"
      end

      operation 7832322 "getPosixFilePermissions"
	class_operation public return_type class_ref 192258 // Set
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "" explicit_type "LinkOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<PosixFilePermission> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a file's POSIX file permissions.

<p> The {@code path} parameter is associated with a {@code FileSystem}
that supports the {@link PosixFileAttributeView}. This attribute view
provides access to file attributes commonly associated with files on file
systems used by operating systems that implement the Portable Operating
System Interface (POSIX) family of standards.

<p> The {@code options} array may be used to indicate how symbolic links
are handled for the case that the file is a symbolic link. By default,
symbolic links are followed and the file attribute of the final target
of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS
NOFOLLOW_LINKS} is present then symbolic links are not followed.

@param   path
         the path to the file
@param   options
         options indicating how symbolic links are handled

@return  the file permissions

@throws  UnsupportedOperationException
         if the associated file system does not support the {@code
         PosixFileAttributeView}
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, and it denies {@link RuntimePermission}<tt>(\"accessUserInformation\")</tt>
         or its {@link SecurityManager#checkRead(String) checkRead} method
         denies read access to the file.
"
      end

      operation 7832450 "setPosixFilePermissions"
	class_operation public return_type class_ref 923650 // Path
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "perms" type class_ref 192258 // Set
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<PosixFilePermission> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a file's POSIX permissions.

<p> The {@code path} parameter is associated with a {@code FileSystem}
that supports the {@link PosixFileAttributeView}. This attribute view
provides access to file attributes commonly associated with files on file
systems used by operating systems that implement the Portable Operating
System Interface (POSIX) family of standards.

@param   path
         The path to the file
@param   perms
         The new set of permissions

@return  The path

@throws  UnsupportedOperationException
         if the associated file system does not support the {@code
         PosixFileAttributeView}
@throws  ClassCastException
         if the sets contains elements that are not of type {@code
         PosixFilePermission}
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, it denies {@link RuntimePermission}<tt>(\"accessUserInformation\")</tt>
         or its {@link SecurityManager#checkWrite(String) checkWrite}
         method denies write access to the file.
"
      end

      operation 7832578 "getOwner"
	class_operation public return_type class_ref 996226 // UserPrincipal
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "" explicit_type "LinkOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the owner of a file.

<p> The {@code path} parameter is associated with a file system that
supports {@link FileOwnerAttributeView}. This file attribute view provides
access to a file attribute that is the owner of the file.

@param   path
         The path to the file
@param   options
         options indicating how symbolic links are handled

@return  A user principal representing the owner of the file

@throws  UnsupportedOperationException
         if the associated file system does not support the {@code
         FileOwnerAttributeView}
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, it denies {@link RuntimePermission}<tt>(\"accessUserInformation\")</tt>
         or its {@link SecurityManager#checkRead(String) checkRead} method
         denies read access to the file.
"
      end

      operation 7832706 "setOwner"
	class_operation public return_type class_ref 923650 // Path
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "owner" type class_ref 996226 // UserPrincipal
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the file owner.

<p> The {@code path} parameter is associated with a file system that
supports {@link FileOwnerAttributeView}. This file attribute view provides
access to a file attribute that is the owner of the file.

<p> <b>Usage Example:</b>
Suppose we want to make \"joe\" the owner of a file:
<pre>
    Path path = ...
    UserPrincipalLookupService lookupService =
        provider(path).getUserPrincipalLookupService();
    UserPrincipal joe = lookupService.lookupPrincipalByName(\"joe\");
    Files.setOwner(path, joe);
</pre>

@param   path
         The path to the file
@param   owner
         The new file owner

@return  The path

@throws  UnsupportedOperationException
         if the associated file system does not support the {@code
         FileOwnerAttributeView}
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, it denies {@link RuntimePermission}<tt>(\"accessUserInformation\")</tt>
         or its {@link SecurityManager#checkWrite(String) checkWrite}
         method denies write access to the file.

@see FileSystem#getUserPrincipalLookupService
@see java.nio.file.attribute.UserPrincipalLookupService
"
      end

      operation 7832834 "isSymbolicLink"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether a file is a symbolic link.

<p> Where it is required to distinguish an I/O exception from the case
that the file is not a symbolic link then the file attributes can be
read with the {@link #readAttributes(Path,Class,LinkOption[])
readAttributes} method and the file type tested with the {@link
BasicFileAttributes#isSymbolicLink} method.

@param   path  The path to the file

@return  {@code true} if the file is a symbolic link; {@code false} if
         the file does not exist, is not a symbolic link, or it cannot
         be determined if the file is a symbolic link or not.

@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, its {@link SecurityManager#checkRead(String) checkRead}
         method denies read access to the file.
"
      end

      operation 7832962 "isDirectory"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "" explicit_type "LinkOption...options"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether a file is a directory.

<p> The {@code options} array may be used to indicate how symbolic links
are handled for the case that the file is a symbolic link. By default,
symbolic links are followed and the file attribute of the final target
of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS
NOFOLLOW_LINKS} is present then symbolic links are not followed.

<p> Where it is required to distinguish an I/O exception from the case
that the file is not a directory then the file attributes can be
read with the {@link #readAttributes(Path,Class,LinkOption[])
readAttributes} method and the file type tested with the {@link
BasicFileAttributes#isDirectory} method.

@param   path
         the path to the file to test
@param   options
         options indicating how symbolic links are handled

@return  {@code true} if the file is a directory; {@code false} if
         the file does not exist, is not a directory, or it cannot
         be determined if the file is a directory or not.

@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, its {@link SecurityManager#checkRead(String) checkRead}
         method denies read access to the file.
"
      end

      operation 7833090 "isRegularFile"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "" explicit_type "LinkOption...options"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether a file is a regular file with opaque content.

<p> The {@code options} array may be used to indicate how symbolic links
are handled for the case that the file is a symbolic link. By default,
symbolic links are followed and the file attribute of the final target
of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS
NOFOLLOW_LINKS} is present then symbolic links are not followed.

<p> Where it is required to distinguish an I/O exception from the case
that the file is not a regular file then the file attributes can be
read with the {@link #readAttributes(Path,Class,LinkOption[])
readAttributes} method and the file type tested with the {@link
BasicFileAttributes#isRegularFile} method.

@param   path
         the path to the file
@param   options
         options indicating how symbolic links are handled

@return  {@code true} if the file is a regular file; {@code false} if
         the file does not exist, is not a regular file, or it
         cannot be determined if the file is a regular file or not.

@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, its {@link SecurityManager#checkRead(String) checkRead}
         method denies read access to the file.
"
      end

      operation 7833218 "getLastModifiedTime"
	class_operation public return_type class_ref 996354 // FileTime
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "" explicit_type "LinkOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a file's last modified time.

<p> The {@code options} array may be used to indicate how symbolic links
are handled for the case that the file is a symbolic link. By default,
symbolic links are followed and the file attribute of the final target
of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS
NOFOLLOW_LINKS} is present then symbolic links are not followed.

@param   path
         the path to the file
@param   options
         options indicating how symbolic links are handled

@return  a {@code FileTime} representing the time the file was last
         modified, or an implementation specific default when a time
         stamp to indicate the time of last modification is not supported
         by the file system

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, its {@link SecurityManager#checkRead(String) checkRead}
         method denies read access to the file.

@see BasicFileAttributes#lastModifiedTime
"
      end

      operation 7833346 "setLastModifiedTime"
	class_operation public return_type class_ref 923650 // Path
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "time" type class_ref 996354 // FileTime
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a file's last modified time attribute. The file time is converted
to the epoch and precision supported by the file system. Converting from
finer to coarser granularities result in precision loss. The behavior of
this method when attempting to set the last modified time when it is not
supported by the file system or is outside the range supported by the
underlying file store is not defined. It may or not fail by throwing an
{@code IOException}.

<p> <b>Usage Example:</b>
Suppose we want to set the last modified time to the current time:
<pre>
   Path path = ...
   FileTime now = FileTime.fromMillis(System.currentTimeMillis());
   Files.setLastModifiedTime(path, now);
</pre>

@param   path
         the path to the file
@param   time
         the new last modified time

@return  the path

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, the security manager's {@link
         SecurityManager#checkWrite(String) checkWrite} method is invoked
         to check write access to file

@see BasicFileAttributeView#setTimes
"
      end

      operation 7833474 "size"
	class_operation public explicit_return_type "long"
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of a file (in bytes). The size may differ from the
actual size on the file system due to compression, support for sparse
files, or other reasons. The size of files that are not {@link
#isRegularFile regular} files is implementation specific and
therefore unspecified.

@param   path
         the path to the file

@return  the file size, in bytes

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, its {@link SecurityManager#checkRead(String) checkRead}
         method denies read access to the file.

@see BasicFileAttributes#size
"
      end

      operation 7833602 "followLinks"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "" explicit_type "LinkOption...options"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Accessibility --

Returns {@code false} if NOFOLLOW_LINKS is present.
"
      end

      operation 7833730 "exists"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "" explicit_type "LinkOption...options"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether a file exists.

<p> The {@code options} parameter may be used to indicate how symbolic links
are handled for the case that the file is a symbolic link. By default,
symbolic links are followed. If the option {@link LinkOption#NOFOLLOW_LINKS
NOFOLLOW_LINKS} is present then symbolic links are not followed.

<p> Note that the result of this method is immediately outdated. If this
method indicates the file exists then there is no guarantee that a
subsequence access will succeed. Care should be taken when using this
method in security sensitive applications.

@param   path
         the path to the file to test
@param   options
         options indicating how symbolic links are handled
.
@return  {@code true} if the file exists; {@code false} if the file does
         not exist or its existence cannot be determined.

@throws  SecurityException
         In the case of the default provider, the {@link
         SecurityManager#checkRead(String)} is invoked to check
         read access to the file.

@see #notExists
"
      end

      operation 7833858 "notExists"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "" explicit_type "LinkOption...options"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the file located by this path does not exist. This method
is intended for cases where it is required to take action when it can be
confirmed that a file does not exist.

<p> The {@code options} parameter may be used to indicate how symbolic links
are handled for the case that the file is a symbolic link. By default,
symbolic links are followed. If the option {@link LinkOption#NOFOLLOW_LINKS
NOFOLLOW_LINKS} is present then symbolic links are not followed.

<p> Note that this method is not the complement of the {@link #exists
exists} method. Where it is not possible to determine if a file exists
or not then both methods return {@code false}. As with the {@code exists}
method, the result of this method is immediately outdated. If this
method indicates the file does exist then there is no guarantee that a
subsequence attempt to create the file will succeed. Care should be taken
when using this method in security sensitive applications.

@param   path
         the path to the file to test
@param   options
         options indicating how symbolic links are handled

@return  {@code true} if the file does not exist; {@code false} if the
         file exists or its existence cannot be determined

@throws  SecurityException
         In the case of the default provider, the {@link
         SecurityManager#checkRead(String)} is invoked to check
         read access to the file.
"
      end

      operation 7833986 "isAccessible"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "" explicit_type "AccessMode...modes"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by isReadbale, isWritable, isExecutable to test access to a file.
"
      end

      operation 7834114 "isReadable"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether a file is readable. This method checks that a file exists
and that this Java virtual machine has appropriate privileges that would
allow it open the file for reading. Depending on the implementation, this
method may require to read file permissions, access control lists, or
other file attributes in order to check the effective access to the file.
Consequently, this method may not be atomic with respect to other file
system operations.

<p> Note that the result of this method is immediately outdated, there is
no guarantee that a subsequent attempt to open the file for reading will
succeed (or even that it will access the same file). Care should be taken
when using this method in security sensitive applications.

@param   path
         the path to the file to check

@return  {@code true} if the file exists and is readable; {@code false}
         if the file does not exist, read access would be denied because
         the Java virtual machine has insufficient privileges, or access
         cannot be determined

@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         is invoked to check read access to the file.
"
      end

      operation 7834242 "isWritable"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether a file is writable. This method checks that a file exists
and that this Java virtual machine has appropriate privileges that would
allow it open the file for writing. Depending on the implementation, this
method may require to read file permissions, access control lists, or
other file attributes in order to check the effective access to the file.
Consequently, this method may not be atomic with respect to other file
system operations.

<p> Note that result of this method is immediately outdated, there is no
guarantee that a subsequent attempt to open the file for writing will
succeed (or even that it will access the same file). Care should be taken
when using this method in security sensitive applications.

@param   path
         the path to the file to check

@return  {@code true} if the file exists and is writable; {@code false}
         if the file does not exist, write access would be denied because
         the Java virtual machine has insufficient privileges, or access
         cannot be determined

@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         is invoked to check write access to the file.
"
      end

      operation 7834370 "isExecutable"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether a file is executable. This method checks that a file exists
and that this Java virtual machine has appropriate privileges to {@link
Runtime#exec execute} the file. The semantics may differ when checking
access to a directory. For example, on UNIX systems, checking for
execute access checks that the Java virtual machine has permission to
search the directory in order to access file or subdirectories.

<p> Depending on the implementation, this method may require to read file
permissions, access control lists, or other file attributes in order to
check the effective access to the file. Consequently, this method may not
be atomic with respect to other file system operations.

<p> Note that the result of this method is immediately outdated, there is
no guarantee that a subsequent attempt to execute the file will succeed
(or even that it will access the same file). Care should be taken when
using this method in security sensitive applications.

@param   path
         the path to the file to check

@return  {@code true} if the file exists and is executable; {@code false}
         if the file does not exist, execute access would be denied because
         the Java virtual machine has insufficient privileges, or access
         cannot be determined

@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkExec(String)
         checkExec} is invoked to check execute access to the file.
"
      end

      operation 7834498 "walkFileTree"
	class_operation public return_type class_ref 923650 // Path
	nparams 4
	  param inout name "start" type class_ref 923650 // Path
	  param inout name "options" type class_ref 192258 // Set
	  param in name "maxDepth" explicit_type "int"
	  param inout name "visitor" type class_ref 996482 // FileVisitor
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<FileVisitOption> ${p1}, ${t2} ${p2}, ${t3}<? super Path> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Recursive operations --

Walks a file tree.

<p> This method walks a file tree rooted at a given starting file. The
file tree traversal is <em>depth-first</em> with the given {@link
FileVisitor} invoked for each file encountered. File tree traversal
completes when all accessible files in the tree have been visited, or a
visit method returns a result of {@link FileVisitResult#TERMINATE
TERMINATE}. Where a visit method terminates due an {@code IOException},
an uncaught error, or runtime exception, then the traversal is terminated
and the error or exception is propagated to the caller of this method.

<p> For each file encountered this method attempts to read its {@link
java.nio.file.attribute.BasicFileAttributes}. If the file is not a
directory then the {@link FileVisitor#visitFile visitFile} method is
invoked with the file attributes. If the file attributes cannot be read,
due to an I/O exception, then the {@link FileVisitor#visitFileFailed
visitFileFailed} method is invoked with the I/O exception.

<p> Where the file is a directory, and the directory could not be opened,
then the {@code visitFileFailed} method is invoked with the I/O exception,
after which, the file tree walk continues, by default, at the next
<em>sibling</em> of the directory.

<p> Where the directory is opened successfully, then the entries in the
directory, and their <em>descendants</em> are visited. When all entries
have been visited, or an I/O error occurs during iteration of the
directory, then the directory is closed and the visitor's {@link
FileVisitor#postVisitDirectory postVisitDirectory} method is invoked.
The file tree walk then continues, by default, at the next <em>sibling</em>
of the directory.

<p> By default, symbolic links are not automatically followed by this
method. If the {@code options} parameter contains the {@link
FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then symbolic links are
followed. When following links, and the attributes of the target cannot
be read, then this method attempts to get the {@code BasicFileAttributes}
of the link. If they can be read then the {@code visitFile} method is
invoked with the attributes of the link (otherwise the {@code visitFileFailed}
method is invoked as specified above).

<p> If the {@code options} parameter contains the {@link
FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then this method keeps
track of directories visited so that cycles can be detected. A cycle
arises when there is an entry in a directory that is an ancestor of the
directory. Cycle detection is done by recording the {@link
java.nio.file.attribute.BasicFileAttributes#fileKey file-key} of directories,
or if file keys are not available, by invoking the {@link #isSameFile
isSameFile} method to test if a directory is the same file as an
ancestor. When a cycle is detected it is treated as an I/O error, and the
{@link FileVisitor#visitFileFailed visitFileFailed} method is invoked with
an instance of {@link FileSystemLoopException}.

<p> The {@code maxDepth} parameter is the maximum number of levels of
directories to visit. A value of {@code 0} means that only the starting
file is visited, unless denied by the security manager. A value of
{@link Integer#MAX_VALUE MAX_VALUE} may be used to indicate that all
levels should be visited. The {@code visitFile} method is invoked for all
files, including directories, encountered at {@code maxDepth}, unless the
basic file attributes cannot be read, in which case the {@code
visitFileFailed} method is invoked.

<p> If a visitor returns a result of {@code null} then {@code
NullPointerException} is thrown.

<p> When a security manager is installed and it denies access to a file
(or directory), then it is ignored and the visitor is not invoked for
that file (or directory).

@param   start
         the starting file
@param   options
         options to configure the traversal
@param   maxDepth
         the maximum number of directory levels to visit
@param   visitor
         the file visitor to invoke for each file

@return  the starting file

@throws  IllegalArgumentException
         if the {@code maxDepth} parameter is negative
@throws  SecurityException
         If the security manager denies access to the starting file.
         In the case of the default provider, the {@link
         SecurityManager#checkRead(String) checkRead} method is invoked
         to check read access to the directory.
@throws  IOException
         if an I/O error is thrown by a visitor method
"
      end

      operation 7834626 "walkFileTree"
	class_operation public return_type class_ref 923650 // Path
	nparams 2
	  param inout name "start" type class_ref 923650 // Path
	  param inout name "visitor" type class_ref 996482 // FileVisitor
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super Path> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Walks a file tree.

<p> This method works as if invoking it were equivalent to evaluating the
expression:
<blockquote><pre>
walkFileTree(start, EnumSet.noneOf(FileVisitOption.class), Integer.MAX_VALUE, visitor)
</pre></blockquote>
In other words, it does not follow symbolic links, and visits all levels
of the file tree.

@param   start
         the starting file
@param   visitor
         the file visitor to invoke for each file

@return  the starting file

@throws  SecurityException
         If the security manager denies access to the starting file.
         In the case of the default provider, the {@link
         SecurityManager#checkRead(String) checkRead} method is invoked
         to check read access to the directory.
@throws  IOException
         if an I/O error is thrown by a visitor method
"
      end

      attribute 1819138 "BUFFER_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " -- Utility methods for simple usages --
 buffer size used for reading and writing
"
      end

      operation 7834754 "newBufferedReader"
	class_operation public return_type class_ref 141314 // BufferedReader
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "cs" type class_ref 853634 // Charset
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a file for reading, returning a {@code BufferedReader} that may be
used to read text from the file in an efficient manner. Bytes from the
file are decoded into characters using the specified charset. Reading
commences at the beginning of the file.

<p> The {@code Reader} methods that read from the file throw {@code
IOException} if a malformed or unmappable byte sequence is read.

@param   path
         the path to the file
@param   cs
         the charset to use for decoding

@return  a new buffered reader, with default buffer size, to read text
         from the file

@throws  IOException
         if an I/O error occurs opening the file
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file.

@see #readAllLines
"
      end

      operation 7834882 "newBufferedReader"
	class_operation public return_type class_ref 141314 // BufferedReader
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a file for reading, returning a {@code BufferedReader} to read text
from the file in an efficient manner. Bytes from the file are decoded into
characters using the {@link StandardCharsets#UTF_8 UTF-8} {@link Charset
charset}.

<p> This method works as if invoking it were equivalent to evaluating the
expression:
<pre>{@code
Files.newBufferedReader(path, StandardCharsets.UTF_8)
}</pre>

@param   path
         the path to the file

@return  a new buffered reader, with default buffer size, to read text
         from the file

@throws  IOException
         if an I/O error occurs opening the file
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file.

@since 1.8
"
      end

      operation 7835010 "newBufferedWriter"
	class_operation public return_type class_ref 921858 // BufferedWriter
	nparams 3
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "cs" type class_ref 853634 // Charset
	  param inout name "" explicit_type "OpenOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens or creates a file for writing, returning a {@code BufferedWriter}
that may be used to write text to the file in an efficient manner.
The {@code options} parameter specifies how the the file is created or
opened. If no options are present then this method works as if the {@link
StandardOpenOption#CREATE CREATE}, {@link
StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING}, and {@link
StandardOpenOption#WRITE WRITE} options are present. In other words, it
opens the file for writing, creating the file if it doesn't exist, or
initially truncating an existing {@link #isRegularFile regular-file} to
a size of {@code 0} if it exists.

<p> The {@code Writer} methods to write text throw {@code IOException}
if the text cannot be encoded using the specified charset.

@param   path
         the path to the file
@param   cs
         the charset to use for encoding
@param   options
         options specifying how the file is opened

@return  a new buffered writer, with default buffer size, to write text
         to the file

@throws  IOException
         if an I/O error occurs opening or creating the file
@throws  UnsupportedOperationException
         if an unsupported option is specified
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to the file.

@see #write(Path,Iterable,Charset,OpenOption[])
"
      end

      operation 7835138 "newBufferedWriter"
	class_operation public return_type class_ref 921858 // BufferedWriter
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "" explicit_type "OpenOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens or creates a file for writing, returning a {@code BufferedWriter}
to write text to the file in an efficient manner. The text is encoded
into bytes for writing using the {@link StandardCharsets#UTF_8 UTF-8}
{@link Charset charset}.

<p> This method works as if invoking it were equivalent to evaluating the
expression:
<pre>{@code
Files.newBufferedWriter(path, StandardCharsets.UTF_8, options)
}</pre>

@param   path
         the path to the file
@param   options
         options specifying how the file is opened

@return  a new buffered writer, with default buffer size, to write text
         to the file

@throws  IOException
         if an I/O error occurs opening or creating the file
@throws  UnsupportedOperationException
         if an unsupported option is specified
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to the file.

@since 1.8
"
      end

      operation 7835266 "copy"
	class_operation private explicit_return_type "long"
	nparams 2
	  param inout name "source" type class_ref 146434 // InputStream
	  param inout name "sink" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads all bytes from an input stream and writes them to an output stream.
"
      end

      operation 7835394 "copy"
	class_operation public explicit_return_type "long"
	nparams 3
	  param inout name "in" type class_ref 146434 // InputStream
	  param inout name "target" type class_ref 923650 // Path
	  param inout name "" explicit_type "CopyOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies all bytes from an input stream to a file. On return, the input
stream will be at end of stream.

<p> By default, the copy fails if the target file already exists or is a
symbolic link. If the {@link StandardCopyOption#REPLACE_EXISTING
REPLACE_EXISTING} option is specified, and the target file already exists,
then it is replaced if it is not a non-empty directory. If the target
file exists and is a symbolic link, then the symbolic link is replaced.
In this release, the {@code REPLACE_EXISTING} option is the only option
required to be supported by this method. Additional options may be
supported in future releases.

<p>  If an I/O error occurs reading from the input stream or writing to
the file, then it may do so after the target file has been created and
after some bytes have been read or written. Consequently the input
stream may not be at end of stream and may be in an inconsistent state.
It is strongly recommended that the input stream be promptly closed if an
I/O error occurs.

<p> This method may block indefinitely reading from the input stream (or
writing to the file). The behavior for the case that the input stream is
<i>asynchronously closed</i> or the thread interrupted during the copy is
highly input stream and file system provider specific and therefore not
specified.

<p> <b>Usage example</b>: Suppose we want to capture a web page and save
it to a file:
<pre>
    Path path = ...
    URI u = URI.create(\"http://java.sun.com/\");
    try (InputStream in = u.toURL().openStream()) {
        Files.copy(in, path);
    }
</pre>

@param   in
         the input stream to read from
@param   target
         the path to the file
@param   options
         options specifying how the copy should be done

@return  the number of bytes read or written

@throws  IOException
         if an I/O error occurs when reading or writing
@throws  FileAlreadyExistsException
         if the target file exists but cannot be replaced because the
         {@code REPLACE_EXISTING} option is not specified <i>(optional
         specific exception)</i>
@throws  DirectoryNotEmptyException
         the {@code REPLACE_EXISTING} option is specified but the file
         cannot be replaced because it is a non-empty directory
         <i>(optional specific exception)</i>     *
@throws  UnsupportedOperationException
         if {@code options} contains a copy option that is not supported
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to the file. Where the
         {@code REPLACE_EXISTING} option is specified, the security
         manager's {@link SecurityManager#checkDelete(String) checkDelete}
         method is invoked to check that an existing file can be deleted.
"
      end

      operation 7835522 "copy"
	class_operation public explicit_return_type "long"
	nparams 2
	  param inout name "source" type class_ref 923650 // Path
	  param inout name "out" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies all bytes from a file to an output stream.

<p> If an I/O error occurs reading from the file or writing to the output
stream, then it may do so after some bytes have been read or written.
Consequently the output stream may be in an inconsistent state. It is
strongly recommended that the output stream be promptly closed if an I/O
error occurs.

<p> This method may block indefinitely writing to the output stream (or
reading from the file). The behavior for the case that the output stream
is <i>asynchronously closed</i> or the thread interrupted during the copy
is highly output stream and file system provider specific and therefore
not specified.

<p> Note that if the given output stream is {@link java.io.Flushable}
then its {@link java.io.Flushable#flush flush} method may need to invoked
after this method completes so as to flush any buffered output.

@param   source
         the  path to the file
@param   out
         the output stream to write to

@return  the number of bytes read or written

@throws  IOException
         if an I/O error occurs when reading or writing
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file.
"
      end

      attribute 1819266 "MAX_BUFFER_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " Integer.MAX_VALUE - 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum size of array to allocate.
Some VMs reserve some header words in an array.
Attempts to allocate larger arrays may result in
OutOfMemoryError: Requested array size exceeds VM limit

"
      end

      operation 7835650 "read"
	class_operation private explicit_return_type "byte"
	nparams 2
	  param inout name "source" type class_ref 146434 // InputStream
	  param in name "initialSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads all the bytes from an input stream. Uses {@code initialSize} as a hint
about how many bytes the stream will have.

@param   source
         the input stream to read from
@param   initialSize
         the initial size of the byte array to allocate

@return  a byte array containing the bytes read from the file

@throws  IOException
         if an I/O error occurs reading from the stream
@throws  OutOfMemoryError
         if an array of the required size cannot be allocated
"
      end

      operation 7835778 "readAllBytes"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads all the bytes from a file. The method ensures that the file is
closed when all bytes have been read or an I/O error, or other runtime
exception, is thrown.

<p> Note that this method is intended for simple cases where it is
convenient to read all bytes into a byte array. It is not intended for
reading in large files.

@param   path
         the path to the file

@return  a byte array containing the bytes read from the file

@throws  IOException
         if an I/O error occurs reading from the stream
@throws  OutOfMemoryError
         if an array of the required size cannot be allocated, for
         example the file is larger that {@code 2GB}
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file.
"
      end

      operation 7835906 "readAllLines"
	class_operation public return_type class_ref 175362 // List
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "cs" type class_ref 853634 // Charset
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read all lines from a file. This method ensures that the file is
closed when all bytes have been read or an I/O error, or other runtime
exception, is thrown. Bytes from the file are decoded into characters
using the specified charset.

<p> This method recognizes the following as line terminators:
<ul>
  <li> <code>&#92;u000D</code> followed by <code>&#92;u000A</code>,
    CARRIAGE RETURN followed by LINE FEED </li>
  <li> <code>&#92;u000A</code>, LINE FEED </li>
  <li> <code>&#92;u000D</code>, CARRIAGE RETURN </li>
</ul>
<p> Additional Unicode line terminators may be recognized in future
releases.

<p> Note that this method is intended for simple cases where it is
convenient to read all lines in a single operation. It is not intended
for reading in large files.

@param   path
         the path to the file
@param   cs
         the charset to use for decoding

@return  the lines from the file as a {@code List}; whether the {@code
         List} is modifiable or not is implementation dependent and
         therefore not specified

@throws  IOException
         if an I/O error occurs reading from the file or a malformed or
         unmappable byte sequence is read
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file.

@see #newBufferedReader
"
      end

      operation 7836034 "readAllLines"
	class_operation public return_type class_ref 175362 // List
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read all lines from a file. Bytes from the file are decoded into characters
using the {@link StandardCharsets#UTF_8 UTF-8} {@link Charset charset}.

<p> This method works as if invoking it were equivalent to evaluating the
expression:
<pre>{@code
Files.readAllLines(path, StandardCharsets.UTF_8)
}</pre>

@param   path
         the path to the file

@return  the lines from the file as a {@code List}; whether the {@code
         List} is modifiable or not is implementation dependent and
         therefore not specified

@throws  IOException
         if an I/O error occurs reading from the file or a malformed or
         unmappable byte sequence is read
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file.

@since 1.8
"
      end

      operation 7836162 "write"
	class_operation public return_type class_ref 923650 // Path
	nparams 3
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "bytes" explicit_type "byte"
	multiplicity "[]"
	  param inout name "" explicit_type "OpenOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes bytes to a file. The {@code options} parameter specifies how the
the file is created or opened. If no options are present then this method
works as if the {@link StandardOpenOption#CREATE CREATE}, {@link
StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING}, and {@link
StandardOpenOption#WRITE WRITE} options are present. In other words, it
opens the file for writing, creating the file if it doesn't exist, or
initially truncating an existing {@link #isRegularFile regular-file} to
a size of {@code 0}. All bytes in the byte array are written to the file.
The method ensures that the file is closed when all bytes have been
written (or an I/O error or other runtime exception is thrown). If an I/O
error occurs then it may do so after the file has created or truncated,
or after some bytes have been written to the file.

<p> <b>Usage example</b>: By default the method creates a new file or
overwrites an existing file. Suppose you instead want to append bytes
to an existing file:
<pre>
    Path path = ...
    byte[] bytes = ...
    Files.write(path, bytes, StandardOpenOption.APPEND);
</pre>

@param   path
         the path to the file
@param   bytes
         the byte array with the bytes to write
@param   options
         options specifying how the file is opened

@return  the path

@throws  IOException
         if an I/O error occurs writing to or creating the file
@throws  UnsupportedOperationException
         if an unsupported option is specified
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to the file.
"
      end

      operation 7836290 "write"
	class_operation public return_type class_ref 923650 // Path
	nparams 4
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "lines" type class_ref 184322 // Iterable
	  param inout name "cs" type class_ref 853634 // Charset
	  param inout name "" explicit_type "OpenOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends CharSequence> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write lines of text to a file. Each line is a char sequence and is
written to the file in sequence with each line terminated by the
platform's line separator, as defined by the system property {@code
line.separator}. Characters are encoded into bytes using the specified
charset.

<p> The {@code options} parameter specifies how the the file is created
or opened. If no options are present then this method works as if the
{@link StandardOpenOption#CREATE CREATE}, {@link
StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING}, and {@link
StandardOpenOption#WRITE WRITE} options are present. In other words, it
opens the file for writing, creating the file if it doesn't exist, or
initially truncating an existing {@link #isRegularFile regular-file} to
a size of {@code 0}. The method ensures that the file is closed when all
lines have been written (or an I/O error or other runtime exception is
thrown). If an I/O error occurs then it may do so after the file has
created or truncated, or after some bytes have been written to the file.

@param   path
         the path to the file
@param   lines
         an object to iterate over the char sequences
@param   cs
         the charset to use for encoding
@param   options
         options specifying how the file is opened

@return  the path

@throws  IOException
         if an I/O error occurs writing to or creating the file, or the
         text cannot be encoded using the specified charset
@throws  UnsupportedOperationException
         if an unsupported option is specified
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to the file.
"
      end

      operation 7836418 "write"
	class_operation public return_type class_ref 923650 // Path
	nparams 3
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "lines" type class_ref 184322 // Iterable
	  param inout name "" explicit_type "OpenOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends CharSequence> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write lines of text to a file. Characters are encoded into bytes using
the {@link StandardCharsets#UTF_8 UTF-8} {@link Charset charset}.

<p> This method works as if invoking it were equivalent to evaluating the
expression:
<pre>{@code
Files.write(path, lines, StandardCharsets.UTF_8, options);
}</pre>

@param   path
         the path to the file
@param   lines
         an object to iterate over the char sequences
@param   options
         options specifying how the file is opened

@return  the path

@throws  IOException
         if an I/O error occurs writing to or creating the file, or the
         text cannot be encoded as {@code UTF-8}
@throws  UnsupportedOperationException
         if an unsupported option is specified
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to the file.

@since 1.8
"
      end

      operation 7836546 "list"
	class_operation public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "dir" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Path> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Stream APIs --

Return a lazily populated {@code Stream}, the elements of
which are the entries in the directory.  The listing is not recursive.

<p> The elements of the stream are {@link Path} objects that are
obtained as if by {@link Path#resolve(Path) resolving} the name of the
directory entry against {@code dir}. Some file systems maintain special
links to the directory itself and the directory's parent directory.
Entries representing these links are not included.

<p> The stream is <i>weakly consistent</i>. It is thread safe but does
not freeze the directory while iterating, so it may (or may not)
reflect updates to the directory that occur after returning from this
method.

<p> The returned stream encapsulates a {@link DirectoryStream}.
If timely disposal of file system resources is required, the
{@code try}-with-resources construct should be used to ensure that the
stream's {@link Stream#close close} method is invoked after the stream
operations are completed.

<p> Operating on a closed stream behaves as if the end of stream
has been reached. Due to read-ahead, one or more elements may be
returned after the stream has been closed.

<p> If an {@link IOException} is thrown when accessing the directory
after this method has returned, it is wrapped in an {@link
UncheckedIOException} which will be thrown from the method that caused
the access to take place.

@param   dir  The path to the directory

@return  The {@code Stream} describing the content of the
         directory

@throws  NotDirectoryException
         if the file could not otherwise be opened because it is not
         a directory <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs when opening the directory
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the directory.

@see     #newDirectoryStream(Path)
@since   1.8
"
      end

      operation 7836674 "walk"
	class_operation public return_type class_ref 184706 // Stream
	nparams 3
	  param inout name "start" type class_ref 923650 // Path
	  param in name "maxDepth" explicit_type "int"
	  param inout name "" explicit_type "FileVisitOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Path> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a {@code Stream} that is lazily populated with {@code
Path} by walking the file tree rooted at a given starting file.  The
file tree is traversed <em>depth-first</em>, the elements in the stream
are {@link Path} objects that are obtained as if by {@link
Path#resolve(Path) resolving} the relative path against {@code start}.

<p> The {@code stream} walks the file tree as elements are consumed.
The {@code Stream} returned is guaranteed to have at least one
element, the starting file itself. For each file visited, the stream
attempts to read its {@link BasicFileAttributes}. If the file is a
directory and can be opened successfully, entries in the directory, and
their <em>descendants</em> will follow the directory in the stream as
they are encountered. When all entries have been visited, then the
directory is closed. The file tree walk then continues at the next
<em>sibling</em> of the directory.

<p> The stream is <i>weakly consistent</i>. It does not freeze the
file tree while iterating, so it may (or may not) reflect updates to
the file tree that occur after returned from this method.

<p> By default, symbolic links are not automatically followed by this
method. If the {@code options} parameter contains the {@link
FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then symbolic links are
followed. When following links, and the attributes of the target cannot
be read, then this method attempts to get the {@code BasicFileAttributes}
of the link.

<p> If the {@code options} parameter contains the {@link
FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then the stream keeps
track of directories visited so that cycles can be detected. A cycle
arises when there is an entry in a directory that is an ancestor of the
directory. Cycle detection is done by recording the {@link
java.nio.file.attribute.BasicFileAttributes#fileKey file-key} of directories,
or if file keys are not available, by invoking the {@link #isSameFile
isSameFile} method to test if a directory is the same file as an
ancestor. When a cycle is detected it is treated as an I/O error with
an instance of {@link FileSystemLoopException}.

<p> The {@code maxDepth} parameter is the maximum number of levels of
directories to visit. A value of {@code 0} means that only the starting
file is visited, unless denied by the security manager. A value of
{@link Integer#MAX_VALUE MAX_VALUE} may be used to indicate that all
levels should be visited.

<p> When a security manager is installed and it denies access to a file
(or directory), then it is ignored and not included in the stream.

<p> The returned stream encapsulates one or more {@link DirectoryStream}s.
If timely disposal of file system resources is required, the
{@code try}-with-resources construct should be used to ensure that the
stream's {@link Stream#close close} method is invoked after the stream
operations are completed.  Operating on a closed stream will result in an
{@link java.lang.IllegalStateException}.

<p> If an {@link IOException} is thrown when accessing the directory
after this method has returned, it is wrapped in an {@link
UncheckedIOException} which will be thrown from the method that caused
the access to take place.

@param   start
         the starting file
@param   maxDepth
         the maximum number of directory levels to visit
@param   options
         options to configure the traversal

@return  the {@link Stream} of {@link Path}

@throws  IllegalArgumentException
         if the {@code maxDepth} parameter is negative
@throws  SecurityException
         If the security manager denies access to the starting file.
         In the case of the default provider, the {@link
         SecurityManager#checkRead(String) checkRead} method is invoked
         to check read access to the directory.
@throws  IOException
         if an I/O error is thrown when accessing the starting file.
@since   1.8
"
      end

      operation 7836802 "walk"
	class_operation public return_type class_ref 184706 // Stream
	nparams 2
	  param inout name "start" type class_ref 923650 // Path
	  param inout name "" explicit_type "FileVisitOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Path> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a {@code Stream} that is lazily populated with {@code
Path} by walking the file tree rooted at a given starting file.  The
file tree is traversed <em>depth-first</em>, the elements in the stream
are {@link Path} objects that are obtained as if by {@link
Path#resolve(Path) resolving} the relative path against {@code start}.

<p> This method works as if invoking it were equivalent to evaluating the
expression:
<blockquote><pre>
walk(start, Integer.MAX_VALUE, options)
</pre></blockquote>
In other words, it visits all levels of the file tree.

<p> The returned stream encapsulates one or more {@link DirectoryStream}s.
If timely disposal of file system resources is required, the
{@code try}-with-resources construct should be used to ensure that the
stream's {@link Stream#close close} method is invoked after the stream
operations are completed.  Operating on a closed stream will result in an
{@link java.lang.IllegalStateException}.

@param   start
         the starting file
@param   options
         options to configure the traversal

@return  the {@link Stream} of {@link Path}

@throws  SecurityException
         If the security manager denies access to the starting file.
         In the case of the default provider, the {@link
         SecurityManager#checkRead(String) checkRead} method is invoked
         to check read access to the directory.
@throws  IOException
         if an I/O error is thrown when accessing the starting file.

@see     #walk(Path, int, FileVisitOption...)
@since   1.8
"
      end

      operation 7836930 "find"
	class_operation public return_type class_ref 184706 // Stream
	nparams 4
	  param inout name "start" type class_ref 923650 // Path
	  param in name "maxDepth" explicit_type "int"
	  param inout name "matcher" type class_ref 996610 // BiPredicate
	  param inout name "" explicit_type "FileVisitOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Path> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<Path, BasicFileAttributes> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a {@code Stream} that is lazily populated with {@code
Path} by searching for files in a file tree rooted at a given starting
file.

<p> This method walks the file tree in exactly the manner specified by
the {@link #walk walk} method. For each file encountered, the given
{@link BiPredicate} is invoked with its {@link Path} and {@link
BasicFileAttributes}. The {@code Path} object is obtained as if by
{@link Path#resolve(Path) resolving} the relative path against {@code
start} and is only included in the returned {@link Stream} if
the {@code BiPredicate} returns true. Compare to calling {@link
java.util.stream.Stream#filter filter} on the {@code Stream}
returned by {@code walk} method, this method may be more efficient by
avoiding redundant retrieval of the {@code BasicFileAttributes}.

<p> The returned stream encapsulates one or more {@link DirectoryStream}s.
If timely disposal of file system resources is required, the
{@code try}-with-resources construct should be used to ensure that the
stream's {@link Stream#close close} method is invoked after the stream
operations are completed.  Operating on a closed stream will result in an
{@link java.lang.IllegalStateException}.

<p> If an {@link IOException} is thrown when accessing the directory
after returned from this method, it is wrapped in an {@link
UncheckedIOException} which will be thrown from the method that caused
the access to take place.

@param   start
         the starting file
@param   maxDepth
         the maximum number of directory levels to search
@param   matcher
         the function used to decide whether a file should be included
         in the returned stream
@param   options
         options to configure the traversal

@return  the {@link Stream} of {@link Path}

@throws  IllegalArgumentException
         if the {@code maxDepth} parameter is negative
@throws  SecurityException
         If the security manager denies access to the starting file.
         In the case of the default provider, the {@link
         SecurityManager#checkRead(String) checkRead} method is invoked
         to check read access to the directory.
@throws  IOException
         if an I/O error is thrown when accessing the starting file.

@see     #walk(Path, int, FileVisitOption...)
@since   1.8
"
      end

      operation 7837058 "lines"
	class_operation public return_type class_ref 184706 // Stream
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "cs" type class_ref 853634 // Charset
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read all lines from a file as a {@code Stream}. Unlike {@link
#readAllLines(Path, Charset) readAllLines}, this method does not read
all lines into a {@code List}, but instead populates lazily as the stream
is consumed.

<p> Bytes from the file are decoded into characters using the specified
charset and the same line terminators as specified by {@code
readAllLines} are supported.

<p> After this method returns, then any subsequent I/O exception that
occurs while reading from the file or when a malformed or unmappable byte
sequence is read, is wrapped in an {@link UncheckedIOException} that will
be thrown from the
{@link java.util.stream.Stream} method that caused the read to take
place. In case an {@code IOException} is thrown when closing the file,
it is also wrapped as an {@code UncheckedIOException}.

<p> The returned stream encapsulates a {@link Reader}.  If timely
disposal of file system resources is required, the try-with-resources
construct should be used to ensure that the stream's
{@link Stream#close close} method is invoked after the stream operations
are completed.


@param   path
         the path to the file
@param   cs
         the charset to use for decoding

@return  the lines from the file as a {@code Stream}

@throws  IOException
         if an I/O error occurs opening the file
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file.

@see     #readAllLines(Path, Charset)
@see     #newBufferedReader(Path, Charset)
@see     java.io.BufferedReader#lines()
@since   1.8
"
      end

      operation 7837186 "lines"
	class_operation public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read all lines from a file as a {@code Stream}. Bytes from the file are
decoded into characters using the {@link StandardCharsets#UTF_8 UTF-8}
{@link Charset charset}.

<p> This method works as if invoking it were equivalent to evaluating the
expression:
<pre>{@code
Files.lines(path, StandardCharsets.UTF_8)
}</pre>

@param   path
         the path to the file

@return  the lines from the file as a {@code Stream}

@throws  IOException
         if an I/O error occurs opening the file
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file.

@since 1.8
"
      end
    end

    class 995714 "FileStore"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Storage for files. A {@code FileStore} represents a storage pool, device,
partition, volume, concrete file system or other implementation specific means
of file storage. The {@code FileStore} for where a file is stored is obtained
by invoking the {@link Files#getFileStore getFileStore} method, or all file
stores can be enumerated by invoking the {@link FileSystem#getFileStores
getFileStores} method.

<p> In addition to the methods defined by this class, a file store may support
one or more {@link FileStoreAttributeView FileStoreAttributeView} classes
that provide a read-only or updatable view of a set of file store attributes.

@since 1.7
"
      operation 7837314 "FileStore"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.
"
      end

      operation 7837442 "name"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this file store. The format of the name is highly
implementation specific. It will typically be the name of the storage
pool or volume.

<p> The string returned by this method may differ from the string
returned by the {@link Object#toString() toString} method.

@return  the name of this file store
"
      end

      operation 7837570 "type"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <em>type</em> of this file store. The format of the string
returned by this method is highly implementation specific. It may
indicate, for example, the format used or if the file store is local
or remote.

@return  a string representing the type of this file store
"
      end

      operation 7837698 "isReadOnly"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this file store is read-only. A file store is read-only if
it does not support write operations or other changes to files. Any
attempt to create a file, open an existing file for writing etc. causes
an {@code IOException} to be thrown.

@return  {@code true} if, and only if, this file store is read-only
"
      end

      operation 7837826 "getTotalSpace"
	abstract public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size, in bytes, of the file store.

@return  the size of the file store, in bytes

@throws  IOException
         if an I/O error occurs
"
      end

      operation 7837954 "getUsableSpace"
	abstract public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes available to this Java virtual machine on the
file store.

<p> The returned number of available bytes is a hint, but not a
guarantee, that it is possible to use most or any of these bytes.  The
number of usable bytes is most likely to be accurate immediately
after the space attributes are obtained. It is likely to be made inaccurate
by any external I/O operations including those made on the system outside
of this Java virtual machine.

@return  the number of bytes available

@throws  IOException
         if an I/O error occurs
"
      end

      operation 7838082 "getUnallocatedSpace"
	abstract public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of unallocated bytes in the file store.

<p> The returned number of unallocated bytes is a hint, but not a
guarantee, that it is possible to use most or any of these bytes.  The
number of unallocated bytes is most likely to be accurate immediately
after the space attributes are obtained. It is likely to be
made inaccurate by any external I/O operations including those made on
the system outside of this virtual machine.

@return  the number of unallocated bytes

@throws  IOException
         if an I/O error occurs
"
      end

      operation 7838210 "supportsFileAttributeView"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "type" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends FileAttributeView> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this file store supports the file attributes
identified by the given file attribute view.

<p> Invoking this method to test if the file store supports {@link
BasicFileAttributeView} will always return {@code true}. In the case of
the default provider, this method cannot guarantee to give the correct
result when the file store is not a local storage device. The reasons for
this are implementation specific and therefore unspecified.

@param   type
         the file attribute view type

@return  {@code true} if, and only if, the file attribute view is
         supported
"
      end

      operation 7838338 "supportsFileAttributeView"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this file store supports the file attributes
identified by the given file attribute view.

<p> Invoking this method to test if the file store supports {@link
BasicFileAttributeView}, identified by the name \"{@code basic}\" will
always return {@code true}. In the case of the default provider, this
method cannot guarantee to give the correct result when the file store is
not a local storage device. The reasons for this are implementation
specific and therefore unspecified.

@param   name
         the {@link FileAttributeView#name name} of file attribute view

@return  {@code true} if, and only if, the file attribute view is
         supported
"
      end

      operation 7838466 "getFileStoreAttributeView"
	abstract public explicit_return_type "V"
	nparams 1
	  param inout name "type" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V extends FileStoreAttributeView> ${type} ${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code FileStoreAttributeView} of the given type.

<p> This method is intended to be used where the file store attribute
view defines type-safe methods to read or update the file store attributes.
The {@code type} parameter is the type of the attribute view required and
the method returns an instance of that type if supported.

@param   <V>
         The {@code FileStoreAttributeView} type
@param   type
         the {@code Class} object corresponding to the attribute view

@return  a file store attribute view of the specified type or
         {@code null} if the attribute view is not available
"
      end

      operation 7838594 "getAttribute"
	abstract public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "attribute" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the value of a file store attribute.

<p> The {@code attribute} parameter identifies the attribute to be read
and takes the form:
<blockquote>
<i>view-name</i><b>:</b><i>attribute-name</i>
</blockquote>
where the character {@code ':'} stands for itself.

<p> <i>view-name</i> is the {@link FileStoreAttributeView#name name} of
a {@link FileStore AttributeView} that identifies a set of file attributes.
<i>attribute-name</i> is the name of the attribute.

<p> <b>Usage Example:</b>
Suppose we want to know if ZFS compression is enabled (assuming the \"zfs\"
view is supported):
<pre>
   boolean compression = (Boolean)fs.getAttribute(\"zfs:compression\");
</pre>

@param   attribute
         the attribute to read

@return  the attribute value; {@code null} may be a valid valid for some
         attributes

@throws  UnsupportedOperationException
         if the attribute view is not available or it does not support
         reading the attribute
@throws  IOException
         if an I/O error occurs
"
      end
    end

    class 996482 "FileVisitor"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A visitor of files. An implementation of this interface is provided to the
{@link Files#walkFileTree Files.walkFileTree} methods to visit each file in
a file tree.

<p> <b>Usage Examples:</b>
Suppose we want to delete a file tree. In that case, each directory should
be deleted after the entries in the directory are deleted.
<pre>
    Path start = ...
    Files.walkFileTree(start, new SimpleFileVisitor&lt;Path&gt;() {
        &#64;Override
        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
            throws IOException
        {
            Files.delete(file);
            return FileVisitResult.CONTINUE;
        }
        &#64;Override
        public FileVisitResult postVisitDirectory(Path dir, IOException e)
            throws IOException
        {
            if (e == null) {
                Files.delete(dir);
                return FileVisitResult.CONTINUE;
            } else {
                // directory iteration failed
                throw e;
            }
        }
    });
</pre>
<p> Furthermore, suppose we want to copy a file tree to a target location.
In that case, symbolic links should be followed and the target directory
should be created before the entries in the directory are copied.
<pre>
    final Path source = ...
    final Path target = ...

    Files.walkFileTree(source, EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,
        new SimpleFileVisitor&lt;Path&gt;() {
            &#64;Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
                throws IOException
            {
                Path targetdir = target.resolve(source.relativize(dir));
                try {
                    Files.copy(dir, targetdir);
                } catch (FileAlreadyExistsException e) {
                     if (!Files.isDirectory(targetdir))
                         throw e;
                }
                return CONTINUE;
            }
            &#64;Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
                throws IOException
            {
                Files.copy(file, target.resolve(source.relativize(file)));
                return CONTINUE;
            }
        });
</pre>

@since 1.7
"
      operation 7845762 "preVisitDirectory"
	cpp_inline public return_type class_ref 999042 // FileVisitResult
	nparams 2
	  param inout name "dir" explicit_type "T"
	  param inout name "attrs" type class_ref 998786 // BasicFileAttributes
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked for a directory before entries in the directory are visited.

<p> If this method returns {@link FileVisitResult#CONTINUE CONTINUE},
then entries in the directory are visited. If this method returns {@link
FileVisitResult#SKIP_SUBTREE SKIP_SUBTREE} or {@link
FileVisitResult#SKIP_SIBLINGS SKIP_SIBLINGS} then entries in the
directory (and any descendants) will not be visited.

@param   dir
         a reference to the directory
@param   attrs
         the directory's basic attributes

@return  the visit result

@throws  IOException
         if an I/O error occurs
"
      end

      operation 7845890 "visitFile"
	cpp_inline public return_type class_ref 999042 // FileVisitResult
	nparams 2
	  param inout name "file" explicit_type "T"
	  param inout name "attrs" type class_ref 998786 // BasicFileAttributes
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked for a file in a directory.

@param   file
         a reference to the file
@param   attrs
         the file's basic attributes

@return  the visit result

@throws  IOException
         if an I/O error occurs
"
      end

      operation 7846018 "visitFileFailed"
	cpp_inline public return_type class_ref 999042 // FileVisitResult
	nparams 2
	  param inout name "file" explicit_type "T"
	  param inout name "exc" type class_ref 146818 // IOException
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked for a file that could not be visited. This method is invoked
if the file's attributes could not be read, the file is a directory
that could not be opened, and other reasons.

@param   file
         a reference to the file
@param   exc
         the I/O exception that prevented the file from being visited

@return  the visit result

@throws  IOException
         if an I/O error occurs
"
      end

      operation 7846146 "postVisitDirectory"
	cpp_inline public return_type class_ref 999042 // FileVisitResult
	nparams 2
	  param inout name "dir" explicit_type "T"
	  param inout name "exc" type class_ref 146818 // IOException
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked for a directory after entries in the directory, and all of their
descendants, have been visited. This method is also invoked when iteration
of the directory completes prematurely (by a {@link #visitFile visitFile}
method returning {@link FileVisitResult#SKIP_SIBLINGS SKIP_SIBLINGS},
or an I/O error when iterating over the directory).

@param   dir
         a reference to the directory
@param   exc
         {@code null} if the iteration of the directory completes without
         an error; otherwise the I/O exception that caused the iteration
         of the directory to complete prematurely

@return  the visit result

@throws  IOException
         if an I/O error occurs
"
      end
    end

    class 996738 "FileSystem"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides an interface to a file system and is the factory for objects to
access files and other objects in the file system.

<p> The default file system, obtained by invoking the {@link FileSystems#getDefault
FileSystems.getDefault} method, provides access to the file system that is
accessible to the Java virtual machine. The {@link FileSystems} class defines
methods to create file systems that provide access to other types of (custom)
file systems.

<p> A file system is the factory for several types of objects:

<ul>
  <li><p> The {@link #getPath getPath} method converts a system dependent
    <em>path string</em>, returning a {@link Path} object that may be used
    to locate and access a file. </p></li>
  <li><p> The {@link #getPathMatcher  getPathMatcher} method is used
    to create a {@link PathMatcher} that performs match operations on
    paths. </p></li>
  <li><p> The {@link #getFileStores getFileStores} method returns an iterator
    over the underlying {@link FileStore file-stores}. </p></li>
  <li><p> The {@link #getUserPrincipalLookupService getUserPrincipalLookupService}
    method returns the {@link UserPrincipalLookupService} to lookup users or
    groups by name. </p></li>
  <li><p> The {@link #newWatchService newWatchService} method creates a
    {@link WatchService} that may be used to watch objects for changes and
    events. </p></li>
</ul>

<p> File systems vary greatly. In some cases the file system is a single
hierarchy of files with one top-level root directory. In other cases it may
have several distinct file hierarchies, each with its own top-level root
directory. The {@link #getRootDirectories getRootDirectories} method may be
used to iterate over the root directories in the file system. A file system
is typically composed of one or more underlying {@link FileStore file-stores}
that provide the storage for the files. Theses file stores can also vary in
the features they support, and the file attributes or <em>meta-data</em> that
they associate with files.

<p> A file system is open upon creation and can be closed by invoking its
{@link #close() close} method. Once closed, any further attempt to access
objects in the file system cause {@link ClosedFileSystemException} to be
thrown. File systems created by the default {@link FileSystemProvider provider}
cannot be closed.

<p> A {@code FileSystem} can provide read-only or read-write access to the
file system. Whether or not a file system provides read-only access is
established when the {@code FileSystem} is created and can be tested by invoking
its {@link #isReadOnly() isReadOnly} method. Attempts to write to file stores
by means of an object associated with a read-only file system throws {@link
ReadOnlyFileSystemException}.

<p> File systems are safe for use by multiple concurrent threads. The {@link
#close close} method may be invoked at any time to close a file system but
whether a file system is <i>asynchronously closeable</i> is provider specific
and therefore unspecified. In other words, if a thread is accessing an
object in a file system, and another thread invokes the {@code close} method
then it may require to block until the first operation is complete. Closing
a file system causes all open channels, watch services, and other {@link
Closeable closeable} objects associated with the file system to be closed.

@since 1.7
"
      classrelation 3311106 // <realization>
	relation 3311106 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3311106 // <realization>
	  b parent class_ref 146562 // Closeable
      end

      operation 7838722 "FileSystem"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.
"
      end

      operation 7838850 "provider"
	abstract public return_type class_ref 995458 // FileSystemProvider
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider that created this file system.

@return  The provider that created this file system.
"
      end

      operation 7838978 "close"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this file system.

<p> After a file system is closed then all subsequent access to the file
system, either by methods defined by this class or on objects associated
with this file system, throw {@link ClosedFileSystemException}. If the
file system is already closed then invoking this method has no effect.

<p> Closing a file system will close all open {@link
java.nio.channels.Channel channels}, {@link DirectoryStream directory-streams},
{@link WatchService watch-service}, and other closeable objects associated
with this file system. The {@link FileSystems#getDefault default} file
system cannot be closed.

@throws  IOException
         If an I/O error occurs
@throws  UnsupportedOperationException
         Thrown in the case of the default file system
"
      end

      operation 7839106 "isOpen"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this file system is open.

<p> File systems created by the default provider are always open.

@return  {@code true} if, and only if, this file system is open
"
      end

      operation 7839234 "isReadOnly"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this file system allows only read-only access to
its file stores.

@return  {@code true} if, and only if, this file system provides
         read-only access
"
      end

      operation 7839362 "getSeparator"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name separator, represented as a string.

<p> The name separator is used to separate names in a path string. An
implementation may support multiple name separators in which case this
method returns an implementation specific <em>default</em> name separator.
This separator is used when creating path strings by invoking the {@link
Path#toString() toString()} method.

<p> In the case of the default provider, this method returns the same
separator as {@link java.io.File#separator}.

@return  The name separator
"
      end

      operation 7839490 "getRootDirectories"
	abstract public return_type class_ref 184322 // Iterable
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Path> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object to iterate over the paths of the root directories.

<p> A file system provides access to a file store that may be composed
of a number of distinct file hierarchies, each with its own top-level
root directory. Unless denied by the security manager, each element in
the returned iterator corresponds to the root directory of a distinct
file hierarchy. The order of the elements is not defined. The file
hierarchies may change during the lifetime of the Java virtual machine.
For example, in some implementations, the insertion of removable media
may result in the creation of a new file hierarchy with its own
top-level directory.

<p> When a security manager is installed, it is invoked to check access
to the each root directory. If denied, the root directory is not returned
by the iterator. In the case of the default provider, the {@link
SecurityManager#checkRead(String)} method is invoked to check read access
to each root directory. It is system dependent if the permission checks
are done when the iterator is obtained or during iteration.

@return  An object to iterate over the root directories
"
      end

      operation 7839618 "getFileStores"
	abstract public return_type class_ref 184322 // Iterable
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<FileStore> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object to iterate over the underlying file stores.

<p> The elements of the returned iterator are the {@link
FileStore FileStores} for this file system. The order of the elements is
not defined and the file stores may change during the lifetime of the
Java virtual machine. When an I/O error occurs, perhaps because a file
store is not accessible, then it is not returned by the iterator.

<p> In the case of the default provider, and a security manager is
installed, the security manager is invoked to check {@link
RuntimePermission}<tt>(\"getFileStoreAttributes\")</tt>. If denied, then
no file stores are returned by the iterator. In addition, the security
manager's {@link SecurityManager#checkRead(String)} method is invoked to
check read access to the file store's <em>top-most</em> directory. If
denied, the file store is not returned by the iterator. It is system
dependent if the permission checks are done when the iterator is obtained
or during iteration.

<p> <b>Usage Example:</b>
Suppose we want to print the space usage for all file stores:
<pre>
    for (FileStore store: FileSystems.getDefault().getFileStores()) {
        long total = store.getTotalSpace() / 1024;
        long used = (store.getTotalSpace() - store.getUnallocatedSpace()) / 1024;
        long avail = store.getUsableSpace() / 1024;
        System.out.format(\"%-20s %12d %12d %12d%n\", store, total, used, avail);
    }
</pre>

@return  An object to iterate over the backing file stores
"
      end

      operation 7839746 "supportedFileAttributeViews"
	abstract public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of the {@link FileAttributeView#name names} of the file
attribute views supported by this {@code FileSystem}.

<p> The {@link BasicFileAttributeView} is required to be supported and
therefore the set contains at least one element, \"basic\".

<p> The {@link FileStore#supportsFileAttributeView(String)
supportsFileAttributeView(String)} method may be used to test if an
underlying {@link FileStore} supports the file attributes identified by a
file attribute view.

@return  An unmodifiable set of the names of the supported file attribute
         views
"
      end

      operation 7839874 "getPath"
	abstract public return_type class_ref 923650 // Path
	nparams 2
	  param inout name "first" type class_ref 128130 // String
	  param inout name "" explicit_type "String...more"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a path string, or a sequence of strings that when joined form
a path string, to a {@code Path}. If {@code more} does not specify any
elements then the value of the {@code first} parameter is the path string
to convert. If {@code more} specifies one or more elements then each
non-empty string, including {@code first}, is considered to be a sequence
of name elements (see {@link Path}) and is joined to form a path string.
The details as to how the Strings are joined is provider specific but
typically they will be joined using the {@link #getSeparator
name-separator} as the separator. For example, if the name separator is
\"{@code /}\" and {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then the
path string {@code \"/foo/bar/gus\"} is converted to a {@code Path}.
A {@code Path} representing an empty path is returned if {@code first}
is the empty string and {@code more} does not contain any non-empty
strings.

<p> The parsing and conversion to a path object is inherently
implementation dependent. In the simplest case, the path string is rejected,
and {@link InvalidPathException} thrown, if the path string contains
characters that cannot be converted to characters that are <em>legal</em>
to the file store. For example, on UNIX systems, the NUL (&#92;u0000)
character is not allowed to be present in a path. An implementation may
choose to reject path strings that contain names that are longer than those
allowed by any file store, and where an implementation supports a complex
path syntax, it may choose to reject path strings that are <em>badly
formed</em>.

<p> In the case of the default provider, path strings are parsed based
on the definition of paths at the platform or virtual file system level.
For example, an operating system may not allow specific characters to be
present in a file name, but a specific underlying file store may impose
different or additional restrictions on the set of legal
characters.

<p> This method throws {@link InvalidPathException} when the path string
cannot be converted to a path. Where possible, and where applicable,
the exception is created with an {@link InvalidPathException#getIndex
index} value indicating the first position in the {@code path} parameter
that caused the path string to be rejected.

@param   first
         the path string or initial part of the path string
@param   more
         additional strings to be joined to form the path string

@return  the resulting {@code Path}

@throws  InvalidPathException
         If the path string cannot be converted
"
      end

      operation 7840002 "getPathMatcher"
	abstract public return_type class_ref 996866 // PathMatcher
	nparams 1
	  param inout name "syntaxAndPattern" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code PathMatcher} that performs match operations on the
{@code String} representation of {@link Path} objects by interpreting a
given pattern.

The {@code syntaxAndPattern} parameter identifies the syntax and the
pattern and takes the form:
<blockquote><pre>
<i>syntax</i><b>:</b><i>pattern</i>
</pre></blockquote>
where {@code ':'} stands for itself.

<p> A {@code FileSystem} implementation supports the \"{@code glob}\" and
\"{@code regex}\" syntaxes, and may support others. The value of the syntax
component is compared without regard to case.

<p> When the syntax is \"{@code glob}\" then the {@code String}
representation of the path is matched using a limited pattern language
that resembles regular expressions but with a simpler syntax. For example:

<blockquote>
<table border=\"0\" summary=\"Pattern Language\">
<tr>
  <td>{@code *.java}</td>
  <td>Matches a path that represents a file name ending in {@code .java}</td>
</tr>
<tr>
  <td>{@code *.*}</td>
  <td>Matches file names containing a dot</td>
</tr>
<tr>
  <td>{@code *.{java,class}}</td>
  <td>Matches file names ending with {@code .java} or {@code .class}</td>
</tr>
<tr>
  <td>{@code foo.?}</td>
  <td>Matches file names starting with {@code foo.} and a single
  character extension</td>
</tr>
<tr>
  <td><tt>&#47;home&#47;*&#47;*</tt>
  <td>Matches <tt>&#47;home&#47;gus&#47;data</tt> on UNIX platforms</td>
</tr>
<tr>
  <td><tt>&#47;home&#47;**</tt>
  <td>Matches <tt>&#47;home&#47;gus</tt> and
  <tt>&#47;home&#47;gus&#47;data</tt> on UNIX platforms</td>
</tr>
<tr>
  <td><tt>C:&#92;&#92;*</tt>
  <td>Matches <tt>C:&#92;foo</tt> and <tt>C:&#92;bar</tt> on the Windows
  platform (note that the backslash is escaped; as a string literal in the
  Java Language the pattern would be <tt>\"C:&#92;&#92;&#92;&#92;*\"</tt>) </td>
</tr>

</table>
</blockquote>

<p> The following rules are used to interpret glob patterns:

<ul>
  <li><p> The {@code *} character matches zero or more {@link Character
  characters} of a {@link Path#getName(int) name} component without
  crossing directory boundaries. </p></li>

  <li><p> The {@code **} characters matches zero or more {@link Character
  characters} crossing directory boundaries. </p></li>

  <li><p> The {@code ?} character matches exactly one character of a
  name component.</p></li>

  <li><p> The backslash character ({@code \\}) is used to escape characters
  that would otherwise be interpreted as special characters. The expression
  {@code \\\\} matches a single backslash and \"\\{\" matches a left brace
  for example.  </p></li>

  <li><p> The {@code [ ]} characters are a <i>bracket expression</i> that
  match a single character of a name component out of a set of characters.
  For example, {@code [abc]} matches {@code \"a\"}, {@code \"b\"}, or {@code \"c\"}.
  The hyphen ({@code -}) may be used to specify a range so {@code [a-z]}
  specifies a range that matches from {@code \"a\"} to {@code \"z\"} (inclusive).
  These forms can be mixed so [abce-g] matches {@code \"a\"}, {@code \"b\"},
  {@code \"c\"}, {@code \"e\"}, {@code \"f\"} or {@code \"g\"}. If the character
  after the {@code [} is a {@code !} then it is used for negation so {@code
  [!a-c]} matches any character except {@code \"a\"}, {@code \"b\"}, or {@code
  \"c\"}.
  <p> Within a bracket expression the {@code *}, {@code ?} and {@code \\}
  characters match themselves. The ({@code -}) character matches itself if
  it is the first character within the brackets, or the first character
  after the {@code !} if negating.</p></li>

  <li><p> The {@code { }} characters are a group of subpatterns, where
  the group matches if any subpattern in the group matches. The {@code \",\"}
  character is used to separate the subpatterns. Groups cannot be nested.
  </p></li>

  <li><p> Leading period<tt>&#47;</tt>dot characters in file name are
  treated as regular characters in match operations. For example,
  the {@code \"*\"} glob pattern matches file name {@code \".login\"}.
  The {@link Files#isHidden} method may be used to test whether a file
  is considered hidden.
  </p></li>

  <li><p> All other characters match themselves in an implementation
  dependent manner. This includes characters representing any {@link
  FileSystem#getSeparator name-separators}. </p></li>

  <li><p> The matching of {@link Path#getRoot root} components is highly
  implementation-dependent and is not specified. </p></li>

</ul>

<p> When the syntax is \"{@code regex}\" then the pattern component is a
regular expression as defined by the {@link java.util.regex.Pattern}
class.

<p>  For both the glob and regex syntaxes, the matching details, such as
whether the matching is case sensitive, are implementation-dependent
and therefore not specified.

@param   syntaxAndPattern
         The syntax and pattern

@return  A path matcher that may be used to match paths against the pattern

@throws  IllegalArgumentException
         If the parameter does not take the form: {@code syntax:pattern}
@throws  java.util.regex.PatternSyntaxException
         If the pattern is invalid
@throws  UnsupportedOperationException
         If the pattern syntax is not known to the implementation

@see Files#newDirectoryStream(Path,String)
"
      end

      operation 7840130 "getUserPrincipalLookupService"
	abstract public return_type class_ref 996994 // UserPrincipalLookupService
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code UserPrincipalLookupService} for this file system
<i>(optional operation)</i>. The resulting lookup service may be used to
lookup user or group names.

<p> <b>Usage Example:</b>
Suppose we want to make \"joe\" the owner of a file:
<pre>
    UserPrincipalLookupService lookupService = FileSystems.getDefault().getUserPrincipalLookupService();
    Files.setOwner(path, lookupService.lookupPrincipalByName(\"joe\"));
</pre>

@throws  UnsupportedOperationException
         If this {@code FileSystem} does not does have a lookup service

@return  The {@code UserPrincipalLookupService} for this file system
"
      end

      operation 7840258 "newWatchService"
	abstract public return_type class_ref 997122 // WatchService
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@link WatchService} <i>(optional operation)</i>.

<p> This method constructs a new watch service that may be used to watch
registered objects for changes and events.

@return  a new watch service

@throws  UnsupportedOperationException
         If this {@code FileSystem} does not support watching file system
         objects for changes and events. This exception is not thrown
         by {@code FileSystems} created by the default provider.
@throws  IOException
         If an I/O error occurs
"
      end
    end

    class 996866 "PathMatcher"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface that is implemented by objects that perform match operations on
paths.

@since 1.7

@see FileSystem#getPathMatcher
@see Files#newDirectoryStream(Path,String)
"
      operation 7852034 "matches"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells if given path matches this matcher's pattern.

@param   path
         the path to match

@return  {@code true} if, and only if, the path matches this
         matcher's pattern
"
      end
    end

    class 997122 "WatchService"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A watch service that <em>watches</em> registered objects for changes and
events. For example a file manager may use a watch service to monitor a
directory for changes so that it can update its display of the list of files
when files are created or deleted.

<p> A {@link Watchable} object is registered with a watch service by invoking
its {@link Watchable#register register} method, returning a {@link WatchKey}
to represent the registration. When an event for an object is detected the
key is <em>signalled</em>, and if not currently signalled, it is queued to
the watch service so that it can be retrieved by consumers that invoke the
{@link #poll() poll} or {@link #take() take} methods to retrieve keys
and process events. Once the events have been processed the consumer
invokes the key's {@link WatchKey#reset reset} method to reset the key which
allows the key to be signalled and re-queued with further events.

<p> Registration with a watch service is cancelled by invoking the key's
{@link WatchKey#cancel cancel} method. A key that is queued at the time that
it is cancelled remains in the queue until it is retrieved. Depending on the
object, a key may be cancelled automatically. For example, suppose a
directory is watched and the watch service detects that it has been deleted
or its file system is no longer accessible. When a key is cancelled in this
manner it is signalled and queued, if not currently signalled. To ensure
that the consumer is notified the return value from the {@code reset}
method indicates if the key is valid.

<p> A watch service is safe for use by multiple concurrent consumers. To
ensure that only one consumer processes the events for a particular object at
any time then care should be taken to ensure that the key's {@code reset}
method is only invoked after its events have been processed. The {@link
#close close} method may be invoked at any time to close the service causing
any threads waiting to retrieve keys, to throw {@code
ClosedWatchServiceException}.

<p> File systems may report events faster than they can be retrieved or
processed and an implementation may impose an unspecified limit on the number
of events that it may accumulate. Where an implementation <em>knowingly</em>
discards events then it arranges for the key's {@link WatchKey#pollEvents
pollEvents} method to return an element with an event type of {@link
StandardWatchEventKinds#OVERFLOW OVERFLOW}. This event can be used by the
consumer as a trigger to re-examine the state of the object.

<p> When an event is reported to indicate that a file in a watched directory
has been modified then there is no guarantee that the program (or programs)
that have modified the file have completed. Care should be taken to coordinate
access with other programs that may be updating the file.
The {@link java.nio.channels.FileChannel FileChannel} class defines methods
to lock regions of a file against access by other programs.

<h2>Platform dependencies</h2>

<p> The implementation that observes events from the file system is intended
to map directly on to the native file event notification facility where
available, or to use a primitive mechanism, such as polling, when a native
facility is not available. Consequently, many of the details on how events
are detected, their timeliness, and whether their ordering is preserved are
highly implementation specific. For example, when a file in a watched
directory is modified then it may result in a single {@link
StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} event in some
implementations but several events in other implementations. Short-lived
files (meaning files that are deleted very quickly after they are created)
may not be detected by primitive implementations that periodically poll the
file system to detect changes.

<p> If a watched file is not located on a local storage device then it is
implementation specific if changes to the file can be detected. In particular,
it is not required that changes to files carried out on remote systems be
detected.

@since 1.7

@see FileSystem#newWatchService
"
      classrelation 3317378 // <generalisation>
	relation 3317378 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3317378 // <generalisation>
	  b parent class_ref 146562 // Closeable
      end

      operation 7857410 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this watch service.

<p> If a thread is currently blocked in the {@link #take take} or {@link
#poll(long,TimeUnit) poll} methods waiting for a key to be queued then
it immediately receives a {@link ClosedWatchServiceException}. Any
valid keys associated with this watch service are {@link WatchKey#isValid
invalidated}.

<p> After a watch service is closed, any further attempt to invoke
operations upon it will throw {@link ClosedWatchServiceException}.
If this watch service is already closed then invoking this method
has no effect.

@throws  IOException
         if an I/O error occurs
"
      end

      operation 7857538 "poll"
	public return_type class_ref 1000066 // WatchKey
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the next watch key, or {@code null} if none are
present.

@return  the next watch key, or {@code null}

@throws  ClosedWatchServiceException
         if this watch service is closed
"
      end

      operation 7857666 "poll"
	public return_type class_ref 1000066 // WatchKey
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the next watch key, waiting if necessary up to the
specified wait time if none are yet present.

@param   timeout
         how to wait before giving up, in units of unit
@param   unit
         a {@code TimeUnit} determining how to interpret the timeout
         parameter

@return  the next watch key, or {@code null}

@throws  ClosedWatchServiceException
         if this watch service is closed, or it is closed while waiting
         for the next key
@throws  InterruptedException
         if interrupted while waiting
"
      end

      operation 7857794 "take"
	public return_type class_ref 1000066 // WatchKey
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes next watch key, waiting if none are yet present.

@return  the next watch key

@throws  ClosedWatchServiceException
         if this watch service is closed, or it is closed while waiting
         for the next key
@throws  InterruptedException
         if interrupted while waiting
"
      end
    end

    class 997250 "FileSystemAlreadyExistsException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Runtime exception thrown when an attempt is made to create a file system that
already exists.
"
      classrelation 3311234 // <generalisation>
	relation 3311234 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3311234 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 1819394 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -5438419127181131148L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7840386 "FileSystemAlreadyExistsException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.
"
      end

      operation 7840514 "FileSystemAlreadyExistsException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   msg
         the detail message
"
      end
    end

    class 997378 "FileSystemLoopException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Checked exception thrown when a file system loop, or cycle, is encountered.

@since 1.7
@see Files#walkFileTree
"
      classrelation 3311362 // <generalisation>
	relation 3311362 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3311362 // <generalisation>
	  b parent class_ref 993410 // FileSystemException
      end

      attribute 1819522 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4843039591949217617L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7840642 "FileSystemLoopException"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   file
         a string identifying the file causing the cycle or {@code null} if
         not known
"
      end
    end

    class 997506 "FileSystemNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Runtime exception thrown when a file system cannot be found.
"
      classrelation 3311490 // <generalisation>
	relation 3311490 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3311490 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 1819650 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 7999581764446402397L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7840770 "FileSystemNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.
"
      end

      operation 7840898 "FileSystemNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   msg
         the detail message
"
      end
    end

    class 997634 "FileSystems"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Factory methods for file systems. This class defines the {@link #getDefault
getDefault} method to get the default file system and factory methods to
construct other types of file systems.

<p> The first invocation of any of the methods defined by this class causes
the default {@link FileSystemProvider provider} to be loaded. The default
provider, identified by the URI scheme \"file\", creates the {@link FileSystem}
that provides access to the file systems accessible to the Java virtual
machine. If the process of loading or initializing the default provider fails
then an unspecified error is thrown.

<p> The first invocation of the {@link FileSystemProvider#installedProviders
installedProviders} method, by way of invoking any of the {@code
newFileSystem} methods defined by this class, locates and loads all
installed file system providers. Installed providers are loaded using the
service-provider loading facility defined by the {@link ServiceLoader} class.
Installed providers are loaded using the system class loader. If the
system class loader cannot be found then the extension class loader is used;
if there is no extension class loader then the bootstrap class loader is used.
Providers are typically installed by placing them in a JAR file on the
application class path or in the extension directory, the JAR file contains a
provider-configuration file named {@code java.nio.file.spi.FileSystemProvider}
in the resource directory {@code META-INF/services}, and the file lists one or
more fully-qualified names of concrete subclass of {@link FileSystemProvider}
that have a zero argument constructor.
The ordering that installed providers are located is implementation specific.
If a provider is instantiated and its {@link FileSystemProvider#getScheme()
getScheme} returns the same URI scheme of a provider that was previously
instantiated then the most recently instantiated duplicate is discarded. URI
schemes are compared without regard to case. During construction a provider
may safely access files associated with the default provider but care needs
to be taken to avoid circular loading of other installed providers. If
circular loading of installed providers is detected then an unspecified error
is thrown.

<p> This class also defines factory methods that allow a {@link ClassLoader}
to be specified when locating a provider. As with installed providers, the
provider classes are identified by placing the provider configuration file
in the resource directory {@code META-INF/services}.

<p> If a thread initiates the loading of the installed file system providers
and another thread invokes a method that also attempts to load the providers
then the method will block until the loading completes.

@since 1.7
"
      operation 7841026 "FileSystems"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 997762 "DefaultFileSystemHolder"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3311618 // defaultFileSystem (<unidirectional association>)
	  relation 3311618 --->
	    a role_name "defaultFileSystem" init_value " defaultFileSystem()" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3311618 // defaultFileSystem (<unidirectional association>)
	    b parent class_ref 996738 // FileSystem
	end

	operation 7841154 "defaultFileSystem"
	  class_operation private return_type class_ref 996738 // FileSystem
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " returns default file system"
	end

	operation 7841282 "getDefaultProvider"
	  class_operation private return_type class_ref 995458 // FileSystemProvider
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " returns default provider"
	end
      end

      operation 7841410 "getDefault"
	class_operation public return_type class_ref 996738 // FileSystem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default {@code FileSystem}. The default file system creates
objects that provide access to the file systems accessible to the Java
virtual machine. The <em>working directory</em> of the file system is
the current user directory, named by the system property {@code user.dir}.
This allows for interoperability with the {@link java.io.File java.io.File}
class.

<p> The first invocation of any of the methods defined by this class
locates the default {@link FileSystemProvider provider} object. Where the
system property {@code java.nio.file.spi.DefaultFileSystemProvider} is
not defined then the default provider is a system-default provider that
is invoked to create the default file system.

<p> If the system property {@code java.nio.file.spi.DefaultFileSystemProvider}
is defined then it is taken to be a list of one or more fully-qualified
names of concrete provider classes identified by the URI scheme
{@code \"file\"}. Where the property is a list of more than one name then
the names are separated by a comma. Each class is loaded, using the system
class loader, and instantiated by invoking a one argument constructor
whose formal parameter type is {@code FileSystemProvider}. The providers
are loaded and instantiated in the order they are listed in the property.
If this process fails or a provider's scheme is not equal to {@code \"file\"}
then an unspecified error is thrown. URI schemes are normally compared
without regard to case but for the default provider, the scheme is
required to be {@code \"file\"}. The first provider class is instantiated
by invoking it with a reference to the system-default provider.
The second provider class is instantiated by invoking it with a reference
to the first provider instance. The third provider class is instantiated
by invoking it with a reference to the second instance, and so on. The
last provider to be instantiated becomes the default provider; its {@code
getFileSystem} method is invoked with the URI {@code \"file:///\"} to
get a reference to the default file system.

<p> Subsequent invocations of this method return the file system that was
returned by the first invocation.

@return  the default file system
"
      end

      operation 7841538 "getFileSystem"
	class_operation public return_type class_ref 996738 // FileSystem
	nparams 1
	  param inout name "uri" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reference to an existing {@code FileSystem}.

<p> This method iterates over the {@link FileSystemProvider#installedProviders()
installed} providers to locate the provider that is identified by the URI
{@link URI#getScheme scheme} of the given URI. URI schemes are compared
without regard to case. The exact form of the URI is highly provider
dependent. If found, the provider's {@link FileSystemProvider#getFileSystem
getFileSystem} method is invoked to obtain a reference to the {@code
FileSystem}.

<p> Once a file system created by this provider is {@link FileSystem#close
closed} it is provider-dependent if this method returns a reference to
the closed file system or throws {@link FileSystemNotFoundException}.
If the provider allows a new file system to be created with the same URI
as a file system it previously created then this method throws the
exception if invoked after the file system is closed (and before a new
instance is created by the {@link #newFileSystem newFileSystem} method).

<p> If a security manager is installed then a provider implementation
may require to check a permission before returning a reference to an
existing file system. In the case of the {@link FileSystems#getDefault
default} file system, no permission check is required.

@param   uri  the URI to locate the file system

@return  the reference to the file system

@throws  IllegalArgumentException
         if the pre-conditions for the {@code uri} parameter are not met
@throws  FileSystemNotFoundException
         if the file system, identified by the URI, does not exist
@throws  ProviderNotFoundException
         if a provider supporting the URI scheme is not installed
@throws  SecurityException
         if a security manager is installed and it denies an unspecified
         permission
"
      end

      operation 7841666 "newFileSystem"
	class_operation public return_type class_ref 996738 // FileSystem
	nparams 2
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "env" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new file system that is identified by a {@link URI}

<p> This method iterates over the {@link FileSystemProvider#installedProviders()
installed} providers to locate the provider that is identified by the URI
{@link URI#getScheme scheme} of the given URI. URI schemes are compared
without regard to case. The exact form of the URI is highly provider
dependent. If found, the provider's {@link FileSystemProvider#newFileSystem(URI,Map)
newFileSystem(URI,Map)} method is invoked to construct the new file system.

<p> Once a file system is {@link FileSystem#close closed} it is
provider-dependent if the provider allows a new file system to be created
with the same URI as a file system it previously created.

<p> <b>Usage Example:</b>
Suppose there is a provider identified by the scheme {@code \"memory\"}
installed:
<pre>
  Map&lt;String,String&gt; env = new HashMap&lt;&gt;();
  env.put(\"capacity\", \"16G\");
  env.put(\"blockSize\", \"4k\");
  FileSystem fs = FileSystems.newFileSystem(URI.create(\"memory:///?name=logfs\"), env);
</pre>

@param   uri
         the URI identifying the file system
@param   env
         a map of provider specific properties to configure the file system;
         may be empty

@return  a new file system

@throws  IllegalArgumentException
         if the pre-conditions for the {@code uri} parameter are not met,
         or the {@code env} parameter does not contain properties required
         by the provider, or a property value is invalid
@throws  FileSystemAlreadyExistsException
         if the file system has already been created
@throws  ProviderNotFoundException
         if a provider supporting the URI scheme is not installed
@throws  IOException
         if an I/O error occurs creating the file system
@throws  SecurityException
         if a security manager is installed and it denies an unspecified
         permission required by the file system provider implementation
"
      end

      operation 7841794 "newFileSystem"
	class_operation public return_type class_ref 996738 // FileSystem
	nparams 3
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "env" type class_ref 130178 // Map
	  param inout name "loader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new file system that is identified by a {@link URI}

<p> This method first attempts to locate an installed provider in exactly
the same manner as the {@link #newFileSystem(URI,Map) newFileSystem(URI,Map)}
method. If none of the installed providers support the URI scheme then an
attempt is made to locate the provider using the given class loader. If a
provider supporting the URI scheme is located then its {@link
FileSystemProvider#newFileSystem(URI,Map) newFileSystem(URI,Map)} is
invoked to construct the new file system.

@param   uri
         the URI identifying the file system
@param   env
         a map of provider specific properties to configure the file system;
         may be empty
@param   loader
         the class loader to locate the provider or {@code null} to only
         attempt to locate an installed provider

@return  a new file system

@throws  IllegalArgumentException
         if the pre-conditions for the {@code uri} parameter are not met,
         or the {@code env} parameter does not contain properties required
         by the provider, or a property value is invalid
@throws  FileSystemAlreadyExistsException
         if the URI scheme identifies an installed provider and the file
         system has already been created
@throws  ProviderNotFoundException
         if a provider supporting the URI scheme is not found
@throws  ServiceConfigurationError
         when an error occurs while loading a service provider
@throws  IOException
         an I/O error occurs creating the file system
@throws  SecurityException
         if a security manager is installed and it denies an unspecified
         permission required by the file system provider implementation
"
      end

      operation 7841922 "newFileSystem"
	class_operation public return_type class_ref 996738 // FileSystem
	nparams 2
	  param inout name "path" type class_ref 923650 // Path
	  param inout name "loader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FileSystem} to access the contents of a file as a
file system.

<p> This method makes use of specialized providers that create pseudo file
systems where the contents of one or more files is treated as a file
system.

<p> This method iterates over the {@link FileSystemProvider#installedProviders()
installed} providers. It invokes, in turn, each provider's {@link
FileSystemProvider#newFileSystem(Path,Map) newFileSystem(Path,Map)} method
with an empty map. If a provider returns a file system then the iteration
terminates and the file system is returned. If none of the installed
providers return a {@code FileSystem} then an attempt is made to locate
the provider using the given class loader. If a provider returns a file
system then the lookup terminates and the file system is returned.

@param   path
         the path to the file
@param   loader
         the class loader to locate the provider or {@code null} to only
         attempt to locate an installed provider

@return  a new file system

@throws  ProviderNotFoundException
         if a provider supporting this file type cannot be located
@throws  ServiceConfigurationError
         when an error occurs while loading a service provider
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         if a security manager is installed and it denies an unspecified
         permission
"
      end
    end

    class 997890 "FileTreeIterator"
      visibility package 
      nactuals 1
      actual class class_ref 132994 // Iterator
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An {@code Iterator to iterate over the nodes of a file tree.

<pre>{@code
    try (FileTreeIterator iterator = new FileTreeIterator(start, maxDepth, options)) {
        while (iterator.hasNext()) {
            Event ev = iterator.next();
            Path path = ev.file();
            BasicFileAttributes attrs = ev.attributes();
        }
    }
}</pre>
"
      classrelation 3311746 // <realization>
	relation 3311746 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3311746 // <realization>
	  b parent class_ref 132994 // Iterator
      end

      classrelation 3311874 // <realization>
	relation 3311874 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3311874 // <realization>
	  b parent class_ref 146562 // Closeable
      end

      classrelation 3312002 // walker (<unidirectional association>)
	relation 3312002 --->
	  a role_name "walker" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3312002 // walker (<unidirectional association>)
	  b parent class_ref 998018 // FileTreeWalker
      end

      classrelation 3312130 // next (<unidirectional association>)
	relation 3312130 --->
	  a role_name "next" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3312130 // next (<unidirectional association>)
	  b parent class_ref 998146 // Event
      end

      operation 7842050 "FileTreeIterator"
	package explicit_return_type ""
	nparams 3
	  param inout name "start" type class_ref 923650 // Path
	  param in name "maxDepth" explicit_type "int"
	  param inout name "" explicit_type "FileVisitOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new iterator to walk the file tree starting at the given file.

@throws  IllegalArgumentException
         if {@code maxDepth} is negative
@throws  IOException
         if an I/O errors occurs opening the starting file
@throws  SecurityException
         if the security manager denies access to the starting file
@throws  NullPointerException
         if {@code start} or {@code options} is {@ocde null} or
         the options array contains a {@code null} element
"
      end

      operation 7842178 "fetchNextIfNeeded"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7842306 "hasNext"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7842434 "next"
	public return_type class_ref 998146 // Event
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7842562 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 998018 "FileTreeWalker"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Walks a file tree, generating a sequence of events corresponding to the files
in the tree.

<pre>{@code
    Path top = ...
    Set<FileVisitOption> options = ...
    int maxDepth = ...

    try (FileTreeWalker walker = new FileTreeWalker(options, maxDepth)) {
        FileTreeWalker.Event ev = walker.walk(top);
        do {
            process(ev);
            ev = walker.next();
        } while (ev != null);
    }
}</pre>

@see Files#walkFileTree
"
      class 998146 "Event"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3313154 // type (<unidirectional association>)
	  relation 3313154 --->
	    a role_name "type" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3313154 // type (<unidirectional association>)
	    b parent class_ref 998658 // EventType
	end

	classrelation 3313282 // file (<unidirectional association>)
	  relation 3313282 --->
	    a role_name "file" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3313282 // file (<unidirectional association>)
	    b parent class_ref 923650 // Path
	end

	classrelation 3313410 // attrs (<unidirectional association>)
	  relation 3313410 --->
	    a role_name "attrs" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3313410 // attrs (<unidirectional association>)
	    b parent class_ref 998786 // BasicFileAttributes
	end

	classrelation 3313538 // ioe (<unidirectional association>)
	  relation 3313538 --->
	    a role_name "ioe" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3313538 // ioe (<unidirectional association>)
	    b parent class_ref 146818 // IOException
	end

	operation 7843586 "Event"
	  private explicit_return_type ""
	  nparams 4
	    param inout name "type" type class_ref 998658 // EventType
	    param inout name "file" type class_ref 923650 // Path
	    param inout name "attrs" type class_ref 998786 // BasicFileAttributes
	    param inout name "ioe" type class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7843714 "Event"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "type" type class_ref 998658 // EventType
	    param inout name "file" type class_ref 923650 // Path
	    param inout name "attrs" type class_ref 998786 // BasicFileAttributes
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7843842 "Event"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "type" type class_ref 998658 // EventType
	    param inout name "file" type class_ref 923650 // Path
	    param inout name "ioe" type class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7843970 "type"
	  package return_type class_ref 998658 // EventType
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7844098 "file"
	  package return_type class_ref 923650 // Path
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7844226 "attributes"
	  package return_type class_ref 998786 // BasicFileAttributes
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7844354 "ioeException"
	  package return_type class_ref 146818 // IOException
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3312258 // <realization>
	relation 3312258 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3312258 // <realization>
	  b parent class_ref 146562 // Closeable
      end

      attribute 1819778 "followLinks"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3312386 // linkOptions (<unidirectional association>)
	relation 3312386 --->
	  a role_name "linkOptions" multiplicity "[]" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3312386 // linkOptions (<unidirectional association>)
	  b parent class_ref 998274 // LinkOption
      end

      attribute 1819906 "maxDepth"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 998402 "DirectoryNode"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3312642 // dir (<unidirectional association>)
	  relation 3312642 --->
	    a role_name "dir" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3312642 // dir (<unidirectional association>)
	    b parent class_ref 923650 // Path
	end

	classrelation 3312770 // key (<unidirectional association>)
	  relation 3312770 --->
	    a role_name "key" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3312770 // key (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	classrelation 3312898 // stream (<unidirectional association>)
	  relation 3312898 --->
	    a role_name "stream" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Path> ${name}${value};
"
	      classrelation_ref 3312898 // stream (<unidirectional association>)
	    b parent class_ref 994946 // DirectoryStream
	end

	classrelation 3313026 // iterator (<unidirectional association>)
	  relation 3313026 --->
	    a role_name "iterator" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Path> ${name}${value};
"
	      classrelation_ref 3313026 // iterator (<unidirectional association>)
	    b parent class_ref 132994 // Iterator
	end

	attribute 1820162 "skipped"
	  private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7842690 "DirectoryNode"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "dir" type class_ref 923650 // Path
	    param inout name "key" type class_ref 129538 // Object
	    param inout name "stream" type class_ref 994946 // DirectoryStream
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<Path> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7842818 "directory"
	  package return_type class_ref 923650 // Path
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7842946 "key"
	  package return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7843074 "stream"
	  package return_type class_ref 994946 // DirectoryStream
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Path> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7843202 "iterator"
	  package return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Path> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7843330 "skip"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7843458 "skipped"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3312514 // stack (<unidirectional association>)
	relation 3312514 --->
	  a role_name "stack" init_value " new ArrayDeque<>()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<DirectoryNode> ${name}${value};
"
	    classrelation_ref 3312514 // stack (<unidirectional association>)
	  b parent class_ref 998530 // ArrayDeque
      end

      attribute 1820034 "closed"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 998658 "EventType"
	visibility package stereotype "enum"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1820290 "START_DIRECTORY"
	  public type class_ref 998658 // EventType
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Start of a directory

"
	end

	attribute 1820418 "END_DIRECTORY"
	  public type class_ref 998658 // EventType
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "End of a directory

"
	end

	attribute 1820546 "ENTRY"
	  public type class_ref 998658 // EventType
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "An entry in a directory
"
	end
      end

      operation 7844482 "FileTreeWalker"
	package explicit_return_type ""
	nparams 2
	  param inout name "options" type class_ref 184194 // Collection
	  param in name "maxDepth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<FileVisitOption> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code FileTreeWalker}.

@throws  IllegalArgumentException
         if {@code maxDepth} is negative
@throws  ClassCastException
         if (@code options} contains an element that is not a
         {@code FileVisitOption}
@throws  NullPointerException
         if {@code options} is {@ocde null} or the options
         array contains a {@code null} element
"
      end

      operation 7844610 "getAttributes"
	private return_type class_ref 998786 // BasicFileAttributes
	nparams 2
	  param inout name "file" type class_ref 923650 // Path
	  param inout name "canUseCached" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the attributes of the given file, taking into account whether
the walk is following sym links is not. The {@code canUseCached}
argument determines whether this method can use cached attributes.
"
      end

      operation 7844738 "wouldLoop"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "dir" type class_ref 923650 // Path
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if walking into the given directory would result in a
file system loop/cycle.
"
      end

      operation 7844866 "visit"
	private return_type class_ref 998146 // Event
	nparams 3
	  param inout name "entry" type class_ref 923650 // Path
	  param inout name "ignoreSecurityException" explicit_type "boolean"
	  param inout name "canUseCached" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits the given file, returning the {@code Event} corresponding to that
visit.

The {@code ignoreSecurityException} parameter determines whether
any SecurityException should be ignored or not. If a SecurityException
is thrown, and is ignored, then this method returns {@code null} to
mean that there is no event corresponding to a visit to the file.

The {@code canUseCached} parameter determines whether cached attributes
for the file can be used or not.
"
      end

      operation 7844994 "walk"
	package return_type class_ref 998146 // Event
	nparams 1
	  param inout name "file" type class_ref 923650 // Path
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Start walking from the given file.
"
      end

      operation 7845122 "next"
	package return_type class_ref 998146 // Event
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next Event or {@code null} if there are no more events or
the walker is closed.
"
      end

      operation 7845250 "pop"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pops the directory node that is the current top of the stack so that
there are no more events for the directory (including no END_DIRECTORY)
event. This method is a no-op if the stack is empty or the walker is
closed.
"
      end

      operation 7845378 "skipRemainingSiblings"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips the remaining entries in the directory at the top of the stack.
This method is a no-op if the stack is empty or the walker is closed.
"
      end

      operation 7845506 "isOpen"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if the walker is open.
"
      end

      operation 7845634 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes/pops all directories on the stack.
"
      end
    end

    class 998274 "LinkOption"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the options as to how symbolic links are handled.

@since 1.7
"
      classrelation 3313922 // <realization>
	relation 3313922 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3313922 // <realization>
	  b parent class_ref 999298 // OpenOption
      end

      classrelation 3314050 // <realization>
	relation 3314050 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3314050 // <realization>
	  b parent class_ref 994434 // CopyOption
      end

      attribute 1821570 "NOFOLLOW_LINKS"
	public type class_ref 998274 // LinkOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Do not follow symbolic links.

@see Files#getFileAttributeView(Path,Class,LinkOption[])
@see Files#copy
@see SecureDirectoryStream#newByteChannel
"
      end
    end

    class 998914 "FileVisitOption"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the file tree traversal options.

@since 1.7

@see Files#walkFileTree
"
      attribute 1820674 "FOLLOW_LINKS"
	public type class_ref 998914 // FileVisitOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Follow symbolic links.
"
      end
    end

    class 999042 "FileVisitResult"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The result type of a {@link FileVisitor FileVisitor}.

@since 1.7

@see Files#walkFileTree
"
      attribute 1820802 "CONTINUE"
	public type class_ref 999042 // FileVisitResult
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Continue. When returned from a {@link FileVisitor#preVisitDirectory
preVisitDirectory} method then the entries in the directory should also
be visited.

"
      end

      attribute 1820930 "TERMINATE"
	public type class_ref 999042 // FileVisitResult
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Terminate.

"
      end

      attribute 1821058 "SKIP_SUBTREE"
	public type class_ref 999042 // FileVisitResult
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Continue without visiting the entries in this directory. This result
is only meaningful when returned from the {@link
FileVisitor#preVisitDirectory preVisitDirectory} method; otherwise
this result type is the same as returning {@link #CONTINUE}.

"
      end

      attribute 1821186 "SKIP_SIBLINGS"
	public type class_ref 999042 // FileVisitResult
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Continue without visiting the <em>siblings</em> of this file or directory.
If returned from the {@link FileVisitor#preVisitDirectory
preVisitDirectory} method then the entries in the directory are also
skipped and the {@link FileVisitor#postVisitDirectory postVisitDirectory}
method is not invoked.
"
      end
    end

    class 999170 "InvalidPathException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Unchecked exception thrown when path string cannot be converted into a
{@link Path} because the path string contains invalid characters, or
the path string is invalid for other file system specific reasons.
"
      classrelation 3313666 // <generalisation>
	relation 3313666 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3313666 // <generalisation>
	  b parent class_ref 187778 // IllegalArgumentException
      end

      attribute 1821314 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 4355821422286746137L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3313794 // input (<unidirectional association>)
	relation 3313794 --->
	  a role_name "input" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3313794 // input (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1821442 "index"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7846274 "InvalidPathException"
	public explicit_return_type ""
	nparams 3
	  param inout name "input" type class_ref 128130 // String
	  param inout name "reason" type class_ref 128130 // String
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance from the given input string, reason, and error
index.

@param  input   the input string
@param  reason  a string explaining why the input was rejected
@param  index   the index at which the error occurred,
                or <tt>-1</tt> if the index is not known

@throws  NullPointerException
         if either the input or reason strings are <tt>null</tt>

@throws  IllegalArgumentException
         if the error index is less than <tt>-1</tt>
"
      end

      operation 7846402 "InvalidPathException"
	public explicit_return_type ""
	nparams 2
	  param inout name "input" type class_ref 128130 // String
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance from the given input string and reason.  The
resulting object will have an error index of <tt>-1</tt>.

@param  input   the input string
@param  reason  a string explaining why the input was rejected

@throws  NullPointerException
         if either the input or reason strings are <tt>null</tt>
"
      end

      operation 7846530 "getInput"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the input string.

@return  the input string
"
      end

      operation 7846658 "getReason"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string explaining why the input string was rejected.

@return  the reason string
"
      end

      operation 7846786 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an index into the input string of the position at which the
error occurred, or <tt>-1</tt> if this position is not known.

@return  the error index
"
      end

      operation 7846914 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing the error.  The resulting string
consists of the reason string followed by a colon character
(<tt>':'</tt>), a space, and the input string.  If the error index is
defined then the string <tt>\" at index \"</tt> followed by the index, in
decimal, is inserted after the reason string and before the colon
character.

@return  a string describing the error
"
      end
    end

    class 999298 "OpenOption"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that configures how to open or create a file.

<p> Objects of this type are used by methods such as {@link
Files#newOutputStream(Path,OpenOption[]) newOutputStream}, {@link
Files#newByteChannel newByteChannel}, {@link
java.nio.channels.FileChannel#open FileChannel.open}, and {@link
java.nio.channels.AsynchronousFileChannel#open AsynchronousFileChannel.open}
when opening or creating a file.

<p> The {@link StandardOpenOption} enumeration type defines the
<i>standard</i> options.

@since 1.7
"
    end

    class 999426 "LinkPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The {@code Permission} class for link creation operations.

<p> The following table provides a summary description of what the permission
allows, and discusses the risks of granting code the permission.

<table border=1 cellpadding=5
       summary=\"Table shows permission target name, what the permission allows, and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>
<tr>
  <td>hard</td>
  <td> Ability to add an existing file to a directory. This is sometimes
  known as creating a link, or hard link. </td>
  <td> Extreme care should be taken when granting this permission. It allows
  linking to any file or directory in the file system thus allowing the
  attacker access to all files. </td>
</tr>
<tr>
  <td>symbolic</td>
  <td> Ability to create symbolic links. </td>
  <td> Extreme care should be taken when granting this permission. It allows
  linking to any file or directory in the file system thus allowing the
  attacker to access to all files. </td>
</tr>
</table>

@since 1.7

@see Files#createLink
@see Files#createSymbolicLink
"
      classrelation 3314178 // <generalisation>
	relation 3314178 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3314178 // <generalisation>
	  b parent class_ref 257410 // BasicPermission
      end

      attribute 1821698 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -1441492453772213220L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7847042 "checkName"
	private explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7847170 "LinkPermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code LinkPermission} with the specified name.

@param   name
         the name of the permission. It must be \"hard\" or \"symbolic\".

@throws  IllegalArgumentException
         if name is empty or invalid
"
      end

      operation 7847298 "LinkPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code LinkPermission} with the specified name.

@param   name
         the name of the permission; must be \"hard\" or \"symbolic\".
@param   actions
         the actions for the permission; must be the empty string or
         {@code null}

@throws  IllegalArgumentException
         if name is empty or invalid, or actions is a non-empty string
"
      end
    end

    class 999554 "NoSuchFileException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Checked exception thrown when an attempt is made to access a file that does
not exist.

@since 1.7
"
      classrelation 3314306 // <generalisation>
	relation 3314306 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3314306 // <generalisation>
	  b parent class_ref 993410 // FileSystemException
      end

      attribute 1821826 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -1390291775875351931L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7847426 "NoSuchFileException"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   file
         a string identifying the file or {@code null} if not known.
"
      end

      operation 7847554 "NoSuchFileException"
	public explicit_return_type ""
	nparams 3
	  param inout name "file" type class_ref 128130 // String
	  param inout name "other" type class_ref 128130 // String
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   file
         a string identifying the file or {@code null} if not known.
@param   other
         a string identifying the other file or {@code null} if not known.
@param   reason
         a reason message with additional information or {@code null}
"
      end
    end

    class 999682 "NotDirectoryException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Checked exception thrown when a file system operation, intended for a
directory, fails because the file is not a directory.

@since 1.7
"
      classrelation 3314434 // <generalisation>
	relation 3314434 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3314434 // <generalisation>
	  b parent class_ref 993410 // FileSystemException
      end

      attribute 1821954 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -9011457427178200199L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7847682 "NotDirectoryException"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   file
         a string identifying the file or {@code null} if not known
"
      end
    end

    class 999810 "NotLinkException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Checked exception thrown when a file system operation fails because a file
is not a symbolic link.

@since 1.7
"
      classrelation 3314562 // <generalisation>
	relation 3314562 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3314562 // <generalisation>
	  b parent class_ref 993410 // FileSystemException
      end

      attribute 1822082 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -388655596416518021L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7847810 "NotLinkException"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   file
         a string identifying the file or {@code null} if not known
"
      end

      operation 7847938 "NotLinkException"
	public explicit_return_type ""
	nparams 3
	  param inout name "file" type class_ref 128130 // String
	  param inout name "other" type class_ref 128130 // String
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   file
         a string identifying the file or {@code null} if not known
@param   other
         a string identifying the other file or {@code null} if not known
@param   reason
         a reason message with additional information or {@code null}
"
      end
    end

    class 999938 "Watchable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that may be registered with a watch service so that it can be
<em>watched</em> for changes and events.

<p> This interface defines the {@link #register register} method to register
the object with a {@link WatchService} returning a {@link WatchKey} to
represent the registration. An object may be registered with more than one
watch service. Registration with a watch service is cancelled by invoking the
key's {@link WatchKey#cancel cancel} method.

@since 1.7

@see Path#register
"
      operation 7848066 "register"
	public return_type class_ref 1000066 // WatchKey
	nparams 3
	  param inout name "watcher" type class_ref 997122 // WatchService
	  param inout name "events" type class_ref 1000322 // Kind
	multiplicity "[]"
	  param inout name "" explicit_type "WatchEvent.Modifier...modifiers"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?>[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers an object with a watch service.

<p> If the file system object identified by this object is currently
registered with the watch service then the watch key, representing that
registration, is returned after changing the event set or modifiers to
those specified by the {@code events} and {@code modifiers} parameters.
Changing the event set does not cause pending events for the object to be
discarded. Objects are automatically registered for the {@link
StandardWatchEventKinds#OVERFLOW OVERFLOW} event. This event is not
required to be present in the array of events.

<p> Otherwise the file system object has not yet been registered with the
given watch service, so it is registered and the resulting new key is
returned.

<p> Implementations of this interface should specify the events they
support.

@param   watcher
         the watch service to which this object is to be registered
@param   events
         the events for which this object should be registered
@param   modifiers
         the modifiers, if any, that modify how the object is registered

@return  a key representing the registration of this object with the
         given watch service

@throws  UnsupportedOperationException
         if unsupported events or modifiers are specified
@throws  IllegalArgumentException
         if an invalid of combination of events are modifiers are specified
@throws  ClosedWatchServiceException
         if the watch service is closed
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         if a security manager is installed and it denies an unspecified
         permission required to monitor this object. Implementations of
         this interface should specify the permission checks.
"
      end

      operation 7848194 "register"
	public return_type class_ref 1000066 // WatchKey
	nparams 2
	  param inout name "watcher" type class_ref 997122 // WatchService
	  param inout name "events" explicit_type "WatchEvent.Kind<?>..."
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers an object with a watch service.

<p> An invocation of this method behaves in exactly the same way as the
invocation
<pre>
    watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);
</pre>

@param   watcher
         the watch service to which this object is to be registered
@param   events
         the events for which this object should be registered

@return  a key representing the registration of this object with the
         given watch service

@throws  UnsupportedOperationException
         if unsupported events are specified
@throws  IllegalArgumentException
         if an invalid of combination of events are specified
@throws  ClosedWatchServiceException
         if the watch service is closed
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         if a security manager is installed and it denies an unspecified
         permission required to monitor this object. Implementations of
         this interface should specify the permission checks.
"
      end
    end

    class 1000066 "WatchKey"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A token representing the registration of a {@link Watchable watchable} object
with a {@link WatchService}.

<p> A watch key is created when a watchable object is registered with a watch
service. The key remains {@link #isValid valid} until:
<ol>
  <li> It is cancelled, explicitly, by invoking its {@link #cancel cancel}
    method, or</li>
  <li> Cancelled implicitly, because the object is no longer accessible,
    or </li>
  <li> By {@link WatchService#close closing} the watch service. </li>
</ol>

<p> A watch key has a state. When initially created the key is said to be
<em>ready</em>. When an event is detected then the key is <em>signalled</em>
and queued so that it can be retrieved by invoking the watch service's {@link
WatchService#poll() poll} or {@link WatchService#take() take} methods. Once
signalled, a key remains in this state until its {@link #reset reset} method
is invoked to return the key to the ready state. Events detected while the
key is in the signalled state are queued but do not cause the key to be
re-queued for retrieval from the watch service. Events are retrieved by
invoking the key's {@link #pollEvents pollEvents} method. This method
retrieves and removes all events accumulated for the object. When initially
created, a watch key has no pending events. Typically events are retrieved
when the key is in the signalled state leading to the following idiom:

<pre>
    for (;;) {
        // retrieve key
        WatchKey key = watcher.take();

        // process events
        for (WatchEvent&lt;?&gt; event: key.pollEvents()) {
            :
        }

        // reset the key
        boolean valid = key.reset();
        if (!valid) {
            // object no longer registered
        }
    }
</pre>

<p> Watch keys are safe for use by multiple concurrent threads. Where there
are several threads retrieving signalled keys from a watch service then care
should be taken to ensure that the {@code reset} method is only invoked after
the events for the object have been processed. This ensures that one thread
is processing the events for an object at any time.

@since 1.7
"
      operation 7856770 "isValid"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this watch key is valid.

<p> A watch key is valid upon creation and remains until it is cancelled,
or its watch service is closed.

@return  {@code true} if, and only if, this watch key is valid
"
      end

      operation 7856898 "pollEvents"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<WatchEvent<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes all pending events for this watch key, returning
a {@code List} of the events that were retrieved.

<p> Note that this method does not wait if there are no events pending.

@return  the list of the events retrieved; may be empty
"
      end

      operation 7857026 "reset"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this watch key.

<p> If this watch key has been cancelled or this watch key is already in
the ready state then invoking this method has no effect. Otherwise
if there are pending events for the object then this watch key is
immediately re-queued to the watch service. If there are no pending
events then the watch key is put into the ready state and will remain in
that state until an event is detected or the watch key is cancelled.

@return  {@code true} if the watch key is valid and has been reset, and
         {@code false} if the watch key could not be reset because it is
         no longer {@link #isValid valid}
"
      end

      operation 7857154 "cancel"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels the registration with the watch service. Upon return the watch key
will be invalid. If the watch key is enqueued, waiting to be retrieved
from the watch service, then it will remain in the queue until it is
removed. Pending events, if any, remain pending and may be retrieved by
invoking the {@link #pollEvents pollEvents} method after the key is
cancelled.

<p> If this watch key has already been cancelled then invoking this
method has no effect.  Once cancelled, a watch key remains forever invalid.
"
      end

      operation 7857282 "watchable"
	public return_type class_ref 999938 // Watchable
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the object for which this watch key was created. This method will
continue to return the object even after the key is cancelled.

<p> As the {@code WatchService} is intended to map directly on to the
native file event notification facility (where available) then many of
details on how registered objects are watched is highly implementation
specific. When watching a directory for changes for example, and the
directory is moved or renamed in the file system, there is no guarantee
that the watch key will be cancelled and so the object returned by this
method may no longer be a valid path to the directory.

@return the object for which this watch key was created
"
      end
    end

    class 1000194 "WatchEvent"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An event or a repeated event for an object that is registered with a {@link
WatchService}.

<p> An event is classified by its {@link #kind() kind} and has a {@link
#count() count} to indicate the number of times that the event has been
observed. This allows for efficient representation of repeated events. The
{@link #context() context} method returns any context associated with
the event. In the case of a repeated event then the context is the same for
all events.

<p> Watch events are immutable and safe for use by multiple concurrent
threads.

@param   <T>     The type of the context object associated with the event

@since 1.7
"
      class 1000322 "Kind"
	visibility public stereotype "interface"
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 7854850 "name"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the name of the event kind.

@return the name of the event kind
"
	end

	operation 7854978 "type"
	  cpp_inline public return_type class_ref 130818 // Class
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the type of the {@link WatchEvent#context context} value.


@return the type of the context value
"
	end
      end

      class 1001730 "Modifier"
	visibility public stereotype "interface"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 7855106 "name"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the name of the modifier.

@return the name of the modifier
"
	end
      end

      operation 7855234 "kind"
	cpp_inline public return_type class_ref 1000322 // Kind
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the event kind.

@return  the event kind
"
      end

      operation 7855362 "count"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the event count. If the event count is greater than {@code 1}
then this is a repeated event.

@return  the event count
"
      end

      operation 7855490 "context"
	cpp_inline public explicit_return_type "T"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the context for the event.

<p> In the case of {@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE},
{@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE}, and {@link
StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} events the context is
a {@code Path} that is the {@link Path#relativize relative} path between
the directory registered with the watch service, and the entry that is
created, deleted, or modified.

@return  the event context; may be {@code null}
"
      end
    end

    class 1000450 "Paths"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class consists exclusively of static methods that return a {@link Path}
by converting a path string or {@link URI}.

@since 1.7
"
      operation 7852162 "Paths"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7852290 "get"
	class_operation public return_type class_ref 923650 // Path
	nparams 2
	  param inout name "first" type class_ref 128130 // String
	  param inout name "" explicit_type "String...more"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a path string, or a sequence of strings that when joined form
a path string, to a {@code Path}. If {@code more} does not specify any
elements then the value of the {@code first} parameter is the path string
to convert. If {@code more} specifies one or more elements then each
non-empty string, including {@code first}, is considered to be a sequence
of name elements (see {@link Path}) and is joined to form a path string.
The details as to how the Strings are joined is provider specific but
typically they will be joined using the {@link FileSystem#getSeparator
name-separator} as the separator. For example, if the name separator is
\"{@code /}\" and {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then the
path string {@code \"/foo/bar/gus\"} is converted to a {@code Path}.
A {@code Path} representing an empty path is returned if {@code first}
is the empty string and {@code more} does not contain any non-empty
strings.

<p> The {@code Path} is obtained by invoking the {@link FileSystem#getPath
getPath} method of the {@link FileSystems#getDefault default} {@link
FileSystem}.

<p> Note that while this method is very convenient, using it will imply
an assumed reference to the default {@code FileSystem} and limit the
utility of the calling code. Hence it should not be used in library code
intended for flexible reuse. A more flexible alternative is to use an
existing {@code Path} instance as an anchor, such as:
<pre>
    Path dir = ...
    Path path = dir.resolve(\"file\");
</pre>

@param   first
         the path string or initial part of the path string
@param   more
         additional strings to be joined to form the path string

@return  the resulting {@code Path}

@throws  InvalidPathException
         if the path string cannot be converted to a {@code Path}

@see FileSystem#getPath
"
      end

      operation 7852418 "get"
	class_operation public return_type class_ref 923650 // Path
	nparams 1
	  param inout name "uri" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the given URI to a {@link Path} object.

<p> This method iterates over the {@link FileSystemProvider#installedProviders()
installed} providers to locate the provider that is identified by the
URI {@link URI#getScheme scheme} of the given URI. URI schemes are
compared without regard to case. If the provider is found then its {@link
FileSystemProvider#getPath getPath} method is invoked to convert the
URI.

<p> In the case of the default provider, identified by the URI scheme
\"file\", the given URI has a non-empty path component, and undefined query
and fragment components. Whether the authority component may be present
is platform specific. The returned {@code Path} is associated with the
{@link FileSystems#getDefault default} file system.

<p> The default provider provides a similar <em>round-trip</em> guarantee
to the {@link java.io.File} class. For a given {@code Path} <i>p</i> it
is guaranteed that
<blockquote><tt>
Paths.get(</tt><i>p</i><tt>.{@link Path#toUri() toUri}()).equals(</tt>
<i>p</i><tt>.{@link Path#toAbsolutePath() toAbsolutePath}())</tt>
</blockquote>
so long as the original {@code Path}, the {@code URI}, and the new {@code
Path} are all created in (possibly different invocations of) the same
Java virtual machine. Whether other providers make any guarantees is
provider specific and therefore unspecified.

@param   uri
         the URI to convert

@return  the resulting {@code Path}

@throws  IllegalArgumentException
         if preconditions on the {@code uri} parameter do not hold. The
         format of the URI is provider specific.
@throws  FileSystemNotFoundException
         The file system, identified by the URI, does not exist and
         cannot be created automatically, or the provider identified by
         the URI's scheme component is not installed
@throws  SecurityException
         if a security manager is installed and it denies an unspecified
         permission to access the file system
"
      end
    end

    class 1000578 "ProviderMismatchException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Unchecked exception thrown when an attempt is made to invoke a method on an
object created by one file system provider with a parameter created by a
different file system provider.
"
      classrelation 3315074 // <generalisation>
	relation 3315074 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3315074 // <generalisation>
	  b parent class_ref 187778 // IllegalArgumentException
      end

      attribute 1822210 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 4990847485741612530L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7852546 "ProviderMismatchException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.
"
      end

      operation 7852674 "ProviderMismatchException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   msg
         the detail message
"
      end
    end

    class 1000706 "ProviderNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Runtime exception thrown when a provider of the required type cannot be found.
"
      classrelation 3315202 // <generalisation>
	relation 3315202 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3315202 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 1822338 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -1880012509822920354L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7852802 "ProviderNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.
"
      end

      operation 7852930 "ProviderNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   msg
         the detail message
"
      end
    end

    class 1000834 "ReadOnlyFileSystemException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Unchecked exception thrown when an attempt is made to update an object
associated with a {@link FileSystem#isReadOnly() read-only} {@code FileSystem}.
"
      classrelation 3315330 // <generalisation>
	relation 3315330 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3315330 // <generalisation>
	  b parent class_ref 193538 // UnsupportedOperationException
      end

      attribute 1822466 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -6822409595617487197L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7853058 "ReadOnlyFileSystemException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.
"
      end
    end

    class 1000962 "SecureDirectoryStream"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 994946 // DirectoryStream
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code DirectoryStream} that defines operations on files that are located
relative to an open directory. A {@code SecureDirectoryStream} is intended
for use by sophisticated or security sensitive applications requiring to
traverse file trees or otherwise operate on directories in a race-free manner.
Race conditions can arise when a sequence of file operations cannot be
carried out in isolation. Each of the file operations defined by this
interface specify a relative path. All access to the file is relative
to the open directory irrespective of if the directory is moved or replaced
by an attacker while the directory is open. A {@code SecureDirectoryStream}
may also be used as a virtual <em>working directory</em>.

<p> A {@code SecureDirectoryStream} requires corresponding support from the
underlying operating system. Where an implementation supports this features
then the {@code DirectoryStream} returned by the {@link Files#newDirectoryStream
newDirectoryStream} method will be a {@code SecureDirectoryStream} and must
be cast to that type in order to invoke the methods defined by this interface.

<p> In the case of the default {@link java.nio.file.spi.FileSystemProvider
provider}, and a security manager is set, then the permission checks are
performed using the path obtained by resolving the given relative path
against the <i>original path</i> of the directory (irrespective of if the
directory is moved since it was opened).

@since   1.7
"
      classrelation 3315458 // <realization>
	relation 3315458 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3315458 // <realization>
	  b parent class_ref 994946 // DirectoryStream
      end

      operation 7853186 "newDirectoryStream"
	cpp_inline public return_type class_ref 1000962 // SecureDirectoryStream
	nparams 2
	  param inout name "path" explicit_type "T"
	  param inout name "" explicit_type "LinkOption...options"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens the directory identified by the given path, returning a {@code
SecureDirectoryStream} to iterate over the entries in the directory.

<p> This method works in exactly the manner specified by the {@link
Files#newDirectoryStream(Path) newDirectoryStream} method for the case that
the {@code path} parameter is an {@link Path#isAbsolute absolute} path.
When the parameter is a relative path then the directory to open is
relative to this open directory. The {@link
LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} option may be used to
ensure that this method fails if the file is a symbolic link.

<p> The new directory stream, once created, is not dependent upon the
directory stream used to create it. Closing this directory stream has no
effect upon newly created directory stream.

@param   path
         the path to the directory to open
@param   options
         options indicating how symbolic links are handled

@return  a new and open {@code SecureDirectoryStream} object

@throws  ClosedDirectoryStreamException
         if the directory stream is closed
@throws  NotDirectoryException
         if the file could not otherwise be opened because it is not
         a directory <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the directory.
"
      end

      operation 7853314 "newByteChannel"
	cpp_inline public return_type class_ref 988674 // SeekableByteChannel
	nparams 3
	  param inout name "path" explicit_type "T"
	  param inout name "options" type class_ref 192258 // Set
	  param inout name "attrs" explicit_type "FileAttribute<?>..."
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends OpenOption> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens or creates a file in this directory, returning a seekable byte
channel to access the file.

<p> This method works in exactly the manner specified by the {@link
Files#newByteChannel Files.newByteChannel} method for the
case that the {@code path} parameter is an {@link Path#isAbsolute absolute}
path. When the parameter is a relative path then the file to open or
create is relative to this open directory. In addition to the options
defined by the {@code Files.newByteChannel} method, the {@link
LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} option may be used to
ensure that this method fails if the file is a symbolic link.

<p> The channel, once created, is not dependent upon the directory stream
used to create it. Closing this directory stream has no effect upon the
channel.

@param   path
         the path of the file to open open or create
@param   options
         options specifying how the file is opened
@param   attrs
         an optional list of attributes to set atomically when creating
         the file

@return  the seekable byte channel

@throws  ClosedDirectoryStreamException
         if the directory stream is closed
@throws  IllegalArgumentException
         if the set contains an invalid combination of options
@throws  UnsupportedOperationException
         if an unsupported open option is specified or the array contains
         attributes that cannot be set atomically when creating the file
@throws  FileAlreadyExistsException
         if a file of that name already exists and the {@link
         StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified
         <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the path if the file
         is opened for reading. The {@link SecurityManager#checkWrite(String)
         checkWrite} method is invoked to check write access to the path
         if the file is opened for writing.
"
      end

      operation 7853442 "deleteFile"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "path" explicit_type "T"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes a file.

<p> Unlike the {@link Files#delete delete()} method, this method does
not first examine the file to determine if the file is a directory.
Whether a directory is deleted by this method is system dependent and
therefore not specified. If the file is a symbolic link, then the link
itself, not the final target of the link, is deleted. When the
parameter is a relative path then the file to delete is relative to
this open directory.

@param   path
         the path of the file to delete

@throws  ClosedDirectoryStreamException
         if the directory stream is closed
@throws  NoSuchFileException
         if the file does not exist <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkDelete(String) checkDelete}
         method is invoked to check delete access to the file
"
      end

      operation 7853570 "deleteDirectory"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "path" explicit_type "T"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes a directory.

<p> Unlike the {@link Files#delete delete()} method, this method
does not first examine the file to determine if the file is a directory.
Whether non-directories are deleted by this method is system dependent and
therefore not specified. When the parameter is a relative path then the
directory to delete is relative to this open directory.

@param   path
         the path of the directory to delete

@throws  ClosedDirectoryStreamException
         if the directory stream is closed
@throws  NoSuchFileException
         if the directory does not exist <i>(optional specific exception)</i>
@throws  DirectoryNotEmptyException
         if the directory could not otherwise be deleted because it is
         not empty <i>(optional specific exception)</i>
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkDelete(String) checkDelete}
         method is invoked to check delete access to the directory
"
      end

      operation 7853698 "move"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "srcpath" explicit_type "T"
	  param inout name "targetdir" type class_ref 1000962 // SecureDirectoryStream
	  param inout name "targetpath" explicit_type "T"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Move a file from this directory to another directory.

<p> This method works in a similar manner to {@link Files#move move}
method when the {@link StandardCopyOption#ATOMIC_MOVE ATOMIC_MOVE} option
is specified. That is, this method moves a file as an atomic file system
operation. If the {@code srcpath} parameter is an {@link Path#isAbsolute
absolute} path then it locates the source file. If the parameter is a
relative path then it is located relative to this open directory. If
the {@code targetpath} parameter is absolute then it locates the target
file (the {@code targetdir} parameter is ignored). If the parameter is
a relative path it is located relative to the open directory identified
by the {@code targetdir} parameter. In all cases, if the target file
exists then it is implementation specific if it is replaced or this
method fails.

@param   srcpath
         the name of the file to move
@param   targetdir
         the destination directory
@param   targetpath
         the name to give the file in the destination directory

@throws  ClosedDirectoryStreamException
         if this or the target directory stream is closed
@throws  FileAlreadyExistsException
         if the file already exists in the target directory and cannot
         be replaced <i>(optional specific exception)</i>
@throws  AtomicMoveNotSupportedException
         if the file cannot be moved as an atomic file system operation
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, the {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to both the source and
         target file.
"
      end

      operation 7853826 "getFileAttributeView"
	cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "type" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V extends FileAttributeView> ${type} ${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new file attribute view to access the file attributes of this
directory.

<p> The resulting file attribute view can be used to read or update the
attributes of this (open) directory. The {@code type} parameter specifies
the type of the attribute view and the method returns an instance of that
type if supported. Invoking this method to obtain a {@link
BasicFileAttributeView} always returns an instance of that class that is
bound to this open directory.

<p> The state of resulting file attribute view is intimately connected
to this directory stream. Once the directory stream is {@link #close closed},
then all methods to read or update attributes will throw {@link
ClosedDirectoryStreamException ClosedDirectoryStreamException}.

@param   <V>
         The {@code FileAttributeView} type
@param   type
         the {@code Class} object corresponding to the file attribute view

@return  a new file attribute view of the specified type bound to
         this directory stream, or {@code null} if the attribute view
         type is not available
"
      end

      operation 7853954 "getFileAttributeView"
	cpp_inline public explicit_return_type "V"
	nparams 3
	  param inout name "path" explicit_type "T"
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "" explicit_type "LinkOption...options"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V extends FileAttributeView> ${type} ${name}${(}${t0} ${p0}, ${t1}<V> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new file attribute view to access the file attributes of a file
in this directory.

<p> The resulting file attribute view can be used to read or update the
attributes of file in this directory. The {@code type} parameter specifies
the type of the attribute view and the method returns an instance of that
type if supported. Invoking this method to obtain a {@link
BasicFileAttributeView} always returns an instance of that class that is
bound to the file in the directory.

<p> The state of resulting file attribute view is intimately connected
to this directory stream. Once the directory stream {@link #close closed},
then all methods to read or update attributes will throw {@link
ClosedDirectoryStreamException ClosedDirectoryStreamException}. The
file is not required to exist at the time that the file attribute view
is created but methods to read or update attributes of the file will
fail when invoked and the file does not exist.

@param   <V>
         The {@code FileAttributeView} type
@param   path
         the path of the file
@param   type
         the {@code Class} object corresponding to the file attribute view
@param   options
         options indicating how symbolic links are handled

@return  a new file attribute view of the specified type bound to a
         this directory stream, or {@code null} if the attribute view
         type is not available

"
      end
    end

    class 1001090 "SimpleFileVisitor"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 996482 // FileVisitor
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple visitor of files with default behavior to visit all files and to
re-throw I/O errors.

<p> Methods in this class may be overridden subject to their general contract.

@param   <T>     The type of reference to the files

@since 1.7
"
      classrelation 3315586 // <realization>
	relation 3315586 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3315586 // <realization>
	  b parent class_ref 996482 // FileVisitor
      end

      operation 7854082 "SimpleFileVisitor"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.
"
      end

      operation 7854210 "preVisitDirectory"
	cpp_inline public return_type class_ref 999042 // FileVisitResult
	nparams 2
	  param inout name "dir" explicit_type "T"
	  param inout name "attrs" type class_ref 998786 // BasicFileAttributes
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Invoked for a directory before entries in the directory are visited.

<p> Unless overridden, this method returns {@link FileVisitResult#CONTINUE
CONTINUE}.
"
      end

      operation 7854338 "visitFile"
	cpp_inline public return_type class_ref 999042 // FileVisitResult
	nparams 2
	  param inout name "file" explicit_type "T"
	  param inout name "attrs" type class_ref 998786 // BasicFileAttributes
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Invoked for a file in a directory.

<p> Unless overridden, this method returns {@link FileVisitResult#CONTINUE
CONTINUE}.
"
      end

      operation 7854466 "visitFileFailed"
	cpp_inline public return_type class_ref 999042 // FileVisitResult
	nparams 2
	  param inout name "file" explicit_type "T"
	  param inout name "exc" type class_ref 146818 // IOException
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Invoked for a file that could not be visited.

<p> Unless overridden, this method re-throws the I/O exception that prevented
the file from being visited.
"
      end

      operation 7854594 "postVisitDirectory"
	cpp_inline public return_type class_ref 999042 // FileVisitResult
	nparams 2
	  param inout name "dir" explicit_type "T"
	  param inout name "exc" type class_ref 146818 // IOException
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Invoked for a directory after entries in the directory, and all of their
descendants, have been visited.

<p> Unless overridden, this method returns {@link FileVisitResult#CONTINUE
CONTINUE} if the directory iteration completes without an I/O exception;
otherwise this method re-throws the I/O exception that caused the iteration
of the directory to terminate prematurely.
"
      end
    end

    class 1001218 "StandardCopyOption"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the standard copy options.

@since 1.7
"
      classrelation 3315714 // <realization>
	relation 3315714 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3315714 // <realization>
	  b parent class_ref 994434 // CopyOption
      end

      attribute 1822594 "REPLACE_EXISTING"
	public type class_ref 1001218 // StandardCopyOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Replace an existing file if it exists.

"
      end

      attribute 1822722 "COPY_ATTRIBUTES"
	public type class_ref 1001218 // StandardCopyOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Copy attributes to the new file.

"
      end

      attribute 1822850 "ATOMIC_MOVE"
	public type class_ref 1001218 // StandardCopyOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Move the file as an atomic file system operation.
"
      end
    end

    class 1001346 "StandardOpenOption"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the standard open options.

@since 1.7
"
      classrelation 3315842 // <realization>
	relation 3315842 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3315842 // <realization>
	  b parent class_ref 999298 // OpenOption
      end

      attribute 1822978 "READ"
	public type class_ref 1001346 // StandardOpenOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Open for read access.

"
      end

      attribute 1823106 "WRITE"
	public type class_ref 1001346 // StandardOpenOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Open for write access.

"
      end

      attribute 1823234 "APPEND"
	public type class_ref 1001346 // StandardOpenOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If the file is opened for {@link #WRITE} access then bytes will be written
to the end of the file rather than the beginning.

<p> If the file is opened for write access by other programs, then it
is file system specific if writing to the end of the file is atomic.

"
      end

      attribute 1823362 "TRUNCATE_EXISTING"
	public type class_ref 1001346 // StandardOpenOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If the file already exists and it is opened for {@link #WRITE}
access, then its length is truncated to 0. This option is ignored
if the file is opened only for {@link #READ} access.

"
      end

      attribute 1823490 "CREATE"
	public type class_ref 1001346 // StandardOpenOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Create a new file if it does not exist.
This option is ignored if the {@link #CREATE_NEW} option is also set.
The check for the existence of the file and the creation of the file
if it does not exist is atomic with respect to other file system
operations.

"
      end

      attribute 1823618 "CREATE_NEW"
	public type class_ref 1001346 // StandardOpenOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Create a new file, failing if the file already exists.
The check for the existence of the file and the creation of the file
if it does not exist is atomic with respect to other file system
operations.

"
      end

      attribute 1823746 "DELETE_ON_CLOSE"
	public type class_ref 1001346 // StandardOpenOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Delete on close. When this option is present then the implementation
makes a <em>best effort</em> attempt to delete the file when closed
by the appropriate {@code close} method. If the {@code close} method is
not invoked then a <em>best effort</em> attempt is made to delete the
file when the Java virtual machine terminates (either normally, as
defined by the Java Language Specification, or where possible, abnormally).
This option is primarily intended for use with <em>work files</em> that
are used solely by a single instance of the Java virtual machine. This
option is not recommended for use when opening files that are open
concurrently by other entities. Many of the details as to when and how
the file is deleted are implementation specific and therefore not
specified. In particular, an implementation may be unable to guarantee
that it deletes the expected file when replaced by an attacker while the
file is open. Consequently, security sensitive applications should take
care when using this option.

<p> For security reasons, this option may imply the {@link
LinkOption#NOFOLLOW_LINKS} option. In other words, if the option is present
when opening an existing file that is a symbolic link then it may fail
(by throwing {@link java.io.IOException}).

"
      end

      attribute 1823874 "SPARSE"
	public type class_ref 1001346 // StandardOpenOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sparse file. When used with the {@link #CREATE_NEW} option then this
option provides a <em>hint</em> that the new file will be sparse. The
option is ignored when the file system does not support the creation of
sparse files.

"
      end

      attribute 1824002 "SYNC"
	public type class_ref 1001346 // StandardOpenOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Requires that every update to the file's content or metadata be written
synchronously to the underlying storage device.

@see <a href=\"package-summary.html#integrity\">Synchronized I/O file integrity</a>

"
      end

      attribute 1824130 "DSYNC"
	public type class_ref 1001346 // StandardOpenOption
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Requires that every update to the file's content be written
synchronously to the underlying storage device.

@see <a href=\"package-summary.html#integrity\">Synchronized I/O file integrity</a>
"
      end
    end

    class 1001474 "StandardWatchEventKinds"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the <em>standard</em> event kinds.

@since 1.7
"
      operation 7854722 "StandardWatchEventKinds"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3315970 // OVERFLOW (<unidirectional association>)
	relation 3315970 --->
	  a role_name "OVERFLOW" init_value "
        new StdWatchEventKind<Object>(\"OVERFLOW\", Object.class)" class_relation const_relation public
	    comment "
A special event to indicate that events may have been lost or
discarded.

<p> The {@link WatchEvent#context context} for this event is
implementation specific and may be {@code null}. The event {@link
WatchEvent#count count} may be greater than {@code 1}.

@see WatchService

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 3315970 // OVERFLOW (<unidirectional association>)
	  b parent class_ref 1000322 // Kind
      end

      classrelation 3316098 // ENTRY_CREATE (<unidirectional association>)
	relation 3316098 --->
	  a role_name "ENTRY_CREATE" init_value "
        new StdWatchEventKind<Path>(\"ENTRY_CREATE\", Path.class)" class_relation const_relation public
	    comment "
Directory entry created.

<p> When a directory is registered for this event then the {@link WatchKey}
is queued when it is observed that an entry is created in the directory
or renamed into the directory. The event {@link WatchEvent#count count}
for this event is always {@code 1}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Path> ${name}${value};
"
	    classrelation_ref 3316098 // ENTRY_CREATE (<unidirectional association>)
	  b parent class_ref 1000322 // Kind
      end

      classrelation 3316226 // ENTRY_DELETE (<unidirectional association>)
	relation 3316226 --->
	  a role_name "ENTRY_DELETE" init_value "
        new StdWatchEventKind<Path>(\"ENTRY_DELETE\", Path.class)" class_relation const_relation public
	    comment "
Directory entry deleted.

<p> When a directory is registered for this event then the {@link WatchKey}
is queued when it is observed that an entry is deleted or renamed out of
the directory. The event {@link WatchEvent#count count} for this event
is always {@code 1}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Path> ${name}${value};
"
	    classrelation_ref 3316226 // ENTRY_DELETE (<unidirectional association>)
	  b parent class_ref 1000322 // Kind
      end

      classrelation 3316354 // ENTRY_MODIFY (<unidirectional association>)
	relation 3316354 --->
	  a role_name "ENTRY_MODIFY" init_value "
        new StdWatchEventKind<Path>(\"ENTRY_MODIFY\", Path.class)" class_relation const_relation public
	    comment "
Directory entry modified.

<p> When a directory is registered for this event then the {@link WatchKey}
is queued when it is observed that an entry in the directory has been
modified. The event {@link WatchEvent#count count} for this event is
{@code 1} or greater.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Path> ${name}${value};
"
	    classrelation_ref 3316354 // ENTRY_MODIFY (<unidirectional association>)
	  b parent class_ref 1000322 // Kind
      end

      class 1001602 "StdWatchEventKind"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1000194 // WatchEvent
	  rank 0 explicit_value ""
	actual class class_ref 1000322 // Kind
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3316482 // <realization>
	  relation 3316482 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3316482 // <realization>
	    b parent class_ref 1000322 // Kind
	end

	classrelation 3316610 // name (<unidirectional association>)
	  relation 3316610 --->
	    a role_name "name" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3316610 // name (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3316738 // type (<unidirectional association>)
	  relation 3316738 --->
	    a role_name "type" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3316738 // type (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	operation 7855618 "StdWatchEventKind"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7855746 "name"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7855874 "type"
	  cpp_inline public return_type class_ref 130818 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7856002 "toString"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1001858 "TempFileHelper"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Helper class to support creation of temporary files and directories with
initial attributes.
"
      operation 7856130 "TempFileHelper"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3316866 // tmpdir (<unidirectional association>)
	relation 3316866 --->
	  a role_name "tmpdir" init_value "
        Paths.get(doPrivileged(new GetPropertyAction(\"java.io.tmpdir\")))" class_relation const_relation private
	    comment " temporary directory location
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3316866 // tmpdir (<unidirectional association>)
	  b parent class_ref 923650 // Path
      end

      attribute 1824258 "isPosix"
	class_attribute const_attribute private explicit_type "boolean"
	init_value "
        FileSystems.getDefault().supportedFileAttributeViews().contains(\"posix\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3316994 // random (<unidirectional association>)
	relation 3316994 --->
	  a role_name "random" init_value " new SecureRandom()" class_relation const_relation private
	    comment " file name generation, same as java.io.File for now
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3316994 // random (<unidirectional association>)
	  b parent class_ref 753154 // SecureRandom
      end

      operation 7856258 "generatePath"
	class_operation private return_type class_ref 923650 // Path
	nparams 3
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "suffix" type class_ref 128130 // String
	  param inout name "dir" type class_ref 923650 // Path
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1001986 "PosixPermissions"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3317122 // filePermissions (<unidirectional association>)
	  relation 3317122 --->
	    a role_name "filePermissions" init_value "
            PosixFilePermissions.asFileAttribute(EnumSet.of(OWNER_READ, OWNER_WRITE))" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Set<PosixFilePermission>> ${name}${value};
"
	      classrelation_ref 3317122 // filePermissions (<unidirectional association>)
	    b parent class_ref 985730 // FileAttribute
	end

	classrelation 3317250 // dirPermissions (<unidirectional association>)
	  relation 3317250 --->
	    a role_name "dirPermissions" init_value "
            PosixFilePermissions.asFileAttribute(EnumSet
                .of(OWNER_READ, OWNER_WRITE, OWNER_EXECUTE))" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Set<PosixFilePermission>> ${name}${value};
"
	      classrelation_ref 3317250 // dirPermissions (<unidirectional association>)
	    b parent class_ref 985730 // FileAttribute
	end
      end

      operation 7856386 "create"
	class_operation private return_type class_ref 923650 // Path
	nparams 5
	  param inout name "dir" type class_ref 923650 // Path
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "suffix" type class_ref 128130 // String
	  param inout name "createDirectory" explicit_type "boolean"
	  param inout name "attrs" type class_ref 985730 // FileAttribute
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<?>[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a file or directory in in the given given directory (or in the
temporary directory if dir is {@code null}).
"
      end

      operation 7856514 "createTempFile"
	class_operation package return_type class_ref 923650 // Path
	nparams 4
	  param inout name "dir" type class_ref 923650 // Path
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "suffix" type class_ref 128130 // String
	  param inout name "attrs" type class_ref 985730 // FileAttribute
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?>[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a temporary file in the given directory, or in in the
temporary directory if dir is {@code null}.
"
      end

      operation 7856642 "createTempDirectory"
	class_operation package return_type class_ref 923650 // Path
	nparams 3
	  param inout name "dir" type class_ref 923650 // Path
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "attrs" type class_ref 985730 // FileAttribute
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?>[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a temporary directory in the given directory, or in in the
temporary directory if dir is {@code null}.
"
      end
    end
  end

  package_ref 182146 // attribute

  deploymentview 168450 "file"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 731650 "FileSystemException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 993410 // FileSystemException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 731778 "AccessDeniedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 993282 // AccessDeniedException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 731906 "AccessMode"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 993538 // AccessMode
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 732034 "AtomicMoveNotSupportedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 993666 // AtomicMoveNotSupportedException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 732162 "ClosedDirectoryStreamException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 993794 // ClosedDirectoryStreamException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 732290 "ClosedFileSystemException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 993922 // ClosedFileSystemException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 732418 "ClosedWatchServiceException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 994050 // ClosedWatchServiceException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 732546 "CopyMoveHelper"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.file.attribute.*;
import java.io.InputStream;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 994178 // CopyMoveHelper
      end
      comment "Copyright (c) 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 732674 "CopyOption"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 994434 // CopyOption
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 732930 "DirectoryIteratorException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ConcurrentModificationException;
import java.util.Objects;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.InvalidObjectException;
${definition}"
      associated_elems
	class_ref 994562 // DirectoryIteratorException
      end
      comment "Copyright (c) 2010, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 733058 "DirectoryNotEmptyException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 994818 // DirectoryNotEmptyException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 733186 "DirectoryStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import java.io.Closeable;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 994946 // DirectoryStream
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 733314 "FileAlreadyExistsException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 995202 // FileAlreadyExistsException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 733442 "Files"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.UncheckedIOException;
import java.io.Writer;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.StandardCharsets;
import java.nio.file.attribute.BasicFileAttributeView;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.DosFileAttributes;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.FileAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileStoreAttributeView;
import java.nio.file.attribute.FileTime;
import java.nio.file.attribute.PosixFileAttributeView;
import java.nio.file.attribute.PosixFileAttributes;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.UserPrincipal;
import java.nio.file.spi.FileSystemProvider;
import java.nio.file.spi.FileTypeDetector;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.BiPredicate;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
${definition}"
      associated_elems
	class_ref 995330 // Files
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 733570 "FileStore"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.file.attribute.*;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 995714 // FileStore
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 733698 "FileSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.file.attribute.*;
import java.nio.file.spi.FileSystemProvider;
import java.util.Set;
import java.io.Closeable;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 996738 // FileSystem
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 733826 "FileSystemAlreadyExistsException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 997250 // FileSystemAlreadyExistsException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 733954 "FileSystemLoopException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 997378 // FileSystemLoopException
      end
      comment "Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 734082 "FileSystemNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 997506 // FileSystemNotFoundException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 734210 "FileSystems"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.file.spi.FileSystemProvider;
import java.net.URI;
import java.io.IOException;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.*;
import java.lang.reflect.Constructor;
${definition}"
      associated_elems
	class_ref 997634 // FileSystems
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 734338 "FileTreeIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Closeable;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.util.Arrays;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.nio.file.FileTreeWalker.Event;
${definition}"
      associated_elems
	class_ref 997890 // FileTreeIterator
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 734466 "FileTreeWalker"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.file.attribute.BasicFileAttributes;
import java.io.Closeable;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Iterator;
import sun.nio.fs.BasicFileAttributesHolder;
${definition}"
      associated_elems
	class_ref 998018 // FileTreeWalker
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 734594 "FileVisitOption"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 998914 // FileVisitOption
      end
      comment "Copyright (c) 2007, 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 734722 "FileVisitor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.file.attribute.BasicFileAttributes;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 996482 // FileVisitor
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 734850 "FileVisitResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 999042 // FileVisitResult
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 734978 "InvalidPathException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 999170 // InvalidPathException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 735106 "OpenOption"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 999298 // OpenOption
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 735234 "LinkOption"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 998274 // LinkOption
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 735362 "LinkPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.BasicPermission;
${definition}"
      associated_elems
	class_ref 999426 // LinkPermission
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 735490 "NoSuchFileException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 999554 // NoSuchFileException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 735618 "NotDirectoryException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 999682 // NotDirectoryException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 735746 "NotLinkException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 999810 // NotLinkException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 735874 "Watchable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 999938 // Watchable
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 736002 "Path"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.util.Iterator;
${definition}"
      associated_elems
	class_ref 923650 // Path
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 736130 "PathMatcher"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 996866 // PathMatcher
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 736258 "Paths"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.file.spi.FileSystemProvider;
import java.net.URI;
${definition}"
      associated_elems
	class_ref 1000450 // Paths
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 736386 "ProviderMismatchException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1000578 // ProviderMismatchException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 736514 "ProviderNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1000706 // ProviderNotFoundException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 736642 "ReadOnlyFileSystemException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1000834 // ReadOnlyFileSystemException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 736770 "SecureDirectoryStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.file.attribute.*;
import java.nio.channels.SeekableByteChannel;
import java.util.Set;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1000962 // SecureDirectoryStream
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 736898 "SimpleFileVisitor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.file.attribute.BasicFileAttributes;
import java.io.IOException;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1001090 // SimpleFileVisitor
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 737026 "StandardCopyOption"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1001218 // StandardCopyOption
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 737154 "StandardOpenOption"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1001346 // StandardOpenOption
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 737282 "WatchEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1000194 // WatchEvent
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 737410 "StandardWatchEventKinds"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1001474 // StandardWatchEventKinds
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 737538 "TempFileHelper"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Set;
import java.util.EnumSet;
import java.security.SecureRandom;
import java.io.IOException;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.PosixFilePermissions;
import sun.security.action.GetPropertyAction;
import static java.security.AccessController.*;
import static java.nio.file.attribute.PosixFilePermission.*;
${definition}"
      associated_elems
	class_ref 1001858 // TempFileHelper
      end
      comment "Copyright (c) 2009, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 737666 "WatchKey"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 1000066 // WatchKey
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 737794 "WatchService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Closeable;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
${definition}"
      associated_elems
	class_ref 997122 // WatchService
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end

  package_ref 182402 // spi
end
