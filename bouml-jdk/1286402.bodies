class JPasswordField
!!!10666754.java!!!	JPasswordField()
        this(null,null,0);
!!!10666882.java!!!	JPasswordField(inout text : String)
        this(null, text, 0);
!!!10667010.java!!!	JPasswordField(in columns : int)
        this(null, null, columns);
!!!10667138.java!!!	JPasswordField(inout text : String, in columns : int)
        this(null, text, columns);
!!!10667266.java!!!	JPasswordField(inout doc : Document, inout txt : String, in columns : int)
        super(doc, txt, columns);
        // We could either leave this on, which wouldn't be secure,
        // or obscure the composted text, which essentially makes displaying
        // it useless. Therefore, we turn off input methods.
        enableInputMethods(false);
!!!10667394.java!!!	getUIClassID() : String
        return uiClassID;
!!!10667522.java!!!	updateUI() : void
        if(!echoCharSet) {
            echoChar = '*';
        }
        super.updateUI();
!!!10667650.java!!!	getEchoChar() : char
        return echoChar;
!!!10667778.java!!!	setEchoChar(in c : char) : void
        echoChar = c;
        echoCharSet = true;
        repaint();
        revalidate();
!!!10667906.java!!!	echoCharIsSet() : boolean
        return echoChar != 0;
!!!10668034.java!!!	cut() : void
        if (getClientProperty("JPasswordField.cutCopyAllowed") != Boolean.TRUE) {
            UIManager.getLookAndFeel().provideErrorFeedback(this);
        } else {
            super.cut();
        }
!!!10668162.java!!!	copy() : void
        if (getClientProperty("JPasswordField.cutCopyAllowed") != Boolean.TRUE) {
            UIManager.getLookAndFeel().provideErrorFeedback(this);
        } else {
            super.copy();
        }
!!!10668290.java!!!	getText() : String
        return super.getText();
!!!10668418.java!!!	getText(in offs : int, in len : int) : String
        return super.getText(offs, len);
!!!10668546.java!!!	getPassword() : char
        Document doc = getDocument();
        Segment txt = new Segment();
        try {
            doc.getText(0, doc.getLength(), txt); // use the non-String API
        } catch (BadLocationException e) {
            return null;
        }
        char[] retValue = new char[txt.count];
        System.arraycopy(txt.array, txt.offset, retValue, 0, txt.count);
        return retValue;
!!!10668674.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
        if (getUIClassID().equals(uiClassID)) {
            byte count = JComponent.getWriteObjCounter(this);
            JComponent.setWriteObjCounter(this, --count);
            if (count == 0 && ui != null) {
                ui.installUI(this);
            }
        }
!!!10668802.java!!!	paramString() : String
        return super.paramString() +
        ",echoChar=" + echoChar;
!!!10668930.java!!!	customSetUIProperty(inout propertyName : String, inout value : Object) : boolean
        if (propertyName == "echoChar") {
            if (!echoCharSet) {
                setEchoChar((Character)value);
                echoCharSet = false;
            }
            return true;
        }
        return false;
!!!10669058.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJPasswordField();
        }
        return accessibleContext;
