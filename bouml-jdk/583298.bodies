class XObject
!!!5831938.java!!!	XObject(inout obj : Object)
    setObject(obj);
!!!5832066.java!!!	setObject(inout obj : Object) : void
      m_obj = obj;
!!!5832194.java!!!	execute(inout xctxt : XPathContext) : XObject
    return this;
!!!5832578.java!!!	destruct() : void

    if (null != m_obj)
    {
      allowDetachToRelease(true);
      detach();

      setObject(null);
    }
!!!5832834.java!!!	dispatchCharactersEvents(inout ch : ContentHandler) : void
    xstr().dispatchCharactersEvents(ch);
!!!5832962.java!!!	create(inout val : Object) : XObject
    return XObjectFactory.create(val);
!!!5833090.java!!!	create(inout val : Object, inout xctxt : XPathContext) : XObject
    return XObjectFactory.create(val, xctxt);
!!!5833218.java!!!	getType() : int
    return CLASS_UNKNOWN;
!!!5833346.java!!!	getTypeString() : String
    return "#UNKNOWN (" + object().getClass().getName() + ")";
!!!5833474.java!!!	num() : double

    error(XPATHErrorResources.ER_CANT_CONVERT_TO_NUMBER,
          new Object[]{ getTypeString() });  //"Can not convert "+getTypeString()+" to a number");

    return 0.0;
!!!5833602.java!!!	numWithSideEffects() : double
    return num();
!!!5833730.java!!!	bool() : boolean

    error(XPATHErrorResources.ER_CANT_CONVERT_TO_NUMBER,
          new Object[]{ getTypeString() });  //"Can not convert "+getTypeString()+" to a number");

    return false;
!!!5833858.java!!!	boolWithSideEffects() : boolean
    return bool();
!!!5833986.java!!!	xstr() : XMLString
    return XMLStringFactoryImpl.getFactory().newstr(str());
!!!5834114.java!!!	str() : String
    return (m_obj != null) ? m_obj.toString() : "";
!!!5834242.java!!!	toString() : String
    return str();
!!!5834370.java!!!	rtf(inout support : XPathContext) : int

    int result = rtf();

    if (DTM.NULL == result)
    {
      DTM frag = support.createDocumentFragment();

      // %OPT%
      frag.appendTextChild(str());

      result = frag.getDocument();
    }

    return result;
!!!5834498.java!!!	rtree(inout support : XPathContext) : DocumentFragment
    DocumentFragment docFrag = null;
    int result = rtf();

    if (DTM.NULL == result)
    {
      DTM frag = support.createDocumentFragment();

      // %OPT%
      frag.appendTextChild(str());

      docFrag = (DocumentFragment)frag.getNode(frag.getDocument());
    }
    else
    {
      DTM frag = support.getDTM(result);
      docFrag = (DocumentFragment)frag.getNode(frag.getDocument());
    }

    return docFrag;
!!!5834626.java!!!	rtree() : DocumentFragment
    return null;
!!!5834754.java!!!	rtf() : int
    return DTM.NULL;
!!!5834882.java!!!	object() : Object
    return m_obj;
!!!5835010.java!!!	iter() : DTMIterator

    error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,
          new Object[]{ getTypeString() });  //"Can not convert "+getTypeString()+" to a NodeList!");

    return null;
!!!5835138.java!!!	getFresh() : XObject
    return this;
!!!5835266.java!!!	nodeset() : NodeIterator

    error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,
          new Object[]{ getTypeString() });  //"Can not convert "+getTypeString()+" to a NodeList!");

    return null;
!!!5835394.java!!!	nodelist() : NodeList

    error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,
          new Object[]{ getTypeString() });  //"Can not convert "+getTypeString()+" to a NodeList!");

    return null;
!!!5835522.java!!!	mutableNodeset() : NodeSetDTM

    error(XPATHErrorResources.ER_CANT_CONVERT_TO_MUTABLENODELIST,
          new Object[]{ getTypeString() });  //"Can not convert "+getTypeString()+" to a NodeSetDTM!");

    return (NodeSetDTM) m_obj;
!!!5835650.java!!!	castToType(in t : int, inout support : XPathContext) : Object

    Object result;

    switch (t)
    {
    case CLASS_STRING :
      result = str();
      break;
    case CLASS_NUMBER :
      result = new Double(num());
      break;
    case CLASS_NODESET :
      result = iter();
      break;
    case CLASS_BOOLEAN :
      result = new Boolean(bool());
      break;
    case CLASS_UNKNOWN :
      result = m_obj;
      break;

    // %TBD%  What to do here?
    //    case CLASS_RTREEFRAG :
    //      result = rtree(support);
    //      break;
    default :
      error(XPATHErrorResources.ER_CANT_CONVERT_TO_TYPE,
            new Object[]{ getTypeString(),
                          Integer.toString(t) });  //"Can not convert "+getTypeString()+" to a type#"+t);

      result = null;
    }

    return result;
!!!5835778.java!!!	lessThan(inout obj2 : XObject) : boolean

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.greaterThan(this);

    return this.num() < obj2.num();
!!!5835906.java!!!	lessThanOrEqual(inout obj2 : XObject) : boolean

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.greaterThanOrEqual(this);

    return this.num() <= obj2.num();
!!!5836034.java!!!	greaterThan(inout obj2 : XObject) : boolean

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.lessThan(this);

    return this.num() > obj2.num();
!!!5836162.java!!!	greaterThanOrEqual(inout obj2 : XObject) : boolean

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.lessThanOrEqual(this);

    return this.num() >= obj2.num();
!!!5836290.java!!!	equals(inout obj2 : XObject) : boolean

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.equals(this);

    if (null != m_obj)
    {
      return m_obj.equals(obj2.m_obj);
    }
    else
    {
      return obj2.m_obj == null;
    }
!!!5836418.java!!!	notEquals(inout obj2 : XObject) : boolean

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.notEquals(this);

    return !equals(obj2);
!!!5836546.java!!!	error(inout msg : String) : void
    error(msg, null);
!!!5836674.java!!!	error(inout msg : String, inout args : Object [[]]) : void

    String fmsg = XSLMessages.createXPATHMessage(msg, args);

    // boolean shouldThrow = support.problem(m_support.XPATHPROCESSOR,
    //                                      m_support.ERROR,
    //                                      null,
    //                                      null, fmsg, 0, 0);
    // if(shouldThrow)
    {
      throw new XPathException(fmsg, this);
    }
!!!5836802.java!!!	fixupVariables(inout vars : Vector, in globalsSize : int) : void
    // no-op
!!!5836930.java!!!	appendToFsb(inout fsb : FastStringBuffer) : void
    fsb.append(str());
!!!5837058.java!!!	callVisitors(inout owner : ExpressionOwner, inout visitor : XPathVisitor) : void
        assertion(false, "callVisitors should not be called for this object!!!");
!!!5837186.java!!!	deepEquals(inout expr : Expression) : boolean
        if(!isSameClass(expr))
                return false;

        // If equals at the expression level calls deepEquals, I think we're
        // still safe from infinite recursion since this object overrides
        // equals.  I hope.
        if(!this.equals((XObject)expr))
                return false;

        return true;
