class Delegate
!!!7975682.java!!!	Delegate(inout digestSpi : MessageDigestSpi, inout algorithm : String)
            super(algorithm);
            this.digestSpi = digestSpi;
!!!7975810.java!!!	clone() : Object
            if (digestSpi instanceof Cloneable) {
                MessageDigestSpi digestSpiClone =
                    (MessageDigestSpi)digestSpi.clone();
                // Because 'algorithm', 'provider', and 'state' are private
                // members of our supertype, we must perform a cast to
                // access them.
                MessageDigest that =
                    new Delegate(digestSpiClone,
                                 ((MessageDigest)this).algorithm);
                that.provider = ((MessageDigest)this).provider;
                that.state = ((MessageDigest)this).state;
                return that;
            } else {
                throw new CloneNotSupportedException();
            }
!!!7975938.java!!!	engineGetDigestLength() : int
            return digestSpi.engineGetDigestLength();
!!!7976066.java!!!	engineUpdate(in input : byte) : void
            digestSpi.engineUpdate(input);
!!!7976194.java!!!	engineUpdate(inout input : byte [[]], in offset : int, in len : int) : void
            digestSpi.engineUpdate(input, offset, len);
!!!7976322.java!!!	engineUpdate(inout input : ByteBuffer) : void
            digestSpi.engineUpdate(input);
!!!7976450.java!!!	engineDigest() : byte
            return digestSpi.engineDigest();
!!!7976578.java!!!	engineDigest(inout buf : byte [[]], in offset : int, in len : int) : int
                return digestSpi.engineDigest(buf, offset, len);
!!!7976706.java!!!	engineReset() : void
            digestSpi.engineReset();
