class NumberFormat
!!!8248450.java!!!	format(inout number : Object, inout toAppendTo : StringBuffer, inout pos : FieldPosition) : StringBuffer
        if (number instanceof Long || number instanceof Integer ||
            number instanceof Short || number instanceof Byte ||
            number instanceof AtomicInteger || number instanceof AtomicLong ||
            (number instanceof BigInteger &&
             ((BigInteger)number).bitLength() < 64)) {
            return format(((Number)number).longValue(), toAppendTo, pos);
        } else if (number instanceof Number) {
            return format(((Number)number).doubleValue(), toAppendTo, pos);
        } else {
            throw new IllegalArgumentException("Cannot format given Object as a Number");
        }
!!!8248578.java!!!	parseObject(inout source : String, inout pos : ParsePosition) : Object
        return parse(source, pos);
!!!8248706.java!!!	format(in number : double) : String
        // Use fast-path for double result if that works
        String result = fastFormat(number);
        if (result != null)
            return result;

        return format(number, new StringBuffer(),
                      DontCareFieldPosition.INSTANCE).toString();
!!!8248834.java!!!	fastFormat(in number : double) : String
 return null;
!!!8248962.java!!!	format(in number : long) : String
        return format(number, new StringBuffer(),
                      DontCareFieldPosition.INSTANCE).toString();
!!!8249474.java!!!	parse(inout source : String) : Number
        ParsePosition parsePosition = new ParsePosition(0);
        Number result = parse(source, parsePosition);
        if (parsePosition.index == 0) {
            throw new ParseException("Unparseable number: \"" + source + "\"",
                                     parsePosition.errorIndex);
        }
        return result;
!!!8249602.java!!!	isParseIntegerOnly() : boolean
        return parseIntegerOnly;
!!!8249730.java!!!	setParseIntegerOnly(inout value : boolean) : void
        parseIntegerOnly = value;
!!!8249858.java!!!	getInstance() : NumberFormat
        return getInstance(Locale.getDefault(Locale.Category.FORMAT), NUMBERSTYLE);
!!!8249986.java!!!	getInstance(inout inLocale : Locale) : NumberFormat
        return getInstance(inLocale, NUMBERSTYLE);
!!!8250114.java!!!	getNumberInstance() : NumberFormat
        return getInstance(Locale.getDefault(Locale.Category.FORMAT), NUMBERSTYLE);
!!!8250242.java!!!	getNumberInstance(inout inLocale : Locale) : NumberFormat
        return getInstance(inLocale, NUMBERSTYLE);
!!!8250370.java!!!	getIntegerInstance() : NumberFormat
        return getInstance(Locale.getDefault(Locale.Category.FORMAT), INTEGERSTYLE);
!!!8250498.java!!!	getIntegerInstance(inout inLocale : Locale) : NumberFormat
        return getInstance(inLocale, INTEGERSTYLE);
!!!8250626.java!!!	getCurrencyInstance() : NumberFormat
        return getInstance(Locale.getDefault(Locale.Category.FORMAT), CURRENCYSTYLE);
!!!8250754.java!!!	getCurrencyInstance(inout inLocale : Locale) : NumberFormat
        return getInstance(inLocale, CURRENCYSTYLE);
!!!8250882.java!!!	getPercentInstance() : NumberFormat
        return getInstance(Locale.getDefault(Locale.Category.FORMAT), PERCENTSTYLE);
!!!8251010.java!!!	getPercentInstance(inout inLocale : Locale) : NumberFormat
        return getInstance(inLocale, PERCENTSTYLE);
!!!8251138.java!!!	getScientificInstance() : NumberFormat
        return getInstance(Locale.getDefault(Locale.Category.FORMAT), SCIENTIFICSTYLE);
!!!8251266.java!!!	getScientificInstance(inout inLocale : Locale) : NumberFormat
        return getInstance(inLocale, SCIENTIFICSTYLE);
!!!8251394.java!!!	getAvailableLocales() : Locale
        LocaleServiceProviderPool pool =
            LocaleServiceProviderPool.getPool(NumberFormatProvider.class);
        return pool.getAvailableLocales();
!!!8251522.java!!!	hashCode() : int
        return maximumIntegerDigits * 37 + maxFractionDigits;
        // just enough fields for a reasonable distribution
!!!8251650.java!!!	equals(inout obj : Object) : boolean
        if (obj == null) {
            return false;
        }
        if (this == obj) {
            return true;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        NumberFormat other = (NumberFormat) obj;
        return (maximumIntegerDigits == other.maximumIntegerDigits
            && minimumIntegerDigits == other.minimumIntegerDigits
            && maximumFractionDigits == other.maximumFractionDigits
            && minimumFractionDigits == other.minimumFractionDigits
            && groupingUsed == other.groupingUsed
            && parseIntegerOnly == other.parseIntegerOnly);
!!!8251778.java!!!	clone() : Object
        NumberFormat other = (NumberFormat) super.clone();
        return other;
!!!8251906.java!!!	isGroupingUsed() : boolean
        return groupingUsed;
!!!8252034.java!!!	setGroupingUsed(inout newValue : boolean) : void
        groupingUsed = newValue;
!!!8252162.java!!!	getMaximumIntegerDigits() : int
        return maximumIntegerDigits;
!!!8252290.java!!!	setMaximumIntegerDigits(in newValue : int) : void
        maximumIntegerDigits = Math.max(0,newValue);
        if (minimumIntegerDigits > maximumIntegerDigits) {
            minimumIntegerDigits = maximumIntegerDigits;
        }
!!!8252418.java!!!	getMinimumIntegerDigits() : int
        return minimumIntegerDigits;
!!!8252546.java!!!	setMinimumIntegerDigits(in newValue : int) : void
        minimumIntegerDigits = Math.max(0,newValue);
        if (minimumIntegerDigits > maximumIntegerDigits) {
            maximumIntegerDigits = minimumIntegerDigits;
        }
!!!8252674.java!!!	getMaximumFractionDigits() : int
        return maximumFractionDigits;
!!!8252802.java!!!	setMaximumFractionDigits(in newValue : int) : void
        maximumFractionDigits = Math.max(0,newValue);
        if (maximumFractionDigits < minimumFractionDigits) {
            minimumFractionDigits = maximumFractionDigits;
        }
!!!8252930.java!!!	getMinimumFractionDigits() : int
        return minimumFractionDigits;
!!!8253058.java!!!	setMinimumFractionDigits(in newValue : int) : void
        minimumFractionDigits = Math.max(0,newValue);
        if (maximumFractionDigits < minimumFractionDigits) {
            maximumFractionDigits = minimumFractionDigits;
        }
!!!8253186.java!!!	getCurrency() : Currency
        throw new UnsupportedOperationException();
!!!8253314.java!!!	setCurrency(inout currency : Currency) : void
        throw new UnsupportedOperationException();
!!!8253442.java!!!	getRoundingMode() : RoundingMode
        throw new UnsupportedOperationException();
!!!8253570.java!!!	setRoundingMode(inout roundingMode : RoundingMode) : void
        throw new UnsupportedOperationException();
!!!8253698.java!!!	getInstance(inout desiredLocale : Locale, in choice : int) : NumberFormat
        LocaleProviderAdapter adapter;
        adapter = LocaleProviderAdapter.getAdapter(NumberFormatProvider.class,
                                                   desiredLocale);
        NumberFormat numberFormat = getInstance(adapter, desiredLocale, choice);
        if (numberFormat == null) {
            numberFormat = getInstance(LocaleProviderAdapter.forJRE(),
                                       desiredLocale, choice);
        }
        return numberFormat;
!!!8253826.java!!!	getInstance(inout adapter : LocaleProviderAdapter, inout locale : Locale, in choice : int) : NumberFormat
        NumberFormatProvider provider = adapter.getNumberFormatProvider();
        NumberFormat numberFormat = null;
        switch (choice) {
        case NUMBERSTYLE:
            numberFormat = provider.getNumberInstance(locale);
            break;
        case PERCENTSTYLE:
            numberFormat = provider.getPercentInstance(locale);
            break;
        case CURRENCYSTYLE:
            numberFormat = provider.getCurrencyInstance(locale);
            break;
        case INTEGERSTYLE:
            numberFormat = provider.getIntegerInstance(locale);
            break;
        }
        return numberFormat;
!!!8253954.java!!!	readObject(inout stream : ObjectInputStream) : void
        stream.defaultReadObject();
        if (serialVersionOnStream < 1) {
            // Didn't have additional int fields, reassign to use them.
            maximumIntegerDigits = maxIntegerDigits;
            minimumIntegerDigits = minIntegerDigits;
            maximumFractionDigits = maxFractionDigits;
            minimumFractionDigits = minFractionDigits;
        }
        if (minimumIntegerDigits > maximumIntegerDigits ||
            minimumFractionDigits > maximumFractionDigits ||
            minimumIntegerDigits < 0 || minimumFractionDigits < 0) {
            throw new InvalidObjectException("Digit count range invalid");
        }
        serialVersionOnStream = currentSerialVersion;
!!!8254082.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        maxIntegerDigits = (maximumIntegerDigits > Byte.MAX_VALUE) ?
                           Byte.MAX_VALUE : (byte)maximumIntegerDigits;
        minIntegerDigits = (minimumIntegerDigits > Byte.MAX_VALUE) ?
                           Byte.MAX_VALUE : (byte)minimumIntegerDigits;
        maxFractionDigits = (maximumFractionDigits > Byte.MAX_VALUE) ?
                            Byte.MAX_VALUE : (byte)maximumFractionDigits;
        minFractionDigits = (minimumFractionDigits > Byte.MAX_VALUE) ?
                            Byte.MAX_VALUE : (byte)minimumFractionDigits;
        stream.defaultWriteObject();
